
enclave.so:     file format elf64-x86-64


Disassembly of section .plt:

0000000000000640 <.plt>:
 640:	ff 35 32 49 23 00    	pushq  0x234932(%rip)        # 234f78 <_GLOBAL_OFFSET_TABLE_+0x8>
 646:	ff 25 34 49 23 00    	jmpq   *0x234934(%rip)        # 234f80 <_GLOBAL_OFFSET_TABLE_+0x10>
 64c:	0f 1f 40 00          	nopl   0x0(%rax)

Disassembly of section .plt.got:

0000000000000650 <_Z9pcl_entryPvS_@plt>:
 650:	ff 25 5a 49 23 00    	jmpq   *0x23495a(%rip)        # 234fb0 <_Z9pcl_entryPvS_>
 656:	66 90                	xchg   %ax,%ax

0000000000000658 <ippcpSetCpuFeatures@plt>:
 658:	ff 25 8a 49 23 00    	jmpq   *0x23498a(%rip)        # 234fe8 <ippcpSetCpuFeatures>
 65e:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000000680 <sgx_rtm_test1>:
typedef struct ms_Ocall_PrintString_t {
	const char* ms_str;
} ms_Ocall_PrintString_t;

static sgx_status_t SGX_CDECL sgx_rtm_test1(void* pms)
{
     680:	55                   	push   %rbp
     681:	48 89 e5             	mov    %rsp,%rbp
     684:	48 83 ec 20          	sub    $0x20,%rsp
     688:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	sgx_status_t status = SGX_SUCCESS;
     68c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	if (pms != NULL) return SGX_ERROR_INVALID_PARAMETER;
     693:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
     698:	74 07                	je     6a1 <sgx_rtm_test1+0x21>
     69a:	b8 02 00 00 00       	mov    $0x2,%eax
     69f:	eb 08                	jmp    6a9 <sgx_rtm_test1+0x29>
	rtm_test1();
     6a1:	e8 bd 02 00 00       	callq  963 <rtm_test1>
	return status;
     6a6:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
     6a9:	c9                   	leaveq 
     6aa:	c3                   	retq   

00000000000006ab <sgx_rtm_test2>:

static sgx_status_t SGX_CDECL sgx_rtm_test2(void* pms)
{
     6ab:	55                   	push   %rbp
     6ac:	48 89 e5             	mov    %rsp,%rbp
     6af:	48 83 ec 20          	sub    $0x20,%rsp
     6b3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	sgx_status_t status = SGX_SUCCESS;
     6b7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	if (pms != NULL) return SGX_ERROR_INVALID_PARAMETER;
     6be:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
     6c3:	74 07                	je     6cc <sgx_rtm_test2+0x21>
     6c5:	b8 02 00 00 00       	mov    $0x2,%eax
     6ca:	eb 08                	jmp    6d4 <sgx_rtm_test2+0x29>
	rtm_test2();
     6cc:	e8 07 03 00 00       	callq  9d8 <rtm_test2>
	return status;
     6d1:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
     6d4:	c9                   	leaveq 
     6d5:	c3                   	retq   

00000000000006d6 <sgx_rtm_test3>:

static sgx_status_t SGX_CDECL sgx_rtm_test3(void* pms)
{
     6d6:	55                   	push   %rbp
     6d7:	48 89 e5             	mov    %rsp,%rbp
     6da:	48 83 ec 20          	sub    $0x20,%rsp
     6de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	sgx_status_t status = SGX_SUCCESS;
     6e2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	if (pms != NULL) return SGX_ERROR_INVALID_PARAMETER;
     6e9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
     6ee:	74 07                	je     6f7 <sgx_rtm_test3+0x21>
     6f0:	b8 02 00 00 00       	mov    $0x2,%eax
     6f5:	eb 08                	jmp    6ff <sgx_rtm_test3+0x29>
	rtm_test3();
     6f7:	e8 61 03 00 00       	callq  a5d <rtm_test3>
	return status;
     6fc:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
     6ff:	c9                   	leaveq 
     700:	c3                   	retq   

0000000000000701 <Ocall_PrintString>:
	}
};


sgx_status_t SGX_CDECL Ocall_PrintString(const char* str)
{
     701:	55                   	push   %rbp
     702:	48 89 e5             	mov    %rsp,%rbp
     705:	48 83 ec 40          	sub    $0x40,%rsp
     709:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	sgx_status_t status = SGX_SUCCESS;
     70d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
	size_t _len_str = str ? strlen(str) + 1 : 0;
     714:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
     719:	74 12                	je     72d <Ocall_PrintString+0x2c>
     71b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     71f:	48 89 c7             	mov    %rax,%rdi
     722:	e8 13 e8 00 00       	callq  ef3a <strlen>
     727:	48 83 c0 01          	add    $0x1,%rax
     72b:	eb 05                	jmp    732 <Ocall_PrintString+0x31>
     72d:	b8 00 00 00 00       	mov    $0x0,%eax
     732:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	ms_Ocall_PrintString_t* ms = NULL;
     736:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
     73d:	00 
	size_t ocalloc_size = sizeof(ms_Ocall_PrintString_t);
     73e:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
     745:	00 
	void *__tmp = NULL;
     746:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
     74d:	00 


	CHECK_ENCLAVE_POINTER(str, _len_str);
     74e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
     753:	74 21                	je     776 <Ocall_PrintString+0x75>
     755:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
     759:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     75d:	48 89 d6             	mov    %rdx,%rsi
     760:	48 89 c7             	mov    %rax,%rdi
     763:	e8 a8 05 00 00       	callq  d10 <sgx_is_within_enclave>
     768:	85 c0                	test   %eax,%eax
     76a:	75 0a                	jne    776 <Ocall_PrintString+0x75>
     76c:	b8 02 00 00 00       	mov    $0x2,%eax
     771:	e9 f1 00 00 00       	jmpq   867 <Ocall_PrintString+0x166>

	if (ADD_ASSIGN_OVERFLOW(ocalloc_size, (str != NULL) ? _len_str : 0))
     776:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
     77b:	74 06                	je     783 <Ocall_PrintString+0x82>
     77d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     781:	eb 05                	jmp    788 <Ocall_PrintString+0x87>
     783:	b8 00 00 00 00       	mov    $0x0,%eax
     788:	48 01 45 f0          	add    %rax,-0x10(%rbp)
     78c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
     791:	74 06                	je     799 <Ocall_PrintString+0x98>
     793:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     797:	eb 05                	jmp    79e <Ocall_PrintString+0x9d>
     799:	b8 00 00 00 00       	mov    $0x0,%eax
     79e:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
     7a2:	73 0a                	jae    7ae <Ocall_PrintString+0xad>
		return SGX_ERROR_INVALID_PARAMETER;
     7a4:	b8 02 00 00 00       	mov    $0x2,%eax
     7a9:	e9 b9 00 00 00       	jmpq   867 <Ocall_PrintString+0x166>

	__tmp = sgx_ocalloc(ocalloc_size);
     7ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     7b2:	48 89 c7             	mov    %rax,%rdi
     7b5:	e8 76 06 00 00       	callq  e30 <sgx_ocalloc>
     7ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (__tmp == NULL) {
     7be:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
     7c3:	75 0f                	jne    7d4 <Ocall_PrintString+0xd3>
		sgx_ocfree();
     7c5:	e8 77 07 00 00       	callq  f41 <sgx_ocfree>
		return SGX_ERROR_UNEXPECTED;
     7ca:	b8 01 00 00 00       	mov    $0x1,%eax
     7cf:	e9 93 00 00 00       	jmpq   867 <Ocall_PrintString+0x166>
	}
	ms = (ms_Ocall_PrintString_t*)__tmp;
     7d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     7d8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	__tmp = (void *)((size_t)__tmp + sizeof(ms_Ocall_PrintString_t));
     7dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     7e0:	48 83 c0 08          	add    $0x8,%rax
     7e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ocalloc_size -= sizeof(ms_Ocall_PrintString_t);
     7e8:	48 83 6d f0 08       	subq   $0x8,-0x10(%rbp)

	if (str != NULL) {
     7ed:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
     7f2:	74 4c                	je     840 <Ocall_PrintString+0x13f>
		ms->ms_str = (const char*)__tmp;
     7f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     7f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
     7fc:	48 89 10             	mov    %rdx,(%rax)
		if (_len_str % sizeof(*str) != 0) {
			sgx_ocfree();
			return SGX_ERROR_INVALID_PARAMETER;
		}
		if (memcpy_s(__tmp, ocalloc_size, str, _len_str)) {
     7ff:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
     803:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
     807:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
     80b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     80f:	48 89 c7             	mov    %rax,%rdi
     812:	e8 6e e8 00 00       	callq  f085 <memcpy_s>
     817:	85 c0                	test   %eax,%eax
     819:	74 0c                	je     827 <Ocall_PrintString+0x126>
			sgx_ocfree();
     81b:	e8 21 07 00 00       	callq  f41 <sgx_ocfree>
			return SGX_ERROR_UNEXPECTED;
     820:	b8 01 00 00 00       	mov    $0x1,%eax
     825:	eb 40                	jmp    867 <Ocall_PrintString+0x166>
		}
		__tmp = (void *)((size_t)__tmp + _len_str);
     827:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
     82b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     82f:	48 01 d0             	add    %rdx,%rax
     832:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ocalloc_size -= _len_str;
     836:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     83a:	48 29 45 f0          	sub    %rax,-0x10(%rbp)
     83e:	eb 0b                	jmp    84b <Ocall_PrintString+0x14a>
	} else {
		ms->ms_str = NULL;
     840:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     844:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	}
	
	status = sgx_ocall(0, ms);
     84b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     84f:	48 89 c6             	mov    %rax,%rsi
     852:	bf 00 00 00 00       	mov    $0x0,%edi
     857:	e8 1d 27 00 00       	callq  2f79 <sgx_ocall>
     85c:	89 45 dc             	mov    %eax,-0x24(%rbp)

	if (status == SGX_SUCCESS) {
	}
	sgx_ocfree();
     85f:	e8 dd 06 00 00       	callq  f41 <sgx_ocfree>
	return status;
     864:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
     867:	c9                   	leaveq 
     868:	c3                   	retq   

0000000000000869 <_Z14PrintDebugInfoPKcz>:
#include "Enclave.h"
#include "Enclave_t.h"
#include "rtm.h"

void PrintDebugInfo(const char *fmt, ...)
{
     869:	55                   	push   %rbp
     86a:	48 89 e5             	mov    %rsp,%rbp
     86d:	48 81 ec f0 20 00 00 	sub    $0x20f0,%rsp
     874:	48 89 bd 18 df ff ff 	mov    %rdi,-0x20e8(%rbp)
     87b:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
     882:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
     889:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
     890:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
     897:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
     89e:	84 c0                	test   %al,%al
     8a0:	74 20                	je     8c2 <_Z14PrintDebugInfoPKcz+0x59>
     8a2:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
     8a6:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
     8aa:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
     8ae:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
     8b2:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
     8b6:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
     8ba:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
     8be:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
     8c2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     8c9:	00 00 
     8cb:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
     8d2:	31 c0                	xor    %eax,%eax
	char buf[BUFSIZ] = {'\0'};
     8d4:	48 8d 95 40 df ff ff 	lea    -0x20c0(%rbp),%rdx
     8db:	b8 00 00 00 00       	mov    $0x0,%eax
     8e0:	b9 00 04 00 00       	mov    $0x400,%ecx
     8e5:	48 89 d7             	mov    %rdx,%rdi
     8e8:	f3 48 ab             	rep stos %rax,%es:(%rdi)
	va_list ap;
	va_start(ap, fmt);
     8eb:	c7 85 28 df ff ff 08 	movl   $0x8,-0x20d8(%rbp)
     8f2:	00 00 00 
     8f5:	c7 85 2c df ff ff 30 	movl   $0x30,-0x20d4(%rbp)
     8fc:	00 00 00 
     8ff:	48 8d 45 10          	lea    0x10(%rbp),%rax
     903:	48 89 85 30 df ff ff 	mov    %rax,-0x20d0(%rbp)
     90a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     911:	48 89 85 38 df ff ff 	mov    %rax,-0x20c8(%rbp)
	vsnprintf(buf, BUFSIZ, fmt, ap);
     918:	48 8d 8d 28 df ff ff 	lea    -0x20d8(%rbp),%rcx
     91f:	48 8b 95 18 df ff ff 	mov    -0x20e8(%rbp),%rdx
     926:	48 8d 85 40 df ff ff 	lea    -0x20c0(%rbp),%rax
     92d:	be 00 20 00 00       	mov    $0x2000,%esi
     932:	48 89 c7             	mov    %rax,%rdi
     935:	e8 1a e6 00 00       	callq  ef54 <vsnprintf>
	va_end(ap);
	Ocall_PrintString(buf);
     93a:	48 8d 85 40 df ff ff 	lea    -0x20c0(%rbp),%rax
     941:	48 89 c7             	mov    %rax,%rdi
     944:	e8 b8 fd ff ff       	callq  701 <Ocall_PrintString>
}
     949:	90                   	nop
     94a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     951:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
     958:	00 00 
     95a:	74 05                	je     961 <_Z14PrintDebugInfoPKcz+0xf8>
     95c:	e8 37 46 00 00       	callq  4f98 <__stack_chk_fail>
     961:	c9                   	leaveq 
     962:	c3                   	retq   

0000000000000963 <rtm_test1>:
void rtm_test1(){
     963:	55                   	push   %rbp
     964:	48 89 e5             	mov    %rsp,%rbp
     967:	48 83 ec 10          	sub    $0x10,%rsp
	int mutex = 0;
     96b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int status;

	PrintDebugInfo("--- test 1 ---\n");
     972:	48 8d 3d 97 f6 02 00 	lea    0x2f697(%rip),%rdi        # 30010 <g_dyn_entry_table+0x10>
     979:	b8 00 00 00 00       	mov    $0x0,%eax
     97e:	e8 e6 fe ff ff       	callq  869 <_Z14PrintDebugInfoPKcz>

#define __rtm_force_inline __attribute__((__always_inline__)) inline

static __rtm_force_inline int _xbegin(void)
{
	int ret = _XBEGIN_STARTED;
     983:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
	asm volatile(".byte 0xc7,0xf8 ; .long 0" : "+a" (ret) :: "memory");
     98a:	8b 45 fc             	mov    -0x4(%rbp),%eax
     98d:	c7 f8 00 00 00 00    	xbeginq 993 <rtm_test1+0x30>
     993:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return ret;
     996:	8b 45 fc             	mov    -0x4(%rbp),%eax
	if ((status = _xbegin()) == _XBEGIN_STARTED) {
     999:	89 45 f8             	mov    %eax,-0x8(%rbp)
     99c:	83 7d f8 ff          	cmpl   $0xffffffff,-0x8(%rbp)
     9a0:	0f 94 c0             	sete   %al
     9a3:	84 c0                	test   %al,%al
     9a5:	74 0c                	je     9b3 <rtm_test1+0x50>
		mutex = 1;
     9a7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
     9ae:	0f 01 d5             	xend   
}

static __rtm_force_inline void _xend(void)
{
	 asm volatile(".byte 0x0f,0x01,0xd5" ::: "memory");
     9b1:	eb 11                	jmp    9c4 <rtm_test1+0x61>
		_xend();
	} else {
		PrintDebugInfo("trans failed...\n");
     9b3:	48 8d 3d 66 f6 02 00 	lea    0x2f666(%rip),%rdi        # 30020 <g_dyn_entry_table+0x20>
     9ba:	b8 00 00 00 00       	mov    $0x0,%eax
     9bf:	e8 a5 fe ff ff       	callq  869 <_Z14PrintDebugInfoPKcz>
	}
	PrintDebugInfo("trans finished.\n");
     9c4:	48 8d 3d 66 f6 02 00 	lea    0x2f666(%rip),%rdi        # 30031 <g_dyn_entry_table+0x31>
     9cb:	b8 00 00 00 00       	mov    $0x0,%eax
     9d0:	e8 94 fe ff ff       	callq  869 <_Z14PrintDebugInfoPKcz>
}
     9d5:	90                   	nop
     9d6:	c9                   	leaveq 
     9d7:	c3                   	retq   

00000000000009d8 <rtm_test2>:

void rtm_test2(){
     9d8:	55                   	push   %rbp
     9d9:	48 89 e5             	mov    %rsp,%rbp
     9dc:	48 83 ec 10          	sub    $0x10,%rsp
	int mutex = 0;
     9e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int status;
	
	PrintDebugInfo("--- test 2 ---\n");
     9e7:	48 8d 3d 54 f6 02 00 	lea    0x2f654(%rip),%rdi        # 30042 <g_dyn_entry_table+0x42>
     9ee:	b8 00 00 00 00       	mov    $0x0,%eax
     9f3:	e8 71 fe ff ff       	callq  869 <_Z14PrintDebugInfoPKcz>
	int ret = _XBEGIN_STARTED;
     9f8:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
	asm volatile(".byte 0xc7,0xf8 ; .long 0" : "+a" (ret) :: "memory");
     9ff:	8b 45 fc             	mov    -0x4(%rbp),%eax
     a02:	c7 f8 00 00 00 00    	xbeginq a08 <rtm_test2+0x30>
     a08:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return ret;
     a0b:	8b 45 fc             	mov    -0x4(%rbp),%eax
	if ((status = _xbegin()) == _XBEGIN_STARTED) {
     a0e:	89 45 f8             	mov    %eax,-0x8(%rbp)
     a11:	83 7d f8 ff          	cmpl   $0xffffffff,-0x8(%rbp)
     a15:	0f 94 c0             	sete   %al
     a18:	84 c0                	test   %al,%al
     a1a:	74 0f                	je     a2b <rtm_test2+0x53>
		mutex = 2;
     a1c:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%rbp)
     a23:	c6 f8 01             	xabort $0x1
		_xabort(1);
     a26:	0f 01 d5             	xend   
	}
	else {
		PrintDebugInfo("entering fallback:\n");
		PrintDebugInfo("aborted status %x, # %d\n", status, _XABORT_CODE(status));
	}
}
     a29:	eb 2f                	jmp    a5a <rtm_test2+0x82>
		PrintDebugInfo("entering fallback:\n");
     a2b:	48 8d 3d 20 f6 02 00 	lea    0x2f620(%rip),%rdi        # 30052 <g_dyn_entry_table+0x52>
     a32:	b8 00 00 00 00       	mov    $0x0,%eax
     a37:	e8 2d fe ff ff       	callq  869 <_Z14PrintDebugInfoPKcz>
		PrintDebugInfo("aborted status %x, # %d\n", status, _XABORT_CODE(status));
     a3c:	8b 45 f8             	mov    -0x8(%rbp),%eax
     a3f:	c1 e8 18             	shr    $0x18,%eax
     a42:	89 c2                	mov    %eax,%edx
     a44:	8b 45 f8             	mov    -0x8(%rbp),%eax
     a47:	89 c6                	mov    %eax,%esi
     a49:	48 8d 3d 16 f6 02 00 	lea    0x2f616(%rip),%rdi        # 30066 <g_dyn_entry_table+0x66>
     a50:	b8 00 00 00 00       	mov    $0x0,%eax
     a55:	e8 0f fe ff ff       	callq  869 <_Z14PrintDebugInfoPKcz>
}
     a5a:	90                   	nop
     a5b:	c9                   	leaveq 
     a5c:	c3                   	retq   

0000000000000a5d <rtm_test3>:

void rtm_test3(){
     a5d:	55                   	push   %rbp
     a5e:	48 89 e5             	mov    %rsp,%rbp
     a61:	48 83 ec 20          	sub    $0x20,%rsp
	int mutex = 0;
     a65:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	int status;
	int nonce = 0;
     a6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int xtest_status = 0;
     a73:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	
	PrintDebugInfo("--- test 3 ---\n");
     a7a:	48 8d 3d fe f5 02 00 	lea    0x2f5fe(%rip),%rdi        # 3007f <g_dyn_entry_table+0x7f>
     a81:	b8 00 00 00 00       	mov    $0x0,%eax
     a86:	e8 de fd ff ff       	callq  869 <_Z14PrintDebugInfoPKcz>
	int ret = _XBEGIN_STARTED;
     a8b:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
	asm volatile(".byte 0xc7,0xf8 ; .long 0" : "+a" (ret) :: "memory");
     a92:	8b 45 fc             	mov    -0x4(%rbp),%eax
     a95:	c7 f8 00 00 00 00    	xbeginq a9b <rtm_test3+0x3e>
     a9b:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return ret;
     a9e:	8b 45 fc             	mov    -0x4(%rbp),%eax
	if ((status = _xbegin()) == _XBEGIN_STARTED) {
     aa1:	89 45 f8             	mov    %eax,-0x8(%rbp)
     aa4:	83 7d f8 ff          	cmpl   $0xffffffff,-0x8(%rbp)
     aa8:	0f 94 c0             	sete   %al
     aab:	84 c0                	test   %al,%al
     aad:	74 2b                	je     ada <rtm_test3+0x7d>
     aaf:	0f 01 d6             	xtest  
	asm volatile(".byte 0xc6,0xf8,%P0" :: "i" (status) : "memory")

static __rtm_force_inline int _xtest(void)
{
	unsigned char out;
	asm volatile(".byte 0x0f,0x01,0xd6 ; setnz %0" : "=r" (out) :: "memory");
     ab2:	0f 95 c0             	setne  %al
     ab5:	88 45 ea             	mov    %al,-0x16(%rbp)
	return out;
     ab8:	0f b6 45 ea          	movzbl -0x16(%rbp),%eax
		if (_xtest()) {
     abc:	85 c0                	test   %eax,%eax
     abe:	0f 95 c0             	setne  %al
     ac1:	84 c0                	test   %al,%al
     ac3:	74 10                	je     ad5 <rtm_test3+0x78>
     ac5:	0f 01 d6             	xtest  
	asm volatile(".byte 0x0f,0x01,0xd6 ; setnz %0" : "=r" (out) :: "memory");
     ac8:	0f 95 c0             	setne  %al
     acb:	88 45 eb             	mov    %al,-0x15(%rbp)
	return out;
     ace:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
			xtest_status = _xtest();
     ad2:	89 45 ec             	mov    %eax,-0x14(%rbp)
     ad5:	0f 01 d5             	xend   
	 asm volatile(".byte 0x0f,0x01,0xd5" ::: "memory");
     ad8:	eb 1e                	jmp    af8 <rtm_test3+0x9b>
		}
		_xend();
	} else
		PrintDebugInfo("aborted status %x, # %d\n", status, _XABORT_CODE(status));
     ada:	8b 45 f8             	mov    -0x8(%rbp),%eax
     add:	c1 e8 18             	shr    $0x18,%eax
     ae0:	89 c2                	mov    %eax,%edx
     ae2:	8b 45 f8             	mov    -0x8(%rbp),%eax
     ae5:	89 c6                	mov    %eax,%esi
     ae7:	48 8d 3d 78 f5 02 00 	lea    0x2f578(%rip),%rdi        # 30066 <g_dyn_entry_table+0x66>
     aee:	b8 00 00 00 00       	mov    $0x0,%eax
     af3:	e8 71 fd ff ff       	callq  869 <_Z14PrintDebugInfoPKcz>
	PrintDebugInfo("testing if in a trans..., xtest_status: %d\n", xtest_status);
     af8:	8b 45 ec             	mov    -0x14(%rbp),%eax
     afb:	89 c6                	mov    %eax,%esi
     afd:	48 8d 3d 8c f5 02 00 	lea    0x2f58c(%rip),%rdi        # 30090 <g_dyn_entry_table+0x90>
     b04:	b8 00 00 00 00       	mov    $0x0,%eax
     b09:	e8 5b fd ff ff       	callq  869 <_Z14PrintDebugInfoPKcz>
}
     b0e:	90                   	nop
     b0f:	c9                   	leaveq 
     b10:	c3                   	retq   

0000000000000b11 <_ZL28set_global_feature_indicatormm>:
extern "C" int sgx_init_string_lib(uint64_t cpu_feature_indicator);
extern "C" sgx_status_t sgx_init_crypto_lib(uint64_t cpu_feature_indicator, uint32_t *cpuinfo_table);


static int set_global_feature_indicator(uint64_t feature_bit_array, uint64_t xfrm)
{
     b11:	55                   	push   %rbp
     b12:	48 89 e5             	mov    %rsp,%rbp
     b15:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
     b19:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    // Confirm the reserved bits and the unset bits by uRTS must be 0.
    
    
    if(feature_bit_array & (RESERVED_CPU_FEATURE_BIT))
     b1d:	48 b8 00 00 00 00 00 	movabs $0xff00000000000000,%rax
     b24:	00 00 ff 
     b27:	48 23 45 f8          	and    -0x8(%rbp),%rax
     b2b:	48 85 c0             	test   %rax,%rax
     b2e:	74 0e                	je     b3e <_ZL28set_global_feature_indicatormm+0x2d>
    {
        // clear the reserved bits
        feature_bit_array = feature_bit_array & (~(RESERVED_CPU_FEATURE_BIT));
     b30:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
     b37:	ff ff 00 
     b3a:	48 21 45 f8          	and    %rax,-0x8(%rbp)
    }

    // Requires SSE4.1. Take SSE4.1 as the baseline.
    if(!(feature_bit_array & ~(CPU_FEATURE_SSE4_1 - 1)))
     b3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     b42:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
     b48:	48 85 c0             	test   %rax,%rax
     b4b:	75 0a                	jne    b57 <_ZL28set_global_feature_indicatormm+0x46>
    {
        return -1;
     b4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     b52:	e9 02 01 00 00       	jmpq   c59 <_ZL28set_global_feature_indicatormm+0x148>
    }

    // Check for inconsistencies in the CPUID feature mask.
    if ( (((feature_bit_array & CPU_FEATURE_SSE) == CPU_FEATURE_SSE) &&((feature_bit_array & (CPU_FEATURE_SSE - 1)) != (CPU_FEATURE_SSE - 1))) || 
     b57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     b5b:	83 e0 20             	and    $0x20,%eax
     b5e:	48 85 c0             	test   %rax,%rax
     b61:	74 11                	je     b74 <_ZL28set_global_feature_indicatormm+0x63>
     b63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     b67:	83 e0 1f             	and    $0x1f,%eax
     b6a:	48 83 f8 1f          	cmp    $0x1f,%rax
     b6e:	0f 85 8f 00 00 00    	jne    c03 <_ZL28set_global_feature_indicatormm+0xf2>
        (((feature_bit_array & CPU_FEATURE_SSE2) == CPU_FEATURE_SSE2) &&((feature_bit_array & (CPU_FEATURE_SSE2 - 1)) != (CPU_FEATURE_SSE2 - 1))) ||
     b74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     b78:	83 e0 40             	and    $0x40,%eax
    if ( (((feature_bit_array & CPU_FEATURE_SSE) == CPU_FEATURE_SSE) &&((feature_bit_array & (CPU_FEATURE_SSE - 1)) != (CPU_FEATURE_SSE - 1))) || 
     b7b:	48 85 c0             	test   %rax,%rax
     b7e:	74 0d                	je     b8d <_ZL28set_global_feature_indicatormm+0x7c>
        (((feature_bit_array & CPU_FEATURE_SSE2) == CPU_FEATURE_SSE2) &&((feature_bit_array & (CPU_FEATURE_SSE2 - 1)) != (CPU_FEATURE_SSE2 - 1))) ||
     b80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     b84:	83 e0 3f             	and    $0x3f,%eax
     b87:	48 83 f8 3f          	cmp    $0x3f,%rax
     b8b:	75 76                	jne    c03 <_ZL28set_global_feature_indicatormm+0xf2>
        (((feature_bit_array & CPU_FEATURE_SSE3) == CPU_FEATURE_SSE3) &&((feature_bit_array & (CPU_FEATURE_SSE3 - 1)) != (CPU_FEATURE_SSE3 - 1))) ||
     b8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     b91:	25 80 00 00 00       	and    $0x80,%eax
        (((feature_bit_array & CPU_FEATURE_SSE2) == CPU_FEATURE_SSE2) &&((feature_bit_array & (CPU_FEATURE_SSE2 - 1)) != (CPU_FEATURE_SSE2 - 1))) ||
     b96:	48 85 c0             	test   %rax,%rax
     b99:	74 0d                	je     ba8 <_ZL28set_global_feature_indicatormm+0x97>
        (((feature_bit_array & CPU_FEATURE_SSE3) == CPU_FEATURE_SSE3) &&((feature_bit_array & (CPU_FEATURE_SSE3 - 1)) != (CPU_FEATURE_SSE3 - 1))) ||
     b9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     b9f:	83 e0 7f             	and    $0x7f,%eax
     ba2:	48 83 f8 7f          	cmp    $0x7f,%rax
     ba6:	75 5b                	jne    c03 <_ZL28set_global_feature_indicatormm+0xf2>
        (((feature_bit_array & CPU_FEATURE_SSSE3) == CPU_FEATURE_SSSE3) && ((feature_bit_array & (CPU_FEATURE_SSSE3 - 1)) != (CPU_FEATURE_SSSE3 - 1))) ||
     ba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     bac:	25 00 01 00 00       	and    $0x100,%eax
        (((feature_bit_array & CPU_FEATURE_SSE3) == CPU_FEATURE_SSE3) &&((feature_bit_array & (CPU_FEATURE_SSE3 - 1)) != (CPU_FEATURE_SSE3 - 1))) ||
     bb1:	48 85 c0             	test   %rax,%rax
     bb4:	74 0f                	je     bc5 <_ZL28set_global_feature_indicatormm+0xb4>
        (((feature_bit_array & CPU_FEATURE_SSSE3) == CPU_FEATURE_SSSE3) && ((feature_bit_array & (CPU_FEATURE_SSSE3 - 1)) != (CPU_FEATURE_SSSE3 - 1))) ||
     bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     bba:	0f b6 c0             	movzbl %al,%eax
     bbd:	48 3d ff 00 00 00    	cmp    $0xff,%rax
     bc3:	75 3e                	jne    c03 <_ZL28set_global_feature_indicatormm+0xf2>
        (((feature_bit_array & CPU_FEATURE_SSE4_1) == CPU_FEATURE_SSE4_1) && ((feature_bit_array & (CPU_FEATURE_SSE4_1 - 1)) != (CPU_FEATURE_SSE4_1 - 1))) ||
     bc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     bc9:	25 00 02 00 00       	and    $0x200,%eax
        (((feature_bit_array & CPU_FEATURE_SSSE3) == CPU_FEATURE_SSSE3) && ((feature_bit_array & (CPU_FEATURE_SSSE3 - 1)) != (CPU_FEATURE_SSSE3 - 1))) ||
     bce:	48 85 c0             	test   %rax,%rax
     bd1:	74 11                	je     be4 <_ZL28set_global_feature_indicatormm+0xd3>
        (((feature_bit_array & CPU_FEATURE_SSE4_1) == CPU_FEATURE_SSE4_1) && ((feature_bit_array & (CPU_FEATURE_SSE4_1 - 1)) != (CPU_FEATURE_SSE4_1 - 1))) ||
     bd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     bd7:	25 ff 01 00 00       	and    $0x1ff,%eax
     bdc:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
     be2:	75 1f                	jne    c03 <_ZL28set_global_feature_indicatormm+0xf2>
        (((feature_bit_array & CPU_FEATURE_SSE4_2) == CPU_FEATURE_SSE4_2) && ((feature_bit_array & (CPU_FEATURE_SSE4_2 - 1)) != (CPU_FEATURE_SSE4_2 - 1))) )
     be4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     be8:	25 00 04 00 00       	and    $0x400,%eax
        (((feature_bit_array & CPU_FEATURE_SSE4_1) == CPU_FEATURE_SSE4_1) && ((feature_bit_array & (CPU_FEATURE_SSE4_1 - 1)) != (CPU_FEATURE_SSE4_1 - 1))) ||
     bed:	48 85 c0             	test   %rax,%rax
     bf0:	74 18                	je     c0a <_ZL28set_global_feature_indicatormm+0xf9>
        (((feature_bit_array & CPU_FEATURE_SSE4_2) == CPU_FEATURE_SSE4_2) && ((feature_bit_array & (CPU_FEATURE_SSE4_2 - 1)) != (CPU_FEATURE_SSE4_2 - 1))) )
     bf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     bf6:	25 ff 03 00 00       	and    $0x3ff,%eax
     bfb:	48 3d ff 03 00 00    	cmp    $0x3ff,%rax
     c01:	74 07                	je     c0a <_ZL28set_global_feature_indicatormm+0xf9>
    {
        return -1;
     c03:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     c08:	eb 4f                	jmp    c59 <_ZL28set_global_feature_indicatormm+0x148>
    }

    // Determine whether the OS & ENCLAVE support SAVE/RESTORE of the AVX register set
    // IF NOT, clear the advanced feature set bits corresponding to AVX and beyond
    if(!XFEATURE_ENABLED_AVX(xfrm))
     c0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     c0e:	83 e0 06             	and    $0x6,%eax
     c11:	48 83 f8 06          	cmp    $0x6,%rax
     c15:	74 10                	je     c27 <_ZL28set_global_feature_indicatormm+0x116>
    {
        // AVX is disabled by OS, so clear the AVX related feature bits
	feature_bit_array &= (~(CPU_FEATURE_AVX | CPU_FEATURE_VAES | CPU_FEATURE_VPCLMULQDQ | CPU_FEATURE_F16C | CPU_FEATURE_AVX2 |
     c17:	48 b8 ff 7f 12 86 08 	movabs $0xfffe200886127fff,%rax
     c1e:	20 fe ff 
     c21:	48 21 45 f8          	and    %rax,-0x8(%rbp)
     c25:	eb 1f                	jmp    c46 <_ZL28set_global_feature_indicatormm+0x135>
            CPU_FEATURE_AVX512F | CPU_FEATURE_AVX512CD | CPU_FEATURE_AVX512ER | CPU_FEATURE_AVX512PF | CPU_FEATURE_AVX512DQ | CPU_FEATURE_AVX512BW |
            CPU_FEATURE_AVX512VL | CPU_FEATURE_AVX512IFMA52 | CPU_FEATURE_AVX512VBMI | CPU_FEATURE_AVX512_VPOPCNTDQ | CPU_FEATURE_AVX512_4VNNIW |
            CPU_FEATURE_AVX512_4FMAPS | CPU_FEATURE_AVX512_BITALG | CPU_FEATURE_AVX512_VBMI2 | CPU_FEATURE_AVX512_VNNI));
    }

    else if (!XFEATURE_ENABLED_AVX3(xfrm))
     c27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     c2b:	25 e0 00 00 00       	and    $0xe0,%eax
     c30:	48 3d e0 00 00 00    	cmp    $0xe0,%rax
     c36:	74 0e                	je     c46 <_ZL28set_global_feature_indicatormm+0x135>
    {
        feature_bit_array &= (~(CPU_FEATURE_AVX512F | CPU_FEATURE_AVX512CD | CPU_FEATURE_AVX512ER | CPU_FEATURE_AVX512PF | CPU_FEATURE_AVX512DQ |
     c38:	48 b8 ff ff ff b6 18 	movabs $0xfffee018b6ffffff,%rax
     c3f:	e0 fe ff 
     c42:	48 21 45 f8          	and    %rax,-0x8(%rbp)
            CPU_FEATURE_AVX512BW | CPU_FEATURE_AVX512VL | CPU_FEATURE_AVX512IFMA52 | CPU_FEATURE_AVX512VBMI | CPU_FEATURE_AVX512_VPOPCNTDQ |
            CPU_FEATURE_AVX512_4VNNIW | CPU_FEATURE_AVX512_4FMAPS | CPU_FEATURE_AVX512_BITALG | CPU_FEATURE_AVX512_VBMI2 | CPU_FEATURE_AVX512_VNNI));
    }

    g_cpu_feature_indicator = feature_bit_array;
     c46:	48 8d 05 4b 41 23 00 	lea    0x23414b(%rip),%rax        # 234d98 <g_cpu_feature_indicator>
     c4d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
     c51:	48 89 10             	mov    %rdx,(%rax)
    return 0;
     c54:	b8 00 00 00 00       	mov    $0x0,%eax
}
     c59:	5d                   	pop    %rbp
     c5a:	c3                   	retq   

0000000000000c5b <init_optimized_libs>:

extern "C" int init_optimized_libs(const uint64_t feature_bit_array, uint32_t *cpuinfo_table, uint64_t xfrm)
{
     c5b:	55                   	push   %rbp
     c5c:	48 89 e5             	mov    %rsp,%rbp
     c5f:	48 83 ec 20          	sub    $0x20,%rsp
     c63:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
     c67:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
     c6b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if (g_enclave_state != ENCLAVE_INIT_IN_PROGRESS)
     c6f:	48 8d 05 ae 4c 23 00 	lea    0x234cae(%rip),%rax        # 235924 <g_enclave_state>
     c76:	8b 00                	mov    (%rax),%eax
     c78:	83 f8 01             	cmp    $0x1,%eax
     c7b:	74 07                	je     c84 <init_optimized_libs+0x29>
    {
        return -1;
     c7d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     c82:	eb 73                	jmp    cf7 <init_optimized_libs+0x9c>
    }
    // set the global feature indicator
    if(set_global_feature_indicator(feature_bit_array, xfrm))
     c84:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
     c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     c8c:	48 89 d6             	mov    %rdx,%rsi
     c8f:	48 89 c7             	mov    %rax,%rdi
     c92:	e8 7a fe ff ff       	callq  b11 <_ZL28set_global_feature_indicatormm>
     c97:	85 c0                	test   %eax,%eax
     c99:	0f 95 c0             	setne  %al
     c9c:	84 c0                	test   %al,%al
     c9e:	74 07                	je     ca7 <init_optimized_libs+0x4c>
    {
        return -1;
     ca0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     ca5:	eb 50                	jmp    cf7 <init_optimized_libs+0x9c>
    }

    // Init string library with the global feature indicator
    if(sgx_init_string_lib(g_cpu_feature_indicator) != 0)
     ca7:	48 8d 05 ea 40 23 00 	lea    0x2340ea(%rip),%rax        # 234d98 <g_cpu_feature_indicator>
     cae:	48 8b 00             	mov    (%rax),%rax
     cb1:	48 89 c7             	mov    %rax,%rdi
     cb4:	e8 a3 e1 00 00       	callq  ee5c <sgx_init_string_lib>
     cb9:	85 c0                	test   %eax,%eax
     cbb:	0f 95 c0             	setne  %al
     cbe:	84 c0                	test   %al,%al
     cc0:	74 07                	je     cc9 <init_optimized_libs+0x6e>
    {
        return -1;
     cc2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     cc7:	eb 2e                	jmp    cf7 <init_optimized_libs+0x9c>
    }

    // Init IPP crypto library with the global feature indicator	
    if(sgx_init_crypto_lib(g_cpu_feature_indicator, cpuinfo_table) != 0)
     cc9:	48 8d 05 c8 40 23 00 	lea    0x2340c8(%rip),%rax        # 234d98 <g_cpu_feature_indicator>
     cd0:	48 8b 00             	mov    (%rax),%rax
     cd3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
     cd7:	48 89 d6             	mov    %rdx,%rsi
     cda:	48 89 c7             	mov    %rax,%rdi
     cdd:	e8 9e e2 02 00       	callq  2ef80 <sgx_init_crypto_lib>
     ce2:	85 c0                	test   %eax,%eax
     ce4:	0f 95 c0             	setne  %al
     ce7:	84 c0                	test   %al,%al
     ce9:	74 07                	je     cf2 <init_optimized_libs+0x97>
    {
        return -1;
     ceb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     cf0:	eb 05                	jmp    cf7 <init_optimized_libs+0x9c>
    }

    return 0;
     cf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
     cf7:	c9                   	leaveq 
     cf8:	c3                   	retq   

0000000000000cf9 <trts_access_version_dummy1>:

#ifndef SE_SIM

#include "se_cdefs.h"
// add a version to trts
SGX_ACCESS_VERSION(trts, 1);
     cf9:	55                   	push   %rbp
     cfa:	48 89 e5             	mov    %rsp,%rbp
     cfd:	48 8d 05 0c 43 23 00 	lea    0x23430c(%rip),%rax        # 235010 <sgx_trts_version>
     d04:	c6 00 73             	movb   $0x73,(%rax)
     d07:	48 8d 05 02 43 23 00 	lea    0x234302(%rip),%rax        # 235010 <sgx_trts_version>
     d0e:	5d                   	pop    %rbp
     d0f:	c3                   	retq   

0000000000000d10 <sgx_is_within_enclave>:
//      1 - the buffer is strictly within the enclave
//      0 - the whole buffer or part of the buffer is not within the enclave,
//          or the buffer is wrap around
//
int sgx_is_within_enclave(const void *addr, size_t size)
{
     d10:	55                   	push   %rbp
     d11:	48 89 e5             	mov    %rsp,%rbp
     d14:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
     d18:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    size_t start = reinterpret_cast<size_t>(addr);
     d1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     d20:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    size_t end = 0;
     d24:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
     d2b:	00 
    size_t enclave_start = (size_t)&__ImageBase;
     d2c:	48 8d 05 cd f2 ff ff 	lea    -0xd33(%rip),%rax        # 0 <enclave.so>
     d33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    size_t enclave_end = enclave_start + g_global_data.enclave_size - 1;
     d37:	48 8d 05 02 03 03 00 	lea    0x30302(%rip),%rax        # 31040 <g_global_data>
     d3e:	48 8b 10             	mov    (%rax),%rdx
     d41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     d45:	48 01 d0             	add    %rdx,%rax
     d48:	48 83 e8 01          	sub    $0x1,%rax
     d4c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    // g_global_data.enclave_end = enclave_base + enclave_size - 1;
    // so the enclave range is [enclave_start, enclave_end] inclusively

    if(size > 0)
     d50:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
     d55:	74 15                	je     d6c <sgx_is_within_enclave+0x5c>
    {
        end = start + size - 1;
     d57:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
     d5b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
     d5f:	48 01 d0             	add    %rdx,%rax
     d62:	48 83 e8 01          	sub    $0x1,%rax
     d66:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
     d6a:	eb 08                	jmp    d74 <sgx_is_within_enclave+0x64>
    }
    else
    {
        end = start;
     d6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     d70:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    }
    if( (start <= end) && (start >= enclave_start) && (end <= enclave_end) )
     d74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     d78:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
     d7c:	77 1b                	ja     d99 <sgx_is_within_enclave+0x89>
     d7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     d82:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
     d86:	72 11                	jb     d99 <sgx_is_within_enclave+0x89>
     d88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     d8c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
     d90:	77 07                	ja     d99 <sgx_is_within_enclave+0x89>
    {
        return 1;
     d92:	b8 01 00 00 00       	mov    $0x1,%eax
     d97:	eb 05                	jmp    d9e <sgx_is_within_enclave+0x8e>
    }
    return 0;
     d99:	b8 00 00 00 00       	mov    $0x0,%eax
}
     d9e:	5d                   	pop    %rbp
     d9f:	c3                   	retq   

0000000000000da0 <sgx_is_outside_enclave>:
//      1 - the buffer is strictly outside the enclave
//      0 - the whole buffer or part of the buffer is not outside the enclave,
//          or the buffer is wrap around
//
int sgx_is_outside_enclave(const void *addr, size_t size)
{
     da0:	55                   	push   %rbp
     da1:	48 89 e5             	mov    %rsp,%rbp
     da4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
     da8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    size_t start = reinterpret_cast<size_t>(addr);
     dac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     db0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    size_t end = 0;
     db4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
     dbb:	00 
    size_t enclave_start = (size_t)&__ImageBase;
     dbc:	48 8d 05 3d f2 ff ff 	lea    -0xdc3(%rip),%rax        # 0 <enclave.so>
     dc3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    size_t enclave_end = enclave_start + g_global_data.enclave_size - 1;
     dc7:	48 8d 05 72 02 03 00 	lea    0x30272(%rip),%rax        # 31040 <g_global_data>
     dce:	48 8b 10             	mov    (%rax),%rdx
     dd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     dd5:	48 01 d0             	add    %rdx,%rax
     dd8:	48 83 e8 01          	sub    $0x1,%rax
     ddc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    // g_global_data.enclave_end = enclave_base + enclave_size - 1;
    // so the enclave range is [enclave_start, enclave_end] inclusively

    if(size > 0)
     de0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
     de5:	74 15                	je     dfc <sgx_is_outside_enclave+0x5c>
    {
        end = start + size - 1;
     de7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
     deb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
     def:	48 01 d0             	add    %rdx,%rax
     df2:	48 83 e8 01          	sub    $0x1,%rax
     df6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
     dfa:	eb 08                	jmp    e04 <sgx_is_outside_enclave+0x64>
    }
    else
    {
        end = start;
     dfc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e00:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    }
    if( (start <= end) && ((end < enclave_start) || (start > enclave_end)) )
     e04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e08:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
     e0c:	77 1b                	ja     e29 <sgx_is_outside_enclave+0x89>
     e0e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     e12:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
     e16:	72 0a                	jb     e22 <sgx_is_outside_enclave+0x82>
     e18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e1c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
     e20:	76 07                	jbe    e29 <sgx_is_outside_enclave+0x89>
    {
        return 1;
     e22:	b8 01 00 00 00       	mov    $0x1,%eax
     e27:	eb 05                	jmp    e2e <sgx_is_outside_enclave+0x8e>
    }
    return 0;
     e29:	b8 00 00 00 00       	mov    $0x0,%eax
}
     e2e:	5d                   	pop    %rbp
     e2f:	c3                   	retq   

0000000000000e30 <sgx_ocalloc>:
// When ECALL or exception handling returns, the stack pointer is set as the value in the ECALL stack frame and then EEXIT,
// so the outside stack is automatically unwind.
// In addition, sgx_ocalloc needs perform outside stack probe to make sure it is not allocating beyond the end of the stack.
#define OC_ROUND 16
void * sgx_ocalloc(size_t size)
{
     e30:	55                   	push   %rbp
     e31:	48 89 e5             	mov    %rsp,%rbp
     e34:	48 83 ec 40          	sub    $0x40,%rsp
     e38:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    // read the outside stack address from current SSA
    thread_data_t *thread_data = get_thread_data();
     e3c:	e8 51 ee 02 00       	callq  2fc92 <get_thread_data>
     e41:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    ssa_gpr_t *ssa_gpr = reinterpret_cast<ssa_gpr_t *>(thread_data->first_ssa_gpr);
     e45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     e49:	48 8b 40 20          	mov    0x20(%rax),%rax
     e4d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    size_t addr = ssa_gpr->REG(sp_u);
     e51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     e55:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
     e5c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    // check u_rsp points to the untrusted address.
    // if the check fails, it should be hacked. call abort directly
    if(!sgx_is_outside_enclave(reinterpret_cast<void *>(addr), sizeof(size_t)))
     e60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e64:	be 08 00 00 00       	mov    $0x8,%esi
     e69:	48 89 c7             	mov    %rax,%rdi
     e6c:	e8 2f ff ff ff       	callq  da0 <sgx_is_outside_enclave>
     e71:	85 c0                	test   %eax,%eax
     e73:	0f 94 c0             	sete   %al
     e76:	84 c0                	test   %al,%al
     e78:	74 05                	je     e7f <sgx_ocalloc+0x4f>
    {
        abort();
     e7a:	e8 0f f1 02 00       	callq  2ff8e <abort>
    }

    // size is too large to allocate. call abort() directly.
    if(addr < size)
     e7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e83:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
     e87:	73 05                	jae    e8e <sgx_ocalloc+0x5e>
    {
        abort();
     e89:	e8 00 f1 02 00       	callq  2ff8e <abort>
    }

    // calculate the start address for the allocated memory
    addr -= size;
     e8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     e92:	48 29 45 e8          	sub    %rax,-0x18(%rbp)
    addr &= ~(static_cast<size_t>(OC_ROUND - 1));  // for stack alignment
     e96:	48 83 65 e8 f0       	andq   $0xfffffffffffffff0,-0x18(%rbp)

    // the allocated memory has overlap with enclave, abort the enclave
    if(!sgx_is_outside_enclave(reinterpret_cast<void *>(addr), size))
     e9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e9f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
     ea3:	48 89 d6             	mov    %rdx,%rsi
     ea6:	48 89 c7             	mov    %rax,%rdi
     ea9:	e8 f2 fe ff ff       	callq  da0 <sgx_is_outside_enclave>
     eae:	85 c0                	test   %eax,%eax
     eb0:	0f 94 c0             	sete   %al
     eb3:	84 c0                	test   %al,%al
     eb5:	74 05                	je     ebc <sgx_ocalloc+0x8c>
    {
        abort();
     eb7:	e8 d2 f0 02 00       	callq  2ff8e <abort>

    // probe the outside stack to ensure that we do not skip over the stack3 guard page
    // we need to probe all the pages including the first page and the last page
    // the first page need to be probed in case uRTS didnot touch that page before EENTER enclave
    // the last page need to be probed in case the enclave didnot touch that page before another OCALLOC
    size_t first_page = TRIM_TO_PAGE(ssa_gpr->REG(sp_u) - 1);
     ebc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     ec0:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
     ec7:	48 83 e8 01          	sub    $0x1,%rax
     ecb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
     ed1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    size_t last_page = TRIM_TO_PAGE(addr);
     ed5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     ed9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
     edf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    // To avoid the dead-loop in the following for(...) loop.
    // Attacker might fake a stack address that is within address 0x4095.
    if (last_page == 0)
     ee3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
     ee8:	75 05                	jne    eef <sgx_ocalloc+0xbf>
    {
        abort();
     eea:	e8 9f f0 02 00       	callq  2ff8e <abort>
    }

    // the compiler may optimize the following code to probe the pages in any order
    // while we only expect the probe order should be from higher addr to lower addr
    // so use volatile to avoid optimization by the compiler
    for(volatile size_t page = first_page; page >= last_page; page -= SE_PAGE_SIZE)
     eef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     ef3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
     ef7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
     efb:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
     eff:	0f 96 c0             	setbe  %al
     f02:	84 c0                	test   %al,%al
     f04:	74 26                	je     f2c <sgx_ocalloc+0xfc>
    {
        // OS may refuse to commit a physical page if the page fault address is smaller than RSP
        // So update the outside stack address before probe the page
        ssa_gpr->REG(sp_u) = page;
     f06:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
     f0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     f0e:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)

        *reinterpret_cast<uint8_t *>(page) = 0;
     f15:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
     f19:	c6 00 00             	movb   $0x0,(%rax)
    for(volatile size_t page = first_page; page >= last_page; page -= SE_PAGE_SIZE)
     f1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
     f20:	48 2d 00 10 00 00    	sub    $0x1000,%rax
     f26:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
     f2a:	eb cb                	jmp    ef7 <sgx_ocalloc+0xc7>
    }

    // update the outside stack address in the SSA to the allocated address
    ssa_gpr->REG(sp_u) = addr;
     f2c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     f30:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
     f34:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)

    return reinterpret_cast<void *>(addr);
     f3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
     f3f:	c9                   	leaveq 
     f40:	c3                   	retq   

0000000000000f41 <sgx_ocfree>:
// Return Value:
//      N/A
// sgx_ocfree restores the original outside stack pointer in the SSA.
// Do not call this function if you still need the buffer allocated by sgx_ocalloc within the ECALL.
void sgx_ocfree()
{
     f41:	55                   	push   %rbp
     f42:	48 89 e5             	mov    %rsp,%rbp
     f45:	48 83 ec 20          	sub    $0x20,%rsp
    //                       -------------
    //                      | ret_addr    |
    //                      | xbp_u       |
    //                      | xsp_u       |

    thread_data_t *thread_data = get_thread_data();
     f49:	e8 44 ed 02 00       	callq  2fc92 <get_thread_data>
     f4e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ssa_gpr_t *ssa_gpr = reinterpret_cast<ssa_gpr_t *>(thread_data->first_ssa_gpr);
     f52:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     f56:	48 8b 40 20          	mov    0x20(%rax),%rax
     f5a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    uintptr_t *addr = reinterpret_cast<uintptr_t *>(thread_data->last_sp);
     f5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     f62:	48 8b 40 08          	mov    0x8(%rax),%rax
     f66:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    uintptr_t usp = *(addr - 3);
     f6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     f6e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
     f72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if(!sgx_is_outside_enclave(reinterpret_cast<void *>(usp), sizeof(uintptr_t)))
     f76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     f7a:	be 08 00 00 00       	mov    $0x8,%esi
     f7f:	48 89 c7             	mov    %rax,%rdi
     f82:	e8 19 fe ff ff       	callq  da0 <sgx_is_outside_enclave>
     f87:	85 c0                	test   %eax,%eax
     f89:	0f 94 c0             	sete   %al
     f8c:	84 c0                	test   %al,%al
     f8e:	74 05                	je     f95 <sgx_ocfree+0x54>
    {
        abort();
     f90:	e8 f9 ef 02 00       	callq  2ff8e <abort>
    }
    ssa_gpr->REG(sp_u) = usp;
     f95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     f99:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
     f9d:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
}
     fa4:	90                   	nop
     fa5:	c9                   	leaveq 
     fa6:	c3                   	retq   

0000000000000fa7 <_ZL15__do_get_rand32Pj>:
    return n;
}
#endif

static sgx_status_t  __do_get_rand32(uint32_t* rand_num)
{
     fa7:	55                   	push   %rbp
     fa8:	48 89 e5             	mov    %rsp,%rbp
     fab:	48 83 ec 10          	sub    $0x10,%rsp
     faf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
#ifndef SE_SIM
    /* We expect the CPU has RDRAND support for HW mode. Otherwise, an exception will be thrown
    * do_rdrand() will try to call RDRAND for 10 times
    */
    if(0 == do_rdrand(rand_num))
     fb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     fb7:	48 89 c7             	mov    %rax,%rdi
     fba:	e8 b0 ef 02 00       	callq  2ff6f <do_rdrand>
     fbf:	85 c0                	test   %eax,%eax
     fc1:	0f 94 c0             	sete   %al
     fc4:	84 c0                	test   %al,%al
     fc6:	74 07                	je     fcf <_ZL15__do_get_rand32Pj+0x28>
        return SGX_ERROR_UNEXPECTED;
     fc8:	b8 01 00 00 00       	mov    $0x1,%eax
     fcd:	eb 05                	jmp    fd4 <_ZL15__do_get_rand32Pj+0x2d>
    {
        /*  use LCG in simulation mode */
        *rand_num = get_rand_lcg();
    }
#endif
    return SGX_SUCCESS;
     fcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
     fd4:	c9                   	leaveq 
     fd5:	c3                   	retq   

0000000000000fd6 <sgx_read_rand>:

sgx_status_t sgx_read_rand(unsigned char *rand, size_t length_in_bytes)
{
     fd6:	55                   	push   %rbp
     fd7:	48 89 e5             	mov    %rsp,%rbp
     fda:	48 83 ec 30          	sub    $0x30,%rsp
     fde:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
     fe2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
     fe6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     fed:	00 00 
     fef:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
     ff3:	31 c0                	xor    %eax,%eax
    // check parameters
    //
    // rand can be within or outside the enclave
    if(!rand || !length_in_bytes)
     ff5:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
     ffa:	74 07                	je     1003 <sgx_read_rand+0x2d>
     ffc:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    1001:	75 0a                	jne    100d <sgx_read_rand+0x37>
    {
        return SGX_ERROR_INVALID_PARAMETER;
    1003:	b8 02 00 00 00       	mov    $0x2,%eax
    1008:	e9 cc 00 00 00       	jmpq   10d9 <sgx_read_rand+0x103>
    }
    if(!sgx_is_within_enclave(rand, length_in_bytes) && !sgx_is_outside_enclave(rand, length_in_bytes))
    100d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    1011:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1015:	48 89 d6             	mov    %rdx,%rsi
    1018:	48 89 c7             	mov    %rax,%rdi
    101b:	e8 f0 fc ff ff       	callq  d10 <sgx_is_within_enclave>
    1020:	85 c0                	test   %eax,%eax
    1022:	75 1e                	jne    1042 <sgx_read_rand+0x6c>
    1024:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    1028:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    102c:	48 89 d6             	mov    %rdx,%rsi
    102f:	48 89 c7             	mov    %rax,%rdi
    1032:	e8 69 fd ff ff       	callq  da0 <sgx_is_outside_enclave>
    1037:	85 c0                	test   %eax,%eax
    1039:	75 07                	jne    1042 <sgx_read_rand+0x6c>
    103b:	b8 01 00 00 00       	mov    $0x1,%eax
    1040:	eb 05                	jmp    1047 <sgx_read_rand+0x71>
    1042:	b8 00 00 00 00       	mov    $0x0,%eax
    1047:	84 c0                	test   %al,%al
    1049:	74 0a                	je     1055 <sgx_read_rand+0x7f>
    {
        return SGX_ERROR_INVALID_PARAMETER;
    104b:	b8 02 00 00 00       	mov    $0x2,%eax
    1050:	e9 84 00 00 00       	jmpq   10d9 <sgx_read_rand+0x103>
    }
    // loop to rdrand
    uint32_t rand_num = 0;
    1055:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
    while(length_in_bytes > 0)
    105c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    1061:	74 56                	je     10b9 <sgx_read_rand+0xe3>
    {
        sgx_status_t status = __do_get_rand32(&rand_num);
    1063:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    1067:	48 89 c7             	mov    %rax,%rdi
    106a:	e8 38 ff ff ff       	callq  fa7 <_ZL15__do_get_rand32Pj>
    106f:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if(status != SGX_SUCCESS)
    1072:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
    1076:	74 05                	je     107d <sgx_read_rand+0xa7>
        {
            return status;
    1078:	8b 45 ec             	mov    -0x14(%rbp),%eax
    107b:	eb 5c                	jmp    10d9 <sgx_read_rand+0x103>
        }

        size_t size = (length_in_bytes < sizeof(rand_num)) ? length_in_bytes : sizeof(rand_num);
    107d:	b8 04 00 00 00       	mov    $0x4,%eax
    1082:	48 83 7d d0 04       	cmpq   $0x4,-0x30(%rbp)
    1087:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
    108c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        memcpy(rand, &rand_num, size);
    1090:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    1094:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
    1098:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    109c:	48 89 ce             	mov    %rcx,%rsi
    109f:	48 89 c7             	mov    %rax,%rdi
    10a2:	e8 43 d7 00 00       	callq  e7ea <memcpy>

        rand += size;
    10a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    10ab:	48 01 45 d8          	add    %rax,-0x28(%rbp)
        length_in_bytes -= size;
    10af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    10b3:	48 29 45 d0          	sub    %rax,-0x30(%rbp)
    while(length_in_bytes > 0)
    10b7:	eb a3                	jmp    105c <sgx_read_rand+0x86>
    }
    memset_s(&rand_num, sizeof(rand_num), 0, sizeof(rand_num));
    10b9:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    10bd:	b9 04 00 00 00       	mov    $0x4,%ecx
    10c2:	ba 00 00 00 00       	mov    $0x0,%edx
    10c7:	be 04 00 00 00       	mov    $0x4,%esi
    10cc:	48 89 c7             	mov    %rax,%rdi
    10cf:	e8 b4 d7 00 00       	callq  e888 <memset_s>
    return SGX_SUCCESS;
    10d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
    10d9:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    10dd:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    10e4:	00 00 
    10e6:	74 05                	je     10ed <sgx_read_rand+0x117>
    10e8:	e8 ab 3e 00 00       	callq  4f98 <__stack_chk_fail>
    10ed:	c9                   	leaveq 
    10ee:	c3                   	retq   

00000000000010ef <check_static_stack_canary>:
    return get_enclave_state() == ENCLAVE_CRASHED;
}

extern uintptr_t __stack_chk_guard;
int check_static_stack_canary(void *tcs)
{
    10ef:	55                   	push   %rbp
    10f0:	48 89 e5             	mov    %rsp,%rbp
    10f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    size_t *canary = TCS2CANARY(tcs);
    10f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    10fb:	48 2d a8 02 01 00    	sub    $0x102a8,%rax
    1101:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if ( *canary != (size_t)__stack_chk_guard)
    1105:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1109:	48 8b 10             	mov    (%rax),%rdx
    110c:	48 8d 05 95 3c 23 00 	lea    0x233c95(%rip),%rax        # 234da8 <__intel_security_cookie>
    1113:	48 8b 00             	mov    (%rax),%rax
    1116:	48 39 c2             	cmp    %rax,%rdx
    1119:	74 07                	je     1122 <check_static_stack_canary+0x33>
    {
        return -1;
    111b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1120:	eb 05                	jmp    1127 <check_static_stack_canary+0x38>
    }
    return 0;
    1122:	b8 00 00 00 00       	mov    $0x0,%eax
}
    1127:	5d                   	pop    %rbp
    1128:	c3                   	retq   

0000000000001129 <random_stack_notify_gdb>:

void random_stack_notify_gdb(void *addr, size_t size)
{
    1129:	55                   	push   %rbp
    112a:	48 89 e5             	mov    %rsp,%rbp
    112d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1131:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    UNUSED(addr);
    UNUSED(size);
}
    1135:	90                   	nop
    1136:	5d                   	pop    %rbp
    1137:	c3                   	retq   

0000000000001138 <memcpy_s>:
#ifdef __cplusplus
    extern "C" {
#endif

static inline errno_t memcpy_s(void *dest, size_t numberOfElements, const void *src, size_t count)
{
    1138:	55                   	push   %rbp
    1139:	48 89 e5             	mov    %rsp,%rbp
    113c:	48 83 ec 20          	sub    $0x20,%rsp
    1140:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1144:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    1148:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    114c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    if(numberOfElements<count)
    1150:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1154:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    1158:	73 07                	jae    1161 <memcpy_s+0x29>
        return -1;
    115a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    115f:	eb 1c                	jmp    117d <memcpy_s+0x45>
    memcpy(dest, src, count);
    1161:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    1165:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1169:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    116d:	48 89 ce             	mov    %rcx,%rsi
    1170:	48 89 c7             	mov    %rax,%rdi
    1173:	e8 72 d6 00 00       	callq  e7ea <memcpy>
    return 0;
    1178:	b8 00 00 00 00       	mov    $0x0,%eax
}
    117d:	c9                   	leaveq 
    117e:	c3                   	retq   

000000000000117f <_ZL19sgx_accept_backwardmmm>:
    uint16_t    attributes;
};

// Low level API to EACCEPT pages on grow-up region.
static int sgx_accept_backward(si_flags_t sfl, size_t lo, size_t hi)
{
    117f:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    1184:	48 83 e4 c0          	and    $0xffffffffffffffc0,%rsp
    1188:	41 ff 72 f8          	pushq  -0x8(%r10)
    118c:	55                   	push   %rbp
    118d:	48 89 e5             	mov    %rsp,%rbp
    1190:	41 52                	push   %r10
    1192:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    1199:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    11a0:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    11a7:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    11ae:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    11b5:	00 00 
    11b7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    11bb:	31 c0                	xor    %eax,%eax
    size_t addr = hi;
    11bd:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    11c4:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    SE_DECLSPEC_ALIGN(sizeof(sec_info_t)) sec_info_t si;
    si.flags = sfl;
    11cb:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    11d2:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    for (uint16_t i = 0; i < (sizeof(si.reserved)/sizeof(si.reserved[0])); i++)
    11d9:	66 c7 85 42 ff ff ff 	movw   $0x0,-0xbe(%rbp)
    11e0:	00 00 
    11e2:	66 83 bd 42 ff ff ff 	cmpw   $0x6,-0xbe(%rbp)
    11e9:	06 
    11ea:	77 28                	ja     1214 <_ZL19sgx_accept_backwardmmm+0x95>
        si.reserved[i] = 0;
    11ec:	0f b7 85 42 ff ff ff 	movzwl -0xbe(%rbp),%eax
    11f3:	48 98                	cltq   
    11f5:	48 c7 84 c5 58 ff ff 	movq   $0x0,-0xa8(%rbp,%rax,8)
    11fc:	ff 00 00 00 00 
    for (uint16_t i = 0; i < (sizeof(si.reserved)/sizeof(si.reserved[0])); i++)
    1201:	0f b7 85 42 ff ff ff 	movzwl -0xbe(%rbp),%eax
    1208:	83 c0 01             	add    $0x1,%eax
    120b:	66 89 85 42 ff ff ff 	mov    %ax,-0xbe(%rbp)
    1212:	eb ce                	jmp    11e2 <_ZL19sgx_accept_backwardmmm+0x63>

    while (lo < addr)
    1214:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    121b:	48 3b 85 48 ff ff ff 	cmp    -0xb8(%rbp),%rax
    1222:	73 38                	jae    125c <_ZL19sgx_accept_backwardmmm+0xdd>
    {
        int rc = do_eaccept(&si, addr -= SE_PAGE_SIZE);
    1224:	48 81 ad 48 ff ff ff 	subq   $0x1000,-0xb8(%rbp)
    122b:	00 10 00 00 
    122f:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1236:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    123d:	48 89 d6             	mov    %rdx,%rsi
    1240:	48 89 c7             	mov    %rax,%rdi
    1243:	e8 f8 ec 02 00       	callq  2ff40 <do_eaccept>
    1248:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
        if (rc != 0)
    124e:	83 bd 44 ff ff ff 00 	cmpl   $0x0,-0xbc(%rbp)
    1255:	74 bd                	je     1214 <_ZL19sgx_accept_backwardmmm+0x95>
            abort();
    1257:	e8 32 ed 02 00       	callq  2ff8e <abort>
    }
    return 0;
    125c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    1261:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    1265:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    126c:	00 00 
    126e:	74 05                	je     1275 <_ZL19sgx_accept_backwardmmm+0xf6>
    1270:	e8 23 3d 00 00       	callq  4f98 <__stack_chk_fail>
    1275:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    127c:	41 5a                	pop    %r10
    127e:	5d                   	pop    %rbp
    127f:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    1283:	c3                   	retq   

0000000000001284 <_ZL35sgx_accept_forward_within_exceptionmm>:

// Low level API to EACCEPT pages on grow-up region during exception handling.
static int sgx_accept_forward_within_exception(size_t lo, size_t hi)
{
    1284:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    1289:	48 83 e4 c0          	and    $0xffffffffffffffc0,%rsp
    128d:	41 ff 72 f8          	pushq  -0x8(%r10)
    1291:	55                   	push   %rbp
    1292:	48 89 e5             	mov    %rsp,%rbp
    1295:	41 52                	push   %r10
    1297:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    129e:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
    12a5:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
    12ac:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    12b3:	00 00 
    12b5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    12b9:	31 c0                	xor    %eax,%eax
    size_t addr = lo;
    12bb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    12c2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    SE_DECLSPEC_ALIGN(sizeof(sec_info_t)) sec_info_t si;

#ifdef DEBUG
    unsigned int sp_value = 0;
    12c9:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)
    12d0:	00 00 00 
    asm("mov %%esp, %0;" : "=r" (sp_value) :);
    12d3:	89 e0                	mov    %esp,%eax
    12d5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
    if ((sp_value & (SE_PAGE_SIZE -1)) <= (SE_PAGE_SIZE - (STATIC_STACK_SIZE % SE_PAGE_SIZE)))
    12db:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    12e1:	25 ff 0f 00 00       	and    $0xfff,%eax
    12e6:	3d 50 0d 00 00       	cmp    $0xd50,%eax
    12eb:	77 0a                	ja     12f7 <_ZL35sgx_accept_forward_within_exceptionmm+0x73>
        return SGX_ERROR_UNEXPECTED;
    12ed:	b8 01 00 00 00       	mov    $0x1,%eax
    12f2:	e9 95 00 00 00       	jmpq   138c <_ZL35sgx_accept_forward_within_exceptionmm+0x108>
#endif

    si.flags = SI_FLAGS_RW | SI_FLAG_PENDING;
    12f7:	48 c7 85 50 ff ff ff 	movq   $0x20b,-0xb0(%rbp)
    12fe:	0b 02 00 00 
    for (uint16_t i = 0; i < (sizeof(si.reserved)/sizeof(si.reserved[0])); i++)
    1302:	66 c7 85 3e ff ff ff 	movw   $0x0,-0xc2(%rbp)
    1309:	00 00 
    130b:	66 83 bd 3e ff ff ff 	cmpw   $0x6,-0xc2(%rbp)
    1312:	06 
    1313:	77 28                	ja     133d <_ZL35sgx_accept_forward_within_exceptionmm+0xb9>
        si.reserved[i] = 0;
    1315:	0f b7 85 3e ff ff ff 	movzwl -0xc2(%rbp),%eax
    131c:	48 98                	cltq   
    131e:	48 c7 84 c5 58 ff ff 	movq   $0x0,-0xa8(%rbp,%rax,8)
    1325:	ff 00 00 00 00 
    for (uint16_t i = 0; i < (sizeof(si.reserved)/sizeof(si.reserved[0])); i++)
    132a:	0f b7 85 3e ff ff ff 	movzwl -0xc2(%rbp),%eax
    1331:	83 c0 01             	add    $0x1,%eax
    1334:	66 89 85 3e ff ff ff 	mov    %ax,-0xc2(%rbp)
    133b:	eb ce                	jmp    130b <_ZL35sgx_accept_forward_within_exceptionmm+0x87>

    while (addr < hi)
    133d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    1344:	48 3b 85 20 ff ff ff 	cmp    -0xe0(%rbp),%rax
    134b:	73 3a                	jae    1387 <_ZL35sgx_accept_forward_within_exceptionmm+0x103>
    {
        int rc = do_eaccept(&si, addr);
    134d:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1354:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    135b:	48 89 d6             	mov    %rdx,%rsi
    135e:	48 89 c7             	mov    %rax,%rdi
    1361:	e8 da eb 02 00       	callq  2ff40 <do_eaccept>
    1366:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
        if (rc != 0)
    136c:	83 bd 44 ff ff ff 00 	cmpl   $0x0,-0xbc(%rbp)
    1373:	74 05                	je     137a <_ZL35sgx_accept_forward_within_exceptionmm+0xf6>
            abort();
    1375:	e8 14 ec 02 00       	callq  2ff8e <abort>
        addr += SE_PAGE_SIZE;
    137a:	48 81 85 48 ff ff ff 	addq   $0x1000,-0xb8(%rbp)
    1381:	00 10 00 00 
    while (addr < hi)
    1385:	eb b6                	jmp    133d <_ZL35sgx_accept_forward_within_exceptionmm+0xb9>
    }

    return 0;
    1387:	b8 00 00 00 00       	mov    $0x0,%eax
}
    138c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    1390:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1397:	00 00 
    1399:	74 05                	je     13a0 <_ZL35sgx_accept_forward_within_exceptionmm+0x11c>
    139b:	e8 f8 3b 00 00       	callq  4f98 <__stack_chk_fail>
    13a0:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    13a7:	41 5a                	pop    %r10
    13a9:	5d                   	pop    %rbp
    13aa:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    13ae:	c3                   	retq   

00000000000013af <_Z24get_dynamic_layout_by_idt>:

const volatile layout_t *get_dynamic_layout_by_id(uint16_t id)
{
    13af:	55                   	push   %rbp
    13b0:	48 89 e5             	mov    %rsp,%rbp
    13b3:	89 f8                	mov    %edi,%eax
    13b5:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
    for(uint32_t i = 0; i < g_global_data.layout_entry_num; i++)
    13b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    13c0:	48 8d 05 79 fc 02 00 	lea    0x2fc79(%rip),%rax        # 31040 <g_global_data>
    13c7:	8b 80 18 01 00 00    	mov    0x118(%rax),%eax
    13cd:	39 45 fc             	cmp    %eax,-0x4(%rbp)
    13d0:	0f 92 c0             	setb   %al
    13d3:	84 c0                	test   %al,%al
    13d5:	74 43                	je     141a <_Z24get_dynamic_layout_by_idt+0x6b>
    {
        if(g_global_data.layout_table[i].entry.id == id)
    13d7:	48 8d 05 62 fc 02 00 	lea    0x2fc62(%rip),%rax        # 31040 <g_global_data>
    13de:	8b 55 fc             	mov    -0x4(%rbp),%edx
    13e1:	48 83 c2 09          	add    $0x9,%rdx
    13e5:	48 c1 e2 05          	shl    $0x5,%rdx
    13e9:	48 01 d0             	add    %rdx,%rax
    13ec:	0f b7 00             	movzwl (%rax),%eax
    13ef:	66 39 45 ec          	cmp    %ax,-0x14(%rbp)
    13f3:	0f 94 c0             	sete   %al
    13f6:	84 c0                	test   %al,%al
    13f8:	74 1a                	je     1414 <_Z24get_dynamic_layout_by_idt+0x65>
        {
            return &(g_global_data.layout_table[i]);
    13fa:	8b 45 fc             	mov    -0x4(%rbp),%eax
    13fd:	48 83 c0 09          	add    $0x9,%rax
    1401:	48 c1 e0 05          	shl    $0x5,%rax
    1405:	48 89 c2             	mov    %rax,%rdx
    1408:	48 8d 05 31 fc 02 00 	lea    0x2fc31(%rip),%rax        # 31040 <g_global_data>
    140f:	48 01 d0             	add    %rdx,%rax
    1412:	eb 0b                	jmp    141f <_Z24get_dynamic_layout_by_idt+0x70>
    for(uint32_t i = 0; i < g_global_data.layout_entry_num; i++)
    1414:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    1418:	eb a6                	jmp    13c0 <_Z24get_dynamic_layout_by_idt+0x11>
        }
    }
    return NULL;
    141a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    141f:	5d                   	pop    %rbp
    1420:	c3                   	retq   

0000000000001421 <_Z18accept_post_removePVK9_layout_tS1_m>:

// EACCEPT trim requests when the enclave completes initialization.
int accept_post_remove(const volatile layout_t *layout_start, const volatile layout_t *layout_end, size_t offset)
{
    1421:	55                   	push   %rbp
    1422:	48 89 e5             	mov    %rsp,%rbp
    1425:	53                   	push   %rbx
    1426:	48 83 ec 58          	sub    $0x58,%rsp
    142a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    142e:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    1432:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    int ret = -1;
    1436:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%rbp)
    for (const volatile layout_t *layout = layout_start; layout < layout_end; layout++)
    143d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    1441:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    1445:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1449:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
    144d:	0f 83 2f 01 00 00    	jae    1582 <_Z18accept_post_removePVK9_layout_tS1_m+0x161>
    {
        if (!IS_GROUP_ID(layout->group.id) && (layout->entry.attributes & PAGE_ATTR_POST_REMOVE))
    1453:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1457:	0f b7 00             	movzwl (%rax),%eax
    145a:	0f b7 c0             	movzwl %ax,%eax
    145d:	25 00 10 00 00       	and    $0x1000,%eax
    1462:	85 c0                	test   %eax,%eax
    1464:	75 19                	jne    147f <_Z18accept_post_removePVK9_layout_tS1_m+0x5e>
    1466:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    146a:	0f b7 40 02          	movzwl 0x2(%rax),%eax
    146e:	0f b7 c0             	movzwl %ax,%eax
    1471:	83 e0 10             	and    $0x10,%eax
    1474:	85 c0                	test   %eax,%eax
    1476:	74 07                	je     147f <_Z18accept_post_removePVK9_layout_tS1_m+0x5e>
    1478:	b8 01 00 00 00       	mov    $0x1,%eax
    147d:	eb 05                	jmp    1484 <_Z18accept_post_removePVK9_layout_tS1_m+0x63>
    147f:	b8 00 00 00 00       	mov    $0x0,%eax
    1484:	84 c0                	test   %al,%al
    1486:	74 62                	je     14ea <_Z18accept_post_removePVK9_layout_tS1_m+0xc9>
        {
            size_t start_addr = (size_t)layout->entry.rva + offset + (size_t)get_enclave_base();
    1488:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    148c:	48 8b 50 08          	mov    0x8(%rax),%rdx
    1490:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    1494:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
    1498:	e8 ba e7 02 00       	callq  2fc57 <get_enclave_base>
    149d:	48 01 d8             	add    %rbx,%rax
    14a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            uint32_t page_count = layout->entry.page_count;
    14a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    14a8:	8b 40 04             	mov    0x4(%rax),%eax
    14ab:	89 45 d4             	mov    %eax,-0x2c(%rbp)

            if (0 != (ret = sgx_accept_forward(SI_FLAG_TRIM | SI_FLAG_MODIFIED, start_addr, start_addr + ((size_t)page_count << SE_PAGE_SHIFT))))
    14ae:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    14b1:	48 c1 e0 0c          	shl    $0xc,%rax
    14b5:	48 89 c2             	mov    %rax,%rdx
    14b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    14bc:	48 01 c2             	add    %rax,%rdx
    14bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    14c3:	48 89 c6             	mov    %rax,%rsi
    14c6:	bf 10 04 00 00       	mov    $0x410,%edi
    14cb:	e8 22 05 00 00       	callq  19f2 <sgx_accept_forward>
    14d0:	89 45 d0             	mov    %eax,-0x30(%rbp)
    14d3:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
    14d7:	0f 95 c0             	setne  %al
    14da:	84 c0                	test   %al,%al
    14dc:	0f 84 96 00 00 00    	je     1578 <_Z18accept_post_removePVK9_layout_tS1_m+0x157>
                return ret;
    14e2:	8b 45 d0             	mov    -0x30(%rbp),%eax
    14e5:	e9 9d 00 00 00       	jmpq   1587 <_Z18accept_post_removePVK9_layout_tS1_m+0x166>
        }
        else if (IS_GROUP_ID(layout->group.id))
    14ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    14ee:	0f b7 00             	movzwl (%rax),%eax
    14f1:	0f b7 c0             	movzwl %ax,%eax
    14f4:	25 00 10 00 00       	and    $0x1000,%eax
    14f9:	85 c0                	test   %eax,%eax
    14fb:	0f 95 c0             	setne  %al
    14fe:	84 c0                	test   %al,%al
    1500:	74 76                	je     1578 <_Z18accept_post_removePVK9_layout_tS1_m+0x157>
        {
            size_t step = 0;
    1502:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    1509:	00 
            for(uint32_t j = 0; j < layout->group.load_times; j++)
    150a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
    1511:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1515:	8b 40 04             	mov    0x4(%rax),%eax
    1518:	39 45 cc             	cmp    %eax,-0x34(%rbp)
    151b:	0f 92 c0             	setb   %al
    151e:	84 c0                	test   %al,%al
    1520:	74 56                	je     1578 <_Z18accept_post_removePVK9_layout_tS1_m+0x157>
            {
                step += (size_t)layout->group.load_step;
    1522:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1526:	48 8b 40 08          	mov    0x8(%rax),%rax
    152a:	48 01 45 e0          	add    %rax,-0x20(%rbp)
                if(0 != (ret = accept_post_remove(&layout[-layout->group.entry_count], layout, step)))
    152e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1532:	0f b7 40 02          	movzwl 0x2(%rax),%eax
    1536:	0f b7 c0             	movzwl %ax,%eax
    1539:	f7 d8                	neg    %eax
    153b:	48 98                	cltq   
    153d:	48 c1 e0 05          	shl    $0x5,%rax
    1541:	48 89 c2             	mov    %rax,%rdx
    1544:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1548:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    154c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    1550:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1554:	48 89 c6             	mov    %rax,%rsi
    1557:	48 89 cf             	mov    %rcx,%rdi
    155a:	e8 c2 fe ff ff       	callq  1421 <_Z18accept_post_removePVK9_layout_tS1_m>
    155f:	89 45 d0             	mov    %eax,-0x30(%rbp)
    1562:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
    1566:	0f 95 c0             	setne  %al
    1569:	84 c0                	test   %al,%al
    156b:	74 05                	je     1572 <_Z18accept_post_removePVK9_layout_tS1_m+0x151>
                    return ret;
    156d:	8b 45 d0             	mov    -0x30(%rbp),%eax
    1570:	eb 15                	jmp    1587 <_Z18accept_post_removePVK9_layout_tS1_m+0x166>
            for(uint32_t j = 0; j < layout->group.load_times; j++)
    1572:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
    1576:	eb 99                	jmp    1511 <_Z18accept_post_removePVK9_layout_tS1_m+0xf0>
    for (const volatile layout_t *layout = layout_start; layout < layout_end; layout++)
    1578:	48 83 45 d8 20       	addq   $0x20,-0x28(%rbp)
    157d:	e9 c3 fe ff ff       	jmpq   1445 <_Z18accept_post_removePVK9_layout_tS1_m+0x24>
            }
        }
    }
    return 0;
    1582:	b8 00 00 00 00       	mov    $0x0,%eax
}
    1587:	48 83 c4 58          	add    $0x58,%rsp
    158b:	5b                   	pop    %rbx
    158c:	5d                   	pop    %rbp
    158d:	c3                   	retq   

000000000000158e <_ZL20check_heap_dyn_rangePvmP24dynamic_flags_attributes>:

static int check_heap_dyn_range(void *addr, size_t page_count, struct dynamic_flags_attributes *fa)
{
    158e:	55                   	push   %rbp
    158f:	48 89 e5             	mov    %rsp,%rbp
    1592:	53                   	push   %rbx
    1593:	48 83 ec 38          	sub    $0x38,%rsp
    1597:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    159b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    159f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    size_t heap_dyn_start, heap_dyn_size;

    heap_dyn_start = (size_t)get_heap_base() + get_heap_min_size();
    15a3:	e8 d6 1c 00 00       	callq  327e <get_heap_base>
    15a8:	48 89 c3             	mov    %rax,%rbx
    15ab:	e8 7b 1d 00 00       	callq  332b <get_heap_min_size>
    15b0:	48 01 d8             	add    %rbx,%rax
    15b3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    heap_dyn_size = get_heap_size() - get_heap_min_size();
    15b7:	e8 dd 1c 00 00       	callq  3299 <get_heap_size>
    15bc:	48 89 c3             	mov    %rax,%rbx
    15bf:	e8 67 1d 00 00       	callq  332b <get_heap_min_size>
    15c4:	48 29 c3             	sub    %rax,%rbx
    15c7:	48 89 d8             	mov    %rbx,%rax
    15ca:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    if ((size_t)addr >= heap_dyn_start
    15ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    15d2:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    15d6:	77 46                	ja     161e <_ZL20check_heap_dyn_rangePvmP24dynamic_flags_attributes+0x90>
            && (size_t)addr + (page_count << SE_PAGE_SHIFT) <= heap_dyn_start + heap_dyn_size)
    15d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    15dc:	48 c1 e0 0c          	shl    $0xc,%rax
    15e0:	48 89 c2             	mov    %rax,%rdx
    15e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    15e7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
    15eb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    15ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    15f3:	48 01 d0             	add    %rdx,%rax
    15f6:	48 39 c1             	cmp    %rax,%rcx
    15f9:	77 23                	ja     161e <_ZL20check_heap_dyn_rangePvmP24dynamic_flags_attributes+0x90>
    {
        if (fa != NULL)
    15fb:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    1600:	74 15                	je     1617 <_ZL20check_heap_dyn_rangePvmP24dynamic_flags_attributes+0x89>
        {
            fa->si_flags = SI_FLAGS_RW;
    1602:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1606:	48 c7 00 03 02 00 00 	movq   $0x203,(%rax)
            fa->attributes = PAGE_ATTR_POST_ADD;
    160d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1611:	66 c7 40 08 08 00    	movw   $0x8,0x8(%rax)
        }
        return 0;
    1617:	b8 00 00 00 00       	mov    $0x0,%eax
    161c:	eb 05                	jmp    1623 <_ZL20check_heap_dyn_rangePvmP24dynamic_flags_attributes+0x95>
    }
    else
    {
        return -1;
    161e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    }
}
    1623:	48 83 c4 38          	add    $0x38,%rsp
    1627:	5b                   	pop    %rbx
    1628:	5d                   	pop    %rbp
    1629:	c3                   	retq   

000000000000162a <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes>:

static int check_dynamic_entry_range(void *addr, size_t page_count, uint16_t entry_id, size_t entry_offset, struct dynamic_flags_attributes *fa)
{
    162a:	55                   	push   %rbp
    162b:	48 89 e5             	mov    %rsp,%rbp
    162e:	48 83 ec 50          	sub    $0x50,%rsp
    1632:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1636:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    163a:	89 d0                	mov    %edx,%eax
    163c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    1640:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    1644:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    const volatile layout_t *layout = NULL;
    1648:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    164f:	00 
    size_t entry_start_addr;
    uint32_t entry_page_count;

    if (entry_id < LAYOUT_ID_HEAP_MIN
            || entry_id > LAYOUT_ID_STACK_DYN_MIN
            || (NULL == (layout = get_dynamic_layout_by_id(entry_id))))
    1650:	66 83 7d cc 00       	cmpw   $0x0,-0x34(%rbp)
    1655:	74 1d                	je     1674 <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes+0x4a>
            || entry_id > LAYOUT_ID_STACK_DYN_MIN
    1657:	66 83 7d cc 12       	cmpw   $0x12,-0x34(%rbp)
    165c:	77 16                	ja     1674 <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes+0x4a>
            || (NULL == (layout = get_dynamic_layout_by_id(entry_id))))
    165e:	0f b7 45 cc          	movzwl -0x34(%rbp),%eax
    1662:	89 c7                	mov    %eax,%edi
    1664:	e8 46 fd ff ff       	callq  13af <_Z24get_dynamic_layout_by_idt>
    1669:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    166d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    1672:	75 07                	jne    167b <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes+0x51>
    1674:	b8 01 00 00 00       	mov    $0x1,%eax
    1679:	eb 05                	jmp    1680 <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes+0x56>
    167b:	b8 00 00 00 00       	mov    $0x0,%eax
    if (entry_id < LAYOUT_ID_HEAP_MIN
    1680:	84 c0                	test   %al,%al
    1682:	74 0a                	je     168e <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes+0x64>
    {
        return -1;
    1684:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1689:	e9 8c 00 00 00       	jmpq   171a <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes+0xf0>
    }

    entry_start_addr = (size_t)get_enclave_base() + (size_t)layout->entry.rva + entry_offset;
    168e:	e8 c4 e5 02 00       	callq  2fc57 <get_enclave_base>
    1693:	48 89 c2             	mov    %rax,%rdx
    1696:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    169a:	48 8b 40 08          	mov    0x8(%rax),%rax
    169e:	48 01 c2             	add    %rax,%rdx
    16a1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    16a5:	48 01 d0             	add    %rdx,%rax
    16a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    entry_page_count = layout->entry.page_count;
    16ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    16b0:	8b 40 04             	mov    0x4(%rax),%eax
    16b3:	89 45 ec             	mov    %eax,-0x14(%rbp)
    if ((size_t)addr >= entry_start_addr
    16b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    16ba:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    16be:	77 55                	ja     1715 <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes+0xeb>
            && (size_t)addr + (page_count << SE_PAGE_SHIFT) <= entry_start_addr + ((size_t)entry_page_count << SE_PAGE_SHIFT))
    16c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    16c4:	48 c1 e0 0c          	shl    $0xc,%rax
    16c8:	48 89 c2             	mov    %rax,%rdx
    16cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    16cf:	48 01 c2             	add    %rax,%rdx
    16d2:	8b 45 ec             	mov    -0x14(%rbp),%eax
    16d5:	48 c1 e0 0c          	shl    $0xc,%rax
    16d9:	48 89 c1             	mov    %rax,%rcx
    16dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    16e0:	48 01 c8             	add    %rcx,%rax
    16e3:	48 39 c2             	cmp    %rax,%rdx
    16e6:	77 2d                	ja     1715 <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes+0xeb>
    {
        if (fa != NULL)
    16e8:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    16ed:	74 1f                	je     170e <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes+0xe4>
        {
            fa->si_flags = layout->entry.si_flags;
    16ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    16f3:	48 8b 50 18          	mov    0x18(%rax),%rdx
    16f7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    16fb:	48 89 10             	mov    %rdx,(%rax)
            fa->attributes = layout->entry.attributes;
    16fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1702:	0f b7 50 02          	movzwl 0x2(%rax),%edx
    1706:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    170a:	66 89 50 08          	mov    %dx,0x8(%rax)
        }
        return 0;
    170e:	b8 00 00 00 00       	mov    $0x0,%eax
    1713:	eb 05                	jmp    171a <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes+0xf0>
    }
    else
    {
        return -1;
    1715:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    }
}
    171a:	c9                   	leaveq 
    171b:	c3                   	retq   

000000000000171c <_ZL34check_utility_thread_dynamic_stackPvmP24dynamic_flags_attributes>:

static int check_utility_thread_dynamic_stack(void *addr, size_t page_count, struct dynamic_flags_attributes *fa)
{
    171c:	55                   	push   %rbp
    171d:	48 89 e5             	mov    %rsp,%rbp
    1720:	48 83 ec 20          	sub    $0x20,%rsp
    1724:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1728:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    172c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    return check_dynamic_entry_range(addr, page_count, LAYOUT_ID_STACK_MAX, 0, fa);
    1730:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    1734:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    1738:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    173c:	49 89 d0             	mov    %rdx,%r8
    173f:	b9 00 00 00 00       	mov    $0x0,%ecx
    1744:	ba 07 00 00 00       	mov    $0x7,%edx
    1749:	48 89 c7             	mov    %rax,%rdi
    174c:	e8 d9 fe ff ff       	callq  162a <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes>
}
    1751:	c9                   	leaveq 
    1752:	c3                   	retq   

0000000000001753 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes>:

// Verify if the range specified belongs to a dynamic range recorded in metadata.
static int check_dynamic_range(void *addr, size_t page_count, size_t *offset, struct dynamic_flags_attributes *fa)
{
    1753:	55                   	push   %rbp
    1754:	48 89 e5             	mov    %rsp,%rbp
    1757:	48 83 ec 30          	sub    $0x30,%rsp
    175b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    175f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    1763:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1767:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    const volatile layout_t *dt_layout = NULL;
    176b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    1772:	00 

    // check for integer overflow
    if ((size_t)addr > SIZE_MAX - (page_count << SE_PAGE_SHIFT))
    1773:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1777:	48 c1 e0 0c          	shl    $0xc,%rax
    177b:	48 f7 d0             	not    %rax
    177e:	48 89 c2             	mov    %rax,%rdx
    1781:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1785:	48 39 c2             	cmp    %rax,%rdx
    1788:	73 0a                	jae    1794 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x41>
        return -1;
    178a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    178f:	e9 6f 01 00 00       	jmpq   1903 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x1b0>

    // check heap dynamic range
    if (0 == check_heap_dyn_range(addr, page_count, fa))
    1794:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    1798:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    179c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    17a0:	48 89 ce             	mov    %rcx,%rsi
    17a3:	48 89 c7             	mov    %rax,%rdi
    17a6:	e8 e3 fd ff ff       	callq  158e <_ZL20check_heap_dyn_rangePvmP24dynamic_flags_attributes>
    17ab:	85 c0                	test   %eax,%eax
    17ad:	0f 94 c0             	sete   %al
    17b0:	84 c0                	test   %al,%al
    17b2:	74 0a                	je     17be <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x6b>
        return 0;
    17b4:	b8 00 00 00 00       	mov    $0x0,%eax
    17b9:	e9 45 01 00 00       	jmpq   1903 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x1b0>

    // check dynamic stack within utility thread
    if (0 == check_utility_thread_dynamic_stack(addr, page_count, fa))
    17be:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    17c2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    17c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    17ca:	48 89 ce             	mov    %rcx,%rsi
    17cd:	48 89 c7             	mov    %rax,%rdi
    17d0:	e8 47 ff ff ff       	callq  171c <_ZL34check_utility_thread_dynamic_stackPvmP24dynamic_flags_attributes>
    17d5:	85 c0                	test   %eax,%eax
    17d7:	0f 94 c0             	sete   %al
    17da:	84 c0                	test   %al,%al
    17dc:	74 0a                	je     17e8 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x95>
        return 0;
    17de:	b8 00 00 00 00       	mov    $0x0,%eax
    17e3:	e9 1b 01 00 00       	jmpq   1903 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x1b0>

    // check dynamic thread entries range
    if (NULL != (dt_layout = get_dynamic_layout_by_id(LAYOUT_ID_THREAD_GROUP_DYN)))
    17e8:	bf 13 10 00 00       	mov    $0x1013,%edi
    17ed:	e8 bd fb ff ff       	callq  13af <_Z24get_dynamic_layout_by_idt>
    17f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    17f6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    17fb:	0f 95 c0             	setne  %al
    17fe:	84 c0                	test   %al,%al
    1800:	0f 84 9c 00 00 00    	je     18a2 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x14f>
    {
        for (uint16_t id = LAYOUT_ID_TCS_DYN; id <= LAYOUT_ID_STACK_DYN_MIN; id++)
    1806:	66 c7 45 f0 0e 00    	movw   $0xe,-0x10(%rbp)
    180c:	66 83 7d f0 12       	cmpw   $0x12,-0x10(%rbp)
    1811:	0f 87 e7 00 00 00    	ja     18fe <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x1ab>
            for (uint32_t i = 0; i < dt_layout->group.load_times + 1; i++)
    1817:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    181e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1822:	8b 40 04             	mov    0x4(%rax),%eax
    1825:	83 c0 01             	add    $0x1,%eax
    1828:	39 45 f4             	cmp    %eax,-0xc(%rbp)
    182b:	0f 92 c0             	setb   %al
    182e:	84 c0                	test   %al,%al
    1830:	74 60                	je     1892 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x13f>
            {
                if (0 == check_dynamic_entry_range(addr, page_count, id, i * ((size_t)dt_layout->group.load_step), fa))
    1832:	8b 55 f4             	mov    -0xc(%rbp),%edx
    1835:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1839:	48 8b 40 08          	mov    0x8(%rax),%rax
    183d:	48 89 d1             	mov    %rdx,%rcx
    1840:	48 0f af c8          	imul   %rax,%rcx
    1844:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
    1848:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    184c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    1850:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1854:	49 89 f8             	mov    %rdi,%r8
    1857:	48 89 c7             	mov    %rax,%rdi
    185a:	e8 cb fd ff ff       	callq  162a <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes>
    185f:	85 c0                	test   %eax,%eax
    1861:	0f 94 c0             	sete   %al
    1864:	84 c0                	test   %al,%al
    1866:	74 24                	je     188c <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x139>
                {
                    if (offset != NULL) *offset = i * ((size_t)dt_layout->group.load_step);
    1868:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    186d:	74 16                	je     1885 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x132>
    186f:	8b 55 f4             	mov    -0xc(%rbp),%edx
    1872:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1876:	48 8b 40 08          	mov    0x8(%rax),%rax
    187a:	48 0f af d0          	imul   %rax,%rdx
    187e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1882:	48 89 10             	mov    %rdx,(%rax)
                    return 0;
    1885:	b8 00 00 00 00       	mov    $0x0,%eax
    188a:	eb 77                	jmp    1903 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x1b0>
            for (uint32_t i = 0; i < dt_layout->group.load_times + 1; i++)
    188c:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    1890:	eb 8c                	jmp    181e <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0xcb>
        for (uint16_t id = LAYOUT_ID_TCS_DYN; id <= LAYOUT_ID_STACK_DYN_MIN; id++)
    1892:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
    1896:	83 c0 01             	add    $0x1,%eax
    1899:	66 89 45 f0          	mov    %ax,-0x10(%rbp)
    189d:	e9 6a ff ff ff       	jmpq   180c <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0xb9>
            }
    }
    else
    {
        // LAYOUT_ID_THREAD_GROUP_DYN does not exist, but possibly there is one single dynamic thead
        for (uint16_t id = LAYOUT_ID_TCS_DYN; id <= LAYOUT_ID_STACK_DYN_MIN; id++)
    18a2:	66 c7 45 f2 0e 00    	movw   $0xe,-0xe(%rbp)
    18a8:	66 83 7d f2 12       	cmpw   $0x12,-0xe(%rbp)
    18ad:	77 4f                	ja     18fe <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x1ab>
            if (0 == check_dynamic_entry_range(addr, page_count, id, 0, fa))
    18af:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
    18b3:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    18b7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    18bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    18bf:	49 89 c8             	mov    %rcx,%r8
    18c2:	b9 00 00 00 00       	mov    $0x0,%ecx
    18c7:	48 89 c7             	mov    %rax,%rdi
    18ca:	e8 5b fd ff ff       	callq  162a <_ZL25check_dynamic_entry_rangePvmtmP24dynamic_flags_attributes>
    18cf:	85 c0                	test   %eax,%eax
    18d1:	0f 94 c0             	sete   %al
    18d4:	84 c0                	test   %al,%al
    18d6:	74 19                	je     18f1 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x19e>
            {
                if (offset != NULL) *offset = 0;
    18d8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    18dd:	74 0b                	je     18ea <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x197>
    18df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    18e3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
                return 0;
    18ea:	b8 00 00 00 00       	mov    $0x0,%eax
    18ef:	eb 12                	jmp    1903 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x1b0>
        for (uint16_t id = LAYOUT_ID_TCS_DYN; id <= LAYOUT_ID_STACK_DYN_MIN; id++)
    18f1:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
    18f5:	83 c0 01             	add    $0x1,%eax
    18f8:	66 89 45 f2          	mov    %ax,-0xe(%rbp)
    18fc:	eb aa                	jmp    18a8 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes+0x155>
            }
    }
    return -1;
    18fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    1903:	c9                   	leaveq 
    1904:	c3                   	retq   

0000000000001905 <is_dynamic_thread>:

int is_dynamic_thread(void *tcs)
{
    1905:	55                   	push   %rbp
    1906:	48 89 e5             	mov    %rsp,%rbp
    1909:	48 83 ec 30          	sub    $0x30,%rsp
    190d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1911:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1918:	00 00 
    191a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    191e:	31 c0                	xor    %eax,%eax
    struct dynamic_flags_attributes fa;

    if ((tcs != NULL) && (check_dynamic_range(tcs, 1, NULL, &fa) == 0) &&
    1920:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    1925:	74 34                	je     195b <is_dynamic_thread+0x56>
    1927:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    192b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    192f:	48 89 d1             	mov    %rdx,%rcx
    1932:	ba 00 00 00 00       	mov    $0x0,%edx
    1937:	be 01 00 00 00       	mov    $0x1,%esi
    193c:	48 89 c7             	mov    %rax,%rdi
    193f:	e8 0f fe ff ff       	callq  1753 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes>
    1944:	85 c0                	test   %eax,%eax
    1946:	75 13                	jne    195b <is_dynamic_thread+0x56>
            (fa.si_flags == SI_FLAGS_TCS))
    1948:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    if ((tcs != NULL) && (check_dynamic_range(tcs, 1, NULL, &fa) == 0) &&
    194c:	48 3d 00 01 00 00    	cmp    $0x100,%rax
    1952:	75 07                	jne    195b <is_dynamic_thread+0x56>
    1954:	b8 01 00 00 00       	mov    $0x1,%eax
    1959:	eb 05                	jmp    1960 <is_dynamic_thread+0x5b>
    195b:	b8 00 00 00 00       	mov    $0x0,%eax
    1960:	84 c0                	test   %al,%al
    1962:	74 07                	je     196b <is_dynamic_thread+0x66>
    {
        return true;
    1964:	b8 01 00 00 00       	mov    $0x1,%eax
    1969:	eb 05                	jmp    1970 <is_dynamic_thread+0x6b>
    }

    return false;
    196b:	b8 00 00 00 00       	mov    $0x0,%eax
}
    1970:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    1974:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    197b:	00 00 
    197d:	74 05                	je     1984 <is_dynamic_thread+0x7f>
    197f:	e8 14 36 00 00       	callq  4f98 <__stack_chk_fail>
    1984:	c9                   	leaveq 
    1985:	c3                   	retq   

0000000000001986 <is_dynamic_thread_exist>:

int is_dynamic_thread_exist()
{
    1986:	55                   	push   %rbp
    1987:	48 89 e5             	mov    %rsp,%rbp
    198a:	48 83 ec 10          	sub    $0x10,%rsp
    if(!EDMM_supported)
    198e:	48 8d 05 0b 34 23 00 	lea    0x23340b(%rip),%rax        # 234da0 <EDMM_supported>
    1995:	8b 00                	mov    (%rax),%eax
    1997:	85 c0                	test   %eax,%eax
    1999:	75 07                	jne    19a2 <is_dynamic_thread_exist+0x1c>
        return false;
    199b:	b8 00 00 00 00       	mov    $0x0,%eax
    19a0:	eb 21                	jmp    19c3 <is_dynamic_thread_exist+0x3d>
    const volatile layout_t * layout = get_dynamic_layout_by_id(LAYOUT_ID_STACK_DYN_MIN);
    19a2:	bf 12 00 00 00       	mov    $0x12,%edi
    19a7:	e8 03 fa ff ff       	callq  13af <_Z24get_dynamic_layout_by_idt>
    19ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (!layout)
    19b0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    19b5:	75 07                	jne    19be <is_dynamic_thread_exist+0x38>
        return false;
    19b7:	b8 00 00 00 00       	mov    $0x0,%eax
    19bc:	eb 05                	jmp    19c3 <is_dynamic_thread_exist+0x3d>
    else
        return true;
    19be:	b8 01 00 00 00       	mov    $0x1,%eax
}
    19c3:	c9                   	leaveq 
    19c4:	c3                   	retq   

00000000000019c5 <get_dynamic_stack_max_page>:


uint32_t get_dynamic_stack_max_page()
{
    19c5:	55                   	push   %rbp
    19c6:	48 89 e5             	mov    %rsp,%rbp
    19c9:	48 83 ec 10          	sub    $0x10,%rsp
    const volatile layout_t * layout = get_dynamic_layout_by_id(LAYOUT_ID_STACK_MAX);
    19cd:	bf 07 00 00 00       	mov    $0x7,%edi
    19d2:	e8 d8 f9 ff ff       	callq  13af <_Z24get_dynamic_layout_by_idt>
    19d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (!layout)
    19db:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    19e0:	75 07                	jne    19e9 <get_dynamic_stack_max_page+0x24>
        return 0;
    19e2:	b8 00 00 00 00       	mov    $0x0,%eax
    19e7:	eb 07                	jmp    19f0 <get_dynamic_stack_max_page+0x2b>
    else
        return layout->entry.page_count;
    19e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    19ed:	8b 40 04             	mov    0x4(%rax),%eax
}
    19f0:	c9                   	leaveq 
    19f1:	c3                   	retq   

00000000000019f2 <sgx_accept_forward>:
#endif

int sgx_accept_forward(si_flags_t sfl, size_t lo, size_t hi)
{
    19f2:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    19f7:	48 83 e4 c0          	and    $0xffffffffffffffc0,%rsp
    19fb:	41 ff 72 f8          	pushq  -0x8(%r10)
    19ff:	55                   	push   %rbp
    1a00:	48 89 e5             	mov    %rsp,%rbp
    1a03:	41 52                	push   %r10
    1a05:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    1a0c:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    1a13:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    1a1a:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    1a21:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1a28:	00 00 
    1a2a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    1a2e:	31 c0                	xor    %eax,%eax
    (void)sfl;
    (void)lo;
    (void)hi;
    return 0;
#else
    size_t addr = lo;
    1a30:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1a37:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    SE_DECLSPEC_ALIGN(sizeof(sec_info_t)) sec_info_t si;
    si.flags = sfl;
    1a3e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    1a45:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    for (uint16_t i = 0; i < (sizeof(si.reserved)/sizeof(si.reserved[0])); i++)
    1a4c:	66 c7 85 42 ff ff ff 	movw   $0x0,-0xbe(%rbp)
    1a53:	00 00 
    1a55:	66 83 bd 42 ff ff ff 	cmpw   $0x6,-0xbe(%rbp)
    1a5c:	06 
    1a5d:	77 28                	ja     1a87 <sgx_accept_forward+0x95>
        si.reserved[i] = 0;
    1a5f:	0f b7 85 42 ff ff ff 	movzwl -0xbe(%rbp),%eax
    1a66:	48 98                	cltq   
    1a68:	48 c7 84 c5 58 ff ff 	movq   $0x0,-0xa8(%rbp,%rax,8)
    1a6f:	ff 00 00 00 00 
    for (uint16_t i = 0; i < (sizeof(si.reserved)/sizeof(si.reserved[0])); i++)
    1a74:	0f b7 85 42 ff ff ff 	movzwl -0xbe(%rbp),%eax
    1a7b:	83 c0 01             	add    $0x1,%eax
    1a7e:	66 89 85 42 ff ff ff 	mov    %ax,-0xbe(%rbp)
    1a85:	eb ce                	jmp    1a55 <sgx_accept_forward+0x63>

    while (addr < hi)
    1a87:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    1a8e:	48 3b 85 28 ff ff ff 	cmp    -0xd8(%rbp),%rax
    1a95:	73 3a                	jae    1ad1 <sgx_accept_forward+0xdf>
    {
        int rc = do_eaccept(&si, addr);
    1a97:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1a9e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1aa5:	48 89 d6             	mov    %rdx,%rsi
    1aa8:	48 89 c7             	mov    %rax,%rdi
    1aab:	e8 90 e4 02 00       	callq  2ff40 <do_eaccept>
    1ab0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
        if (rc != 0)
    1ab6:	83 bd 44 ff ff ff 00 	cmpl   $0x0,-0xbc(%rbp)
    1abd:	74 05                	je     1ac4 <sgx_accept_forward+0xd2>
            abort();
    1abf:	e8 ca e4 02 00       	callq  2ff8e <abort>
        addr += SE_PAGE_SIZE;
    1ac4:	48 81 85 48 ff ff ff 	addq   $0x1000,-0xb8(%rbp)
    1acb:	00 10 00 00 
    while (addr < hi)
    1acf:	eb b6                	jmp    1a87 <sgx_accept_forward+0x95>
    }

    return 0;
    1ad1:	b8 00 00 00 00       	mov    $0x0,%eax
#endif
}
    1ad6:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    1ada:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1ae1:	00 00 
    1ae3:	74 05                	je     1aea <sgx_accept_forward+0xf8>
    1ae5:	e8 ae 34 00 00       	callq  4f98 <__stack_chk_fail>
    1aea:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    1af1:	41 5a                	pop    %r10
    1af3:	5d                   	pop    %rbp
    1af4:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    1af8:	c3                   	retq   

0000000000001af9 <apply_pages_within_exception>:

// High level API to EACCEPT pages, mainly used in exception handling
// to deal with stack expansion. 
int apply_pages_within_exception(void *start_address, size_t page_count)
{
    1af9:	55                   	push   %rbp
    1afa:	48 89 e5             	mov    %rsp,%rbp
    1afd:	48 83 ec 30          	sub    $0x30,%rsp
    1b01:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1b05:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    (void)page_count;
    return 0;
#else
    int rc;

    if (start_address == NULL)
    1b09:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    1b0e:	75 07                	jne    1b17 <apply_pages_within_exception+0x1e>
        return -1;
    1b10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1b15:	eb 61                	jmp    1b78 <apply_pages_within_exception+0x7f>
    
    if (check_dynamic_range(start_address, page_count, NULL, NULL) != 0)
    1b17:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    1b1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1b1f:	b9 00 00 00 00       	mov    $0x0,%ecx
    1b24:	ba 00 00 00 00       	mov    $0x0,%edx
    1b29:	48 89 c7             	mov    %rax,%rdi
    1b2c:	e8 22 fc ff ff       	callq  1753 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes>
    1b31:	85 c0                	test   %eax,%eax
    1b33:	0f 95 c0             	setne  %al
    1b36:	84 c0                	test   %al,%al
    1b38:	74 07                	je     1b41 <apply_pages_within_exception+0x48>
        return -1;
    1b3a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1b3f:	eb 37                	jmp    1b78 <apply_pages_within_exception+0x7f>

    size_t start = (size_t)start_address;
    1b41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1b45:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    size_t end = start + (page_count << SE_PAGE_SHIFT);
    1b49:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1b4d:	48 c1 e0 0c          	shl    $0xc,%rax
    1b51:	48 89 c2             	mov    %rax,%rdx
    1b54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1b58:	48 01 d0             	add    %rdx,%rax
    1b5b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    rc = sgx_accept_forward_within_exception(start, end);
    1b5f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    1b63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1b67:	48 89 d6             	mov    %rdx,%rsi
    1b6a:	48 89 c7             	mov    %rax,%rdi
    1b6d:	e8 12 f7 ff ff       	callq  1284 <_ZL35sgx_accept_forward_within_exceptionmm>
    1b72:	89 45 ec             	mov    %eax,-0x14(%rbp)

    return rc;
    1b75:	8b 45 ec             	mov    -0x14(%rbp),%eax
#endif

}
    1b78:	c9                   	leaveq 
    1b79:	c3                   	retq   

0000000000001b7a <apply_EPC_pages>:

// High level API to EACCEPT pages
int apply_EPC_pages(void *start_address, size_t page_count)
{
    1b7a:	55                   	push   %rbp
    1b7b:	48 89 e5             	mov    %rsp,%rbp
    1b7e:	48 83 ec 50          	sub    $0x50,%rsp
    1b82:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    1b86:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    1b8a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1b91:	00 00 
    1b93:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    1b97:	31 c0                	xor    %eax,%eax
    return 0;
#else
    int rc;
    struct dynamic_flags_attributes fa;

    if (start_address == NULL)
    1b99:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    1b9e:	75 0a                	jne    1baa <apply_EPC_pages+0x30>
        return -1;
    1ba0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1ba5:	e9 8d 00 00 00       	jmpq   1c37 <apply_EPC_pages+0xbd>
    
    if (check_dynamic_range(start_address, page_count, NULL, &fa) != 0)
    1baa:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1bae:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    1bb2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    1bb6:	48 89 d1             	mov    %rdx,%rcx
    1bb9:	ba 00 00 00 00       	mov    $0x0,%edx
    1bbe:	48 89 c7             	mov    %rax,%rdi
    1bc1:	e8 8d fb ff ff       	callq  1753 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes>
    1bc6:	85 c0                	test   %eax,%eax
    1bc8:	0f 95 c0             	setne  %al
    1bcb:	84 c0                	test   %al,%al
    1bcd:	74 07                	je     1bd6 <apply_EPC_pages+0x5c>
        return -1;
    1bcf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1bd4:	eb 61                	jmp    1c37 <apply_EPC_pages+0xbd>

    size_t start = (size_t)start_address;
    1bd6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    1bda:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    size_t end = start + (page_count << SE_PAGE_SHIFT);
    1bde:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    1be2:	48 c1 e0 0c          	shl    $0xc,%rax
    1be6:	48 89 c2             	mov    %rax,%rdx
    1be9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1bed:	48 01 d0             	add    %rdx,%rax
    1bf0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    if (fa.attributes & PAGE_DIR_GROW_DOWN)
    1bf4:	0f b7 45 e8          	movzwl -0x18(%rbp),%eax
    1bf8:	0f b7 c0             	movzwl %ax,%eax
    1bfb:	83 e0 40             	and    $0x40,%eax
    1bfe:	85 c0                	test   %eax,%eax
    1c00:	74 1a                	je     1c1c <apply_EPC_pages+0xa2>
    {
        rc = sgx_accept_forward(SI_FLAGS_RW | SI_FLAG_PENDING, start, end);
    1c02:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    1c06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1c0a:	48 89 c6             	mov    %rax,%rsi
    1c0d:	bf 0b 02 00 00       	mov    $0x20b,%edi
    1c12:	e8 db fd ff ff       	callq  19f2 <sgx_accept_forward>
    1c17:	89 45 cc             	mov    %eax,-0x34(%rbp)
    1c1a:	eb 18                	jmp    1c34 <apply_EPC_pages+0xba>
    }
    else
    {
        rc = sgx_accept_backward(SI_FLAGS_RW | SI_FLAG_PENDING, start, end);
    1c1c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    1c20:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1c24:	48 89 c6             	mov    %rax,%rsi
    1c27:	bf 0b 02 00 00       	mov    $0x20b,%edi
    1c2c:	e8 4e f5 ff ff       	callq  117f <_ZL19sgx_accept_backwardmmm>
    1c31:	89 45 cc             	mov    %eax,-0x34(%rbp)
    }

    return rc;
    1c34:	8b 45 cc             	mov    -0x34(%rbp),%eax
#endif
}
    1c37:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    1c3b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1c42:	00 00 
    1c44:	74 05                	je     1c4b <apply_EPC_pages+0xd1>
    1c46:	e8 4d 33 00 00       	callq  4f98 <__stack_chk_fail>
    1c4b:	c9                   	leaveq 
    1c4c:	c3                   	retq   

0000000000001c4d <trim_EPC_pages>:

// High level API to trim previously EAUG-ed pages.
int trim_EPC_pages(void *start_address, size_t page_count)
{
    1c4d:	55                   	push   %rbp
    1c4e:	48 89 e5             	mov    %rsp,%rbp
    1c51:	48 83 ec 30          	sub    $0x30,%rsp
    1c55:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1c59:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    (void)page_count;
    return 0;
#else
    int rc;

    if (start_address == NULL)
    1c5d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    1c62:	75 0a                	jne    1c6e <trim_EPC_pages+0x21>
        return -1;
    1c64:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1c69:	e9 16 01 00 00       	jmpq   1d84 <trim_EPC_pages+0x137>

    // check range
    if (check_dynamic_range(start_address, page_count, NULL, NULL) != 0)
    1c6e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    1c72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1c76:	b9 00 00 00 00       	mov    $0x0,%ecx
    1c7b:	ba 00 00 00 00       	mov    $0x0,%edx
    1c80:	48 89 c7             	mov    %rax,%rdi
    1c83:	e8 cb fa ff ff       	callq  1753 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes>
    1c88:	85 c0                	test   %eax,%eax
    1c8a:	0f 95 c0             	setne  %al
    1c8d:	84 c0                	test   %al,%al
    1c8f:	74 0a                	je     1c9b <trim_EPC_pages+0x4e>
        return -1;
    1c91:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1c96:	e9 e9 00 00 00       	jmpq   1d84 <trim_EPC_pages+0x137>

    size_t start = (size_t)start_address;
    1c9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1c9f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    size_t end = start + (page_count << SE_PAGE_SHIFT);
    1ca3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1ca7:	48 c1 e0 0c          	shl    $0xc,%rax
    1cab:	48 89 c2             	mov    %rax,%rdx
    1cae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1cb2:	48 01 d0             	add    %rdx,%rax
    1cb5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    // trim ocall
    rc = trim_range_ocall(start, end);
    1cb9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    1cbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1cc1:	48 89 d6             	mov    %rdx,%rsi
    1cc4:	48 89 c7             	mov    %rax,%rdi
    1cc7:	e8 a9 14 00 00       	callq  3175 <trim_range_ocall>
    1ccc:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    assert(rc == 0);
    1ccf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
    1cd3:	74 1f                	je     1cf4 <trim_EPC_pages+0xa7>
    1cd5:	48 8d 0d e0 e3 02 00 	lea    0x2e3e0(%rip),%rcx        # 300bc <g_dyn_entry_table+0xbc>
    1cdc:	48 8d 15 f5 e3 02 00 	lea    0x2e3f5(%rip),%rdx        # 300d8 <_ZZ14trim_EPC_pagesE8__func__>
    1ce3:	be 7f 01 00 00       	mov    $0x17f,%esi
    1ce8:	48 8d 3d d5 e3 02 00 	lea    0x2e3d5(%rip),%rdi        # 300c4 <g_dyn_entry_table+0xc4>
    1cef:	e8 d7 32 00 00       	callq  4fcb <__assert>

    rc = sgx_accept_forward(SI_FLAG_TRIM | SI_FLAG_MODIFIED, start, end);
    1cf4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    1cf8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1cfc:	48 89 c6             	mov    %rax,%rsi
    1cff:	bf 10 04 00 00       	mov    $0x410,%edi
    1d04:	e8 e9 fc ff ff       	callq  19f2 <sgx_accept_forward>
    1d09:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    assert(rc == 0);
    1d0c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
    1d10:	74 1f                	je     1d31 <trim_EPC_pages+0xe4>
    1d12:	48 8d 0d a3 e3 02 00 	lea    0x2e3a3(%rip),%rcx        # 300bc <g_dyn_entry_table+0xbc>
    1d19:	48 8d 15 b8 e3 02 00 	lea    0x2e3b8(%rip),%rdx        # 300d8 <_ZZ14trim_EPC_pagesE8__func__>
    1d20:	be 82 01 00 00       	mov    $0x182,%esi
    1d25:	48 8d 3d 98 e3 02 00 	lea    0x2e398(%rip),%rdi        # 300c4 <g_dyn_entry_table+0xc4>
    1d2c:	e8 9a 32 00 00       	callq  4fcb <__assert>
    
    // trim commit ocall
    size_t i = start;
    1d31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1d35:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while (i < end)
    1d39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1d3d:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    1d41:	73 3e                	jae    1d81 <trim_EPC_pages+0x134>
    {
        rc = trim_range_commit_ocall(i);
    1d43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1d47:	48 89 c7             	mov    %rax,%rdi
    1d4a:	e8 9b 14 00 00       	callq  31ea <trim_range_commit_ocall>
    1d4f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
        assert(rc == 0);
    1d52:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
    1d56:	74 1f                	je     1d77 <trim_EPC_pages+0x12a>
    1d58:	48 8d 0d 5d e3 02 00 	lea    0x2e35d(%rip),%rcx        # 300bc <g_dyn_entry_table+0xbc>
    1d5f:	48 8d 15 72 e3 02 00 	lea    0x2e372(%rip),%rdx        # 300d8 <_ZZ14trim_EPC_pagesE8__func__>
    1d66:	be 89 01 00 00       	mov    $0x189,%esi
    1d6b:	48 8d 3d 52 e3 02 00 	lea    0x2e352(%rip),%rdi        # 300c4 <g_dyn_entry_table+0xc4>
    1d72:	e8 54 32 00 00       	callq  4fcb <__assert>
        i += SE_PAGE_SIZE;
    1d77:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
    1d7e:	00 
    while (i < end)
    1d7f:	eb b8                	jmp    1d39 <trim_EPC_pages+0xec>
    }

    return rc;
    1d81:	8b 45 e4             	mov    -0x1c(%rbp),%eax
#endif
}
    1d84:	c9                   	leaveq 
    1d85:	c3                   	retq   

0000000000001d86 <do_add_thread>:

// Create a thread dynamically.
// It will add necessary pages and transform one of them into type TCS.
sgx_status_t do_add_thread(void *ptcs)
{
    1d86:	55                   	push   %rbp
    1d87:	48 89 e5             	mov    %rsp,%rbp
    1d8a:	48 83 ec 50          	sub    $0x50,%rsp
    1d8e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    1d92:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1d99:	00 00 
    1d9b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    1d9f:	31 c0                	xor    %eax,%eax
#ifdef SE_SIM
    (void)ptcs;
    return SGX_SUCCESS;
#else
    int ret = SGX_ERROR_UNEXPECTED;
    1da1:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
    tcs_t *tcs = (tcs_t *)ptcs;
    1da8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    1dac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    tcs_t *tcs_template = NULL;
    1db0:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    1db7:	00 
    size_t offset = 0;
    1db8:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    1dbf:	00 
    size_t enclave_base = (size_t)get_enclave_base();
    1dc0:	e8 92 de 02 00       	callq  2fc57 <get_enclave_base>
    1dc5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    if ( 0 != check_dynamic_range((void *)tcs, 1, &offset, NULL))
    1dc9:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    1dcd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1dd1:	b9 00 00 00 00       	mov    $0x0,%ecx
    1dd6:	be 01 00 00 00       	mov    $0x1,%esi
    1ddb:	48 89 c7             	mov    %rax,%rdi
    1dde:	e8 70 f9 ff ff       	callq  1753 <_ZL19check_dynamic_rangePvmPmP24dynamic_flags_attributes>
    1de3:	85 c0                	test   %eax,%eax
    1de5:	0f 95 c0             	setne  %al
    1de8:	84 c0                	test   %al,%al
    1dea:	74 0a                	je     1df6 <do_add_thread+0x70>
        return SGX_ERROR_UNEXPECTED;
    1dec:	b8 01 00 00 00       	mov    $0x1,%eax
    1df1:	e9 bb 01 00 00       	jmpq   1fb1 <do_add_thread+0x22b>

    // check if the tcs provided exactly matches the one in signtool
    const volatile layout_t *tcs_layout = get_dynamic_layout_by_id(LAYOUT_ID_TCS_DYN);
    1df6:	bf 0e 00 00 00       	mov    $0xe,%edi
    1dfb:	e8 af f5 ff ff       	callq  13af <_Z24get_dynamic_layout_by_idt>
    1e00:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (!tcs_layout)
    1e04:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    1e09:	75 0a                	jne    1e15 <do_add_thread+0x8f>
        return SGX_ERROR_UNEXPECTED;
    1e0b:	b8 01 00 00 00       	mov    $0x1,%eax
    1e10:	e9 9c 01 00 00       	jmpq   1fb1 <do_add_thread+0x22b>

    if ((size_t)(enclave_base + tcs_layout->entry.rva + offset) != (size_t)(tcs))
    1e15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1e19:	48 8b 50 08          	mov    0x8(%rax),%rdx
    1e1d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1e21:	48 01 c2             	add    %rax,%rdx
    1e24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1e28:	48 01 c2             	add    %rax,%rdx
    1e2b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1e2f:	48 39 c2             	cmp    %rax,%rdx
    1e32:	0f 95 c0             	setne  %al
    1e35:	84 c0                	test   %al,%al
    1e37:	74 0a                	je     1e43 <do_add_thread+0xbd>
        return SGX_ERROR_UNEXPECTED;
    1e39:	b8 01 00 00 00       	mov    $0x1,%eax
    1e3e:	e9 6e 01 00 00       	jmpq   1fb1 <do_add_thread+0x22b>

    // adding page for all the dynamic entries
    for (uint16_t id = LAYOUT_ID_TCS_DYN; id <= LAYOUT_ID_STACK_DYN_MIN; id++)
    1e43:	66 c7 45 c2 0e 00    	movw   $0xe,-0x3e(%rbp)
    1e49:	66 83 7d c2 12       	cmpw   $0x12,-0x3e(%rbp)
    1e4e:	0f 87 85 00 00 00    	ja     1ed9 <do_add_thread+0x153>
    {
        const volatile layout_t *layout =  get_dynamic_layout_by_id(id);
    1e54:	0f b7 45 c2          	movzwl -0x3e(%rbp),%eax
    1e58:	89 c7                	mov    %eax,%edi
    1e5a:	e8 50 f5 ff ff       	callq  13af <_Z24get_dynamic_layout_by_idt>
    1e5f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        if (layout && (layout->entry.attributes & PAGE_ATTR_DYN_THREAD))
    1e63:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    1e68:	74 19                	je     1e83 <do_add_thread+0xfd>
    1e6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e6e:	0f b7 40 02          	movzwl 0x2(%rax),%eax
    1e72:	0f b7 c0             	movzwl %ax,%eax
    1e75:	83 e0 20             	and    $0x20,%eax
    1e78:	85 c0                	test   %eax,%eax
    1e7a:	74 07                	je     1e83 <do_add_thread+0xfd>
    1e7c:	b8 01 00 00 00       	mov    $0x1,%eax
    1e81:	eb 05                	jmp    1e88 <do_add_thread+0x102>
    1e83:	b8 00 00 00 00       	mov    $0x0,%eax
    1e88:	84 c0                	test   %al,%al
    1e8a:	74 3d                	je     1ec9 <do_add_thread+0x143>
        {
            ret = apply_EPC_pages((void *)(enclave_base + layout->entry.rva + offset), layout->entry.page_count);
    1e8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e90:	8b 40 04             	mov    0x4(%rax),%eax
    1e93:	89 c1                	mov    %eax,%ecx
    1e95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e99:	48 8b 50 08          	mov    0x8(%rax),%rdx
    1e9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1ea1:	48 01 c2             	add    %rax,%rdx
    1ea4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1ea8:	48 01 d0             	add    %rdx,%rax
    1eab:	48 89 ce             	mov    %rcx,%rsi
    1eae:	48 89 c7             	mov    %rax,%rdi
    1eb1:	e8 c4 fc ff ff       	callq  1b7a <apply_EPC_pages>
    1eb6:	89 45 c4             	mov    %eax,-0x3c(%rbp)
            if (ret != 0)
    1eb9:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
    1ebd:	74 0a                	je     1ec9 <do_add_thread+0x143>
                return SGX_ERROR_UNEXPECTED;
    1ebf:	b8 01 00 00 00       	mov    $0x1,%eax
    1ec4:	e9 e8 00 00 00       	jmpq   1fb1 <do_add_thread+0x22b>
    for (uint16_t id = LAYOUT_ID_TCS_DYN; id <= LAYOUT_ID_STACK_DYN_MIN; id++)
    1ec9:	0f b7 45 c2          	movzwl -0x3e(%rbp),%eax
    1ecd:	83 c0 01             	add    $0x1,%eax
    1ed0:	66 89 45 c2          	mov    %ax,-0x3e(%rbp)
    1ed4:	e9 70 ff ff ff       	jmpq   1e49 <do_add_thread+0xc3>
        }
    }

    //Copy and initialize TCS
    tcs_template = (tcs_t *)g_global_data.tcs_template;
    1ed9:	48 8d 05 60 f1 02 00 	lea    0x2f160(%rip),%rax        # 31040 <g_global_data>
    1ee0:	48 8d 80 d0 00 00 00 	lea    0xd0(%rax),%rax
    1ee7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    memcpy_s(tcs, TCS_SIZE, tcs_template, sizeof(g_global_data.tcs_template));
    1eeb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    1eef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1ef3:	b9 48 00 00 00       	mov    $0x48,%ecx
    1ef8:	be 00 10 00 00       	mov    $0x1000,%esi
    1efd:	48 89 c7             	mov    %rax,%rdi
    1f00:	e8 33 f2 ff ff       	callq  1138 <memcpy_s>

    //Adjust the tcs fields
    tcs->ossa = (size_t)GET_PTR(size_t, (void *)tcs, tcs->ossa) - enclave_base;
    1f05:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f09:	48 8b 50 10          	mov    0x10(%rax),%rdx
    1f0d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f11:	48 01 d0             	add    %rdx,%rax
    1f14:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
    1f18:	48 89 c2             	mov    %rax,%rdx
    1f1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f1f:	48 89 50 10          	mov    %rdx,0x10(%rax)
    tcs->ofs_base = (size_t)GET_PTR(size_t, (void *)tcs, tcs->ofs_base) - enclave_base;
    1f23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f27:	48 8b 50 30          	mov    0x30(%rax),%rdx
    1f2b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f2f:	48 01 d0             	add    %rdx,%rax
    1f32:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
    1f36:	48 89 c2             	mov    %rax,%rdx
    1f39:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f3d:	48 89 50 30          	mov    %rdx,0x30(%rax)
    tcs->ogs_base = (size_t)GET_PTR(size_t, (void *)tcs, tcs->ogs_base) - enclave_base;
    1f41:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f45:	48 8b 50 38          	mov    0x38(%rax),%rdx
    1f49:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f4d:	48 01 d0             	add    %rdx,%rax
    1f50:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
    1f54:	48 89 c2             	mov    %rax,%rdx
    1f57:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f5b:	48 89 50 38          	mov    %rdx,0x38(%rax)

    //OCALL for MKTCS
    ret = sgx_ocall(0, tcs);
    1f5f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f63:	48 89 c6             	mov    %rax,%rsi
    1f66:	bf 00 00 00 00       	mov    $0x0,%edi
    1f6b:	e8 09 10 00 00       	callq  2f79 <sgx_ocall>
    1f70:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    if (ret != 0)
    1f73:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
    1f77:	74 07                	je     1f80 <do_add_thread+0x1fa>
        return SGX_ERROR_UNEXPECTED;
    1f79:	b8 01 00 00 00       	mov    $0x1,%eax
    1f7e:	eb 31                	jmp    1fb1 <do_add_thread+0x22b>

    //EACCEPT for MKTCS
    ret = sgx_accept_backward(SI_FLAG_TCS | SI_FLAG_MODIFIED, (size_t)tcs, (size_t)tcs + SE_PAGE_SIZE);
    1f80:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f84:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
    1f8b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f8f:	48 89 c6             	mov    %rax,%rsi
    1f92:	bf 10 01 00 00       	mov    $0x110,%edi
    1f97:	e8 e3 f1 ff ff       	callq  117f <_ZL19sgx_accept_backwardmmm>
    1f9c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    if (ret != 0)
    1f9f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
    1fa3:	74 07                	je     1fac <do_add_thread+0x226>
        return SGX_ERROR_UNEXPECTED;
    1fa5:	b8 01 00 00 00       	mov    $0x1,%eax
    1faa:	eb 05                	jmp    1fb1 <do_add_thread+0x22b>

    return SGX_SUCCESS;
    1fac:	b8 00 00 00 00       	mov    $0x0,%eax

#endif
}
    1fb1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    1fb5:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1fbc:	00 00 
    1fbe:	74 05                	je     1fc5 <do_add_thread+0x23f>
    1fc0:	e8 d3 2f 00 00       	callq  4f98 <__stack_chk_fail>
    1fc5:	c9                   	leaveq 
    1fc6:	c3                   	retq   

0000000000001fc7 <memcpy_s>:
{
    1fc7:	55                   	push   %rbp
    1fc8:	48 89 e5             	mov    %rsp,%rbp
    1fcb:	48 83 ec 20          	sub    $0x20,%rsp
    1fcf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1fd3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    1fd7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    1fdb:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    if(numberOfElements<count)
    1fdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1fe3:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    1fe7:	73 07                	jae    1ff0 <memcpy_s+0x29>
        return -1;
    1fe9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1fee:	eb 1c                	jmp    200c <memcpy_s+0x45>
    memcpy(dest, src, count);
    1ff0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    1ff4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1ff8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1ffc:	48 89 ce             	mov    %rcx,%rsi
    1fff:	48 89 c7             	mov    %rax,%rdi
    2002:	e8 e3 c7 00 00       	callq  e7ea <memcpy>
    return 0;
    2007:	b8 00 00 00 00       	mov    $0x0,%eax
}
    200c:	c9                   	leaveq 
    200d:	c3                   	retq   

000000000000200e <_ZL16is_ecall_allowedj>:

#include "sgx_random_buffers.h"
// is_ecall_allowed()
// check the index in the dynamic entry table
static sgx_status_t is_ecall_allowed(uint32_t ordinal)
{
    200e:	55                   	push   %rbp
    200f:	48 89 e5             	mov    %rsp,%rbp
    2012:	48 83 ec 30          	sub    $0x30,%rsp
    2016:	89 7d dc             	mov    %edi,-0x24(%rbp)
    if(ordinal >= g_ecall_table.nr_ecall)
    2019:	8b 55 dc             	mov    -0x24(%rbp),%edx
    201c:	48 8d 05 3d 2d 23 00 	lea    0x232d3d(%rip),%rax        # 234d60 <g_ecall_table>
    2023:	48 8b 00             	mov    (%rax),%rax
    2026:	48 39 c2             	cmp    %rax,%rdx
    2029:	72 0a                	jb     2035 <_ZL16is_ecall_allowedj+0x27>
    {
        return SGX_ERROR_INVALID_FUNCTION;
    202b:	b8 01 10 00 00       	mov    $0x1001,%eax
    2030:	e9 c7 00 00 00       	jmpq   20fc <_ZL16is_ecall_allowedj+0xee>
    }
    thread_data_t *thread_data = get_thread_data();
    2035:	e8 58 dc 02 00       	callq  2fc92 <get_thread_data>
    203a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    sgx_lfence();
    203e:	0f ae e8             	lfence 

    if(thread_data->last_sp == thread_data->stack_base_addr)
    2041:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2045:	48 8b 50 08          	mov    0x8(%rax),%rdx
    2049:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    204d:	48 8b 40 10          	mov    0x10(%rax),%rax
    2051:	48 39 c2             	cmp    %rax,%rdx
    2054:	75 2d                	jne    2083 <_ZL16is_ecall_allowedj+0x75>
    {
        // root ECALL, check the priv bits.
        if (g_ecall_table.ecall_table[ordinal].is_priv)
    2056:	48 8d 05 03 2d 23 00 	lea    0x232d03(%rip),%rax        # 234d60 <g_ecall_table>
    205d:	8b 55 dc             	mov    -0x24(%rbp),%edx
    2060:	48 c1 e2 04          	shl    $0x4,%rdx
    2064:	48 01 d0             	add    %rdx,%rax
    2067:	48 83 c0 10          	add    $0x10,%rax
    206b:	0f b6 00             	movzbl (%rax),%eax
    206e:	84 c0                	test   %al,%al
    2070:	74 0a                	je     207c <_ZL16is_ecall_allowedj+0x6e>
            return SGX_ERROR_ECALL_NOT_ALLOWED;
    2072:	b8 07 10 00 00       	mov    $0x1007,%eax
    2077:	e9 80 00 00 00       	jmpq   20fc <_ZL16is_ecall_allowedj+0xee>
        return SGX_SUCCESS;
    207c:	b8 00 00 00 00       	mov    $0x0,%eax
    2081:	eb 79                	jmp    20fc <_ZL16is_ecall_allowedj+0xee>
    }
    ocall_context_t *context = reinterpret_cast<ocall_context_t*>(thread_data->last_sp);
    2083:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2087:	48 8b 40 08          	mov    0x8(%rax),%rax
    208b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(context->ocall_flag != OCALL_FLAG)
    208f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2093:	48 8b 40 20          	mov    0x20(%rax),%rax
    2097:	48 3d 44 49 43 4f    	cmp    $0x4f434944,%rax
    209d:	74 05                	je     20a4 <_ZL16is_ecall_allowedj+0x96>
    {
        // abort the enclave if ocall frame is invalid
        abort();
    209f:	e8 ea de 02 00       	callq  2ff8e <abort>
    }
    uintptr_t ocall_index = context->ocall_index;
    20a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    20a8:	48 8b 40 28          	mov    0x28(%rax),%rax
    20ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if(ocall_index >= g_dyn_entry_table.nr_ocall)
    20b0:	48 8d 05 49 df 02 00 	lea    0x2df49(%rip),%rax        # 30000 <g_dyn_entry_table>
    20b7:	48 8b 00             	mov    (%rax),%rax
    20ba:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    20be:	72 07                	jb     20c7 <_ZL16is_ecall_allowedj+0xb9>
    {
        return SGX_ERROR_INVALID_FUNCTION;
    20c0:	b8 01 10 00 00       	mov    $0x1001,%eax
    20c5:	eb 35                	jmp    20fc <_ZL16is_ecall_allowedj+0xee>
    }
    return (g_dyn_entry_table.entry_table[ocall_index * g_ecall_table.nr_ecall + ordinal] ? SGX_SUCCESS : SGX_ERROR_ECALL_NOT_ALLOWED);
    20c7:	48 8d 05 92 2c 23 00 	lea    0x232c92(%rip),%rax        # 234d60 <g_ecall_table>
    20ce:	48 8b 00             	mov    (%rax),%rax
    20d1:	48 0f af 45 f8       	imul   -0x8(%rbp),%rax
    20d6:	48 89 c2             	mov    %rax,%rdx
    20d9:	8b 45 dc             	mov    -0x24(%rbp),%eax
    20dc:	48 01 c2             	add    %rax,%rdx
    20df:	48 8d 05 1a df 02 00 	lea    0x2df1a(%rip),%rax        # 30000 <g_dyn_entry_table>
    20e6:	0f b6 44 10 08       	movzbl 0x8(%rax,%rdx,1),%eax
    20eb:	84 c0                	test   %al,%al
    20ed:	74 07                	je     20f6 <_ZL16is_ecall_allowedj+0xe8>
    20ef:	b8 00 00 00 00       	mov    $0x0,%eax
    20f4:	eb 05                	jmp    20fb <_ZL16is_ecall_allowedj+0xed>
    20f6:	b8 07 10 00 00       	mov    $0x1007,%eax
    20fb:	90                   	nop
}
    20fc:	c9                   	leaveq 
    20fd:	c3                   	retq   

00000000000020fe <_ZL13get_func_addrjPPv>:
// Return Value:
//      non-zero - success
//      zero - fail
//
static sgx_status_t get_func_addr(uint32_t ordinal, void **addr)
{
    20fe:	55                   	push   %rbp
    20ff:	48 89 e5             	mov    %rsp,%rbp
    2102:	48 83 ec 20          	sub    $0x20,%rsp
    2106:	89 7d ec             	mov    %edi,-0x14(%rbp)
    2109:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	// Special ECalls for Switchless SGX
	if ((unlikely(ordinal == (uint32_t)ECMD_INIT_SWITCHLESS)) ||
    210d:	83 7d ec fa          	cmpl   $0xfffffffa,-0x14(%rbp)
    2111:	0f 94 c0             	sete   %al
    2114:	0f b6 c0             	movzbl %al,%eax
    2117:	48 85 c0             	test   %rax,%rax
    211a:	75 0f                	jne    212b <_ZL13get_func_addrjPPv+0x2d>
        (unlikely(ordinal == (uint32_t)ECMD_RUN_SWITCHLESS_TWORKER)))
    211c:	83 7d ec f9          	cmpl   $0xfffffff9,-0x14(%rbp)
    2120:	0f 94 c0             	sete   %al
    2123:	0f b6 c0             	movzbl %al,%eax
	if ((unlikely(ordinal == (uint32_t)ECMD_INIT_SWITCHLESS)) ||
    2126:	48 85 c0             	test   %rax,%rax
    2129:	74 5e                	je     2189 <_ZL13get_func_addrjPPv+0x8b>
	{
		//check if it is ROOT ECALL
		thread_data_t *thread_data = get_thread_data();
    212b:	e8 62 db 02 00       	callq  2fc92 <get_thread_data>
    2130:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if(thread_data->last_sp != thread_data->stack_base_addr) 
    2134:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2138:	48 8b 50 08          	mov    0x8(%rax),%rdx
    213c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2140:	48 8b 40 10          	mov    0x10(%rax),%rax
    2144:	48 39 c2             	cmp    %rax,%rdx
    2147:	74 0a                	je     2153 <_ZL13get_func_addrjPPv+0x55>
		{
			return SGX_ERROR_UNEXPECTED;
    2149:	b8 01 00 00 00       	mov    $0x1,%eax
    214e:	e9 96 00 00 00       	jmpq   21e9 <_ZL13get_func_addrjPPv+0xeb>
        }
		
        if (ordinal == (uint32_t)ECMD_INIT_SWITCHLESS)
    2153:	83 7d ec fa          	cmpl   $0xfffffffa,-0x14(%rbp)
    2157:	75 15                	jne    216e <_ZL13get_func_addrjPPv+0x70>
	    {
            *addr = (void*) do_init_switchless;
    2159:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    215d:	48 8d 15 f3 0f 00 00 	lea    0xff3(%rip),%rdx        # 3157 <do_init_switchless>
    2164:	48 89 10             	mov    %rdx,(%rax)
            return SGX_SUCCESS;
    2167:	b8 00 00 00 00       	mov    $0x0,%eax
    216c:	eb 7b                	jmp    21e9 <_ZL13get_func_addrjPPv+0xeb>
        }
        else if (ordinal == (uint32_t)ECMD_RUN_SWITCHLESS_TWORKER) 
    216e:	83 7d ec f9          	cmpl   $0xfffffff9,-0x14(%rbp)
    2172:	75 15                	jne    2189 <_ZL13get_func_addrjPPv+0x8b>
	    {
            *addr = (void*) do_run_switchless_tworker;
    2174:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2178:	48 8d 15 e7 0f 00 00 	lea    0xfe7(%rip),%rdx        # 3166 <do_run_switchless_tworker>
    217f:	48 89 10             	mov    %rdx,(%rax)
            return SGX_SUCCESS;
    2182:	b8 00 00 00 00       	mov    $0x0,%eax
    2187:	eb 60                	jmp    21e9 <_ZL13get_func_addrjPPv+0xeb>
			
	}
		

    // Normal user-defined ECalls
    sgx_status_t status = is_ecall_allowed(ordinal);
    2189:	8b 45 ec             	mov    -0x14(%rbp),%eax
    218c:	89 c7                	mov    %eax,%edi
    218e:	e8 7b fe ff ff       	callq  200e <_ZL16is_ecall_allowedj>
    2193:	89 45 f4             	mov    %eax,-0xc(%rbp)
    if(SGX_SUCCESS != status)
    2196:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
    219a:	74 05                	je     21a1 <_ZL13get_func_addrjPPv+0xa3>
    {
        return status;
    219c:	8b 45 f4             	mov    -0xc(%rbp),%eax
    219f:	eb 48                	jmp    21e9 <_ZL13get_func_addrjPPv+0xeb>
    }

    *addr = const_cast<void *>(g_ecall_table.ecall_table[ordinal].ecall_addr);
    21a1:	48 8d 05 b8 2b 23 00 	lea    0x232bb8(%rip),%rax        # 234d60 <g_ecall_table>
    21a8:	8b 55 ec             	mov    -0x14(%rbp),%edx
    21ab:	48 c1 e2 04          	shl    $0x4,%rdx
    21af:	48 01 d0             	add    %rdx,%rax
    21b2:	48 83 c0 08          	add    $0x8,%rax
    21b6:	48 8b 10             	mov    (%rax),%rdx
    21b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    21bd:	48 89 10             	mov    %rdx,(%rax)
    if(!sgx_is_within_enclave(*addr, 0))
    21c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    21c4:	48 8b 00             	mov    (%rax),%rax
    21c7:	be 00 00 00 00       	mov    $0x0,%esi
    21cc:	48 89 c7             	mov    %rax,%rdi
    21cf:	e8 3c eb ff ff       	callq  d10 <sgx_is_within_enclave>
    21d4:	85 c0                	test   %eax,%eax
    21d6:	0f 94 c0             	sete   %al
    21d9:	84 c0                	test   %al,%al
    21db:	74 07                	je     21e4 <_ZL13get_func_addrjPPv+0xe6>
    {
        return SGX_ERROR_UNEXPECTED;
    21dd:	b8 01 00 00 00       	mov    $0x1,%eax
    21e2:	eb 05                	jmp    21e9 <_ZL13get_func_addrjPPv+0xeb>
    }

    return SGX_SUCCESS;
    21e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
    21e9:	c9                   	leaveq 
    21ea:	c3                   	retq   

00000000000021eb <_ZL17is_utility_threadv>:

static bool is_utility_thread()
{
    21eb:	55                   	push   %rbp
    21ec:	48 89 e5             	mov    %rsp,%rbp
    21ef:	48 83 ec 10          	sub    $0x10,%rsp
    thread_data_t *thread_data = get_thread_data();
    21f3:	e8 9a da 02 00       	callq  2fc92 <get_thread_data>
    21f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if ((thread_data != NULL) && (thread_data->flags & SGX_UTILITY_THREAD))
    21fc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2201:	74 17                	je     221a <_ZL17is_utility_threadv+0x2f>
    2203:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2207:	48 8b 40 30          	mov    0x30(%rax),%rax
    220b:	83 e0 01             	and    $0x1,%eax
    220e:	48 85 c0             	test   %rax,%rax
    2211:	74 07                	je     221a <_ZL17is_utility_threadv+0x2f>
    {
        return true;
    2213:	b8 01 00 00 00       	mov    $0x1,%eax
    2218:	eb 05                	jmp    221f <_ZL17is_utility_threadv+0x34>
    }
    return false;
    221a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    221f:	c9                   	leaveq 
    2220:	c3                   	retq   

0000000000002221 <_ZL11do_save_tcsPv>:
// Return Value:
//     zero - success
//     non-zero - fail
//
static sgx_status_t do_save_tcs(void *ptcs)
{
    2221:	55                   	push   %rbp
    2222:	48 89 e5             	mov    %rsp,%rbp
    2225:	48 83 ec 30          	sub    $0x30,%rsp
    2229:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    222d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2234:	00 00 
    2236:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    223a:	31 c0                	xor    %eax,%eax
    if(!is_utility_thread())
    223c:	e8 aa ff ff ff       	callq  21eb <_ZL17is_utility_threadv>
    2241:	83 f0 01             	xor    $0x1,%eax
    2244:	84 c0                	test   %al,%al
    2246:	74 0a                	je     2252 <_ZL11do_save_tcsPv+0x31>
        return SGX_ERROR_UNEXPECTED;
    2248:	b8 01 00 00 00       	mov    $0x1,%eax
    224d:	e9 b0 00 00 00       	jmpq   2302 <_ZL11do_save_tcsPv+0xe1>

    if(unlikely(g_tcs_cookie == 0))
    2252:	48 8b 05 ef 36 23 00 	mov    0x2336ef(%rip),%rax        # 235948 <_ZL12g_tcs_cookie>
    2259:	48 85 c0             	test   %rax,%rax
    225c:	0f 94 c0             	sete   %al
    225f:	0f b6 c0             	movzbl %al,%eax
    2262:	48 85 c0             	test   %rax,%rax
    2265:	74 4b                	je     22b2 <_ZL11do_save_tcsPv+0x91>
    {
        uintptr_t rand = 0;
    2267:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    226e:	00 
        do
        {
            if(SGX_SUCCESS != sgx_read_rand((unsigned char *)&rand, sizeof(rand)))
    226f:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    2273:	be 08 00 00 00       	mov    $0x8,%esi
    2278:	48 89 c7             	mov    %rax,%rdi
    227b:	e8 56 ed ff ff       	callq  fd6 <sgx_read_rand>
    2280:	85 c0                	test   %eax,%eax
    2282:	0f 95 c0             	setne  %al
    2285:	84 c0                	test   %al,%al
    2287:	74 07                	je     2290 <_ZL11do_save_tcsPv+0x6f>
            {
                return SGX_ERROR_UNEXPECTED;
    2289:	b8 01 00 00 00       	mov    $0x1,%eax
    228e:	eb 72                	jmp    2302 <_ZL11do_save_tcsPv+0xe1>
            }
        } while(rand == 0);
    2290:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2294:	48 85 c0             	test   %rax,%rax
    2297:	75 02                	jne    229b <_ZL11do_save_tcsPv+0x7a>
        do
    2299:	eb d4                	jmp    226f <_ZL11do_save_tcsPv+0x4e>

        if(g_tcs_cookie == 0)
    229b:	48 8b 05 a6 36 23 00 	mov    0x2336a6(%rip),%rax        # 235948 <_ZL12g_tcs_cookie>
    22a2:	48 85 c0             	test   %rax,%rax
    22a5:	75 0b                	jne    22b2 <_ZL11do_save_tcsPv+0x91>
        {
            g_tcs_cookie = rand;
    22a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    22ab:	48 89 05 96 36 23 00 	mov    %rax,0x233696(%rip)        # 235948 <_ZL12g_tcs_cookie>
        }
    }

    tcs_node_t *tcs_node = (tcs_node_t *)malloc(sizeof(tcs_node_t));
    22b2:	bf 10 00 00 00       	mov    $0x10,%edi
    22b7:	e8 69 8e 00 00       	callq  b125 <dlmalloc>
    22bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(!tcs_node)
    22c0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    22c5:	75 07                	jne    22ce <_ZL11do_save_tcsPv+0xad>
    {
        return SGX_ERROR_UNEXPECTED;
    22c7:	b8 01 00 00 00       	mov    $0x1,%eax
    22cc:	eb 34                	jmp    2302 <_ZL11do_save_tcsPv+0xe1>
    }

    tcs_node->tcs = ENC_TCS_POINTER(ptcs);
    22ce:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    22d2:	48 8b 05 6f 36 23 00 	mov    0x23366f(%rip),%rax        # 235948 <_ZL12g_tcs_cookie>
    22d9:	48 31 c2             	xor    %rax,%rdx
    22dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    22e0:	48 89 10             	mov    %rdx,(%rax)

    tcs_node->next = g_tcs_node;
    22e3:	48 8b 15 56 36 23 00 	mov    0x233656(%rip),%rdx        # 235940 <_ZL10g_tcs_node>
    22ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    22ee:	48 89 50 08          	mov    %rdx,0x8(%rax)
    g_tcs_node = tcs_node;
    22f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    22f6:	48 89 05 43 36 23 00 	mov    %rax,0x233643(%rip)        # 235940 <_ZL10g_tcs_node>

    return SGX_SUCCESS;
    22fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
    2302:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    2306:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    230d:	00 00 
    230f:	74 05                	je     2316 <_ZL11do_save_tcsPv+0xf5>
    2311:	e8 82 2c 00 00       	callq  4f98 <__stack_chk_fail>
    2316:	c9                   	leaveq 
    2317:	c3                   	retq   

0000000000002318 <_ZL10do_del_tcsPv>:
//      [IN] ptcs - the tcs_t pointer which need to be deleted
// Return Value:
//     N/A
//
static void do_del_tcs(void *ptcs)
{
    2318:	55                   	push   %rbp
    2319:	48 89 e5             	mov    %rsp,%rbp
    231c:	48 83 ec 30          	sub    $0x30,%rsp
    2320:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    if(!is_utility_thread())
    2324:	e8 c2 fe ff ff       	callq  21eb <_ZL17is_utility_threadv>
    2329:	83 f0 01             	xor    $0x1,%eax
    232c:	84 c0                	test   %al,%al
    232e:	0f 85 c1 00 00 00    	jne    23f5 <_ZL10do_del_tcsPv+0xdd>
        return;

    if (g_tcs_node != NULL)
    2334:	48 8b 05 05 36 23 00 	mov    0x233605(%rip),%rax        # 235940 <_ZL10g_tcs_node>
    233b:	48 85 c0             	test   %rax,%rax
    233e:	0f 84 b2 00 00 00    	je     23f6 <_ZL10do_del_tcsPv+0xde>
    {
        if (DEC_TCS_POINTER(g_tcs_node->tcs) == ptcs)
    2344:	48 8b 05 f5 35 23 00 	mov    0x2335f5(%rip),%rax        # 235940 <_ZL10g_tcs_node>
    234b:	48 8b 10             	mov    (%rax),%rdx
    234e:	48 8b 05 f3 35 23 00 	mov    0x2335f3(%rip),%rax        # 235948 <_ZL12g_tcs_cookie>
    2355:	48 31 d0             	xor    %rdx,%rax
    2358:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    235c:	75 2b                	jne    2389 <_ZL10do_del_tcsPv+0x71>
        {
            tcs_node_t *tmp = g_tcs_node;
    235e:	48 8b 05 db 35 23 00 	mov    0x2335db(%rip),%rax        # 235940 <_ZL10g_tcs_node>
    2365:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            g_tcs_node = g_tcs_node->next;
    2369:	48 8b 05 d0 35 23 00 	mov    0x2335d0(%rip),%rax        # 235940 <_ZL10g_tcs_node>
    2370:	48 8b 40 08          	mov    0x8(%rax),%rax
    2374:	48 89 05 c5 35 23 00 	mov    %rax,0x2335c5(%rip)        # 235940 <_ZL10g_tcs_node>
            free(tmp);
    237b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    237f:	48 89 c7             	mov    %rax,%rdi
    2382:	e8 95 98 00 00       	callq  bc1c <dlfree>
    2387:	eb 6d                	jmp    23f6 <_ZL10do_del_tcsPv+0xde>
        }
        else
        {
            tcs_node_t *tcs_node = g_tcs_node->next;
    2389:	48 8b 05 b0 35 23 00 	mov    0x2335b0(%rip),%rax        # 235940 <_ZL10g_tcs_node>
    2390:	48 8b 40 08          	mov    0x8(%rax),%rax
    2394:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            tcs_node_t *pre_tcs_node = g_tcs_node;
    2398:	48 8b 05 a1 35 23 00 	mov    0x2335a1(%rip),%rax        # 235940 <_ZL10g_tcs_node>
    239f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
            while (tcs_node != NULL)
    23a3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    23a8:	74 4c                	je     23f6 <_ZL10do_del_tcsPv+0xde>
            {
                if (DEC_TCS_POINTER(tcs_node->tcs) == ptcs)
    23aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    23ae:	48 8b 10             	mov    (%rax),%rdx
    23b1:	48 8b 05 90 35 23 00 	mov    0x233590(%rip),%rax        # 235948 <_ZL12g_tcs_cookie>
    23b8:	48 31 d0             	xor    %rdx,%rax
    23bb:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    23bf:	75 1e                	jne    23df <_ZL10do_del_tcsPv+0xc7>
                {
                    pre_tcs_node->next = tcs_node->next;
    23c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    23c5:	48 8b 50 08          	mov    0x8(%rax),%rdx
    23c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    23cd:	48 89 50 08          	mov    %rdx,0x8(%rax)
                    free(tcs_node);
    23d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    23d5:	48 89 c7             	mov    %rax,%rdi
    23d8:	e8 3f 98 00 00       	callq  bc1c <dlfree>
                    break;
    23dd:	eb 17                	jmp    23f6 <_ZL10do_del_tcsPv+0xde>
                }

                pre_tcs_node = tcs_node;
    23df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    23e3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
                tcs_node = tcs_node->next;
    23e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    23eb:	48 8b 40 08          	mov    0x8(%rax),%rax
    23ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            while (tcs_node != NULL)
    23f3:	eb ae                	jmp    23a3 <_ZL10do_del_tcsPv+0x8b>
        return;
    23f5:	90                   	nop
            }
        }
    }
}
    23f6:	c9                   	leaveq 
    23f7:	c3                   	retq   

00000000000023f8 <_ZL10trts_ecalljPv>:
static volatile bool           g_is_first_ecall = true;
static volatile sgx_spinlock_t g_ife_lock       = SGX_SPINLOCK_INITIALIZER;

typedef sgx_status_t (*ecall_func_t)(void *ms);
static sgx_status_t trts_ecall(uint32_t ordinal, void *ms)
{
    23f8:	55                   	push   %rbp
    23f9:	48 89 e5             	mov    %rsp,%rbp
    23fc:	48 83 ec 40          	sub    $0x40,%rsp
    2400:	89 7d cc             	mov    %edi,-0x34(%rbp)
    2403:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    2407:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    240e:	00 00 
    2410:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2414:	31 c0                	xor    %eax,%eax
    sgx_status_t status = SGX_ERROR_UNEXPECTED;
    2416:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)

    if (unlikely(g_is_first_ecall))
    241d:	0f b6 05 dc 2b 23 00 	movzbl 0x232bdc(%rip),%eax        # 235000 <_ZL16g_is_first_ecall>
    2424:	0f b6 c0             	movzbl %al,%eax
    2427:	48 85 c0             	test   %rax,%rax
    242a:	0f 95 c0             	setne  %al
    242d:	84 c0                	test   %al,%al
    242f:	0f 84 9a 00 00 00    	je     24cf <_ZL10trts_ecalljPv+0xd7>
    {
        // The thread performing the global initialization cannot do a nested ECall
        thread_data_t *thread_data = get_thread_data();
    2435:	e8 58 d8 02 00       	callq  2fc92 <get_thread_data>
    243a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (thread_data->last_sp != thread_data->stack_base_addr)
    243e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2442:	48 8b 50 08          	mov    0x8(%rax),%rdx
    2446:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    244a:	48 8b 40 10          	mov    0x10(%rax),%rax
    244e:	48 39 c2             	cmp    %rax,%rdx
    2451:	74 0a                	je     245d <_ZL10trts_ecalljPv+0x65>
        { // nested ecall
            return SGX_ERROR_ECALL_NOT_ALLOWED;
    2453:	b8 07 10 00 00       	mov    $0x1007,%eax
    2458:	e9 b2 00 00 00       	jmpq   250f <_ZL10trts_ecalljPv+0x117>
        }

        sgx_spin_lock(&g_ife_lock);
    245d:	48 8d 3d ec 34 23 00 	lea    0x2334ec(%rip),%rdi        # 235950 <_ZL10g_ife_lock>
    2464:	e8 51 ca 00 00       	callq  eeba <sgx_spin_lock>
        if (g_is_first_ecall)
    2469:	0f b6 05 90 2b 23 00 	movzbl 0x232b90(%rip),%eax        # 235000 <_ZL16g_is_first_ecall>
    2470:	84 c0                	test   %al,%al
    2472:	74 4f                	je     24c3 <_ZL10trts_ecalljPv+0xcb>
        {
#ifndef SE_SIM
            if(EDMM_supported)
    2474:	48 8d 05 25 29 23 00 	lea    0x232925(%rip),%rax        # 234da0 <EDMM_supported>
    247b:	8b 00                	mov    (%rax),%eax
    247d:	85 c0                	test   %eax,%eax
    247f:	74 36                	je     24b7 <_ZL10trts_ecalljPv+0xbf>
            {
                //change back the page permission
                size_t enclave_start = (size_t)&__ImageBase;
    2481:	48 8d 05 78 db ff ff 	lea    -0x2488(%rip),%rax        # 0 <enclave.so>
    2488:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
                if((status = change_protection((void *)enclave_start)) != SGX_SUCCESS)
    248c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2490:	48 89 c7             	mov    %rax,%rdi
    2493:	e8 50 25 00 00       	callq  49e8 <change_protection>
    2498:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    249b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
    249f:	0f 95 c0             	setne  %al
    24a2:	84 c0                	test   %al,%al
    24a4:	74 11                	je     24b7 <_ZL10trts_ecalljPv+0xbf>
                {
                    sgx_spin_unlock(&g_ife_lock);
    24a6:	48 8d 3d a3 34 23 00 	lea    0x2334a3(%rip),%rdi        # 235950 <_ZL10g_ife_lock>
    24ad:	e8 6f ca 00 00       	callq  ef21 <sgx_spin_unlock>
                    return status;
    24b2:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    24b5:	eb 58                	jmp    250f <_ZL10trts_ecalljPv+0x117>
                }
            }
#endif
            //invoke global object's construction
            init_global_object();
    24b7:	e8 95 2a 00 00       	callq  4f51 <init_global_object>
            g_is_first_ecall = false;
    24bc:	c6 05 3d 2b 23 00 00 	movb   $0x0,0x232b3d(%rip)        # 235000 <_ZL16g_is_first_ecall>
        }
        sgx_spin_unlock(&g_ife_lock);
    24c3:	48 8d 3d 86 34 23 00 	lea    0x233486(%rip),%rdi        # 235950 <_ZL10g_ife_lock>
    24ca:	e8 52 ca 00 00       	callq  ef21 <sgx_spin_unlock>
    }

    void *addr = NULL;
    24cf:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    24d6:	00 
    status = get_func_addr(ordinal, &addr);
    24d7:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
    24db:	8b 45 cc             	mov    -0x34(%rbp),%eax
    24de:	48 89 d6             	mov    %rdx,%rsi
    24e1:	89 c7                	mov    %eax,%edi
    24e3:	e8 16 fc ff ff       	callq  20fe <_ZL13get_func_addrjPPv>
    24e8:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    if(status == SGX_SUCCESS)
    24eb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
    24ef:	75 1b                	jne    250c <_ZL10trts_ecalljPv+0x114>
    {
        ecall_func_t func = (ecall_func_t)addr;
    24f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    24f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

        sgx_lfence();
    24f9:	0f ae e8             	lfence 

        status = func(ms);
    24fc:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    2500:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2504:	48 89 d7             	mov    %rdx,%rdi
    2507:	ff d0                	callq  *%rax
    2509:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    }
    
    return status;
    250c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
}
    250f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    2513:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    251a:	00 00 
    251c:	74 05                	je     2523 <_ZL10trts_ecalljPv+0x12b>
    251e:	e8 75 2a 00 00       	callq  4f98 <__stack_chk_fail>
    2523:	c9                   	leaveq 
    2524:	c3                   	retq   

0000000000002525 <_ZL24init_static_stack_canaryPv>:

extern "C" uintptr_t __stack_chk_guard;
static void init_static_stack_canary(void *tcs)
{
    2525:	55                   	push   %rbp
    2526:	48 89 e5             	mov    %rsp,%rbp
    2529:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    size_t *canary = TCS2CANARY(tcs);
    252d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2531:	48 2d a8 02 01 00    	sub    $0x102a8,%rax
    2537:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *canary = (size_t)__stack_chk_guard;
    253b:	48 8d 05 66 28 23 00 	lea    0x232866(%rip),%rax        # 234da8 <__intel_security_cookie>
    2542:	48 8b 10             	mov    (%rax),%rdx
    2545:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2549:	48 89 10             	mov    %rdx,(%rax)
}
    254c:	90                   	nop
    254d:	5d                   	pop    %rbp
    254e:	c3                   	retq   

000000000000254f <do_init_thread>:

sgx_status_t do_init_thread(void *tcs, bool enclave_init)
{
    254f:	55                   	push   %rbp
    2550:	48 89 e5             	mov    %rsp,%rbp
    2553:	48 83 ec 50          	sub    $0x50,%rsp
    2557:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    255b:	89 f0                	mov    %esi,%eax
    255d:	88 45 b4             	mov    %al,-0x4c(%rbp)
    2560:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2567:	00 00 
    2569:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    256d:	31 c0                	xor    %eax,%eax
    thread_data_t *thread_data = GET_PTR(thread_data_t, tcs, g_global_data.td_template.self_addr);
    256f:	48 8d 05 ca ea 02 00 	lea    0x2eaca(%rip),%rax        # 31040 <g_global_data>
    2576:	48 8b 50 30          	mov    0x30(%rax),%rdx
    257a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    257e:	48 01 d0             	add    %rdx,%rax
    2581:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#ifndef SE_SIM
    size_t saved_stack_commit_addr = thread_data->stack_commit_addr;
    2585:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2589:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    2590:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    bool thread_first_init = (saved_stack_commit_addr == 0) ? true : false;
    2594:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    2599:	0f 94 c0             	sete   %al
    259c:	88 45 c3             	mov    %al,-0x3d(%rbp)
#endif
    size_t stack_guard = thread_data->stack_guard;
    259f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    25a3:	48 8b 40 28          	mov    0x28(%rax),%rax
    25a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    size_t thread_flags = thread_data->flags;
    25ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    25af:	48 8b 40 30          	mov    0x30(%rax),%rax
    25b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    memcpy_s(thread_data, SE_PAGE_SIZE, const_cast<thread_data_t *>(&g_global_data.td_template), sizeof(thread_data_t));
    25b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    25bb:	b9 a0 00 00 00       	mov    $0xa0,%ecx
    25c0:	48 8d 15 79 ea 02 00 	lea    0x2ea79(%rip),%rdx        # 31040 <g_global_data>
    25c7:	48 8d 52 30          	lea    0x30(%rdx),%rdx
    25cb:	be 00 10 00 00       	mov    $0x1000,%esi
    25d0:	48 89 c7             	mov    %rax,%rdi
    25d3:	e8 ef f9 ff ff       	callq  1fc7 <memcpy_s>
    thread_data->last_sp += (size_t)tcs;
    25d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    25dc:	48 8b 50 08          	mov    0x8(%rax),%rdx
    25e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    25e4:	48 01 c2             	add    %rax,%rdx
    25e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    25eb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    thread_data->self_addr += (size_t)tcs;
    25ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    25f3:	48 8b 10             	mov    (%rax),%rdx
    25f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    25fa:	48 01 c2             	add    %rax,%rdx
    25fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2601:	48 89 10             	mov    %rdx,(%rax)
    thread_data->stack_base_addr += (size_t)tcs;
    2604:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2608:	48 8b 50 10          	mov    0x10(%rax),%rdx
    260c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    2610:	48 01 c2             	add    %rax,%rdx
    2613:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2617:	48 89 50 10          	mov    %rdx,0x10(%rax)
    thread_data->stack_limit_addr += (size_t)tcs;
    261b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    261f:	48 8b 50 18          	mov    0x18(%rax),%rdx
    2623:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    2627:	48 01 c2             	add    %rax,%rdx
    262a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    262e:	48 89 50 18          	mov    %rdx,0x18(%rax)
    thread_data->stack_commit_addr = thread_data->stack_limit_addr;
    2632:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2636:	48 8b 50 18          	mov    0x18(%rax),%rdx
    263a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    263e:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    thread_data->first_ssa_gpr += (size_t)tcs;
    2645:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2649:	48 8b 50 20          	mov    0x20(%rax),%rdx
    264d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    2651:	48 01 c2             	add    %rax,%rdx
    2654:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2658:	48 89 50 20          	mov    %rdx,0x20(%rax)
    thread_data->tls_array += (size_t)tcs;
    265c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2660:	48 8b 50 58          	mov    0x58(%rax),%rdx
    2664:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    2668:	48 01 c2             	add    %rax,%rdx
    266b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    266f:	48 89 50 58          	mov    %rdx,0x58(%rax)
    thread_data->tls_addr += (size_t)tcs;
    2673:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2677:	48 8b 50 50          	mov    0x50(%rax),%rdx
    267b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    267f:	48 01 c2             	add    %rax,%rdx
    2682:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2686:	48 89 50 50          	mov    %rdx,0x50(%rax)
    thread_data->last_sp -= (size_t)STATIC_STACK_SIZE;
    268a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    268e:	48 8b 40 08          	mov    0x8(%rax),%rax
    2692:	48 8d 90 50 fd ff ff 	lea    -0x2b0(%rax),%rdx
    2699:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    269d:	48 89 50 08          	mov    %rdx,0x8(%rax)
    thread_data->stack_base_addr -= (size_t)STATIC_STACK_SIZE;
    26a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    26a5:	48 8b 40 10          	mov    0x10(%rax),%rax
    26a9:	48 8d 90 50 fd ff ff 	lea    -0x2b0(%rax),%rdx
    26b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    26b4:	48 89 50 10          	mov    %rdx,0x10(%rax)
    thread_data->stack_guard = stack_guard;
    26b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    26bc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    26c0:	48 89 50 28          	mov    %rdx,0x28(%rax)
    thread_data->flags = thread_flags;
    26c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    26c8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    26cc:	48 89 50 30          	mov    %rdx,0x30(%rax)
    init_static_stack_canary(tcs);
    26d0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    26d4:	48 89 c7             	mov    %rax,%rdi
    26d7:	e8 49 fe ff ff       	callq  2525 <_ZL24init_static_stack_canaryPv>

    if (enclave_init)
    26dc:	80 7d b4 00          	cmpb   $0x0,-0x4c(%rbp)
    26e0:	74 0c                	je     26ee <do_init_thread+0x19f>
    {
        thread_data->flags = SGX_UTILITY_THREAD;
    26e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    26e6:	48 c7 40 30 01 00 00 	movq   $0x1,0x30(%rax)
    26ed:	00 
    }
#ifndef SE_SIM
    if (thread_first_init)
    26ee:	80 7d c3 00          	cmpb   $0x0,-0x3d(%rbp)
    26f2:	74 5d                	je     2751 <do_init_thread+0x202>
    {
        if (EDMM_supported && (enclave_init || is_dynamic_thread(tcs)))
    26f4:	48 8d 05 a5 26 23 00 	lea    0x2326a5(%rip),%rax        # 234da0 <EDMM_supported>
    26fb:	8b 00                	mov    (%rax),%eax
    26fd:	85 c0                	test   %eax,%eax
    26ff:	74 1d                	je     271e <do_init_thread+0x1cf>
    2701:	80 7d b4 00          	cmpb   $0x0,-0x4c(%rbp)
    2705:	75 10                	jne    2717 <do_init_thread+0x1c8>
    2707:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    270b:	48 89 c7             	mov    %rax,%rdi
    270e:	e8 f2 f1 ff ff       	callq  1905 <is_dynamic_thread>
    2713:	85 c0                	test   %eax,%eax
    2715:	74 07                	je     271e <do_init_thread+0x1cf>
    2717:	b8 01 00 00 00       	mov    $0x1,%eax
    271c:	eb 05                	jmp    2723 <do_init_thread+0x1d4>
    271e:	b8 00 00 00 00       	mov    $0x0,%eax
    2723:	84 c0                	test   %al,%al
    2725:	74 39                	je     2760 <do_init_thread+0x211>
        {
            uint32_t page_count = get_dynamic_stack_max_page();
    2727:	e8 99 f2 ff ff       	callq  19c5 <get_dynamic_stack_max_page>
    272c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
            thread_data->stack_commit_addr += ((sys_word_t)page_count << SE_PAGE_SHIFT);
    272f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2733:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    273a:	8b 55 c4             	mov    -0x3c(%rbp),%edx
    273d:	48 c1 e2 0c          	shl    $0xc,%rdx
    2741:	48 01 c2             	add    %rax,%rdx
    2744:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2748:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    274f:	eb 0f                	jmp    2760 <do_init_thread+0x211>
        }
    }
    else
    {
        thread_data->stack_commit_addr = saved_stack_commit_addr;
    2751:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2755:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    2759:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    }
#endif

    uintptr_t tls_addr = 0;
    2760:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    2767:	00 
    size_t tdata_size = 0;
    2768:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    276f:	00 

    if(0 != GET_TLS_INFO(&__ImageBase, &tls_addr, &tdata_size))
    2770:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2774:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
    2778:	48 89 c6             	mov    %rax,%rsi
    277b:	48 8d 05 7e d8 ff ff 	lea    -0x2782(%rip),%rax        # 0 <enclave.so>
    2782:	48 89 c7             	mov    %rax,%rdi
    2785:	e8 ca 1d 00 00       	callq  4554 <elf_tls_info>
    278a:	85 c0                	test   %eax,%eax
    278c:	0f 95 c0             	setne  %al
    278f:	84 c0                	test   %al,%al
    2791:	74 0a                	je     279d <do_init_thread+0x24e>
    {
        return SGX_ERROR_UNEXPECTED;
    2793:	b8 01 00 00 00       	mov    $0x1,%eax
    2798:	e9 83 00 00 00       	jmpq   2820 <do_init_thread+0x2d1>
    }
    if(tls_addr)
    279d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    27a1:	48 85 c0             	test   %rax,%rax
    27a4:	74 75                	je     281b <do_init_thread+0x2cc>
    {
        memset((void *)TRIM_TO_PAGE(thread_data->tls_addr), 0, ROUND_TO_PAGE(thread_data->self_addr - thread_data->tls_addr));
    27a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    27aa:	48 8b 10             	mov    (%rax),%rdx
    27ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    27b1:	48 8b 40 50          	mov    0x50(%rax),%rax
    27b5:	48 29 c2             	sub    %rax,%rdx
    27b8:	48 89 d0             	mov    %rdx,%rax
    27bb:	48 05 ff 0f 00 00    	add    $0xfff,%rax
    27c1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    27c7:	48 89 c2             	mov    %rax,%rdx
    27ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    27ce:	48 8b 40 50          	mov    0x50(%rax),%rax
    27d2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    27d8:	be 00 00 00 00       	mov    $0x0,%esi
    27dd:	48 89 c7             	mov    %rax,%rdi
    27e0:	e8 73 c0 00 00       	callq  e858 <memset>
        memcpy_s((void *)(thread_data->tls_addr), thread_data->self_addr - thread_data->tls_addr, (void *)tls_addr, tdata_size);
    27e5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    27e9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    27ed:	49 89 d0             	mov    %rdx,%r8
    27f0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    27f4:	48 8b 0a             	mov    (%rdx),%rcx
    27f7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    27fb:	48 8b 52 50          	mov    0x50(%rdx),%rdx
    27ff:	48 29 d1             	sub    %rdx,%rcx
    2802:	48 89 ce             	mov    %rcx,%rsi
    2805:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    2809:	48 8b 52 50          	mov    0x50(%rdx),%rdx
    280d:	48 89 d7             	mov    %rdx,%rdi
    2810:	48 89 c1             	mov    %rax,%rcx
    2813:	4c 89 c2             	mov    %r8,%rdx
    2816:	e8 ac f7 ff ff       	callq  1fc7 <memcpy_s>
    }

    return SGX_SUCCESS;
    281b:	b8 00 00 00 00       	mov    $0x0,%eax
}
    2820:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    2824:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    282b:	00 00 
    282d:	74 05                	je     2834 <do_init_thread+0x2e5>
    282f:	e8 64 27 00 00       	callq  4f98 <__stack_chk_fail>
    2834:	c9                   	leaveq 
    2835:	c3                   	retq   

0000000000002836 <do_ecall>:

sgx_status_t do_ecall(int index, void *ms, void *tcs)
{
    2836:	55                   	push   %rbp
    2837:	48 89 e5             	mov    %rsp,%rbp
    283a:	48 83 ec 30          	sub    $0x30,%rsp
    283e:	89 7d ec             	mov    %edi,-0x14(%rbp)
    2841:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2845:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    sgx_status_t status = SGX_ERROR_UNEXPECTED;
    2849:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
    if(ENCLAVE_INIT_DONE != get_enclave_state())
    2850:	e8 0a d4 02 00       	callq  2fc5f <get_enclave_state>
    2855:	83 f8 02             	cmp    $0x2,%eax
    2858:	0f 95 c0             	setne  %al
    285b:	84 c0                	test   %al,%al
    285d:	74 08                	je     2867 <do_ecall+0x31>
    {
        return status;
    285f:	8b 45 f4             	mov    -0xc(%rbp),%eax
    2862:	e9 b2 00 00 00       	jmpq   2919 <do_ecall+0xe3>
    }
    thread_data_t *thread_data = get_thread_data();
    2867:	e8 26 d4 02 00       	callq  2fc92 <get_thread_data>
    286c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if( (NULL == thread_data) || ((thread_data->stack_base_addr == thread_data->last_sp) && (0 != g_global_data.thread_policy)))
    2870:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2875:	74 25                	je     289c <do_ecall+0x66>
    2877:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    287b:	48 8b 50 10          	mov    0x10(%rax),%rdx
    287f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2883:	48 8b 40 08          	mov    0x8(%rax),%rax
    2887:	48 39 c2             	cmp    %rax,%rdx
    288a:	75 17                	jne    28a3 <do_ecall+0x6d>
    288c:	48 8d 05 ad e7 02 00 	lea    0x2e7ad(%rip),%rax        # 31040 <g_global_data>
    2893:	48 8b 40 28          	mov    0x28(%rax),%rax
    2897:	48 85 c0             	test   %rax,%rax
    289a:	74 07                	je     28a3 <do_ecall+0x6d>
    289c:	b8 01 00 00 00       	mov    $0x1,%eax
    28a1:	eb 05                	jmp    28a8 <do_ecall+0x72>
    28a3:	b8 00 00 00 00       	mov    $0x0,%eax
    28a8:	84 c0                	test   %al,%al
    28aa:	74 1f                	je     28cb <do_ecall+0x95>
    {
        status = do_init_thread(tcs, false);
    28ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    28b0:	be 00 00 00 00       	mov    $0x0,%esi
    28b5:	48 89 c7             	mov    %rax,%rdi
    28b8:	e8 92 fc ff ff       	callq  254f <do_init_thread>
    28bd:	89 45 f4             	mov    %eax,-0xc(%rbp)
        if(0 != status)
    28c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
    28c4:	74 05                	je     28cb <do_ecall+0x95>
        {
            return status;
    28c6:	8b 45 f4             	mov    -0xc(%rbp),%eax
    28c9:	eb 4e                	jmp    2919 <do_ecall+0xe3>
        }
    }
    thread_data = get_thread_data();
    28cb:	e8 c2 d3 02 00       	callq  2fc92 <get_thread_data>
    28d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    status = thread_data->stack_base_addr == thread_data->last_sp ? random_stack_advance<0x800>(trts_ecall, index, ms) : trts_ecall(index, ms);
    28d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    28d8:	48 8b 50 10          	mov    0x10(%rax),%rdx
    28dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    28e0:	48 8b 40 08          	mov    0x8(%rax),%rax
    28e4:	48 39 c2             	cmp    %rax,%rdx
    28e7:	75 19                	jne    2902 <do_ecall+0xcc>
    28e9:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    28ed:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
    28f1:	48 89 c6             	mov    %rax,%rsi
    28f4:	48 8d 3d fd fa ff ff 	lea    -0x503(%rip),%rdi        # 23f8 <_ZL10trts_ecalljPv>
    28fb:	e8 d8 03 00 00       	callq  2cd8 <_Z20random_stack_advanceILj2048E9_status_tJjPvEJRiRS1_EET0_PFS4_DpT1_EDpOT2_>
    2900:	eb 11                	jmp    2913 <do_ecall+0xdd>
    2902:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2906:	8b 55 ec             	mov    -0x14(%rbp),%edx
    2909:	48 89 c6             	mov    %rax,%rsi
    290c:	89 d7                	mov    %edx,%edi
    290e:	e8 e5 fa ff ff       	callq  23f8 <_ZL10trts_ecalljPv>
    2913:	89 45 f4             	mov    %eax,-0xc(%rbp)
    return status;
    2916:	8b 45 f4             	mov    -0xc(%rbp),%eax
}
    2919:	c9                   	leaveq 
    291a:	c3                   	retq   

000000000000291b <do_ecall_add_thread>:

sgx_status_t do_ecall_add_thread(void *ms)
{
    291b:	55                   	push   %rbp
    291c:	48 89 e5             	mov    %rsp,%rbp
    291f:	48 83 ec 30          	sub    $0x30,%rsp
    2923:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    sgx_status_t status = SGX_ERROR_UNEXPECTED;
    2927:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)

    if(!is_utility_thread())
    292e:	e8 b8 f8 ff ff       	callq  21eb <_ZL17is_utility_threadv>
    2933:	83 f0 01             	xor    $0x1,%eax
    2936:	84 c0                	test   %al,%al
    2938:	74 08                	je     2942 <do_ecall_add_thread+0x27>
        return status;
    293a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    293d:	e9 9b 00 00 00       	jmpq   29dd <do_ecall_add_thread+0xc2>

    struct ms_tcs *tcs = (struct ms_tcs*)ms;
    2942:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2946:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if (tcs == NULL)
    294a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    294f:	75 08                	jne    2959 <do_ecall_add_thread+0x3e>
    {
        return status;
    2951:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    2954:	e9 84 00 00 00       	jmpq   29dd <do_ecall_add_thread+0xc2>
    }

    if (!sgx_is_outside_enclave(tcs, sizeof(struct ms_tcs)))
    2959:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    295d:	be 08 00 00 00       	mov    $0x8,%esi
    2962:	48 89 c7             	mov    %rax,%rdi
    2965:	e8 36 e4 ff ff       	callq  da0 <sgx_is_outside_enclave>
    296a:	85 c0                	test   %eax,%eax
    296c:	0f 94 c0             	sete   %al
    296f:	84 c0                	test   %al,%al
    2971:	74 05                	je     2978 <do_ecall_add_thread+0x5d>
    {
        return status;
    2973:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    2976:	eb 65                	jmp    29dd <do_ecall_add_thread+0xc2>
    }

    const struct ms_tcs mtcs = *tcs;
    2978:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    297c:	48 8b 00             	mov    (%rax),%rax
    297f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    void* ptcs = mtcs.ptcs;
    2983:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2987:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (ptcs == NULL)
    298b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2990:	75 05                	jne    2997 <do_ecall_add_thread+0x7c>
    {
        return status;
    2992:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    2995:	eb 46                	jmp    29dd <do_ecall_add_thread+0xc2>
    }

    sgx_lfence();
    2997:	0f ae e8             	lfence 

    status = do_save_tcs(ptcs);
    299a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    299e:	48 89 c7             	mov    %rax,%rdi
    29a1:	e8 7b f8 ff ff       	callq  2221 <_ZL11do_save_tcsPv>
    29a6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    if(SGX_SUCCESS != status)
    29a9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
    29ad:	74 05                	je     29b4 <do_ecall_add_thread+0x99>
    {
        return status;
    29af:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    29b2:	eb 29                	jmp    29dd <do_ecall_add_thread+0xc2>
    }

    status = do_add_thread(ptcs);
    29b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    29b8:	48 89 c7             	mov    %rax,%rdi
    29bb:	e8 c6 f3 ff ff       	callq  1d86 <do_add_thread>
    29c0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    if (SGX_SUCCESS != status)
    29c3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
    29c7:	74 11                	je     29da <do_ecall_add_thread+0xbf>
    {
    	do_del_tcs(ptcs);
    29c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    29cd:	48 89 c7             	mov    %rax,%rdi
    29d0:	e8 43 f9 ff ff       	callq  2318 <_ZL10do_del_tcsPv>
        return status;
    29d5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    29d8:	eb 03                	jmp    29dd <do_ecall_add_thread+0xc2>
    }

    return status;
    29da:	8b 45 e4             	mov    -0x1c(%rbp),%eax
}
    29dd:	c9                   	leaveq 
    29de:	c3                   	retq   

00000000000029df <do_uninit_enclave>:
// Return Value:
//     zero - success
//     non-zero - fail
//
sgx_status_t do_uninit_enclave(void *tcs)
{
    29df:	55                   	push   %rbp
    29e0:	48 89 e5             	mov    %rsp,%rbp
    29e3:	48 83 ec 40          	sub    $0x40,%rsp
    29e7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
#ifndef SE_SIM
    if(EDMM_supported && !is_utility_thread())
    29eb:	48 8d 05 ae 23 23 00 	lea    0x2323ae(%rip),%rax        # 234da0 <EDMM_supported>
    29f2:	8b 00                	mov    (%rax),%eax
    29f4:	85 c0                	test   %eax,%eax
    29f6:	74 13                	je     2a0b <do_uninit_enclave+0x2c>
    29f8:	e8 ee f7 ff ff       	callq  21eb <_ZL17is_utility_threadv>
    29fd:	83 f0 01             	xor    $0x1,%eax
    2a00:	84 c0                	test   %al,%al
    2a02:	74 07                	je     2a0b <do_uninit_enclave+0x2c>
    2a04:	b8 01 00 00 00       	mov    $0x1,%eax
    2a09:	eb 05                	jmp    2a10 <do_uninit_enclave+0x31>
    2a0b:	b8 00 00 00 00       	mov    $0x0,%eax
    2a10:	84 c0                	test   %al,%al
    2a12:	74 0a                	je     2a1e <do_uninit_enclave+0x3f>
        return SGX_ERROR_UNEXPECTED;
    2a14:	b8 01 00 00 00       	mov    $0x1,%eax
    2a19:	e9 01 01 00 00       	jmpq   2b1f <do_uninit_enclave+0x140>
#endif
    tcs_node_t *tcs_node = g_tcs_node;
    2a1e:	48 8b 05 1b 2f 23 00 	mov    0x232f1b(%rip),%rax        # 235940 <_ZL10g_tcs_node>
    2a25:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    g_tcs_node = NULL;
    2a29:	48 c7 05 0c 2f 23 00 	movq   $0x0,0x232f0c(%rip)        # 235940 <_ZL10g_tcs_node>
    2a30:	00 00 00 00 
    while (tcs_node != NULL)
    2a34:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    2a39:	0f 84 a6 00 00 00    	je     2ae5 <do_uninit_enclave+0x106>
    {
        if (DEC_TCS_POINTER(tcs_node->tcs) == tcs)
    2a3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2a43:	48 8b 10             	mov    (%rax),%rdx
    2a46:	48 8b 05 fb 2e 23 00 	mov    0x232efb(%rip),%rax        # 235948 <_ZL12g_tcs_cookie>
    2a4d:	48 31 d0             	xor    %rdx,%rax
    2a50:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
    2a54:	75 22                	jne    2a78 <do_uninit_enclave+0x99>
        {
            tcs_node_t *tmp = tcs_node;
    2a56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2a5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            tcs_node = tcs_node->next;
    2a5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2a62:	48 8b 40 08          	mov    0x8(%rax),%rax
    2a66:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            free(tmp);
    2a6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2a6e:	48 89 c7             	mov    %rax,%rdi
    2a71:	e8 a6 91 00 00       	callq  bc1c <dlfree>
            continue;
    2a76:	eb 68                	jmp    2ae0 <do_uninit_enclave+0x101>
        }

        size_t start = (size_t)DEC_TCS_POINTER(tcs_node->tcs);
    2a78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2a7c:	48 8b 10             	mov    (%rax),%rdx
    2a7f:	48 8b 05 c2 2e 23 00 	mov    0x232ec2(%rip),%rax        # 235948 <_ZL12g_tcs_cookie>
    2a86:	48 31 d0             	xor    %rdx,%rax
    2a89:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        size_t end = start + (1 << SE_PAGE_SHIFT);
    2a8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2a91:	48 05 00 10 00 00    	add    $0x1000,%rax
    2a97:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        int rc = sgx_accept_forward(SI_FLAG_TRIM | SI_FLAG_MODIFIED, start, end);
    2a9b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    2a9f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2aa3:	48 89 c6             	mov    %rax,%rsi
    2aa6:	bf 10 04 00 00       	mov    $0x410,%edi
    2aab:	e8 42 ef ff ff       	callq  19f2 <sgx_accept_forward>
    2ab0:	89 45 d4             	mov    %eax,-0x2c(%rbp)
        if(rc != 0)
    2ab3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
    2ab7:	74 07                	je     2ac0 <do_uninit_enclave+0xe1>
        {
            return SGX_ERROR_UNEXPECTED;
    2ab9:	b8 01 00 00 00       	mov    $0x1,%eax
    2abe:	eb 5f                	jmp    2b1f <do_uninit_enclave+0x140>
        }

        tcs_node_t *tmp = tcs_node;
    2ac0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2ac4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        tcs_node = tcs_node->next;
    2ac8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2acc:	48 8b 40 08          	mov    0x8(%rax),%rax
    2ad0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        free(tmp);
    2ad4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2ad8:	48 89 c7             	mov    %rax,%rdi
    2adb:	e8 3c 91 00 00       	callq  bc1c <dlfree>
    while (tcs_node != NULL)
    2ae0:	e9 4f ff ff ff       	jmpq   2a34 <do_uninit_enclave+0x55>
    }

    sgx_spin_lock(&g_ife_lock);
    2ae5:	48 8d 3d 64 2e 23 00 	lea    0x232e64(%rip),%rdi        # 235950 <_ZL10g_ife_lock>
    2aec:	e8 c9 c3 00 00       	callq  eeba <sgx_spin_lock>
    if (!g_is_first_ecall)
    2af1:	0f b6 05 08 25 23 00 	movzbl 0x232508(%rip),%eax        # 235000 <_ZL16g_is_first_ecall>
    2af8:	83 f0 01             	xor    $0x1,%eax
    2afb:	84 c0                	test   %al,%al
    2afd:	74 05                	je     2b04 <do_uninit_enclave+0x125>
    {
        uninit_global_object();
    2aff:	e8 59 24 00 00       	callq  4f5d <uninit_global_object>
    }
    sgx_spin_unlock(&g_ife_lock);
    2b04:	48 8d 3d 45 2e 23 00 	lea    0x232e45(%rip),%rdi        # 235950 <_ZL10g_ife_lock>
    2b0b:	e8 11 c4 00 00       	callq  ef21 <sgx_spin_unlock>

    set_enclave_state(ENCLAVE_CRASHED);
    2b10:	bf 03 00 00 00       	mov    $0x3,%edi
    2b15:	e8 52 d1 02 00       	callq  2fc6c <set_enclave_state>

    return SGX_SUCCESS;
    2b1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    2b1f:	c9                   	leaveq 
    2b20:	c3                   	retq   

0000000000002b21 <trts_mprotect>:

extern sdk_version_t g_sdk_version;

extern "C" sgx_status_t trts_mprotect(size_t start, size_t size, uint64_t perms)
{
    2b21:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    2b26:	48 83 e4 c0          	and    $0xffffffffffffffc0,%rsp
    2b2a:	41 ff 72 f8          	pushq  -0x8(%r10)
    2b2e:	55                   	push   %rbp
    2b2f:	48 89 e5             	mov    %rsp,%rbp
    2b32:	41 52                	push   %r10
    2b34:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    2b3b:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    2b42:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    2b49:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    2b50:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2b57:	00 00 
    2b59:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    2b5d:	31 c0                	xor    %eax,%eax
    int rc = -1;
    2b5f:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%rbp)
    2b66:	ff ff ff 
    size_t page;
    sgx_status_t ret = SGX_SUCCESS;
    2b69:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    2b70:	00 00 00 
    SE_DECLSPEC_ALIGN(sizeof(sec_info_t)) sec_info_t si;

    //Error return if start or size is not page-aligned or size is zero.
    if (!IS_PAGE_ALIGNED(start) || (size == 0) || !IS_PAGE_ALIGNED(size))
    2b73:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2b7a:	25 ff 0f 00 00       	and    $0xfff,%eax
    2b7f:	48 85 c0             	test   %rax,%rax
    2b82:	75 1b                	jne    2b9f <trts_mprotect+0x7e>
    2b84:	48 83 bd 30 ff ff ff 	cmpq   $0x0,-0xd0(%rbp)
    2b8b:	00 
    2b8c:	74 11                	je     2b9f <trts_mprotect+0x7e>
    2b8e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2b95:	25 ff 0f 00 00       	and    $0xfff,%eax
    2b9a:	48 85 c0             	test   %rax,%rax
    2b9d:	74 0a                	je     2ba9 <trts_mprotect+0x88>
        return SGX_ERROR_INVALID_PARAMETER;
    2b9f:	b8 02 00 00 00       	mov    $0x2,%eax
    2ba4:	e9 0c 01 00 00       	jmpq   2cb5 <trts_mprotect+0x194>
    if (g_sdk_version == SDK_VERSION_2_0)
    2ba9:	48 8d 05 f4 21 23 00 	lea    0x2321f4(%rip),%rax        # 234da4 <g_sdk_version>
    2bb0:	8b 00                	mov    (%rax),%eax
    2bb2:	83 f8 01             	cmp    $0x1,%eax
    2bb5:	75 3a                	jne    2bf1 <trts_mprotect+0xd0>
    {
        ret = change_permissions_ocall(start, size, perms);
    2bb7:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    2bbe:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
    2bc5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2bcc:	48 89 ce             	mov    %rcx,%rsi
    2bcf:	48 89 c7             	mov    %rax,%rdi
    2bd2:	e8 58 02 00 00       	callq  2e2f <change_permissions_ocall>
    2bd7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
        if (ret != SGX_SUCCESS)
    2bdd:	83 bd 44 ff ff ff 00 	cmpl   $0x0,-0xbc(%rbp)
    2be4:	74 0b                	je     2bf1 <trts_mprotect+0xd0>
            return ret;
    2be6:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    2bec:	e9 c4 00 00 00       	jmpq   2cb5 <trts_mprotect+0x194>
    }

    si.flags = perms|SI_FLAG_REG|SI_FLAG_PR;
    2bf1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    2bf8:	48 0d 20 02 00 00    	or     $0x220,%rax
    2bfe:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    memset(&si.reserved, 0, sizeof(si.reserved));
    2c05:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2c0c:	48 83 c0 08          	add    $0x8,%rax
    2c10:	ba 38 00 00 00       	mov    $0x38,%edx
    2c15:	be 00 00 00 00       	mov    $0x0,%esi
    2c1a:	48 89 c7             	mov    %rax,%rdi
    2c1d:	e8 36 bc 00 00       	callq  e858 <memset>

    for(page = start; page < start + size; page += SE_PAGE_SIZE)
    2c22:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    2c29:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    2c30:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    2c37:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2c3e:	48 01 d0             	add    %rdx,%rax
    2c41:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
    2c48:	73 66                	jae    2cb0 <trts_mprotect+0x18f>
    {
        do_emodpe(&si, page);
    2c4a:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    2c51:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2c58:	48 89 d6             	mov    %rdx,%rsi
    2c5b:	48 89 c7             	mov    %rax,%rdi
    2c5e:	e8 f7 d2 02 00       	callq  2ff5a <do_emodpe>
        // If the target permission to set is RWX, no EMODPR, hence no EACCEPT.
        if ((perms & (SI_FLAG_W|SI_FLAG_X)) != (SI_FLAG_W|SI_FLAG_X))
    2c63:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    2c6a:	83 e0 06             	and    $0x6,%eax
    2c6d:	48 83 f8 06          	cmp    $0x6,%rax
    2c71:	74 30                	je     2ca3 <trts_mprotect+0x182>
        {
            rc = do_eaccept(&si, page);
    2c73:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    2c7a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2c81:	48 89 d6             	mov    %rdx,%rsi
    2c84:	48 89 c7             	mov    %rax,%rdi
    2c87:	e8 b4 d2 02 00       	callq  2ff40 <do_eaccept>
    2c8c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
            if(rc != 0)
    2c92:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)
    2c99:	74 08                	je     2ca3 <trts_mprotect+0x182>
                return (sgx_status_t)rc;
    2c9b:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    2ca1:	eb 12                	jmp    2cb5 <trts_mprotect+0x194>
    for(page = start; page < start + size; page += SE_PAGE_SIZE)
    2ca3:	48 81 85 48 ff ff ff 	addq   $0x1000,-0xb8(%rbp)
    2caa:	00 10 00 00 
    2cae:	eb 80                	jmp    2c30 <trts_mprotect+0x10f>
        }
    }

    return SGX_SUCCESS;
    2cb0:	b8 00 00 00 00       	mov    $0x0,%eax
}
    2cb5:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    2cb9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2cc0:	00 00 
    2cc2:	74 05                	je     2cc9 <trts_mprotect+0x1a8>
    2cc4:	e8 cf 22 00 00       	callq  4f98 <__stack_chk_fail>
    2cc9:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    2cd0:	41 5a                	pop    %r10
    2cd2:	5d                   	pop    %rbp
    2cd3:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    2cd7:	c3                   	retq   

0000000000002cd8 <_Z20random_stack_advanceILj2048E9_status_tJjPvEJRiRS1_EET0_PFS4_DpT1_EDpOT2_>:
__attribute__((noinline)) static R _random_stack_noinline_wrapper(R(*f)(Ps...), Qs&&... args)
{
    return f(std::forward<Qs>(args)...);
}
template <unsigned M = 0x1000, class R, class... Ps, class... Qs>
R random_stack_advance(R(*f)(Ps...), Qs&&... args)
    2cd8:	55                   	push   %rbp
    2cd9:	48 89 e5             	mov    %rsp,%rbp
    2cdc:	41 57                	push   %r15
    2cde:	41 56                	push   %r14
    2ce0:	41 55                	push   %r13
    2ce2:	41 54                	push   %r12
    2ce4:	53                   	push   %rbx
    2ce5:	48 83 ec 58          	sub    $0x58,%rsp
    2ce9:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    2ced:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
    2cf1:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
    2cf5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2cfc:	00 00 
    2cfe:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    2d02:	31 c0                	xor    %eax,%eax
    // measure the peak stack usage and is not affected by random stack, hence
    // no need to send notification.
    if (!EDMM_supported)
        random_stack_notify_gdb((void *)dummy_vla, (size_t)size);

    return _random_stack_noinline_wrapper(f, std::forward<Qs>(args)...);
    2d04:	48 89 e0             	mov    %rsp,%rax
    2d07:	48 89 c3             	mov    %rax,%rbx
    unsigned size = rdrand() % M + 1;
    2d0a:	e8 d1 00 00 00       	callq  2de0 <_Z6rdrandIjET_v>
    2d0f:	25 ff 07 00 00       	and    $0x7ff,%eax
    2d14:	83 c0 01             	add    $0x1,%eax
    2d17:	89 45 a4             	mov    %eax,-0x5c(%rbp)
    volatile char dummy_vla[size];
    2d1a:	8b 45 a4             	mov    -0x5c(%rbp),%eax
    2d1d:	48 83 e8 01          	sub    $0x1,%rax
    2d21:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    2d25:	48 89 c2             	mov    %rax,%rdx
    2d28:	48 83 c2 01          	add    $0x1,%rdx
    2d2c:	49 89 d6             	mov    %rdx,%r14
    2d2f:	41 bf 00 00 00 00    	mov    $0x0,%r15d
    2d35:	48 89 c2             	mov    %rax,%rdx
    2d38:	48 83 c2 01          	add    $0x1,%rdx
    2d3c:	49 89 d4             	mov    %rdx,%r12
    2d3f:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    2d45:	48 8d 50 01          	lea    0x1(%rax),%rdx
    2d49:	b8 10 00 00 00       	mov    $0x10,%eax
    2d4e:	48 83 e8 01          	sub    $0x1,%rax
    2d52:	48 01 d0             	add    %rdx,%rax
    2d55:	b9 10 00 00 00       	mov    $0x10,%ecx
    2d5a:	ba 00 00 00 00       	mov    $0x0,%edx
    2d5f:	48 f7 f1             	div    %rcx
    2d62:	48 6b c0 10          	imul   $0x10,%rax,%rax
    2d66:	48 29 c4             	sub    %rax,%rsp
    2d69:	48 89 e0             	mov    %rsp,%rax
    2d6c:	48 83 c0 00          	add    $0x0,%rax
    2d70:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    if (!EDMM_supported)
    2d74:	48 8d 05 25 20 23 00 	lea    0x232025(%rip),%rax        # 234da0 <EDMM_supported>
    2d7b:	8b 00                	mov    (%rax),%eax
    2d7d:	85 c0                	test   %eax,%eax
    2d7f:	75 12                	jne    2d93 <_Z20random_stack_advanceILj2048E9_status_tJjPvEJRiRS1_EET0_PFS4_DpT1_EDpOT2_+0xbb>
        random_stack_notify_gdb((void *)dummy_vla, (size_t)size);
    2d81:	8b 55 a4             	mov    -0x5c(%rbp),%edx
    2d84:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    2d88:	48 89 d6             	mov    %rdx,%rsi
    2d8b:	48 89 c7             	mov    %rax,%rdi
    2d8e:	e8 96 e3 ff ff       	callq  1129 <random_stack_notify_gdb>
    2d93:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2d97:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
template <class _Tp>
inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
_Tp&&
forward(typename remove_reference<_Tp>::type& __t) _NOEXCEPT
{
    return static_cast<_Tp&&>(__t);
    2d9b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    2d9f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    2da3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    2da7:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    return _random_stack_noinline_wrapper(f, std::forward<Qs>(args)...);
    2dab:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    2daf:	48 89 ce             	mov    %rcx,%rsi
    2db2:	48 89 c7             	mov    %rax,%rdi
    2db5:	e8 35 00 00 00       	callq  2def <_Z30_random_stack_noinline_wrapperI9_status_tJjPvEJRiRS1_EET_PFS4_DpT0_EDpOT1_>
    2dba:	48 89 dc             	mov    %rbx,%rsp
}
    2dbd:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    2dc1:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2dc8:	00 00 
    2dca:	74 05                	je     2dd1 <_Z20random_stack_advanceILj2048E9_status_tJjPvEJRiRS1_EET0_PFS4_DpT1_EDpOT2_+0xf9>
    2dcc:	e8 c7 21 00 00       	callq  4f98 <__stack_chk_fail>
    2dd1:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    2dd5:	5b                   	pop    %rbx
    2dd6:	41 5c                	pop    %r12
    2dd8:	41 5d                	pop    %r13
    2dda:	41 5e                	pop    %r14
    2ddc:	41 5f                	pop    %r15
    2dde:	5d                   	pop    %rbp
    2ddf:	c3                   	retq   

0000000000002de0 <_Z6rdrandIjET_v>:
inline R rdrand(void)
    2de0:	55                   	push   %rbp
    2de1:	48 89 e5             	mov    %rsp,%rbp
    __asm__ volatile ("rdrand %0" : "=r"(r));
    2de4:	0f c7 f0             	rdrand %eax
    2de7:	89 45 fc             	mov    %eax,-0x4(%rbp)
    return r;
    2dea:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    2ded:	5d                   	pop    %rbp
    2dee:	c3                   	retq   

0000000000002def <_Z30_random_stack_noinline_wrapperI9_status_tJjPvEJRiRS1_EET_PFS4_DpT0_EDpOT1_>:
__attribute__((noinline)) static R _random_stack_noinline_wrapper(R(*f)(Ps...), Qs&&... args)
    2def:	55                   	push   %rbp
    2df0:	48 89 e5             	mov    %rsp,%rbp
    2df3:	48 83 ec 30          	sub    $0x30,%rsp
    2df7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2dfb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2dff:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2e03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2e07:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2e0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    return f(std::forward<Qs>(args)...);
    2e0f:	48 8b 10             	mov    (%rax),%rdx
    2e12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2e16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    2e1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2e1e:	8b 00                	mov    (%rax),%eax
    2e20:	89 c1                	mov    %eax,%ecx
    2e22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2e26:	48 89 d6             	mov    %rdx,%rsi
    2e29:	89 cf                	mov    %ecx,%edi
    2e2b:	ff d0                	callq  *%rax
}
    2e2d:	c9                   	leaveq 
    2e2e:	c3                   	retq   

0000000000002e2f <change_permissions_ocall>:
    size_t ms_size;
    uint64_t ms_epcm_perms;
} ms_change_permissions_ocall_t;

sgx_status_t SGXAPI change_permissions_ocall(size_t addr, size_t size, uint64_t epcm_perms)
{
    2e2f:	55                   	push   %rbp
    2e30:	48 89 e5             	mov    %rsp,%rbp
    2e33:	48 83 ec 40          	sub    $0x40,%rsp
    2e37:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    2e3b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    2e3f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    (void)addr;
    (void)size;
    (void)epcm_perms;
    return SGX_SUCCESS;
#else
    sgx_status_t status = SGX_SUCCESS;
    2e43:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

    ms_change_permissions_ocall_t* ms;
    OCALLOC(ms, ms_change_permissions_ocall_t*, sizeof(*ms));
    2e4a:	bf 18 00 00 00       	mov    $0x18,%edi
    2e4f:	e8 dc df ff ff       	callq  e30 <sgx_ocalloc>
    2e54:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    2e58:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    2e5d:	75 0c                	jne    2e6b <change_permissions_ocall+0x3c>
    2e5f:	e8 dd e0 ff ff       	callq  f41 <sgx_ocfree>
    2e64:	b8 01 00 00 00       	mov    $0x1,%eax
    2e69:	eb 47                	jmp    2eb2 <change_permissions_ocall+0x83>
    2e6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2e6f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ms->ms_addr = addr;
    2e73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2e77:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    2e7b:	48 89 10             	mov    %rdx,(%rax)
    ms->ms_size = size;
    2e7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2e82:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    2e86:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ms->ms_epcm_perms = epcm_perms;
    2e8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2e8e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    2e92:	48 89 50 10          	mov    %rdx,0x10(%rax)
    status = sgx_ocall(EDMM_MODPR, ms);
    2e96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2e9a:	48 89 c6             	mov    %rax,%rsi
    2e9d:	bf fc ff ff ff       	mov    $0xfffffffc,%edi
    2ea2:	e8 d2 00 00 00       	callq  2f79 <sgx_ocall>
    2ea7:	89 45 ec             	mov    %eax,-0x14(%rbp)


    sgx_ocfree();
    2eaa:	e8 92 e0 ff ff       	callq  f41 <sgx_ocfree>
    return status;
    2eaf:	8b 45 ec             	mov    -0x14(%rbp),%eax
#endif
}
    2eb2:	c9                   	leaveq 
    2eb3:	c3                   	retq   

0000000000002eb4 <_ZL16init_stack_guardPv>:
#include "global_data.h"
#include "trts_internal.h"
#include "internal/rts.h"

static void init_stack_guard(void *tcs)
{
    2eb4:	55                   	push   %rbp
    2eb5:	48 89 e5             	mov    %rsp,%rbp
    2eb8:	48 83 ec 20          	sub    $0x20,%rsp
    2ebc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    thread_data_t *thread_data = get_thread_data();
    2ec0:	e8 cd cd 02 00       	callq  2fc92 <get_thread_data>
    2ec5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if( (NULL == thread_data) || ((thread_data->stack_base_addr == thread_data->last_sp) && (0 != g_global_data.thread_policy)))
    2ec9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2ece:	74 25                	je     2ef5 <_ZL16init_stack_guardPv+0x41>
    2ed0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2ed4:	48 8b 50 10          	mov    0x10(%rax),%rdx
    2ed8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2edc:	48 8b 40 08          	mov    0x8(%rax),%rax
    2ee0:	48 39 c2             	cmp    %rax,%rdx
    2ee3:	75 17                	jne    2efc <_ZL16init_stack_guardPv+0x48>
    2ee5:	48 8d 05 54 e1 02 00 	lea    0x2e154(%rip),%rax        # 31040 <g_global_data>
    2eec:	48 8b 40 28          	mov    0x28(%rax),%rax
    2ef0:	48 85 c0             	test   %rax,%rax
    2ef3:	74 07                	je     2efc <_ZL16init_stack_guardPv+0x48>
    2ef5:	b8 01 00 00 00       	mov    $0x1,%eax
    2efa:	eb 05                	jmp    2f01 <_ZL16init_stack_guardPv+0x4d>
    2efc:	b8 00 00 00 00       	mov    $0x0,%eax
    2f01:	84 c0                	test   %al,%al
    2f03:	74 71                	je     2f76 <_ZL16init_stack_guardPv+0xc2>
    {
         thread_data = GET_PTR(thread_data_t, tcs, g_global_data.td_template.self_addr);
    2f05:	48 8d 05 34 e1 02 00 	lea    0x2e134(%rip),%rax        # 31040 <g_global_data>
    2f0c:	48 8b 50 30          	mov    0x30(%rax),%rdx
    2f10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2f14:	48 01 d0             	add    %rdx,%rax
    2f17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    else
    {
        return;
    }

    assert(thread_data != NULL);
    2f1b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2f20:	75 1f                	jne    2f41 <_ZL16init_stack_guardPv+0x8d>
    2f22:	48 8d 0d bf d1 02 00 	lea    0x2d1bf(%rip),%rcx        # 300e8 <_ZNSt3__1L19piecewise_constructE+0x1>
    2f29:	48 8d 15 e0 d1 02 00 	lea    0x2d1e0(%rip),%rdx        # 30110 <_ZZL16init_stack_guardPvE8__func__>
    2f30:	be 3f 00 00 00       	mov    $0x3f,%esi
    2f35:	48 8d 3d c0 d1 02 00 	lea    0x2d1c0(%rip),%rdi        # 300fc <_ZNSt3__1L19piecewise_constructE+0x15>
    2f3c:	e8 8a 20 00 00       	callq  4fcb <__assert>

    size_t tmp_stack_guard = 0;
    2f41:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    2f48:	00 
    if (SGX_SUCCESS != sgx_read_rand(
    2f49:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    2f4d:	be 08 00 00 00       	mov    $0x8,%esi
    2f52:	48 89 c7             	mov    %rax,%rdi
    2f55:	e8 7c e0 ff ff       	callq  fd6 <sgx_read_rand>
    2f5a:	85 c0                	test   %eax,%eax
    2f5c:	0f 95 c0             	setne  %al
    2f5f:	84 c0                	test   %al,%al
    2f61:	74 05                	je     2f68 <_ZL16init_stack_guardPv+0xb4>
                (unsigned char*)&tmp_stack_guard,
                sizeof(tmp_stack_guard)))
        abort();
    2f63:	e8 26 d0 02 00       	callq  2ff8e <abort>

    thread_data->stack_guard = tmp_stack_guard;
    2f68:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    2f6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2f70:	48 89 50 28          	mov    %rdx,0x28(%rax)
    2f74:	eb 01                	jmp    2f77 <_ZL16init_stack_guardPv+0xc3>
        return;
    2f76:	90                   	nop
}
    2f77:	c9                   	leaveq 
    2f78:	c3                   	retq   

0000000000002f79 <sgx_ocall>:
//      ms - the mashalling structure
// Return Value:
//      OCALL status
//
sgx_status_t sgx_ocall(const unsigned int index, void *ms)
{
    2f79:	55                   	push   %rbp
    2f7a:	48 89 e5             	mov    %rsp,%rbp
    2f7d:	48 83 ec 20          	sub    $0x20,%rsp
    2f81:	89 7d ec             	mov    %edi,-0x14(%rbp)
    2f84:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    // the OCALL index should be within the ocall table range
    // -2, -3 and -4 -5 should be allowed to test SDK 2.0 features
    if((index != 0) && !is_builtin_ocall((int)index) &&
    2f88:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
    2f8c:	74 29                	je     2fb7 <sgx_ocall+0x3e>
    2f8e:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2f91:	83 f8 fb             	cmp    $0xfffffffb,%eax
    2f94:	7c 08                	jl     2f9e <sgx_ocall+0x25>
    2f96:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2f99:	83 f8 ff             	cmp    $0xffffffff,%eax
    2f9c:	7c 19                	jl     2fb7 <sgx_ocall+0x3e>
            static_cast<size_t>(index) >= g_dyn_entry_table.nr_ocall)
    2f9e:	8b 55 ec             	mov    -0x14(%rbp),%edx
    2fa1:	48 8d 05 58 d0 02 00 	lea    0x2d058(%rip),%rax        # 30000 <g_dyn_entry_table>
    2fa8:	48 8b 00             	mov    (%rax),%rax
    if((index != 0) && !is_builtin_ocall((int)index) &&
    2fab:	48 39 c2             	cmp    %rax,%rdx
    2fae:	72 07                	jb     2fb7 <sgx_ocall+0x3e>
    {
        return SGX_ERROR_INVALID_FUNCTION;
    2fb0:	b8 01 10 00 00       	mov    $0x1001,%eax
    2fb5:	eb 17                	jmp    2fce <sgx_ocall+0x55>
    }

    // do sgx_ocall
    sgx_status_t status = do_ocall(index, ms);
    2fb7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    2fbb:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2fbe:	48 89 d6             	mov    %rdx,%rsi
    2fc1:	89 c7                	mov    %eax,%edi
    2fc3:	e8 cb ce 02 00       	callq  2fe93 <__morestack>
    2fc8:	89 45 fc             	mov    %eax,-0x4(%rbp)

    return status;
    2fcb:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    2fce:	c9                   	leaveq 
    2fcf:	c3                   	retq   

0000000000002fd0 <update_ocall_lastsp>:
weak_alias(sgx_ocall, sgx_ocall_switchless);

extern "C"
uintptr_t update_ocall_lastsp(ocall_context_t* context)
{
    2fd0:	55                   	push   %rbp
    2fd1:	48 89 e5             	mov    %rsp,%rbp
    2fd4:	48 83 ec 30          	sub    $0x30,%rsp
    2fd8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    thread_data_t* thread_data = get_thread_data();
    2fdc:	e8 b1 cc 02 00       	callq  2fc92 <get_thread_data>
    2fe1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    uintptr_t last_sp = 0;
    2fe5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    2fec:	00 

    last_sp = thread_data->last_sp;
    2fed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2ff1:	48 8b 40 08          	mov    0x8(%rax),%rax
    2ff5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    context->pre_last_sp = last_sp;
    2ff9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2ffd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    3001:	48 89 50 30          	mov    %rdx,0x30(%rax)

    if (context->pre_last_sp == thread_data->stack_base_addr)
    3005:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3009:	48 8b 50 30          	mov    0x30(%rax),%rdx
    300d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3011:	48 8b 40 10          	mov    0x10(%rax),%rax
    3015:	48 39 c2             	cmp    %rax,%rdx
    3018:	75 11                	jne    302b <update_ocall_lastsp+0x5b>
    {
        context->ocall_depth = 1;
    301a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    301e:	48 c7 80 90 00 00 00 	movq   $0x1,0x90(%rax)
    3025:	01 00 00 00 
    3029:	eb 26                	jmp    3051 <update_ocall_lastsp+0x81>
    } else {
        // thread_data->last_sp is only set when ocall or exception handling occurs
        // ocall is block during exception handling, so last_sp is always ocall frame here
        ocall_context_t* context_pre = reinterpret_cast<ocall_context_t*>(context->pre_last_sp);
    302b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    302f:	48 8b 40 30          	mov    0x30(%rax),%rax
    3033:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        context->ocall_depth = context_pre->ocall_depth + 1;
    3037:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    303b:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
    3042:	48 8d 50 01          	lea    0x1(%rax),%rdx
    3046:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    304a:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    }

    thread_data->last_sp = reinterpret_cast<uintptr_t>(context);
    3051:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    3055:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3059:	48 89 50 08          	mov    %rdx,0x8(%rax)

    return last_sp;
    305d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
    3061:	c9                   	leaveq 
    3062:	c3                   	retq   

0000000000003063 <do_oret>:

sgx_status_t do_oret(void *ms)
{
    3063:	55                   	push   %rbp
    3064:	48 89 e5             	mov    %rsp,%rbp
    3067:	48 83 ec 30          	sub    $0x30,%rsp
    306b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    306f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3076:	00 00 
    3078:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    307c:	31 c0                	xor    %eax,%eax
    thread_data_t *thread_data = get_thread_data();
    307e:	e8 0f cc 02 00       	callq  2fc92 <get_thread_data>
    3083:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    uintptr_t last_sp = thread_data->last_sp;
    3087:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    308b:	48 8b 40 08          	mov    0x8(%rax),%rax
    308f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ocall_context_t *context = reinterpret_cast<ocall_context_t*>(thread_data->last_sp);
    3093:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3097:	48 8b 40 08          	mov    0x8(%rax),%rax
    309b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(0 == last_sp || last_sp <= (uintptr_t)&context)
    309f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    30a4:	74 0a                	je     30b0 <do_oret+0x4d>
    30a6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    30aa:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    30ae:	77 0a                	ja     30ba <do_oret+0x57>
    {
        return SGX_ERROR_UNEXPECTED;
    30b0:	b8 01 00 00 00       	mov    $0x1,%eax
    30b5:	e9 87 00 00 00       	jmpq   3141 <do_oret+0xde>
    }
    // At least 1 ecall frame and 1 ocall frame are expected on stack. 
    // 30 is an estimated value: 8 for enclave_entry and 22 for do_ocall.
    if(last_sp > thread_data->stack_base_addr - 30 * sizeof(size_t))
    30ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    30be:	48 8b 40 10          	mov    0x10(%rax),%rax
    30c2:	48 2d f0 00 00 00    	sub    $0xf0,%rax
    30c8:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    30cc:	76 07                	jbe    30d5 <do_oret+0x72>
    {
        return SGX_ERROR_UNEXPECTED;
    30ce:	b8 01 00 00 00       	mov    $0x1,%eax
    30d3:	eb 6c                	jmp    3141 <do_oret+0xde>
    }
    if(context->ocall_flag != OCALL_FLAG)
    30d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    30d9:	48 8b 40 20          	mov    0x20(%rax),%rax
    30dd:	48 3d 44 49 43 4f    	cmp    $0x4f434944,%rax
    30e3:	74 07                	je     30ec <do_oret+0x89>
    {
        return SGX_ERROR_UNEXPECTED;
    30e5:	b8 01 00 00 00       	mov    $0x1,%eax
    30ea:	eb 55                	jmp    3141 <do_oret+0xde>
    }
    if(context->pre_last_sp > thread_data->stack_base_addr
    30ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    30f0:	48 8b 50 30          	mov    0x30(%rax),%rdx
    30f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    30f8:	48 8b 40 10          	mov    0x10(%rax),%rax
    30fc:	48 39 c2             	cmp    %rax,%rdx
    30ff:	77 11                	ja     3112 <do_oret+0xaf>
       || context->pre_last_sp <= (uintptr_t)context)
    3101:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3105:	48 8b 40 30          	mov    0x30(%rax),%rax
    3109:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    310d:	48 39 d0             	cmp    %rdx,%rax
    3110:	77 07                	ja     3119 <do_oret+0xb6>
    {
        return SGX_ERROR_UNEXPECTED;
    3112:	b8 01 00 00 00       	mov    $0x1,%eax
    3117:	eb 28                	jmp    3141 <do_oret+0xde>
    }

    thread_data->last_sp = context->pre_last_sp;
    3119:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    311d:	48 8b 50 30          	mov    0x30(%rax),%rdx
    3121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3125:	48 89 50 08          	mov    %rdx,0x8(%rax)
    asm_oret(last_sp, ms);
    3129:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    312d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3131:	48 89 d6             	mov    %rdx,%rsi
    3134:	48 89 c7             	mov    %rax,%rdi
    3137:	e8 66 cd 02 00       	callq  2fea2 <asm_oret>
    
    // Should not come here
    return SGX_ERROR_UNEXPECTED;
    313c:	b8 01 00 00 00       	mov    $0x1,%eax
}
    3141:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    3145:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    314c:	00 00 
    314e:	74 05                	je     3155 <do_oret+0xf2>
    3150:	e8 43 1e 00 00       	callq  4f98 <__stack_chk_fail>
    3155:	c9                   	leaveq 
    3156:	c3                   	retq   

0000000000003157 <do_init_switchless>:
#include "sgx_error.h"
#include "trts_internal.h"
#include "global_data.h"
#include "util.h"

extern "C" sgx_status_t dummy_init_switchless(void* ms) {
    3157:	55                   	push   %rbp
    3158:	48 89 e5             	mov    %rsp,%rbp
    315b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    UNUSED(ms);
    return SGX_ERROR_UNEXPECTED;
    315f:	b8 01 00 00 00       	mov    $0x1,%eax
}
    3164:	5d                   	pop    %rbp
    3165:	c3                   	retq   

0000000000003166 <do_run_switchless_tworker>:
/* Switchless SGX provides the real implementation for sl_init_uswitchless */
weak_alias(dummy_init_switchless, do_init_switchless);


extern "C" sgx_status_t dummy_run_switchless_tworker(void* ms) {
    3166:	55                   	push   %rbp
    3167:	48 89 e5             	mov    %rsp,%rbp
    316a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    UNUSED(ms);
    return SGX_ERROR_UNEXPECTED;
    316e:	b8 01 00 00 00       	mov    $0x1,%eax
}
    3173:	5d                   	pop    %rbp
    3174:	c3                   	retq   

0000000000003175 <trim_range_ocall>:
typedef struct ms_trim_range_commit_ocall_t {
    size_t ms_addr;
} ms_trim_range_commit_ocall_t;

sgx_status_t SGXAPI trim_range_ocall(size_t fromaddr, size_t toaddr)
{
    3175:	55                   	push   %rbp
    3176:	48 89 e5             	mov    %rsp,%rbp
    3179:	48 83 ec 30          	sub    $0x30,%rsp
    317d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3181:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    sgx_status_t status = SGX_SUCCESS;
    3185:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

    ms_trim_range_ocall_t* ms;
    OCALLOC(ms, ms_trim_range_ocall_t*, sizeof(*ms));
    318c:	bf 10 00 00 00       	mov    $0x10,%edi
    3191:	e8 9a dc ff ff       	callq  e30 <sgx_ocalloc>
    3196:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    319a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    319f:	75 0c                	jne    31ad <trim_range_ocall+0x38>
    31a1:	e8 9b dd ff ff       	callq  f41 <sgx_ocfree>
    31a6:	b8 01 00 00 00       	mov    $0x1,%eax
    31ab:	eb 3b                	jmp    31e8 <trim_range_ocall+0x73>
    31ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    31b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ms->ms_fromaddr = fromaddr;
    31b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    31b9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    31bd:	48 89 10             	mov    %rdx,(%rax)
    ms->ms_toaddr = toaddr;
    31c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    31c4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    31c8:	48 89 50 08          	mov    %rdx,0x8(%rax)
    status = sgx_ocall(EDMM_TRIM, ms);
    31cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    31d0:	48 89 c6             	mov    %rax,%rsi
    31d3:	bf fe ff ff ff       	mov    $0xfffffffe,%edi
    31d8:	e8 9c fd ff ff       	callq  2f79 <sgx_ocall>
    31dd:	89 45 ec             	mov    %eax,-0x14(%rbp)


    sgx_ocfree();
    31e0:	e8 5c dd ff ff       	callq  f41 <sgx_ocfree>
    return status;
    31e5:	8b 45 ec             	mov    -0x14(%rbp),%eax
}
    31e8:	c9                   	leaveq 
    31e9:	c3                   	retq   

00000000000031ea <trim_range_commit_ocall>:

sgx_status_t SGXAPI trim_range_commit_ocall(size_t addr)
{
    31ea:	55                   	push   %rbp
    31eb:	48 89 e5             	mov    %rsp,%rbp
    31ee:	48 83 ec 30          	sub    $0x30,%rsp
    31f2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    sgx_status_t status = SGX_SUCCESS;
    31f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

    ms_trim_range_commit_ocall_t* ms;
    OCALLOC(ms, ms_trim_range_commit_ocall_t*, sizeof(*ms));
    31fd:	bf 08 00 00 00       	mov    $0x8,%edi
    3202:	e8 29 dc ff ff       	callq  e30 <sgx_ocalloc>
    3207:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    320b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    3210:	75 0c                	jne    321e <trim_range_commit_ocall+0x34>
    3212:	e8 2a dd ff ff       	callq  f41 <sgx_ocfree>
    3217:	b8 01 00 00 00       	mov    $0x1,%eax
    321c:	eb 2f                	jmp    324d <trim_range_commit_ocall+0x63>
    321e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3222:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ms->ms_addr = addr;
    3226:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    322a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    322e:	48 89 10             	mov    %rdx,(%rax)
    status = sgx_ocall(EDMM_TRIM_COMMIT, ms);
    3231:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3235:	48 89 c6             	mov    %rax,%rsi
    3238:	bf fd ff ff ff       	mov    $0xfffffffd,%edi
    323d:	e8 37 fd ff ff       	callq  2f79 <sgx_ocall>
    3242:	89 45 ec             	mov    %eax,-0x14(%rbp)


    sgx_ocfree();
    3245:	e8 f7 dc ff ff       	callq  f41 <sgx_ocfree>
    return status;
    324a:	8b 45 ec             	mov    -0x14(%rbp),%eax
}
    324d:	c9                   	leaveq 
    324e:	c3                   	retq   

000000000000324f <get_enclave_size>:
#include "trts_internal.h"

// No need to check the state of enclave or thread.
// The functions should be called within an ECALL, so the enclave and thread must be initialized at that time.
size_t get_enclave_size(void)
{
    324f:	55                   	push   %rbp
    3250:	48 89 e5             	mov    %rsp,%rbp
    return (size_t) g_global_data.enclave_size;
    3253:	48 8d 05 e6 dd 02 00 	lea    0x2dde6(%rip),%rax        # 31040 <g_global_data>
    325a:	48 8b 00             	mov    (%rax),%rax
}
    325d:	5d                   	pop    %rbp
    325e:	c3                   	retq   

000000000000325f <get_enclave_end>:

size_t get_enclave_end(void)
{
    325f:	55                   	push   %rbp
    3260:	48 89 e5             	mov    %rsp,%rbp
    return (size_t)get_enclave_base() + (size_t)g_global_data.enclave_size - 1;
    3263:	e8 ef c9 02 00       	callq  2fc57 <get_enclave_base>
    3268:	48 89 c2             	mov    %rax,%rdx
    326b:	48 8d 05 ce dd 02 00 	lea    0x2ddce(%rip),%rax        # 31040 <g_global_data>
    3272:	48 8b 00             	mov    (%rax),%rax
    3275:	48 01 d0             	add    %rdx,%rax
    3278:	48 83 e8 01          	sub    $0x1,%rax
}
    327c:	5d                   	pop    %rbp
    327d:	c3                   	retq   

000000000000327e <get_heap_base>:

void * get_heap_base(void)
{
    327e:	55                   	push   %rbp
    327f:	48 89 e5             	mov    %rsp,%rbp
    return GET_PTR(void, &__ImageBase, g_global_data.heap_offset);
    3282:	48 8d 05 b7 dd 02 00 	lea    0x2ddb7(%rip),%rax        # 31040 <g_global_data>
    3289:	48 8b 40 08          	mov    0x8(%rax),%rax
    328d:	48 8d 15 6c cd ff ff 	lea    -0x3294(%rip),%rdx        # 0 <enclave.so>
    3294:	48 01 d0             	add    %rdx,%rax
}
    3297:	5d                   	pop    %rbp
    3298:	c3                   	retq   

0000000000003299 <get_heap_size>:

size_t get_heap_size(void)
{
    3299:	55                   	push   %rbp
    329a:	48 89 e5             	mov    %rsp,%rbp
    size_t heap_size = g_global_data.heap_size;
    329d:	48 8d 05 9c dd 02 00 	lea    0x2dd9c(%rip),%rax        # 31040 <g_global_data>
    32a4:	48 8b 40 10          	mov    0x10(%rax),%rax
    32a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (EDMM_supported)
    32ac:	48 8d 05 ed 1a 23 00 	lea    0x231aed(%rip),%rax        # 234da0 <EDMM_supported>
    32b3:	8b 00                	mov    (%rax),%eax
    32b5:	85 c0                	test   %eax,%eax
    32b7:	74 6c                	je     3325 <get_heap_size+0x8c>
    {
        for(uint32_t i = 0; i < g_global_data.layout_entry_num; i++)
    32b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    32c0:	48 8d 05 79 dd 02 00 	lea    0x2dd79(%rip),%rax        # 31040 <g_global_data>
    32c7:	8b 80 18 01 00 00    	mov    0x118(%rax),%eax
    32cd:	39 45 f4             	cmp    %eax,-0xc(%rbp)
    32d0:	0f 92 c0             	setb   %al
    32d3:	84 c0                	test   %al,%al
    32d5:	74 4e                	je     3325 <get_heap_size+0x8c>
        {
            if(g_global_data.layout_table[i].entry.id == LAYOUT_ID_HEAP_MAX)
    32d7:	48 8d 05 62 dd 02 00 	lea    0x2dd62(%rip),%rax        # 31040 <g_global_data>
    32de:	8b 55 f4             	mov    -0xc(%rbp),%edx
    32e1:	48 83 c2 09          	add    $0x9,%rdx
    32e5:	48 c1 e2 05          	shl    $0x5,%rdx
    32e9:	48 01 d0             	add    %rdx,%rax
    32ec:	0f b7 00             	movzwl (%rax),%eax
    32ef:	66 83 f8 03          	cmp    $0x3,%ax
    32f3:	0f 94 c0             	sete   %al
    32f6:	84 c0                	test   %al,%al
    32f8:	74 25                	je     331f <get_heap_size+0x86>
            {
                heap_size += ((size_t)g_global_data.layout_table[i].entry.page_count << SE_PAGE_SHIFT);
    32fa:	48 8d 05 3f dd 02 00 	lea    0x2dd3f(%rip),%rax        # 31040 <g_global_data>
    3301:	8b 55 f4             	mov    -0xc(%rbp),%edx
    3304:	48 83 c2 09          	add    $0x9,%rdx
    3308:	48 c1 e2 05          	shl    $0x5,%rdx
    330c:	48 01 d0             	add    %rdx,%rax
    330f:	48 83 c0 04          	add    $0x4,%rax
    3313:	8b 00                	mov    (%rax),%eax
    3315:	89 c0                	mov    %eax,%eax
    3317:	48 c1 e0 0c          	shl    $0xc,%rax
    331b:	48 01 45 f8          	add    %rax,-0x8(%rbp)
        for(uint32_t i = 0; i < g_global_data.layout_entry_num; i++)
    331f:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    3323:	eb 9b                	jmp    32c0 <get_heap_size+0x27>
            }
        }
    }
    return heap_size;
    3325:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    3329:	5d                   	pop    %rbp
    332a:	c3                   	retq   

000000000000332b <get_heap_min_size>:

size_t get_heap_min_size(void)
{
    332b:	55                   	push   %rbp
    332c:	48 89 e5             	mov    %rsp,%rbp
    size_t heap_size = 0;
    332f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    3336:	00 
    for(uint32_t i = 0; i < g_global_data.layout_entry_num; i++)
    3337:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    333e:	48 8d 05 fb dc 02 00 	lea    0x2dcfb(%rip),%rax        # 31040 <g_global_data>
    3345:	8b 80 18 01 00 00    	mov    0x118(%rax),%eax
    334b:	39 45 f4             	cmp    %eax,-0xc(%rbp)
    334e:	0f 92 c0             	setb   %al
    3351:	84 c0                	test   %al,%al
    3353:	74 50                	je     33a5 <get_heap_min_size+0x7a>
    {
        if(g_global_data.layout_table[i].entry.id == LAYOUT_ID_HEAP_MIN)
    3355:	48 8d 05 e4 dc 02 00 	lea    0x2dce4(%rip),%rax        # 31040 <g_global_data>
    335c:	8b 55 f4             	mov    -0xc(%rbp),%edx
    335f:	48 83 c2 09          	add    $0x9,%rdx
    3363:	48 c1 e2 05          	shl    $0x5,%rdx
    3367:	48 01 d0             	add    %rdx,%rax
    336a:	0f b7 00             	movzwl (%rax),%eax
    336d:	66 83 f8 01          	cmp    $0x1,%ax
    3371:	0f 94 c0             	sete   %al
    3374:	84 c0                	test   %al,%al
    3376:	74 27                	je     339f <get_heap_min_size+0x74>
        {
            heap_size = ((size_t)g_global_data.layout_table[i].entry.page_count << SE_PAGE_SHIFT);
    3378:	48 8d 05 c1 dc 02 00 	lea    0x2dcc1(%rip),%rax        # 31040 <g_global_data>
    337f:	8b 55 f4             	mov    -0xc(%rbp),%edx
    3382:	48 83 c2 09          	add    $0x9,%rdx
    3386:	48 c1 e2 05          	shl    $0x5,%rdx
    338a:	48 01 d0             	add    %rdx,%rax
    338d:	48 83 c0 04          	add    $0x4,%rax
    3391:	8b 00                	mov    (%rax),%eax
    3393:	89 c0                	mov    %eax,%eax
    3395:	48 c1 e0 0c          	shl    $0xc,%rax
    3399:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
    339d:	eb 06                	jmp    33a5 <get_heap_min_size+0x7a>
    for(uint32_t i = 0; i < g_global_data.layout_entry_num; i++)
    339f:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    33a3:	eb 99                	jmp    333e <get_heap_min_size+0x13>
        }
    }
    return heap_size;
    33a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    33a9:	5d                   	pop    %rbp
    33aa:	c3                   	retq   

00000000000033ab <get_rsrv_base>:

void * get_rsrv_base(void)
{
    33ab:	55                   	push   %rbp
    33ac:	48 89 e5             	mov    %rsp,%rbp
    return GET_PTR(void, &__ImageBase, g_global_data.rsrv_offset);
    33af:	48 8d 05 8a dc 02 00 	lea    0x2dc8a(%rip),%rax        # 31040 <g_global_data>
    33b6:	48 8b 40 18          	mov    0x18(%rax),%rax
    33ba:	48 8d 15 3f cc ff ff 	lea    -0x33c1(%rip),%rdx        # 0 <enclave.so>
    33c1:	48 01 d0             	add    %rdx,%rax
}
    33c4:	5d                   	pop    %rbp
    33c5:	c3                   	retq   

00000000000033c6 <get_rsrv_end>:

size_t get_rsrv_end(void)
{
    33c6:	55                   	push   %rbp
    33c7:	48 89 e5             	mov    %rsp,%rbp
    33ca:	53                   	push   %rbx
    33cb:	48 83 ec 08          	sub    $0x8,%rsp
    return (size_t)get_rsrv_base() + (size_t)get_rsrv_size() - 1;
    33cf:	e8 d7 ff ff ff       	callq  33ab <get_rsrv_base>
    33d4:	48 89 c3             	mov    %rax,%rbx
    33d7:	e8 0e 00 00 00       	callq  33ea <get_rsrv_size>
    33dc:	48 01 d8             	add    %rbx,%rax
    33df:	48 83 e8 01          	sub    $0x1,%rax
}
    33e3:	48 83 c4 08          	add    $0x8,%rsp
    33e7:	5b                   	pop    %rbx
    33e8:	5d                   	pop    %rbp
    33e9:	c3                   	retq   

00000000000033ea <get_rsrv_size>:

size_t get_rsrv_size(void)
{
    33ea:	55                   	push   %rbp
    33eb:	48 89 e5             	mov    %rsp,%rbp
    size_t rsrv_size = g_global_data.rsrv_size;
    33ee:	48 8d 05 4b dc 02 00 	lea    0x2dc4b(%rip),%rax        # 31040 <g_global_data>
    33f5:	48 8b 40 20          	mov    0x20(%rax),%rax
    33f9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (EDMM_supported)
    33fd:	48 8d 05 9c 19 23 00 	lea    0x23199c(%rip),%rax        # 234da0 <EDMM_supported>
    3404:	8b 00                	mov    (%rax),%eax
    3406:	85 c0                	test   %eax,%eax
    3408:	74 6c                	je     3476 <get_rsrv_size+0x8c>
    {
        for (uint32_t i = 0; i < g_global_data.layout_entry_num; i++)
    340a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    3411:	48 8d 05 28 dc 02 00 	lea    0x2dc28(%rip),%rax        # 31040 <g_global_data>
    3418:	8b 80 18 01 00 00    	mov    0x118(%rax),%eax
    341e:	39 45 f4             	cmp    %eax,-0xc(%rbp)
    3421:	0f 92 c0             	setb   %al
    3424:	84 c0                	test   %al,%al
    3426:	74 4e                	je     3476 <get_rsrv_size+0x8c>
        {
            if (g_global_data.layout_table[i].entry.id == LAYOUT_ID_RSRV_MAX)
    3428:	48 8d 05 11 dc 02 00 	lea    0x2dc11(%rip),%rax        # 31040 <g_global_data>
    342f:	8b 55 f4             	mov    -0xc(%rbp),%edx
    3432:	48 83 c2 09          	add    $0x9,%rdx
    3436:	48 c1 e2 05          	shl    $0x5,%rdx
    343a:	48 01 d0             	add    %rdx,%rax
    343d:	0f b7 00             	movzwl (%rax),%eax
    3440:	66 83 f8 16          	cmp    $0x16,%ax
    3444:	0f 94 c0             	sete   %al
    3447:	84 c0                	test   %al,%al
    3449:	74 25                	je     3470 <get_rsrv_size+0x86>
            {
                rsrv_size += ((size_t)g_global_data.layout_table[i].entry.page_count << SE_PAGE_SHIFT);
    344b:	48 8d 05 ee db 02 00 	lea    0x2dbee(%rip),%rax        # 31040 <g_global_data>
    3452:	8b 55 f4             	mov    -0xc(%rbp),%edx
    3455:	48 83 c2 09          	add    $0x9,%rdx
    3459:	48 c1 e2 05          	shl    $0x5,%rdx
    345d:	48 01 d0             	add    %rdx,%rax
    3460:	48 83 c0 04          	add    $0x4,%rax
    3464:	8b 00                	mov    (%rax),%eax
    3466:	89 c0                	mov    %eax,%eax
    3468:	48 c1 e0 0c          	shl    $0xc,%rax
    346c:	48 01 45 f8          	add    %rax,-0x8(%rbp)
        for (uint32_t i = 0; i < g_global_data.layout_entry_num; i++)
    3470:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    3474:	eb 9b                	jmp    3411 <get_rsrv_size+0x27>
            }
        }
    }
    return rsrv_size;
    3476:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    347a:	5d                   	pop    %rbp
    347b:	c3                   	retq   

000000000000347c <get_rsrv_min_size>:

size_t get_rsrv_min_size(void)
{
    347c:	55                   	push   %rbp
    347d:	48 89 e5             	mov    %rsp,%rbp
    size_t rsrv_size = 0;
    3480:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    3487:	00 
    for (uint32_t i = 0; i < g_global_data.layout_entry_num; i++)
    3488:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    348f:	48 8d 05 aa db 02 00 	lea    0x2dbaa(%rip),%rax        # 31040 <g_global_data>
    3496:	8b 80 18 01 00 00    	mov    0x118(%rax),%eax
    349c:	39 45 f4             	cmp    %eax,-0xc(%rbp)
    349f:	0f 92 c0             	setb   %al
    34a2:	84 c0                	test   %al,%al
    34a4:	74 50                	je     34f6 <get_rsrv_min_size+0x7a>
    {
        if (g_global_data.layout_table[i].entry.id == LAYOUT_ID_RSRV_MIN)
    34a6:	48 8d 05 93 db 02 00 	lea    0x2db93(%rip),%rax        # 31040 <g_global_data>
    34ad:	8b 55 f4             	mov    -0xc(%rbp),%edx
    34b0:	48 83 c2 09          	add    $0x9,%rdx
    34b4:	48 c1 e2 05          	shl    $0x5,%rdx
    34b8:	48 01 d0             	add    %rdx,%rax
    34bb:	0f b7 00             	movzwl (%rax),%eax
    34be:	66 83 f8 14          	cmp    $0x14,%ax
    34c2:	0f 94 c0             	sete   %al
    34c5:	84 c0                	test   %al,%al
    34c7:	74 27                	je     34f0 <get_rsrv_min_size+0x74>
        {
            rsrv_size = ((size_t)g_global_data.layout_table[i].entry.page_count << SE_PAGE_SHIFT);
    34c9:	48 8d 05 70 db 02 00 	lea    0x2db70(%rip),%rax        # 31040 <g_global_data>
    34d0:	8b 55 f4             	mov    -0xc(%rbp),%edx
    34d3:	48 83 c2 09          	add    $0x9,%rdx
    34d7:	48 c1 e2 05          	shl    $0x5,%rdx
    34db:	48 01 d0             	add    %rdx,%rax
    34de:	48 83 c0 04          	add    $0x4,%rax
    34e2:	8b 00                	mov    (%rax),%eax
    34e4:	89 c0                	mov    %eax,%eax
    34e6:	48 c1 e0 0c          	shl    $0xc,%rax
    34ea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
    34ee:	eb 06                	jmp    34f6 <get_rsrv_min_size+0x7a>
    for (uint32_t i = 0; i < g_global_data.layout_entry_num; i++)
    34f0:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    34f4:	eb 99                	jmp    348f <get_rsrv_min_size+0x13>
        }
    }
    return rsrv_size;
    34f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    34fa:	5d                   	pop    %rbp
    34fb:	c3                   	retq   

00000000000034fc <get_errno_addr>:

int * get_errno_addr(void)
{
    34fc:	55                   	push   %rbp
    34fd:	48 89 e5             	mov    %rsp,%rbp
    3500:	48 83 ec 10          	sub    $0x10,%rsp
    thread_data_t *thread_data = get_thread_data();
    3504:	e8 89 c7 02 00       	callq  2fc92 <get_thread_data>
    3509:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return reinterpret_cast<int *>(&thread_data->last_error);
    350d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3511:	48 83 c0 40          	add    $0x40,%rax
}
    3515:	c9                   	leaveq 
    3516:	c3                   	retq   

0000000000003517 <feature_supported>:
//Features listed in array[0], counting from right-most bit  to left-most bit,
//have feature shift values 0 ~ 62, while features listed in array[1], have feature
//shift values 64 ~ 126.

int feature_supported(const uint64_t *feature_set, uint32_t feature_shift)
{
    3517:	55                   	push   %rbp
    3518:	48 89 e5             	mov    %rsp,%rbp
    351b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    351f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    const uint64_t *f_set = feature_set;
    3522:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3526:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    uint32_t bit_position = 0, i = 0;
    352a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    3531:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)

    if (!f_set)
    3538:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    353d:	75 07                	jne    3546 <feature_supported+0x2f>
        return 0;
    353f:	b8 00 00 00 00       	mov    $0x0,%eax
    3544:	eb 79                	jmp    35bf <feature_supported+0xa8>

    while (((i+1) << 6) <= feature_shift)
    3546:	8b 45 f0             	mov    -0x10(%rbp),%eax
    3549:	83 c0 01             	add    $0x1,%eax
    354c:	c1 e0 06             	shl    $0x6,%eax
    354f:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
    3552:	72 27                	jb     357b <feature_supported+0x64>
    {
        if (f_set[i] & (0x1ULL << 63))
    3554:	8b 45 f0             	mov    -0x10(%rbp),%eax
    3557:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    355e:	00 
    355f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3563:	48 01 d0             	add    %rdx,%rax
    3566:	48 8b 00             	mov    (%rax),%rax
    3569:	48 85 c0             	test   %rax,%rax
    356c:	79 07                	jns    3575 <feature_supported+0x5e>
            return 0;
    356e:	b8 00 00 00 00       	mov    $0x0,%eax
    3573:	eb 4a                	jmp    35bf <feature_supported+0xa8>
        i++;
    3575:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
    while (((i+1) << 6) <= feature_shift)
    3579:	eb cb                	jmp    3546 <feature_supported+0x2f>
    }
    bit_position = feature_shift - (i << 6);
    357b:	8b 45 f0             	mov    -0x10(%rbp),%eax
    357e:	c1 e0 06             	shl    $0x6,%eax
    3581:	89 c2                	mov    %eax,%edx
    3583:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    3586:	29 d0                	sub    %edx,%eax
    3588:	89 45 f4             	mov    %eax,-0xc(%rbp)
    if (f_set[i] & (0x1ULL << bit_position))
    358b:	8b 45 f0             	mov    -0x10(%rbp),%eax
    358e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    3595:	00 
    3596:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    359a:	48 01 d0             	add    %rdx,%rax
    359d:	48 8b 10             	mov    (%rax),%rdx
    35a0:	8b 45 f4             	mov    -0xc(%rbp),%eax
    35a3:	89 c1                	mov    %eax,%ecx
    35a5:	48 d3 ea             	shr    %cl,%rdx
    35a8:	48 89 d0             	mov    %rdx,%rax
    35ab:	83 e0 01             	and    $0x1,%eax
    35ae:	48 85 c0             	test   %rax,%rax
    35b1:	74 07                	je     35ba <feature_supported+0xa3>
        return 1;
    35b3:	b8 01 00 00 00       	mov    $0x1,%eax
    35b8:	eb 05                	jmp    35bf <feature_supported+0xa8>
    else
        return 0;
    35ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
    35bf:	5d                   	pop    %rbp
    35c0:	c3                   	retq   

00000000000035c1 <is_stack_addr>:

bool is_stack_addr(void *address, size_t size)
{
    35c1:	55                   	push   %rbp
    35c2:	48 89 e5             	mov    %rsp,%rbp
    35c5:	48 83 ec 30          	sub    $0x30,%rsp
    35c9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    35cd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    thread_data_t *thread_data = get_thread_data();
    35d1:	e8 bc c6 02 00       	callq  2fc92 <get_thread_data>
    35d6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    size_t stack_base = thread_data->stack_base_addr;
    35da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    35de:	48 8b 40 10          	mov    0x10(%rax),%rax
    35e2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    size_t stack_limit  = thread_data->stack_limit_addr;
    35e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    35ea:	48 8b 40 18          	mov    0x18(%rax),%rax
    35ee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    size_t addr = (size_t) address;
    35f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    35f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return (addr <= (addr + size)) && (stack_base >= (addr + size)) && (stack_limit <= addr);
    35fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    35fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3602:	48 01 d0             	add    %rdx,%rax
    3605:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    3609:	77 22                	ja     362d <is_stack_addr+0x6c>
    360b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    360f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3613:	48 01 d0             	add    %rdx,%rax
    3616:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    361a:	72 11                	jb     362d <is_stack_addr+0x6c>
    361c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3620:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    3624:	77 07                	ja     362d <is_stack_addr+0x6c>
    3626:	b8 01 00 00 00       	mov    $0x1,%eax
    362b:	eb 05                	jmp    3632 <is_stack_addr+0x71>
    362d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    3632:	c9                   	leaveq 
    3633:	c3                   	retq   

0000000000003634 <is_valid_sp>:

bool is_valid_sp(uintptr_t sp)
{
    3634:	55                   	push   %rbp
    3635:	48 89 e5             	mov    %rsp,%rbp
    3638:	48 83 ec 10          	sub    $0x10,%rsp
    363c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return ( !(sp & (sizeof(uintptr_t) - 1))   // sp is expected to be 4/8 bytes aligned
    3640:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3644:	83 e0 07             	and    $0x7,%eax
           && is_stack_addr((void*)sp, 0) );   // sp points to the top/bottom of stack are accepted
    3647:	48 85 c0             	test   %rax,%rax
    364a:	75 1c                	jne    3668 <is_valid_sp+0x34>
    364c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3650:	be 00 00 00 00       	mov    $0x0,%esi
    3655:	48 89 c7             	mov    %rax,%rdi
    3658:	e8 64 ff ff ff       	callq  35c1 <is_stack_addr>
    365d:	84 c0                	test   %al,%al
    365f:	74 07                	je     3668 <is_valid_sp+0x34>
    3661:	b8 01 00 00 00       	mov    $0x1,%eax
    3666:	eb 05                	jmp    366d <is_valid_sp+0x39>
    3668:	b8 00 00 00 00       	mov    $0x0,%eax
}
    366d:	c9                   	leaveq 
    366e:	c3                   	retq   

000000000000366f <sgx_register_exception_handler>:
//      exception_handler - a pointer to the handler to be called.
// Return Value
//      handler - success
//         NULL - fail
void *sgx_register_exception_handler(int is_first_handler, sgx_exception_handler_t exception_handler)
{
    366f:	55                   	push   %rbp
    3670:	48 89 e5             	mov    %rsp,%rbp
    3673:	48 83 ec 30          	sub    $0x30,%rsp
    3677:	89 7d dc             	mov    %edi,-0x24(%rbp)
    367a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    367e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3685:	00 00 
    3687:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    368b:	31 c0                	xor    %eax,%eax
    // initialize g_veh_cookie for the first time sgx_register_exception_handler is called.
    if(unlikely(g_veh_cookie == 0))
    368d:	48 8b 05 d4 22 23 00 	mov    0x2322d4(%rip),%rax        # 235968 <_ZL12g_veh_cookie>
    3694:	48 85 c0             	test   %rax,%rax
    3697:	0f 94 c0             	sete   %al
    369a:	0f b6 c0             	movzbl %al,%eax
    369d:	48 85 c0             	test   %rax,%rax
    36a0:	74 66                	je     3708 <sgx_register_exception_handler+0x99>
    {
        uintptr_t rand = 0;
    36a2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    36a9:	00 
        do
        {
            if(SGX_SUCCESS != sgx_read_rand((unsigned char *)&rand, sizeof(rand)))
    36aa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    36ae:	be 08 00 00 00       	mov    $0x8,%esi
    36b3:	48 89 c7             	mov    %rax,%rdi
    36b6:	e8 1b d9 ff ff       	callq  fd6 <sgx_read_rand>
    36bb:	85 c0                	test   %eax,%eax
    36bd:	0f 95 c0             	setne  %al
    36c0:	84 c0                	test   %al,%al
    36c2:	74 0a                	je     36ce <sgx_register_exception_handler+0x5f>
            {
                return NULL;
    36c4:	b8 00 00 00 00       	mov    $0x0,%eax
    36c9:	e9 1a 01 00 00       	jmpq   37e8 <sgx_register_exception_handler+0x179>
            }
        } while(rand == 0);
    36ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    36d2:	48 85 c0             	test   %rax,%rax
    36d5:	75 02                	jne    36d9 <sgx_register_exception_handler+0x6a>
        do
    36d7:	eb d1                	jmp    36aa <sgx_register_exception_handler+0x3b>

        sgx_spin_lock(&g_handler_lock);
    36d9:	48 8d 3d 80 22 23 00 	lea    0x232280(%rip),%rdi        # 235960 <_ZL14g_handler_lock>
    36e0:	e8 d5 b7 00 00       	callq  eeba <sgx_spin_lock>
        if(g_veh_cookie == 0)
    36e5:	48 8b 05 7c 22 23 00 	mov    0x23227c(%rip),%rax        # 235968 <_ZL12g_veh_cookie>
    36ec:	48 85 c0             	test   %rax,%rax
    36ef:	75 0b                	jne    36fc <sgx_register_exception_handler+0x8d>
        {
            g_veh_cookie = rand;
    36f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    36f5:	48 89 05 6c 22 23 00 	mov    %rax,0x23226c(%rip)        # 235968 <_ZL12g_veh_cookie>
        }
        sgx_spin_unlock(&g_handler_lock);
    36fc:	48 8d 3d 5d 22 23 00 	lea    0x23225d(%rip),%rdi        # 235960 <_ZL14g_handler_lock>
    3703:	e8 19 b8 00 00       	callq  ef21 <sgx_spin_unlock>
    }
    if(!sgx_is_within_enclave((const void*)exception_handler, 0))
    3708:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    370c:	be 00 00 00 00       	mov    $0x0,%esi
    3711:	48 89 c7             	mov    %rax,%rdi
    3714:	e8 f7 d5 ff ff       	callq  d10 <sgx_is_within_enclave>
    3719:	85 c0                	test   %eax,%eax
    371b:	0f 94 c0             	sete   %al
    371e:	84 c0                	test   %al,%al
    3720:	74 0a                	je     372c <sgx_register_exception_handler+0xbd>
    {
        return NULL;
    3722:	b8 00 00 00 00       	mov    $0x0,%eax
    3727:	e9 bc 00 00 00       	jmpq   37e8 <sgx_register_exception_handler+0x179>
    }
    handler_node_t *node = (handler_node_t *)malloc(sizeof(handler_node_t));
    372c:	bf 10 00 00 00       	mov    $0x10,%edi
    3731:	e8 ef 79 00 00       	callq  b125 <dlmalloc>
    3736:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(!node)
    373a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    373f:	75 0a                	jne    374b <sgx_register_exception_handler+0xdc>
    {
        return NULL;
    3741:	b8 00 00 00 00       	mov    $0x0,%eax
    3746:	e9 9d 00 00 00       	jmpq   37e8 <sgx_register_exception_handler+0x179>
    }
    node->callback = ENC_VEH_POINTER(exception_handler);
    374b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    374f:	48 8b 05 12 22 23 00 	mov    0x232212(%rip),%rax        # 235968 <_ZL12g_veh_cookie>
    3756:	48 31 c2             	xor    %rax,%rdx
    3759:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    375d:	48 89 10             	mov    %rdx,(%rax)

    // write lock
    sgx_spin_lock(&g_handler_lock);
    3760:	48 8d 3d f9 21 23 00 	lea    0x2321f9(%rip),%rdi        # 235960 <_ZL14g_handler_lock>
    3767:	e8 4e b7 00 00       	callq  eeba <sgx_spin_lock>

    if((g_first_node == NULL) || is_first_handler)
    376c:	48 8b 05 e5 21 23 00 	mov    0x2321e5(%rip),%rax        # 235958 <_ZL12g_first_node>
    3773:	48 85 c0             	test   %rax,%rax
    3776:	74 06                	je     377e <sgx_register_exception_handler+0x10f>
    3778:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    377c:	74 1c                	je     379a <sgx_register_exception_handler+0x12b>
    {
        node->next = g_first_node;
    377e:	48 8b 15 d3 21 23 00 	mov    0x2321d3(%rip),%rdx        # 235958 <_ZL12g_first_node>
    3785:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3789:	48 89 50 08          	mov    %rdx,0x8(%rax)
        g_first_node = node;
    378d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3791:	48 89 05 c0 21 23 00 	mov    %rax,0x2321c0(%rip)        # 235958 <_ZL12g_first_node>
    3798:	eb 3e                	jmp    37d8 <sgx_register_exception_handler+0x169>
    }
    else
    {
        handler_node_t *tmp = g_first_node;
    379a:	48 8b 05 b7 21 23 00 	mov    0x2321b7(%rip),%rax        # 235958 <_ZL12g_first_node>
    37a1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        while(tmp->next != NULL)
    37a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    37a9:	48 8b 40 08          	mov    0x8(%rax),%rax
    37ad:	48 85 c0             	test   %rax,%rax
    37b0:	74 0e                	je     37c0 <sgx_register_exception_handler+0x151>
        {
            tmp = tmp->next;
    37b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    37b6:	48 8b 40 08          	mov    0x8(%rax),%rax
    37ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        while(tmp->next != NULL)
    37be:	eb e5                	jmp    37a5 <sgx_register_exception_handler+0x136>
        }
        node->next = NULL;
    37c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    37c4:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    37cb:	00 
        tmp->next = node;
    37cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    37d0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    37d4:	48 89 50 08          	mov    %rdx,0x8(%rax)
    }
    // write unlock
    sgx_spin_unlock(&g_handler_lock);
    37d8:	48 8d 3d 81 21 23 00 	lea    0x232181(%rip),%rdi        # 235960 <_ZL14g_handler_lock>
    37df:	e8 3d b7 00 00       	callq  ef21 <sgx_spin_unlock>

    return node;
    37e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
    37e8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    37ec:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    37f3:	00 00 
    37f5:	74 05                	je     37fc <sgx_register_exception_handler+0x18d>
    37f7:	e8 9c 17 00 00       	callq  4f98 <__stack_chk_fail>
    37fc:	c9                   	leaveq 
    37fd:	c3                   	retq   

00000000000037fe <sgx_unregister_exception_handler>:
// registered using the sgx_register_exception_handler function.
// Return Value
//      none zero - success
//              0 - fail
int sgx_unregister_exception_handler(void *handler)
{
    37fe:	55                   	push   %rbp
    37ff:	48 89 e5             	mov    %rsp,%rbp
    3802:	48 83 ec 20          	sub    $0x20,%rsp
    3806:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if(!handler)
    380a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    380f:	75 0a                	jne    381b <sgx_unregister_exception_handler+0x1d>
    {
        return 0;
    3811:	b8 00 00 00 00       	mov    $0x0,%eax
    3816:	e9 b3 00 00 00       	jmpq   38ce <sgx_unregister_exception_handler+0xd0>
    }

    int status = 0;
    381b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

    // write lock
    sgx_spin_lock(&g_handler_lock);
    3822:	48 8d 3d 37 21 23 00 	lea    0x232137(%rip),%rdi        # 235960 <_ZL14g_handler_lock>
    3829:	e8 8c b6 00 00       	callq  eeba <sgx_spin_lock>

    if(g_first_node)
    382e:	48 8b 05 23 21 23 00 	mov    0x232123(%rip),%rax        # 235958 <_ZL12g_first_node>
    3835:	48 85 c0             	test   %rax,%rax
    3838:	74 73                	je     38ad <sgx_unregister_exception_handler+0xaf>
    {
        handler_node_t *node = g_first_node;
    383a:	48 8b 05 17 21 23 00 	mov    0x232117(%rip),%rax        # 235958 <_ZL12g_first_node>
    3841:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if(node == handler)
    3845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3849:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    384d:	75 18                	jne    3867 <sgx_unregister_exception_handler+0x69>
        {
            g_first_node = node->next;
    384f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3853:	48 8b 40 08          	mov    0x8(%rax),%rax
    3857:	48 89 05 fa 20 23 00 	mov    %rax,0x2320fa(%rip)        # 235958 <_ZL12g_first_node>
            status = 1;
    385e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
    3865:	eb 46                	jmp    38ad <sgx_unregister_exception_handler+0xaf>
        }
        else
        {
            while(node->next != NULL)
    3867:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    386b:	48 8b 40 08          	mov    0x8(%rax),%rax
    386f:	48 85 c0             	test   %rax,%rax
    3872:	74 39                	je     38ad <sgx_unregister_exception_handler+0xaf>
            {
                if(node->next == handler)
    3874:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3878:	48 8b 40 08          	mov    0x8(%rax),%rax
    387c:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    3880:	75 1d                	jne    389f <sgx_unregister_exception_handler+0xa1>
                {
                    node->next = node->next->next;
    3882:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3886:	48 8b 40 08          	mov    0x8(%rax),%rax
    388a:	48 8b 50 08          	mov    0x8(%rax),%rdx
    388e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3892:	48 89 50 08          	mov    %rdx,0x8(%rax)
                    status = 1;
    3896:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
                    break;
    389d:	eb 0e                	jmp    38ad <sgx_unregister_exception_handler+0xaf>
                }
                node = node->next;
    389f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    38a3:	48 8b 40 08          	mov    0x8(%rax),%rax
    38a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            while(node->next != NULL)
    38ab:	eb ba                	jmp    3867 <sgx_unregister_exception_handler+0x69>
            }
        }
    }
    // write unlock
    sgx_spin_unlock(&g_handler_lock);
    38ad:	48 8d 3d ac 20 23 00 	lea    0x2320ac(%rip),%rdi        # 235960 <_ZL14g_handler_lock>
    38b4:	e8 68 b6 00 00       	callq  ef21 <sgx_spin_unlock>

    if(status) free(handler);
    38b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
    38bd:	74 0c                	je     38cb <sgx_unregister_exception_handler+0xcd>
    38bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38c3:	48 89 c7             	mov    %rax,%rdi
    38c6:	e8 51 83 00 00       	callq  bc1c <dlfree>
    return status;
    38cb:	8b 45 f4             	mov    -0xc(%rbp),%eax
}
    38ce:	c9                   	leaveq 
    38cf:	c3                   	retq   

00000000000038d0 <internal_handle_exception>:
// internal_handle_exception(sgx_exception_info_t *info):
//      the 2nd phrase exception handing, which traverse registered exception handlers.
//      if the exception can be handled, then continue execution
//      otherwise, throw abortion, go back to 1st phrase, and call the default handler.
extern "C" __attribute__((regparm(1))) void internal_handle_exception(sgx_exception_info_t *info)
{
    38d0:	55                   	push   %rbp
    38d1:	48 89 e5             	mov    %rsp,%rbp
    38d4:	48 83 ec 50          	sub    $0x50,%rsp
    38d8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    int status = EXCEPTION_CONTINUE_SEARCH;
    38dc:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
    handler_node_t *node = NULL;
    38e3:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    38ea:	00 
    thread_data_t *thread_data = get_thread_data();
    38eb:	e8 a2 c3 02 00       	callq  2fc92 <get_thread_data>
    38f0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    size_t size = 0;
    38f4:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    38fb:	00 
    uintptr_t *nhead = NULL;
    38fc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    3903:	00 
    uintptr_t *ntmp = NULL;
    3904:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    390b:	00 
    uintptr_t xsp = 0;
    390c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    3913:	00 

    if (thread_data->exception_flag < 0)
    3914:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3918:	48 8b 40 60          	mov    0x60(%rax),%rax
    391c:	48 85 c0             	test   %rax,%rax
    391f:	0f 88 8c 01 00 00    	js     3ab1 <internal_handle_exception+0x1e1>
        goto failed_end;
    thread_data->exception_flag++;
    3925:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3929:	48 8b 40 60          	mov    0x60(%rax),%rax
    392d:	48 8d 50 01          	lea    0x1(%rax),%rdx
    3931:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3935:	48 89 50 60          	mov    %rdx,0x60(%rax)

    // read lock
    sgx_spin_lock(&g_handler_lock);
    3939:	48 8d 3d 20 20 23 00 	lea    0x232020(%rip),%rdi        # 235960 <_ZL14g_handler_lock>
    3940:	e8 75 b5 00 00       	callq  eeba <sgx_spin_lock>

    node = g_first_node;
    3945:	48 8b 05 0c 20 23 00 	mov    0x23200c(%rip),%rax        # 235958 <_ZL12g_first_node>
    394c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    while(node != NULL)
    3950:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    3955:	74 13                	je     396a <internal_handle_exception+0x9a>
    {
        size += sizeof(uintptr_t);
    3957:	48 83 45 d0 08       	addq   $0x8,-0x30(%rbp)
        node = node->next;
    395c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3960:	48 8b 40 08          	mov    0x8(%rax),%rax
    3964:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    while(node != NULL)
    3968:	eb e6                	jmp    3950 <internal_handle_exception+0x80>
    }

    // There's no exception handler registered
    if (size == 0)
    396a:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    396f:	75 24                	jne    3995 <internal_handle_exception+0xc5>
    {
        sgx_spin_unlock(&g_handler_lock);
    3971:	48 8d 3d e8 1f 23 00 	lea    0x231fe8(%rip),%rdi        # 235960 <_ZL14g_handler_lock>
    3978:	e8 a4 b5 00 00       	callq  ef21 <sgx_spin_unlock>

        //exception cannot be handled
        thread_data->exception_flag = -1;
    397d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3981:	48 c7 40 60 ff ff ff 	movq   $0xffffffffffffffff,0x60(%rax)
    3988:	ff 

        //instruction triggering the exception will be executed again.
        continue_execution(info);
    3989:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    398d:	48 89 c7             	mov    %rax,%rdi
    3990:	e8 08 c6 02 00       	callq  2ff9d <continue_execution>
    }

    if ((nhead = (uintptr_t *)malloc(size)) == NULL)
    3995:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3999:	48 89 c7             	mov    %rax,%rdi
    399c:	e8 84 77 00 00       	callq  b125 <dlmalloc>
    39a1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    39a5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    39aa:	0f 94 c0             	sete   %al
    39ad:	84 c0                	test   %al,%al
    39af:	74 11                	je     39c2 <internal_handle_exception+0xf2>
    {
        sgx_spin_unlock(&g_handler_lock);
    39b1:	48 8d 3d a8 1f 23 00 	lea    0x231fa8(%rip),%rdi        # 235960 <_ZL14g_handler_lock>
    39b8:	e8 64 b5 00 00       	callq  ef21 <sgx_spin_unlock>
        goto failed_end;
    39bd:	e9 f3 00 00 00       	jmpq   3ab5 <internal_handle_exception+0x1e5>
    }
    ntmp = nhead;
    39c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    node = g_first_node;
    39ca:	48 8b 05 87 1f 23 00 	mov    0x231f87(%rip),%rax        # 235958 <_ZL12g_first_node>
    39d1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    while(node != NULL)
    39d5:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    39da:	74 21                	je     39fd <internal_handle_exception+0x12d>
    {
        *ntmp = node->callback;
    39dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    39e0:	48 8b 10             	mov    (%rax),%rdx
    39e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    39e7:	48 89 10             	mov    %rdx,(%rax)
        ntmp++;
    39ea:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
        node = node->next;
    39ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    39f3:	48 8b 40 08          	mov    0x8(%rax),%rax
    39f7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    while(node != NULL)
    39fb:	eb d8                	jmp    39d5 <internal_handle_exception+0x105>
    }

    // read unlock
    sgx_spin_unlock(&g_handler_lock);
    39fd:	48 8d 3d 5c 1f 23 00 	lea    0x231f5c(%rip),%rdi        # 235960 <_ZL14g_handler_lock>
    3a04:	e8 18 b5 00 00       	callq  ef21 <sgx_spin_unlock>

    // call exception handler until EXCEPTION_CONTINUE_EXECUTION is returned
    ntmp = nhead;
    3a09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3a0d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(size > 0)
    3a11:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    3a16:	74 38                	je     3a50 <internal_handle_exception+0x180>
    {
        sgx_exception_handler_t handler = DEC_VEH_POINTER(*ntmp);
    3a18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3a1c:	48 8b 10             	mov    (%rax),%rdx
    3a1f:	48 8b 05 42 1f 23 00 	mov    0x231f42(%rip),%rax        # 235968 <_ZL12g_veh_cookie>
    3a26:	48 31 d0             	xor    %rdx,%rax
    3a29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        status = handler(info);
    3a2d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    3a31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a35:	48 89 d7             	mov    %rdx,%rdi
    3a38:	ff d0                	callq  *%rax
    3a3a:	89 45 c4             	mov    %eax,-0x3c(%rbp)
        if(EXCEPTION_CONTINUE_EXECUTION == status)
    3a3d:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
    3a41:	74 0c                	je     3a4f <internal_handle_exception+0x17f>
        {
            break;
        }
        ntmp++;
    3a43:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
        size -= sizeof(sgx_exception_handler_t);
    3a48:	48 83 6d d0 08       	subq   $0x8,-0x30(%rbp)
    while(size > 0)
    3a4d:	eb c2                	jmp    3a11 <internal_handle_exception+0x141>
            break;
    3a4f:	90                   	nop
    }
    free(nhead);
    3a50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3a54:	48 89 c7             	mov    %rax,%rdi
    3a57:	e8 c0 81 00 00       	callq  bc1c <dlfree>

    // call default handler
    // ignore invalid return value, treat to EXCEPTION_CONTINUE_SEARCH
    // check SP to be written on SSA is pointing to the trusted stack
    xsp = info->cpu_context.REG(sp);
    3a5c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    3a60:	48 8b 40 20          	mov    0x20(%rax),%rax
    3a64:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if (!is_valid_sp(xsp))
    3a68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3a6c:	48 89 c7             	mov    %rax,%rdi
    3a6f:	e8 c0 fb ff ff       	callq  3634 <is_valid_sp>
    3a74:	83 f0 01             	xor    $0x1,%eax
    3a77:	84 c0                	test   %al,%al
    3a79:	75 39                	jne    3ab4 <internal_handle_exception+0x1e4>
    {
        goto failed_end;
    }

    if(EXCEPTION_CONTINUE_EXECUTION == status)
    3a7b:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
    3a7f:	75 16                	jne    3a97 <internal_handle_exception+0x1c7>
    {
        //exception is handled, decrease the nested exception count
        thread_data->exception_flag--;
    3a81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3a85:	48 8b 40 60          	mov    0x60(%rax),%rax
    3a89:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    3a8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3a91:	48 89 50 60          	mov    %rdx,0x60(%rax)
    3a95:	eb 0c                	jmp    3aa3 <internal_handle_exception+0x1d3>
    }
    else
    {
        //exception cannot be handled
        thread_data->exception_flag = -1;
    3a97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3a9b:	48 c7 40 60 ff ff ff 	movq   $0xffffffffffffffff,0x60(%rax)
    3aa2:	ff 
    }

    //instruction triggering the exception will be executed again.
    continue_execution(info);
    3aa3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    3aa7:	48 89 c7             	mov    %rax,%rdi
    3aaa:	e8 ee c4 02 00       	callq  2ff9d <continue_execution>
    3aaf:	eb 04                	jmp    3ab5 <internal_handle_exception+0x1e5>
        goto failed_end;
    3ab1:	90                   	nop
    3ab2:	eb 01                	jmp    3ab5 <internal_handle_exception+0x1e5>
        goto failed_end;
    3ab4:	90                   	nop

failed_end:
    thread_data->exception_flag = -1; // mark the current exception cannot be handled
    3ab5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3ab9:	48 c7 40 60 ff ff ff 	movq   $0xffffffffffffffff,0x60(%rax)
    3ac0:	ff 
    abort();    // throw abortion
    3ac1:	e8 c8 c4 02 00       	callq  2ff8e <abort>

0000000000003ac6 <_ZL21expand_stack_by_pagesPvm>:
}

static int expand_stack_by_pages(void *start_addr, size_t page_count)
{
    3ac6:	55                   	push   %rbp
    3ac7:	48 89 e5             	mov    %rsp,%rbp
    3aca:	48 83 ec 20          	sub    $0x20,%rsp
    3ace:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    3ad2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    int ret = -1;
    3ad6:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)

    if ((start_addr == NULL) || (page_count == 0))
    3add:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    3ae2:	74 07                	je     3aeb <_ZL21expand_stack_by_pagesPvm+0x25>
    3ae4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    3ae9:	75 07                	jne    3af2 <_ZL21expand_stack_by_pagesPvm+0x2c>
        return -1;
    3aeb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    3af0:	eb 19                	jmp    3b0b <_ZL21expand_stack_by_pagesPvm+0x45>

    ret = apply_pages_within_exception(start_addr, page_count);
    3af2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    3af6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3afa:	48 89 d6             	mov    %rdx,%rsi
    3afd:	48 89 c7             	mov    %rax,%rdi
    3b00:	e8 f4 df ff ff       	callq  1af9 <apply_pages_within_exception>
    3b05:	89 45 fc             	mov    %eax,-0x4(%rbp)
    return ret;
    3b08:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    3b0b:	c9                   	leaveq 
    3b0c:	c3                   	retq   

0000000000003b0d <trts_handle_exception>:
//      the pointer of TCS
// Return Value
//      none zero - success
//              0 - fail
extern "C" sgx_status_t trts_handle_exception(void *tcs)
{
    3b0d:	55                   	push   %rbp
    3b0e:	48 89 e5             	mov    %rsp,%rbp
    3b11:	48 83 ec 50          	sub    $0x50,%rsp
    3b15:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    thread_data_t *thread_data = get_thread_data();
    3b19:	e8 74 c1 02 00       	callq  2fc92 <get_thread_data>
    3b1e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    ssa_gpr_t *ssa_gpr = NULL;
    3b22:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    3b29:	00 
    sgx_exception_info_t *info = NULL;
    3b2a:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    3b31:	00 
    uintptr_t sp, *new_sp = NULL;
    3b32:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    3b39:	00 
    size_t size = 0;
    3b3a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    3b41:	00 

    if ((thread_data == NULL) || (tcs == NULL)) goto default_handler;
    3b42:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    3b47:	0f 84 86 04 00 00    	je     3fd3 <trts_handle_exception+0x4c6>
    3b4d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    3b52:	0f 84 7b 04 00 00    	je     3fd3 <trts_handle_exception+0x4c6>
    if (check_static_stack_canary(tcs) != 0)
    3b58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    3b5c:	48 89 c7             	mov    %rax,%rdi
    3b5f:	e8 8b d5 ff ff       	callq  10ef <check_static_stack_canary>
    3b64:	85 c0                	test   %eax,%eax
    3b66:	0f 95 c0             	setne  %al
    3b69:	84 c0                	test   %al,%al
    3b6b:	0f 85 65 04 00 00    	jne    3fd6 <trts_handle_exception+0x4c9>
        goto default_handler;
 
    if(get_enclave_state() != ENCLAVE_INIT_DONE)
    3b71:	e8 e9 c0 02 00       	callq  2fc5f <get_enclave_state>
    3b76:	83 f8 02             	cmp    $0x2,%eax
    3b79:	0f 95 c0             	setne  %al
    3b7c:	84 c0                	test   %al,%al
    3b7e:	0f 85 55 04 00 00    	jne    3fd9 <trts_handle_exception+0x4cc>
    {
        goto default_handler;
    }
    
    // check if the exception is raised from 2nd phrase
    if(thread_data->exception_flag == -1) {
    3b84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3b88:	48 8b 40 60          	mov    0x60(%rax),%rax
    3b8c:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
    3b90:	0f 84 46 04 00 00    	je     3fdc <trts_handle_exception+0x4cf>
        goto default_handler;
    }
 
    if ((TD2TCS(thread_data) != tcs) 
    3b96:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3b9a:	48 8b 40 10          	mov    0x10(%rax),%rax
    3b9e:	48 05 b0 02 01 00    	add    $0x102b0,%rax
    3ba4:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
    3ba8:	0f 85 25 04 00 00    	jne    3fd3 <trts_handle_exception+0x4c6>
            || (((thread_data->first_ssa_gpr)&(~0xfff)) - SE_PAGE_SIZE) != (uintptr_t)tcs) {
    3bae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3bb2:	48 8b 40 20          	mov    0x20(%rax),%rax
    3bb6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    3bbc:	48 8d 90 00 f0 ff ff 	lea    -0x1000(%rax),%rdx
    3bc3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    3bc7:	48 39 c2             	cmp    %rax,%rdx
    3bca:	0f 85 03 04 00 00    	jne    3fd3 <trts_handle_exception+0x4c6>
        goto default_handler;
    }

    // no need to check the result of ssa_gpr because thread_data is always trusted
    ssa_gpr = reinterpret_cast<ssa_gpr_t *>(thread_data->first_ssa_gpr);
    3bd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3bd4:	48 8b 40 20          	mov    0x20(%rax),%rax
    3bd8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    
    sp = ssa_gpr->REG(sp);
    3bdc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3be0:	48 8b 40 20          	mov    0x20(%rax),%rax
    3be4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(!is_stack_addr((void*)sp, 0))  // check stack overrun only, alignment will be checked after exception handled
    3be8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3bec:	be 00 00 00 00       	mov    $0x0,%esi
    3bf1:	48 89 c7             	mov    %rax,%rdi
    3bf4:	e8 c8 f9 ff ff       	callq  35c1 <is_stack_addr>
    3bf9:	83 f0 01             	xor    $0x1,%eax
    3bfc:	84 c0                	test   %al,%al
    3bfe:	74 17                	je     3c17 <trts_handle_exception+0x10a>
    {
        g_enclave_state = ENCLAVE_CRASHED;
    3c00:	48 8d 05 1d 1d 23 00 	lea    0x231d1d(%rip),%rax        # 235924 <g_enclave_state>
    3c07:	c7 00 03 00 00 00    	movl   $0x3,(%rax)
        return SGX_ERROR_STACK_OVERRUN;
    3c0d:	b8 09 10 00 00       	mov    $0x1009,%eax
    3c12:	e9 db 03 00 00       	jmpq   3ff2 <trts_handle_exception+0x4e5>
    }

    size = 0;
    3c17:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    3c1e:	00 
    // x86_64 requires a 128-bytes red zone, which begins directly
    // after the return addr and includes func's arguments
    size += RED_ZONE_SIZE;
    3c1f:	48 83 6d e8 80       	subq   $0xffffffffffffff80,-0x18(%rbp)

    // decrease the stack to give space for info
    size += sizeof(sgx_exception_info_t);
    3c24:	48 81 45 e8 98 00 00 	addq   $0x98,-0x18(%rbp)
    3c2b:	00 
    sp -= size;
    3c2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3c30:	48 29 45 f0          	sub    %rax,-0x10(%rbp)
    sp = sp & ~0xF;
    3c34:	48 83 65 f0 f0       	andq   $0xfffffffffffffff0,-0x10(%rbp)

    // check the decreased sp to make sure it is in the trusted stack range
    if(!is_stack_addr((void *)sp, size))
    3c39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3c3d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    3c41:	48 89 d6             	mov    %rdx,%rsi
    3c44:	48 89 c7             	mov    %rax,%rdi
    3c47:	e8 75 f9 ff ff       	callq  35c1 <is_stack_addr>
    3c4c:	83 f0 01             	xor    $0x1,%eax
    3c4f:	84 c0                	test   %al,%al
    3c51:	74 17                	je     3c6a <trts_handle_exception+0x15d>
    {
        g_enclave_state = ENCLAVE_CRASHED;
    3c53:	48 8d 05 ca 1c 23 00 	lea    0x231cca(%rip),%rax        # 235924 <g_enclave_state>
    3c5a:	c7 00 03 00 00 00    	movl   $0x3,(%rax)
        return SGX_ERROR_STACK_OVERRUN;
    3c60:	b8 09 10 00 00       	mov    $0x1009,%eax
    3c65:	e9 88 03 00 00       	jmpq   3ff2 <trts_handle_exception+0x4e5>
    }

    info = (sgx_exception_info_t *)sp;
    3c6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3c6e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    // decrease the stack to save the SSA[0]->ip
    size = sizeof(uintptr_t);
    3c72:	48 c7 45 e8 08 00 00 	movq   $0x8,-0x18(%rbp)
    3c79:	00 
    sp -= size;
    3c7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3c7e:	48 29 45 f0          	sub    %rax,-0x10(%rbp)
    if(!is_stack_addr((void *)sp, size))
    3c82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3c86:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    3c8a:	48 89 d6             	mov    %rdx,%rsi
    3c8d:	48 89 c7             	mov    %rax,%rdi
    3c90:	e8 2c f9 ff ff       	callq  35c1 <is_stack_addr>
    3c95:	83 f0 01             	xor    $0x1,%eax
    3c98:	84 c0                	test   %al,%al
    3c9a:	74 17                	je     3cb3 <trts_handle_exception+0x1a6>
    {
        g_enclave_state = ENCLAVE_CRASHED;
    3c9c:	48 8d 05 81 1c 23 00 	lea    0x231c81(%rip),%rax        # 235924 <g_enclave_state>
    3ca3:	c7 00 03 00 00 00    	movl   $0x3,(%rax)
        return SGX_ERROR_STACK_OVERRUN;
    3ca9:	b8 09 10 00 00       	mov    $0x1009,%eax
    3cae:	e9 3f 03 00 00       	jmpq   3ff2 <trts_handle_exception+0x4e5>
    }
    
    // sp is within limit_addr and commit_addr, currently only SGX 2.0 under hardware mode will enter this branch.^M
    if((size_t)sp < thread_data->stack_commit_addr)
    3cb3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3cb7:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    3cbe:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    3cc2:	0f 83 ca 00 00 00    	jae    3d92 <trts_handle_exception+0x285>
    { 
        int ret = -1;
    3cc8:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%rbp)
        size_t page_aligned_delta = 0;
    3ccf:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    3cd6:	00 
        /* try to allocate memory dynamically */
        page_aligned_delta = ROUND_TO(thread_data->stack_commit_addr - (size_t)sp, SE_PAGE_SIZE);
    3cd7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3cdb:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    3ce2:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    3ce6:	48 05 ff 0f 00 00    	add    $0xfff,%rax
    3cec:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    3cf2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if ((thread_data->stack_commit_addr > page_aligned_delta)
    3cf6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3cfa:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    3d01:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    3d05:	73 47                	jae    3d4e <trts_handle_exception+0x241>
                && ((thread_data->stack_commit_addr - page_aligned_delta) >= thread_data->stack_limit_addr))
    3d07:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3d0b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    3d12:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    3d16:	48 89 c2             	mov    %rax,%rdx
    3d19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3d1d:	48 8b 40 18          	mov    0x18(%rax),%rax
    3d21:	48 39 c2             	cmp    %rax,%rdx
    3d24:	72 28                	jb     3d4e <trts_handle_exception+0x241>
        {
            ret = expand_stack_by_pages((void *)(thread_data->stack_commit_addr - page_aligned_delta), (page_aligned_delta >> SE_PAGE_SHIFT));
    3d26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3d2a:	48 c1 e8 0c          	shr    $0xc,%rax
    3d2e:	48 89 c2             	mov    %rax,%rdx
    3d31:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3d35:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    3d3c:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    3d40:	48 89 d6             	mov    %rdx,%rsi
    3d43:	48 89 c7             	mov    %rax,%rdi
    3d46:	e8 7b fd ff ff       	callq  3ac6 <_ZL21expand_stack_by_pagesPvm>
    3d4b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
        }
        if (ret == 0)
    3d4e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
    3d52:	75 27                	jne    3d7b <trts_handle_exception+0x26e>
        {
            thread_data->stack_commit_addr -= page_aligned_delta;
    3d54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3d58:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
    3d5f:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    3d63:	48 89 c2             	mov    %rax,%rdx
    3d66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3d6a:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
            return SGX_SUCCESS;
    3d71:	b8 00 00 00 00       	mov    $0x0,%eax
    3d76:	e9 77 02 00 00       	jmpq   3ff2 <trts_handle_exception+0x4e5>
        }
        else
        {
            g_enclave_state = ENCLAVE_CRASHED;
    3d7b:	48 8d 05 a2 1b 23 00 	lea    0x231ba2(%rip),%rax        # 235924 <g_enclave_state>
    3d82:	c7 00 03 00 00 00    	movl   $0x3,(%rax)
            return SGX_ERROR_STACK_OVERRUN;
    3d88:	b8 09 10 00 00       	mov    $0x1009,%eax
    3d8d:	e9 60 02 00 00       	jmpq   3ff2 <trts_handle_exception+0x4e5>
        }
    }
    if (size_t(&Lereport_inst) == ssa_gpr->REG(ip) && SE_EREPORT == ssa_gpr->REG(ax))
    3d92:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3d96:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
    3d9d:	48 8d 15 92 c1 02 00 	lea    0x2c192(%rip),%rdx        # 2ff36 <Lereport_inst>
    3da4:	48 39 d0             	cmp    %rdx,%rax
    3da7:	75 4d                	jne    3df6 <trts_handle_exception+0x2e9>
    3da9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3dad:	48 8b 00             	mov    (%rax),%rax
    3db0:	48 85 c0             	test   %rax,%rax
    3db3:	75 41                	jne    3df6 <trts_handle_exception+0x2e9>
    {
        // Handle the exception raised by EREPORT instruction
        ssa_gpr->REG(ip) += 3;     // Skip ENCLU, which is always a 3-byte instruction
    3db5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3db9:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
    3dc0:	48 8d 50 03          	lea    0x3(%rax),%rdx
    3dc4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3dc8:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        ssa_gpr->REG(flags) |= 1;  // Set CF to indicate error condition, see implementation of do_report()
    3dcf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3dd3:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    3dda:	48 83 c8 01          	or     $0x1,%rax
    3dde:	48 89 c2             	mov    %rax,%rdx
    3de1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3de5:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
        return SGX_SUCCESS;
    3dec:	b8 00 00 00 00       	mov    $0x0,%eax
    3df1:	e9 fc 01 00 00       	jmpq   3ff2 <trts_handle_exception+0x4e5>
    }

    if(ssa_gpr->exit_info.valid != 1)
    3df6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3dfa:	0f b6 80 a3 00 00 00 	movzbl 0xa3(%rax),%eax
    3e01:	83 e0 80             	and    $0xffffff80,%eax
    3e04:	84 c0                	test   %al,%al
    3e06:	0f 84 d3 01 00 00    	je     3fdf <trts_handle_exception+0x4d2>
    {   // exception handlers are not allowed to call in a non-exception state
        goto default_handler;
    }

    // initialize the info with SSA[0]
    info->exception_vector = (sgx_exception_vector_t)ssa_gpr->exit_info.vector;
    3e0c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3e10:	0f b6 80 a0 00 00 00 	movzbl 0xa0(%rax),%eax
    3e17:	0f b6 d0             	movzbl %al,%edx
    3e1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e1e:	89 90 90 00 00 00    	mov    %edx,0x90(%rax)
    info->exception_type = (sgx_exception_type_t)ssa_gpr->exit_info.exit_type;
    3e24:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3e28:	0f b6 80 a1 00 00 00 	movzbl 0xa1(%rax),%eax
    3e2f:	83 e0 07             	and    $0x7,%eax
    3e32:	0f b6 d0             	movzbl %al,%edx
    3e35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e39:	89 90 94 00 00 00    	mov    %edx,0x94(%rax)

    info->cpu_context.REG(ax) = ssa_gpr->REG(ax);
    3e3f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3e43:	48 8b 10             	mov    (%rax),%rdx
    3e46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e4a:	48 89 10             	mov    %rdx,(%rax)
    info->cpu_context.REG(cx) = ssa_gpr->REG(cx);
    3e4d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3e51:	48 8b 50 08          	mov    0x8(%rax),%rdx
    3e55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e59:	48 89 50 08          	mov    %rdx,0x8(%rax)
    info->cpu_context.REG(dx) = ssa_gpr->REG(dx);
    3e5d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3e61:	48 8b 50 10          	mov    0x10(%rax),%rdx
    3e65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e69:	48 89 50 10          	mov    %rdx,0x10(%rax)
    info->cpu_context.REG(bx) = ssa_gpr->REG(bx);
    3e6d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3e71:	48 8b 50 18          	mov    0x18(%rax),%rdx
    3e75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e79:	48 89 50 18          	mov    %rdx,0x18(%rax)
    info->cpu_context.REG(sp) = ssa_gpr->REG(sp);
    3e7d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3e81:	48 8b 50 20          	mov    0x20(%rax),%rdx
    3e85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e89:	48 89 50 20          	mov    %rdx,0x20(%rax)
    info->cpu_context.REG(bp) = ssa_gpr->REG(bp);
    3e8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3e91:	48 8b 50 28          	mov    0x28(%rax),%rdx
    3e95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e99:	48 89 50 28          	mov    %rdx,0x28(%rax)
    info->cpu_context.REG(si) = ssa_gpr->REG(si);
    3e9d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3ea1:	48 8b 50 30          	mov    0x30(%rax),%rdx
    3ea5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3ea9:	48 89 50 30          	mov    %rdx,0x30(%rax)
    info->cpu_context.REG(di) = ssa_gpr->REG(di);
    3ead:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3eb1:	48 8b 50 38          	mov    0x38(%rax),%rdx
    3eb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3eb9:	48 89 50 38          	mov    %rdx,0x38(%rax)
    info->cpu_context.REG(flags) = ssa_gpr->REG(flags);
    3ebd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3ec1:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
    3ec8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3ecc:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
    info->cpu_context.REG(ip) = ssa_gpr->REG(ip);
    3ed3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3ed7:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
    3ede:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3ee2:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
#ifdef SE_64
    info->cpu_context.r8  = ssa_gpr->r8;
    3ee9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3eed:	48 8b 50 40          	mov    0x40(%rax),%rdx
    3ef1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3ef5:	48 89 50 40          	mov    %rdx,0x40(%rax)
    info->cpu_context.r9  = ssa_gpr->r9;
    3ef9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3efd:	48 8b 50 48          	mov    0x48(%rax),%rdx
    3f01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f05:	48 89 50 48          	mov    %rdx,0x48(%rax)
    info->cpu_context.r10 = ssa_gpr->r10;
    3f09:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f0d:	48 8b 50 50          	mov    0x50(%rax),%rdx
    3f11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f15:	48 89 50 50          	mov    %rdx,0x50(%rax)
    info->cpu_context.r11 = ssa_gpr->r11;
    3f19:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f1d:	48 8b 50 58          	mov    0x58(%rax),%rdx
    3f21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f25:	48 89 50 58          	mov    %rdx,0x58(%rax)
    info->cpu_context.r12 = ssa_gpr->r12;
    3f29:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f2d:	48 8b 50 60          	mov    0x60(%rax),%rdx
    3f31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f35:	48 89 50 60          	mov    %rdx,0x60(%rax)
    info->cpu_context.r13 = ssa_gpr->r13;
    3f39:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f3d:	48 8b 50 68          	mov    0x68(%rax),%rdx
    3f41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f45:	48 89 50 68          	mov    %rdx,0x68(%rax)
    info->cpu_context.r14 = ssa_gpr->r14;
    3f49:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f4d:	48 8b 50 70          	mov    0x70(%rax),%rdx
    3f51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f55:	48 89 50 70          	mov    %rdx,0x70(%rax)
    info->cpu_context.r15 = ssa_gpr->r15;
    3f59:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f5d:	48 8b 50 78          	mov    0x78(%rax),%rdx
    3f61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f65:	48 89 50 78          	mov    %rdx,0x78(%rax)
#endif

    new_sp = (uintptr_t *)sp;
    3f69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3f6d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ssa_gpr->REG(ip) = (size_t)internal_handle_exception; // prepare the ip for 2nd phrase handling
    3f71:	48 8d 15 58 f9 ff ff 	lea    -0x6a8(%rip),%rdx        # 38d0 <internal_handle_exception>
    3f78:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f7c:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    ssa_gpr->REG(sp) = (size_t)new_sp;      // new stack for internal_handle_exception
    3f83:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    3f87:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f8b:	48 89 50 20          	mov    %rdx,0x20(%rax)
    ssa_gpr->REG(ax) = (size_t)info;        // 1st parameter (info) for LINUX32
    3f8f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    3f93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3f97:	48 89 10             	mov    %rdx,(%rax)
    ssa_gpr->REG(di) = (size_t)info;        // 1st parameter (info) for LINUX64, LINUX32 also uses it while restoring the context
    3f9a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    3f9e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3fa2:	48 89 50 38          	mov    %rdx,0x38(%rax)
    *new_sp = info->cpu_context.REG(ip);    // for debugger to get call trace
    3fa6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3faa:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
    3fb1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3fb5:	48 89 10             	mov    %rdx,(%rax)
    
    //mark valid to 0 to prevent eenter again
    ssa_gpr->exit_info.valid = 0;
    3fb8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3fbc:	0f b6 90 a3 00 00 00 	movzbl 0xa3(%rax),%edx
    3fc3:	83 e2 7f             	and    $0x7f,%edx
    3fc6:	88 90 a3 00 00 00    	mov    %dl,0xa3(%rax)

    return SGX_SUCCESS;
    3fcc:	b8 00 00 00 00       	mov    $0x0,%eax
    3fd1:	eb 1f                	jmp    3ff2 <trts_handle_exception+0x4e5>
 
default_handler:
    3fd3:	90                   	nop
    3fd4:	eb 0a                	jmp    3fe0 <trts_handle_exception+0x4d3>
        goto default_handler;
    3fd6:	90                   	nop
    3fd7:	eb 07                	jmp    3fe0 <trts_handle_exception+0x4d3>
        goto default_handler;
    3fd9:	90                   	nop
    3fda:	eb 04                	jmp    3fe0 <trts_handle_exception+0x4d3>
        goto default_handler;
    3fdc:	90                   	nop
    3fdd:	eb 01                	jmp    3fe0 <trts_handle_exception+0x4d3>
        goto default_handler;
    3fdf:	90                   	nop
    g_enclave_state = ENCLAVE_CRASHED;
    3fe0:	48 8d 05 3d 19 23 00 	lea    0x23193d(%rip),%rax        # 235924 <g_enclave_state>
    3fe7:	c7 00 03 00 00 00    	movl   $0x3,(%rax)
    return SGX_ERROR_ENCLAVE_CRASHED;
    3fed:	b8 06 10 00 00       	mov    $0x1006,%eax
}
    3ff2:	c9                   	leaveq 
    3ff3:	c3                   	retq   

0000000000003ff4 <get_xfeature_state>:
#define SE_OPTIMIZE_OFF
#endif

SE_OPTIMIZE_OFF
uint64_t get_xfeature_state()
{
    3ff4:	55                   	push   %rbp
    3ff5:	48 89 e5             	mov    %rsp,%rbp
    3ff8:	48 83 ec 10          	sub    $0x10,%rsp
    auto *report = sgx_self_report();
    3ffc:	e8 cd b4 02 00       	callq  2f4ce <sgx_self_report>
    4001:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    g_xsave_enabled = (report->body.attributes.xfrm == SGX_XFRM_LEGACY) ? 0 : 1;
    4005:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4009:	48 8b 40 38          	mov    0x38(%rax),%rax
    400d:	48 83 f8 03          	cmp    $0x3,%rax
    4011:	0f 95 c0             	setne  %al
    4014:	0f b6 c0             	movzbl %al,%eax
    4017:	89 05 0b 19 23 00    	mov    %eax,0x23190b(%rip)        # 235928 <g_xsave_enabled>
    uint64_t xfrm = report->body.attributes.xfrm;
    401d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4021:	48 8b 40 38          	mov    0x38(%rax),%rax
    4025:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#endif

    // no secrets in target_info, report_data, and report. no need to clear them before return
    // tlibc functions cannot be used before calling init_optimized_libs().

    return xfrm;
    4029:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    402d:	c9                   	leaveq 
    402e:	c3                   	retq   

000000000000402f <get_phdr>:

static int elf_tls_aligned_virtual_size(const void *enclave_base,
                            size_t *aligned_virtual_size);

static ElfW(Phdr)* get_phdr(const ElfW(Ehdr)* ehdr)
{
    402f:	55                   	push   %rbp
    4030:	48 89 e5             	mov    %rsp,%rbp
    4033:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if (ehdr == NULL)
    4037:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    403c:	75 07                	jne    4045 <get_phdr+0x16>
        return NULL;  /* Invalid image. */
    403e:	b8 00 00 00 00       	mov    $0x0,%eax
    4043:	eb 5a                	jmp    409f <get_phdr+0x70>

    /* Check the ElfW Magic number. */
    if ((ehdr->e_ident[EI_MAG0] != ELFMAG0) ||
    4045:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4049:	0f b6 00             	movzbl (%rax),%eax
    404c:	3c 7f                	cmp    $0x7f,%al
    404e:	75 24                	jne    4074 <get_phdr+0x45>
        (ehdr->e_ident[EI_MAG1] != ELFMAG1) ||
    4050:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4054:	0f b6 40 01          	movzbl 0x1(%rax),%eax
    if ((ehdr->e_ident[EI_MAG0] != ELFMAG0) ||
    4058:	3c 45                	cmp    $0x45,%al
    405a:	75 18                	jne    4074 <get_phdr+0x45>
        (ehdr->e_ident[EI_MAG2] != ELFMAG2) ||
    405c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4060:	0f b6 40 02          	movzbl 0x2(%rax),%eax
        (ehdr->e_ident[EI_MAG1] != ELFMAG1) ||
    4064:	3c 4c                	cmp    $0x4c,%al
    4066:	75 0c                	jne    4074 <get_phdr+0x45>
        (ehdr->e_ident[EI_MAG3] != ELFMAG3))
    4068:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    406c:	0f b6 40 03          	movzbl 0x3(%rax),%eax
        (ehdr->e_ident[EI_MAG2] != ELFMAG2) ||
    4070:	3c 46                	cmp    $0x46,%al
    4072:	74 07                	je     407b <get_phdr+0x4c>
        return NULL;
    4074:	b8 00 00 00 00       	mov    $0x0,%eax
    4079:	eb 24                	jmp    409f <get_phdr+0x70>

    /* Enclave image should be a shared object file. */
    if (ehdr->e_type != ET_DYN)
    407b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    407f:	0f b7 40 10          	movzwl 0x10(%rax),%eax
    4083:	66 83 f8 03          	cmp    $0x3,%ax
    4087:	74 07                	je     4090 <get_phdr+0x61>
        return NULL;
    4089:	b8 00 00 00 00       	mov    $0x0,%eax
    408e:	eb 0f                	jmp    409f <get_phdr+0x70>

    return GET_PTR(ElfW(Phdr), ehdr, ehdr->e_phoff);
    4090:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4094:	48 8b 50 20          	mov    0x20(%rax),%rdx
    4098:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    409c:	48 01 d0             	add    %rdx,%rax
}
    409f:	5d                   	pop    %rbp
    40a0:	c3                   	retq   

00000000000040a1 <get_sym>:

static ElfW(Sym)* get_sym(ElfW(Sym)* symtab, size_t idx)
{
    40a1:	55                   	push   %rbp
    40a2:	48 89 e5             	mov    %rsp,%rbp
    40a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    40a9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(STB_WEAK == ELFW(ST_BIND)(symtab[idx].st_info)
    40ad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    40b1:	48 89 d0             	mov    %rdx,%rax
    40b4:	48 01 c0             	add    %rax,%rax
    40b7:	48 01 d0             	add    %rdx,%rax
    40ba:	48 c1 e0 03          	shl    $0x3,%rax
    40be:	48 89 c2             	mov    %rax,%rdx
    40c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    40c5:	48 01 d0             	add    %rdx,%rax
    40c8:	0f b6 40 04          	movzbl 0x4(%rax),%eax
    40cc:	c0 e8 04             	shr    $0x4,%al
    40cf:	3c 02                	cmp    $0x2,%al
    40d1:	75 2b                	jne    40fe <get_sym+0x5d>
            && 0 == symtab[idx].st_value)
    40d3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    40d7:	48 89 d0             	mov    %rdx,%rax
    40da:	48 01 c0             	add    %rax,%rax
    40dd:	48 01 d0             	add    %rdx,%rax
    40e0:	48 c1 e0 03          	shl    $0x3,%rax
    40e4:	48 89 c2             	mov    %rax,%rdx
    40e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    40eb:	48 01 d0             	add    %rdx,%rax
    40ee:	48 8b 40 08          	mov    0x8(%rax),%rax
    40f2:	48 85 c0             	test   %rax,%rax
    40f5:	75 07                	jne    40fe <get_sym+0x5d>
    {
        return NULL;
    40f7:	b8 00 00 00 00       	mov    $0x0,%eax
    40fc:	eb 1b                	jmp    4119 <get_sym+0x78>
    }

    return &symtab[idx];
    40fe:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4102:	48 89 d0             	mov    %rdx,%rax
    4105:	48 01 c0             	add    %rax,%rax
    4108:	48 01 d0             	add    %rdx,%rax
    410b:	48 c1 e0 03          	shl    $0x3,%rax
    410f:	48 89 c2             	mov    %rax,%rdx
    4112:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4116:	48 01 d0             	add    %rdx,%rax
}
    4119:	5d                   	pop    %rbp
    411a:	c3                   	retq   

000000000000411b <do_relocs>:
/* Relocation for x64 (with addend) */
static int do_relocs(const ElfW(Addr) enclave_base,
        ElfW(Addr) rela_offset,
        ElfW(Addr) sym_offset,
        size_t nr_relocs)
{
    411b:	55                   	push   %rbp
    411c:	48 89 e5             	mov    %rsp,%rbp
    411f:	48 83 ec 60          	sub    $0x60,%rsp
    4123:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    4127:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    412b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    412f:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    4133:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    413a:	00 00 
    413c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4140:	31 c0                	xor    %eax,%eax
    ElfW(Rela)* rela = GET_PTR(ElfW(Rela), enclave_base, rela_offset);
    4142:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    4146:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    414a:	48 01 d0             	add    %rdx,%rax
    414d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    ElfW(Sym)*  symtab = GET_PTR(ElfW(Sym), enclave_base, sym_offset);
    4151:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    4155:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4159:	48 01 d0             	add    %rdx,%rax
    415c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ElfW(Sym)*  sym;
    size_t      i;
    size_t aligned_virtual_size = 0;
    4160:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    4167:	00 

    for (i = 0; i < nr_relocs; ++i, ++rela)
    4168:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    416f:	00 
    4170:	e9 a2 01 00 00       	jmpq   4317 <do_relocs+0x1fc>
    {
        ElfW(Addr)* reloc_addr = GET_PTR(ElfW(Addr), enclave_base, rela->r_offset);
    4175:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4179:	48 8b 10             	mov    (%rax),%rdx
    417c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    4180:	48 01 d0             	add    %rdx,%rax
    4183:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

        switch (ELF64_R_TYPE(rela->r_info))
    4187:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    418b:	48 8b 40 08          	mov    0x8(%rax),%rax
    418f:	89 c0                	mov    %eax,%eax
    4191:	48 83 f8 12          	cmp    $0x12,%rax
    4195:	0f 87 61 01 00 00    	ja     42fc <do_relocs+0x1e1>
    419b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    41a2:	00 
    41a3:	48 8d 05 7a bf 02 00 	lea    0x2bf7a(%rip),%rax        # 30124 <_ZZL16init_stack_guardPvE8__func__+0x14>
    41aa:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    41ad:	48 63 d0             	movslq %eax,%rdx
    41b0:	48 8d 05 6d bf 02 00 	lea    0x2bf6d(%rip),%rax        # 30124 <_ZZL16init_stack_guardPvE8__func__+0x14>
    41b7:	48 01 d0             	add    %rdx,%rax
    41ba:	ff e0                	jmpq   *%rax
        {
            case R_X86_64_RELATIVE:
                *reloc_addr = enclave_base + (uintptr_t)rela->r_addend;
    41bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    41c0:	48 8b 40 10          	mov    0x10(%rax),%rax
    41c4:	48 89 c2             	mov    %rax,%rdx
    41c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    41cb:	48 01 c2             	add    %rax,%rdx
    41ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    41d2:	48 89 10             	mov    %rdx,(%rax)
                break;
    41d5:	e9 33 01 00 00       	jmpq   430d <do_relocs+0x1f2>

            case R_X86_64_GLOB_DAT:
            case R_X86_64_JUMP_SLOT:
            case R_X86_64_64:
                sym = get_sym(symtab, ELF64_R_SYM(rela->r_info));
    41da:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    41de:	48 8b 40 08          	mov    0x8(%rax),%rax
    41e2:	48 c1 e8 20          	shr    $0x20,%rax
    41e6:	48 89 c2             	mov    %rax,%rdx
    41e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    41ed:	48 89 d6             	mov    %rdx,%rsi
    41f0:	48 89 c7             	mov    %rax,%rdi
    41f3:	e8 a9 fe ff ff       	callq  40a1 <get_sym>
    41f8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
                if(!sym)
    41fc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    4201:	0f 84 ff 00 00 00    	je     4306 <do_relocs+0x1eb>
                    break;
                *reloc_addr = enclave_base + sym->st_value + (uintptr_t)rela->r_addend;
    4207:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    420b:	48 8b 50 08          	mov    0x8(%rax),%rdx
    420f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    4213:	48 01 c2             	add    %rax,%rdx
    4216:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    421a:	48 8b 40 10          	mov    0x10(%rax),%rax
    421e:	48 01 c2             	add    %rax,%rdx
    4221:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4225:	48 89 10             	mov    %rdx,(%rax)
                break;
    4228:	e9 e0 00 00 00       	jmpq   430d <do_relocs+0x1f2>

            case R_X86_64_DTPMOD64:
                *reloc_addr = 1;
    422d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4231:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
                break;
    4238:	e9 d0 00 00 00       	jmpq   430d <do_relocs+0x1f2>
 
            case R_X86_64_DTPOFF64:
                sym = get_sym(symtab, ELF64_R_SYM(rela->r_info));
    423d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4241:	48 8b 40 08          	mov    0x8(%rax),%rax
    4245:	48 c1 e8 20          	shr    $0x20,%rax
    4249:	48 89 c2             	mov    %rax,%rdx
    424c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4250:	48 89 d6             	mov    %rdx,%rsi
    4253:	48 89 c7             	mov    %rax,%rdi
    4256:	e8 46 fe ff ff       	callq  40a1 <get_sym>
    425b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
                if(!sym)
    425f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    4264:	0f 84 9f 00 00 00    	je     4309 <do_relocs+0x1ee>
                    break;
                *reloc_addr = sym->st_value + (uintptr_t)rela->r_addend;
    426a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    426e:	48 8b 50 08          	mov    0x8(%rax),%rdx
    4272:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4276:	48 8b 40 10          	mov    0x10(%rax),%rax
    427a:	48 01 c2             	add    %rax,%rdx
    427d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4281:	48 89 10             	mov    %rdx,(%rax)
                break;
    4284:	e9 84 00 00 00       	jmpq   430d <do_relocs+0x1f2>

            case R_X86_64_TPOFF64:
                sym = get_sym(symtab, ELF64_R_SYM(rela->r_info));
    4289:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    428d:	48 8b 40 08          	mov    0x8(%rax),%rax
    4291:	48 c1 e8 20          	shr    $0x20,%rax
    4295:	48 89 c2             	mov    %rax,%rdx
    4298:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    429c:	48 89 d6             	mov    %rdx,%rsi
    429f:	48 89 c7             	mov    %rax,%rdi
    42a2:	e8 fa fd ff ff       	callq  40a1 <get_sym>
    42a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
                if(!sym)
    42ab:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    42b0:	74 5a                	je     430c <do_relocs+0x1f1>
                    break;

                if ((0 == elf_tls_aligned_virtual_size((void *)enclave_base, &aligned_virtual_size)) && (aligned_virtual_size))
    42b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    42b6:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    42ba:	48 89 d6             	mov    %rdx,%rsi
    42bd:	48 89 c7             	mov    %rax,%rdi
    42c0:	e8 4f 03 00 00       	callq  4614 <elf_tls_aligned_virtual_size>
    42c5:	85 c0                	test   %eax,%eax
    42c7:	75 2c                	jne    42f5 <do_relocs+0x1da>
    42c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    42cd:	48 85 c0             	test   %rax,%rax
    42d0:	74 23                	je     42f5 <do_relocs+0x1da>
                {
                    *reloc_addr = sym->st_value + (uintptr_t)rela->r_addend - aligned_virtual_size;
    42d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    42d6:	48 8b 50 08          	mov    0x8(%rax),%rdx
    42da:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    42de:	48 8b 40 10          	mov    0x10(%rax),%rax
    42e2:	48 01 c2             	add    %rax,%rdx
    42e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    42e9:	48 29 c2             	sub    %rax,%rdx
    42ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    42f0:	48 89 10             	mov    %rdx,(%rax)
                    break;
    42f3:	eb 18                	jmp    430d <do_relocs+0x1f2>
                }
                else
                    return -1;
    42f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    42fa:	eb 2e                	jmp    432a <do_relocs+0x20f>

            case R_X86_64_NONE:
                break;

            default:    /* unsupported relocs */
                return -1;
    42fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    4301:	eb 27                	jmp    432a <do_relocs+0x20f>
                break;
    4303:	90                   	nop
    4304:	eb 07                	jmp    430d <do_relocs+0x1f2>
                    break;
    4306:	90                   	nop
    4307:	eb 04                	jmp    430d <do_relocs+0x1f2>
                    break;
    4309:	90                   	nop
    430a:	eb 01                	jmp    430d <do_relocs+0x1f2>
                    break;
    430c:	90                   	nop
    for (i = 0; i < nr_relocs; ++i, ++rela)
    430d:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
    4312:	48 83 45 d0 18       	addq   $0x18,-0x30(%rbp)
    4317:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    431b:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
    431f:	0f 82 50 fe ff ff    	jb     4175 <do_relocs+0x5a>
        }
    }

    return 0;
    4325:	b8 00 00 00 00       	mov    $0x0,%eax
}
    432a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    432e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4335:	00 00 
    4337:	74 05                	je     433e <do_relocs+0x223>
    4339:	e8 5a 0c 00 00       	callq  4f98 <__stack_chk_fail>
    433e:	c9                   	leaveq 
    433f:	c3                   	retq   

0000000000004340 <relocate_enclave>:
 * it local symbol, so the code is like "fce3:	e8 98 12 00 00    call   10f80 <relocate_enclave>"
 * 0x9812=0x10f80-0xfce8
 */
__attribute__ ((visibility ("hidden")))
int relocate_enclave(void* enclave_base)
{
    4340:	55                   	push   %rbp
    4341:	48 89 e5             	mov    %rsp,%rbp
    4344:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
    4348:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    ElfW(Half) phnum = 0;
    434c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%rbp)
    ElfW(Ehdr) *ehdr = (ElfW(Ehdr)*)enclave_base;
    4353:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    4357:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ElfW(Phdr) *phdr = get_phdr(ehdr);
    435b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    435f:	48 89 c7             	mov    %rax,%rdi
    4362:	e8 c8 fc ff ff       	callq  402f <get_phdr>
    4367:	48 89 45 98          	mov    %rax,-0x68(%rbp)

    if (phdr == NULL)
    436b:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
    4370:	0f 85 c3 01 00 00    	jne    4539 <relocate_enclave+0x1f9>
        return -1;  /* Invalid image. */
    4376:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    437b:	e9 d2 01 00 00       	jmpq   4552 <relocate_enclave+0x212>

    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    {
        /* Search for dynamic segment */
        if (phdr->p_type == PT_DYNAMIC)
    4380:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    4384:	8b 00                	mov    (%rax),%eax
    4386:	83 f8 02             	cmp    $0x2,%eax
    4389:	0f 85 a1 01 00 00    	jne    4530 <relocate_enclave+0x1f0>
        {
            size_t      count;
            size_t      n_dyn = phdr->p_filesz/sizeof(ElfW(Dyn));
    438f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    4393:	48 8b 40 20          	mov    0x20(%rax),%rax
    4397:	48 c1 e8 04          	shr    $0x4,%rax
    439b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            ElfW(Dyn)   *dyn = GET_PTR(ElfW(Dyn), ehdr, phdr->p_paddr);
    439f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    43a3:	48 8b 50 18          	mov    0x18(%rax),%rdx
    43a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    43ab:	48 01 d0             	add    %rdx,%rax
    43ae:	48 89 45 a8          	mov    %rax,-0x58(%rbp)

            ElfW(Addr)   sym_offset = 0;
    43b2:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
    43b9:	00 
            ElfW(Addr)   rel_offset = 0;
    43ba:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    43c1:	00 
            ElfW(Addr)   plt_offset = 0;
    43c2:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
    43c9:	00 

            size_t   rel_total_sz = 0;
    43ca:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    43d1:	00 
            size_t   rel_entry_sz = 0;
    43d2:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    43d9:	00 
            size_t   plt_total_sz = 0;
    43da:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    43e1:	00 

            for (count = 0; count < n_dyn; count++, dyn++)
    43e2:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
    43e9:	00 
    43ea:	e9 9b 00 00 00       	jmpq   448a <relocate_enclave+0x14a>
            {
                if (dyn->d_tag == DT_NULL)  /* End */
    43ef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    43f3:	48 8b 00             	mov    (%rax),%rax
    43f6:	48 85 c0             	test   %rax,%rax
    43f9:	0f 84 9b 00 00 00    	je     449a <relocate_enclave+0x15a>
                    break;

                switch (dyn->d_tag)
    43ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4403:	48 8b 00             	mov    (%rax),%rax
    4406:	48 83 f8 17          	cmp    $0x17,%rax
    440a:	77 74                	ja     4480 <relocate_enclave+0x140>
    440c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    4413:	00 
    4414:	48 8d 05 55 bd 02 00 	lea    0x2bd55(%rip),%rax        # 30170 <_ZZL16init_stack_guardPvE8__func__+0x60>
    441b:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    441e:	48 63 d0             	movslq %eax,%rdx
    4421:	48 8d 05 48 bd 02 00 	lea    0x2bd48(%rip),%rax        # 30170 <_ZZL16init_stack_guardPvE8__func__+0x60>
    4428:	48 01 d0             	add    %rdx,%rax
    442b:	ff e0                	jmpq   *%rax
                {
                    case DT_SYMTAB: /* symbol table */
                        sym_offset = dyn->d_un.d_ptr;
    442d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4431:	48 8b 40 08          	mov    0x8(%rax),%rax
    4435:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
                        break;
    4439:	eb 45                	jmp    4480 <relocate_enclave+0x140>

                    case RTS_DT_REL:/* Rel (x86) or Rela (x64) relocs */
                        rel_offset = dyn->d_un.d_ptr;
    443b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    443f:	48 8b 40 08          	mov    0x8(%rax),%rax
    4443:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
                        break;
    4447:	eb 37                	jmp    4480 <relocate_enclave+0x140>

                    case RTS_DT_RELSZ:
                        rel_total_sz = dyn->d_un.d_val;
    4449:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    444d:	48 8b 40 08          	mov    0x8(%rax),%rax
    4451:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
                        break;
    4455:	eb 29                	jmp    4480 <relocate_enclave+0x140>

                    case RTS_DT_RELENT:
                        rel_entry_sz = dyn->d_un.d_val;
    4457:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    445b:	48 8b 40 08          	mov    0x8(%rax),%rax
    445f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
                        break;
    4463:	eb 1b                	jmp    4480 <relocate_enclave+0x140>

                    case DT_JMPREL: /* PLT relocs */
                        plt_offset = dyn->d_un.d_ptr;
    4465:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4469:	48 8b 40 08          	mov    0x8(%rax),%rax
    446d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
                        break;
    4471:	eb 0d                	jmp    4480 <relocate_enclave+0x140>

                    case DT_PLTRELSZ:
                        plt_total_sz = dyn->d_un.d_val;
    4473:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4477:	48 8b 40 08          	mov    0x8(%rax),%rax
    447b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
                        break;
    447f:	90                   	nop
            for (count = 0; count < n_dyn; count++, dyn++)
    4480:	48 83 45 a0 01       	addq   $0x1,-0x60(%rbp)
    4485:	48 83 45 a8 10       	addq   $0x10,-0x58(%rbp)
    448a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    448e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    4492:	0f 82 57 ff ff ff    	jb     43ef <relocate_enclave+0xaf>
    4498:	eb 01                	jmp    449b <relocate_enclave+0x15b>
                    break;
    449a:	90                   	nop
                }
            }

            DO_REL(enclave_base, rel_offset, sym_offset, rel_total_sz, rel_entry_sz);
    449b:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    44a0:	74 45                	je     44e7 <relocate_enclave+0x1a7>
    44a2:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    44a7:	75 0a                	jne    44b3 <relocate_enclave+0x173>
    44a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    44ae:	e9 9f 00 00 00       	jmpq   4552 <relocate_enclave+0x212>
    44b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    44b7:	ba 00 00 00 00       	mov    $0x0,%edx
    44bc:	48 f7 75 d0          	divq   -0x30(%rbp)
    44c0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    44c4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    44c8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    44cc:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    44d0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    44d4:	48 89 c7             	mov    %rax,%rdi
    44d7:	e8 3f fc ff ff       	callq  411b <do_relocs>
    44dc:	85 c0                	test   %eax,%eax
    44de:	74 07                	je     44e7 <relocate_enclave+0x1a7>
    44e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    44e5:	eb 6b                	jmp    4552 <relocate_enclave+0x212>
            DO_REL(enclave_base, plt_offset, sym_offset, plt_total_sz, rel_entry_sz);
    44e7:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    44ec:	74 42                	je     4530 <relocate_enclave+0x1f0>
    44ee:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    44f3:	75 07                	jne    44fc <relocate_enclave+0x1bc>
    44f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    44fa:	eb 56                	jmp    4552 <relocate_enclave+0x212>
    44fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4500:	ba 00 00 00 00       	mov    $0x0,%edx
    4505:	48 f7 75 d0          	divq   -0x30(%rbp)
    4509:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    450d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    4511:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    4515:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    4519:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    451d:	48 89 c7             	mov    %rax,%rdi
    4520:	e8 f6 fb ff ff       	callq  411b <do_relocs>
    4525:	85 c0                	test   %eax,%eax
    4527:	74 07                	je     4530 <relocate_enclave+0x1f0>
    4529:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    452e:	eb 22                	jmp    4552 <relocate_enclave+0x212>
    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    4530:	83 45 94 01          	addl   $0x1,-0x6c(%rbp)
    4534:	48 83 45 98 38       	addq   $0x38,-0x68(%rbp)
    4539:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    453d:	0f b7 40 38          	movzwl 0x38(%rax),%eax
    4541:	0f b7 c0             	movzwl %ax,%eax
    4544:	39 45 94             	cmp    %eax,-0x6c(%rbp)
    4547:	0f 82 33 fe ff ff    	jb     4380 <relocate_enclave+0x40>
        }
    }

    return 0;
    454d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    4552:	c9                   	leaveq 
    4553:	c3                   	retq   

0000000000004554 <elf_tls_info>:

int elf_tls_info(const void* enclave_base,
        uintptr_t *tls_addr, size_t *tdata_size)
{
    4554:	55                   	push   %rbp
    4555:	48 89 e5             	mov    %rsp,%rbp
    4558:	48 83 ec 38          	sub    $0x38,%rsp
    455c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4560:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4564:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    ElfW(Half) phnum = 0;
    4568:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    const ElfW(Ehdr) *ehdr = (const ElfW(Ehdr)*)enclave_base;
    456f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4573:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ElfW(Phdr) *phdr = get_phdr(ehdr);
    4577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    457b:	48 89 c7             	mov    %rax,%rdi
    457e:	e8 ac fa ff ff       	callq  402f <get_phdr>
    4583:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    if (!tls_addr || !tdata_size)
    4587:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    458c:	74 07                	je     4595 <elf_tls_info+0x41>
    458e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    4593:	75 07                	jne    459c <elf_tls_info+0x48>
        return -1;
    4595:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    459a:	eb 76                	jmp    4612 <elf_tls_info+0xbe>

    if (phdr == NULL)
    459c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    45a1:	75 07                	jne    45aa <elf_tls_info+0x56>
        return -1;  /* Invalid image. */
    45a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    45a8:	eb 68                	jmp    4612 <elf_tls_info+0xbe>

    /* Search for TLS segment */
    *tls_addr = 0;
    45aa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    45ae:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    *tdata_size = 0;
    45b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    45b9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    45c0:	eb 3b                	jmp    45fd <elf_tls_info+0xa9>
    {
        if (phdr->p_type == PT_TLS)
    45c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    45c6:	8b 00                	mov    (%rax),%eax
    45c8:	83 f8 07             	cmp    $0x7,%eax
    45cb:	75 27                	jne    45f4 <elf_tls_info+0xa0>
        {
            /* tls_addr here is got from the program header, the address
             * need to be added by the enclave base.
             */
            *tls_addr = (size_t)enclave_base + phdr->p_vaddr;
    45cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    45d1:	48 8b 50 10          	mov    0x10(%rax),%rdx
    45d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    45d9:	48 01 c2             	add    %rax,%rdx
    45dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    45e0:	48 89 10             	mov    %rdx,(%rax)
            *tdata_size = phdr->p_filesz;
    45e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    45e7:	48 8b 50 20          	mov    0x20(%rax),%rdx
    45eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    45ef:	48 89 10             	mov    %rdx,(%rax)
            break;
    45f2:	eb 19                	jmp    460d <elf_tls_info+0xb9>
    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    45f4:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
    45f8:	48 83 45 f0 38       	addq   $0x38,-0x10(%rbp)
    45fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4601:	0f b7 40 38          	movzwl 0x38(%rax),%eax
    4605:	0f b7 c0             	movzwl %ax,%eax
    4608:	39 45 ec             	cmp    %eax,-0x14(%rbp)
    460b:	72 b5                	jb     45c2 <elf_tls_info+0x6e>
        }
    }

    return 0;
    460d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    4612:	c9                   	leaveq 
    4613:	c3                   	retq   

0000000000004614 <elf_tls_aligned_virtual_size>:

static int elf_tls_aligned_virtual_size(const void *enclave_base,
                                        size_t *aligned_virtual_size)
{
    4614:	55                   	push   %rbp
    4615:	48 89 e5             	mov    %rsp,%rbp
    4618:	48 83 ec 40          	sub    $0x40,%rsp
    461c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    4620:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    ElfW(Half) phnum = 0;
    4624:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
    const ElfW(Ehdr) *ehdr = (const ElfW(Ehdr)*)enclave_base;
    462b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    462f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ElfW(Phdr) *phdr = get_phdr(ehdr);
    4633:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4637:	48 89 c7             	mov    %rax,%rdi
    463a:	e8 f0 f9 ff ff       	callq  402f <get_phdr>
    463f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    size_t virtual_size =0, align = 0;
    4643:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    464a:	00 
    464b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    4652:	00 

    if (phdr == NULL)
    4653:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    4658:	75 0a                	jne    4664 <elf_tls_aligned_virtual_size+0x50>
        return -1;
    465a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    465f:	e9 9c 00 00 00       	jmpq   4700 <elf_tls_aligned_virtual_size+0xec>

    if (!aligned_virtual_size)
    4664:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    4669:	75 0a                	jne    4675 <elf_tls_aligned_virtual_size+0x61>
        return -1;
    466b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    4670:	e9 8b 00 00 00       	jmpq   4700 <elf_tls_aligned_virtual_size+0xec>

    *aligned_virtual_size = 0;
    4675:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    4679:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    4680:	eb 69                	jmp    46eb <elf_tls_aligned_virtual_size+0xd7>
    {
        if (phdr->p_type == PT_TLS)
    4682:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4686:	8b 00                	mov    (%rax),%eax
    4688:	83 f8 07             	cmp    $0x7,%eax
    468b:	75 55                	jne    46e2 <elf_tls_aligned_virtual_size+0xce>
        {
            virtual_size = phdr->p_memsz;
    468d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4691:	48 8b 40 28          	mov    0x28(%rax),%rax
    4695:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
            align = phdr->p_align;
    4699:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    469d:	48 8b 40 30          	mov    0x30(%rax),%rax
    46a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

            /* p_align == 0 or p_align == 1 means no alignment is required */
            if (align == 0 || align == 1)
    46a5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    46aa:	74 07                	je     46b3 <elf_tls_aligned_virtual_size+0x9f>
    46ac:	48 83 7d f8 01       	cmpq   $0x1,-0x8(%rbp)
    46b1:	75 0d                	jne    46c0 <elf_tls_aligned_virtual_size+0xac>
                *aligned_virtual_size = virtual_size;
    46b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    46b7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    46bb:	48 89 10             	mov    %rdx,(%rax)
            else
                *aligned_virtual_size = (virtual_size + align - 1) & (~(align - 1));

            break;
    46be:	eb 3b                	jmp    46fb <elf_tls_aligned_virtual_size+0xe7>
                *aligned_virtual_size = (virtual_size + align - 1) & (~(align - 1));
    46c0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    46c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    46c8:	48 01 d0             	add    %rdx,%rax
    46cb:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    46cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    46d3:	48 f7 d8             	neg    %rax
    46d6:	48 21 c2             	and    %rax,%rdx
    46d9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    46dd:	48 89 10             	mov    %rdx,(%rax)
            break;
    46e0:	eb 19                	jmp    46fb <elf_tls_aligned_virtual_size+0xe7>
    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    46e2:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
    46e6:	48 83 45 e0 38       	addq   $0x38,-0x20(%rbp)
    46eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    46ef:	0f b7 40 38          	movzwl 0x38(%rax),%eax
    46f3:	0f b7 c0             	movzwl %ax,%eax
    46f6:	39 45 dc             	cmp    %eax,-0x24(%rbp)
    46f9:	72 87                	jb     4682 <elf_tls_aligned_virtual_size+0x6e>
        }
    }

    return 0;
    46fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
    4700:	c9                   	leaveq 
    4701:	c3                   	retq   

0000000000004702 <elf_get_init_array>:

int elf_get_init_array(const void* enclave_base,
        uintptr_t *init_array_addr, size_t *init_array_size)
{
    4702:	55                   	push   %rbp
    4703:	48 89 e5             	mov    %rsp,%rbp
    4706:	48 83 ec 48          	sub    $0x48,%rsp
    470a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    470e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    4712:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    ElfW(Half) phnum = 0;
    4716:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    const ElfW(Ehdr) *ehdr = (const ElfW(Ehdr)*)enclave_base;
    471d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4721:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ElfW(Phdr) *phdr = get_phdr(ehdr);
    4725:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4729:	48 89 c7             	mov    %rax,%rdi
    472c:	e8 fe f8 ff ff       	callq  402f <get_phdr>
    4731:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    if (!init_array_addr || !init_array_size)
    4735:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    473a:	74 07                	je     4743 <elf_get_init_array+0x41>
    473c:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    4741:	75 0a                	jne    474d <elf_get_init_array+0x4b>
        return -1;
    4743:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    4748:	e9 d0 00 00 00       	jmpq   481d <elf_get_init_array+0x11b>

    if (phdr == NULL)
    474d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    4752:	75 0a                	jne    475e <elf_get_init_array+0x5c>
        return -1;  /* Invalid image. */
    4754:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    4759:	e9 bf 00 00 00       	jmpq   481d <elf_get_init_array+0x11b>

    *init_array_addr = 0;
    475e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    4762:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    *init_array_size = 0;
    4769:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    476d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)

    /* Search for Dynamic segment */
    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    4774:	e9 8b 00 00 00       	jmpq   4804 <elf_get_init_array+0x102>
    {
        if (phdr->p_type == PT_DYNAMIC)
    4779:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    477d:	8b 00                	mov    (%rax),%eax
    477f:	83 f8 02             	cmp    $0x2,%eax
    4782:	75 77                	jne    47fb <elf_get_init_array+0xf9>
        {
            size_t      count;
            size_t      n_dyn = phdr->p_filesz/sizeof(ElfW(Dyn));
    4784:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4788:	48 8b 40 20          	mov    0x20(%rax),%rax
    478c:	48 c1 e8 04          	shr    $0x4,%rax
    4790:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            ElfW(Dyn)   *dyn = GET_PTR(ElfW(Dyn), ehdr, phdr->p_paddr);
    4794:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4798:	48 8b 50 18          	mov    0x18(%rax),%rdx
    479c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    47a0:	48 01 d0             	add    %rdx,%rax
    47a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            
            for (count = 0; count < n_dyn; count++, dyn++)
    47a7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    47ae:	00 
    47af:	eb 40                	jmp    47f1 <elf_get_init_array+0xef>
            {
                switch (dyn->d_tag)
    47b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    47b5:	48 8b 00             	mov    (%rax),%rax
    47b8:	48 83 f8 19          	cmp    $0x19,%rax
    47bc:	74 08                	je     47c6 <elf_get_init_array+0xc4>
    47be:	48 83 f8 1b          	cmp    $0x1b,%rax
    47c2:	74 13                	je     47d7 <elf_get_init_array+0xd5>
    47c4:	eb 21                	jmp    47e7 <elf_get_init_array+0xe5>
                {
                    case DT_INIT_ARRAY:
                        *init_array_addr = dyn->d_un.d_ptr;
    47c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    47ca:	48 8b 50 08          	mov    0x8(%rax),%rdx
    47ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    47d2:	48 89 10             	mov    %rdx,(%rax)
                        break;
    47d5:	eb 10                	jmp    47e7 <elf_get_init_array+0xe5>
                    case DT_INIT_ARRAYSZ:
                        *init_array_size = dyn->d_un.d_val;
    47d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    47db:	48 8b 50 08          	mov    0x8(%rax),%rdx
    47df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    47e3:	48 89 10             	mov    %rdx,(%rax)
                        break;
    47e6:	90                   	nop
            for (count = 0; count < n_dyn; count++, dyn++)
    47e7:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    47ec:	48 83 45 e8 10       	addq   $0x10,-0x18(%rbp)
    47f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    47f5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    47f9:	72 b6                	jb     47b1 <elf_get_init_array+0xaf>
    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    47fb:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
    47ff:	48 83 45 d8 38       	addq   $0x38,-0x28(%rbp)
    4804:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4808:	0f b7 40 38          	movzwl 0x38(%rax),%eax
    480c:	0f b7 c0             	movzwl %ax,%eax
    480f:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
    4812:	0f 82 61 ff ff ff    	jb     4779 <elf_get_init_array+0x77>
                }
            }
        }
    }

    return 0;
    4818:	b8 00 00 00 00       	mov    $0x0,%eax
}
    481d:	c9                   	leaveq 
    481e:	c3                   	retq   

000000000000481f <elf_get_uninit_array>:

int elf_get_uninit_array(const void* enclave_base,
        uintptr_t *uninit_array_addr, size_t *uninit_array_size)
{
    481f:	55                   	push   %rbp
    4820:	48 89 e5             	mov    %rsp,%rbp
    4823:	48 83 ec 48          	sub    $0x48,%rsp
    4827:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    482b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    482f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    ElfW(Half) phnum = 0;
    4833:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    const ElfW(Ehdr) *ehdr = (const ElfW(Ehdr)*)enclave_base;
    483a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    483e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ElfW(Phdr) *phdr = get_phdr(ehdr);
    4842:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4846:	48 89 c7             	mov    %rax,%rdi
    4849:	e8 e1 f7 ff ff       	callq  402f <get_phdr>
    484e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    if (!uninit_array_addr || !uninit_array_size)
    4852:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    4857:	74 07                	je     4860 <elf_get_uninit_array+0x41>
    4859:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    485e:	75 0a                	jne    486a <elf_get_uninit_array+0x4b>
        return -1;
    4860:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    4865:	e9 d0 00 00 00       	jmpq   493a <elf_get_uninit_array+0x11b>

    if (phdr == NULL)
    486a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    486f:	75 0a                	jne    487b <elf_get_uninit_array+0x5c>
        return -1;  /* Invalid image. */
    4871:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    4876:	e9 bf 00 00 00       	jmpq   493a <elf_get_uninit_array+0x11b>

    *uninit_array_addr = 0;
    487b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    487f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    *uninit_array_size = 0;
    4886:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    488a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)

    /* Search for Dynamic segment */
    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    4891:	e9 8b 00 00 00       	jmpq   4921 <elf_get_uninit_array+0x102>
    {
        if (phdr->p_type == PT_DYNAMIC)
    4896:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    489a:	8b 00                	mov    (%rax),%eax
    489c:	83 f8 02             	cmp    $0x2,%eax
    489f:	75 77                	jne    4918 <elf_get_uninit_array+0xf9>
        {
            size_t      count;
            size_t      n_dyn = phdr->p_filesz/sizeof(ElfW(Dyn));
    48a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    48a5:	48 8b 40 20          	mov    0x20(%rax),%rax
    48a9:	48 c1 e8 04          	shr    $0x4,%rax
    48ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            ElfW(Dyn)   *dyn = GET_PTR(ElfW(Dyn), ehdr, phdr->p_paddr);
    48b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    48b5:	48 8b 50 18          	mov    0x18(%rax),%rdx
    48b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    48bd:	48 01 d0             	add    %rdx,%rax
    48c0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

            for (count = 0; count < n_dyn; count++, dyn++)
    48c4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    48cb:	00 
    48cc:	eb 40                	jmp    490e <elf_get_uninit_array+0xef>
            {
                switch (dyn->d_tag)
    48ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    48d2:	48 8b 00             	mov    (%rax),%rax
    48d5:	48 83 f8 1a          	cmp    $0x1a,%rax
    48d9:	74 08                	je     48e3 <elf_get_uninit_array+0xc4>
    48db:	48 83 f8 1c          	cmp    $0x1c,%rax
    48df:	74 13                	je     48f4 <elf_get_uninit_array+0xd5>
    48e1:	eb 21                	jmp    4904 <elf_get_uninit_array+0xe5>
                {
                    case DT_FINI_ARRAY:
                        *uninit_array_addr = dyn->d_un.d_ptr;
    48e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    48e7:	48 8b 50 08          	mov    0x8(%rax),%rdx
    48eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    48ef:	48 89 10             	mov    %rdx,(%rax)
                        break;
    48f2:	eb 10                	jmp    4904 <elf_get_uninit_array+0xe5>
                    case DT_FINI_ARRAYSZ:
                        *uninit_array_size = dyn->d_un.d_val;
    48f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    48f8:	48 8b 50 08          	mov    0x8(%rax),%rdx
    48fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    4900:	48 89 10             	mov    %rdx,(%rax)
                        break;
    4903:	90                   	nop
            for (count = 0; count < n_dyn; count++, dyn++)
    4904:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    4909:	48 83 45 e8 10       	addq   $0x10,-0x18(%rbp)
    490e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4912:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    4916:	72 b6                	jb     48ce <elf_get_uninit_array+0xaf>
    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    4918:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
    491c:	48 83 45 d8 38       	addq   $0x38,-0x28(%rbp)
    4921:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4925:	0f b7 40 38          	movzwl 0x38(%rax),%eax
    4929:	0f b7 c0             	movzwl %ax,%eax
    492c:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
    492f:	0f 82 61 ff ff ff    	jb     4896 <elf_get_uninit_array+0x77>
                }
            }
        }
    }

    return 0;
    4935:	b8 00 00 00 00       	mov    $0x0,%eax
}
    493a:	c9                   	leaveq 
    493b:	c3                   	retq   

000000000000493c <has_text_relo>:

static int has_text_relo(const ElfW(Ehdr) *ehdr, const ElfW(Phdr) *phdr, ElfW(Half) phnum)
{
    493c:	55                   	push   %rbp
    493d:	48 89 e5             	mov    %rsp,%rbp
    4940:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4944:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4948:	89 55 cc             	mov    %edx,-0x34(%rbp)
    ElfW(Half) phi = 0;
    494b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
    int text_relo = 0;
    4952:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)

    for (; phi < phnum; phi++, phdr++)
    4959:	eb 7c                	jmp    49d7 <has_text_relo+0x9b>
    {
        if (phdr->p_type == PT_DYNAMIC)
    495b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    495f:	8b 00                	mov    (%rax),%eax
    4961:	83 f8 02             	cmp    $0x2,%eax
    4964:	75 68                	jne    49ce <has_text_relo+0x92>
        {
            size_t count;
            size_t n_dyn = phdr->p_filesz/sizeof(ElfW(Dyn));
    4966:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    496a:	48 8b 40 20          	mov    0x20(%rax),%rax
    496e:	48 c1 e8 04          	shr    $0x4,%rax
    4972:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            ElfW(Dyn) *dyn = GET_PTR(ElfW(Dyn), ehdr, phdr->p_paddr);
    4976:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    497a:	48 8b 50 18          	mov    0x18(%rax),%rdx
    497e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4982:	48 01 d0             	add    %rdx,%rax
    4985:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

            for (count = 0; count < n_dyn; count++, dyn++)
    4989:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    4990:	00 
    4991:	eb 2c                	jmp    49bf <has_text_relo+0x83>
            {
                if (dyn->d_tag == DT_NULL)
    4993:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4997:	48 8b 00             	mov    (%rax),%rax
    499a:	48 85 c0             	test   %rax,%rax
    499d:	74 2c                	je     49cb <has_text_relo+0x8f>
                    break;

                if (dyn->d_tag == DT_TEXTREL)
    499f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    49a3:	48 8b 00             	mov    (%rax),%rax
    49a6:	48 83 f8 16          	cmp    $0x16,%rax
    49aa:	75 09                	jne    49b5 <has_text_relo+0x79>
                {
                    text_relo = 1;
    49ac:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
                    break;
    49b3:	eb 17                	jmp    49cc <has_text_relo+0x90>
            for (count = 0; count < n_dyn; count++, dyn++)
    49b5:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    49ba:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
    49bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    49c3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    49c7:	72 ca                	jb     4993 <has_text_relo+0x57>
                }
            }
            break;
    49c9:	eb 18                	jmp    49e3 <has_text_relo+0xa7>
                    break;
    49cb:	90                   	nop
            break;
    49cc:	eb 15                	jmp    49e3 <has_text_relo+0xa7>
    for (; phi < phnum; phi++, phdr++)
    49ce:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
    49d2:	48 83 45 d0 38       	addq   $0x38,-0x30(%rbp)
    49d7:	8b 45 e0             	mov    -0x20(%rbp),%eax
    49da:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    49dd:	0f 82 78 ff ff ff    	jb     495b <has_text_relo+0x1f>
        }
    }
    return text_relo;
    49e3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
}
    49e6:	5d                   	pop    %rbp
    49e7:	c3                   	retq   

00000000000049e8 <change_protection>:

sgx_status_t change_protection(void *enclave_base)
{
    49e8:	55                   	push   %rbp
    49e9:	48 89 e5             	mov    %rsp,%rbp
    49ec:	48 83 ec 60          	sub    $0x60,%rsp
    49f0:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    ElfW(Half) phnum = 0;
    49f4:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
    const ElfW(Ehdr) *ehdr = (const ElfW(Ehdr)*)enclave_base;
    49fb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    49ff:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    const ElfW(Phdr) *phdr = get_phdr(ehdr);
    4a03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4a07:	48 89 c7             	mov    %rax,%rdi
    4a0a:	e8 20 f6 ff ff       	callq  402f <get_phdr>
    4a0f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    uint64_t perms;
    sgx_status_t status = SGX_ERROR_UNEXPECTED;
    4a13:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)

    if (phdr == NULL)
    4a1a:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    4a1f:	75 08                	jne    4a29 <change_protection+0x41>
        return status;
    4a21:	8b 45 c0             	mov    -0x40(%rbp),%eax
    4a24:	e9 aa 01 00 00       	jmpq   4bd3 <change_protection+0x1eb>

    int text_relocation = has_text_relo(ehdr, phdr, ehdr->e_phnum);
    4a29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4a2d:	0f b7 40 38          	movzwl 0x38(%rax),%eax
    4a31:	0f b7 d0             	movzwl %ax,%edx
    4a34:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    4a38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4a3c:	48 89 ce             	mov    %rcx,%rsi
    4a3f:	48 89 c7             	mov    %rax,%rdi
    4a42:	e8 f5 fe ff ff       	callq  493c <has_text_relo>
    4a47:	89 45 c4             	mov    %eax,-0x3c(%rbp)

    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    4a4a:	e9 6b 01 00 00       	jmpq   4bba <change_protection+0x1d2>
    {
        if (text_relocation && (phdr->p_type == PT_LOAD) && ((phdr->p_flags & PF_W) == 0))
    4a4f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
    4a53:	0f 84 c7 00 00 00    	je     4b20 <change_protection+0x138>
    4a59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4a5d:	8b 00                	mov    (%rax),%eax
    4a5f:	83 f8 01             	cmp    $0x1,%eax
    4a62:	0f 85 b8 00 00 00    	jne    4b20 <change_protection+0x138>
    4a68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4a6c:	8b 40 04             	mov    0x4(%rax),%eax
    4a6f:	83 e0 02             	and    $0x2,%eax
    4a72:	85 c0                	test   %eax,%eax
    4a74:	0f 85 a6 00 00 00    	jne    4b20 <change_protection+0x138>
        {
            perms = 0;
    4a7a:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    4a81:	00 
            size_t start = (size_t)enclave_base + (phdr->p_vaddr & (size_t)(~(SE_PAGE_SIZE-1)));
    4a82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4a86:	48 8b 40 10          	mov    0x10(%rax),%rax
    4a8a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    4a90:	48 89 c2             	mov    %rax,%rdx
    4a93:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4a97:	48 01 d0             	add    %rdx,%rax
    4a9a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            size_t end = (size_t)enclave_base + ((phdr->p_vaddr + phdr->p_memsz + SE_PAGE_SIZE - 1) & (size_t)(~(SE_PAGE_SIZE-1)));
    4a9e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4aa2:	48 8b 50 10          	mov    0x10(%rax),%rdx
    4aa6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4aaa:	48 8b 40 28          	mov    0x28(%rax),%rax
    4aae:	48 01 d0             	add    %rdx,%rax
    4ab1:	48 05 ff 0f 00 00    	add    $0xfff,%rax
    4ab7:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    4abd:	48 89 c2             	mov    %rax,%rdx
    4ac0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4ac4:	48 01 d0             	add    %rdx,%rax
    4ac7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

            if (phdr->p_flags & PF_R)
    4acb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4acf:	8b 40 04             	mov    0x4(%rax),%eax
    4ad2:	83 e0 04             	and    $0x4,%eax
    4ad5:	85 c0                	test   %eax,%eax
    4ad7:	74 05                	je     4ade <change_protection+0xf6>
                perms |= SI_FLAG_R;
    4ad9:	48 83 4d d0 01       	orq    $0x1,-0x30(%rbp)
            if (phdr->p_flags & PF_X)
    4ade:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4ae2:	8b 40 04             	mov    0x4(%rax),%eax
    4ae5:	83 e0 01             	and    $0x1,%eax
    4ae8:	85 c0                	test   %eax,%eax
    4aea:	74 05                	je     4af1 <change_protection+0x109>
                perms |= SI_FLAG_X;
    4aec:	48 83 4d d0 04       	orq    $0x4,-0x30(%rbp)

            if((status = trts_mprotect(start, end - start, perms)) != SGX_SUCCESS)
    4af1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4af5:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
    4af9:	48 89 c1             	mov    %rax,%rcx
    4afc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    4b00:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4b04:	48 89 ce             	mov    %rcx,%rsi
    4b07:	48 89 c7             	mov    %rax,%rdi
    4b0a:	e8 12 e0 ff ff       	callq  2b21 <trts_mprotect>
    4b0f:	89 45 c0             	mov    %eax,-0x40(%rbp)
    4b12:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
    4b16:	74 08                	je     4b20 <change_protection+0x138>
                return status;
    4b18:	8b 45 c0             	mov    -0x40(%rbp),%eax
    4b1b:	e9 b3 00 00 00       	jmpq   4bd3 <change_protection+0x1eb>
        }

        if (phdr->p_type == PT_GNU_RELRO)
    4b20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b24:	8b 00                	mov    (%rax),%eax
    4b26:	3d 52 e5 74 64       	cmp    $0x6474e552,%eax
    4b2b:	0f 85 80 00 00 00    	jne    4bb1 <change_protection+0x1c9>
        {
            size_t start = (size_t)enclave_base + (phdr->p_vaddr & (size_t)(~(SE_PAGE_SIZE-1)));
    4b31:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b35:	48 8b 40 10          	mov    0x10(%rax),%rax
    4b39:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    4b3f:	48 89 c2             	mov    %rax,%rdx
    4b42:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4b46:	48 01 d0             	add    %rdx,%rax
    4b49:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
            size_t end = (size_t)enclave_base + ((phdr->p_vaddr + phdr->p_memsz + SE_PAGE_SIZE - 1) & (size_t)(~(SE_PAGE_SIZE-1)));
    4b4d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b51:	48 8b 50 10          	mov    0x10(%rax),%rdx
    4b55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4b59:	48 8b 40 28          	mov    0x28(%rax),%rax
    4b5d:	48 01 d0             	add    %rdx,%rax
    4b60:	48 05 ff 0f 00 00    	add    $0xfff,%rax
    4b66:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    4b6c:	48 89 c2             	mov    %rax,%rdx
    4b6f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4b73:	48 01 d0             	add    %rdx,%rax
    4b76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            if ((start != end) &&
    4b7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b7e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    4b82:	74 2d                	je     4bb1 <change_protection+0x1c9>
                    (status = trts_mprotect(start, end - start, SI_FLAG_R)) != SGX_SUCCESS)
    4b84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4b88:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    4b8c:	48 89 c1             	mov    %rax,%rcx
            if ((start != end) &&
    4b8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b93:	ba 01 00 00 00       	mov    $0x1,%edx
    4b98:	48 89 ce             	mov    %rcx,%rsi
    4b9b:	48 89 c7             	mov    %rax,%rdi
    4b9e:	e8 7e df ff ff       	callq  2b21 <trts_mprotect>
    4ba3:	89 45 c0             	mov    %eax,-0x40(%rbp)
    4ba6:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
    4baa:	74 05                	je     4bb1 <change_protection+0x1c9>
                return status;
    4bac:	8b 45 c0             	mov    -0x40(%rbp),%eax
    4baf:	eb 22                	jmp    4bd3 <change_protection+0x1eb>
    for (; phnum < ehdr->e_phnum; phnum++, phdr++)
    4bb1:	83 45 bc 01          	addl   $0x1,-0x44(%rbp)
    4bb5:	48 83 45 c8 38       	addq   $0x38,-0x38(%rbp)
    4bba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4bbe:	0f b7 40 38          	movzwl 0x38(%rax),%eax
    4bc2:	0f b7 c0             	movzwl %ax,%eax
    4bc5:	39 45 bc             	cmp    %eax,-0x44(%rbp)
    4bc8:	0f 82 81 fe ff ff    	jb     4a4f <change_protection+0x67>
        }
    }

    return SGX_SUCCESS;
    4bce:	b8 00 00 00 00       	mov    $0x0,%eax
}
    4bd3:	c9                   	leaveq 
    4bd4:	c3                   	retq   

0000000000004bd5 <__cxa_atexit>:

/* required by global constructor when -fuse-cxa-atexit is enabled */
void *__dso_handle __attribute__((weak)) = &(__dso_handle);

int __cxa_atexit(void (*fun)(void *), void *para, void *dso)
{
    4bd5:	55                   	push   %rbp
    4bd6:	48 89 e5             	mov    %rsp,%rbp
    4bd9:	48 83 ec 40          	sub    $0x40,%rsp
    4bdd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4be1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    4be5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    4be9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4bf0:	00 00 
    4bf2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4bf6:	31 c0                	xor    %eax,%eax
    if(unlikely(g_exit_function_cookie == 0))
    4bf8:	48 8b 05 81 0d 23 00 	mov    0x230d81(%rip),%rax        # 235980 <g_exit_function_cookie>
    4bff:	48 85 c0             	test   %rax,%rax
    4c02:	0f 94 c0             	sete   %al
    4c05:	0f b6 c0             	movzbl %al,%eax
    4c08:	48 85 c0             	test   %rax,%rax
    4c0b:	74 5f                	je     4c6c <__cxa_atexit+0x97>
    {
        uintptr_t rand = 0;
    4c0d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    4c14:	00 
        do
        {
            if(SGX_SUCCESS != sgx_read_rand((unsigned char *)&rand, sizeof(rand)))
    4c15:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    4c19:	be 08 00 00 00       	mov    $0x8,%esi
    4c1e:	48 89 c7             	mov    %rax,%rdi
    4c21:	e8 b0 c3 ff ff       	callq  fd6 <sgx_read_rand>
    4c26:	85 c0                	test   %eax,%eax
    4c28:	74 0a                	je     4c34 <__cxa_atexit+0x5f>
            {
                return -1;
    4c2a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    4c2f:	e9 e1 00 00 00       	jmpq   4d15 <__cxa_atexit+0x140>
            }
        } while(rand == 0);
    4c34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c38:	48 85 c0             	test   %rax,%rax
    4c3b:	74 d8                	je     4c15 <__cxa_atexit+0x40>

        sgx_spin_lock(&g_exit_function_lock);
    4c3d:	48 8d 3d 34 0d 23 00 	lea    0x230d34(%rip),%rdi        # 235978 <g_exit_function_lock>
    4c44:	e8 71 a2 00 00       	callq  eeba <sgx_spin_lock>
        if(g_exit_function_cookie == 0)
    4c49:	48 8b 05 30 0d 23 00 	mov    0x230d30(%rip),%rax        # 235980 <g_exit_function_cookie>
    4c50:	48 85 c0             	test   %rax,%rax
    4c53:	75 0b                	jne    4c60 <__cxa_atexit+0x8b>
        {
            g_exit_function_cookie = rand;
    4c55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c59:	48 89 05 20 0d 23 00 	mov    %rax,0x230d20(%rip)        # 235980 <g_exit_function_cookie>
        }

        sgx_spin_unlock(&g_exit_function_lock);
    4c60:	48 8d 3d 11 0d 23 00 	lea    0x230d11(%rip),%rdi        # 235978 <g_exit_function_lock>
    4c67:	e8 b5 a2 00 00       	callq  ef21 <sgx_spin_unlock>
    }

    if(!sgx_is_within_enclave(fun, 0))
    4c6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4c70:	be 00 00 00 00       	mov    $0x0,%esi
    4c75:	48 89 c7             	mov    %rax,%rdi
    4c78:	e8 93 c0 ff ff       	callq  d10 <sgx_is_within_enclave>
    4c7d:	85 c0                	test   %eax,%eax
    4c7f:	75 0a                	jne    4c8b <__cxa_atexit+0xb6>
    {
        return -1;
    4c81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    4c86:	e9 8a 00 00 00       	jmpq   4d15 <__cxa_atexit+0x140>
    }

    exit_function_t *exit_function = (exit_function_t *)malloc(sizeof(exit_function_t));
    4c8b:	bf 20 00 00 00       	mov    $0x20,%edi
    4c90:	e8 90 64 00 00       	callq  b125 <dlmalloc>
    4c95:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(!exit_function)
    4c99:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    4c9e:	75 07                	jne    4ca7 <__cxa_atexit+0xd2>
    {
        return -1;
    4ca0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    4ca5:	eb 6e                	jmp    4d15 <__cxa_atexit+0x140>
    }

    exit_function->cxa.fun = ENC_CXA_FUNC_POINTER(fun);
    4ca7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    4cab:	48 8b 05 ce 0c 23 00 	mov    0x230cce(%rip),%rax        # 235980 <g_exit_function_cookie>
    4cb2:	48 31 c2             	xor    %rax,%rdx
    4cb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4cb9:	48 89 10             	mov    %rdx,(%rax)
    exit_function->cxa.para = ENC_CXA_PARA_POINTER(para);
    4cbc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    4cc0:	48 8b 05 b9 0c 23 00 	mov    0x230cb9(%rip),%rax        # 235980 <g_exit_function_cookie>
    4cc7:	48 31 c2             	xor    %rax,%rdx
    4cca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4cce:	48 89 50 08          	mov    %rdx,0x8(%rax)
    exit_function->cxa.dso_handle = dso;
    4cd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4cd6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    4cda:	48 89 50 10          	mov    %rdx,0x10(%rax)

    sgx_spin_lock(&g_exit_function_lock);
    4cde:	48 8d 3d 93 0c 23 00 	lea    0x230c93(%rip),%rdi        # 235978 <g_exit_function_lock>
    4ce5:	e8 d0 a1 00 00       	callq  eeba <sgx_spin_lock>
    exit_function->next = g_exit_function;
    4cea:	48 8b 15 7f 0c 23 00 	mov    0x230c7f(%rip),%rdx        # 235970 <g_exit_function>
    4cf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4cf5:	48 89 50 18          	mov    %rdx,0x18(%rax)
    g_exit_function = exit_function;
    4cf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4cfd:	48 89 05 6c 0c 23 00 	mov    %rax,0x230c6c(%rip)        # 235970 <g_exit_function>
    sgx_spin_unlock(&g_exit_function_lock);
    4d04:	48 8d 3d 6d 0c 23 00 	lea    0x230c6d(%rip),%rdi        # 235978 <g_exit_function_lock>
    4d0b:	e8 11 a2 00 00       	callq  ef21 <sgx_spin_unlock>

    return 0;
    4d10:	b8 00 00 00 00       	mov    $0x0,%eax
}
    4d15:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    4d19:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4d20:	00 00 
    4d22:	74 05                	je     4d29 <__cxa_atexit+0x154>
    4d24:	e8 6f 02 00 00       	callq  4f98 <__stack_chk_fail>
    4d29:	c9                   	leaveq 
    4d2a:	c3                   	retq   

0000000000004d2b <atexit>:

int atexit(void (*fun)(void))
{
    4d2b:	55                   	push   %rbp
    4d2c:	48 89 e5             	mov    %rsp,%rbp
    4d2f:	48 83 ec 10          	sub    $0x10,%rsp
    4d33:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return __cxa_atexit((void (*)(void *))fun, NULL, __dso_handle);
    4d37:	48 8b 15 f2 02 23 00 	mov    0x2302f2(%rip),%rdx        # 235030 <__dso_handle>
    4d3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4d42:	be 00 00 00 00       	mov    $0x0,%esi
    4d47:	48 89 c7             	mov    %rax,%rdi
    4d4a:	e8 86 fe ff ff       	callq  4bd5 <__cxa_atexit>
}
    4d4f:	c9                   	leaveq 
    4d50:	c3                   	retq   

0000000000004d51 <do_atexit_aux>:

static void do_atexit_aux(void)
{
    4d51:	55                   	push   %rbp
    4d52:	48 89 e5             	mov    %rsp,%rbp
    4d55:	48 83 ec 20          	sub    $0x20,%rsp
    exit_function_t *exit_function = g_exit_function;
    4d59:	48 8b 05 10 0c 23 00 	mov    0x230c10(%rip),%rax        # 235970 <g_exit_function>
    4d60:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    g_exit_function = NULL;
    4d64:	48 c7 05 01 0c 23 00 	movq   $0x0,0x230c01(%rip)        # 235970 <g_exit_function>
    4d6b:	00 00 00 00 

    while (exit_function != NULL)
    4d6f:	eb 58                	jmp    4dc9 <do_atexit_aux+0x78>
    {
        cxa_function_t cxa_func = DEC_CXA_FUNC_POINTER(exit_function->cxa.fun);
    4d71:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4d75:	48 8b 10             	mov    (%rax),%rdx
    4d78:	48 8b 05 01 0c 23 00 	mov    0x230c01(%rip),%rax        # 235980 <g_exit_function_cookie>
    4d7f:	48 31 d0             	xor    %rdx,%rax
    4d82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        void *para = DEC_CXA_PARA_POINTER(exit_function->cxa.para);
    4d86:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4d8a:	48 8b 50 08          	mov    0x8(%rax),%rdx
    4d8e:	48 8b 05 eb 0b 23 00 	mov    0x230beb(%rip),%rax        # 235980 <g_exit_function_cookie>
    4d95:	48 31 d0             	xor    %rdx,%rax
    4d98:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        cxa_func(para);
    4d9c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4da0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4da4:	48 89 d7             	mov    %rdx,%rdi
    4da7:	ff d0                	callq  *%rax

        exit_function_t *tmp = exit_function;
    4da9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4dad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        exit_function = exit_function->next;
    4db1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4db5:	48 8b 40 18          	mov    0x18(%rax),%rax
    4db9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        free(tmp);
    4dbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4dc1:	48 89 c7             	mov    %rax,%rdi
    4dc4:	e8 53 6e 00 00       	callq  bc1c <dlfree>
    while (exit_function != NULL)
    4dc9:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    4dce:	75 a1                	jne    4d71 <do_atexit_aux+0x20>
    }
}
    4dd0:	90                   	nop
    4dd1:	c9                   	leaveq 
    4dd2:	c3                   	retq   

0000000000004dd3 <do_ctors_aux>:

/* auxiliary routines */
static void do_ctors_aux(void)
{
    4dd3:	55                   	push   %rbp
    4dd4:	48 89 e5             	mov    %rsp,%rbp
    4dd7:	48 83 ec 40          	sub    $0x40,%rsp
    4ddb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4de2:	00 00 
    4de4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4de8:	31 c0                	xor    %eax,%eax
    /* SGX RTS does not support .ctors currently */
   
    fp_t *p = NULL;
    4dea:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4df1:	00 
    uintptr_t init_array_addr = 0;
    4df2:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    4df9:	00 
    size_t init_array_size = 0;
    4dfa:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    4e01:	00 
    const void *enclave_start = (const void*)&__ImageBase;
    4e02:	48 8d 05 f7 b1 ff ff 	lea    -0x4e09(%rip),%rax        # 0 <enclave.so>
    4e09:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    if (0 != elf_get_init_array(enclave_start, &init_array_addr, &init_array_size)|| init_array_addr == 0 || init_array_size == 0)
    4e0d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4e11:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    4e15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4e19:	48 89 ce             	mov    %rcx,%rsi
    4e1c:	48 89 c7             	mov    %rax,%rdi
    4e1f:	e8 de f8 ff ff       	callq  4702 <elf_get_init_array>
    4e24:	85 c0                	test   %eax,%eax
    4e26:	75 5b                	jne    4e83 <do_ctors_aux+0xb0>
    4e28:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4e2c:	48 85 c0             	test   %rax,%rax
    4e2f:	74 52                	je     4e83 <do_ctors_aux+0xb0>
    4e31:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4e35:	48 85 c0             	test   %rax,%rax
    4e38:	74 49                	je     4e83 <do_ctors_aux+0xb0>
        return;

    fp_t *fp_start = (fp_t*)(init_array_addr + (uintptr_t)(enclave_start));
    4e3a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    4e3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4e42:	48 01 d0             	add    %rdx,%rax
    4e45:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    fp_t *fp_end = fp_start + (init_array_size / sizeof(fp_t));
    4e49:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4e4d:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    4e51:	48 89 c2             	mov    %rax,%rdx
    4e54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4e58:	48 01 d0             	add    %rdx,%rax
    4e5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* traverse .init_array in forward order */
    for (p = fp_start; p < fp_end; p++)
    4e5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4e63:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4e67:	eb 0e                	jmp    4e77 <do_ctors_aux+0xa4>
    {
        (*p)();
    4e69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4e6d:	48 8b 00             	mov    (%rax),%rax
    4e70:	ff d0                	callq  *%rax
    for (p = fp_start; p < fp_end; p++)
    4e72:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
    4e77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4e7b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    4e7f:	72 e8                	jb     4e69 <do_ctors_aux+0x96>
    4e81:	eb 01                	jmp    4e84 <do_ctors_aux+0xb1>
        return;
    4e83:	90                   	nop
    }
}
    4e84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4e88:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4e8f:	00 00 
    4e91:	74 05                	je     4e98 <do_ctors_aux+0xc5>
    4e93:	e8 00 01 00 00       	callq  4f98 <__stack_chk_fail>
    4e98:	c9                   	leaveq 
    4e99:	c3                   	retq   

0000000000004e9a <do_dtors_aux>:

/* auxiliary routines */
static void do_dtors_aux(void)
{
    4e9a:	55                   	push   %rbp
    4e9b:	48 89 e5             	mov    %rsp,%rbp
    4e9e:	48 83 ec 40          	sub    $0x40,%rsp
    4ea2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4ea9:	00 00 
    4eab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4eaf:	31 c0                	xor    %eax,%eax
    fp_t *p = NULL;
    4eb1:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4eb8:	00 
    uintptr_t uninit_array_addr;
    size_t uninit_array_size;
    const void *enclave_start = (const void*)&__ImageBase;
    4eb9:	48 8d 05 40 b1 ff ff 	lea    -0x4ec0(%rip),%rax        # 0 <enclave.so>
    4ec0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    elf_get_uninit_array(enclave_start, &uninit_array_addr, &uninit_array_size);
    4ec4:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4ec8:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    4ecc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4ed0:	48 89 ce             	mov    %rcx,%rsi
    4ed3:	48 89 c7             	mov    %rax,%rdi
    4ed6:	e8 44 f9 ff ff       	callq  481f <elf_get_uninit_array>

    if (uninit_array_addr == 0 || uninit_array_size == 0)
    4edb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4edf:	48 85 c0             	test   %rax,%rax
    4ee2:	74 56                	je     4f3a <do_dtors_aux+0xa0>
    4ee4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4ee8:	48 85 c0             	test   %rax,%rax
    4eeb:	74 4d                	je     4f3a <do_dtors_aux+0xa0>
        return;

    fp_t *fp_start = (fp_t*)(uninit_array_addr + (uintptr_t)(enclave_start));
    4eed:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    4ef1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4ef5:	48 01 d0             	add    %rdx,%rax
    4ef8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    fp_t *fp_end = fp_start + (uninit_array_size / sizeof(fp_t));
    4efc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    4f00:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    4f04:	48 89 c2             	mov    %rax,%rdx
    4f07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4f0b:	48 01 d0             	add    %rdx,%rax
    4f0e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* traverse .fini_array in reverse order */
    for (p = fp_end - 1; p >= fp_start; p--)
    4f12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4f16:	48 83 e8 08          	sub    $0x8,%rax
    4f1a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4f1e:	eb 0e                	jmp    4f2e <do_dtors_aux+0x94>
    {
        (*p)();
    4f20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4f24:	48 8b 00             	mov    (%rax),%rax
    4f27:	ff d0                	callq  *%rax
    for (p = fp_end - 1; p >= fp_start; p--)
    4f29:	48 83 6d d8 08       	subq   $0x8,-0x28(%rbp)
    4f2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4f32:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    4f36:	73 e8                	jae    4f20 <do_dtors_aux+0x86>
    4f38:	eb 01                	jmp    4f3b <do_dtors_aux+0xa1>
        return;
    4f3a:	90                   	nop
    }
}
    4f3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4f3f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4f46:	00 00 
    4f48:	74 05                	je     4f4f <do_dtors_aux+0xb5>
    4f4a:	e8 49 00 00 00       	callq  4f98 <__stack_chk_fail>
    4f4f:	c9                   	leaveq 
    4f50:	c3                   	retq   

0000000000004f51 <init_global_object>:

void init_global_object(void)
{
    4f51:	55                   	push   %rbp
    4f52:	48 89 e5             	mov    %rsp,%rbp
    do_ctors_aux();
    4f55:	e8 79 fe ff ff       	callq  4dd3 <do_ctors_aux>
}
    4f5a:	90                   	nop
    4f5b:	5d                   	pop    %rbp
    4f5c:	c3                   	retq   

0000000000004f5d <uninit_global_object>:

void uninit_global_object(void)
{
    4f5d:	55                   	push   %rbp
    4f5e:	48 89 e5             	mov    %rsp,%rbp
    do_atexit_aux();
    4f61:	e8 eb fd ff ff       	callq  4d51 <do_atexit_aux>
    do_dtors_aux();
    4f66:	e8 2f ff ff ff       	callq  4e9a <do_dtors_aux>
}
    4f6b:	90                   	nop
    4f6c:	5d                   	pop    %rbp
    4f6d:	c3                   	retq   

0000000000004f6e <__tls_get_addr>:
#if defined SE_GNU32
void * __attribute__((__regparm__(1))) ___tls_get_addr(tls_index *ti)
#elif defined SE_GNU64
void *__tls_get_addr(tls_index *ti)
#endif
{
    4f6e:	55                   	push   %rbp
    4f6f:	48 89 e5             	mov    %rsp,%rbp
    4f72:	48 83 ec 20          	sub    $0x20,%rsp
    4f76:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    thread_data_t *thread_data = get_thread_data();
    4f7a:	e8 13 ad 02 00       	callq  2fc92 <get_thread_data>
    4f7f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return (unsigned char *)thread_data->tls_addr + ti->ti_offset;
    4f83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4f87:	48 8b 50 08          	mov    0x8(%rax),%rdx
    4f8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4f8f:	48 8b 40 50          	mov    0x50(%rax),%rax
    4f93:	48 01 d0             	add    %rdx,%rax
}
    4f96:	c9                   	leaveq 
    4f97:	c3                   	retq   

0000000000004f98 <__stack_chk_fail>:
#include "stdlib.h"

void
__attribute__((noreturn))
__stack_chk_fail(void)
{
    4f98:	55                   	push   %rbp
    4f99:	48 89 e5             	mov    %rsp,%rbp
    abort();
    4f9c:	e8 ed af 02 00       	callq  2ff8e <abort>

0000000000004fa1 <__stack_chk_fail_local>:

void
__attribute__((noreturn))
__attribute__((visibility ("hidden")))
__stack_chk_fail_local (void)
{
    4fa1:	55                   	push   %rbp
    4fa2:	48 89 e5             	mov    %rsp,%rbp
    __stack_chk_fail ();
    4fa5:	e8 ee ff ff ff       	callq  4f98 <__stack_chk_fail>

0000000000004faa <__intel_security_check_cookie>:
#ifdef __x86_64__
void __intel_security_check_cookie(void * cookie)
#else
void __attribute__ ((regparm(1))) __intel_security_check_cookie(void * cookie)
#endif /* __x86_64__ */
{
    4faa:	55                   	push   %rbp
    4fab:	48 89 e5             	mov    %rsp,%rbp
    4fae:	48 83 ec 10          	sub    $0x10,%rsp
    4fb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if (cookie == __intel_security_cookie)
    4fb6:	48 8b 05 eb fd 22 00 	mov    0x22fdeb(%rip),%rax        # 234da8 <__intel_security_cookie>
    4fbd:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    4fc1:	74 05                	je     4fc8 <__intel_security_check_cookie+0x1e>
        return;
    abort();
    4fc3:	e8 c6 af 02 00       	callq  2ff8e <abort>
        return;
    4fc8:	90                   	nop
}
    4fc9:	c9                   	leaveq 
    4fca:	c3                   	retq   

0000000000004fcb <__assert>:
#include <stdio.h>
#include <stdlib.h>

void
__assert(const char *file, int line, const char *func, const char *failedexpr)
{
    4fcb:	55                   	push   %rbp
    4fcc:	48 89 e5             	mov    %rsp,%rbp
    4fcf:	48 83 ec 20          	sub    $0x20,%rsp
    4fd3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4fd7:	89 75 f4             	mov    %esi,-0xc(%rbp)
    4fda:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    4fde:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	(void)(line);
	(void)(func);
	(void)(failedexpr);
#endif

	abort();
    4fe2:	e8 a7 af 02 00       	callq  2ff8e <abort>

0000000000004fe7 <spin_acquire_lock>:
#define SPIN_LOCK_YIELD
#endif /* ... yield ... */

#if !defined(USE_RECURSIVE_LOCKS) || USE_RECURSIVE_LOCKS == 0
/* Plain spin locks use single word (embedded in malloc_states) */
static int spin_acquire_lock(int *sl) {
    4fe7:	55                   	push   %rbp
    4fe8:	48 89 e5             	mov    %rsp,%rbp
    4feb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  int spins = 0;
    4fef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  while (*(volatile int *)sl != 0 || CAS_LOCK(sl)) {
    4ff6:	eb 04                	jmp    4ffc <spin_acquire_lock+0x15>
    if ((++spins & SPINS_PER_YIELD) == 0) {
    4ff8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  while (*(volatile int *)sl != 0 || CAS_LOCK(sl)) {
    4ffc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5000:	8b 00                	mov    (%rax),%eax
    5002:	85 c0                	test   %eax,%eax
    5004:	75 f2                	jne    4ff8 <spin_acquire_lock+0x11>
    5006:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    500a:	b8 01 00 00 00       	mov    $0x1,%eax
    500f:	87 02                	xchg   %eax,(%rdx)
    5011:	85 c0                	test   %eax,%eax
    5013:	75 e3                	jne    4ff8 <spin_acquire_lock+0x11>
      SPIN_LOCK_YIELD;
    }
  }
  return 0;
    5015:	b8 00 00 00 00       	mov    $0x0,%eax
}
    501a:	5d                   	pop    %rbp
    501b:	c3                   	retq   

000000000000501c <segment_holding>:
/*  True if segment S holds address A */
#define segment_holds(S, A)\
  ((char*)(A) >= S->base && (char*)(A) < S->base + S->size)

/* Return segment holding given address */
static msegmentptr segment_holding(mstate m, char* addr) {
    501c:	55                   	push   %rbp
    501d:	48 89 e5             	mov    %rsp,%rbp
    5020:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5024:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  msegmentptr sp = &m->seg;
    5028:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    502c:	48 05 78 03 00 00    	add    $0x378,%rax
    5032:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  for (;;) {
    if (addr >= sp->base && addr < sp->base + sp->size)
    5036:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    503a:	48 8b 00             	mov    (%rax),%rax
    503d:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    5041:	72 1e                	jb     5061 <segment_holding+0x45>
    5043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5047:	48 8b 10             	mov    (%rax),%rdx
    504a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    504e:	48 8b 40 08          	mov    0x8(%rax),%rax
    5052:	48 01 d0             	add    %rdx,%rax
    5055:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    5059:	73 06                	jae    5061 <segment_holding+0x45>
      return sp;
    505b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    505f:	eb 18                	jmp    5079 <segment_holding+0x5d>
    if ((sp = sp->next) == 0)
    5061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5065:	48 8b 40 10          	mov    0x10(%rax),%rax
    5069:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    506d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    5072:	75 c2                	jne    5036 <segment_holding+0x1a>
      return 0;
    5074:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
    5079:	5d                   	pop    %rbp
    507a:	c3                   	retq   

000000000000507b <has_segment_link>:

/* Return true if segment contains a segment link */
static int has_segment_link(mstate m, msegmentptr ss) {
    507b:	55                   	push   %rbp
    507c:	48 89 e5             	mov    %rsp,%rbp
    507f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5083:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  msegmentptr sp = &m->seg;
    5087:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    508b:	48 05 78 03 00 00    	add    $0x378,%rax
    5091:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  for (;;) {
    if ((char*)sp >= ss->base && (char*)sp < ss->base + ss->size)
    5095:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5099:	48 8b 00             	mov    (%rax),%rax
    509c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    50a0:	72 1f                	jb     50c1 <has_segment_link+0x46>
    50a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    50a6:	48 8b 10             	mov    (%rax),%rdx
    50a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    50ad:	48 8b 40 08          	mov    0x8(%rax),%rax
    50b1:	48 01 d0             	add    %rdx,%rax
    50b4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    50b8:	73 07                	jae    50c1 <has_segment_link+0x46>
      return 1;
    50ba:	b8 01 00 00 00       	mov    $0x1,%eax
    50bf:	eb 18                	jmp    50d9 <has_segment_link+0x5e>
    if ((sp = sp->next) == 0)
    50c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    50c5:	48 8b 40 10          	mov    0x10(%rax),%rax
    50c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    50cd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    50d2:	75 c1                	jne    5095 <has_segment_link+0x1a>
      return 0;
    50d4:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
    50d9:	5d                   	pop    %rbp
    50da:	c3                   	retq   

00000000000050db <init_mparams>:
static void post_fork_parent(void) { RELEASE_LOCK(&(gm)->mutex); }
static void post_fork_child(void)  { INITIAL_LOCK(&(gm)->mutex); }
#endif /* LOCK_AT_FORK */

/* Initialize mparams */
static int init_mparams(void) {
    50db:	55                   	push   %rbp
    50dc:	48 89 e5             	mov    %rsp,%rbp
    50df:	48 83 ec 20          	sub    $0x20,%rsp
    50e3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    50ea:	00 00 
    50ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    50f0:	31 c0                	xor    %eax,%eax
#ifdef NEED_GLOBAL_LOCK_INIT
  if (malloc_global_mutex_status <= 0)
    init_malloc_global_mutex();
#endif

  ACQUIRE_MALLOC_GLOBAL_LOCK();
    50f2:	b8 01 00 00 00       	mov    $0x1,%eax
    50f7:	87 05 8b 08 23 00    	xchg   %eax,0x23088b(%rip)        # 235988 <malloc_global_mutex>
    50fd:	85 c0                	test   %eax,%eax
    50ff:	74 0c                	je     510d <init_mparams+0x32>
    5101:	48 8d 3d 80 08 23 00 	lea    0x230880(%rip),%rdi        # 235988 <malloc_global_mutex>
    5108:	e8 da fe ff ff       	callq  4fe7 <spin_acquire_lock>
  if (mparams.magic == 0) {
    510d:	48 8b 05 8c 08 23 00 	mov    0x23088c(%rip),%rax        # 2359a0 <mparams>
    5114:	48 85 c0             	test   %rax,%rax
    5117:	0f 85 d1 00 00 00    	jne    51ee <init_mparams+0x113>
    size_t magic;
    size_t psize;
    size_t gsize;

#if !defined(WIN32) || defined(_TLIBC_)
    psize = malloc_getpagesize;
    511d:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
    5124:	00 
    gsize = ((DEFAULT_GRANULARITY != 0)? DEFAULT_GRANULARITY : psize);
    5125:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5129:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        (MAX_SIZE_T < MIN_CHUNK_SIZE)  ||
        (sizeof(int) < 4)  ||
        (MALLOC_ALIGNMENT < (size_t)8U) ||
        ((MALLOC_ALIGNMENT & (MALLOC_ALIGNMENT-SIZE_T_ONE)) != 0) ||
        ((MCHUNK_SIZE      & (MCHUNK_SIZE-SIZE_T_ONE))      != 0) ||
        ((gsize            & (gsize-SIZE_T_ONE))            != 0) ||
    512d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5131:	48 83 e8 01          	sub    $0x1,%rax
    5135:	48 23 45 f0          	and    -0x10(%rbp),%rax
    if ((sizeof(size_t) != sizeof(char*)) ||
    5139:	48 85 c0             	test   %rax,%rax
    513c:	75 11                	jne    514f <init_mparams+0x74>
        ((psize            & (psize-SIZE_T_ONE))            != 0))
    513e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5142:	48 83 e8 01          	sub    $0x1,%rax
    5146:	48 23 45 e8          	and    -0x18(%rbp),%rax
        ((gsize            & (gsize-SIZE_T_ONE))            != 0) ||
    514a:	48 85 c0             	test   %rax,%rax
    514d:	74 05                	je     5154 <init_mparams+0x79>
      ABORT;
    514f:	e8 3a ae 02 00       	callq  2ff8e <abort>
    mparams.granularity = gsize;
    5154:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5158:	48 89 05 51 08 23 00 	mov    %rax,0x230851(%rip)        # 2359b0 <mparams+0x10>
    mparams.page_size = psize;
    515f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5163:	48 89 05 3e 08 23 00 	mov    %rax,0x23083e(%rip)        # 2359a8 <mparams+0x8>
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
    516a:	48 c7 05 43 08 23 00 	movq   $0xffffffffffffffff,0x230843(%rip)        # 2359b8 <mparams+0x18>
    5171:	ff ff ff ff 
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
    5175:	48 c7 05 40 08 23 00 	movq   $0x200000,0x230840(%rip)        # 2359c0 <mparams+0x20>
    517c:	00 00 20 00 
#if MORECORE_CONTIGUOUS
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
    5180:	c7 05 3e 08 23 00 02 	movl   $0x2,0x23083e(%rip)        # 2359c8 <mparams+0x28>
    5187:	00 00 00 
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT|USE_NONCONTIGUOUS_BIT;
#endif /* MORECORE_CONTIGUOUS */

#if !ONLY_MSPACES
    /* Set up lock for main malloc area */
    gm->mflags = mparams.default_mflags;
    518a:	8b 05 38 08 23 00    	mov    0x230838(%rip),%eax        # 2359c8 <mparams+0x28>
    5190:	89 05 ba 0b 23 00    	mov    %eax,0x230bba(%rip)        # 235d50 <_gm_+0x370>
    (void)INITIAL_LOCK(&gm->mutex);
    5196:	c7 05 b4 0b 23 00 00 	movl   $0x0,0x230bb4(%rip)        # 235d54 <_gm_+0x374>
    519d:	00 00 00 
      else
#endif /* USE_DEV_RANDOM */
#if defined(WIN32) && !defined(_TLIBC_)
      magic = (size_t)(GetTickCount() ^ (size_t)0x55555555U);
#elif defined(LACKS_TIME_H)
      if (SGX_SUCCESS != sgx_read_rand((unsigned char *)&magic, sizeof(size_t)))
    51a0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51a4:	be 08 00 00 00       	mov    $0x8,%esi
    51a9:	48 89 c7             	mov    %rax,%rdi
    51ac:	e8 25 be ff ff       	callq  fd6 <sgx_read_rand>
    51b1:	85 c0                	test   %eax,%eax
    51b3:	74 05                	je     51ba <init_mparams+0xdf>
          ABORT;
    51b5:	e8 d4 ad 02 00       	callq  2ff8e <abort>
      magic = (size_t)(magic ^ (size_t)0x55555555U);
    51ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    51be:	48 35 55 55 55 55    	xor    $0x55555555,%rax
    51c4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#else
      magic = (size_t)(time(0) ^ (size_t)0x55555555U);
#endif
      magic |= (size_t)8U;    /* ensure nonzero */
    51c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    51cc:	48 83 c8 08          	or     $0x8,%rax
    51d0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    51d4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    51d8:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    51dc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      /* Until memory modes commonly available, use volatile-write */
      (*(volatile size_t *)(&(mparams.magic))) = magic;
    51e0:	48 8d 05 b9 07 23 00 	lea    0x2307b9(%rip),%rax        # 2359a0 <mparams>
    51e7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    51eb:	48 89 10             	mov    %rdx,(%rax)
    }
  }

  RELEASE_MALLOC_GLOBAL_LOCK();
    51ee:	b8 00 00 00 00       	mov    $0x0,%eax
    51f3:	89 05 8f 07 23 00    	mov    %eax,0x23078f(%rip)        # 235988 <malloc_global_mutex>
  return 1;
    51f9:	b8 01 00 00 00       	mov    $0x1,%eax
}
    51fe:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    5202:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    5209:	00 00 
    520b:	74 05                	je     5212 <init_mparams+0x137>
    520d:	e8 86 fd ff ff       	callq  4f98 <__stack_chk_fail>
    5212:	c9                   	leaveq 
    5213:	c3                   	retq   

0000000000005214 <change_mparam>:

/* support for mallopt */
static int change_mparam(int param_number, int value) {
    5214:	55                   	push   %rbp
    5215:	48 89 e5             	mov    %rsp,%rbp
    5218:	48 83 ec 20          	sub    $0x20,%rsp
    521c:	89 7d ec             	mov    %edi,-0x14(%rbp)
    521f:	89 75 e8             	mov    %esi,-0x18(%rbp)
  size_t val;
  ensure_initialization();
    5222:	48 8b 05 77 07 23 00 	mov    0x230777(%rip),%rax        # 2359a0 <mparams>
    5229:	48 85 c0             	test   %rax,%rax
    522c:	75 07                	jne    5235 <change_mparam+0x21>
    522e:	e8 a8 fe ff ff       	callq  50db <init_mparams>
    5233:	85 c0                	test   %eax,%eax
    5235:	90                   	nop
  val = (value == -1)? MAX_SIZE_T : (size_t)value;
    5236:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%rbp)
    523a:	74 07                	je     5243 <change_mparam+0x2f>
    523c:	8b 45 e8             	mov    -0x18(%rbp),%eax
    523f:	48 98                	cltq   
    5241:	eb 07                	jmp    524a <change_mparam+0x36>
    5243:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    524a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  switch(param_number) {
    524e:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5251:	83 f8 fe             	cmp    $0xfffffffe,%eax
    5254:	74 1e                	je     5274 <change_mparam+0x60>
    5256:	83 f8 ff             	cmp    $0xffffffff,%eax
    5259:	74 07                	je     5262 <change_mparam+0x4e>
    525b:	83 f8 fd             	cmp    $0xfffffffd,%eax
    525e:	74 4b                	je     52ab <change_mparam+0x97>
    5260:	eb 5b                	jmp    52bd <change_mparam+0xa9>
  case M_TRIM_THRESHOLD:
    mparams.trim_threshold = val;
    5262:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5266:	48 89 05 53 07 23 00 	mov    %rax,0x230753(%rip)        # 2359c0 <mparams+0x20>
    return 1;
    526d:	b8 01 00 00 00       	mov    $0x1,%eax
    5272:	eb 4e                	jmp    52c2 <change_mparam+0xae>
  case M_GRANULARITY:
    if (val >= mparams.page_size && ((val & (val-1)) == 0)) {
    5274:	48 8b 05 2d 07 23 00 	mov    0x23072d(%rip),%rax        # 2359a8 <mparams+0x8>
    527b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    527f:	72 23                	jb     52a4 <change_mparam+0x90>
    5281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5285:	48 83 e8 01          	sub    $0x1,%rax
    5289:	48 23 45 f8          	and    -0x8(%rbp),%rax
    528d:	48 85 c0             	test   %rax,%rax
    5290:	75 12                	jne    52a4 <change_mparam+0x90>
      mparams.granularity = val;
    5292:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5296:	48 89 05 13 07 23 00 	mov    %rax,0x230713(%rip)        # 2359b0 <mparams+0x10>
      return 1;
    529d:	b8 01 00 00 00       	mov    $0x1,%eax
    52a2:	eb 1e                	jmp    52c2 <change_mparam+0xae>
    }
    else
      return 0;
    52a4:	b8 00 00 00 00       	mov    $0x0,%eax
    52a9:	eb 17                	jmp    52c2 <change_mparam+0xae>
  case M_MMAP_THRESHOLD:
    mparams.mmap_threshold = val;
    52ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52af:	48 89 05 02 07 23 00 	mov    %rax,0x230702(%rip)        # 2359b8 <mparams+0x18>
    return 1;
    52b6:	b8 01 00 00 00       	mov    $0x1,%eax
    52bb:	eb 05                	jmp    52c2 <change_mparam+0xae>
  default:
    return 0;
    52bd:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
    52c2:	c9                   	leaveq 
    52c3:	c3                   	retq   

00000000000052c4 <do_check_any_chunk>:

#if DEBUG
/* ------------------------- Debugging Support --------------------------- */

/* Check properties of any chunk, whether free, inuse, mmapped etc  */
static void do_check_any_chunk(mstate m, mchunkptr p) {
    52c4:	55                   	push   %rbp
    52c5:	48 89 e5             	mov    %rsp,%rbp
    52c8:	48 83 ec 10          	sub    $0x10,%rsp
    52cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    52d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  assert((is_aligned(chunk2mem(p))) || (p->head == FENCEPOST_HEAD));
    52d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    52d8:	48 83 c0 10          	add    $0x10,%rax
    52dc:	83 e0 07             	and    $0x7,%eax
    52df:	48 85 c0             	test   %rax,%rax
    52e2:	74 13                	je     52f7 <do_check_any_chunk+0x33>
    52e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    52e8:	48 8b 40 08          	mov    0x8(%rax),%rax
    52ec:	48 83 f8 0b          	cmp    $0xb,%rax
    52f0:	74 05                	je     52f7 <do_check_any_chunk+0x33>
    52f2:	e8 97 ac 02 00       	callq  2ff8e <abort>
  assert(ok_address(m, p));
    52f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    52fb:	48 8b 40 18          	mov    0x18(%rax),%rax
    52ff:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5303:	73 05                	jae    530a <do_check_any_chunk+0x46>
    5305:	e8 84 ac 02 00       	callq  2ff8e <abort>
}
    530a:	90                   	nop
    530b:	c9                   	leaveq 
    530c:	c3                   	retq   

000000000000530d <do_check_top_chunk>:

/* Check properties of top chunk */
static void do_check_top_chunk(mstate m, mchunkptr p) {
    530d:	55                   	push   %rbp
    530e:	48 89 e5             	mov    %rsp,%rbp
    5311:	48 83 ec 20          	sub    $0x20,%rsp
    5315:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5319:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  msegmentptr sp = segment_holding(m, (char*)p);
    531d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5321:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5325:	48 89 d6             	mov    %rdx,%rsi
    5328:	48 89 c7             	mov    %rax,%rdi
    532b:	e8 ec fc ff ff       	callq  501c <segment_holding>
    5330:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  size_t  sz = p->head & ~INUSE_BITS; /* third-lowest bit can be set! */
    5334:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5338:	48 8b 40 08          	mov    0x8(%rax),%rax
    533c:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
    5340:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  assert(sp != 0);
    5344:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    5349:	75 05                	jne    5350 <do_check_top_chunk+0x43>
    534b:	e8 3e ac 02 00       	callq  2ff8e <abort>
  assert((is_aligned(chunk2mem(p))) || (p->head == FENCEPOST_HEAD));
    5350:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5354:	48 83 c0 10          	add    $0x10,%rax
    5358:	83 e0 07             	and    $0x7,%eax
    535b:	48 85 c0             	test   %rax,%rax
    535e:	74 13                	je     5373 <do_check_top_chunk+0x66>
    5360:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5364:	48 8b 40 08          	mov    0x8(%rax),%rax
    5368:	48 83 f8 0b          	cmp    $0xb,%rax
    536c:	74 05                	je     5373 <do_check_top_chunk+0x66>
    536e:	e8 1b ac 02 00       	callq  2ff8e <abort>
  assert(ok_address(m, p));
    5373:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5377:	48 8b 40 18          	mov    0x18(%rax),%rax
    537b:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    537f:	73 05                	jae    5386 <do_check_top_chunk+0x79>
    5381:	e8 08 ac 02 00       	callq  2ff8e <abort>
  assert(sz == m->topsize);
    5386:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    538a:	48 8b 40 10          	mov    0x10(%rax),%rax
    538e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    5392:	74 05                	je     5399 <do_check_top_chunk+0x8c>
    5394:	e8 f5 ab 02 00       	callq  2ff8e <abort>
  assert(sz > 0);
    5399:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    539e:	75 05                	jne    53a5 <do_check_top_chunk+0x98>
    53a0:	e8 e9 ab 02 00       	callq  2ff8e <abort>
  assert(sz == ((sp->base + sp->size) - (char*)p) - TOP_FOOT_SIZE);
    53a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    53a9:	48 8b 10             	mov    (%rax),%rdx
    53ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    53b0:	48 8b 40 08          	mov    0x8(%rax),%rax
    53b4:	48 01 d0             	add    %rdx,%rax
    53b7:	48 89 c2             	mov    %rax,%rdx
    53ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    53be:	48 29 c2             	sub    %rax,%rdx
    53c1:	48 89 d0             	mov    %rdx,%rax
    53c4:	48 83 e8 50          	sub    $0x50,%rax
    53c8:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    53cc:	74 05                	je     53d3 <do_check_top_chunk+0xc6>
    53ce:	e8 bb ab 02 00       	callq  2ff8e <abort>
  assert(pinuse(p));
    53d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    53d7:	48 8b 40 08          	mov    0x8(%rax),%rax
    53db:	83 e0 01             	and    $0x1,%eax
    53de:	48 85 c0             	test   %rax,%rax
    53e1:	75 05                	jne    53e8 <do_check_top_chunk+0xdb>
    53e3:	e8 a6 ab 02 00       	callq  2ff8e <abort>
  assert(!pinuse(chunk_plus_offset(p, sz)));
    53e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    53ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    53f0:	48 01 d0             	add    %rdx,%rax
    53f3:	48 8b 40 08          	mov    0x8(%rax),%rax
    53f7:	83 e0 01             	and    $0x1,%eax
    53fa:	48 85 c0             	test   %rax,%rax
    53fd:	74 05                	je     5404 <do_check_top_chunk+0xf7>
    53ff:	e8 8a ab 02 00       	callq  2ff8e <abort>
}
    5404:	90                   	nop
    5405:	c9                   	leaveq 
    5406:	c3                   	retq   

0000000000005407 <do_check_mmapped_chunk>:

/* Check properties of (inuse) mmapped chunks */
static void do_check_mmapped_chunk(mstate m, mchunkptr p) {
    5407:	55                   	push   %rbp
    5408:	48 89 e5             	mov    %rsp,%rbp
    540b:	48 83 ec 20          	sub    $0x20,%rsp
    540f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5413:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  size_t  sz = chunksize(p);
    5417:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    541b:	48 8b 40 08          	mov    0x8(%rax),%rax
    541f:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5423:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  size_t len = (sz + (p->prev_foot) + MMAP_FOOT_PAD);
    5427:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    542b:	48 8b 10             	mov    (%rax),%rdx
    542e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5432:	48 01 d0             	add    %rdx,%rax
    5435:	48 83 c0 20          	add    $0x20,%rax
    5439:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  assert(is_mmapped(p));
    543d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5441:	48 8b 40 08          	mov    0x8(%rax),%rax
    5445:	83 e0 03             	and    $0x3,%eax
    5448:	48 85 c0             	test   %rax,%rax
    544b:	74 05                	je     5452 <do_check_mmapped_chunk+0x4b>
    544d:	e8 3c ab 02 00       	callq  2ff8e <abort>
  assert(use_mmap(m));
    5452:	e8 37 ab 02 00       	callq  2ff8e <abort>

0000000000005457 <do_check_inuse_chunk>:
  assert(chunk_plus_offset(p, sz)->head == FENCEPOST_HEAD);
  assert(chunk_plus_offset(p, sz+SIZE_T_SIZE)->head == 0);
}

/* Check properties of inuse chunks */
static void do_check_inuse_chunk(mstate m, mchunkptr p) {
    5457:	55                   	push   %rbp
    5458:	48 89 e5             	mov    %rsp,%rbp
    545b:	48 83 ec 10          	sub    $0x10,%rsp
    545f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    5463:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  do_check_any_chunk(m, p);
    5467:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    546b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    546f:	48 89 d6             	mov    %rdx,%rsi
    5472:	48 89 c7             	mov    %rax,%rdi
    5475:	e8 4a fe ff ff       	callq  52c4 <do_check_any_chunk>
  assert(is_inuse(p));
    547a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    547e:	48 8b 40 08          	mov    0x8(%rax),%rax
    5482:	83 e0 03             	and    $0x3,%eax
    5485:	48 83 f8 01          	cmp    $0x1,%rax
    5489:	75 05                	jne    5490 <do_check_inuse_chunk+0x39>
    548b:	e8 fe aa 02 00       	callq  2ff8e <abort>
  assert(next_pinuse(p));
    5490:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5494:	48 8b 40 08          	mov    0x8(%rax),%rax
    5498:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    549c:	48 89 c2             	mov    %rax,%rdx
    549f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    54a3:	48 01 d0             	add    %rdx,%rax
    54a6:	48 8b 40 08          	mov    0x8(%rax),%rax
    54aa:	83 e0 01             	and    $0x1,%eax
    54ad:	48 85 c0             	test   %rax,%rax
    54b0:	75 05                	jne    54b7 <do_check_inuse_chunk+0x60>
    54b2:	e8 d7 aa 02 00       	callq  2ff8e <abort>
  /* If not pinuse and not mmapped, previous chunk has OK offset */
  assert(is_mmapped(p) || pinuse(p) || next_chunk(prev_chunk(p)) == p);
    54b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    54bb:	48 8b 40 08          	mov    0x8(%rax),%rax
    54bf:	83 e0 03             	and    $0x3,%eax
    54c2:	48 85 c0             	test   %rax,%rax
    54c5:	74 40                	je     5507 <do_check_inuse_chunk+0xb0>
    54c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    54cb:	48 8b 40 08          	mov    0x8(%rax),%rax
    54cf:	83 e0 01             	and    $0x1,%eax
    54d2:	48 85 c0             	test   %rax,%rax
    54d5:	75 30                	jne    5507 <do_check_inuse_chunk+0xb0>
    54d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    54db:	48 8b 00             	mov    (%rax),%rax
    54de:	48 f7 d8             	neg    %rax
    54e1:	48 89 c2             	mov    %rax,%rdx
    54e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    54e8:	48 01 d0             	add    %rdx,%rax
    54eb:	48 8b 40 08          	mov    0x8(%rax),%rax
    54ef:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    54f3:	48 89 c2             	mov    %rax,%rdx
    54f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    54fa:	48 8b 00             	mov    (%rax),%rax
    54fd:	48 39 c2             	cmp    %rax,%rdx
    5500:	74 05                	je     5507 <do_check_inuse_chunk+0xb0>
    5502:	e8 87 aa 02 00       	callq  2ff8e <abort>
  if (is_mmapped(p))
    5507:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    550b:	48 8b 40 08          	mov    0x8(%rax),%rax
    550f:	83 e0 03             	and    $0x3,%eax
    5512:	48 85 c0             	test   %rax,%rax
    5515:	75 13                	jne    552a <do_check_inuse_chunk+0xd3>
    do_check_mmapped_chunk(m, p);
    5517:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    551b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    551f:	48 89 d6             	mov    %rdx,%rsi
    5522:	48 89 c7             	mov    %rax,%rdi
    5525:	e8 dd fe ff ff       	callq  5407 <do_check_mmapped_chunk>
}
    552a:	90                   	nop
    552b:	c9                   	leaveq 
    552c:	c3                   	retq   

000000000000552d <do_check_free_chunk>:

/* Check properties of free chunks */
static void do_check_free_chunk(mstate m, mchunkptr p) {
    552d:	55                   	push   %rbp
    552e:	48 89 e5             	mov    %rsp,%rbp
    5531:	48 83 ec 20          	sub    $0x20,%rsp
    5535:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5539:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  size_t sz = chunksize(p);
    553d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5541:	48 8b 40 08          	mov    0x8(%rax),%rax
    5545:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5549:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  mchunkptr next = chunk_plus_offset(p, sz);
    554d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5551:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5555:	48 01 d0             	add    %rdx,%rax
    5558:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  do_check_any_chunk(m, p);
    555c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5560:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5564:	48 89 d6             	mov    %rdx,%rsi
    5567:	48 89 c7             	mov    %rax,%rdi
    556a:	e8 55 fd ff ff       	callq  52c4 <do_check_any_chunk>
  assert(!is_inuse(p));
    556f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5573:	48 8b 40 08          	mov    0x8(%rax),%rax
    5577:	83 e0 03             	and    $0x3,%eax
    557a:	48 83 f8 01          	cmp    $0x1,%rax
    557e:	74 05                	je     5585 <do_check_free_chunk+0x58>
    5580:	e8 09 aa 02 00       	callq  2ff8e <abort>
  assert(!next_pinuse(p));
    5585:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5589:	48 8b 40 08          	mov    0x8(%rax),%rax
    558d:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5591:	48 89 c2             	mov    %rax,%rdx
    5594:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5598:	48 01 d0             	add    %rdx,%rax
    559b:	48 8b 40 08          	mov    0x8(%rax),%rax
    559f:	83 e0 01             	and    $0x1,%eax
    55a2:	48 85 c0             	test   %rax,%rax
    55a5:	74 05                	je     55ac <do_check_free_chunk+0x7f>
    55a7:	e8 e2 a9 02 00       	callq  2ff8e <abort>
  assert (!is_mmapped(p));
    55ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    55b0:	48 8b 40 08          	mov    0x8(%rax),%rax
    55b4:	83 e0 03             	and    $0x3,%eax
    55b7:	48 85 c0             	test   %rax,%rax
    55ba:	75 05                	jne    55c1 <do_check_free_chunk+0x94>
    55bc:	e8 cd a9 02 00       	callq  2ff8e <abort>
  if (p != m->dv && p != m->top) {
    55c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    55c5:	48 8b 40 20          	mov    0x20(%rax),%rax
    55c9:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    55cd:	0f 84 c8 00 00 00    	je     569b <do_check_free_chunk+0x16e>
    55d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    55d7:	48 8b 40 28          	mov    0x28(%rax),%rax
    55db:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    55df:	0f 84 b6 00 00 00    	je     569b <do_check_free_chunk+0x16e>
    if (sz >= MIN_CHUNK_SIZE) {
    55e5:	48 83 7d f0 1f       	cmpq   $0x1f,-0x10(%rbp)
    55ea:	0f 86 9f 00 00 00    	jbe    568f <do_check_free_chunk+0x162>
      assert((sz & CHUNK_ALIGN_MASK) == 0);
    55f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    55f4:	83 e0 07             	and    $0x7,%eax
    55f7:	48 85 c0             	test   %rax,%rax
    55fa:	74 05                	je     5601 <do_check_free_chunk+0xd4>
    55fc:	e8 8d a9 02 00       	callq  2ff8e <abort>
      assert(is_aligned(chunk2mem(p)));
    5601:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5605:	48 83 c0 10          	add    $0x10,%rax
    5609:	83 e0 07             	and    $0x7,%eax
    560c:	48 85 c0             	test   %rax,%rax
    560f:	74 05                	je     5616 <do_check_free_chunk+0xe9>
    5611:	e8 78 a9 02 00       	callq  2ff8e <abort>
      assert(next->prev_foot == sz);
    5616:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    561a:	48 8b 00             	mov    (%rax),%rax
    561d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5621:	74 05                	je     5628 <do_check_free_chunk+0xfb>
    5623:	e8 66 a9 02 00       	callq  2ff8e <abort>
      assert(pinuse(p));
    5628:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    562c:	48 8b 40 08          	mov    0x8(%rax),%rax
    5630:	83 e0 01             	and    $0x1,%eax
    5633:	48 85 c0             	test   %rax,%rax
    5636:	75 05                	jne    563d <do_check_free_chunk+0x110>
    5638:	e8 51 a9 02 00       	callq  2ff8e <abort>
      assert (next == m->top || is_inuse(next));
    563d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5641:	48 8b 40 28          	mov    0x28(%rax),%rax
    5645:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    5649:	74 16                	je     5661 <do_check_free_chunk+0x134>
    564b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    564f:	48 8b 40 08          	mov    0x8(%rax),%rax
    5653:	83 e0 03             	and    $0x3,%eax
    5656:	48 83 f8 01          	cmp    $0x1,%rax
    565a:	75 05                	jne    5661 <do_check_free_chunk+0x134>
    565c:	e8 2d a9 02 00       	callq  2ff8e <abort>
      assert(p->fd->bk == p);
    5661:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5665:	48 8b 40 10          	mov    0x10(%rax),%rax
    5669:	48 8b 40 18          	mov    0x18(%rax),%rax
    566d:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    5671:	74 05                	je     5678 <do_check_free_chunk+0x14b>
    5673:	e8 16 a9 02 00       	callq  2ff8e <abort>
      assert(p->bk->fd == p);
    5678:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    567c:	48 8b 40 18          	mov    0x18(%rax),%rax
    5680:	48 8b 40 10          	mov    0x10(%rax),%rax
    5684:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    5688:	74 11                	je     569b <do_check_free_chunk+0x16e>
    568a:	e8 ff a8 02 00       	callq  2ff8e <abort>
    }
    else  /* markers are always of size SIZE_T_SIZE */
      assert(sz == SIZE_T_SIZE);
    568f:	48 83 7d f0 08       	cmpq   $0x8,-0x10(%rbp)
    5694:	74 05                	je     569b <do_check_free_chunk+0x16e>
    5696:	e8 f3 a8 02 00       	callq  2ff8e <abort>
  }
}
    569b:	90                   	nop
    569c:	c9                   	leaveq 
    569d:	c3                   	retq   

000000000000569e <do_check_malloced_chunk>:

/* Check properties of malloced chunks at the point they are malloced */
static void do_check_malloced_chunk(mstate m, void* mem, size_t s) {
    569e:	55                   	push   %rbp
    569f:	48 89 e5             	mov    %rsp,%rbp
    56a2:	48 83 ec 30          	sub    $0x30,%rsp
    56a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    56aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    56ae:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  if (mem != 0) {
    56b2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    56b7:	74 7e                	je     5737 <do_check_malloced_chunk+0x99>
    mchunkptr p = mem2chunk(mem);
    56b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    56bd:	48 83 e8 10          	sub    $0x10,%rax
    56c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    size_t sz = p->head & ~INUSE_BITS;
    56c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    56c9:	48 8b 40 08          	mov    0x8(%rax),%rax
    56cd:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
    56d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    do_check_inuse_chunk(m, p);
    56d5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    56d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    56dd:	48 89 d6             	mov    %rdx,%rsi
    56e0:	48 89 c7             	mov    %rax,%rdi
    56e3:	e8 6f fd ff ff       	callq  5457 <do_check_inuse_chunk>
    assert((sz & CHUNK_ALIGN_MASK) == 0);
    56e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    56ec:	83 e0 07             	and    $0x7,%eax
    56ef:	48 85 c0             	test   %rax,%rax
    56f2:	74 05                	je     56f9 <do_check_malloced_chunk+0x5b>
    56f4:	e8 95 a8 02 00       	callq  2ff8e <abort>
    assert(sz >= MIN_CHUNK_SIZE);
    56f9:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
    56fe:	77 05                	ja     5705 <do_check_malloced_chunk+0x67>
    5700:	e8 89 a8 02 00       	callq  2ff8e <abort>
    assert(sz >= s);
    5705:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5709:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    570d:	73 05                	jae    5714 <do_check_malloced_chunk+0x76>
    570f:	e8 7a a8 02 00       	callq  2ff8e <abort>
    /* unless mmapped, size is less than MIN_CHUNK_SIZE more than request */
    assert(is_mmapped(p) || sz < (s + MIN_CHUNK_SIZE));
    5714:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5718:	48 8b 40 08          	mov    0x8(%rax),%rax
    571c:	83 e0 03             	and    $0x3,%eax
    571f:	48 85 c0             	test   %rax,%rax
    5722:	74 13                	je     5737 <do_check_malloced_chunk+0x99>
    5724:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5728:	48 83 c0 20          	add    $0x20,%rax
    572c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    5730:	72 05                	jb     5737 <do_check_malloced_chunk+0x99>
    5732:	e8 57 a8 02 00       	callq  2ff8e <abort>
  }
}
    5737:	90                   	nop
    5738:	c9                   	leaveq 
    5739:	c3                   	retq   

000000000000573a <do_check_tree>:

/* Check a tree and its subtrees.  */
static void do_check_tree(mstate m, tchunkptr t) {
    573a:	55                   	push   %rbp
    573b:	48 89 e5             	mov    %rsp,%rbp
    573e:	48 83 ec 40          	sub    $0x40,%rsp
    5742:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    5746:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  tchunkptr head = 0;
    574a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    5751:	00 
  tchunkptr u = t;
    5752:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5756:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  bindex_t tindex = t->index;
    575a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    575e:	8b 40 38             	mov    0x38(%rax),%eax
    5761:	89 45 dc             	mov    %eax,-0x24(%rbp)
  size_t tsize = chunksize(t);
    5764:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    5768:	48 8b 40 08          	mov    0x8(%rax),%rax
    576c:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5770:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  bindex_t idx;
  compute_tree_index(tsize, idx);
    5774:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5778:	48 c1 e8 08          	shr    $0x8,%rax
    577c:	89 45 e0             	mov    %eax,-0x20(%rbp)
    577f:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
    5783:	75 09                	jne    578e <do_check_tree+0x54>
    5785:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
    578c:	eb 45                	jmp    57d3 <do_check_tree+0x99>
    578e:	81 7d e0 ff ff 00 00 	cmpl   $0xffff,-0x20(%rbp)
    5795:	76 09                	jbe    57a0 <do_check_tree+0x66>
    5797:	c7 45 d8 1f 00 00 00 	movl   $0x1f,-0x28(%rbp)
    579e:	eb 33                	jmp    57d3 <do_check_tree+0x99>
    57a0:	0f bd 45 e0          	bsr    -0x20(%rbp),%eax
    57a4:	83 f0 1f             	xor    $0x1f,%eax
    57a7:	ba 1f 00 00 00       	mov    $0x1f,%edx
    57ac:	29 c2                	sub    %eax,%edx
    57ae:	89 d0                	mov    %edx,%eax
    57b0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    57b3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    57b6:	8d 34 00             	lea    (%rax,%rax,1),%esi
    57b9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    57bc:	83 c0 07             	add    $0x7,%eax
    57bf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    57c3:	89 c1                	mov    %eax,%ecx
    57c5:	48 d3 ea             	shr    %cl,%rdx
    57c8:	48 89 d0             	mov    %rdx,%rax
    57cb:	83 e0 01             	and    $0x1,%eax
    57ce:	01 f0                	add    %esi,%eax
    57d0:	89 45 d8             	mov    %eax,-0x28(%rbp)
  assert(tindex == idx);
    57d3:	8b 45 dc             	mov    -0x24(%rbp),%eax
    57d6:	3b 45 d8             	cmp    -0x28(%rbp),%eax
    57d9:	74 05                	je     57e0 <do_check_tree+0xa6>
    57db:	e8 ae a7 02 00       	callq  2ff8e <abort>
  assert(tsize >= MIN_LARGE_SIZE);
    57e0:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
    57e7:	00 
    57e8:	77 05                	ja     57ef <do_check_tree+0xb5>
    57ea:	e8 9f a7 02 00       	callq  2ff8e <abort>
  assert(tsize >= minsize_for_tree_index(idx));
    57ef:	8b 45 d8             	mov    -0x28(%rbp),%eax
    57f2:	d1 e8                	shr    %eax
    57f4:	83 c0 08             	add    $0x8,%eax
    57f7:	ba 01 00 00 00       	mov    $0x1,%edx
    57fc:	89 c1                	mov    %eax,%ecx
    57fe:	48 d3 e2             	shl    %cl,%rdx
    5801:	8b 45 d8             	mov    -0x28(%rbp),%eax
    5804:	83 e0 01             	and    $0x1,%eax
    5807:	48 89 c6             	mov    %rax,%rsi
    580a:	8b 45 d8             	mov    -0x28(%rbp),%eax
    580d:	d1 e8                	shr    %eax
    580f:	83 c0 07             	add    $0x7,%eax
    5812:	89 c1                	mov    %eax,%ecx
    5814:	48 d3 e6             	shl    %cl,%rsi
    5817:	48 89 f0             	mov    %rsi,%rax
    581a:	48 09 d0             	or     %rdx,%rax
    581d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    5821:	73 05                	jae    5828 <do_check_tree+0xee>
    5823:	e8 66 a7 02 00       	callq  2ff8e <abort>
  assert((idx == NTREEBINS-1) || (tsize < minsize_for_tree_index((idx+1))));
    5828:	83 7d d8 1f          	cmpl   $0x1f,-0x28(%rbp)
    582c:	74 44                	je     5872 <do_check_tree+0x138>
    582e:	8b 45 d8             	mov    -0x28(%rbp),%eax
    5831:	83 c0 01             	add    $0x1,%eax
    5834:	d1 e8                	shr    %eax
    5836:	83 c0 08             	add    $0x8,%eax
    5839:	ba 01 00 00 00       	mov    $0x1,%edx
    583e:	89 c1                	mov    %eax,%ecx
    5840:	48 d3 e2             	shl    %cl,%rdx
    5843:	8b 45 d8             	mov    -0x28(%rbp),%eax
    5846:	83 c0 01             	add    $0x1,%eax
    5849:	89 c0                	mov    %eax,%eax
    584b:	83 e0 01             	and    $0x1,%eax
    584e:	48 89 c6             	mov    %rax,%rsi
    5851:	8b 45 d8             	mov    -0x28(%rbp),%eax
    5854:	83 c0 01             	add    $0x1,%eax
    5857:	d1 e8                	shr    %eax
    5859:	83 c0 07             	add    $0x7,%eax
    585c:	89 c1                	mov    %eax,%ecx
    585e:	48 d3 e6             	shl    %cl,%rsi
    5861:	48 89 f0             	mov    %rsi,%rax
    5864:	48 09 d0             	or     %rdx,%rax
    5867:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    586b:	72 05                	jb     5872 <do_check_tree+0x138>
    586d:	e8 1c a7 02 00       	callq  2ff8e <abort>

  do { /* traverse through chain of same-sized nodes */
    do_check_any_chunk(m, ((mchunkptr)u));
    5872:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5876:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    587a:	48 89 d6             	mov    %rdx,%rsi
    587d:	48 89 c7             	mov    %rax,%rdi
    5880:	e8 3f fa ff ff       	callq  52c4 <do_check_any_chunk>
    assert(u->index == tindex);
    5885:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5889:	8b 40 38             	mov    0x38(%rax),%eax
    588c:	39 45 dc             	cmp    %eax,-0x24(%rbp)
    588f:	74 05                	je     5896 <do_check_tree+0x15c>
    5891:	e8 f8 a6 02 00       	callq  2ff8e <abort>
    assert(chunksize(u) == tsize);
    5896:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    589a:	48 8b 40 08          	mov    0x8(%rax),%rax
    589e:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    58a2:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    58a6:	74 05                	je     58ad <do_check_tree+0x173>
    58a8:	e8 e1 a6 02 00       	callq  2ff8e <abort>
    assert(!is_inuse(u));
    58ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    58b1:	48 8b 40 08          	mov    0x8(%rax),%rax
    58b5:	83 e0 03             	and    $0x3,%eax
    58b8:	48 83 f8 01          	cmp    $0x1,%rax
    58bc:	74 05                	je     58c3 <do_check_tree+0x189>
    58be:	e8 cb a6 02 00       	callq  2ff8e <abort>
    assert(!next_pinuse(u));
    58c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    58c7:	48 8b 40 08          	mov    0x8(%rax),%rax
    58cb:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    58cf:	48 89 c2             	mov    %rax,%rdx
    58d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    58d6:	48 01 d0             	add    %rdx,%rax
    58d9:	48 8b 40 08          	mov    0x8(%rax),%rax
    58dd:	83 e0 01             	and    $0x1,%eax
    58e0:	48 85 c0             	test   %rax,%rax
    58e3:	74 05                	je     58ea <do_check_tree+0x1b0>
    58e5:	e8 a4 a6 02 00       	callq  2ff8e <abort>
    assert(u->fd->bk == u);
    58ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    58ee:	48 8b 40 10          	mov    0x10(%rax),%rax
    58f2:	48 8b 40 18          	mov    0x18(%rax),%rax
    58f6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    58fa:	74 05                	je     5901 <do_check_tree+0x1c7>
    58fc:	e8 8d a6 02 00       	callq  2ff8e <abort>
    assert(u->bk->fd == u);
    5901:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5905:	48 8b 40 18          	mov    0x18(%rax),%rax
    5909:	48 8b 40 10          	mov    0x10(%rax),%rax
    590d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5911:	74 05                	je     5918 <do_check_tree+0x1de>
    5913:	e8 76 a6 02 00       	callq  2ff8e <abort>
    if (u->parent == 0) {
    5918:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    591c:	48 8b 40 30          	mov    0x30(%rax),%rax
    5920:	48 85 c0             	test   %rax,%rax
    5923:	75 28                	jne    594d <do_check_tree+0x213>
      assert(u->child[0] == 0);
    5925:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5929:	48 8b 40 20          	mov    0x20(%rax),%rax
    592d:	48 85 c0             	test   %rax,%rax
    5930:	74 05                	je     5937 <do_check_tree+0x1fd>
    5932:	e8 57 a6 02 00       	callq  2ff8e <abort>
      assert(u->child[1] == 0);
    5937:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    593b:	48 8b 40 28          	mov    0x28(%rax),%rax
    593f:	48 85 c0             	test   %rax,%rax
    5942:	0f 84 49 01 00 00    	je     5a91 <do_check_tree+0x357>
    5948:	e8 41 a6 02 00       	callq  2ff8e <abort>
    }
    else {
      assert(head == 0); /* only one node on chain has parent */
    594d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    5952:	74 05                	je     5959 <do_check_tree+0x21f>
    5954:	e8 35 a6 02 00       	callq  2ff8e <abort>
      head = u;
    5959:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    595d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      assert(u->parent != u);
    5961:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5965:	48 8b 40 30          	mov    0x30(%rax),%rax
    5969:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    596d:	75 05                	jne    5974 <do_check_tree+0x23a>
    596f:	e8 1a a6 02 00       	callq  2ff8e <abort>
      assert (u->parent->child[0] == u ||
    5974:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5978:	48 8b 40 30          	mov    0x30(%rax),%rax
    597c:	48 8b 40 20          	mov    0x20(%rax),%rax
    5980:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5984:	74 28                	je     59ae <do_check_tree+0x274>
    5986:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    598a:	48 8b 40 30          	mov    0x30(%rax),%rax
    598e:	48 8b 40 28          	mov    0x28(%rax),%rax
    5992:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5996:	74 16                	je     59ae <do_check_tree+0x274>
    5998:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    599c:	48 8b 40 30          	mov    0x30(%rax),%rax
    59a0:	48 8b 00             	mov    (%rax),%rax
    59a3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    59a7:	74 05                	je     59ae <do_check_tree+0x274>
    59a9:	e8 e0 a5 02 00       	callq  2ff8e <abort>
              u->parent->child[1] == u ||
              *((tbinptr*)(u->parent)) == u);
      if (u->child[0] != 0) {
    59ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    59b2:	48 8b 40 20          	mov    0x20(%rax),%rax
    59b6:	48 85 c0             	test   %rax,%rax
    59b9:	74 41                	je     59fc <do_check_tree+0x2c2>
        assert(u->child[0]->parent == u);
    59bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    59bf:	48 8b 40 20          	mov    0x20(%rax),%rax
    59c3:	48 8b 40 30          	mov    0x30(%rax),%rax
    59c7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    59cb:	74 05                	je     59d2 <do_check_tree+0x298>
    59cd:	e8 bc a5 02 00       	callq  2ff8e <abort>
        assert(u->child[0] != u);
    59d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    59d6:	48 8b 40 20          	mov    0x20(%rax),%rax
    59da:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    59de:	75 05                	jne    59e5 <do_check_tree+0x2ab>
    59e0:	e8 a9 a5 02 00       	callq  2ff8e <abort>
        do_check_tree(m, u->child[0]);
    59e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    59e9:	48 8b 50 20          	mov    0x20(%rax),%rdx
    59ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    59f1:	48 89 d6             	mov    %rdx,%rsi
    59f4:	48 89 c7             	mov    %rax,%rdi
    59f7:	e8 3e fd ff ff       	callq  573a <do_check_tree>
      }
      if (u->child[1] != 0) {
    59fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5a00:	48 8b 40 28          	mov    0x28(%rax),%rax
    5a04:	48 85 c0             	test   %rax,%rax
    5a07:	74 41                	je     5a4a <do_check_tree+0x310>
        assert(u->child[1]->parent == u);
    5a09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5a0d:	48 8b 40 28          	mov    0x28(%rax),%rax
    5a11:	48 8b 40 30          	mov    0x30(%rax),%rax
    5a15:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5a19:	74 05                	je     5a20 <do_check_tree+0x2e6>
    5a1b:	e8 6e a5 02 00       	callq  2ff8e <abort>
        assert(u->child[1] != u);
    5a20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5a24:	48 8b 40 28          	mov    0x28(%rax),%rax
    5a28:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5a2c:	75 05                	jne    5a33 <do_check_tree+0x2f9>
    5a2e:	e8 5b a5 02 00       	callq  2ff8e <abort>
        do_check_tree(m, u->child[1]);
    5a33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5a37:	48 8b 50 28          	mov    0x28(%rax),%rdx
    5a3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5a3f:	48 89 d6             	mov    %rdx,%rsi
    5a42:	48 89 c7             	mov    %rax,%rdi
    5a45:	e8 f0 fc ff ff       	callq  573a <do_check_tree>
      }
      if (u->child[0] != 0 && u->child[1] != 0) {
    5a4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5a4e:	48 8b 40 20          	mov    0x20(%rax),%rax
    5a52:	48 85 c0             	test   %rax,%rax
    5a55:	74 3a                	je     5a91 <do_check_tree+0x357>
    5a57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5a5b:	48 8b 40 28          	mov    0x28(%rax),%rax
    5a5f:	48 85 c0             	test   %rax,%rax
    5a62:	74 2d                	je     5a91 <do_check_tree+0x357>
        assert(chunksize(u->child[0]) < chunksize(u->child[1]));
    5a64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5a68:	48 8b 40 20          	mov    0x20(%rax),%rax
    5a6c:	48 8b 40 08          	mov    0x8(%rax),%rax
    5a70:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5a74:	48 89 c2             	mov    %rax,%rdx
    5a77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5a7b:	48 8b 40 28          	mov    0x28(%rax),%rax
    5a7f:	48 8b 40 08          	mov    0x8(%rax),%rax
    5a83:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5a87:	48 39 c2             	cmp    %rax,%rdx
    5a8a:	72 05                	jb     5a91 <do_check_tree+0x357>
    5a8c:	e8 fd a4 02 00       	callq  2ff8e <abort>
      }
    }
    u = u->fd;
    5a91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5a95:	48 8b 40 10          	mov    0x10(%rax),%rax
    5a99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  } while (u != t);
    5a9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5aa1:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
    5aa5:	0f 85 c7 fd ff ff    	jne    5872 <do_check_tree+0x138>
  assert(head != 0);
    5aab:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    5ab0:	75 05                	jne    5ab7 <do_check_tree+0x37d>
    5ab2:	e8 d7 a4 02 00       	callq  2ff8e <abort>
}
    5ab7:	90                   	nop
    5ab8:	c9                   	leaveq 
    5ab9:	c3                   	retq   

0000000000005aba <do_check_treebin>:

/*  Check all the chunks in a treebin.  */
static void do_check_treebin(mstate m, bindex_t i) {
    5aba:	55                   	push   %rbp
    5abb:	48 89 e5             	mov    %rsp,%rbp
    5abe:	48 83 ec 30          	sub    $0x30,%rsp
    5ac2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5ac6:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  tbinptr* tb = treebin_at(m, i);
    5ac9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    5acc:	48 83 c0 4a          	add    $0x4a,%rax
    5ad0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5ad7:	00 
    5ad8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5adc:	48 01 d0             	add    %rdx,%rax
    5adf:	48 83 c0 08          	add    $0x8,%rax
    5ae3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  tchunkptr t = *tb;
    5ae7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5aeb:	48 8b 00             	mov    (%rax),%rax
    5aee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  int empty = (m->treemap & (1U << i)) == 0;
    5af2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5af6:	8b 50 04             	mov    0x4(%rax),%edx
    5af9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    5afc:	be 01 00 00 00       	mov    $0x1,%esi
    5b01:	89 c1                	mov    %eax,%ecx
    5b03:	d3 e6                	shl    %cl,%esi
    5b05:	89 f0                	mov    %esi,%eax
    5b07:	21 d0                	and    %edx,%eax
    5b09:	85 c0                	test   %eax,%eax
    5b0b:	0f 94 c0             	sete   %al
    5b0e:	0f b6 c0             	movzbl %al,%eax
    5b11:	89 45 ec             	mov    %eax,-0x14(%rbp)
  if (t == 0)
    5b14:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    5b19:	75 0b                	jne    5b26 <do_check_treebin+0x6c>
    assert(empty);
    5b1b:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
    5b1f:	75 05                	jne    5b26 <do_check_treebin+0x6c>
    5b21:	e8 68 a4 02 00       	callq  2ff8e <abort>
  if (!empty)
    5b26:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
    5b2a:	75 13                	jne    5b3f <do_check_treebin+0x85>
    do_check_tree(m, t);
    5b2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5b30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5b34:	48 89 d6             	mov    %rdx,%rsi
    5b37:	48 89 c7             	mov    %rax,%rdi
    5b3a:	e8 fb fb ff ff       	callq  573a <do_check_tree>
}
    5b3f:	90                   	nop
    5b40:	c9                   	leaveq 
    5b41:	c3                   	retq   

0000000000005b42 <do_check_smallbin>:

/*  Check all the chunks in a smallbin.  */
static void do_check_smallbin(mstate m, bindex_t i) {
    5b42:	55                   	push   %rbp
    5b43:	48 89 e5             	mov    %rsp,%rbp
    5b46:	48 83 ec 40          	sub    $0x40,%rsp
    5b4a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    5b4e:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  sbinptr b = smallbin_at(m, i);
    5b51:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    5b54:	01 c0                	add    %eax,%eax
    5b56:	89 c0                	mov    %eax,%eax
    5b58:	48 83 c0 08          	add    $0x8,%rax
    5b5c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5b63:	00 
    5b64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5b68:	48 01 d0             	add    %rdx,%rax
    5b6b:	48 83 c0 08          	add    $0x8,%rax
    5b6f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  mchunkptr p = b->bk;
    5b73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b77:	48 8b 40 18          	mov    0x18(%rax),%rax
    5b7b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  unsigned int empty = (m->smallmap & (1U << i)) == 0;
    5b7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5b83:	8b 10                	mov    (%rax),%edx
    5b85:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    5b88:	be 01 00 00 00       	mov    $0x1,%esi
    5b8d:	89 c1                	mov    %eax,%ecx
    5b8f:	d3 e6                	shl    %cl,%esi
    5b91:	89 f0                	mov    %esi,%eax
    5b93:	21 d0                	and    %edx,%eax
    5b95:	85 c0                	test   %eax,%eax
    5b97:	0f 94 c0             	sete   %al
    5b9a:	0f b6 c0             	movzbl %al,%eax
    5b9d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  if (p == b)
    5ba0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5ba4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    5ba8:	75 0b                	jne    5bb5 <do_check_smallbin+0x73>
    assert(empty);
    5baa:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    5bae:	75 05                	jne    5bb5 <do_check_smallbin+0x73>
    5bb0:	e8 d9 a3 02 00       	callq  2ff8e <abort>
  if (!empty) {
    5bb5:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    5bb9:	0f 85 c2 00 00 00    	jne    5c81 <do_check_smallbin+0x13f>
    for (; p != b; p = p->bk) {
    5bbf:	e9 af 00 00 00       	jmpq   5c73 <do_check_smallbin+0x131>
      size_t size = chunksize(p);
    5bc4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5bc8:	48 8b 40 08          	mov    0x8(%rax),%rax
    5bcc:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5bd0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      mchunkptr q;
      /* each chunk claims to be free */
      do_check_free_chunk(m, p);
    5bd4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5bd8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5bdc:	48 89 d6             	mov    %rdx,%rsi
    5bdf:	48 89 c7             	mov    %rax,%rdi
    5be2:	e8 46 f9 ff ff       	callq  552d <do_check_free_chunk>
      /* chunk belongs in bin */
      assert(small_index(size) == i);
    5be7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5beb:	48 c1 e8 03          	shr    $0x3,%rax
    5bef:	39 45 c4             	cmp    %eax,-0x3c(%rbp)
    5bf2:	74 05                	je     5bf9 <do_check_smallbin+0xb7>
    5bf4:	e8 95 a3 02 00       	callq  2ff8e <abort>
      assert(p->bk == b || chunksize(p->bk) == chunksize(p));
    5bf9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5bfd:	48 8b 40 18          	mov    0x18(%rax),%rax
    5c01:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    5c05:	74 25                	je     5c2c <do_check_smallbin+0xea>
    5c07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5c0b:	48 8b 40 18          	mov    0x18(%rax),%rax
    5c0f:	48 8b 50 08          	mov    0x8(%rax),%rdx
    5c13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5c17:	48 8b 40 08          	mov    0x8(%rax),%rax
    5c1b:	48 31 d0             	xor    %rdx,%rax
    5c1e:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5c22:	48 85 c0             	test   %rax,%rax
    5c25:	74 05                	je     5c2c <do_check_smallbin+0xea>
    5c27:	e8 62 a3 02 00       	callq  2ff8e <abort>
      /* chunk is followed by an inuse chunk */
      q = next_chunk(p);
    5c2c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5c30:	48 8b 40 08          	mov    0x8(%rax),%rax
    5c34:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5c38:	48 89 c2             	mov    %rax,%rdx
    5c3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5c3f:	48 01 d0             	add    %rdx,%rax
    5c42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (q->head != FENCEPOST_HEAD)
    5c46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5c4a:	48 8b 40 08          	mov    0x8(%rax),%rax
    5c4e:	48 83 f8 0b          	cmp    $0xb,%rax
    5c52:	74 13                	je     5c67 <do_check_smallbin+0x125>
        do_check_inuse_chunk(m, q);
    5c54:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5c58:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5c5c:	48 89 d6             	mov    %rdx,%rsi
    5c5f:	48 89 c7             	mov    %rax,%rdi
    5c62:	e8 f0 f7 ff ff       	callq  5457 <do_check_inuse_chunk>
    for (; p != b; p = p->bk) {
    5c67:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5c6b:	48 8b 40 18          	mov    0x18(%rax),%rax
    5c6f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    5c73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5c77:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    5c7b:	0f 85 43 ff ff ff    	jne    5bc4 <do_check_smallbin+0x82>
    }
  }
}
    5c81:	90                   	nop
    5c82:	c9                   	leaveq 
    5c83:	c3                   	retq   

0000000000005c84 <bin_find>:

/* Find x in a bin. Used in other check functions. */
static int bin_find(mstate m, mchunkptr x) {
    5c84:	55                   	push   %rbp
    5c85:	48 89 e5             	mov    %rsp,%rbp
    5c88:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    5c8c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  size_t size = chunksize(x);
    5c90:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    5c94:	48 8b 40 08          	mov    0x8(%rax),%rax
    5c98:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5c9c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  if (is_small(size)) {
    5ca0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5ca4:	48 c1 e8 03          	shr    $0x3,%rax
    5ca8:	48 83 f8 1f          	cmp    $0x1f,%rax
    5cac:	0f 87 82 00 00 00    	ja     5d34 <bin_find+0xb0>
    bindex_t sidx = small_index(size);
    5cb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5cb6:	48 c1 e8 03          	shr    $0x3,%rax
    5cba:	89 45 cc             	mov    %eax,-0x34(%rbp)
    sbinptr b = smallbin_at(m, sidx);
    5cbd:	8b 45 cc             	mov    -0x34(%rbp),%eax
    5cc0:	01 c0                	add    %eax,%eax
    5cc2:	89 c0                	mov    %eax,%eax
    5cc4:	48 83 c0 08          	add    $0x8,%rax
    5cc8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5ccf:	00 
    5cd0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5cd4:	48 01 d0             	add    %rdx,%rax
    5cd7:	48 83 c0 08          	add    $0x8,%rax
    5cdb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (smallmap_is_marked(m, sidx)) {
    5cdf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5ce3:	8b 10                	mov    (%rax),%edx
    5ce5:	8b 45 cc             	mov    -0x34(%rbp),%eax
    5ce8:	be 01 00 00 00       	mov    $0x1,%esi
    5ced:	89 c1                	mov    %eax,%ecx
    5cef:	d3 e6                	shl    %cl,%esi
    5cf1:	89 f0                	mov    %esi,%eax
    5cf3:	21 d0                	and    %edx,%eax
    5cf5:	85 c0                	test   %eax,%eax
    5cf7:	0f 84 64 01 00 00    	je     5e61 <bin_find+0x1dd>
      mchunkptr p = b;
    5cfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5d01:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      do {
        if (p == x)
    5d05:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5d09:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
    5d0d:	75 0a                	jne    5d19 <bin_find+0x95>
          return 1;
    5d0f:	b8 01 00 00 00       	mov    $0x1,%eax
    5d14:	e9 4d 01 00 00       	jmpq   5e66 <bin_find+0x1e2>
      } while ((p = p->fd) != b);
    5d19:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5d1d:	48 8b 40 10          	mov    0x10(%rax),%rax
    5d21:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5d25:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5d29:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    5d2d:	75 d6                	jne    5d05 <bin_find+0x81>
    5d2f:	e9 2d 01 00 00       	jmpq   5e61 <bin_find+0x1dd>
    }
  }
  else {
    bindex_t tidx;
    compute_tree_index(size, tidx);
    5d34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5d38:	48 c1 e8 08          	shr    $0x8,%rax
    5d3c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    5d3f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
    5d43:	75 09                	jne    5d4e <bin_find+0xca>
    5d45:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
    5d4c:	eb 45                	jmp    5d93 <bin_find+0x10f>
    5d4e:	81 7d c4 ff ff 00 00 	cmpl   $0xffff,-0x3c(%rbp)
    5d55:	76 09                	jbe    5d60 <bin_find+0xdc>
    5d57:	c7 45 c0 1f 00 00 00 	movl   $0x1f,-0x40(%rbp)
    5d5e:	eb 33                	jmp    5d93 <bin_find+0x10f>
    5d60:	0f bd 45 c4          	bsr    -0x3c(%rbp),%eax
    5d64:	83 f0 1f             	xor    $0x1f,%eax
    5d67:	ba 1f 00 00 00       	mov    $0x1f,%edx
    5d6c:	29 c2                	sub    %eax,%edx
    5d6e:	89 d0                	mov    %edx,%eax
    5d70:	89 45 c8             	mov    %eax,-0x38(%rbp)
    5d73:	8b 45 c8             	mov    -0x38(%rbp),%eax
    5d76:	8d 34 00             	lea    (%rax,%rax,1),%esi
    5d79:	8b 45 c8             	mov    -0x38(%rbp),%eax
    5d7c:	83 c0 07             	add    $0x7,%eax
    5d7f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5d83:	89 c1                	mov    %eax,%ecx
    5d85:	48 d3 ea             	shr    %cl,%rdx
    5d88:	48 89 d0             	mov    %rdx,%rax
    5d8b:	83 e0 01             	and    $0x1,%eax
    5d8e:	01 f0                	add    %esi,%eax
    5d90:	89 45 c0             	mov    %eax,-0x40(%rbp)
    if (treemap_is_marked(m, tidx)) {
    5d93:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5d97:	8b 50 04             	mov    0x4(%rax),%edx
    5d9a:	8b 45 c0             	mov    -0x40(%rbp),%eax
    5d9d:	be 01 00 00 00       	mov    $0x1,%esi
    5da2:	89 c1                	mov    %eax,%ecx
    5da4:	d3 e6                	shl    %cl,%esi
    5da6:	89 f0                	mov    %esi,%eax
    5da8:	21 d0                	and    %edx,%eax
    5daa:	85 c0                	test   %eax,%eax
    5dac:	0f 84 af 00 00 00    	je     5e61 <bin_find+0x1dd>
      tchunkptr t = *treebin_at(m, tidx);
    5db2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5db6:	8b 55 c0             	mov    -0x40(%rbp),%edx
    5db9:	48 83 c2 4a          	add    $0x4a,%rdx
    5dbd:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
    5dc2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      size_t sizebits = size << leftshift_for_tree_index(tidx);
    5dc6:	83 7d c0 1f          	cmpl   $0x1f,-0x40(%rbp)
    5dca:	74 10                	je     5ddc <bin_find+0x158>
    5dcc:	8b 45 c0             	mov    -0x40(%rbp),%eax
    5dcf:	d1 e8                	shr    %eax
    5dd1:	ba 39 00 00 00       	mov    $0x39,%edx
    5dd6:	29 c2                	sub    %eax,%edx
    5dd8:	89 d0                	mov    %edx,%eax
    5dda:	eb 05                	jmp    5de1 <bin_find+0x15d>
    5ddc:	b8 00 00 00 00       	mov    $0x0,%eax
    5de1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5de5:	89 c1                	mov    %eax,%ecx
    5de7:	48 d3 e2             	shl    %cl,%rdx
    5dea:	48 89 d0             	mov    %rdx,%rax
    5ded:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      while (t != 0 && chunksize(t) != size) {
    5df1:	eb 1f                	jmp    5e12 <bin_find+0x18e>
        t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
    5df3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5df7:	48 c1 e8 3f          	shr    $0x3f,%rax
    5dfb:	48 89 c2             	mov    %rax,%rdx
    5dfe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5e02:	48 83 c2 04          	add    $0x4,%rdx
    5e06:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
    5e0a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        sizebits <<= 1;
    5e0e:	48 d1 65 e0          	shlq   -0x20(%rbp)
      while (t != 0 && chunksize(t) != size) {
    5e12:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    5e17:	74 12                	je     5e2b <bin_find+0x1a7>
    5e19:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5e1d:	48 8b 40 08          	mov    0x8(%rax),%rax
    5e21:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5e25:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5e29:	75 c8                	jne    5df3 <bin_find+0x16f>
      }
      if (t != 0) {
    5e2b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    5e30:	74 2f                	je     5e61 <bin_find+0x1dd>
        tchunkptr u = t;
    5e32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5e36:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        do {
          if (u == (tchunkptr)x)
    5e3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5e3e:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
    5e42:	75 07                	jne    5e4b <bin_find+0x1c7>
            return 1;
    5e44:	b8 01 00 00 00       	mov    $0x1,%eax
    5e49:	eb 1b                	jmp    5e66 <bin_find+0x1e2>
        } while ((u = u->fd) != t);
    5e4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5e4f:	48 8b 40 10          	mov    0x10(%rax),%rax
    5e53:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5e57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5e5b:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    5e5f:	75 d9                	jne    5e3a <bin_find+0x1b6>
      }
    }
  }
  return 0;
    5e61:	b8 00 00 00 00       	mov    $0x0,%eax
}
    5e66:	5d                   	pop    %rbp
    5e67:	c3                   	retq   

0000000000005e68 <traverse_and_check>:

/* Traverse each chunk and check it; return total */
static size_t traverse_and_check(mstate m) {
    5e68:	55                   	push   %rbp
    5e69:	48 89 e5             	mov    %rsp,%rbp
    5e6c:	48 83 ec 30          	sub    $0x30,%rsp
    5e70:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  size_t sum = 0;
    5e74:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    5e7b:	00 
  if (is_initialized(m)) {
    5e7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5e80:	48 8b 40 28          	mov    0x28(%rax),%rax
    5e84:	48 85 c0             	test   %rax,%rax
    5e87:	0f 84 a4 01 00 00    	je     6031 <traverse_and_check+0x1c9>
    msegmentptr s = &m->seg;
    5e8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5e91:	48 05 78 03 00 00    	add    $0x378,%rax
    5e97:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    sum += m->topsize + TOP_FOOT_SIZE;
    5e9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5e9f:	48 8b 50 10          	mov    0x10(%rax),%rdx
    5ea3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5ea7:	48 01 d0             	add    %rdx,%rax
    5eaa:	48 83 c0 50          	add    $0x50,%rax
    5eae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    while (s != 0) {
    5eb2:	e9 6f 01 00 00       	jmpq   6026 <traverse_and_check+0x1be>
      mchunkptr q = align_as_chunk(s->base);
    5eb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5ebb:	48 8b 10             	mov    (%rax),%rdx
    5ebe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5ec2:	48 8b 00             	mov    (%rax),%rax
    5ec5:	48 83 c0 10          	add    $0x10,%rax
    5ec9:	83 e0 07             	and    $0x7,%eax
    5ecc:	48 85 c0             	test   %rax,%rax
    5ecf:	74 13                	je     5ee4 <traverse_and_check+0x7c>
    5ed1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5ed5:	48 8b 00             	mov    (%rax),%rax
    5ed8:	48 83 c0 10          	add    $0x10,%rax
    5edc:	48 f7 d8             	neg    %rax
    5edf:	83 e0 07             	and    $0x7,%eax
    5ee2:	eb 05                	jmp    5ee9 <traverse_and_check+0x81>
    5ee4:	b8 00 00 00 00       	mov    $0x0,%eax
    5ee9:	48 01 d0             	add    %rdx,%rax
    5eec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      mchunkptr lastq = 0;
    5ef0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    5ef7:	00 
      assert(pinuse(q));
    5ef8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5efc:	48 8b 40 08          	mov    0x8(%rax),%rax
    5f00:	83 e0 01             	and    $0x1,%eax
    5f03:	48 85 c0             	test   %rax,%rax
    5f06:	0f 85 c9 00 00 00    	jne    5fd5 <traverse_and_check+0x16d>
    5f0c:	e8 7d a0 02 00       	callq  2ff8e <abort>
      while (segment_holds(s, q) &&
             q != m->top && q->head != FENCEPOST_HEAD) {
        sum += chunksize(q);
    5f11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5f15:	48 8b 40 08          	mov    0x8(%rax),%rax
    5f19:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5f1d:	48 01 45 e0          	add    %rax,-0x20(%rbp)
        if (is_inuse(q)) {
    5f21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5f25:	48 8b 40 08          	mov    0x8(%rax),%rax
    5f29:	83 e0 03             	and    $0x3,%eax
    5f2c:	48 83 f8 01          	cmp    $0x1,%rax
    5f30:	74 31                	je     5f63 <traverse_and_check+0xfb>
          assert(!bin_find(m, q));
    5f32:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5f36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5f3a:	48 89 d6             	mov    %rdx,%rsi
    5f3d:	48 89 c7             	mov    %rax,%rdi
    5f40:	e8 3f fd ff ff       	callq  5c84 <bin_find>
    5f45:	85 c0                	test   %eax,%eax
    5f47:	74 05                	je     5f4e <traverse_and_check+0xe6>
    5f49:	e8 40 a0 02 00       	callq  2ff8e <abort>
          do_check_inuse_chunk(m, q);
    5f4e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5f52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5f56:	48 89 d6             	mov    %rdx,%rsi
    5f59:	48 89 c7             	mov    %rax,%rdi
    5f5c:	e8 f6 f4 ff ff       	callq  5457 <do_check_inuse_chunk>
    5f61:	eb 5a                	jmp    5fbd <traverse_and_check+0x155>
        }
        else {
          assert(q == m->dv || bin_find(m, q));
    5f63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5f67:	48 8b 40 20          	mov    0x20(%rax),%rax
    5f6b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5f6f:	74 1c                	je     5f8d <traverse_and_check+0x125>
    5f71:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5f75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5f79:	48 89 d6             	mov    %rdx,%rsi
    5f7c:	48 89 c7             	mov    %rax,%rdi
    5f7f:	e8 00 fd ff ff       	callq  5c84 <bin_find>
    5f84:	85 c0                	test   %eax,%eax
    5f86:	75 05                	jne    5f8d <traverse_and_check+0x125>
    5f88:	e8 01 a0 02 00       	callq  2ff8e <abort>
          assert(lastq == 0 || is_inuse(lastq)); /* Not 2 consecutive free */
    5f8d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    5f92:	74 16                	je     5faa <traverse_and_check+0x142>
    5f94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5f98:	48 8b 40 08          	mov    0x8(%rax),%rax
    5f9c:	83 e0 03             	and    $0x3,%eax
    5f9f:	48 83 f8 01          	cmp    $0x1,%rax
    5fa3:	75 05                	jne    5faa <traverse_and_check+0x142>
    5fa5:	e8 e4 9f 02 00       	callq  2ff8e <abort>
          do_check_free_chunk(m, q);
    5faa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5fae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5fb2:	48 89 d6             	mov    %rdx,%rsi
    5fb5:	48 89 c7             	mov    %rax,%rdi
    5fb8:	e8 70 f5 ff ff       	callq  552d <do_check_free_chunk>
        }
        lastq = q;
    5fbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5fc1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        q = next_chunk(q);
    5fc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5fc9:	48 8b 40 08          	mov    0x8(%rax),%rax
    5fcd:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    5fd1:	48 01 45 f0          	add    %rax,-0x10(%rbp)
      while (segment_holds(s, q) &&
    5fd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5fd9:	48 8b 00             	mov    (%rax),%rax
    5fdc:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5fe0:	72 38                	jb     601a <traverse_and_check+0x1b2>
    5fe2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5fe6:	48 8b 10             	mov    (%rax),%rdx
    5fe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5fed:	48 8b 40 08          	mov    0x8(%rax),%rax
    5ff1:	48 01 d0             	add    %rdx,%rax
    5ff4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    5ff8:	73 20                	jae    601a <traverse_and_check+0x1b2>
             q != m->top && q->head != FENCEPOST_HEAD) {
    5ffa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5ffe:	48 8b 40 28          	mov    0x28(%rax),%rax
      while (segment_holds(s, q) &&
    6002:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    6006:	74 12                	je     601a <traverse_and_check+0x1b2>
             q != m->top && q->head != FENCEPOST_HEAD) {
    6008:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    600c:	48 8b 40 08          	mov    0x8(%rax),%rax
    6010:	48 83 f8 0b          	cmp    $0xb,%rax
    6014:	0f 85 f7 fe ff ff    	jne    5f11 <traverse_and_check+0xa9>
      }
      s = s->next;
    601a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    601e:	48 8b 40 10          	mov    0x10(%rax),%rax
    6022:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while (s != 0) {
    6026:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    602b:	0f 85 86 fe ff ff    	jne    5eb7 <traverse_and_check+0x4f>
    }
  }
  return sum;
    6031:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
}
    6035:	c9                   	leaveq 
    6036:	c3                   	retq   

0000000000006037 <do_check_malloc_state>:


/* Check all properties of malloc_state. */
static void do_check_malloc_state(mstate m) {
    6037:	55                   	push   %rbp
    6038:	48 89 e5             	mov    %rsp,%rbp
    603b:	48 83 ec 20          	sub    $0x20,%rsp
    603f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  bindex_t i;
  size_t total;
  /* check bins */
  for (i = 0; i < NSMALLBINS; ++i)
    6043:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    604a:	eb 15                	jmp    6061 <do_check_malloc_state+0x2a>
    do_check_smallbin(m, i);
    604c:	8b 55 f4             	mov    -0xc(%rbp),%edx
    604f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6053:	89 d6                	mov    %edx,%esi
    6055:	48 89 c7             	mov    %rax,%rdi
    6058:	e8 e5 fa ff ff       	callq  5b42 <do_check_smallbin>
  for (i = 0; i < NSMALLBINS; ++i)
    605d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    6061:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
    6065:	76 e5                	jbe    604c <do_check_malloc_state+0x15>
  for (i = 0; i < NTREEBINS; ++i)
    6067:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    606e:	eb 15                	jmp    6085 <do_check_malloc_state+0x4e>
    do_check_treebin(m, i);
    6070:	8b 55 f4             	mov    -0xc(%rbp),%edx
    6073:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6077:	89 d6                	mov    %edx,%esi
    6079:	48 89 c7             	mov    %rax,%rdi
    607c:	e8 39 fa ff ff       	callq  5aba <do_check_treebin>
  for (i = 0; i < NTREEBINS; ++i)
    6081:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    6085:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
    6089:	76 e5                	jbe    6070 <do_check_malloc_state+0x39>

  if (m->dvsize != 0) { /* check dv chunk */
    608b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    608f:	48 8b 40 08          	mov    0x8(%rax),%rax
    6093:	48 85 c0             	test   %rax,%rax
    6096:	74 6c                	je     6104 <do_check_malloc_state+0xcd>
    do_check_any_chunk(m, m->dv);
    6098:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    609c:	48 8b 50 20          	mov    0x20(%rax),%rdx
    60a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    60a4:	48 89 d6             	mov    %rdx,%rsi
    60a7:	48 89 c7             	mov    %rax,%rdi
    60aa:	e8 15 f2 ff ff       	callq  52c4 <do_check_any_chunk>
    assert(m->dvsize == chunksize(m->dv));
    60af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    60b3:	48 8b 50 08          	mov    0x8(%rax),%rdx
    60b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    60bb:	48 8b 40 20          	mov    0x20(%rax),%rax
    60bf:	48 8b 40 08          	mov    0x8(%rax),%rax
    60c3:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    60c7:	48 39 c2             	cmp    %rax,%rdx
    60ca:	74 05                	je     60d1 <do_check_malloc_state+0x9a>
    60cc:	e8 bd 9e 02 00       	callq  2ff8e <abort>
    assert(m->dvsize >= MIN_CHUNK_SIZE);
    60d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    60d5:	48 8b 40 08          	mov    0x8(%rax),%rax
    60d9:	48 83 f8 1f          	cmp    $0x1f,%rax
    60dd:	77 05                	ja     60e4 <do_check_malloc_state+0xad>
    60df:	e8 aa 9e 02 00       	callq  2ff8e <abort>
    assert(bin_find(m, m->dv) == 0);
    60e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    60e8:	48 8b 50 20          	mov    0x20(%rax),%rdx
    60ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    60f0:	48 89 d6             	mov    %rdx,%rsi
    60f3:	48 89 c7             	mov    %rax,%rdi
    60f6:	e8 89 fb ff ff       	callq  5c84 <bin_find>
    60fb:	85 c0                	test   %eax,%eax
    60fd:	74 05                	je     6104 <do_check_malloc_state+0xcd>
    60ff:	e8 8a 9e 02 00       	callq  2ff8e <abort>
  }

  if (m->top != 0) {   /* check top chunk */
    6104:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6108:	48 8b 40 28          	mov    0x28(%rax),%rax
    610c:	48 85 c0             	test   %rax,%rax
    610f:	74 49                	je     615a <do_check_malloc_state+0x123>
    do_check_top_chunk(m, m->top);
    6111:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6115:	48 8b 50 28          	mov    0x28(%rax),%rdx
    6119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    611d:	48 89 d6             	mov    %rdx,%rsi
    6120:	48 89 c7             	mov    %rax,%rdi
    6123:	e8 e5 f1 ff ff       	callq  530d <do_check_top_chunk>
    /*assert(m->topsize == chunksize(m->top)); redundant */
    assert(m->topsize > 0);
    6128:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    612c:	48 8b 40 10          	mov    0x10(%rax),%rax
    6130:	48 85 c0             	test   %rax,%rax
    6133:	75 05                	jne    613a <do_check_malloc_state+0x103>
    6135:	e8 54 9e 02 00       	callq  2ff8e <abort>
    assert(bin_find(m, m->top) == 0);
    613a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    613e:	48 8b 50 28          	mov    0x28(%rax),%rdx
    6142:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6146:	48 89 d6             	mov    %rdx,%rsi
    6149:	48 89 c7             	mov    %rax,%rdi
    614c:	e8 33 fb ff ff       	callq  5c84 <bin_find>
    6151:	85 c0                	test   %eax,%eax
    6153:	74 05                	je     615a <do_check_malloc_state+0x123>
    6155:	e8 34 9e 02 00       	callq  2ff8e <abort>
  }

  total = traverse_and_check(m);
    615a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    615e:	48 89 c7             	mov    %rax,%rdi
    6161:	e8 02 fd ff ff       	callq  5e68 <traverse_and_check>
    6166:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  assert(total <= m->footprint);
    616a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    616e:	48 8b 80 58 03 00 00 	mov    0x358(%rax),%rax
    6175:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    6179:	76 05                	jbe    6180 <do_check_malloc_state+0x149>
    617b:	e8 0e 9e 02 00       	callq  2ff8e <abort>
  assert(m->footprint <= m->max_footprint);
    6180:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6184:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    618b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    618f:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
    6196:	48 39 c2             	cmp    %rax,%rdx
    6199:	76 05                	jbe    61a0 <do_check_malloc_state+0x169>
    619b:	e8 ee 9d 02 00       	callq  2ff8e <abort>
}
    61a0:	90                   	nop
    61a1:	c9                   	leaveq 
    61a2:	c3                   	retq   

00000000000061a3 <internal_mallinfo>:
#endif /* DEBUG */

/* ----------------------------- statistics ------------------------------ */

#if !NO_MALLINFO
static struct mallinfo internal_mallinfo(mstate m) {
    61a3:	55                   	push   %rbp
    61a4:	48 89 e5             	mov    %rsp,%rbp
    61a7:	48 83 ec 70          	sub    $0x70,%rsp
    61ab:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    61af:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  struct mallinfo nm = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    61b3:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    61ba:	00 
    61bb:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    61c2:	00 
    61c3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    61ca:	00 
    61cb:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    61d2:	00 
    61d3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    61da:	00 
  ensure_initialization();
    61db:	48 8b 05 be f7 22 00 	mov    0x22f7be(%rip),%rax        # 2359a0 <mparams>
    61e2:	48 85 c0             	test   %rax,%rax
    61e5:	75 07                	jne    61ee <internal_mallinfo+0x4b>
    61e7:	e8 ef ee ff ff       	callq  50db <init_mparams>
    61ec:	85 c0                	test   %eax,%eax
    61ee:	90                   	nop
  if (!PREACTION(m)) {
    61ef:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    61f3:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    61f9:	83 e0 02             	and    $0x2,%eax
    61fc:	85 c0                	test   %eax,%eax
    61fe:	74 30                	je     6230 <internal_mallinfo+0x8d>
    6200:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6204:	48 8d 90 74 03 00 00 	lea    0x374(%rax),%rdx
    620b:	b8 01 00 00 00       	mov    $0x1,%eax
    6210:	87 02                	xchg   %eax,(%rdx)
    6212:	85 c0                	test   %eax,%eax
    6214:	74 1a                	je     6230 <internal_mallinfo+0x8d>
    6216:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    621a:	48 05 74 03 00 00    	add    $0x374,%rax
    6220:	48 89 c7             	mov    %rax,%rdi
    6223:	e8 bf ed ff ff       	callq  4fe7 <spin_acquire_lock>
    6228:	85 c0                	test   %eax,%eax
    622a:	0f 85 ad 01 00 00    	jne    63dd <internal_mallinfo+0x23a>
    check_malloc_state(m);
    6230:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6234:	48 89 c7             	mov    %rax,%rdi
    6237:	e8 fb fd ff ff       	callq  6037 <do_check_malloc_state>
    if (is_initialized(m)) {
    623c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6240:	48 8b 40 28          	mov    0x28(%rax),%rax
    6244:	48 85 c0             	test   %rax,%rax
    6247:	0f 84 6e 01 00 00    	je     63bb <internal_mallinfo+0x218>
      size_t nfree = SIZE_T_ONE; /* top always free */
    624d:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
    6254:	00 
      size_t mfree = m->topsize + TOP_FOOT_SIZE;
    6255:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6259:	48 8b 40 10          	mov    0x10(%rax),%rax
    625d:	48 83 c0 50          	add    $0x50,%rax
    6261:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
      size_t sum = mfree;
    6265:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    6269:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      msegmentptr s = &m->seg;
    626d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6271:	48 05 78 03 00 00    	add    $0x378,%rax
    6277:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
      while (s != 0) {
    627b:	e9 d2 00 00 00       	jmpq   6352 <internal_mallinfo+0x1af>
        mchunkptr q = align_as_chunk(s->base);
    6280:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6284:	48 8b 10             	mov    (%rax),%rdx
    6287:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    628b:	48 8b 00             	mov    (%rax),%rax
    628e:	48 83 c0 10          	add    $0x10,%rax
    6292:	83 e0 07             	and    $0x7,%eax
    6295:	48 85 c0             	test   %rax,%rax
    6298:	74 13                	je     62ad <internal_mallinfo+0x10a>
    629a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    629e:	48 8b 00             	mov    (%rax),%rax
    62a1:	48 83 c0 10          	add    $0x10,%rax
    62a5:	48 f7 d8             	neg    %rax
    62a8:	83 e0 07             	and    $0x7,%eax
    62ab:	eb 05                	jmp    62b2 <internal_mallinfo+0x10f>
    62ad:	b8 00 00 00 00       	mov    $0x0,%eax
    62b2:	48 01 d0             	add    %rdx,%rax
    62b5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        while (segment_holds(s, q) &&
    62b9:	eb 46                	jmp    6301 <internal_mallinfo+0x15e>
               q != m->top && q->head != FENCEPOST_HEAD) {
          size_t sz = chunksize(q);
    62bb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    62bf:	48 8b 40 08          	mov    0x8(%rax),%rax
    62c3:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    62c7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
          sum += sz;
    62cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    62cf:	48 01 45 b0          	add    %rax,-0x50(%rbp)
          if (!is_inuse(q)) {
    62d3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    62d7:	48 8b 40 08          	mov    0x8(%rax),%rax
    62db:	83 e0 03             	and    $0x3,%eax
    62de:	48 83 f8 01          	cmp    $0x1,%rax
    62e2:	75 0d                	jne    62f1 <internal_mallinfo+0x14e>
            mfree += sz;
    62e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    62e8:	48 01 45 a8          	add    %rax,-0x58(%rbp)
            ++nfree;
    62ec:	48 83 45 a0 01       	addq   $0x1,-0x60(%rbp)
          }
          q = next_chunk(q);
    62f1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    62f5:	48 8b 40 08          	mov    0x8(%rax),%rax
    62f9:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    62fd:	48 01 45 c0          	add    %rax,-0x40(%rbp)
        while (segment_holds(s, q) &&
    6301:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6305:	48 8b 00             	mov    (%rax),%rax
    6308:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    630c:	72 38                	jb     6346 <internal_mallinfo+0x1a3>
    630e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6312:	48 8b 10             	mov    (%rax),%rdx
    6315:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6319:	48 8b 40 08          	mov    0x8(%rax),%rax
    631d:	48 01 d0             	add    %rdx,%rax
    6320:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    6324:	73 20                	jae    6346 <internal_mallinfo+0x1a3>
               q != m->top && q->head != FENCEPOST_HEAD) {
    6326:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    632a:	48 8b 40 28          	mov    0x28(%rax),%rax
        while (segment_holds(s, q) &&
    632e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    6332:	74 12                	je     6346 <internal_mallinfo+0x1a3>
               q != m->top && q->head != FENCEPOST_HEAD) {
    6334:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    6338:	48 8b 40 08          	mov    0x8(%rax),%rax
    633c:	48 83 f8 0b          	cmp    $0xb,%rax
    6340:	0f 85 75 ff ff ff    	jne    62bb <internal_mallinfo+0x118>
        }
        s = s->next;
    6346:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    634a:	48 8b 40 10          	mov    0x10(%rax),%rax
    634e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
      while (s != 0) {
    6352:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    6357:	0f 85 23 ff ff ff    	jne    6280 <internal_mallinfo+0xdd>
      }

      nm.arena    = sum;
    635d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    6361:	89 45 d0             	mov    %eax,-0x30(%rbp)
      nm.ordblks  = nfree;
    6364:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    6368:	89 45 d4             	mov    %eax,-0x2c(%rbp)
      nm.hblkhd   = m->footprint - sum;
    636b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    636f:	48 8b 80 58 03 00 00 	mov    0x358(%rax),%rax
    6376:	89 c2                	mov    %eax,%edx
    6378:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    637c:	29 c2                	sub    %eax,%edx
    637e:	89 d0                	mov    %edx,%eax
    6380:	89 45 e0             	mov    %eax,-0x20(%rbp)
      nm.usmblks  = m->max_footprint;
    6383:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6387:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
    638e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
      nm.uordblks = m->footprint - mfree;
    6391:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    6395:	48 8b 80 58 03 00 00 	mov    0x358(%rax),%rax
    639c:	89 c2                	mov    %eax,%edx
    639e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    63a2:	29 c2                	sub    %eax,%edx
    63a4:	89 d0                	mov    %edx,%eax
    63a6:	89 45 ec             	mov    %eax,-0x14(%rbp)
      nm.fordblks = mfree;
    63a9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    63ad:	89 45 f0             	mov    %eax,-0x10(%rbp)
      nm.keepcost = m->topsize;
    63b0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    63b4:	48 8b 40 10          	mov    0x10(%rax),%rax
    63b8:	89 45 f4             	mov    %eax,-0xc(%rbp)
    }

    POSTACTION(m);
    63bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    63bf:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    63c5:	83 e0 02             	and    $0x2,%eax
    63c8:	85 c0                	test   %eax,%eax
    63ca:	74 11                	je     63dd <internal_mallinfo+0x23a>
    63cc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    63d0:	48 05 74 03 00 00    	add    $0x374,%rax
    63d6:	ba 00 00 00 00       	mov    $0x0,%edx
    63db:	89 10                	mov    %edx,(%rax)
  }
  return nm;
    63dd:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
    63e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    63e5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    63e9:	48 89 01             	mov    %rax,(%rcx)
    63ec:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    63f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    63f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    63f8:	48 89 41 10          	mov    %rax,0x10(%rcx)
    63fc:	48 89 51 18          	mov    %rdx,0x18(%rcx)
    6400:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6404:	48 89 41 20          	mov    %rax,0x20(%rcx)
}
    6408:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    640c:	c9                   	leaveq 
    640d:	c3                   	retq   

000000000000640e <internal_malloc_stats>:
#endif /* !NO_MALLINFO */

#if !NO_MALLOC_STATS
static void internal_malloc_stats(mstate m) {
    640e:	55                   	push   %rbp
    640f:	48 89 e5             	mov    %rsp,%rbp
    6412:	48 83 ec 40          	sub    $0x40,%rsp
    6416:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  ensure_initialization();
    641a:	48 8b 05 7f f5 22 00 	mov    0x22f57f(%rip),%rax        # 2359a0 <mparams>
    6421:	48 85 c0             	test   %rax,%rax
    6424:	75 07                	jne    642d <internal_malloc_stats+0x1f>
    6426:	e8 b0 ec ff ff       	callq  50db <init_mparams>
    642b:	85 c0                	test   %eax,%eax
    642d:	90                   	nop
  if (!PREACTION(m)) {
    642e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6432:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    6438:	83 e0 02             	and    $0x2,%eax
    643b:	85 c0                	test   %eax,%eax
    643d:	74 30                	je     646f <internal_malloc_stats+0x61>
    643f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6443:	48 8d 90 74 03 00 00 	lea    0x374(%rax),%rdx
    644a:	b8 01 00 00 00       	mov    $0x1,%eax
    644f:	87 02                	xchg   %eax,(%rdx)
    6451:	85 c0                	test   %eax,%eax
    6453:	74 1a                	je     646f <internal_malloc_stats+0x61>
    6455:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6459:	48 05 74 03 00 00    	add    $0x374,%rax
    645f:	48 89 c7             	mov    %rax,%rdi
    6462:	e8 80 eb ff ff       	callq  4fe7 <spin_acquire_lock>
    6467:	85 c0                	test   %eax,%eax
    6469:	0f 85 66 01 00 00    	jne    65d5 <internal_malloc_stats+0x1c7>
    size_t maxfp = 0;
    646f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    6476:	00 
    size_t fp = 0;
    6477:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    647e:	00 
    size_t used = 0;
    647f:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    6486:	00 
    check_malloc_state(m);
    6487:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    648b:	48 89 c7             	mov    %rax,%rdi
    648e:	e8 a4 fb ff ff       	callq  6037 <do_check_malloc_state>
    if (is_initialized(m)) {
    6493:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6497:	48 8b 40 28          	mov    0x28(%rax),%rax
    649b:	48 85 c0             	test   %rax,%rax
    649e:	0f 84 0f 01 00 00    	je     65b3 <internal_malloc_stats+0x1a5>
      msegmentptr s = &m->seg;
    64a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64a8:	48 05 78 03 00 00    	add    $0x378,%rax
    64ae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      maxfp = m->max_footprint;
    64b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64b6:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
    64bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      fp = m->footprint;
    64c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64c5:	48 8b 80 58 03 00 00 	mov    0x358(%rax),%rax
    64cc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      used = fp - (m->topsize + TOP_FOOT_SIZE);
    64d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64d4:	48 8b 40 10          	mov    0x10(%rax),%rax
    64d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    64dc:	48 29 c2             	sub    %rax,%rdx
    64df:	48 89 d0             	mov    %rdx,%rax
    64e2:	48 83 e8 50          	sub    $0x50,%rax
    64e6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

      while (s != 0) {
    64ea:	e9 b9 00 00 00       	jmpq   65a8 <internal_malloc_stats+0x19a>
        mchunkptr q = align_as_chunk(s->base);
    64ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    64f3:	48 8b 10             	mov    (%rax),%rdx
    64f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    64fa:	48 8b 00             	mov    (%rax),%rax
    64fd:	48 83 c0 10          	add    $0x10,%rax
    6501:	83 e0 07             	and    $0x7,%eax
    6504:	48 85 c0             	test   %rax,%rax
    6507:	74 13                	je     651c <internal_malloc_stats+0x10e>
    6509:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    650d:	48 8b 00             	mov    (%rax),%rax
    6510:	48 83 c0 10          	add    $0x10,%rax
    6514:	48 f7 d8             	neg    %rax
    6517:	83 e0 07             	and    $0x7,%eax
    651a:	eb 05                	jmp    6521 <internal_malloc_stats+0x113>
    651c:	b8 00 00 00 00       	mov    $0x0,%eax
    6521:	48 01 d0             	add    %rdx,%rax
    6524:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        while (segment_holds(s, q) &&
    6528:	eb 31                	jmp    655b <internal_malloc_stats+0x14d>
               q != m->top && q->head != FENCEPOST_HEAD) {
          if (!is_inuse(q))
    652a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    652e:	48 8b 40 08          	mov    0x8(%rax),%rax
    6532:	83 e0 03             	and    $0x3,%eax
    6535:	48 83 f8 01          	cmp    $0x1,%rax
    6539:	75 10                	jne    654b <internal_malloc_stats+0x13d>
            used -= chunksize(q);
    653b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    653f:	48 8b 40 08          	mov    0x8(%rax),%rax
    6543:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    6547:	48 29 45 d8          	sub    %rax,-0x28(%rbp)
          q = next_chunk(q);
    654b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    654f:	48 8b 40 08          	mov    0x8(%rax),%rax
    6553:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    6557:	48 01 45 e8          	add    %rax,-0x18(%rbp)
        while (segment_holds(s, q) &&
    655b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    655f:	48 8b 00             	mov    (%rax),%rax
    6562:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    6566:	72 34                	jb     659c <internal_malloc_stats+0x18e>
    6568:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    656c:	48 8b 10             	mov    (%rax),%rdx
    656f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6573:	48 8b 40 08          	mov    0x8(%rax),%rax
    6577:	48 01 d0             	add    %rdx,%rax
    657a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    657e:	73 1c                	jae    659c <internal_malloc_stats+0x18e>
               q != m->top && q->head != FENCEPOST_HEAD) {
    6580:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6584:	48 8b 40 28          	mov    0x28(%rax),%rax
        while (segment_holds(s, q) &&
    6588:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    658c:	74 0e                	je     659c <internal_malloc_stats+0x18e>
               q != m->top && q->head != FENCEPOST_HEAD) {
    658e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6592:	48 8b 40 08          	mov    0x8(%rax),%rax
    6596:	48 83 f8 0b          	cmp    $0xb,%rax
    659a:	75 8e                	jne    652a <internal_malloc_stats+0x11c>
        }
        s = s->next;
    659c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    65a0:	48 8b 40 10          	mov    0x10(%rax),%rax
    65a4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      while (s != 0) {
    65a8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    65ad:	0f 85 3c ff ff ff    	jne    64ef <internal_malloc_stats+0xe1>
      }
    }
    POSTACTION(m); /* drop lock */
    65b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    65b7:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    65bd:	83 e0 02             	and    $0x2,%eax
    65c0:	85 c0                	test   %eax,%eax
    65c2:	74 11                	je     65d5 <internal_malloc_stats+0x1c7>
    65c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    65c8:	48 05 74 03 00 00    	add    $0x374,%rax
    65ce:	ba 00 00 00 00       	mov    $0x0,%edx
    65d3:	89 10                	mov    %edx,(%rax)
    fprintf(stderr, "max system bytes = %10lu\n", (unsigned long)(maxfp));
    fprintf(stderr, "system bytes     = %10lu\n", (unsigned long)(fp));
    fprintf(stderr, "in use bytes     = %10lu\n", (unsigned long)(used));
#endif
  }
}
    65d5:	90                   	nop
    65d6:	c9                   	leaveq 
    65d7:	c3                   	retq   

00000000000065d8 <mmap_alloc>:
  and also allows adjustment of the returned chunk to meet alignment
  requirements (especially in memalign).
*/

/* Malloc using mmap */
static void* mmap_alloc(mstate m, size_t nb) {
    65d8:	55                   	push   %rbp
    65d9:	48 89 e5             	mov    %rsp,%rbp
    65dc:	48 83 ec 40          	sub    $0x40,%rsp
    65e0:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    65e4:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  size_t mmsize = mmap_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
    65e8:	48 8b 15 b9 f3 22 00 	mov    0x22f3b9(%rip),%rdx        # 2359a8 <mparams+0x8>
    65ef:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    65f3:	48 01 d0             	add    %rdx,%rax
    65f6:	48 8d 50 36          	lea    0x36(%rax),%rdx
    65fa:	48 8b 05 a7 f3 22 00 	mov    0x22f3a7(%rip),%rax        # 2359a8 <mparams+0x8>
    6601:	48 f7 d8             	neg    %rax
    6604:	48 21 d0             	and    %rdx,%rax
    6607:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  if (m->footprint_limit != 0) {
    660b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    660f:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
    6616:	48 85 c0             	test   %rax,%rax
    6619:	74 42                	je     665d <mmap_alloc+0x85>
    size_t fp = m->footprint + mmsize;
    661b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    661f:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    6626:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    662a:	48 01 d0             	add    %rdx,%rax
    662d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if (fp <= m->footprint || fp > m->footprint_limit)
    6631:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6635:	48 8b 80 58 03 00 00 	mov    0x358(%rax),%rax
    663c:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    6640:	76 11                	jbe    6653 <mmap_alloc+0x7b>
    6642:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6646:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
    664d:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    6651:	76 0a                	jbe    665d <mmap_alloc+0x85>
      return 0;
    6653:	b8 00 00 00 00       	mov    $0x0,%eax
    6658:	e9 72 01 00 00       	jmpq   67cf <mmap_alloc+0x1f7>
  }
  if (mmsize > nb) {     /* Check for wrap around 0 */
    665d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6661:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
    6665:	0f 86 5f 01 00 00    	jbe    67ca <mmap_alloc+0x1f2>
    char* mm = (char*)(CALL_DIRECT_MMAP(mmsize));
    666b:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
    6672:	ff 
    if (mm != CMFAIL) {
    6673:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
    6678:	0f 84 4c 01 00 00    	je     67ca <mmap_alloc+0x1f2>
      size_t offset = align_offset(chunk2mem(mm));
    667e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6682:	48 83 c0 10          	add    $0x10,%rax
    6686:	83 e0 07             	and    $0x7,%eax
    6689:	48 85 c0             	test   %rax,%rax
    668c:	74 10                	je     669e <mmap_alloc+0xc6>
    668e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6692:	48 83 c0 10          	add    $0x10,%rax
    6696:	48 f7 d8             	neg    %rax
    6699:	83 e0 07             	and    $0x7,%eax
    669c:	eb 05                	jmp    66a3 <mmap_alloc+0xcb>
    669e:	b8 00 00 00 00       	mov    $0x0,%eax
    66a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      size_t psize = mmsize - offset - MMAP_FOOT_PAD;
    66a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    66ab:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    66af:	48 83 e8 20          	sub    $0x20,%rax
    66b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      mchunkptr p = (mchunkptr)(mm + offset);
    66b7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    66bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    66bf:	48 01 d0             	add    %rdx,%rax
    66c2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      p->prev_foot = offset;
    66c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    66ca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    66ce:	48 89 10             	mov    %rdx,(%rax)
      p->head = psize;
    66d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    66d5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    66d9:	48 89 50 08          	mov    %rdx,0x8(%rax)
      mark_inuse_foot(m, p, psize);
    66dd:	48 8b 0d bc f2 22 00 	mov    0x22f2bc(%rip),%rcx        # 2359a0 <mparams>
    66e4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    66e8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    66ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    66f0:	48 01 f0             	add    %rsi,%rax
    66f3:	48 31 ca             	xor    %rcx,%rdx
    66f6:	48 89 10             	mov    %rdx,(%rax)
      chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
    66f9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    66fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6701:	48 01 d0             	add    %rdx,%rax
    6704:	48 c7 40 08 0b 00 00 	movq   $0xb,0x8(%rax)
    670b:	00 
      chunk_plus_offset(p, psize+SIZE_T_SIZE)->head = 0;
    670c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6710:	48 8d 50 08          	lea    0x8(%rax),%rdx
    6714:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6718:	48 01 d0             	add    %rdx,%rax
    671b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    6722:	00 

      if (m->least_addr == 0 || mm < m->least_addr)
    6723:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6727:	48 8b 40 18          	mov    0x18(%rax),%rax
    672b:	48 85 c0             	test   %rax,%rax
    672e:	74 0e                	je     673e <mmap_alloc+0x166>
    6730:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6734:	48 8b 40 18          	mov    0x18(%rax),%rax
    6738:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    673c:	73 0c                	jae    674a <mmap_alloc+0x172>
        m->least_addr = mm;
    673e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6742:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    6746:	48 89 50 18          	mov    %rdx,0x18(%rax)
      if ((m->footprint += mmsize) > m->max_footprint)
    674a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    674e:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    6755:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6759:	48 01 c2             	add    %rax,%rdx
    675c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6760:	48 89 90 58 03 00 00 	mov    %rdx,0x358(%rax)
    6767:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    676b:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    6772:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6776:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
    677d:	48 39 c2             	cmp    %rax,%rdx
    6780:	76 16                	jbe    6798 <mmap_alloc+0x1c0>
        m->max_footprint = m->footprint;
    6782:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6786:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    678d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6791:	48 89 90 60 03 00 00 	mov    %rdx,0x360(%rax)
      assert(is_aligned(chunk2mem(p)));
    6798:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    679c:	48 83 c0 10          	add    $0x10,%rax
    67a0:	83 e0 07             	and    $0x7,%eax
    67a3:	48 85 c0             	test   %rax,%rax
    67a6:	74 05                	je     67ad <mmap_alloc+0x1d5>
    67a8:	e8 e1 97 02 00       	callq  2ff8e <abort>
      check_mmapped_chunk(m, p);
    67ad:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    67b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    67b5:	48 89 d6             	mov    %rdx,%rsi
    67b8:	48 89 c7             	mov    %rax,%rdi
    67bb:	e8 47 ec ff ff       	callq  5407 <do_check_mmapped_chunk>
      return chunk2mem(p);
    67c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    67c4:	48 83 c0 10          	add    $0x10,%rax
    67c8:	eb 05                	jmp    67cf <mmap_alloc+0x1f7>
    }
  }
  return 0;
    67ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
    67cf:	c9                   	leaveq 
    67d0:	c3                   	retq   

00000000000067d1 <mmap_resize>:

/* Realloc using mmap */
static mchunkptr mmap_resize(mstate m, mchunkptr oldp, size_t nb, int flags) {
    67d1:	55                   	push   %rbp
    67d2:	48 89 e5             	mov    %rsp,%rbp
    67d5:	48 83 ec 60          	sub    $0x60,%rsp
    67d9:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    67dd:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    67e1:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    67e5:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  size_t oldsize = chunksize(oldp);
    67e8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    67ec:	48 8b 40 08          	mov    0x8(%rax),%rax
    67f0:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    67f4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  (void)flags; /* placate people compiling -Wunused */
  if (is_small(nb)) /* Can't shrink mmap regions below small size */
    67f8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    67fc:	48 c1 e8 03          	shr    $0x3,%rax
    6800:	48 83 f8 1f          	cmp    $0x1f,%rax
    6804:	77 0a                	ja     6810 <mmap_resize+0x3f>
    return 0;
    6806:	b8 00 00 00 00       	mov    $0x0,%eax
    680b:	e9 7d 01 00 00       	jmpq   698d <mmap_resize+0x1bc>
  /* Keep old chunk if big enough but not too big */
  if (oldsize >= nb + SIZE_T_SIZE &&
    6810:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    6814:	48 83 c0 08          	add    $0x8,%rax
    6818:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
    681c:	72 20                	jb     683e <mmap_resize+0x6d>
      (oldsize - nb) <= (mparams.granularity << 1))
    681e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6822:	48 2b 45 a8          	sub    -0x58(%rbp),%rax
    6826:	48 8b 15 83 f1 22 00 	mov    0x22f183(%rip),%rdx        # 2359b0 <mparams+0x10>
    682d:	48 01 d2             	add    %rdx,%rdx
  if (oldsize >= nb + SIZE_T_SIZE &&
    6830:	48 39 d0             	cmp    %rdx,%rax
    6833:	77 09                	ja     683e <mmap_resize+0x6d>
    return oldp;
    6835:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    6839:	e9 4f 01 00 00       	jmpq   698d <mmap_resize+0x1bc>
  else {
    size_t offset = oldp->prev_foot;
    683e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    6842:	48 8b 00             	mov    (%rax),%rax
    6845:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    size_t oldmmsize = oldsize + offset + MMAP_FOOT_PAD;
    6849:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    684d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6851:	48 01 d0             	add    %rdx,%rax
    6854:	48 83 c0 20          	add    $0x20,%rax
    6858:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    size_t newmmsize = mmap_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
    685c:	48 8b 15 45 f1 22 00 	mov    0x22f145(%rip),%rdx        # 2359a8 <mparams+0x8>
    6863:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    6867:	48 01 d0             	add    %rdx,%rax
    686a:	48 8d 50 36          	lea    0x36(%rax),%rdx
    686e:	48 8b 05 33 f1 22 00 	mov    0x22f133(%rip),%rax        # 2359a8 <mparams+0x8>
    6875:	48 f7 d8             	neg    %rax
    6878:	48 21 d0             	and    %rdx,%rax
    687b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    char* cp = (char*)CALL_MREMAP((char*)oldp - offset,
    687f:	48 c7 45 e8 ff ff ff 	movq   $0xffffffffffffffff,-0x18(%rbp)
    6886:	ff 
                                  oldmmsize, newmmsize, flags);
    if (cp != CMFAIL) {
    6887:	48 83 7d e8 ff       	cmpq   $0xffffffffffffffff,-0x18(%rbp)
    688c:	0f 84 f6 00 00 00    	je     6988 <mmap_resize+0x1b7>
      mchunkptr newp = (mchunkptr)(cp + offset);
    6892:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6896:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    689a:	48 01 d0             	add    %rdx,%rax
    689d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      size_t psize = newmmsize - offset - MMAP_FOOT_PAD;
    68a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    68a5:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
    68a9:	48 83 e8 20          	sub    $0x20,%rax
    68ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      newp->head = psize;
    68b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    68b5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    68b9:	48 89 50 08          	mov    %rdx,0x8(%rax)
      mark_inuse_foot(m, newp, psize);
    68bd:	48 8b 0d dc f0 22 00 	mov    0x22f0dc(%rip),%rcx        # 2359a0 <mparams>
    68c4:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    68c8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    68cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    68d0:	48 01 f0             	add    %rsi,%rax
    68d3:	48 31 ca             	xor    %rcx,%rdx
    68d6:	48 89 10             	mov    %rdx,(%rax)
      chunk_plus_offset(newp, psize)->head = FENCEPOST_HEAD;
    68d9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    68dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    68e1:	48 01 d0             	add    %rdx,%rax
    68e4:	48 c7 40 08 0b 00 00 	movq   $0xb,0x8(%rax)
    68eb:	00 
      chunk_plus_offset(newp, psize+SIZE_T_SIZE)->head = 0;
    68ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    68f0:	48 8d 50 08          	lea    0x8(%rax),%rdx
    68f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    68f8:	48 01 d0             	add    %rdx,%rax
    68fb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    6902:	00 

      if (cp < m->least_addr)
    6903:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6907:	48 8b 40 18          	mov    0x18(%rax),%rax
    690b:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    690f:	73 0c                	jae    691d <mmap_resize+0x14c>
        m->least_addr = cp;
    6911:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6915:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    6919:	48 89 50 18          	mov    %rdx,0x18(%rax)
      if ((m->footprint += newmmsize - oldmmsize) > m->max_footprint)
    691d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6921:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    6928:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    692c:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
    6930:	48 01 c2             	add    %rax,%rdx
    6933:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6937:	48 89 90 58 03 00 00 	mov    %rdx,0x358(%rax)
    693e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6942:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    6949:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    694d:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
    6954:	48 39 c2             	cmp    %rax,%rdx
    6957:	76 16                	jbe    696f <mmap_resize+0x19e>
        m->max_footprint = m->footprint;
    6959:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    695d:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    6964:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6968:	48 89 90 60 03 00 00 	mov    %rdx,0x360(%rax)
      check_mmapped_chunk(m, newp);
    696f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    6973:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6977:	48 89 d6             	mov    %rdx,%rsi
    697a:	48 89 c7             	mov    %rax,%rdi
    697d:	e8 85 ea ff ff       	callq  5407 <do_check_mmapped_chunk>
      return newp;
    6982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6986:	eb 05                	jmp    698d <mmap_resize+0x1bc>
    }
  }
  return 0;
    6988:	b8 00 00 00 00       	mov    $0x0,%eax
}
    698d:	c9                   	leaveq 
    698e:	c3                   	retq   

000000000000698f <init_top>:


/* -------------------------- mspace management -------------------------- */

/* Initialize top chunk and its size */
static void init_top(mstate m, mchunkptr p, size_t psize) {
    698f:	55                   	push   %rbp
    6990:	48 89 e5             	mov    %rsp,%rbp
    6993:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    6997:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    699b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  /* Ensure alignment */
  size_t offset = align_offset(chunk2mem(p));
    699f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    69a3:	48 83 c0 10          	add    $0x10,%rax
    69a7:	83 e0 07             	and    $0x7,%eax
    69aa:	48 85 c0             	test   %rax,%rax
    69ad:	74 10                	je     69bf <init_top+0x30>
    69af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    69b3:	48 83 c0 10          	add    $0x10,%rax
    69b7:	48 f7 d8             	neg    %rax
    69ba:	83 e0 07             	and    $0x7,%eax
    69bd:	eb 05                	jmp    69c4 <init_top+0x35>
    69bf:	b8 00 00 00 00       	mov    $0x0,%eax
    69c4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  p = (mchunkptr)((char*)p + offset);
    69c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    69cc:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  psize -= offset;
    69d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    69d4:	48 29 45 d8          	sub    %rax,-0x28(%rbp)

  m->top = p;
    69d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    69dc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    69e0:	48 89 50 28          	mov    %rdx,0x28(%rax)
  m->topsize = psize;
    69e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    69e8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    69ec:	48 89 50 10          	mov    %rdx,0x10(%rax)
  p->head = psize | PINUSE_BIT;
    69f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    69f4:	48 83 c8 01          	or     $0x1,%rax
    69f8:	48 89 c2             	mov    %rax,%rdx
    69fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    69ff:	48 89 50 08          	mov    %rdx,0x8(%rax)
  /* set size of fake trailing chunk holding overhead space only once */
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    6a03:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    6a07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    6a0b:	48 01 d0             	add    %rdx,%rax
    6a0e:	48 c7 40 08 50 00 00 	movq   $0x50,0x8(%rax)
    6a15:	00 
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    6a16:	48 8b 15 a3 ef 22 00 	mov    0x22efa3(%rip),%rdx        # 2359c0 <mparams+0x20>
    6a1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6a21:	48 89 50 30          	mov    %rdx,0x30(%rax)
}
    6a25:	90                   	nop
    6a26:	5d                   	pop    %rbp
    6a27:	c3                   	retq   

0000000000006a28 <init_bins>:

/* Initialize bins for a new mstate that is otherwise zeroed out */
static void init_bins(mstate m) {
    6a28:	55                   	push   %rbp
    6a29:	48 89 e5             	mov    %rsp,%rbp
    6a2c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  /* Establish circular links for smallbins */
  bindex_t i;
  for (i = 0; i < NSMALLBINS; ++i) {
    6a30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    6a37:	eb 42                	jmp    6a7b <init_bins+0x53>
    sbinptr bin = smallbin_at(m,i);
    6a39:	8b 45 f4             	mov    -0xc(%rbp),%eax
    6a3c:	01 c0                	add    %eax,%eax
    6a3e:	89 c0                	mov    %eax,%eax
    6a40:	48 83 c0 08          	add    $0x8,%rax
    6a44:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    6a4b:	00 
    6a4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6a50:	48 01 d0             	add    %rdx,%rax
    6a53:	48 83 c0 08          	add    $0x8,%rax
    6a57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    bin->fd = bin->bk = bin;
    6a5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6a5f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    6a63:	48 89 50 18          	mov    %rdx,0x18(%rax)
    6a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6a6b:	48 8b 50 18          	mov    0x18(%rax),%rdx
    6a6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6a73:	48 89 50 10          	mov    %rdx,0x10(%rax)
  for (i = 0; i < NSMALLBINS; ++i) {
    6a77:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    6a7b:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
    6a7f:	76 b8                	jbe    6a39 <init_bins+0x11>
  }
}
    6a81:	90                   	nop
    6a82:	5d                   	pop    %rbp
    6a83:	c3                   	retq   

0000000000006a84 <prepend_alloc>:
}
#endif /* PROCEED_ON_ERROR */

/* Allocate chunk and prepend remainder with chunk in successor base. */
static void* prepend_alloc(mstate m, char* newbase, char* oldbase,
                           size_t nb) {
    6a84:	55                   	push   %rbp
    6a85:	48 89 e5             	mov    %rsp,%rbp
    6a88:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
    6a8f:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
    6a96:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
    6a9d:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
    6aa4:	48 89 8d f0 fe ff ff 	mov    %rcx,-0x110(%rbp)
  mchunkptr p = align_as_chunk(newbase);
    6aab:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    6ab2:	48 83 c0 10          	add    $0x10,%rax
    6ab6:	83 e0 07             	and    $0x7,%eax
    6ab9:	48 85 c0             	test   %rax,%rax
    6abc:	74 16                	je     6ad4 <prepend_alloc+0x50>
    6abe:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    6ac5:	48 83 c0 10          	add    $0x10,%rax
    6ac9:	48 f7 d8             	neg    %rax
    6acc:	83 e0 07             	and    $0x7,%eax
    6acf:	48 89 c2             	mov    %rax,%rdx
    6ad2:	eb 05                	jmp    6ad9 <prepend_alloc+0x55>
    6ad4:	ba 00 00 00 00       	mov    $0x0,%edx
    6ad9:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    6ae0:	48 01 d0             	add    %rdx,%rax
    6ae3:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  mchunkptr oldfirst = align_as_chunk(oldbase);
    6aea:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    6af1:	48 83 c0 10          	add    $0x10,%rax
    6af5:	83 e0 07             	and    $0x7,%eax
    6af8:	48 85 c0             	test   %rax,%rax
    6afb:	74 16                	je     6b13 <prepend_alloc+0x8f>
    6afd:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    6b04:	48 83 c0 10          	add    $0x10,%rax
    6b08:	48 f7 d8             	neg    %rax
    6b0b:	83 e0 07             	and    $0x7,%eax
    6b0e:	48 89 c2             	mov    %rax,%rdx
    6b11:	eb 05                	jmp    6b18 <prepend_alloc+0x94>
    6b13:	ba 00 00 00 00       	mov    $0x0,%edx
    6b18:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    6b1f:	48 01 d0             	add    %rdx,%rax
    6b22:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  size_t psize = (char*)oldfirst - (char*)p;
    6b29:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    6b30:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    6b37:	48 29 c2             	sub    %rax,%rdx
    6b3a:	48 89 d0             	mov    %rdx,%rax
    6b3d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  mchunkptr q = chunk_plus_offset(p, nb);
    6b44:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
    6b4b:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    6b52:	48 01 d0             	add    %rdx,%rax
    6b55:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  size_t qsize = psize - nb;
    6b5c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    6b63:	48 2b 85 f0 fe ff ff 	sub    -0x110(%rbp),%rax
    6b6a:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    6b71:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    6b78:	48 83 c8 03          	or     $0x3,%rax
    6b7c:	48 89 c2             	mov    %rax,%rdx
    6b7f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    6b86:	48 89 50 08          	mov    %rdx,0x8(%rax)
    6b8a:	48 8b 0d 0f ee 22 00 	mov    0x22ee0f(%rip),%rcx        # 2359a0 <mparams>
    6b91:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    6b98:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
    6b9f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    6ba6:	48 01 f0             	add    %rsi,%rax
    6ba9:	48 31 ca             	xor    %rcx,%rdx
    6bac:	48 89 10             	mov    %rdx,(%rax)

  assert((char*)oldfirst > (char*)q);
    6baf:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6bb6:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
    6bbd:	77 05                	ja     6bc4 <prepend_alloc+0x140>
    6bbf:	e8 ca 93 02 00       	callq  2ff8e <abort>
  assert(pinuse(oldfirst));
    6bc4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6bcb:	48 8b 40 08          	mov    0x8(%rax),%rax
    6bcf:	83 e0 01             	and    $0x1,%eax
    6bd2:	48 85 c0             	test   %rax,%rax
    6bd5:	75 05                	jne    6bdc <prepend_alloc+0x158>
    6bd7:	e8 b2 93 02 00       	callq  2ff8e <abort>
  assert(qsize >= MIN_CHUNK_SIZE);
    6bdc:	48 83 bd 30 ff ff ff 	cmpq   $0x1f,-0xd0(%rbp)
    6be3:	1f 
    6be4:	77 05                	ja     6beb <prepend_alloc+0x167>
    6be6:	e8 a3 93 02 00       	callq  2ff8e <abort>

  /* consolidate remainder with first chunk of old base */
  if (oldfirst == m->top) {
    6beb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6bf2:	48 8b 40 28          	mov    0x28(%rax),%rax
    6bf6:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    6bfd:	75 75                	jne    6c74 <prepend_alloc+0x1f0>
    size_t tsize = m->topsize += qsize;
    6bff:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6c06:	48 8b 50 10          	mov    0x10(%rax),%rdx
    6c0a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    6c11:	48 01 c2             	add    %rax,%rdx
    6c14:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6c1b:	48 89 50 10          	mov    %rdx,0x10(%rax)
    6c1f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6c26:	48 8b 40 10          	mov    0x10(%rax),%rax
    6c2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    m->top = q;
    6c2e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6c35:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    6c3c:	48 89 50 28          	mov    %rdx,0x28(%rax)
    q->head = tsize | PINUSE_BIT;
    6c40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    6c44:	48 83 c8 01          	or     $0x1,%rax
    6c48:	48 89 c2             	mov    %rax,%rdx
    6c4b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    6c52:	48 89 50 08          	mov    %rdx,0x8(%rax)
    check_top_chunk(m, q);
    6c56:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    6c5d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6c64:	48 89 d6             	mov    %rdx,%rsi
    6c67:	48 89 c7             	mov    %rax,%rdi
    6c6a:	e8 9e e6 ff ff       	callq  530d <do_check_top_chunk>
    6c6f:	e9 95 0a 00 00       	jmpq   7709 <prepend_alloc+0xc85>
  }
  else if (oldfirst == m->dv) {
    6c74:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6c7b:	48 8b 40 20          	mov    0x20(%rax),%rax
    6c7f:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    6c86:	75 71                	jne    6cf9 <prepend_alloc+0x275>
    size_t dsize = m->dvsize += qsize;
    6c88:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6c8f:	48 8b 50 08          	mov    0x8(%rax),%rdx
    6c93:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    6c9a:	48 01 c2             	add    %rax,%rdx
    6c9d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6ca4:	48 89 50 08          	mov    %rdx,0x8(%rax)
    6ca8:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6caf:	48 8b 40 08          	mov    0x8(%rax),%rax
    6cb3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    m->dv = q;
    6cb7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6cbe:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    6cc5:	48 89 50 20          	mov    %rdx,0x20(%rax)
    set_size_and_pinuse_of_free_chunk(q, dsize);
    6cc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6ccd:	48 83 c8 01          	or     $0x1,%rax
    6cd1:	48 89 c2             	mov    %rax,%rdx
    6cd4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    6cdb:	48 89 50 08          	mov    %rdx,0x8(%rax)
    6cdf:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    6ce6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6cea:	48 01 c2             	add    %rax,%rdx
    6ced:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    6cf1:	48 89 02             	mov    %rax,(%rdx)
    6cf4:	e9 10 0a 00 00       	jmpq   7709 <prepend_alloc+0xc85>
  }
  else {
    if (!is_inuse(oldfirst)) {
    6cf9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6d00:	48 8b 40 08          	mov    0x8(%rax),%rax
    6d04:	83 e0 03             	and    $0x3,%eax
    6d07:	48 83 f8 01          	cmp    $0x1,%rax
    6d0b:	0f 85 70 05 00 00    	jne    7281 <prepend_alloc+0x7fd>
      size_t nsize = chunksize(oldfirst);
    6d11:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6d18:	48 8b 40 08          	mov    0x8(%rax),%rax
    6d1c:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    6d20:	48 89 45 80          	mov    %rax,-0x80(%rbp)
      unlink_chunk(m, oldfirst, nsize);
    6d24:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    6d28:	48 c1 e8 03          	shr    $0x3,%rax
    6d2c:	48 83 f8 1f          	cmp    $0x1f,%rax
    6d30:	0f 87 c6 01 00 00    	ja     6efc <prepend_alloc+0x478>
    6d36:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6d3d:	48 8b 40 10          	mov    0x10(%rax),%rax
    6d41:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    6d45:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6d4c:	48 8b 40 18          	mov    0x18(%rax),%rax
    6d50:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    6d54:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    6d58:	48 c1 e8 03          	shr    $0x3,%rax
    6d5c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
    6d62:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6d69:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
    6d6d:	75 05                	jne    6d74 <prepend_alloc+0x2f0>
    6d6f:	e8 1a 92 02 00       	callq  2ff8e <abort>
    6d74:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6d7b:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
    6d7f:	75 05                	jne    6d86 <prepend_alloc+0x302>
    6d81:	e8 08 92 02 00       	callq  2ff8e <abort>
    6d86:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6d8d:	48 8b 40 08          	mov    0x8(%rax),%rax
    6d91:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    6d95:	48 89 c2             	mov    %rax,%rdx
    6d98:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
    6d9e:	c1 e0 03             	shl    $0x3,%eax
    6da1:	89 c0                	mov    %eax,%eax
    6da3:	48 39 c2             	cmp    %rax,%rdx
    6da6:	74 05                	je     6dad <prepend_alloc+0x329>
    6da8:	e8 e1 91 02 00       	callq  2ff8e <abort>
    6dad:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
    6db3:	01 c0                	add    %eax,%eax
    6db5:	89 c0                	mov    %eax,%eax
    6db7:	48 83 c0 08          	add    $0x8,%rax
    6dbb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    6dc2:	00 
    6dc3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6dca:	48 01 d0             	add    %rdx,%rax
    6dcd:	48 83 c0 08          	add    $0x8,%rax
    6dd1:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
    6dd5:	0f 94 c0             	sete   %al
    6dd8:	0f b6 c0             	movzbl %al,%eax
    6ddb:	48 85 c0             	test   %rax,%rax
    6dde:	75 48                	jne    6e28 <prepend_alloc+0x3a4>
    6de0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6de7:	48 8b 40 18          	mov    0x18(%rax),%rax
    6deb:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
    6def:	0f 93 c0             	setae  %al
    6df2:	0f b6 c0             	movzbl %al,%eax
    6df5:	48 85 c0             	test   %rax,%rax
    6df8:	74 21                	je     6e1b <prepend_alloc+0x397>
    6dfa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6dfe:	48 8b 40 18          	mov    0x18(%rax),%rax
    6e02:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    6e09:	0f 94 c0             	sete   %al
    6e0c:	0f b6 c0             	movzbl %al,%eax
    6e0f:	48 85 c0             	test   %rax,%rax
    6e12:	74 07                	je     6e1b <prepend_alloc+0x397>
    6e14:	b8 01 00 00 00       	mov    $0x1,%eax
    6e19:	eb 05                	jmp    6e20 <prepend_alloc+0x39c>
    6e1b:	b8 00 00 00 00       	mov    $0x0,%eax
    6e20:	85 c0                	test   %eax,%eax
    6e22:	0f 84 cf 00 00 00    	je     6ef7 <prepend_alloc+0x473>
    6e28:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    6e2c:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
    6e30:	75 2c                	jne    6e5e <prepend_alloc+0x3da>
    6e32:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6e39:	8b 10                	mov    (%rax),%edx
    6e3b:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
    6e41:	be 01 00 00 00       	mov    $0x1,%esi
    6e46:	89 c1                	mov    %eax,%ecx
    6e48:	d3 e6                	shl    %cl,%esi
    6e4a:	89 f0                	mov    %esi,%eax
    6e4c:	f7 d0                	not    %eax
    6e4e:	21 c2                	and    %eax,%edx
    6e50:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6e57:	89 10                	mov    %edx,(%rax)
    6e59:	e9 0d 04 00 00       	jmpq   726b <prepend_alloc+0x7e7>
    6e5e:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
    6e64:	01 c0                	add    %eax,%eax
    6e66:	89 c0                	mov    %eax,%eax
    6e68:	48 83 c0 08          	add    $0x8,%rax
    6e6c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    6e73:	00 
    6e74:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6e7b:	48 01 d0             	add    %rdx,%rax
    6e7e:	48 83 c0 08          	add    $0x8,%rax
    6e82:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    6e86:	0f 94 c0             	sete   %al
    6e89:	0f b6 c0             	movzbl %al,%eax
    6e8c:	48 85 c0             	test   %rax,%rax
    6e8f:	75 44                	jne    6ed5 <prepend_alloc+0x451>
    6e91:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6e98:	48 8b 40 18          	mov    0x18(%rax),%rax
    6e9c:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    6ea0:	0f 93 c0             	setae  %al
    6ea3:	0f b6 c0             	movzbl %al,%eax
    6ea6:	48 85 c0             	test   %rax,%rax
    6ea9:	74 21                	je     6ecc <prepend_alloc+0x448>
    6eab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    6eaf:	48 8b 40 10          	mov    0x10(%rax),%rax
    6eb3:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    6eba:	0f 94 c0             	sete   %al
    6ebd:	0f b6 c0             	movzbl %al,%eax
    6ec0:	48 85 c0             	test   %rax,%rax
    6ec3:	74 07                	je     6ecc <prepend_alloc+0x448>
    6ec5:	b8 01 00 00 00       	mov    $0x1,%eax
    6eca:	eb 05                	jmp    6ed1 <prepend_alloc+0x44d>
    6ecc:	b8 00 00 00 00       	mov    $0x0,%eax
    6ed1:	85 c0                	test   %eax,%eax
    6ed3:	74 1d                	je     6ef2 <prepend_alloc+0x46e>
    6ed5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6ed9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    6edd:	48 89 50 18          	mov    %rdx,0x18(%rax)
    6ee1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    6ee5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    6ee9:	48 89 50 10          	mov    %rdx,0x10(%rax)
    6eed:	e9 79 03 00 00       	jmpq   726b <prepend_alloc+0x7e7>
    6ef2:	e8 97 90 02 00       	callq  2ff8e <abort>
    6ef7:	e8 92 90 02 00       	callq  2ff8e <abort>
    6efc:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    6f03:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    6f07:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    6f0b:	48 8b 40 30          	mov    0x30(%rax),%rax
    6f0f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    6f13:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    6f17:	48 8b 40 18          	mov    0x18(%rax),%rax
    6f1b:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    6f1f:	0f 84 9e 00 00 00    	je     6fc3 <prepend_alloc+0x53f>
    6f25:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    6f29:	48 8b 40 10          	mov    0x10(%rax),%rax
    6f2d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    6f31:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    6f35:	48 8b 40 18          	mov    0x18(%rax),%rax
    6f39:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    6f40:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    6f47:	48 8b 40 18          	mov    0x18(%rax),%rax
    6f4b:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    6f4f:	0f 93 c0             	setae  %al
    6f52:	0f b6 c0             	movzbl %al,%eax
    6f55:	48 85 c0             	test   %rax,%rax
    6f58:	74 1e                	je     6f78 <prepend_alloc+0x4f4>
    6f5a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6f5e:	48 8b 40 18          	mov    0x18(%rax),%rax
    6f62:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    6f66:	0f 94 c0             	sete   %al
    6f69:	0f b6 c0             	movzbl %al,%eax
    6f6c:	48 85 c0             	test   %rax,%rax
    6f6f:	74 07                	je     6f78 <prepend_alloc+0x4f4>
    6f71:	b8 01 00 00 00       	mov    $0x1,%eax
    6f76:	eb 05                	jmp    6f7d <prepend_alloc+0x4f9>
    6f78:	b8 00 00 00 00       	mov    $0x0,%eax
    6f7d:	85 c0                	test   %eax,%eax
    6f7f:	74 3d                	je     6fbe <prepend_alloc+0x53a>
    6f81:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    6f88:	48 8b 40 10          	mov    0x10(%rax),%rax
    6f8c:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    6f90:	0f 94 c0             	sete   %al
    6f93:	0f b6 c0             	movzbl %al,%eax
    6f96:	48 85 c0             	test   %rax,%rax
    6f99:	74 23                	je     6fbe <prepend_alloc+0x53a>
    6f9b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    6f9f:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    6fa6:	48 89 50 18          	mov    %rdx,0x18(%rax)
    6faa:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    6fb1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    6fb5:	48 89 50 10          	mov    %rdx,0x10(%rax)
    6fb9:	e9 f2 00 00 00       	jmpq   70b0 <prepend_alloc+0x62c>
    6fbe:	e8 cb 8f 02 00       	callq  2ff8e <abort>
    6fc3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    6fc7:	48 83 c0 28          	add    $0x28,%rax
    6fcb:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    6fd2:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    6fd9:	48 8b 00             	mov    (%rax),%rax
    6fdc:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    6fe3:	48 83 bd 38 ff ff ff 	cmpq   $0x0,-0xc8(%rbp)
    6fea:	00 
    6feb:	75 4f                	jne    703c <prepend_alloc+0x5b8>
    6fed:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    6ff1:	48 83 c0 20          	add    $0x20,%rax
    6ff5:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    6ffc:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    7003:	48 8b 00             	mov    (%rax),%rax
    7006:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    700d:	48 83 bd 38 ff ff ff 	cmpq   $0x0,-0xc8(%rbp)
    7014:	00 
    7015:	0f 84 95 00 00 00    	je     70b0 <prepend_alloc+0x62c>
    701b:	eb 1f                	jmp    703c <prepend_alloc+0x5b8>
    701d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7024:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    702b:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    7032:	48 8b 00             	mov    (%rax),%rax
    7035:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    703c:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    7043:	48 83 c0 28          	add    $0x28,%rax
    7047:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    704e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7055:	48 8b 00             	mov    (%rax),%rax
    7058:	48 85 c0             	test   %rax,%rax
    705b:	75 c0                	jne    701d <prepend_alloc+0x599>
    705d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    7064:	48 83 c0 20          	add    $0x20,%rax
    7068:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    706f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7076:	48 8b 00             	mov    (%rax),%rax
    7079:	48 85 c0             	test   %rax,%rax
    707c:	75 9f                	jne    701d <prepend_alloc+0x599>
    707e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7085:	48 8b 40 18          	mov    0x18(%rax),%rax
    7089:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    7090:	0f 93 c0             	setae  %al
    7093:	0f b6 c0             	movzbl %al,%eax
    7096:	48 85 c0             	test   %rax,%rax
    7099:	74 10                	je     70ab <prepend_alloc+0x627>
    709b:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    70a2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    70a9:	eb 05                	jmp    70b0 <prepend_alloc+0x62c>
    70ab:	e8 de 8e 02 00       	callq  2ff8e <abort>
    70b0:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    70b5:	0f 84 b0 01 00 00    	je     726b <prepend_alloc+0x7e7>
    70bb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    70bf:	8b 40 38             	mov    0x38(%rax),%eax
    70c2:	89 c0                	mov    %eax,%eax
    70c4:	48 83 c0 4a          	add    $0x4a,%rax
    70c8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    70cf:	00 
    70d0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    70d7:	48 01 d0             	add    %rdx,%rax
    70da:	48 83 c0 08          	add    $0x8,%rax
    70de:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    70e2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    70e6:	48 8b 00             	mov    (%rax),%rax
    70e9:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    70ed:	75 46                	jne    7135 <prepend_alloc+0x6b1>
    70ef:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    70f3:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    70fa:	48 89 10             	mov    %rdx,(%rax)
    70fd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7101:	48 8b 00             	mov    (%rax),%rax
    7104:	48 85 c0             	test   %rax,%rax
    7107:	75 7b                	jne    7184 <prepend_alloc+0x700>
    7109:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7110:	8b 50 04             	mov    0x4(%rax),%edx
    7113:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    7117:	8b 40 38             	mov    0x38(%rax),%eax
    711a:	be 01 00 00 00       	mov    $0x1,%esi
    711f:	89 c1                	mov    %eax,%ecx
    7121:	d3 e6                	shl    %cl,%esi
    7123:	89 f0                	mov    %esi,%eax
    7125:	f7 d0                	not    %eax
    7127:	21 c2                	and    %eax,%edx
    7129:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7130:	89 50 04             	mov    %edx,0x4(%rax)
    7133:	eb 4f                	jmp    7184 <prepend_alloc+0x700>
    7135:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    713c:	48 8b 40 18          	mov    0x18(%rax),%rax
    7140:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    7144:	0f 93 c0             	setae  %al
    7147:	0f b6 c0             	movzbl %al,%eax
    714a:	48 85 c0             	test   %rax,%rax
    714d:	74 30                	je     717f <prepend_alloc+0x6fb>
    714f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    7153:	48 8b 40 20          	mov    0x20(%rax),%rax
    7157:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    715b:	75 11                	jne    716e <prepend_alloc+0x6ea>
    715d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    7161:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    7168:	48 89 50 20          	mov    %rdx,0x20(%rax)
    716c:	eb 16                	jmp    7184 <prepend_alloc+0x700>
    716e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    7172:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    7179:	48 89 50 28          	mov    %rdx,0x28(%rax)
    717d:	eb 05                	jmp    7184 <prepend_alloc+0x700>
    717f:	e8 0a 8e 02 00       	callq  2ff8e <abort>
    7184:	48 83 bd 38 ff ff ff 	cmpq   $0x0,-0xc8(%rbp)
    718b:	00 
    718c:	0f 84 d9 00 00 00    	je     726b <prepend_alloc+0x7e7>
    7192:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7199:	48 8b 40 18          	mov    0x18(%rax),%rax
    719d:	48 39 85 38 ff ff ff 	cmp    %rax,-0xc8(%rbp)
    71a4:	0f 93 c0             	setae  %al
    71a7:	0f b6 c0             	movzbl %al,%eax
    71aa:	48 85 c0             	test   %rax,%rax
    71ad:	0f 84 b3 00 00 00    	je     7266 <prepend_alloc+0x7e2>
    71b3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    71ba:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    71be:	48 89 50 30          	mov    %rdx,0x30(%rax)
    71c2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    71c6:	48 8b 40 20          	mov    0x20(%rax),%rax
    71ca:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    71ce:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    71d3:	74 3f                	je     7214 <prepend_alloc+0x790>
    71d5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    71dc:	48 8b 40 18          	mov    0x18(%rax),%rax
    71e0:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    71e4:	0f 93 c0             	setae  %al
    71e7:	0f b6 c0             	movzbl %al,%eax
    71ea:	48 85 c0             	test   %rax,%rax
    71ed:	74 20                	je     720f <prepend_alloc+0x78b>
    71ef:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    71f6:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    71fa:	48 89 50 20          	mov    %rdx,0x20(%rax)
    71fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7202:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    7209:	48 89 50 30          	mov    %rdx,0x30(%rax)
    720d:	eb 05                	jmp    7214 <prepend_alloc+0x790>
    720f:	e8 7a 8d 02 00       	callq  2ff8e <abort>
    7214:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    7218:	48 8b 40 28          	mov    0x28(%rax),%rax
    721c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    7220:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    7225:	74 44                	je     726b <prepend_alloc+0x7e7>
    7227:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    722e:	48 8b 40 18          	mov    0x18(%rax),%rax
    7232:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    7236:	0f 93 c0             	setae  %al
    7239:	0f b6 c0             	movzbl %al,%eax
    723c:	48 85 c0             	test   %rax,%rax
    723f:	74 20                	je     7261 <prepend_alloc+0x7dd>
    7241:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    7248:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    724c:	48 89 50 28          	mov    %rdx,0x28(%rax)
    7250:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    7254:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    725b:	48 89 50 30          	mov    %rdx,0x30(%rax)
    725f:	eb 0a                	jmp    726b <prepend_alloc+0x7e7>
    7261:	e8 28 8d 02 00       	callq  2ff8e <abort>
    7266:	e8 23 8d 02 00       	callq  2ff8e <abort>
      oldfirst = chunk_plus_offset(oldfirst, nsize);
    726b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    726f:	48 01 85 28 ff ff ff 	add    %rax,-0xd8(%rbp)
      qsize += nsize;
    7276:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    727a:	48 01 85 30 ff ff ff 	add    %rax,-0xd0(%rbp)
    }
    set_free_with_pinuse(q, qsize, oldfirst);
    7281:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    7288:	48 8b 40 08          	mov    0x8(%rax),%rax
    728c:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
    7290:	48 89 c2             	mov    %rax,%rdx
    7293:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    729a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    729e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    72a5:	48 83 c8 01          	or     $0x1,%rax
    72a9:	48 89 c2             	mov    %rax,%rdx
    72ac:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    72b3:	48 89 50 08          	mov    %rdx,0x8(%rax)
    72b7:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    72be:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    72c5:	48 01 c2             	add    %rax,%rdx
    72c8:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    72cf:	48 89 02             	mov    %rax,(%rdx)
    insert_chunk(m, q, qsize);
    72d2:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    72d9:	48 c1 e8 03          	shr    $0x3,%rax
    72dd:	48 83 f8 1f          	cmp    $0x1f,%rax
    72e1:	0f 87 18 01 00 00    	ja     73ff <prepend_alloc+0x97b>
    72e7:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    72ee:	48 c1 e8 03          	shr    $0x3,%rax
    72f2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
    72f8:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    72fe:	01 c0                	add    %eax,%eax
    7300:	89 c0                	mov    %eax,%eax
    7302:	48 83 c0 08          	add    $0x8,%rax
    7306:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    730d:	00 
    730e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7315:	48 01 d0             	add    %rdx,%rax
    7318:	48 83 c0 08          	add    $0x8,%rax
    731c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7320:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7324:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    732b:	48 83 bd 30 ff ff ff 	cmpq   $0x1f,-0xd0(%rbp)
    7332:	1f 
    7333:	77 05                	ja     733a <prepend_alloc+0x8b6>
    7335:	e8 54 8c 02 00       	callq  2ff8e <abort>
    733a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7341:	8b 10                	mov    (%rax),%edx
    7343:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    7349:	be 01 00 00 00       	mov    $0x1,%esi
    734e:	89 c1                	mov    %eax,%ecx
    7350:	d3 e6                	shl    %cl,%esi
    7352:	89 f0                	mov    %esi,%eax
    7354:	21 d0                	and    %edx,%eax
    7356:	85 c0                	test   %eax,%eax
    7358:	75 27                	jne    7381 <prepend_alloc+0x8fd>
    735a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7361:	8b 10                	mov    (%rax),%edx
    7363:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    7369:	be 01 00 00 00       	mov    $0x1,%esi
    736e:	89 c1                	mov    %eax,%ecx
    7370:	d3 e6                	shl    %cl,%esi
    7372:	89 f0                	mov    %esi,%eax
    7374:	09 c2                	or     %eax,%edx
    7376:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    737d:	89 10                	mov    %edx,(%rax)
    737f:	eb 37                	jmp    73b8 <prepend_alloc+0x934>
    7381:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7385:	48 8b 50 10          	mov    0x10(%rax),%rdx
    7389:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7390:	48 8b 40 18          	mov    0x18(%rax),%rax
    7394:	48 39 c2             	cmp    %rax,%rdx
    7397:	0f 93 c0             	setae  %al
    739a:	0f b6 c0             	movzbl %al,%eax
    739d:	48 85 c0             	test   %rax,%rax
    73a0:	74 11                	je     73b3 <prepend_alloc+0x92f>
    73a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    73a6:	48 8b 40 10          	mov    0x10(%rax),%rax
    73aa:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    73b1:	eb 05                	jmp    73b8 <prepend_alloc+0x934>
    73b3:	e8 d6 8b 02 00       	callq  2ff8e <abort>
    73b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    73bc:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    73c3:	48 89 50 10          	mov    %rdx,0x10(%rax)
    73c7:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    73ce:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    73d5:	48 89 50 18          	mov    %rdx,0x18(%rax)
    73d9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    73e0:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    73e7:	48 89 50 10          	mov    %rdx,0x10(%rax)
    73eb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    73f2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    73f6:	48 89 50 18          	mov    %rdx,0x18(%rax)
    73fa:	e9 f1 02 00 00       	jmpq   76f0 <prepend_alloc+0xc6c>
    73ff:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    7406:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    740a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    7411:	48 c1 e8 08          	shr    $0x8,%rax
    7415:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
    741b:	83 bd 1c ff ff ff 00 	cmpl   $0x0,-0xe4(%rbp)
    7422:	75 0c                	jne    7430 <prepend_alloc+0x9ac>
    7424:	c7 85 14 ff ff ff 00 	movl   $0x0,-0xec(%rbp)
    742b:	00 00 00 
    742e:	eb 5d                	jmp    748d <prepend_alloc+0xa09>
    7430:	81 bd 1c ff ff ff ff 	cmpl   $0xffff,-0xe4(%rbp)
    7437:	ff 00 00 
    743a:	76 0c                	jbe    7448 <prepend_alloc+0x9c4>
    743c:	c7 85 14 ff ff ff 1f 	movl   $0x1f,-0xec(%rbp)
    7443:	00 00 00 
    7446:	eb 45                	jmp    748d <prepend_alloc+0xa09>
    7448:	0f bd 85 1c ff ff ff 	bsr    -0xe4(%rbp),%eax
    744f:	83 f0 1f             	xor    $0x1f,%eax
    7452:	ba 1f 00 00 00       	mov    $0x1f,%edx
    7457:	29 c2                	sub    %eax,%edx
    7459:	89 d0                	mov    %edx,%eax
    745b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%rbp)
    7461:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    7467:	8d 34 00             	lea    (%rax,%rax,1),%esi
    746a:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    7470:	83 c0 07             	add    $0x7,%eax
    7473:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    747a:	89 c1                	mov    %eax,%ecx
    747c:	48 d3 ea             	shr    %cl,%rdx
    747f:	48 89 d0             	mov    %rdx,%rax
    7482:	83 e0 01             	and    $0x1,%eax
    7485:	01 f0                	add    %esi,%eax
    7487:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
    748d:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
    7493:	48 83 c0 4a          	add    $0x4a,%rax
    7497:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    749e:	00 
    749f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    74a6:	48 01 d0             	add    %rdx,%rax
    74a9:	48 83 c0 08          	add    $0x8,%rax
    74ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    74b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    74b5:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
    74bb:	89 50 38             	mov    %edx,0x38(%rax)
    74be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    74c2:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    74c9:	00 
    74ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    74ce:	48 8b 50 28          	mov    0x28(%rax),%rdx
    74d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    74d6:	48 89 50 20          	mov    %rdx,0x20(%rax)
    74da:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    74e1:	8b 50 04             	mov    0x4(%rax),%edx
    74e4:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
    74ea:	be 01 00 00 00       	mov    $0x1,%esi
    74ef:	89 c1                	mov    %eax,%ecx
    74f1:	d3 e6                	shl    %cl,%esi
    74f3:	89 f0                	mov    %esi,%eax
    74f5:	21 d0                	and    %edx,%eax
    74f7:	85 c0                	test   %eax,%eax
    74f9:	75 5f                	jne    755a <prepend_alloc+0xad6>
    74fb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7502:	8b 50 04             	mov    0x4(%rax),%edx
    7505:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
    750b:	be 01 00 00 00       	mov    $0x1,%esi
    7510:	89 c1                	mov    %eax,%ecx
    7512:	d3 e6                	shl    %cl,%esi
    7514:	89 f0                	mov    %esi,%eax
    7516:	09 c2                	or     %eax,%edx
    7518:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    751f:	89 50 04             	mov    %edx,0x4(%rax)
    7522:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7526:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    752a:	48 89 10             	mov    %rdx,(%rax)
    752d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7531:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    7535:	48 89 50 30          	mov    %rdx,0x30(%rax)
    7539:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    753d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    7541:	48 89 50 18          	mov    %rdx,0x18(%rax)
    7545:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7549:	48 8b 50 18          	mov    0x18(%rax),%rdx
    754d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7551:	48 89 50 10          	mov    %rdx,0x10(%rax)
    7555:	e9 96 01 00 00       	jmpq   76f0 <prepend_alloc+0xc6c>
    755a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    755e:	48 8b 00             	mov    (%rax),%rax
    7561:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    7568:	83 bd 14 ff ff ff 1f 	cmpl   $0x1f,-0xec(%rbp)
    756f:	74 13                	je     7584 <prepend_alloc+0xb00>
    7571:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
    7577:	d1 e8                	shr    %eax
    7579:	ba 39 00 00 00       	mov    $0x39,%edx
    757e:	29 c2                	sub    %eax,%edx
    7580:	89 d0                	mov    %edx,%eax
    7582:	eb 05                	jmp    7589 <prepend_alloc+0xb05>
    7584:	b8 00 00 00 00       	mov    $0x0,%eax
    7589:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    7590:	89 c1                	mov    %eax,%ecx
    7592:	48 d3 e2             	shl    %cl,%rdx
    7595:	48 89 d0             	mov    %rdx,%rax
    7598:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    759f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    75a6:	48 8b 40 08          	mov    0x8(%rax),%rax
    75aa:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    75ae:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
    75b5:	0f 84 a2 00 00 00    	je     765d <prepend_alloc+0xbd9>
    75bb:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    75c2:	48 c1 e8 3f          	shr    $0x3f,%rax
    75c6:	48 83 c0 04          	add    $0x4,%rax
    75ca:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    75d1:	00 
    75d2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    75d9:	48 01 d0             	add    %rdx,%rax
    75dc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    75e0:	48 d1 a5 60 ff ff ff 	shlq   -0xa0(%rbp)
    75e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    75eb:	48 8b 00             	mov    (%rax),%rax
    75ee:	48 85 c0             	test   %rax,%rax
    75f1:	74 10                	je     7603 <prepend_alloc+0xb7f>
    75f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    75f7:	48 8b 00             	mov    (%rax),%rax
    75fa:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    7601:	eb 9c                	jmp    759f <prepend_alloc+0xb1b>
    7603:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    760a:	48 8b 40 18          	mov    0x18(%rax),%rax
    760e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    7612:	0f 93 c0             	setae  %al
    7615:	0f b6 c0             	movzbl %al,%eax
    7618:	48 85 c0             	test   %rax,%rax
    761b:	74 3b                	je     7658 <prepend_alloc+0xbd4>
    761d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    7621:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    7625:	48 89 10             	mov    %rdx,(%rax)
    7628:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    762c:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
    7633:	48 89 50 30          	mov    %rdx,0x30(%rax)
    7637:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    763b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    763f:	48 89 50 18          	mov    %rdx,0x18(%rax)
    7643:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7647:	48 8b 50 18          	mov    0x18(%rax),%rdx
    764b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    764f:	48 89 50 10          	mov    %rdx,0x10(%rax)
    7653:	e9 98 00 00 00       	jmpq   76f0 <prepend_alloc+0xc6c>
    7658:	e8 31 89 02 00       	callq  2ff8e <abort>
    765d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    7664:	48 8b 40 10          	mov    0x10(%rax),%rax
    7668:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    766c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7673:	48 8b 40 18          	mov    0x18(%rax),%rax
    7677:	48 39 85 58 ff ff ff 	cmp    %rax,-0xa8(%rbp)
    767e:	0f 93 c0             	setae  %al
    7681:	0f b6 c0             	movzbl %al,%eax
    7684:	48 85 c0             	test   %rax,%rax
    7687:	74 62                	je     76eb <prepend_alloc+0xc67>
    7689:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7690:	48 8b 40 18          	mov    0x18(%rax),%rax
    7694:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    7698:	0f 93 c0             	setae  %al
    769b:	0f b6 c0             	movzbl %al,%eax
    769e:	48 85 c0             	test   %rax,%rax
    76a1:	74 48                	je     76eb <prepend_alloc+0xc67>
    76a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    76a7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    76ab:	48 89 50 18          	mov    %rdx,0x18(%rax)
    76af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    76b3:	48 8b 50 18          	mov    0x18(%rax),%rdx
    76b7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    76be:	48 89 50 10          	mov    %rdx,0x10(%rax)
    76c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    76c6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    76ca:	48 89 50 10          	mov    %rdx,0x10(%rax)
    76ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    76d2:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
    76d9:	48 89 50 18          	mov    %rdx,0x18(%rax)
    76dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    76e1:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
    76e8:	00 
    76e9:	eb 05                	jmp    76f0 <prepend_alloc+0xc6c>
    76eb:	e8 9e 88 02 00       	callq  2ff8e <abort>
    check_free_chunk(m, q);
    76f0:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    76f7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    76fe:	48 89 d6             	mov    %rdx,%rsi
    7701:	48 89 c7             	mov    %rax,%rdi
    7704:	e8 24 de ff ff       	callq  552d <do_check_free_chunk>
  }

  check_malloced_chunk(m, chunk2mem(p), nb);
    7709:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    7710:	48 8d 48 10          	lea    0x10(%rax),%rcx
    7714:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
    771b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7722:	48 89 ce             	mov    %rcx,%rsi
    7725:	48 89 c7             	mov    %rax,%rdi
    7728:	e8 71 df ff ff       	callq  569e <do_check_malloced_chunk>
  return chunk2mem(p);
    772d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    7734:	48 83 c0 10          	add    $0x10,%rax
}
    7738:	c9                   	leaveq 
    7739:	c3                   	retq   

000000000000773a <add_segment>:

/* Add a segment to hold a new noncontiguous region */
static void add_segment(mstate m, char* tbase, size_t tsize, flag_t mmapped) {
    773a:	55                   	push   %rbp
    773b:	48 89 e5             	mov    %rsp,%rbp
    773e:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
    7745:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
    774c:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
    7753:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
    775a:	89 8d 04 ff ff ff    	mov    %ecx,-0xfc(%rbp)
  /* Determine locations and sizes of segment, fenceposts, old top */
  char* old_top = (char*)m->top;
    7760:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7767:	48 8b 40 28          	mov    0x28(%rax),%rax
    776b:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  msegmentptr oldsp = segment_holding(m, old_top);
    7772:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    7779:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7780:	48 89 d6             	mov    %rdx,%rsi
    7783:	48 89 c7             	mov    %rax,%rdi
    7786:	e8 91 d8 ff ff       	callq  501c <segment_holding>
    778b:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  char* old_end = oldsp->base + oldsp->size;
    7792:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    7799:	48 8b 10             	mov    (%rax),%rdx
    779c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    77a3:	48 8b 40 08          	mov    0x8(%rax),%rax
    77a7:	48 01 d0             	add    %rdx,%rax
    77aa:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  size_t ssize = pad_request(sizeof(struct malloc_segment));
    77b1:	48 c7 85 78 ff ff ff 	movq   $0x30,-0x88(%rbp)
    77b8:	30 00 00 00 
  char* rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
    77bc:	48 c7 c0 d9 ff ff ff 	mov    $0xffffffffffffffd9,%rax
    77c3:	48 2b 85 78 ff ff ff 	sub    -0x88(%rbp),%rax
    77ca:	48 89 c2             	mov    %rax,%rdx
    77cd:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    77d4:	48 01 d0             	add    %rdx,%rax
    77d7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  size_t offset = align_offset(chunk2mem(rawsp));
    77db:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    77df:	48 83 c0 10          	add    $0x10,%rax
    77e3:	83 e0 07             	and    $0x7,%eax
    77e6:	48 85 c0             	test   %rax,%rax
    77e9:	74 10                	je     77fb <add_segment+0xc1>
    77eb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    77ef:	48 83 c0 10          	add    $0x10,%rax
    77f3:	48 f7 d8             	neg    %rax
    77f6:	83 e0 07             	and    $0x7,%eax
    77f9:	eb 05                	jmp    7800 <add_segment+0xc6>
    77fb:	b8 00 00 00 00       	mov    $0x0,%eax
    7800:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  char* asp = rawsp + offset;
    7804:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    7808:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    780c:	48 01 d0             	add    %rdx,%rax
    780f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
    7813:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    781a:	48 83 c0 20          	add    $0x20,%rax
    781e:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    7822:	73 09                	jae    782d <add_segment+0xf3>
    7824:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    782b:	eb 04                	jmp    7831 <add_segment+0xf7>
    782d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    7831:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  mchunkptr sp = (mchunkptr)csp;
    7835:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7839:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
    783d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7841:	48 83 c0 10          	add    $0x10,%rax
    7845:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  mchunkptr tnext = chunk_plus_offset(sp, ssize);
    7849:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    784d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    7854:	48 01 d0             	add    %rdx,%rax
    7857:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  mchunkptr p = tnext;
    785b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    785f:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  int nfences = 0;
    7866:	c7 85 2c ff ff ff 00 	movl   $0x0,-0xd4(%rbp)
    786d:	00 00 00 

  /* reset top to new space */
  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
    7870:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    7877:	48 8d 50 b0          	lea    -0x50(%rax),%rdx
    787b:	48 8b 8d 10 ff ff ff 	mov    -0xf0(%rbp),%rcx
    7882:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7889:	48 89 ce             	mov    %rcx,%rsi
    788c:	48 89 c7             	mov    %rax,%rdi
    788f:	e8 fb f0 ff ff       	callq  698f <init_top>

  /* Set up segment record */
  assert(is_aligned(ss));
    7894:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7898:	83 e0 07             	and    $0x7,%eax
    789b:	48 85 c0             	test   %rax,%rax
    789e:	74 05                	je     78a5 <add_segment+0x16b>
    78a0:	e8 e9 86 02 00       	callq  2ff8e <abort>
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
    78a5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    78ac:	48 83 c8 03          	or     $0x3,%rax
    78b0:	48 89 c2             	mov    %rax,%rdx
    78b3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    78b7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    78bb:	48 8b 0d de e0 22 00 	mov    0x22e0de(%rip),%rcx        # 2359a0 <mparams>
    78c2:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
    78c9:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    78cd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    78d4:	48 01 f0             	add    %rsi,%rax
    78d7:	48 31 ca             	xor    %rcx,%rdx
    78da:	48 89 10             	mov    %rdx,(%rax)
  *ss = m->seg; /* Push current record */
    78dd:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    78e1:	48 8b b5 18 ff ff ff 	mov    -0xe8(%rbp),%rsi
    78e8:	48 8b 86 78 03 00 00 	mov    0x378(%rsi),%rax
    78ef:	48 8b 96 80 03 00 00 	mov    0x380(%rsi),%rdx
    78f6:	48 89 01             	mov    %rax,(%rcx)
    78f9:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    78fd:	48 8b 86 88 03 00 00 	mov    0x388(%rsi),%rax
    7904:	48 8b 96 90 03 00 00 	mov    0x390(%rsi),%rdx
    790b:	48 89 41 10          	mov    %rax,0x10(%rcx)
    790f:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  m->seg.base = tbase;
    7913:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    791a:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
    7921:	48 89 90 78 03 00 00 	mov    %rdx,0x378(%rax)
  m->seg.size = tsize;
    7928:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    792f:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    7936:	48 89 90 80 03 00 00 	mov    %rdx,0x380(%rax)
  m->seg.sflags = mmapped;
    793d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7944:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    794a:	89 90 90 03 00 00    	mov    %edx,0x390(%rax)
  m->seg.next = ss;
    7950:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7957:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    795b:	48 89 90 88 03 00 00 	mov    %rdx,0x388(%rax)

  /* Insert trailing fenceposts */
  for (;;) {
    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
    7962:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    7969:	48 83 c0 08          	add    $0x8,%rax
    796d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    p->head = FENCEPOST_HEAD;
    7971:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    7978:	48 c7 40 08 0b 00 00 	movq   $0xb,0x8(%rax)
    797f:	00 
    ++nfences;
    7980:	83 85 2c ff ff ff 01 	addl   $0x1,-0xd4(%rbp)
    if ((char*)(&(nextp->head)) < old_end)
    7987:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    798b:	48 83 c0 08          	add    $0x8,%rax
    798f:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
    7996:	76 0d                	jbe    79a5 <add_segment+0x26b>
      p = nextp;
    7998:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    799c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  for (;;) {
    79a3:	eb bd                	jmp    7962 <add_segment+0x228>
    else
      break;
    79a5:	90                   	nop
  }
  assert(nfences >= 2);
    79a6:	83 bd 2c ff ff ff 01 	cmpl   $0x1,-0xd4(%rbp)
    79ad:	7f 05                	jg     79b4 <add_segment+0x27a>
    79af:	e8 da 85 02 00       	callq  2ff8e <abort>

  /* Insert the rest of old top into a bin as an ordinary free chunk */
  if (csp != old_top) {
    79b4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    79b8:	48 3b 85 60 ff ff ff 	cmp    -0xa0(%rbp),%rax
    79bf:	0f 84 65 04 00 00    	je     7e2a <add_segment+0x6f0>
    mchunkptr q = (mchunkptr)old_top;
    79c5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    79cc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    size_t psize = csp - old_top;
    79d0:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    79d4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    79db:	48 29 c2             	sub    %rax,%rdx
    79de:	48 89 d0             	mov    %rdx,%rax
    79e1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    mchunkptr tn = chunk_plus_offset(q, psize);
    79e5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    79e9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    79ed:	48 01 d0             	add    %rdx,%rax
    79f0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    set_free_with_pinuse(q, psize, tn);
    79f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    79f8:	48 8b 40 08          	mov    0x8(%rax),%rax
    79fc:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
    7a00:	48 89 c2             	mov    %rax,%rdx
    7a03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    7a07:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7a0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a0f:	48 83 c8 01          	or     $0x1,%rax
    7a13:	48 89 c2             	mov    %rax,%rdx
    7a16:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7a1a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    7a1e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    7a22:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a26:	48 01 c2             	add    %rax,%rdx
    7a29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a2d:	48 89 02             	mov    %rax,(%rdx)
    insert_chunk(m, q, psize);
    7a30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a34:	48 c1 e8 03          	shr    $0x3,%rax
    7a38:	48 83 f8 1f          	cmp    $0x1f,%rax
    7a3c:	0f 87 06 01 00 00    	ja     7b48 <add_segment+0x40e>
    7a42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a46:	48 c1 e8 03          	shr    $0x3,%rax
    7a4a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
    7a50:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    7a56:	01 c0                	add    %eax,%eax
    7a58:	89 c0                	mov    %eax,%eax
    7a5a:	48 83 c0 08          	add    $0x8,%rax
    7a5e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    7a65:	00 
    7a66:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7a6d:	48 01 d0             	add    %rdx,%rax
    7a70:	48 83 c0 08          	add    $0x8,%rax
    7a74:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    7a78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7a7c:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    7a83:	48 83 7d c8 1f       	cmpq   $0x1f,-0x38(%rbp)
    7a88:	77 05                	ja     7a8f <add_segment+0x355>
    7a8a:	e8 ff 84 02 00       	callq  2ff8e <abort>
    7a8f:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7a96:	8b 10                	mov    (%rax),%edx
    7a98:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    7a9e:	be 01 00 00 00       	mov    $0x1,%esi
    7aa3:	89 c1                	mov    %eax,%ecx
    7aa5:	d3 e6                	shl    %cl,%esi
    7aa7:	89 f0                	mov    %esi,%eax
    7aa9:	21 d0                	and    %edx,%eax
    7aab:	85 c0                	test   %eax,%eax
    7aad:	75 27                	jne    7ad6 <add_segment+0x39c>
    7aaf:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7ab6:	8b 10                	mov    (%rax),%edx
    7ab8:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    7abe:	be 01 00 00 00       	mov    $0x1,%esi
    7ac3:	89 c1                	mov    %eax,%ecx
    7ac5:	d3 e6                	shl    %cl,%esi
    7ac7:	89 f0                	mov    %esi,%eax
    7ac9:	09 c2                	or     %eax,%edx
    7acb:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7ad2:	89 10                	mov    %edx,(%rax)
    7ad4:	eb 37                	jmp    7b0d <add_segment+0x3d3>
    7ad6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7ada:	48 8b 50 10          	mov    0x10(%rax),%rdx
    7ade:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7ae5:	48 8b 40 18          	mov    0x18(%rax),%rax
    7ae9:	48 39 c2             	cmp    %rax,%rdx
    7aec:	0f 93 c0             	setae  %al
    7aef:	0f b6 c0             	movzbl %al,%eax
    7af2:	48 85 c0             	test   %rax,%rax
    7af5:	74 11                	je     7b08 <add_segment+0x3ce>
    7af7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7afb:	48 8b 40 10          	mov    0x10(%rax),%rax
    7aff:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    7b06:	eb 05                	jmp    7b0d <add_segment+0x3d3>
    7b08:	e8 81 84 02 00       	callq  2ff8e <abort>
    7b0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    7b11:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    7b15:	48 89 50 10          	mov    %rdx,0x10(%rax)
    7b19:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7b20:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    7b24:	48 89 50 18          	mov    %rdx,0x18(%rax)
    7b28:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7b2c:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    7b33:	48 89 50 10          	mov    %rdx,0x10(%rax)
    7b37:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7b3b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    7b3f:	48 89 50 18          	mov    %rdx,0x18(%rax)
    7b43:	e9 e2 02 00 00       	jmpq   7e2a <add_segment+0x6f0>
    7b48:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    7b4c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    7b50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7b54:	48 c1 e8 08          	shr    $0x8,%rax
    7b58:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
    7b5e:	83 bd 34 ff ff ff 00 	cmpl   $0x0,-0xcc(%rbp)
    7b65:	75 0c                	jne    7b73 <add_segment+0x439>
    7b67:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%rbp)
    7b6e:	00 00 00 
    7b71:	eb 5a                	jmp    7bcd <add_segment+0x493>
    7b73:	81 bd 34 ff ff ff ff 	cmpl   $0xffff,-0xcc(%rbp)
    7b7a:	ff 00 00 
    7b7d:	76 0c                	jbe    7b8b <add_segment+0x451>
    7b7f:	c7 85 30 ff ff ff 1f 	movl   $0x1f,-0xd0(%rbp)
    7b86:	00 00 00 
    7b89:	eb 42                	jmp    7bcd <add_segment+0x493>
    7b8b:	0f bd 85 34 ff ff ff 	bsr    -0xcc(%rbp),%eax
    7b92:	83 f0 1f             	xor    $0x1f,%eax
    7b95:	ba 1f 00 00 00       	mov    $0x1f,%edx
    7b9a:	29 c2                	sub    %eax,%edx
    7b9c:	89 d0                	mov    %edx,%eax
    7b9e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)
    7ba4:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax
    7baa:	8d 34 00             	lea    (%rax,%rax,1),%esi
    7bad:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax
    7bb3:	83 c0 07             	add    $0x7,%eax
    7bb6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    7bba:	89 c1                	mov    %eax,%ecx
    7bbc:	48 d3 ea             	shr    %cl,%rdx
    7bbf:	48 89 d0             	mov    %rdx,%rax
    7bc2:	83 e0 01             	and    $0x1,%eax
    7bc5:	01 f0                	add    %esi,%eax
    7bc7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%rbp)
    7bcd:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    7bd3:	48 83 c0 4a          	add    $0x4a,%rax
    7bd7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    7bde:	00 
    7bdf:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7be6:	48 01 d0             	add    %rdx,%rax
    7be9:	48 83 c0 08          	add    $0x8,%rax
    7bed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    7bf1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7bf5:	8b 95 30 ff ff ff    	mov    -0xd0(%rbp),%edx
    7bfb:	89 50 38             	mov    %edx,0x38(%rax)
    7bfe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c02:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    7c09:	00 
    7c0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c0e:	48 8b 50 28          	mov    0x28(%rax),%rdx
    7c12:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c16:	48 89 50 20          	mov    %rdx,0x20(%rax)
    7c1a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7c21:	8b 50 04             	mov    0x4(%rax),%edx
    7c24:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    7c2a:	be 01 00 00 00       	mov    $0x1,%esi
    7c2f:	89 c1                	mov    %eax,%ecx
    7c31:	d3 e6                	shl    %cl,%esi
    7c33:	89 f0                	mov    %esi,%eax
    7c35:	21 d0                	and    %edx,%eax
    7c37:	85 c0                	test   %eax,%eax
    7c39:	75 5f                	jne    7c9a <add_segment+0x560>
    7c3b:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7c42:	8b 50 04             	mov    0x4(%rax),%edx
    7c45:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    7c4b:	be 01 00 00 00       	mov    $0x1,%esi
    7c50:	89 c1                	mov    %eax,%ecx
    7c52:	d3 e6                	shl    %cl,%esi
    7c54:	89 f0                	mov    %esi,%eax
    7c56:	09 c2                	or     %eax,%edx
    7c58:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7c5f:	89 50 04             	mov    %edx,0x4(%rax)
    7c62:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    7c66:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7c6a:	48 89 10             	mov    %rdx,(%rax)
    7c6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c71:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    7c75:	48 89 50 30          	mov    %rdx,0x30(%rax)
    7c79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c7d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7c81:	48 89 50 18          	mov    %rdx,0x18(%rax)
    7c85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c89:	48 8b 50 18          	mov    0x18(%rax),%rdx
    7c8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7c91:	48 89 50 10          	mov    %rdx,0x10(%rax)
    7c95:	e9 90 01 00 00       	jmpq   7e2a <add_segment+0x6f0>
    7c9a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    7c9e:	48 8b 00             	mov    (%rax),%rax
    7ca1:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    7ca8:	83 bd 30 ff ff ff 1f 	cmpl   $0x1f,-0xd0(%rbp)
    7caf:	74 13                	je     7cc4 <add_segment+0x58a>
    7cb1:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    7cb7:	d1 e8                	shr    %eax
    7cb9:	ba 39 00 00 00       	mov    $0x39,%edx
    7cbe:	29 c2                	sub    %eax,%edx
    7cc0:	89 d0                	mov    %edx,%eax
    7cc2:	eb 05                	jmp    7cc9 <add_segment+0x58f>
    7cc4:	b8 00 00 00 00       	mov    $0x0,%eax
    7cc9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    7ccd:	89 c1                	mov    %eax,%ecx
    7ccf:	48 d3 e2             	shl    %cl,%rdx
    7cd2:	48 89 d0             	mov    %rdx,%rax
    7cd5:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    7cdc:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    7ce3:	48 8b 40 08          	mov    0x8(%rax),%rax
    7ce7:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    7ceb:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
    7cef:	0f 84 a2 00 00 00    	je     7d97 <add_segment+0x65d>
    7cf5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    7cfc:	48 c1 e8 3f          	shr    $0x3f,%rax
    7d00:	48 83 c0 04          	add    $0x4,%rax
    7d04:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    7d0b:	00 
    7d0c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    7d13:	48 01 d0             	add    %rdx,%rax
    7d16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    7d1a:	48 d1 a5 58 ff ff ff 	shlq   -0xa8(%rbp)
    7d21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7d25:	48 8b 00             	mov    (%rax),%rax
    7d28:	48 85 c0             	test   %rax,%rax
    7d2b:	74 10                	je     7d3d <add_segment+0x603>
    7d2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7d31:	48 8b 00             	mov    (%rax),%rax
    7d34:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    7d3b:	eb 9f                	jmp    7cdc <add_segment+0x5a2>
    7d3d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7d44:	48 8b 40 18          	mov    0x18(%rax),%rax
    7d48:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    7d4c:	0f 93 c0             	setae  %al
    7d4f:	0f b6 c0             	movzbl %al,%eax
    7d52:	48 85 c0             	test   %rax,%rax
    7d55:	74 3b                	je     7d92 <add_segment+0x658>
    7d57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    7d5b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7d5f:	48 89 10             	mov    %rdx,(%rax)
    7d62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7d66:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    7d6d:	48 89 50 30          	mov    %rdx,0x30(%rax)
    7d71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7d75:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7d79:	48 89 50 18          	mov    %rdx,0x18(%rax)
    7d7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7d81:	48 8b 50 18          	mov    0x18(%rax),%rdx
    7d85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7d89:	48 89 50 10          	mov    %rdx,0x10(%rax)
    7d8d:	e9 98 00 00 00       	jmpq   7e2a <add_segment+0x6f0>
    7d92:	e8 f7 81 02 00       	callq  2ff8e <abort>
    7d97:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    7d9e:	48 8b 40 10          	mov    0x10(%rax),%rax
    7da2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7da6:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7dad:	48 8b 40 18          	mov    0x18(%rax),%rax
    7db1:	48 39 85 50 ff ff ff 	cmp    %rax,-0xb0(%rbp)
    7db8:	0f 93 c0             	setae  %al
    7dbb:	0f b6 c0             	movzbl %al,%eax
    7dbe:	48 85 c0             	test   %rax,%rax
    7dc1:	74 62                	je     7e25 <add_segment+0x6eb>
    7dc3:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7dca:	48 8b 40 18          	mov    0x18(%rax),%rax
    7dce:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    7dd2:	0f 93 c0             	setae  %al
    7dd5:	0f b6 c0             	movzbl %al,%eax
    7dd8:	48 85 c0             	test   %rax,%rax
    7ddb:	74 48                	je     7e25 <add_segment+0x6eb>
    7ddd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7de1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    7de5:	48 89 50 18          	mov    %rdx,0x18(%rax)
    7de9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7ded:	48 8b 50 18          	mov    0x18(%rax),%rdx
    7df1:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    7df8:	48 89 50 10          	mov    %rdx,0x10(%rax)
    7dfc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7e00:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    7e04:	48 89 50 10          	mov    %rdx,0x10(%rax)
    7e08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7e0c:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    7e13:	48 89 50 18          	mov    %rdx,0x18(%rax)
    7e17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    7e1b:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
    7e22:	00 
    7e23:	eb 05                	jmp    7e2a <add_segment+0x6f0>
    7e25:	e8 64 81 02 00       	callq  2ff8e <abort>
  }

  check_top_chunk(m, m->top);
    7e2a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7e31:	48 8b 50 28          	mov    0x28(%rax),%rdx
    7e35:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    7e3c:	48 89 d6             	mov    %rdx,%rsi
    7e3f:	48 89 c7             	mov    %rax,%rdi
    7e42:	e8 c6 d4 ff ff       	callq  530d <do_check_top_chunk>
}
    7e47:	90                   	nop
    7e48:	c9                   	leaveq 
    7e49:	c3                   	retq   

0000000000007e4a <sys_alloc>:

/* -------------------------- System allocation -------------------------- */

/* Get memory from system using MORECORE or MMAP */
static void* sys_alloc(mstate m, size_t nb) {
    7e4a:	55                   	push   %rbp
    7e4b:	48 89 e5             	mov    %rsp,%rbp
    7e4e:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
    7e55:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
    7e5c:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
  char* tbase = CMFAIL;
    7e63:	48 c7 85 60 ff ff ff 	movq   $0xffffffffffffffff,-0xa0(%rbp)
    7e6a:	ff ff ff ff 
  size_t tsize = 0;
    7e6e:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
    7e75:	00 00 00 00 
  flag_t mmap_flag = 0;
    7e79:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
    7e80:	00 00 00 
  size_t asize; /* allocation size */

  ensure_initialization();
    7e83:	48 8b 05 16 db 22 00 	mov    0x22db16(%rip),%rax        # 2359a0 <mparams>
    7e8a:	48 85 c0             	test   %rax,%rax
    7e8d:	75 07                	jne    7e96 <sys_alloc+0x4c>
    7e8f:	e8 47 d2 ff ff       	callq  50db <init_mparams>
    7e94:	85 c0                	test   %eax,%eax
    7e96:	90                   	nop
    void* mem = mmap_alloc(m, nb);
    if (mem != 0)
      return mem;
  }

  asize = granularity_align(nb + SYS_ALLOC_PADDING);
    7e97:	48 8b 15 12 db 22 00 	mov    0x22db12(%rip),%rdx        # 2359b0 <mparams+0x10>
    7e9e:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    7ea5:	48 01 d0             	add    %rdx,%rax
    7ea8:	48 8d 50 57          	lea    0x57(%rax),%rdx
    7eac:	48 8b 05 fd da 22 00 	mov    0x22dafd(%rip),%rax        # 2359b0 <mparams+0x10>
    7eb3:	48 f7 d8             	neg    %rax
    7eb6:	48 21 d0             	and    %rdx,%rax
    7eb9:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  if (asize <= nb)
    7ebd:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    7ec1:	48 3b 85 40 ff ff ff 	cmp    -0xc0(%rbp),%rax
    7ec8:	77 0a                	ja     7ed4 <sys_alloc+0x8a>
    return 0; /* wraparound */
    7eca:	b8 00 00 00 00       	mov    $0x0,%eax
    7ecf:	e9 50 09 00 00       	jmpq   8824 <sys_alloc+0x9da>
  if (m->footprint_limit != 0) {
    7ed4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7edb:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
    7ee2:	48 85 c0             	test   %rax,%rax
    7ee5:	74 4b                	je     7f32 <sys_alloc+0xe8>
    size_t fp = m->footprint + asize;
    7ee7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7eee:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    7ef5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    7ef9:	48 01 d0             	add    %rdx,%rax
    7efc:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    if (fp <= m->footprint || fp > m->footprint_limit)
    7f00:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7f07:	48 8b 80 58 03 00 00 	mov    0x358(%rax),%rax
    7f0e:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    7f12:	76 14                	jbe    7f28 <sys_alloc+0xde>
    7f14:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7f1b:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
    7f22:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    7f26:	76 0a                	jbe    7f32 <sys_alloc+0xe8>
      return 0;
    7f28:	b8 00 00 00 00       	mov    $0x0,%eax
    7f2d:	e9 f2 08 00 00       	jmpq   8824 <sys_alloc+0x9da>
   we can malloc nb bytes upon success, so pad with enough space for
   top_foot, plus alignment-pad to make sure we don't lose bytes if
   not on boundary, and round this up to a granularity unit.
  */

  if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
    7f32:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7f39:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    7f3f:	83 e0 04             	and    $0x4,%eax
    7f42:	85 c0                	test   %eax,%eax
    7f44:	0f 85 37 03 00 00    	jne    8281 <sys_alloc+0x437>
    char* br = CMFAIL;
    7f4a:	48 c7 85 70 ff ff ff 	movq   $0xffffffffffffffff,-0x90(%rbp)
    7f51:	ff ff ff ff 
    size_t ssize = asize; /* sbrk call size */
    7f55:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    7f59:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    msegmentptr ss = (m->top == 0)? 0 : segment_holding(m, (char*)m->top);
    7f60:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7f67:	48 8b 40 28          	mov    0x28(%rax),%rax
    7f6b:	48 85 c0             	test   %rax,%rax
    7f6e:	74 1f                	je     7f8f <sys_alloc+0x145>
    7f70:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7f77:	48 8b 50 28          	mov    0x28(%rax),%rdx
    7f7b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7f82:	48 89 d6             	mov    %rdx,%rsi
    7f85:	48 89 c7             	mov    %rax,%rdi
    7f88:	e8 8f d0 ff ff       	callq  501c <segment_holding>
    7f8d:	eb 05                	jmp    7f94 <sys_alloc+0x14a>
    7f8f:	b8 00 00 00 00       	mov    $0x0,%eax
    7f94:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    ACQUIRE_MALLOC_GLOBAL_LOCK();
    7f98:	b8 01 00 00 00       	mov    $0x1,%eax
    7f9d:	87 05 e5 d9 22 00    	xchg   %eax,0x22d9e5(%rip)        # 235988 <malloc_global_mutex>
    7fa3:	85 c0                	test   %eax,%eax
    7fa5:	74 0c                	je     7fb3 <sys_alloc+0x169>
    7fa7:	48 8d 3d da d9 22 00 	lea    0x22d9da(%rip),%rdi        # 235988 <malloc_global_mutex>
    7fae:	e8 34 d0 ff ff       	callq  4fe7 <spin_acquire_lock>

    if (ss == 0) {  /* First time through or recovery */
    7fb3:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
    7fb8:	0f 85 2f 01 00 00    	jne    80ed <sys_alloc+0x2a3>
      char* base = (char*)CALL_MORECORE(0);
    7fbe:	bf 00 00 00 00       	mov    $0x0,%edi
    7fc3:	e8 f4 69 00 00       	callq  e9bc <sbrk>
    7fc8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      if (base != CMFAIL) {
    7fcc:	48 83 7d a0 ff       	cmpq   $0xffffffffffffffff,-0x60(%rbp)
    7fd1:	0f 84 ad 01 00 00    	je     8184 <sys_alloc+0x33a>
        size_t fp;
        /* Adjust to end on a page boundary */
        if (!is_page_aligned(base))
    7fd7:	48 8b 05 ca d9 22 00 	mov    0x22d9ca(%rip),%rax        # 2359a8 <mparams+0x8>
    7fde:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    7fe2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7fe6:	48 21 d0             	and    %rdx,%rax
    7fe9:	48 85 c0             	test   %rax,%rax
    7fec:	74 30                	je     801e <sys_alloc+0x1d4>
          ssize += (page_align((size_t)base) - (size_t)base);
    7fee:	48 8b 15 b3 d9 22 00 	mov    0x22d9b3(%rip),%rdx        # 2359a8 <mparams+0x8>
    7ff5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    7ff9:	48 01 d0             	add    %rdx,%rax
    7ffc:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    8000:	48 8b 05 a1 d9 22 00 	mov    0x22d9a1(%rip),%rax        # 2359a8 <mparams+0x8>
    8007:	48 f7 d8             	neg    %rax
    800a:	48 21 c2             	and    %rax,%rdx
    800d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    8011:	48 29 c2             	sub    %rax,%rdx
    8014:	48 89 d0             	mov    %rdx,%rax
    8017:	48 01 85 78 ff ff ff 	add    %rax,-0x88(%rbp)
        fp = m->footprint + ssize; /* recheck limits */
    801e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8025:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    802c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    8033:	48 01 d0             	add    %rdx,%rax
    8036:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
    803a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    8041:	48 3b 85 40 ff ff ff 	cmp    -0xc0(%rbp),%rax
    8048:	0f 86 36 01 00 00    	jbe    8184 <sys_alloc+0x33a>
    804e:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
    8055:	ff ff 7f 
    8058:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
    805f:	0f 87 1f 01 00 00    	ja     8184 <sys_alloc+0x33a>
            (m->footprint_limit == 0 ||
    8065:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    806c:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
    8073:	48 85 c0             	test   %rax,%rax
    8076:	74 30                	je     80a8 <sys_alloc+0x25e>
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    8078:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    807f:	48 8b 80 58 03 00 00 	mov    0x358(%rax),%rax
            (m->footprint_limit == 0 ||
    8086:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    808a:	0f 86 f4 00 00 00    	jbe    8184 <sys_alloc+0x33a>
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    8090:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8097:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
    809e:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    80a2:	0f 87 dc 00 00 00    	ja     8184 <sys_alloc+0x33a>
            (br = (char*)(CALL_MORECORE(ssize))) == base) {
    80a8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    80af:	48 89 c7             	mov    %rax,%rdi
    80b2:	e8 05 69 00 00       	callq  e9bc <sbrk>
    80b7:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    80be:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    80c5:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
    80c9:	0f 85 b5 00 00 00    	jne    8184 <sys_alloc+0x33a>
          tbase = base;
    80cf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    80d3:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
          tsize = ssize;
    80da:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    80e1:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    80e8:	e9 97 00 00 00       	jmpq   8184 <sys_alloc+0x33a>
        }
      }
    }
    else {
      /* Subtract out existing available top space from MORECORE request. */
      ssize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
    80ed:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    80f4:	48 8b 40 10          	mov    0x10(%rax),%rax
    80f8:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    80ff:	48 29 c2             	sub    %rax,%rdx
    8102:	48 8b 05 a7 d8 22 00 	mov    0x22d8a7(%rip),%rax        # 2359b0 <mparams+0x10>
    8109:	48 01 d0             	add    %rdx,%rax
    810c:	48 8d 50 57          	lea    0x57(%rax),%rdx
    8110:	48 8b 05 99 d8 22 00 	mov    0x22d899(%rip),%rax        # 2359b0 <mparams+0x10>
    8117:	48 f7 d8             	neg    %rax
    811a:	48 21 d0             	and    %rdx,%rax
    811d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
      /* Use mem here only if it did continuously extend old space */
      if (ssize < HALF_MAX_SIZE_T &&
    8124:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
    812b:	ff ff 7f 
    812e:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
    8135:	77 4d                	ja     8184 <sys_alloc+0x33a>
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    8137:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
      if (ssize < HALF_MAX_SIZE_T &&
    813e:	48 89 c7             	mov    %rax,%rdi
    8141:	e8 76 68 00 00       	callq  e9bc <sbrk>
    8146:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    814d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8151:	48 8b 10             	mov    (%rax),%rdx
    8154:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8158:	48 8b 40 08          	mov    0x8(%rax),%rax
    815c:	48 01 d0             	add    %rdx,%rax
      if (ssize < HALF_MAX_SIZE_T &&
    815f:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
    8166:	75 1c                	jne    8184 <sys_alloc+0x33a>
        tbase = br;
    8168:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    816f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
        tsize = ssize;
    8176:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    817d:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
      }
    }

    if (tbase == CMFAIL) {    /* Cope with partial failure */
    8184:	48 83 bd 60 ff ff ff 	cmpq   $0xffffffffffffffff,-0xa0(%rbp)
    818b:	ff 
    818c:	0f 85 e4 00 00 00    	jne    8276 <sys_alloc+0x42c>
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
    8192:	48 83 bd 70 ff ff ff 	cmpq   $0xffffffffffffffff,-0x90(%rbp)
    8199:	ff 
    819a:	0f 84 b0 00 00 00    	je     8250 <sys_alloc+0x406>
        if (ssize < HALF_MAX_SIZE_T &&
    81a0:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
    81a7:	ff ff 7f 
    81aa:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
    81b1:	0f 87 99 00 00 00    	ja     8250 <sys_alloc+0x406>
            ssize < nb + SYS_ALLOC_PADDING) {
    81b7:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    81be:	48 83 c0 58          	add    $0x58,%rax
        if (ssize < HALF_MAX_SIZE_T &&
    81c2:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
    81c9:	0f 83 81 00 00 00    	jae    8250 <sys_alloc+0x406>
          size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);
    81cf:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    81d6:	48 2b 85 78 ff ff ff 	sub    -0x88(%rbp),%rax
    81dd:	48 89 c2             	mov    %rax,%rdx
    81e0:	48 8b 05 c9 d7 22 00 	mov    0x22d7c9(%rip),%rax        # 2359b0 <mparams+0x10>
    81e7:	48 01 d0             	add    %rdx,%rax
    81ea:	48 8d 50 57          	lea    0x57(%rax),%rdx
    81ee:	48 8b 05 bb d7 22 00 	mov    0x22d7bb(%rip),%rax        # 2359b0 <mparams+0x10>
    81f5:	48 f7 d8             	neg    %rax
    81f8:	48 21 d0             	and    %rdx,%rax
    81fb:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
          if (esize < HALF_MAX_SIZE_T) {
    81ff:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
    8206:	ff ff 7f 
    8209:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    820d:	77 41                	ja     8250 <sys_alloc+0x406>
            char* end = (char*)CALL_MORECORE(esize);
    820f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    8213:	48 89 c7             	mov    %rax,%rdi
    8216:	e8 a1 67 00 00       	callq  e9bc <sbrk>
    821b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
            if (end != CMFAIL)
    821f:	48 83 7d b8 ff       	cmpq   $0xffffffffffffffff,-0x48(%rbp)
    8224:	74 0d                	je     8233 <sys_alloc+0x3e9>
              ssize += esize;
    8226:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    822a:	48 01 85 78 ff ff ff 	add    %rax,-0x88(%rbp)
    8231:	eb 1d                	jmp    8250 <sys_alloc+0x406>
            else {            /* Can't use; try to release */
              (void) CALL_MORECORE(-ssize);
    8233:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    823a:	48 f7 d8             	neg    %rax
    823d:	48 89 c7             	mov    %rax,%rdi
    8240:	e8 77 67 00 00       	callq  e9bc <sbrk>
              br = CMFAIL;
    8245:	48 c7 85 70 ff ff ff 	movq   $0xffffffffffffffff,-0x90(%rbp)
    824c:	ff ff ff ff 
            }
          }
        }
      }
      if (br != CMFAIL) {    /* Use the space we did get */
    8250:	48 83 bd 70 ff ff ff 	cmpq   $0xffffffffffffffff,-0x90(%rbp)
    8257:	ff 
    8258:	74 1c                	je     8276 <sys_alloc+0x42c>
        tbase = br;
    825a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    8261:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
        tsize = ssize;
    8268:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    826f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
      else
        disable_contiguous(m); /* Don't try contiguous path in the future */
#endif
    }

    RELEASE_MALLOC_GLOBAL_LOCK();
    8276:	b8 00 00 00 00       	mov    $0x0,%eax
    827b:	89 05 07 d7 22 00    	mov    %eax,0x22d707(%rip)        # 235988 <malloc_global_mutex>
      tsize = asize;
      mmap_flag = USE_MMAP_BIT;
    }
  }

  if (HAVE_MORECORE && tbase == CMFAIL) { /* Try noncontiguous MORECORE */
    8281:	48 83 bd 60 ff ff ff 	cmpq   $0xffffffffffffffff,-0xa0(%rbp)
    8288:	ff 
    8289:	0f 85 b9 00 00 00    	jne    8348 <sys_alloc+0x4fe>
    if (asize < HALF_MAX_SIZE_T) {
    828f:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
    8296:	ff ff 7f 
    8299:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    829d:	0f 87 a5 00 00 00    	ja     8348 <sys_alloc+0x4fe>
      char* br = CMFAIL;
    82a3:	48 c7 45 c0 ff ff ff 	movq   $0xffffffffffffffff,-0x40(%rbp)
    82aa:	ff 
      char* end = CMFAIL;
    82ab:	48 c7 45 c8 ff ff ff 	movq   $0xffffffffffffffff,-0x38(%rbp)
    82b2:	ff 
      ACQUIRE_MALLOC_GLOBAL_LOCK();
    82b3:	b8 01 00 00 00       	mov    $0x1,%eax
    82b8:	87 05 ca d6 22 00    	xchg   %eax,0x22d6ca(%rip)        # 235988 <malloc_global_mutex>
    82be:	85 c0                	test   %eax,%eax
    82c0:	74 0c                	je     82ce <sys_alloc+0x484>
    82c2:	48 8d 3d bf d6 22 00 	lea    0x22d6bf(%rip),%rdi        # 235988 <malloc_global_mutex>
    82c9:	e8 19 cd ff ff       	callq  4fe7 <spin_acquire_lock>
      br = (char*)(CALL_MORECORE(asize));
    82ce:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    82d2:	48 89 c7             	mov    %rax,%rdi
    82d5:	e8 e2 66 00 00       	callq  e9bc <sbrk>
    82da:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      end = (char*)(CALL_MORECORE(0));
    82de:	bf 00 00 00 00       	mov    $0x0,%edi
    82e3:	e8 d4 66 00 00       	callq  e9bc <sbrk>
    82e8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      RELEASE_MALLOC_GLOBAL_LOCK();
    82ec:	b8 00 00 00 00       	mov    $0x0,%eax
    82f1:	89 05 91 d6 22 00    	mov    %eax,0x22d691(%rip)        # 235988 <malloc_global_mutex>
      if (br != CMFAIL && end != CMFAIL && br < end) {
    82f7:	48 83 7d c0 ff       	cmpq   $0xffffffffffffffff,-0x40(%rbp)
    82fc:	74 4a                	je     8348 <sys_alloc+0x4fe>
    82fe:	48 83 7d c8 ff       	cmpq   $0xffffffffffffffff,-0x38(%rbp)
    8303:	74 43                	je     8348 <sys_alloc+0x4fe>
    8305:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    8309:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
    830d:	73 39                	jae    8348 <sys_alloc+0x4fe>
        size_t ssize = end - br;
    830f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    8313:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    8317:	48 29 c2             	sub    %rax,%rdx
    831a:	48 89 d0             	mov    %rdx,%rax
    831d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        if (ssize > nb + TOP_FOOT_SIZE) {
    8321:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    8328:	48 83 c0 50          	add    $0x50,%rax
    832c:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
    8330:	76 16                	jbe    8348 <sys_alloc+0x4fe>
          tbase = br;
    8332:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    8336:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
          tsize = ssize;
    833d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8341:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
        }
      }
    }
  }

  if (tbase != CMFAIL) {
    8348:	48 83 bd 60 ff ff ff 	cmpq   $0xffffffffffffffff,-0xa0(%rbp)
    834f:	ff 
    8350:	0f 84 be 04 00 00    	je     8814 <sys_alloc+0x9ca>

    if ((m->footprint += tsize) > m->max_footprint)
    8356:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    835d:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    8364:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    836b:	48 01 c2             	add    %rax,%rdx
    836e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8375:	48 89 90 58 03 00 00 	mov    %rdx,0x358(%rax)
    837c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8383:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    838a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8391:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
    8398:	48 39 c2             	cmp    %rax,%rdx
    839b:	76 1c                	jbe    83b9 <sys_alloc+0x56f>
      m->max_footprint = m->footprint;
    839d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    83a4:	48 8b 90 58 03 00 00 	mov    0x358(%rax),%rdx
    83ab:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    83b2:	48 89 90 60 03 00 00 	mov    %rdx,0x360(%rax)

    if (!is_initialized(m)) { /* first-time initialization */
    83b9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    83c0:	48 8b 40 28          	mov    0x28(%rax),%rax
    83c4:	48 85 c0             	test   %rax,%rax
    83c7:	0f 85 3e 01 00 00    	jne    850b <sys_alloc+0x6c1>
      if (m->least_addr == 0 || tbase < m->least_addr)
    83cd:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    83d4:	48 8b 40 18          	mov    0x18(%rax),%rax
    83d8:	48 85 c0             	test   %rax,%rax
    83db:	74 14                	je     83f1 <sys_alloc+0x5a7>
    83dd:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    83e4:	48 8b 40 18          	mov    0x18(%rax),%rax
    83e8:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    83ef:	73 12                	jae    8403 <sys_alloc+0x5b9>
        m->least_addr = tbase;
    83f1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    83f8:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    83ff:	48 89 50 18          	mov    %rdx,0x18(%rax)
      m->seg.base = tbase;
    8403:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    840a:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    8411:	48 89 90 78 03 00 00 	mov    %rdx,0x378(%rax)
      m->seg.size = tsize;
    8418:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    841f:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
    8426:	48 89 90 80 03 00 00 	mov    %rdx,0x380(%rax)
      m->seg.sflags = mmap_flag;
    842d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8434:	8b 95 5c ff ff ff    	mov    -0xa4(%rbp),%edx
    843a:	89 90 90 03 00 00    	mov    %edx,0x390(%rax)
      m->magic = mparams.magic;
    8440:	48 8b 15 59 d5 22 00 	mov    0x22d559(%rip),%rdx        # 2359a0 <mparams>
    8447:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    844e:	48 89 50 40          	mov    %rdx,0x40(%rax)
      m->release_checks = MAX_RELEASE_CHECK_RATE;
    8452:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8459:	48 c7 40 38 ff ff ff 	movq   $0xffffffffffffffff,0x38(%rax)
    8460:	ff 
      init_bins(m);
    8461:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8468:	48 89 c7             	mov    %rax,%rdi
    846b:	e8 b8 e5 ff ff       	callq  6a28 <init_bins>
#if !ONLY_MSPACES
      if (is_global(m))
    8470:	48 8d 05 69 d5 22 00 	lea    0x22d569(%rip),%rax        # 2359e0 <_gm_>
    8477:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
    847e:	75 29                	jne    84a9 <sys_alloc+0x65f>
        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
    8480:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    8487:	48 8d 50 b0          	lea    -0x50(%rax),%rdx
    848b:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
    8492:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8499:	48 89 ce             	mov    %rcx,%rsi
    849c:	48 89 c7             	mov    %rax,%rdi
    849f:	e8 eb e4 ff ff       	callq  698f <init_top>
    84a4:	e9 5a 02 00 00       	jmpq   8703 <sys_alloc+0x8b9>
      else
#endif
      {
        /* Offset top by embedded malloc_state */
        mchunkptr mn = next_chunk(mem2chunk(m));
    84a9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    84b0:	48 83 e8 10          	sub    $0x10,%rax
    84b4:	48 8b 40 08          	mov    0x8(%rax),%rax
    84b8:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    84bc:	48 8d 50 f0          	lea    -0x10(%rax),%rdx
    84c0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    84c7:	48 01 d0             	add    %rdx,%rax
    84ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
    84ce:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    84d5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    84dc:	48 01 d0             	add    %rdx,%rax
    84df:	48 89 c2             	mov    %rax,%rdx
    84e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    84e6:	48 29 c2             	sub    %rax,%rdx
    84e9:	48 89 d0             	mov    %rdx,%rax
    84ec:	48 8d 50 b0          	lea    -0x50(%rax),%rdx
    84f0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    84f4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    84fb:	48 89 ce             	mov    %rcx,%rsi
    84fe:	48 89 c7             	mov    %rax,%rdi
    8501:	e8 89 e4 ff ff       	callq  698f <init_top>
    8506:	e9 f8 01 00 00       	jmpq   8703 <sys_alloc+0x8b9>
      }
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
    850b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8512:	48 05 78 03 00 00    	add    $0x378,%rax
    8518:	48 89 45 80          	mov    %rax,-0x80(%rbp)
      /* Only consider most recent segment if traversal suppressed */
      while (sp != 0 && tbase != sp->base + sp->size)
    851c:	eb 0c                	jmp    852a <sys_alloc+0x6e0>
        sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
    851e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    8522:	48 8b 40 10          	mov    0x10(%rax),%rax
    8526:	48 89 45 80          	mov    %rax,-0x80(%rbp)
      while (sp != 0 && tbase != sp->base + sp->size)
    852a:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
    852f:	74 1b                	je     854c <sys_alloc+0x702>
    8531:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    8535:	48 8b 10             	mov    (%rax),%rdx
    8538:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    853c:	48 8b 40 08          	mov    0x8(%rax),%rax
    8540:	48 01 d0             	add    %rdx,%rax
    8543:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    854a:	75 d2                	jne    851e <sys_alloc+0x6d4>
      if (sp != 0 &&
    854c:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
    8551:	0f 84 a9 00 00 00    	je     8600 <sys_alloc+0x7b6>
          !is_extern_segment(sp) &&
    8557:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    855b:	8b 40 18             	mov    0x18(%rax),%eax
    855e:	83 e0 08             	and    $0x8,%eax
      if (sp != 0 &&
    8561:	85 c0                	test   %eax,%eax
    8563:	0f 85 97 00 00 00    	jne    8600 <sys_alloc+0x7b6>
          !is_extern_segment(sp) &&
    8569:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
    8570:	0f 85 8a 00 00 00    	jne    8600 <sys_alloc+0x7b6>
          (sp->sflags & USE_MMAP_BIT) == mmap_flag &&
          segment_holds(sp, m->top)) { /* append */
    8576:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    857d:	48 8b 50 28          	mov    0x28(%rax),%rdx
    8581:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    8585:	48 8b 00             	mov    (%rax),%rax
          (sp->sflags & USE_MMAP_BIT) == mmap_flag &&
    8588:	48 39 c2             	cmp    %rax,%rdx
    858b:	72 73                	jb     8600 <sys_alloc+0x7b6>
          segment_holds(sp, m->top)) { /* append */
    858d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8594:	48 8b 50 28          	mov    0x28(%rax),%rdx
    8598:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    859c:	48 8b 08             	mov    (%rax),%rcx
    859f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    85a3:	48 8b 40 08          	mov    0x8(%rax),%rax
    85a7:	48 01 c8             	add    %rcx,%rax
    85aa:	48 39 c2             	cmp    %rax,%rdx
    85ad:	73 51                	jae    8600 <sys_alloc+0x7b6>
        sp->size += tsize;
    85af:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    85b3:	48 8b 50 08          	mov    0x8(%rax),%rdx
    85b7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    85be:	48 01 c2             	add    %rax,%rdx
    85c1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    85c5:	48 89 50 08          	mov    %rdx,0x8(%rax)
        init_top(m, m->top, m->topsize + tsize);
    85c9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    85d0:	48 8b 50 10          	mov    0x10(%rax),%rdx
    85d4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    85db:	48 01 c2             	add    %rax,%rdx
    85de:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    85e5:	48 8b 48 28          	mov    0x28(%rax),%rcx
    85e9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    85f0:	48 89 ce             	mov    %rcx,%rsi
    85f3:	48 89 c7             	mov    %rax,%rdi
    85f6:	e8 94 e3 ff ff       	callq  698f <init_top>
    85fb:	e9 03 01 00 00       	jmpq   8703 <sys_alloc+0x8b9>
      }
      else {
        if (tbase < m->least_addr)
    8600:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8607:	48 8b 40 18          	mov    0x18(%rax),%rax
    860b:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    8612:	73 12                	jae    8626 <sys_alloc+0x7dc>
          m->least_addr = tbase;
    8614:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    861b:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    8622:	48 89 50 18          	mov    %rdx,0x18(%rax)
        sp = &m->seg;
    8626:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    862d:	48 05 78 03 00 00    	add    $0x378,%rax
    8633:	48 89 45 80          	mov    %rax,-0x80(%rbp)
        while (sp != 0 && sp->base != tbase + tsize)
    8637:	eb 0c                	jmp    8645 <sys_alloc+0x7fb>
          sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
    8639:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    863d:	48 8b 40 10          	mov    0x10(%rax),%rax
    8641:	48 89 45 80          	mov    %rax,-0x80(%rbp)
        while (sp != 0 && sp->base != tbase + tsize)
    8645:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
    864a:	74 1d                	je     8669 <sys_alloc+0x81f>
    864c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    8650:	48 8b 00             	mov    (%rax),%rax
    8653:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
    865a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
    8661:	48 01 ca             	add    %rcx,%rdx
    8664:	48 39 d0             	cmp    %rdx,%rax
    8667:	75 d0                	jne    8639 <sys_alloc+0x7ef>
        if (sp != 0 &&
    8669:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
    866e:	74 70                	je     86e0 <sys_alloc+0x896>
            !is_extern_segment(sp) &&
    8670:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    8674:	8b 40 18             	mov    0x18(%rax),%eax
    8677:	83 e0 08             	and    $0x8,%eax
        if (sp != 0 &&
    867a:	85 c0                	test   %eax,%eax
    867c:	75 62                	jne    86e0 <sys_alloc+0x896>
            !is_extern_segment(sp) &&
    867e:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
    8685:	75 59                	jne    86e0 <sys_alloc+0x896>
            (sp->sflags & USE_MMAP_BIT) == mmap_flag) {
          char* oldbase = sp->base;
    8687:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    868b:	48 8b 00             	mov    (%rax),%rax
    868e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
          sp->base = tbase;
    8692:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    8696:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    869d:	48 89 10             	mov    %rdx,(%rax)
          sp->size += tsize;
    86a0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    86a4:	48 8b 50 08          	mov    0x8(%rax),%rdx
    86a8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    86af:	48 01 c2             	add    %rax,%rdx
    86b2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    86b6:	48 89 50 08          	mov    %rdx,0x8(%rax)
          return prepend_alloc(m, tbase, oldbase, nb);
    86ba:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
    86c1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    86c5:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
    86cc:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    86d3:	48 89 c7             	mov    %rax,%rdi
    86d6:	e8 a9 e3 ff ff       	callq  6a84 <prepend_alloc>
    86db:	e9 44 01 00 00       	jmpq   8824 <sys_alloc+0x9da>
        }
        else
          add_segment(m, tbase, tsize, mmap_flag);
    86e0:	8b 8d 5c ff ff ff    	mov    -0xa4(%rbp),%ecx
    86e6:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
    86ed:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
    86f4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    86fb:	48 89 c7             	mov    %rax,%rdi
    86fe:	e8 37 f0 ff ff       	callq  773a <add_segment>
      }
    }

    if (nb < m->topsize) { /* Allocate from new or extended top space */
    8703:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    870a:	48 8b 40 10          	mov    0x10(%rax),%rax
    870e:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    8715:	0f 83 f9 00 00 00    	jae    8814 <sys_alloc+0x9ca>
      size_t rsize = m->topsize -= nb;
    871b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8722:	48 8b 40 10          	mov    0x10(%rax),%rax
    8726:	48 2b 85 40 ff ff ff 	sub    -0xc0(%rbp),%rax
    872d:	48 89 c2             	mov    %rax,%rdx
    8730:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8737:	48 89 50 10          	mov    %rdx,0x10(%rax)
    873b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8742:	48 8b 40 10          	mov    0x10(%rax),%rax
    8746:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      mchunkptr p = m->top;
    874a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8751:	48 8b 40 28          	mov    0x28(%rax),%rax
    8755:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
    8759:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    875d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    8764:	48 01 c2             	add    %rax,%rdx
    8767:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    876e:	48 89 50 28          	mov    %rdx,0x28(%rax)
    8772:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    8779:	48 8b 40 28          	mov    0x28(%rax),%rax
    877d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      r->head = rsize | PINUSE_BIT;
    8781:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    8785:	48 83 c8 01          	or     $0x1,%rax
    8789:	48 89 c2             	mov    %rax,%rdx
    878c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8790:	48 89 50 08          	mov    %rdx,0x8(%rax)
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    8794:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    879b:	48 83 c8 03          	or     $0x3,%rax
    879f:	48 89 c2             	mov    %rax,%rdx
    87a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    87a6:	48 89 50 08          	mov    %rdx,0x8(%rax)
    87aa:	48 8b 0d ef d1 22 00 	mov    0x22d1ef(%rip),%rcx        # 2359a0 <mparams>
    87b1:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    87b8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
    87bc:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    87c3:	48 01 f0             	add    %rsi,%rax
    87c6:	48 31 ca             	xor    %rcx,%rdx
    87c9:	48 89 10             	mov    %rdx,(%rax)
      check_top_chunk(m, m->top);
    87cc:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    87d3:	48 8b 50 28          	mov    0x28(%rax),%rdx
    87d7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    87de:	48 89 d6             	mov    %rdx,%rsi
    87e1:	48 89 c7             	mov    %rax,%rdi
    87e4:	e8 24 cb ff ff       	callq  530d <do_check_top_chunk>
      check_malloced_chunk(m, chunk2mem(p), nb);
    87e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    87ed:	48 8d 48 10          	lea    0x10(%rax),%rcx
    87f1:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    87f8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    87ff:	48 89 ce             	mov    %rcx,%rsi
    8802:	48 89 c7             	mov    %rax,%rdi
    8805:	e8 94 ce ff ff       	callq  569e <do_check_malloced_chunk>
      return chunk2mem(p);
    880a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    880e:	48 83 c0 10          	add    $0x10,%rax
    8812:	eb 10                	jmp    8824 <sys_alloc+0x9da>
    }
  }

  MALLOC_FAILURE_ACTION;
    8814:	e8 a7 6e 01 00       	callq  1f6c0 <__errno>
    8819:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
  return 0;
    881f:	b8 00 00 00 00       	mov    $0x0,%eax
}
    8824:	c9                   	leaveq 
    8825:	c3                   	retq   

0000000000008826 <release_unused_segments>:

/* -----------------------  system deallocation -------------------------- */

/* Unmap and unlink any mmapped segments that don't contain used chunks */
static size_t release_unused_segments(mstate m) {
    8826:	55                   	push   %rbp
    8827:	48 89 e5             	mov    %rsp,%rbp
    882a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  size_t released = 0;
    882e:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    8835:	00 
  int nsegs = 0;
    8836:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
  msegmentptr pred = &m->seg;
    883d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8841:	48 05 78 03 00 00    	add    $0x378,%rax
    8847:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  msegmentptr sp = pred->next;
    884b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    884f:	48 8b 40 10          	mov    0x10(%rax),%rax
    8853:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  while (sp != 0) {
    8857:	eb 37                	jmp    8890 <release_unused_segments+0x6a>
    char* base = sp->base;
    8859:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    885d:	48 8b 00             	mov    (%rax),%rax
    8860:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    size_t size = sp->size;
    8864:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8868:	48 8b 40 08          	mov    0x8(%rax),%rax
    886c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    msegmentptr next = sp->next;
    8870:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8874:	48 8b 40 10          	mov    0x10(%rax),%rax
    8878:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ++nsegs;
    887c:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
        }
      }
    }
    if (NO_SEGMENT_TRAVERSAL) /* scan only first segment */
      break;
    pred = sp;
    8880:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8884:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    sp = next;
    8888:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    888c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  while (sp != 0) {
    8890:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    8895:	75 c2                	jne    8859 <release_unused_segments+0x33>
  }
  /* Reset check counter */
  m->release_checks = (((size_t) nsegs > (size_t) MAX_RELEASE_CHECK_RATE)?
    8897:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    889b:	48 c7 40 38 ff ff ff 	movq   $0xffffffffffffffff,0x38(%rax)
    88a2:	ff 
                       (size_t) nsegs : (size_t) MAX_RELEASE_CHECK_RATE);
  return released;
    88a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
    88a7:	5d                   	pop    %rbp
    88a8:	c3                   	retq   

00000000000088a9 <sys_trim>:

static int sys_trim(mstate m, size_t pad) {
    88a9:	55                   	push   %rbp
    88aa:	48 89 e5             	mov    %rsp,%rbp
    88ad:	48 83 ec 50          	sub    $0x50,%rsp
    88b1:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    88b5:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  size_t released = 0;
    88b9:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
    88c0:	00 
  ensure_initialization();
    88c1:	48 8b 05 d8 d0 22 00 	mov    0x22d0d8(%rip),%rax        # 2359a0 <mparams>
    88c8:	48 85 c0             	test   %rax,%rax
    88cb:	75 07                	jne    88d4 <sys_trim+0x2b>
    88cd:	e8 09 c8 ff ff       	callq  50db <init_mparams>
    88d2:	85 c0                	test   %eax,%eax
    88d4:	90                   	nop
  if (pad < MAX_REQUEST && is_initialized(m)) {
    88d5:	48 81 7d b0 7f ff ff 	cmpq   $0xffffffffffffff7f,-0x50(%rbp)
    88dc:	ff 
    88dd:	0f 87 e5 01 00 00    	ja     8ac8 <sys_trim+0x21f>
    88e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    88e7:	48 8b 40 28          	mov    0x28(%rax),%rax
    88eb:	48 85 c0             	test   %rax,%rax
    88ee:	0f 84 d4 01 00 00    	je     8ac8 <sys_trim+0x21f>
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
    88f4:	48 83 45 b0 50       	addq   $0x50,-0x50(%rbp)

    if (m->topsize > pad) {
    88f9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    88fd:	48 8b 40 10          	mov    0x10(%rax),%rax
    8901:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    8905:	0f 83 95 01 00 00    	jae    8aa0 <sys_trim+0x1f7>
      /* Shrink top space in granularity-size units, keeping at least one */
      size_t unit = mparams.granularity;
    890b:	48 8b 05 9e d0 22 00 	mov    0x22d09e(%rip),%rax        # 2359b0 <mparams+0x10>
    8912:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
    8916:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    891a:	48 8b 40 10          	mov    0x10(%rax),%rax
    891e:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
    8922:	48 89 c2             	mov    %rax,%rdx
    8925:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8929:	48 01 d0             	add    %rdx,%rax
    892c:	48 83 e8 01          	sub    $0x1,%rax
    8930:	ba 00 00 00 00       	mov    $0x0,%edx
    8935:	48 f7 75 d8          	divq   -0x28(%rbp)
    8939:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    893d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    8941:	48 0f af c2          	imul   %rdx,%rax
    8945:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);
    8949:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    894d:	48 8b 50 28          	mov    0x28(%rax),%rdx
    8951:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8955:	48 89 d6             	mov    %rdx,%rsi
    8958:	48 89 c7             	mov    %rax,%rdi
    895b:	e8 bc c6 ff ff       	callq  501c <segment_holding>
    8960:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

      if (!is_extern_segment(sp)) {
    8964:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8968:	8b 40 18             	mov    0x18(%rax),%eax
    896b:	83 e0 08             	and    $0x8,%eax
    896e:	85 c0                	test   %eax,%eax
    8970:	0f 85 b2 00 00 00    	jne    8a28 <sys_trim+0x17f>
              released = extra;
            }
          }
        }
        else if (HAVE_MORECORE) {
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
    8976:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
    897d:	ff ff 7f 
    8980:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
    8984:	76 12                	jbe    8998 <sys_trim+0xef>
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
    8986:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
    898d:	00 00 80 
    8990:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
    8994:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
          ACQUIRE_MALLOC_GLOBAL_LOCK();
    8998:	b8 01 00 00 00       	mov    $0x1,%eax
    899d:	87 05 e5 cf 22 00    	xchg   %eax,0x22cfe5(%rip)        # 235988 <malloc_global_mutex>
    89a3:	85 c0                	test   %eax,%eax
    89a5:	74 0c                	je     89b3 <sys_trim+0x10a>
    89a7:	48 8d 3d da cf 22 00 	lea    0x22cfda(%rip),%rdi        # 235988 <malloc_global_mutex>
    89ae:	e8 34 c6 ff ff       	callq  4fe7 <spin_acquire_lock>
          {
            /* Make sure end of memory is where we last set it. */
            char* old_br = (char*)(CALL_MORECORE(0));
    89b3:	bf 00 00 00 00       	mov    $0x0,%edi
    89b8:	e8 ff 5f 00 00       	callq  e9bc <sbrk>
    89bd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            if (old_br == sp->base + sp->size) {
    89c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    89c5:	48 8b 10             	mov    (%rax),%rdx
    89c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    89cc:	48 8b 40 08          	mov    0x8(%rax),%rax
    89d0:	48 01 d0             	add    %rdx,%rax
    89d3:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    89d7:	75 44                	jne    8a1d <sys_trim+0x174>
              char* rel_br = (char*)(CALL_MORECORE(-extra));
    89d9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    89dd:	48 f7 d8             	neg    %rax
    89e0:	48 89 c7             	mov    %rax,%rdi
    89e3:	e8 d4 5f 00 00       	callq  e9bc <sbrk>
    89e8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
              char* new_br = (char*)(CALL_MORECORE(0));
    89ec:	bf 00 00 00 00       	mov    $0x0,%edi
    89f1:	e8 c6 5f 00 00       	callq  e9bc <sbrk>
    89f6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
              if (rel_br != CMFAIL && new_br < old_br)
    89fa:	48 83 7d f0 ff       	cmpq   $0xffffffffffffffff,-0x10(%rbp)
    89ff:	74 1c                	je     8a1d <sys_trim+0x174>
    8a01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8a05:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    8a09:	73 12                	jae    8a1d <sys_trim+0x174>
                released = old_br - new_br;
    8a0b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    8a0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    8a13:	48 29 c2             	sub    %rax,%rdx
    8a16:	48 89 d0             	mov    %rdx,%rax
    8a19:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            }
          }
          RELEASE_MALLOC_GLOBAL_LOCK();
    8a1d:	b8 00 00 00 00       	mov    $0x0,%eax
    8a22:	89 05 60 cf 22 00    	mov    %eax,0x22cf60(%rip)        # 235988 <malloc_global_mutex>
        }
      }

      if (released != 0) {
    8a28:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    8a2d:	74 71                	je     8aa0 <sys_trim+0x1f7>
        sp->size -= released;
    8a2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8a33:	48 8b 40 08          	mov    0x8(%rax),%rax
    8a37:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    8a3b:	48 89 c2             	mov    %rax,%rdx
    8a3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    8a42:	48 89 50 08          	mov    %rdx,0x8(%rax)
        m->footprint -= released;
    8a46:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8a4a:	48 8b 80 58 03 00 00 	mov    0x358(%rax),%rax
    8a51:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    8a55:	48 89 c2             	mov    %rax,%rdx
    8a58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8a5c:	48 89 90 58 03 00 00 	mov    %rdx,0x358(%rax)
        init_top(m, m->top, m->topsize - released);
    8a63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8a67:	48 8b 40 10          	mov    0x10(%rax),%rax
    8a6b:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
    8a6f:	48 89 c2             	mov    %rax,%rdx
    8a72:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8a76:	48 8b 48 28          	mov    0x28(%rax),%rcx
    8a7a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8a7e:	48 89 ce             	mov    %rcx,%rsi
    8a81:	48 89 c7             	mov    %rax,%rdi
    8a84:	e8 06 df ff ff       	callq  698f <init_top>
        check_top_chunk(m, m->top);
    8a89:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8a8d:	48 8b 50 28          	mov    0x28(%rax),%rdx
    8a91:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8a95:	48 89 d6             	mov    %rdx,%rsi
    8a98:	48 89 c7             	mov    %rax,%rdi
    8a9b:	e8 6d c8 ff ff       	callq  530d <do_check_top_chunk>
    /* Unmap any unused mmapped segments */
    if (HAVE_MMAP)
      released += release_unused_segments(m);

    /* On failure, disable autotrim to avoid repeated failed future calls */
    if (released == 0 && m->topsize > m->trim_check)
    8aa0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    8aa5:	75 21                	jne    8ac8 <sys_trim+0x21f>
    8aa7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8aab:	48 8b 50 10          	mov    0x10(%rax),%rdx
    8aaf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8ab3:	48 8b 40 30          	mov    0x30(%rax),%rax
    8ab7:	48 39 c2             	cmp    %rax,%rdx
    8aba:	76 0c                	jbe    8ac8 <sys_trim+0x21f>
      m->trim_check = MAX_SIZE_T;
    8abc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    8ac0:	48 c7 40 30 ff ff ff 	movq   $0xffffffffffffffff,0x30(%rax)
    8ac7:	ff 
  }

  return (released != 0)? 1 : 0;
    8ac8:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    8acd:	0f 95 c0             	setne  %al
    8ad0:	0f b6 c0             	movzbl %al,%eax
}
    8ad3:	c9                   	leaveq 
    8ad4:	c3                   	retq   

0000000000008ad5 <dispose_chunk>:

/* Consolidate and bin a chunk. Differs from exported versions
   of free mainly in that the chunk need not be marked as inuse.
*/
static void dispose_chunk(mstate m, mchunkptr p, size_t psize) {
    8ad5:	55                   	push   %rbp
    8ad6:	48 89 e5             	mov    %rsp,%rbp
    8ad9:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    8ae0:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
    8ae7:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
    8aee:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
  mchunkptr next = chunk_plus_offset(p, psize);
    8af5:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    8afc:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    8b03:	48 01 d0             	add    %rdx,%rax
    8b06:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  if (!pinuse(p)) {
    8b0d:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    8b14:	48 8b 40 08          	mov    0x8(%rax),%rax
    8b18:	83 e0 01             	and    $0x1,%eax
    8b1b:	48 85 c0             	test   %rax,%rax
    8b1e:	0f 85 3f 07 00 00    	jne    9263 <dispose_chunk+0x78e>
    mchunkptr prev;
    size_t prevsize = p->prev_foot;
    8b24:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    8b2b:	48 8b 00             	mov    (%rax),%rax
    8b2e:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    if (is_mmapped(p)) {
    8b35:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    8b3c:	48 8b 40 08          	mov    0x8(%rax),%rax
    8b40:	83 e0 03             	and    $0x3,%eax
    8b43:	48 85 c0             	test   %rax,%rax
    8b46:	75 21                	jne    8b69 <dispose_chunk+0x94>
      psize += prevsize + MMAP_FOOT_PAD;
    8b48:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    8b4f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    8b56:	48 01 d0             	add    %rdx,%rax
    8b59:	48 83 c0 20          	add    $0x20,%rax
    8b5d:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
      if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)
        m->footprint -= psize;
      return;
    8b64:	e9 9a 12 00 00       	jmpq   9e03 <dispose_chunk+0x132e>
    }
    prev = chunk_minus_offset(p, prevsize);
    8b69:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    8b70:	48 f7 d8             	neg    %rax
    8b73:	48 89 c2             	mov    %rax,%rdx
    8b76:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    8b7d:	48 01 d0             	add    %rdx,%rax
    8b80:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    psize += prevsize;
    8b87:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    8b8e:	48 01 85 a8 fe ff ff 	add    %rax,-0x158(%rbp)
    p = prev;
    8b95:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    8b9c:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
    if (RTCHECK(ok_address(m, prev))) { /* consolidate backward */
    8ba3:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8baa:	48 8b 40 18          	mov    0x18(%rax),%rax
    8bae:	48 39 85 38 ff ff ff 	cmp    %rax,-0xc8(%rbp)
    8bb5:	0f 93 c0             	setae  %al
    8bb8:	0f b6 c0             	movzbl %al,%eax
    8bbb:	48 85 c0             	test   %rax,%rax
    8bbe:	0f 84 9a 06 00 00    	je     925e <dispose_chunk+0x789>
      if (p != m->dv) {
    8bc4:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8bcb:	48 8b 40 20          	mov    0x20(%rax),%rax
    8bcf:	48 39 85 b0 fe ff ff 	cmp    %rax,-0x150(%rbp)
    8bd6:	0f 84 06 06 00 00    	je     91e2 <dispose_chunk+0x70d>
        unlink_chunk(m, p, prevsize);
    8bdc:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    8be3:	48 c1 e8 03          	shr    $0x3,%rax
    8be7:	48 83 f8 1f          	cmp    $0x1f,%rax
    8beb:	0f 87 f9 01 00 00    	ja     8dea <dispose_chunk+0x315>
    8bf1:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    8bf8:	48 8b 40 10          	mov    0x10(%rax),%rax
    8bfc:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    8c03:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    8c0a:	48 8b 40 18          	mov    0x18(%rax),%rax
    8c0e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    8c15:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    8c1c:	48 c1 e8 03          	shr    $0x3,%rax
    8c20:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    8c26:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    8c2d:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
    8c34:	75 05                	jne    8c3b <dispose_chunk+0x166>
    8c36:	e8 53 73 02 00       	callq  2ff8e <abort>
    8c3b:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    8c42:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
    8c49:	75 05                	jne    8c50 <dispose_chunk+0x17b>
    8c4b:	e8 3e 73 02 00       	callq  2ff8e <abort>
    8c50:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    8c57:	48 8b 40 08          	mov    0x8(%rax),%rax
    8c5b:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    8c5f:	48 89 c2             	mov    %rax,%rdx
    8c62:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    8c68:	c1 e0 03             	shl    $0x3,%eax
    8c6b:	89 c0                	mov    %eax,%eax
    8c6d:	48 39 c2             	cmp    %rax,%rdx
    8c70:	74 05                	je     8c77 <dispose_chunk+0x1a2>
    8c72:	e8 17 73 02 00       	callq  2ff8e <abort>
    8c77:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    8c7d:	01 c0                	add    %eax,%eax
    8c7f:	89 c0                	mov    %eax,%eax
    8c81:	48 83 c0 08          	add    $0x8,%rax
    8c85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    8c8c:	00 
    8c8d:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8c94:	48 01 d0             	add    %rdx,%rax
    8c97:	48 83 c0 08          	add    $0x8,%rax
    8c9b:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
    8ca2:	0f 94 c0             	sete   %al
    8ca5:	0f b6 c0             	movzbl %al,%eax
    8ca8:	48 85 c0             	test   %rax,%rax
    8cab:	75 4e                	jne    8cfb <dispose_chunk+0x226>
    8cad:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8cb4:	48 8b 40 18          	mov    0x18(%rax),%rax
    8cb8:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
    8cbf:	0f 93 c0             	setae  %al
    8cc2:	0f b6 c0             	movzbl %al,%eax
    8cc5:	48 85 c0             	test   %rax,%rax
    8cc8:	74 24                	je     8cee <dispose_chunk+0x219>
    8cca:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    8cd1:	48 8b 40 18          	mov    0x18(%rax),%rax
    8cd5:	48 39 85 b0 fe ff ff 	cmp    %rax,-0x150(%rbp)
    8cdc:	0f 94 c0             	sete   %al
    8cdf:	0f b6 c0             	movzbl %al,%eax
    8ce2:	48 85 c0             	test   %rax,%rax
    8ce5:	74 07                	je     8cee <dispose_chunk+0x219>
    8ce7:	b8 01 00 00 00       	mov    $0x1,%eax
    8cec:	eb 05                	jmp    8cf3 <dispose_chunk+0x21e>
    8cee:	b8 00 00 00 00       	mov    $0x0,%eax
    8cf3:	85 c0                	test   %eax,%eax
    8cf5:	0f 84 ea 00 00 00    	je     8de5 <dispose_chunk+0x310>
    8cfb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    8d02:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
    8d09:	75 2c                	jne    8d37 <dispose_chunk+0x262>
    8d0b:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8d12:	8b 10                	mov    (%rax),%edx
    8d14:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    8d1a:	be 01 00 00 00       	mov    $0x1,%esi
    8d1f:	89 c1                	mov    %eax,%ecx
    8d21:	d3 e6                	shl    %cl,%esi
    8d23:	89 f0                	mov    %esi,%eax
    8d25:	f7 d0                	not    %eax
    8d27:	21 c2                	and    %eax,%edx
    8d29:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8d30:	89 10                	mov    %edx,(%rax)
    8d32:	e9 2c 05 00 00       	jmpq   9263 <dispose_chunk+0x78e>
    8d37:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    8d3d:	01 c0                	add    %eax,%eax
    8d3f:	89 c0                	mov    %eax,%eax
    8d41:	48 83 c0 08          	add    $0x8,%rax
    8d45:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    8d4c:	00 
    8d4d:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8d54:	48 01 d0             	add    %rdx,%rax
    8d57:	48 83 c0 08          	add    $0x8,%rax
    8d5b:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
    8d62:	0f 94 c0             	sete   %al
    8d65:	0f b6 c0             	movzbl %al,%eax
    8d68:	48 85 c0             	test   %rax,%rax
    8d6b:	75 4a                	jne    8db7 <dispose_chunk+0x2e2>
    8d6d:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8d74:	48 8b 40 18          	mov    0x18(%rax),%rax
    8d78:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
    8d7f:	0f 93 c0             	setae  %al
    8d82:	0f b6 c0             	movzbl %al,%eax
    8d85:	48 85 c0             	test   %rax,%rax
    8d88:	74 24                	je     8dae <dispose_chunk+0x2d9>
    8d8a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    8d91:	48 8b 40 10          	mov    0x10(%rax),%rax
    8d95:	48 39 85 b0 fe ff ff 	cmp    %rax,-0x150(%rbp)
    8d9c:	0f 94 c0             	sete   %al
    8d9f:	0f b6 c0             	movzbl %al,%eax
    8da2:	48 85 c0             	test   %rax,%rax
    8da5:	74 07                	je     8dae <dispose_chunk+0x2d9>
    8da7:	b8 01 00 00 00       	mov    $0x1,%eax
    8dac:	eb 05                	jmp    8db3 <dispose_chunk+0x2de>
    8dae:	b8 00 00 00 00       	mov    $0x0,%eax
    8db3:	85 c0                	test   %eax,%eax
    8db5:	74 29                	je     8de0 <dispose_chunk+0x30b>
    8db7:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    8dbe:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    8dc5:	48 89 50 18          	mov    %rdx,0x18(%rax)
    8dc9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    8dd0:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
    8dd7:	48 89 50 10          	mov    %rdx,0x10(%rax)
    8ddb:	e9 83 04 00 00       	jmpq   9263 <dispose_chunk+0x78e>
    8de0:	e8 a9 71 02 00       	callq  2ff8e <abort>
    8de5:	e8 a4 71 02 00       	callq  2ff8e <abort>
    8dea:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    8df1:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    8df8:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    8dff:	48 8b 40 30          	mov    0x30(%rax),%rax
    8e03:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    8e0a:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    8e11:	48 8b 40 18          	mov    0x18(%rax),%rax
    8e15:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    8e1c:	0f 84 b9 00 00 00    	je     8edb <dispose_chunk+0x406>
    8e22:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    8e29:	48 8b 40 10          	mov    0x10(%rax),%rax
    8e2d:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    8e34:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    8e3b:	48 8b 40 18          	mov    0x18(%rax),%rax
    8e3f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    8e46:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8e4d:	48 8b 40 18          	mov    0x18(%rax),%rax
    8e51:	48 39 85 50 ff ff ff 	cmp    %rax,-0xb0(%rbp)
    8e58:	0f 93 c0             	setae  %al
    8e5b:	0f b6 c0             	movzbl %al,%eax
    8e5e:	48 85 c0             	test   %rax,%rax
    8e61:	74 24                	je     8e87 <dispose_chunk+0x3b2>
    8e63:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    8e6a:	48 8b 40 18          	mov    0x18(%rax),%rax
    8e6e:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    8e75:	0f 94 c0             	sete   %al
    8e78:	0f b6 c0             	movzbl %al,%eax
    8e7b:	48 85 c0             	test   %rax,%rax
    8e7e:	74 07                	je     8e87 <dispose_chunk+0x3b2>
    8e80:	b8 01 00 00 00       	mov    $0x1,%eax
    8e85:	eb 05                	jmp    8e8c <dispose_chunk+0x3b7>
    8e87:	b8 00 00 00 00       	mov    $0x0,%eax
    8e8c:	85 c0                	test   %eax,%eax
    8e8e:	74 46                	je     8ed6 <dispose_chunk+0x401>
    8e90:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    8e97:	48 8b 40 10          	mov    0x10(%rax),%rax
    8e9b:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    8ea2:	0f 94 c0             	sete   %al
    8ea5:	0f b6 c0             	movzbl %al,%eax
    8ea8:	48 85 c0             	test   %rax,%rax
    8eab:	74 29                	je     8ed6 <dispose_chunk+0x401>
    8ead:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    8eb4:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    8ebb:	48 89 50 18          	mov    %rdx,0x18(%rax)
    8ebf:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    8ec6:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    8ecd:	48 89 50 10          	mov    %rdx,0x10(%rax)
    8ed1:	e9 f8 00 00 00       	jmpq   8fce <dispose_chunk+0x4f9>
    8ed6:	e8 b3 70 02 00       	callq  2ff8e <abort>
    8edb:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    8ee2:	48 83 c0 28          	add    $0x28,%rax
    8ee6:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    8eed:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    8ef4:	48 8b 00             	mov    (%rax),%rax
    8ef7:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    8efe:	48 83 bd e0 fe ff ff 	cmpq   $0x0,-0x120(%rbp)
    8f05:	00 
    8f06:	75 52                	jne    8f5a <dispose_chunk+0x485>
    8f08:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    8f0f:	48 83 c0 20          	add    $0x20,%rax
    8f13:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    8f1a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    8f21:	48 8b 00             	mov    (%rax),%rax
    8f24:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    8f2b:	48 83 bd e0 fe ff ff 	cmpq   $0x0,-0x120(%rbp)
    8f32:	00 
    8f33:	0f 84 95 00 00 00    	je     8fce <dispose_chunk+0x4f9>
    8f39:	eb 1f                	jmp    8f5a <dispose_chunk+0x485>
    8f3b:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    8f42:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    8f49:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    8f50:	48 8b 00             	mov    (%rax),%rax
    8f53:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    8f5a:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    8f61:	48 83 c0 28          	add    $0x28,%rax
    8f65:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    8f6c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    8f73:	48 8b 00             	mov    (%rax),%rax
    8f76:	48 85 c0             	test   %rax,%rax
    8f79:	75 c0                	jne    8f3b <dispose_chunk+0x466>
    8f7b:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    8f82:	48 83 c0 20          	add    $0x20,%rax
    8f86:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    8f8d:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    8f94:	48 8b 00             	mov    (%rax),%rax
    8f97:	48 85 c0             	test   %rax,%rax
    8f9a:	75 9f                	jne    8f3b <dispose_chunk+0x466>
    8f9c:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8fa3:	48 8b 40 18          	mov    0x18(%rax),%rax
    8fa7:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
    8fae:	0f 93 c0             	setae  %al
    8fb1:	0f b6 c0             	movzbl %al,%eax
    8fb4:	48 85 c0             	test   %rax,%rax
    8fb7:	74 10                	je     8fc9 <dispose_chunk+0x4f4>
    8fb9:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    8fc0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    8fc7:	eb 05                	jmp    8fce <dispose_chunk+0x4f9>
    8fc9:	e8 c0 6f 02 00       	callq  2ff8e <abort>
    8fce:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
    8fd5:	00 
    8fd6:	0f 84 87 02 00 00    	je     9263 <dispose_chunk+0x78e>
    8fdc:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    8fe3:	8b 40 38             	mov    0x38(%rax),%eax
    8fe6:	89 c0                	mov    %eax,%eax
    8fe8:	48 83 c0 4a          	add    $0x4a,%rax
    8fec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    8ff3:	00 
    8ff4:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    8ffb:	48 01 d0             	add    %rdx,%rax
    8ffe:	48 83 c0 08          	add    $0x8,%rax
    9002:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    9009:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    9010:	48 8b 00             	mov    (%rax),%rax
    9013:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    901a:	75 53                	jne    906f <dispose_chunk+0x59a>
    901c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    9023:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    902a:	48 89 10             	mov    %rdx,(%rax)
    902d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    9034:	48 8b 00             	mov    (%rax),%rax
    9037:	48 85 c0             	test   %rax,%rax
    903a:	0f 85 8d 00 00 00    	jne    90cd <dispose_chunk+0x5f8>
    9040:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9047:	8b 50 04             	mov    0x4(%rax),%edx
    904a:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    9051:	8b 40 38             	mov    0x38(%rax),%eax
    9054:	be 01 00 00 00       	mov    $0x1,%esi
    9059:	89 c1                	mov    %eax,%ecx
    905b:	d3 e6                	shl    %cl,%esi
    905d:	89 f0                	mov    %esi,%eax
    905f:	f7 d0                	not    %eax
    9061:	21 c2                	and    %eax,%edx
    9063:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    906a:	89 50 04             	mov    %edx,0x4(%rax)
    906d:	eb 5e                	jmp    90cd <dispose_chunk+0x5f8>
    906f:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9076:	48 8b 40 18          	mov    0x18(%rax),%rax
    907a:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
    9081:	0f 93 c0             	setae  %al
    9084:	0f b6 c0             	movzbl %al,%eax
    9087:	48 85 c0             	test   %rax,%rax
    908a:	74 3c                	je     90c8 <dispose_chunk+0x5f3>
    908c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    9093:	48 8b 40 20          	mov    0x20(%rax),%rax
    9097:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    909e:	75 14                	jne    90b4 <dispose_chunk+0x5df>
    90a0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    90a7:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    90ae:	48 89 50 20          	mov    %rdx,0x20(%rax)
    90b2:	eb 19                	jmp    90cd <dispose_chunk+0x5f8>
    90b4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    90bb:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    90c2:	48 89 50 28          	mov    %rdx,0x28(%rax)
    90c6:	eb 05                	jmp    90cd <dispose_chunk+0x5f8>
    90c8:	e8 c1 6e 02 00       	callq  2ff8e <abort>
    90cd:	48 83 bd e0 fe ff ff 	cmpq   $0x0,-0x120(%rbp)
    90d4:	00 
    90d5:	0f 84 88 01 00 00    	je     9263 <dispose_chunk+0x78e>
    90db:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    90e2:	48 8b 40 18          	mov    0x18(%rax),%rax
    90e6:	48 39 85 e0 fe ff ff 	cmp    %rax,-0x120(%rbp)
    90ed:	0f 93 c0             	setae  %al
    90f0:	0f b6 c0             	movzbl %al,%eax
    90f3:	48 85 c0             	test   %rax,%rax
    90f6:	0f 84 e1 00 00 00    	je     91dd <dispose_chunk+0x708>
    90fc:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    9103:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    910a:	48 89 50 30          	mov    %rdx,0x30(%rax)
    910e:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    9115:	48 8b 40 20          	mov    0x20(%rax),%rax
    9119:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    9120:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
    9127:	00 
    9128:	74 48                	je     9172 <dispose_chunk+0x69d>
    912a:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9131:	48 8b 40 18          	mov    0x18(%rax),%rax
    9135:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    913c:	0f 93 c0             	setae  %al
    913f:	0f b6 c0             	movzbl %al,%eax
    9142:	48 85 c0             	test   %rax,%rax
    9145:	74 26                	je     916d <dispose_chunk+0x698>
    9147:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    914e:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    9155:	48 89 50 20          	mov    %rdx,0x20(%rax)
    9159:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    9160:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    9167:	48 89 50 30          	mov    %rdx,0x30(%rax)
    916b:	eb 05                	jmp    9172 <dispose_chunk+0x69d>
    916d:	e8 1c 6e 02 00       	callq  2ff8e <abort>
    9172:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    9179:	48 8b 40 28          	mov    0x28(%rax),%rax
    917d:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    9184:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
    918b:	00 
    918c:	0f 84 d1 00 00 00    	je     9263 <dispose_chunk+0x78e>
    9192:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9199:	48 8b 40 18          	mov    0x18(%rax),%rax
    919d:	48 39 85 68 ff ff ff 	cmp    %rax,-0x98(%rbp)
    91a4:	0f 93 c0             	setae  %al
    91a7:	0f b6 c0             	movzbl %al,%eax
    91aa:	48 85 c0             	test   %rax,%rax
    91ad:	74 29                	je     91d8 <dispose_chunk+0x703>
    91af:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    91b6:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
    91bd:	48 89 50 28          	mov    %rdx,0x28(%rax)
    91c1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    91c8:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    91cf:	48 89 50 30          	mov    %rdx,0x30(%rax)
    91d3:	e9 8b 00 00 00       	jmpq   9263 <dispose_chunk+0x78e>
    91d8:	e8 b1 6d 02 00       	callq  2ff8e <abort>
    91dd:	e8 ac 6d 02 00       	callq  2ff8e <abort>
      }
      else if ((next->head & INUSE_BITS) == INUSE_BITS) {
    91e2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    91e9:	48 8b 40 08          	mov    0x8(%rax),%rax
    91ed:	83 e0 03             	and    $0x3,%eax
    91f0:	48 83 f8 03          	cmp    $0x3,%rax
    91f4:	75 6d                	jne    9263 <dispose_chunk+0x78e>
        m->dvsize = psize;
    91f6:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    91fd:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
    9204:	48 89 50 08          	mov    %rdx,0x8(%rax)
        set_free_with_pinuse(p, psize, next);
    9208:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    920f:	48 8b 40 08          	mov    0x8(%rax),%rax
    9213:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
    9217:	48 89 c2             	mov    %rax,%rdx
    921a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    9221:	48 89 50 08          	mov    %rdx,0x8(%rax)
    9225:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    922c:	48 83 c8 01          	or     $0x1,%rax
    9230:	48 89 c2             	mov    %rax,%rdx
    9233:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    923a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    923e:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    9245:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    924c:	48 01 c2             	add    %rax,%rdx
    924f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    9256:	48 89 02             	mov    %rax,(%rdx)
        return;
    9259:	e9 a5 0b 00 00       	jmpq   9e03 <dispose_chunk+0x132e>
      }
    }
    else {
      CORRUPTION_ERROR_ACTION(m);
    925e:	e8 2b 6d 02 00       	callq  2ff8e <abort>
      return;
    }
  }
  if (RTCHECK(ok_address(m, next))) {
    9263:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    926a:	48 8b 40 18          	mov    0x18(%rax),%rax
    926e:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    9275:	0f 93 c0             	setae  %al
    9278:	0f b6 c0             	movzbl %al,%eax
    927b:	48 85 c0             	test   %rax,%rax
    927e:	0f 84 79 0b 00 00    	je     9dfd <dispose_chunk+0x1328>
    if (!cinuse(next)) {  /* consolidate forward */
    9284:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    928b:	48 8b 40 08          	mov    0x8(%rax),%rax
    928f:	83 e0 02             	and    $0x2,%eax
    9292:	48 85 c0             	test   %rax,%rax
    9295:	0f 85 f3 06 00 00    	jne    998e <dispose_chunk+0xeb9>
      if (next == m->top) {
    929b:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    92a2:	48 8b 40 28          	mov    0x28(%rax),%rax
    92a6:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    92ad:	0f 85 92 00 00 00    	jne    9345 <dispose_chunk+0x870>
        size_t tsize = m->topsize += psize;
    92b3:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    92ba:	48 8b 50 10          	mov    0x10(%rax),%rdx
    92be:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    92c5:	48 01 c2             	add    %rax,%rdx
    92c8:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    92cf:	48 89 50 10          	mov    %rdx,0x10(%rax)
    92d3:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    92da:	48 8b 40 10          	mov    0x10(%rax),%rax
    92de:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        m->top = p;
    92e2:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    92e9:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    92f0:	48 89 50 28          	mov    %rdx,0x28(%rax)
        p->head = tsize | PINUSE_BIT;
    92f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    92f8:	48 83 c8 01          	or     $0x1,%rax
    92fc:	48 89 c2             	mov    %rax,%rdx
    92ff:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    9306:	48 89 50 08          	mov    %rdx,0x8(%rax)
        if (p == m->dv) {
    930a:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9311:	48 8b 40 20          	mov    0x20(%rax),%rax
    9315:	48 39 85 b0 fe ff ff 	cmp    %rax,-0x150(%rbp)
    931c:	0f 85 e0 0a 00 00    	jne    9e02 <dispose_chunk+0x132d>
          m->dv = 0;
    9322:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9329:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    9330:	00 
          m->dvsize = 0;
    9331:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9338:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    933f:	00 
        }
        return;
    9340:	e9 bd 0a 00 00       	jmpq   9e02 <dispose_chunk+0x132d>
      }
      else if (next == m->dv) {
    9345:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    934c:	48 8b 40 20          	mov    0x20(%rax),%rax
    9350:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    9357:	75 71                	jne    93ca <dispose_chunk+0x8f5>
        size_t dsize = m->dvsize += psize;
    9359:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9360:	48 8b 50 08          	mov    0x8(%rax),%rdx
    9364:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    936b:	48 01 c2             	add    %rax,%rdx
    936e:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9375:	48 89 50 08          	mov    %rdx,0x8(%rax)
    9379:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9380:	48 8b 40 08          	mov    0x8(%rax),%rax
    9384:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        m->dv = p;
    9388:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    938f:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    9396:	48 89 50 20          	mov    %rdx,0x20(%rax)
        set_size_and_pinuse_of_free_chunk(p, dsize);
    939a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    939e:	48 83 c8 01          	or     $0x1,%rax
    93a2:	48 89 c2             	mov    %rax,%rdx
    93a5:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    93ac:	48 89 50 08          	mov    %rdx,0x8(%rax)
    93b0:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    93b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    93bb:	48 01 c2             	add    %rax,%rdx
    93be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    93c2:	48 89 02             	mov    %rax,(%rdx)
        return;
    93c5:	e9 39 0a 00 00       	jmpq   9e03 <dispose_chunk+0x132e>
      }
      else {
        size_t nsize = chunksize(next);
    93ca:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    93d1:	48 8b 40 08          	mov    0x8(%rax),%rax
    93d5:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    93d9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
        psize += nsize;
    93dd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    93e1:	48 01 85 a8 fe ff ff 	add    %rax,-0x158(%rbp)
        unlink_chunk(m, next, nsize);
    93e8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    93ec:	48 c1 e8 03          	shr    $0x3,%rax
    93f0:	48 83 f8 1f          	cmp    $0x1f,%rax
    93f4:	0f 87 c6 01 00 00    	ja     95c0 <dispose_chunk+0xaeb>
    93fa:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    9401:	48 8b 40 10          	mov    0x10(%rax),%rax
    9405:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    9409:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    9410:	48 8b 40 18          	mov    0x18(%rax),%rax
    9414:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    9418:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    941c:	48 c1 e8 03          	shr    $0x3,%rax
    9420:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%rbp)
    9426:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    942d:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
    9431:	75 05                	jne    9438 <dispose_chunk+0x963>
    9433:	e8 56 6b 02 00       	callq  2ff8e <abort>
    9438:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    943f:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
    9443:	75 05                	jne    944a <dispose_chunk+0x975>
    9445:	e8 44 6b 02 00       	callq  2ff8e <abort>
    944a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    9451:	48 8b 40 08          	mov    0x8(%rax),%rax
    9455:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    9459:	48 89 c2             	mov    %rax,%rdx
    945c:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    9462:	c1 e0 03             	shl    $0x3,%eax
    9465:	89 c0                	mov    %eax,%eax
    9467:	48 39 c2             	cmp    %rax,%rdx
    946a:	74 05                	je     9471 <dispose_chunk+0x99c>
    946c:	e8 1d 6b 02 00       	callq  2ff8e <abort>
    9471:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    9477:	01 c0                	add    %eax,%eax
    9479:	89 c0                	mov    %eax,%eax
    947b:	48 83 c0 08          	add    $0x8,%rax
    947f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    9486:	00 
    9487:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    948e:	48 01 d0             	add    %rdx,%rax
    9491:	48 83 c0 08          	add    $0x8,%rax
    9495:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
    9499:	0f 94 c0             	sete   %al
    949c:	0f b6 c0             	movzbl %al,%eax
    949f:	48 85 c0             	test   %rax,%rax
    94a2:	75 48                	jne    94ec <dispose_chunk+0xa17>
    94a4:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    94ab:	48 8b 40 18          	mov    0x18(%rax),%rax
    94af:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
    94b3:	0f 93 c0             	setae  %al
    94b6:	0f b6 c0             	movzbl %al,%eax
    94b9:	48 85 c0             	test   %rax,%rax
    94bc:	74 21                	je     94df <dispose_chunk+0xa0a>
    94be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    94c2:	48 8b 40 18          	mov    0x18(%rax),%rax
    94c6:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    94cd:	0f 94 c0             	sete   %al
    94d0:	0f b6 c0             	movzbl %al,%eax
    94d3:	48 85 c0             	test   %rax,%rax
    94d6:	74 07                	je     94df <dispose_chunk+0xa0a>
    94d8:	b8 01 00 00 00       	mov    $0x1,%eax
    94dd:	eb 05                	jmp    94e4 <dispose_chunk+0xa0f>
    94df:	b8 00 00 00 00       	mov    $0x0,%eax
    94e4:	85 c0                	test   %eax,%eax
    94e6:	0f 84 cf 00 00 00    	je     95bb <dispose_chunk+0xae6>
    94ec:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    94f0:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
    94f4:	75 2c                	jne    9522 <dispose_chunk+0xa4d>
    94f6:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    94fd:	8b 10                	mov    (%rax),%edx
    94ff:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    9505:	be 01 00 00 00       	mov    $0x1,%esi
    950a:	89 c1                	mov    %eax,%ecx
    950c:	d3 e6                	shl    %cl,%esi
    950e:	89 f0                	mov    %esi,%eax
    9510:	f7 d0                	not    %eax
    9512:	21 c2                	and    %eax,%edx
    9514:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    951b:	89 10                	mov    %edx,(%rax)
    951d:	e9 0d 04 00 00       	jmpq   992f <dispose_chunk+0xe5a>
    9522:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    9528:	01 c0                	add    %eax,%eax
    952a:	89 c0                	mov    %eax,%eax
    952c:	48 83 c0 08          	add    $0x8,%rax
    9530:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    9537:	00 
    9538:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    953f:	48 01 d0             	add    %rdx,%rax
    9542:	48 83 c0 08          	add    $0x8,%rax
    9546:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    954a:	0f 94 c0             	sete   %al
    954d:	0f b6 c0             	movzbl %al,%eax
    9550:	48 85 c0             	test   %rax,%rax
    9553:	75 44                	jne    9599 <dispose_chunk+0xac4>
    9555:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    955c:	48 8b 40 18          	mov    0x18(%rax),%rax
    9560:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    9564:	0f 93 c0             	setae  %al
    9567:	0f b6 c0             	movzbl %al,%eax
    956a:	48 85 c0             	test   %rax,%rax
    956d:	74 21                	je     9590 <dispose_chunk+0xabb>
    956f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    9573:	48 8b 40 10          	mov    0x10(%rax),%rax
    9577:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    957e:	0f 94 c0             	sete   %al
    9581:	0f b6 c0             	movzbl %al,%eax
    9584:	48 85 c0             	test   %rax,%rax
    9587:	74 07                	je     9590 <dispose_chunk+0xabb>
    9589:	b8 01 00 00 00       	mov    $0x1,%eax
    958e:	eb 05                	jmp    9595 <dispose_chunk+0xac0>
    9590:	b8 00 00 00 00       	mov    $0x0,%eax
    9595:	85 c0                	test   %eax,%eax
    9597:	74 1d                	je     95b6 <dispose_chunk+0xae1>
    9599:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    959d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    95a1:	48 89 50 18          	mov    %rdx,0x18(%rax)
    95a5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    95a9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    95ad:	48 89 50 10          	mov    %rdx,0x10(%rax)
    95b1:	e9 79 03 00 00       	jmpq   992f <dispose_chunk+0xe5a>
    95b6:	e8 d3 69 02 00       	callq  2ff8e <abort>
    95bb:	e8 ce 69 02 00       	callq  2ff8e <abort>
    95c0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    95c7:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    95cb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    95cf:	48 8b 40 30          	mov    0x30(%rax),%rax
    95d3:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    95d7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    95db:	48 8b 40 18          	mov    0x18(%rax),%rax
    95df:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    95e3:	0f 84 9e 00 00 00    	je     9687 <dispose_chunk+0xbb2>
    95e9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    95ed:	48 8b 40 10          	mov    0x10(%rax),%rax
    95f1:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    95f5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    95f9:	48 8b 40 18          	mov    0x18(%rax),%rax
    95fd:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    9604:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    960b:	48 8b 40 18          	mov    0x18(%rax),%rax
    960f:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    9613:	0f 93 c0             	setae  %al
    9616:	0f b6 c0             	movzbl %al,%eax
    9619:	48 85 c0             	test   %rax,%rax
    961c:	74 1e                	je     963c <dispose_chunk+0xb67>
    961e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9622:	48 8b 40 18          	mov    0x18(%rax),%rax
    9626:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    962a:	0f 94 c0             	sete   %al
    962d:	0f b6 c0             	movzbl %al,%eax
    9630:	48 85 c0             	test   %rax,%rax
    9633:	74 07                	je     963c <dispose_chunk+0xb67>
    9635:	b8 01 00 00 00       	mov    $0x1,%eax
    963a:	eb 05                	jmp    9641 <dispose_chunk+0xb6c>
    963c:	b8 00 00 00 00       	mov    $0x0,%eax
    9641:	85 c0                	test   %eax,%eax
    9643:	74 3d                	je     9682 <dispose_chunk+0xbad>
    9645:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    964c:	48 8b 40 10          	mov    0x10(%rax),%rax
    9650:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    9654:	0f 94 c0             	sete   %al
    9657:	0f b6 c0             	movzbl %al,%eax
    965a:	48 85 c0             	test   %rax,%rax
    965d:	74 23                	je     9682 <dispose_chunk+0xbad>
    965f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9663:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
    966a:	48 89 50 18          	mov    %rdx,0x18(%rax)
    966e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    9675:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    9679:	48 89 50 10          	mov    %rdx,0x10(%rax)
    967d:	e9 f2 00 00 00       	jmpq   9774 <dispose_chunk+0xc9f>
    9682:	e8 07 69 02 00       	callq  2ff8e <abort>
    9687:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    968b:	48 83 c0 28          	add    $0x28,%rax
    968f:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    9696:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    969d:	48 8b 00             	mov    (%rax),%rax
    96a0:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    96a7:	48 83 bd f8 fe ff ff 	cmpq   $0x0,-0x108(%rbp)
    96ae:	00 
    96af:	75 4f                	jne    9700 <dispose_chunk+0xc2b>
    96b1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    96b5:	48 83 c0 20          	add    $0x20,%rax
    96b9:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    96c0:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    96c7:	48 8b 00             	mov    (%rax),%rax
    96ca:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    96d1:	48 83 bd f8 fe ff ff 	cmpq   $0x0,-0x108(%rbp)
    96d8:	00 
    96d9:	0f 84 95 00 00 00    	je     9774 <dispose_chunk+0xc9f>
    96df:	eb 1f                	jmp    9700 <dispose_chunk+0xc2b>
    96e1:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    96e8:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    96ef:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    96f6:	48 8b 00             	mov    (%rax),%rax
    96f9:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    9700:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    9707:	48 83 c0 28          	add    $0x28,%rax
    970b:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    9712:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    9719:	48 8b 00             	mov    (%rax),%rax
    971c:	48 85 c0             	test   %rax,%rax
    971f:	75 c0                	jne    96e1 <dispose_chunk+0xc0c>
    9721:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    9728:	48 83 c0 20          	add    $0x20,%rax
    972c:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    9733:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    973a:	48 8b 00             	mov    (%rax),%rax
    973d:	48 85 c0             	test   %rax,%rax
    9740:	75 9f                	jne    96e1 <dispose_chunk+0xc0c>
    9742:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9749:	48 8b 40 18          	mov    0x18(%rax),%rax
    974d:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
    9754:	0f 93 c0             	setae  %al
    9757:	0f b6 c0             	movzbl %al,%eax
    975a:	48 85 c0             	test   %rax,%rax
    975d:	74 10                	je     976f <dispose_chunk+0xc9a>
    975f:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    9766:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    976d:	eb 05                	jmp    9774 <dispose_chunk+0xc9f>
    976f:	e8 1a 68 02 00       	callq  2ff8e <abort>
    9774:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    9779:	0f 84 b0 01 00 00    	je     992f <dispose_chunk+0xe5a>
    977f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    9783:	8b 40 38             	mov    0x38(%rax),%eax
    9786:	89 c0                	mov    %eax,%eax
    9788:	48 83 c0 4a          	add    $0x4a,%rax
    978c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    9793:	00 
    9794:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    979b:	48 01 d0             	add    %rdx,%rax
    979e:	48 83 c0 08          	add    $0x8,%rax
    97a2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    97a6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    97aa:	48 8b 00             	mov    (%rax),%rax
    97ad:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    97b1:	75 46                	jne    97f9 <dispose_chunk+0xd24>
    97b3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    97b7:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
    97be:	48 89 10             	mov    %rdx,(%rax)
    97c1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    97c5:	48 8b 00             	mov    (%rax),%rax
    97c8:	48 85 c0             	test   %rax,%rax
    97cb:	75 7b                	jne    9848 <dispose_chunk+0xd73>
    97cd:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    97d4:	8b 50 04             	mov    0x4(%rax),%edx
    97d7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    97db:	8b 40 38             	mov    0x38(%rax),%eax
    97de:	be 01 00 00 00       	mov    $0x1,%esi
    97e3:	89 c1                	mov    %eax,%ecx
    97e5:	d3 e6                	shl    %cl,%esi
    97e7:	89 f0                	mov    %esi,%eax
    97e9:	f7 d0                	not    %eax
    97eb:	21 c2                	and    %eax,%edx
    97ed:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    97f4:	89 50 04             	mov    %edx,0x4(%rax)
    97f7:	eb 4f                	jmp    9848 <dispose_chunk+0xd73>
    97f9:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9800:	48 8b 40 18          	mov    0x18(%rax),%rax
    9804:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    9808:	0f 93 c0             	setae  %al
    980b:	0f b6 c0             	movzbl %al,%eax
    980e:	48 85 c0             	test   %rax,%rax
    9811:	74 30                	je     9843 <dispose_chunk+0xd6e>
    9813:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    9817:	48 8b 40 20          	mov    0x20(%rax),%rax
    981b:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    981f:	75 11                	jne    9832 <dispose_chunk+0xd5d>
    9821:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    9825:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
    982c:	48 89 50 20          	mov    %rdx,0x20(%rax)
    9830:	eb 16                	jmp    9848 <dispose_chunk+0xd73>
    9832:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    9836:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
    983d:	48 89 50 28          	mov    %rdx,0x28(%rax)
    9841:	eb 05                	jmp    9848 <dispose_chunk+0xd73>
    9843:	e8 46 67 02 00       	callq  2ff8e <abort>
    9848:	48 83 bd f8 fe ff ff 	cmpq   $0x0,-0x108(%rbp)
    984f:	00 
    9850:	0f 84 d9 00 00 00    	je     992f <dispose_chunk+0xe5a>
    9856:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    985d:	48 8b 40 18          	mov    0x18(%rax),%rax
    9861:	48 39 85 f8 fe ff ff 	cmp    %rax,-0x108(%rbp)
    9868:	0f 93 c0             	setae  %al
    986b:	0f b6 c0             	movzbl %al,%eax
    986e:	48 85 c0             	test   %rax,%rax
    9871:	0f 84 b3 00 00 00    	je     992a <dispose_chunk+0xe55>
    9877:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    987e:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    9882:	48 89 50 30          	mov    %rdx,0x30(%rax)
    9886:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    988a:	48 8b 40 20          	mov    0x20(%rax),%rax
    988e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    9892:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    9897:	74 3f                	je     98d8 <dispose_chunk+0xe03>
    9899:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    98a0:	48 8b 40 18          	mov    0x18(%rax),%rax
    98a4:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    98a8:	0f 93 c0             	setae  %al
    98ab:	0f b6 c0             	movzbl %al,%eax
    98ae:	48 85 c0             	test   %rax,%rax
    98b1:	74 20                	je     98d3 <dispose_chunk+0xdfe>
    98b3:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    98ba:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    98be:	48 89 50 20          	mov    %rdx,0x20(%rax)
    98c2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    98c6:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
    98cd:	48 89 50 30          	mov    %rdx,0x30(%rax)
    98d1:	eb 05                	jmp    98d8 <dispose_chunk+0xe03>
    98d3:	e8 b6 66 02 00       	callq  2ff8e <abort>
    98d8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    98dc:	48 8b 40 28          	mov    0x28(%rax),%rax
    98e0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    98e4:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    98e9:	74 44                	je     992f <dispose_chunk+0xe5a>
    98eb:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    98f2:	48 8b 40 18          	mov    0x18(%rax),%rax
    98f6:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    98fa:	0f 93 c0             	setae  %al
    98fd:	0f b6 c0             	movzbl %al,%eax
    9900:	48 85 c0             	test   %rax,%rax
    9903:	74 20                	je     9925 <dispose_chunk+0xe50>
    9905:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    990c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    9910:	48 89 50 28          	mov    %rdx,0x28(%rax)
    9914:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    9918:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
    991f:	48 89 50 30          	mov    %rdx,0x30(%rax)
    9923:	eb 0a                	jmp    992f <dispose_chunk+0xe5a>
    9925:	e8 64 66 02 00       	callq  2ff8e <abort>
    992a:	e8 5f 66 02 00       	callq  2ff8e <abort>
        set_size_and_pinuse_of_free_chunk(p, psize);
    992f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    9936:	48 83 c8 01          	or     $0x1,%rax
    993a:	48 89 c2             	mov    %rax,%rdx
    993d:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    9944:	48 89 50 08          	mov    %rdx,0x8(%rax)
    9948:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    994f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    9956:	48 01 c2             	add    %rax,%rdx
    9959:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    9960:	48 89 02             	mov    %rax,(%rdx)
        if (p == m->dv) {
    9963:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    996a:	48 8b 40 20          	mov    0x20(%rax),%rax
    996e:	48 39 85 b0 fe ff ff 	cmp    %rax,-0x150(%rbp)
    9975:	75 68                	jne    99df <dispose_chunk+0xf0a>
          m->dvsize = psize;
    9977:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    997e:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
    9985:	48 89 50 08          	mov    %rdx,0x8(%rax)
          return;
    9989:	e9 75 04 00 00       	jmpq   9e03 <dispose_chunk+0x132e>
        }
      }
    }
    else {
      set_free_with_pinuse(p, psize, next);
    998e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    9995:	48 8b 40 08          	mov    0x8(%rax),%rax
    9999:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
    999d:	48 89 c2             	mov    %rax,%rdx
    99a0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    99a7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    99ab:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    99b2:	48 83 c8 01          	or     $0x1,%rax
    99b6:	48 89 c2             	mov    %rax,%rdx
    99b9:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    99c0:	48 89 50 08          	mov    %rdx,0x8(%rax)
    99c4:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    99cb:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    99d2:	48 01 c2             	add    %rax,%rdx
    99d5:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    99dc:	48 89 02             	mov    %rax,(%rdx)
    }
    insert_chunk(m, p, psize);
    99df:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    99e6:	48 c1 e8 03          	shr    $0x3,%rax
    99ea:	48 83 f8 1f          	cmp    $0x1f,%rax
    99ee:	0f 87 18 01 00 00    	ja     9b0c <dispose_chunk+0x1037>
    99f4:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    99fb:	48 c1 e8 03          	shr    $0x3,%rax
    99ff:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
    9a05:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    9a0b:	01 c0                	add    %eax,%eax
    9a0d:	89 c0                	mov    %eax,%eax
    9a0f:	48 83 c0 08          	add    $0x8,%rax
    9a13:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    9a1a:	00 
    9a1b:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9a22:	48 01 d0             	add    %rdx,%rax
    9a25:	48 83 c0 08          	add    $0x8,%rax
    9a29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    9a2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a31:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    9a38:	48 83 bd a8 fe ff ff 	cmpq   $0x1f,-0x158(%rbp)
    9a3f:	1f 
    9a40:	77 05                	ja     9a47 <dispose_chunk+0xf72>
    9a42:	e8 47 65 02 00       	callq  2ff8e <abort>
    9a47:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9a4e:	8b 10                	mov    (%rax),%edx
    9a50:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    9a56:	be 01 00 00 00       	mov    $0x1,%esi
    9a5b:	89 c1                	mov    %eax,%ecx
    9a5d:	d3 e6                	shl    %cl,%esi
    9a5f:	89 f0                	mov    %esi,%eax
    9a61:	21 d0                	and    %edx,%eax
    9a63:	85 c0                	test   %eax,%eax
    9a65:	75 27                	jne    9a8e <dispose_chunk+0xfb9>
    9a67:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9a6e:	8b 10                	mov    (%rax),%edx
    9a70:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    9a76:	be 01 00 00 00       	mov    $0x1,%esi
    9a7b:	89 c1                	mov    %eax,%ecx
    9a7d:	d3 e6                	shl    %cl,%esi
    9a7f:	89 f0                	mov    %esi,%eax
    9a81:	09 c2                	or     %eax,%edx
    9a83:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9a8a:	89 10                	mov    %edx,(%rax)
    9a8c:	eb 37                	jmp    9ac5 <dispose_chunk+0xff0>
    9a8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9a92:	48 8b 50 10          	mov    0x10(%rax),%rdx
    9a96:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9a9d:	48 8b 40 18          	mov    0x18(%rax),%rax
    9aa1:	48 39 c2             	cmp    %rax,%rdx
    9aa4:	0f 93 c0             	setae  %al
    9aa7:	0f b6 c0             	movzbl %al,%eax
    9aaa:	48 85 c0             	test   %rax,%rax
    9aad:	74 11                	je     9ac0 <dispose_chunk+0xfeb>
    9aaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ab3:	48 8b 40 10          	mov    0x10(%rax),%rax
    9ab7:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    9abe:	eb 05                	jmp    9ac5 <dispose_chunk+0xff0>
    9ac0:	e8 c9 64 02 00       	callq  2ff8e <abort>
    9ac5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    9ac9:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    9ad0:	48 89 50 10          	mov    %rdx,0x10(%rax)
    9ad4:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    9adb:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    9ae2:	48 89 50 18          	mov    %rdx,0x18(%rax)
    9ae6:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    9aed:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
    9af4:	48 89 50 10          	mov    %rdx,0x10(%rax)
    9af8:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    9aff:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    9b03:	48 89 50 18          	mov    %rdx,0x18(%rax)
    9b07:	e9 f7 02 00 00       	jmpq   9e03 <dispose_chunk+0x132e>
    9b0c:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    9b13:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    9b17:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    9b1e:	48 c1 e8 08          	shr    $0x8,%rax
    9b22:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%rbp)
    9b28:	83 bd d4 fe ff ff 00 	cmpl   $0x0,-0x12c(%rbp)
    9b2f:	75 0c                	jne    9b3d <dispose_chunk+0x1068>
    9b31:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    9b38:	00 00 00 
    9b3b:	eb 5d                	jmp    9b9a <dispose_chunk+0x10c5>
    9b3d:	81 bd d4 fe ff ff ff 	cmpl   $0xffff,-0x12c(%rbp)
    9b44:	ff 00 00 
    9b47:	76 0c                	jbe    9b55 <dispose_chunk+0x1080>
    9b49:	c7 85 c8 fe ff ff 1f 	movl   $0x1f,-0x138(%rbp)
    9b50:	00 00 00 
    9b53:	eb 45                	jmp    9b9a <dispose_chunk+0x10c5>
    9b55:	0f bd 85 d4 fe ff ff 	bsr    -0x12c(%rbp),%eax
    9b5c:	83 f0 1f             	xor    $0x1f,%eax
    9b5f:	ba 1f 00 00 00       	mov    $0x1f,%edx
    9b64:	29 c2                	sub    %eax,%edx
    9b66:	89 d0                	mov    %edx,%eax
    9b68:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    9b6e:	8b 85 d8 fe ff ff    	mov    -0x128(%rbp),%eax
    9b74:	8d 34 00             	lea    (%rax,%rax,1),%esi
    9b77:	8b 85 d8 fe ff ff    	mov    -0x128(%rbp),%eax
    9b7d:	83 c0 07             	add    $0x7,%eax
    9b80:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
    9b87:	89 c1                	mov    %eax,%ecx
    9b89:	48 d3 ea             	shr    %cl,%rdx
    9b8c:	48 89 d0             	mov    %rdx,%rax
    9b8f:	83 e0 01             	and    $0x1,%eax
    9b92:	01 f0                	add    %esi,%eax
    9b94:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    9b9a:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    9ba0:	48 83 c0 4a          	add    $0x4a,%rax
    9ba4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    9bab:	00 
    9bac:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9bb3:	48 01 d0             	add    %rdx,%rax
    9bb6:	48 83 c0 08          	add    $0x8,%rax
    9bba:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    9bbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9bc2:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    9bc8:	89 50 38             	mov    %edx,0x38(%rax)
    9bcb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9bcf:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    9bd6:	00 
    9bd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9bdb:	48 8b 50 28          	mov    0x28(%rax),%rdx
    9bdf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9be3:	48 89 50 20          	mov    %rdx,0x20(%rax)
    9be7:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9bee:	8b 50 04             	mov    0x4(%rax),%edx
    9bf1:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    9bf7:	be 01 00 00 00       	mov    $0x1,%esi
    9bfc:	89 c1                	mov    %eax,%ecx
    9bfe:	d3 e6                	shl    %cl,%esi
    9c00:	89 f0                	mov    %esi,%eax
    9c02:	21 d0                	and    %edx,%eax
    9c04:	85 c0                	test   %eax,%eax
    9c06:	75 5f                	jne    9c67 <dispose_chunk+0x1192>
    9c08:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9c0f:	8b 50 04             	mov    0x4(%rax),%edx
    9c12:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    9c18:	be 01 00 00 00       	mov    $0x1,%esi
    9c1d:	89 c1                	mov    %eax,%ecx
    9c1f:	d3 e6                	shl    %cl,%esi
    9c21:	89 f0                	mov    %esi,%eax
    9c23:	09 c2                	or     %eax,%edx
    9c25:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9c2c:	89 50 04             	mov    %edx,0x4(%rax)
    9c2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9c33:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9c37:	48 89 10             	mov    %rdx,(%rax)
    9c3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9c3e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    9c42:	48 89 50 30          	mov    %rdx,0x30(%rax)
    9c46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9c4a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9c4e:	48 89 50 18          	mov    %rdx,0x18(%rax)
    9c52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9c56:	48 8b 50 18          	mov    0x18(%rax),%rdx
    9c5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9c5e:	48 89 50 10          	mov    %rdx,0x10(%rax)
    9c62:	e9 9c 01 00 00       	jmpq   9e03 <dispose_chunk+0x132e>
    9c67:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    9c6b:	48 8b 00             	mov    (%rax),%rax
    9c6e:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    9c75:	83 bd c8 fe ff ff 1f 	cmpl   $0x1f,-0x138(%rbp)
    9c7c:	74 13                	je     9c91 <dispose_chunk+0x11bc>
    9c7e:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    9c84:	d1 e8                	shr    %eax
    9c86:	ba 39 00 00 00       	mov    $0x39,%edx
    9c8b:	29 c2                	sub    %eax,%edx
    9c8d:	89 d0                	mov    %edx,%eax
    9c8f:	eb 05                	jmp    9c96 <dispose_chunk+0x11c1>
    9c91:	b8 00 00 00 00       	mov    $0x0,%eax
    9c96:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
    9c9d:	89 c1                	mov    %eax,%ecx
    9c9f:	48 d3 e2             	shl    %cl,%rdx
    9ca2:	48 89 d0             	mov    %rdx,%rax
    9ca5:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    9cac:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    9cb3:	48 8b 40 08          	mov    0x8(%rax),%rax
    9cb7:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    9cbb:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
    9cc2:	0f 84 a2 00 00 00    	je     9d6a <dispose_chunk+0x1295>
    9cc8:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    9ccf:	48 c1 e8 3f          	shr    $0x3f,%rax
    9cd3:	48 83 c0 04          	add    $0x4,%rax
    9cd7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    9cde:	00 
    9cdf:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    9ce6:	48 01 d0             	add    %rdx,%rax
    9ce9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    9ced:	48 d1 a5 20 ff ff ff 	shlq   -0xe0(%rbp)
    9cf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9cf8:	48 8b 00             	mov    (%rax),%rax
    9cfb:	48 85 c0             	test   %rax,%rax
    9cfe:	74 10                	je     9d10 <dispose_chunk+0x123b>
    9d00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9d04:	48 8b 00             	mov    (%rax),%rax
    9d07:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    9d0e:	eb 9c                	jmp    9cac <dispose_chunk+0x11d7>
    9d10:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9d17:	48 8b 40 18          	mov    0x18(%rax),%rax
    9d1b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    9d1f:	0f 93 c0             	setae  %al
    9d22:	0f b6 c0             	movzbl %al,%eax
    9d25:	48 85 c0             	test   %rax,%rax
    9d28:	74 3b                	je     9d65 <dispose_chunk+0x1290>
    9d2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    9d2e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9d32:	48 89 10             	mov    %rdx,(%rax)
    9d35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9d39:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
    9d40:	48 89 50 30          	mov    %rdx,0x30(%rax)
    9d44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9d48:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9d4c:	48 89 50 18          	mov    %rdx,0x18(%rax)
    9d50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9d54:	48 8b 50 18          	mov    0x18(%rax),%rdx
    9d58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9d5c:	48 89 50 10          	mov    %rdx,0x10(%rax)
    9d60:	e9 9e 00 00 00       	jmpq   9e03 <dispose_chunk+0x132e>
    9d65:	e8 24 62 02 00       	callq  2ff8e <abort>
    9d6a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    9d71:	48 8b 40 10          	mov    0x10(%rax),%rax
    9d75:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    9d79:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9d80:	48 8b 40 18          	mov    0x18(%rax),%rax
    9d84:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
    9d8b:	0f 93 c0             	setae  %al
    9d8e:	0f b6 c0             	movzbl %al,%eax
    9d91:	48 85 c0             	test   %rax,%rax
    9d94:	74 62                	je     9df8 <dispose_chunk+0x1323>
    9d96:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    9d9d:	48 8b 40 18          	mov    0x18(%rax),%rax
    9da1:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    9da5:	0f 93 c0             	setae  %al
    9da8:	0f b6 c0             	movzbl %al,%eax
    9dab:	48 85 c0             	test   %rax,%rax
    9dae:	74 48                	je     9df8 <dispose_chunk+0x1323>
    9db0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9db4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    9db8:	48 89 50 18          	mov    %rdx,0x18(%rax)
    9dbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    9dc0:	48 8b 50 18          	mov    0x18(%rax),%rdx
    9dc4:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    9dcb:	48 89 50 10          	mov    %rdx,0x10(%rax)
    9dcf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9dd3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    9dd7:	48 89 50 10          	mov    %rdx,0x10(%rax)
    9ddb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9ddf:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
    9de6:	48 89 50 18          	mov    %rdx,0x18(%rax)
    9dea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    9dee:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
    9df5:	00 
    9df6:	eb 0b                	jmp    9e03 <dispose_chunk+0x132e>
    9df8:	e8 91 61 02 00       	callq  2ff8e <abort>
  }
  else {
    CORRUPTION_ERROR_ACTION(m);
    9dfd:	e8 8c 61 02 00       	callq  2ff8e <abort>
        return;
    9e02:	90                   	nop
  }
}
    9e03:	c9                   	leaveq 
    9e04:	c3                   	retq   

0000000000009e05 <tmalloc_large>:

/* ---------------------------- malloc --------------------------- */

/* allocate a large request from the best fitting chunk in a treebin */
static void* tmalloc_large(mstate m, size_t nb) {
    9e05:	55                   	push   %rbp
    9e06:	48 89 e5             	mov    %rsp,%rbp
    9e09:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
    9e10:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    9e17:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
  tchunkptr v = 0;
    9e1e:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
    9e25:	00 00 00 00 
  size_t rsize = -nb; /* Unsigned negation */
    9e29:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    9e30:	48 f7 d8             	neg    %rax
    9e33:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  tchunkptr t;
  bindex_t idx;
  compute_tree_index(nb, idx);
    9e3a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    9e41:	48 c1 e8 08          	shr    $0x8,%rax
    9e45:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
    9e4b:	83 bd 14 ff ff ff 00 	cmpl   $0x0,-0xec(%rbp)
    9e52:	75 0c                	jne    9e60 <tmalloc_large+0x5b>
    9e54:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
    9e5b:	00 00 00 
    9e5e:	eb 5d                	jmp    9ebd <tmalloc_large+0xb8>
    9e60:	81 bd 14 ff ff ff ff 	cmpl   $0xffff,-0xec(%rbp)
    9e67:	ff 00 00 
    9e6a:	76 0c                	jbe    9e78 <tmalloc_large+0x73>
    9e6c:	c7 85 0c ff ff ff 1f 	movl   $0x1f,-0xf4(%rbp)
    9e73:	00 00 00 
    9e76:	eb 45                	jmp    9ebd <tmalloc_large+0xb8>
    9e78:	0f bd 85 14 ff ff ff 	bsr    -0xec(%rbp),%eax
    9e7f:	83 f0 1f             	xor    $0x1f,%eax
    9e82:	ba 1f 00 00 00       	mov    $0x1f,%edx
    9e87:	29 c2                	sub    %eax,%edx
    9e89:	89 d0                	mov    %edx,%eax
    9e8b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
    9e91:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
    9e97:	8d 34 00             	lea    (%rax,%rax,1),%esi
    9e9a:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
    9ea0:	83 c0 07             	add    $0x7,%eax
    9ea3:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
    9eaa:	89 c1                	mov    %eax,%ecx
    9eac:	48 d3 ea             	shr    %cl,%rdx
    9eaf:	48 89 d0             	mov    %rdx,%rax
    9eb2:	83 e0 01             	and    $0x1,%eax
    9eb5:	01 f0                	add    %esi,%eax
    9eb7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  if ((t = *treebin_at(m, idx)) != 0) {
    9ebd:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    9ec4:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
    9eca:	48 83 c2 4a          	add    $0x4a,%rdx
    9ece:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
    9ed3:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    9eda:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
    9ee1:	00 
    9ee2:	0f 84 05 01 00 00    	je     9fed <tmalloc_large+0x1e8>
    /* Traverse tree for this bin looking for node with size == nb */
    size_t sizebits = nb << leftshift_for_tree_index(idx);
    9ee8:	83 bd 0c ff ff ff 1f 	cmpl   $0x1f,-0xf4(%rbp)
    9eef:	74 13                	je     9f04 <tmalloc_large+0xff>
    9ef1:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
    9ef7:	d1 e8                	shr    %eax
    9ef9:	ba 39 00 00 00       	mov    $0x39,%edx
    9efe:	29 c2                	sub    %eax,%edx
    9f00:	89 d0                	mov    %edx,%eax
    9f02:	eb 05                	jmp    9f09 <tmalloc_large+0x104>
    9f04:	b8 00 00 00 00       	mov    $0x0,%eax
    9f09:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
    9f10:	89 c1                	mov    %eax,%ecx
    9f12:	48 d3 e2             	shl    %cl,%rdx
    9f15:	48 89 d0             	mov    %rdx,%rax
    9f18:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    tchunkptr rst = 0;  /* The deepest untaken right subtree */
    9f1f:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
    9f26:	00 00 00 00 
    for (;;) {
      tchunkptr rt;
      size_t trem = chunksize(t) - nb;
    9f2a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    9f31:	48 8b 40 08          	mov    0x8(%rax),%rax
    9f35:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    9f39:	48 2b 85 f0 fe ff ff 	sub    -0x110(%rbp),%rax
    9f40:	48 89 45 90          	mov    %rax,-0x70(%rbp)
      if (trem < rsize) {
    9f44:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    9f48:	48 3b 85 40 ff ff ff 	cmp    -0xc0(%rbp),%rax
    9f4f:	73 23                	jae    9f74 <tmalloc_large+0x16f>
        v = t;
    9f51:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    9f58:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
        if ((rsize = trem) == 0)
    9f5f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    9f63:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    9f6a:	48 83 bd 40 ff ff ff 	cmpq   $0x0,-0xc0(%rbp)
    9f71:	00 
    9f72:	74 78                	je     9fec <tmalloc_large+0x1e7>
          break;
      }
      rt = t->child[1];
    9f74:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    9f7b:	48 8b 40 28          	mov    0x28(%rax),%rax
    9f7f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
    9f83:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    9f8a:	48 c1 e8 3f          	shr    $0x3f,%rax
    9f8e:	48 89 c2             	mov    %rax,%rdx
    9f91:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    9f98:	48 83 c2 04          	add    $0x4,%rdx
    9f9c:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
    9fa0:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
      if (rt != 0 && rt != t)
    9fa7:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
    9fac:	74 18                	je     9fc6 <tmalloc_large+0x1c1>
    9fae:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9fb2:	48 3b 85 48 ff ff ff 	cmp    -0xb8(%rbp),%rax
    9fb9:	74 0b                	je     9fc6 <tmalloc_large+0x1c1>
        rst = rt;
    9fbb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    9fbf:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
      if (t == 0) {
    9fc6:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
    9fcd:	00 
    9fce:	75 10                	jne    9fe0 <tmalloc_large+0x1db>
        t = rst; /* set t to least subtree holding sizes > nb */
    9fd0:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    9fd7:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
        break;
    9fde:	eb 0d                	jmp    9fed <tmalloc_large+0x1e8>
      }
      sizebits <<= 1;
    9fe0:	48 d1 a5 50 ff ff ff 	shlq   -0xb0(%rbp)
    for (;;) {
    9fe7:	e9 3e ff ff ff       	jmpq   9f2a <tmalloc_large+0x125>
          break;
    9fec:	90                   	nop
    }
  }
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
    9fed:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
    9ff4:	00 
    9ff5:	0f 85 14 01 00 00    	jne    a10f <tmalloc_large+0x30a>
    9ffb:	48 83 bd 38 ff ff ff 	cmpq   $0x0,-0xc8(%rbp)
    a002:	00 
    a003:	0f 85 06 01 00 00    	jne    a10f <tmalloc_large+0x30a>
    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
    a009:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
    a00f:	ba 01 00 00 00       	mov    $0x1,%edx
    a014:	89 c1                	mov    %eax,%ecx
    a016:	d3 e2                	shl    %cl,%edx
    a018:	89 d0                	mov    %edx,%eax
    a01a:	8d 14 00             	lea    (%rax,%rax,1),%edx
    a01d:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
    a023:	be 01 00 00 00       	mov    $0x1,%esi
    a028:	89 c1                	mov    %eax,%ecx
    a02a:	d3 e6                	shl    %cl,%esi
    a02c:	89 f0                	mov    %esi,%eax
    a02e:	01 c0                	add    %eax,%eax
    a030:	f7 d8                	neg    %eax
    a032:	09 c2                	or     %eax,%edx
    a034:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a03b:	8b 40 04             	mov    0x4(%rax),%eax
    a03e:	21 d0                	and    %edx,%eax
    a040:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
    if (leftbits != 0) {
    a046:	83 bd 1c ff ff ff 00 	cmpl   $0x0,-0xe4(%rbp)
    a04d:	0f 84 bc 00 00 00    	je     a10f <tmalloc_large+0x30a>
      bindex_t i;
      binmap_t leastbit = least_bit(leftbits);
    a053:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    a059:	f7 d8                	neg    %eax
    a05b:	23 85 1c ff ff ff    	and    -0xe4(%rbp),%eax
    a061:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%rbp)
      compute_bit2idx(leastbit, i);
    a067:	f3 0f bc 85 20 ff ff 	tzcnt  -0xe0(%rbp),%eax
    a06e:	ff 
    a06f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
    a075:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    a07b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
      t = *treebin_at(m, i);
    a081:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a088:	8b 95 28 ff ff ff    	mov    -0xd8(%rbp),%edx
    a08e:	48 83 c2 4a          	add    $0x4a,%rdx
    a092:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
    a097:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    }
  }

  while (t != 0) { /* find smallest of tree or subtree */
    a09e:	eb 6f                	jmp    a10f <tmalloc_large+0x30a>
    size_t trem = chunksize(t) - nb;
    a0a0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    a0a7:	48 8b 40 08          	mov    0x8(%rax),%rax
    a0ab:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    a0af:	48 2b 85 f0 fe ff ff 	sub    -0x110(%rbp),%rax
    a0b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (trem < rsize) {
    a0ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0be:	48 3b 85 40 ff ff ff 	cmp    -0xc0(%rbp),%rax
    a0c5:	73 19                	jae    a0e0 <tmalloc_large+0x2db>
      rsize = trem;
    a0c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    a0cb:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
      v = t;
    a0d2:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    a0d9:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    }
    t = leftmost_child(t);
    a0e0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    a0e7:	48 8b 40 20          	mov    0x20(%rax),%rax
    a0eb:	48 85 c0             	test   %rax,%rax
    a0ee:	74 0d                	je     a0fd <tmalloc_large+0x2f8>
    a0f0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    a0f7:	48 8b 40 20          	mov    0x20(%rax),%rax
    a0fb:	eb 0b                	jmp    a108 <tmalloc_large+0x303>
    a0fd:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    a104:	48 8b 40 28          	mov    0x28(%rax),%rax
    a108:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  while (t != 0) { /* find smallest of tree or subtree */
    a10f:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
    a116:	00 
    a117:	75 87                	jne    a0a0 <tmalloc_large+0x29b>
  }

  /*  If dv is a better fit, return 0 so malloc will use it */
  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
    a119:	48 83 bd 38 ff ff ff 	cmpq   $0x0,-0xc8(%rbp)
    a120:	00 
    a121:	0f 84 41 09 00 00    	je     aa68 <tmalloc_large+0xc63>
    a127:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a12e:	48 8b 40 08          	mov    0x8(%rax),%rax
    a132:	48 2b 85 f0 fe ff ff 	sub    -0x110(%rbp),%rax
    a139:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    a140:	0f 83 22 09 00 00    	jae    aa68 <tmalloc_large+0xc63>
    if (RTCHECK(ok_address(m, v))) { /* split */
    a146:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a14d:	48 8b 40 18          	mov    0x18(%rax),%rax
    a151:	48 39 85 38 ff ff ff 	cmp    %rax,-0xc8(%rbp)
    a158:	0f 93 c0             	setae  %al
    a15b:	0f b6 c0             	movzbl %al,%eax
    a15e:	48 85 c0             	test   %rax,%rax
    a161:	0f 84 fc 08 00 00    	je     aa63 <tmalloc_large+0xc5e>
      mchunkptr r = chunk_plus_offset(v, nb);
    a167:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
    a16e:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    a175:	48 01 d0             	add    %rdx,%rax
    a178:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
      assert(chunksize(v) == rsize + nb);
    a17c:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a183:	48 8b 40 08          	mov    0x8(%rax),%rax
    a187:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    a18b:	48 89 c1             	mov    %rax,%rcx
    a18e:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    a195:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    a19c:	48 01 d0             	add    %rdx,%rax
    a19f:	48 39 c1             	cmp    %rax,%rcx
    a1a2:	74 05                	je     a1a9 <tmalloc_large+0x3a4>
    a1a4:	e8 e5 5d 02 00       	callq  2ff8e <abort>
      if (RTCHECK(ok_next(v, r))) {
    a1a9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a1b0:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
    a1b4:	0f 92 c0             	setb   %al
    a1b7:	0f b6 c0             	movzbl %al,%eax
    a1ba:	48 85 c0             	test   %rax,%rax
    a1bd:	0f 84 a0 08 00 00    	je     aa63 <tmalloc_large+0xc5e>
        unlink_large_chunk(m, v);
    a1c3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a1ca:	48 8b 40 30          	mov    0x30(%rax),%rax
    a1ce:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    a1d2:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a1d9:	48 8b 40 18          	mov    0x18(%rax),%rax
    a1dd:	48 39 85 38 ff ff ff 	cmp    %rax,-0xc8(%rbp)
    a1e4:	0f 84 aa 00 00 00    	je     a294 <tmalloc_large+0x48f>
    a1ea:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a1f1:	48 8b 40 10          	mov    0x10(%rax),%rax
    a1f5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    a1f9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a200:	48 8b 40 18          	mov    0x18(%rax),%rax
    a204:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    a20b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a212:	48 8b 40 18          	mov    0x18(%rax),%rax
    a216:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    a21a:	0f 93 c0             	setae  %al
    a21d:	0f b6 c0             	movzbl %al,%eax
    a220:	48 85 c0             	test   %rax,%rax
    a223:	74 21                	je     a246 <tmalloc_large+0x441>
    a225:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    a229:	48 8b 40 18          	mov    0x18(%rax),%rax
    a22d:	48 39 85 38 ff ff ff 	cmp    %rax,-0xc8(%rbp)
    a234:	0f 94 c0             	sete   %al
    a237:	0f b6 c0             	movzbl %al,%eax
    a23a:	48 85 c0             	test   %rax,%rax
    a23d:	74 07                	je     a246 <tmalloc_large+0x441>
    a23f:	b8 01 00 00 00       	mov    $0x1,%eax
    a244:	eb 05                	jmp    a24b <tmalloc_large+0x446>
    a246:	b8 00 00 00 00       	mov    $0x0,%eax
    a24b:	85 c0                	test   %eax,%eax
    a24d:	74 40                	je     a28f <tmalloc_large+0x48a>
    a24f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    a256:	48 8b 40 10          	mov    0x10(%rax),%rax
    a25a:	48 39 85 38 ff ff ff 	cmp    %rax,-0xc8(%rbp)
    a261:	0f 94 c0             	sete   %al
    a264:	0f b6 c0             	movzbl %al,%eax
    a267:	48 85 c0             	test   %rax,%rax
    a26a:	74 23                	je     a28f <tmalloc_large+0x48a>
    a26c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    a270:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    a277:	48 89 50 18          	mov    %rdx,0x18(%rax)
    a27b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    a282:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    a286:	48 89 50 10          	mov    %rdx,0x10(%rax)
    a28a:	e9 f8 00 00 00       	jmpq   a387 <tmalloc_large+0x582>
    a28f:	e8 fa 5c 02 00       	callq  2ff8e <abort>
    a294:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a29b:	48 83 c0 28          	add    $0x28,%rax
    a29f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    a2a6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    a2ad:	48 8b 00             	mov    (%rax),%rax
    a2b0:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    a2b7:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
    a2be:	00 
    a2bf:	75 52                	jne    a313 <tmalloc_large+0x50e>
    a2c1:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a2c8:	48 83 c0 20          	add    $0x20,%rax
    a2cc:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    a2d3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    a2da:	48 8b 00             	mov    (%rax),%rax
    a2dd:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    a2e4:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
    a2eb:	00 
    a2ec:	0f 84 95 00 00 00    	je     a387 <tmalloc_large+0x582>
    a2f2:	eb 1f                	jmp    a313 <tmalloc_large+0x50e>
    a2f4:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    a2fb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    a302:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    a309:	48 8b 00             	mov    (%rax),%rax
    a30c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    a313:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    a31a:	48 83 c0 28          	add    $0x28,%rax
    a31e:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    a325:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    a32c:	48 8b 00             	mov    (%rax),%rax
    a32f:	48 85 c0             	test   %rax,%rax
    a332:	75 c0                	jne    a2f4 <tmalloc_large+0x4ef>
    a334:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    a33b:	48 83 c0 20          	add    $0x20,%rax
    a33f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    a346:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    a34d:	48 8b 00             	mov    (%rax),%rax
    a350:	48 85 c0             	test   %rax,%rax
    a353:	75 9f                	jne    a2f4 <tmalloc_large+0x4ef>
    a355:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a35c:	48 8b 40 18          	mov    0x18(%rax),%rax
    a360:	48 39 85 68 ff ff ff 	cmp    %rax,-0x98(%rbp)
    a367:	0f 93 c0             	setae  %al
    a36a:	0f b6 c0             	movzbl %al,%eax
    a36d:	48 85 c0             	test   %rax,%rax
    a370:	74 10                	je     a382 <tmalloc_large+0x57d>
    a372:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    a379:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    a380:	eb 05                	jmp    a387 <tmalloc_large+0x582>
    a382:	e8 07 5c 02 00       	callq  2ff8e <abort>
    a387:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    a38c:	0f 84 c6 01 00 00    	je     a558 <tmalloc_large+0x753>
    a392:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a399:	8b 40 38             	mov    0x38(%rax),%eax
    a39c:	89 c0                	mov    %eax,%eax
    a39e:	48 83 c0 4a          	add    $0x4a,%rax
    a3a2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    a3a9:	00 
    a3aa:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a3b1:	48 01 d0             	add    %rdx,%rax
    a3b4:	48 83 c0 08          	add    $0x8,%rax
    a3b8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    a3bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a3c0:	48 8b 00             	mov    (%rax),%rax
    a3c3:	48 39 85 38 ff ff ff 	cmp    %rax,-0xc8(%rbp)
    a3ca:	75 4d                	jne    a419 <tmalloc_large+0x614>
    a3cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a3d0:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    a3d7:	48 89 10             	mov    %rdx,(%rax)
    a3da:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    a3de:	48 8b 00             	mov    (%rax),%rax
    a3e1:	48 85 c0             	test   %rax,%rax
    a3e4:	0f 85 81 00 00 00    	jne    a46b <tmalloc_large+0x666>
    a3ea:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a3f1:	8b 50 04             	mov    0x4(%rax),%edx
    a3f4:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a3fb:	8b 40 38             	mov    0x38(%rax),%eax
    a3fe:	be 01 00 00 00       	mov    $0x1,%esi
    a403:	89 c1                	mov    %eax,%ecx
    a405:	d3 e6                	shl    %cl,%esi
    a407:	89 f0                	mov    %esi,%eax
    a409:	f7 d0                	not    %eax
    a40b:	21 c2                	and    %eax,%edx
    a40d:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a414:	89 50 04             	mov    %edx,0x4(%rax)
    a417:	eb 52                	jmp    a46b <tmalloc_large+0x666>
    a419:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a420:	48 8b 40 18          	mov    0x18(%rax),%rax
    a424:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    a428:	0f 93 c0             	setae  %al
    a42b:	0f b6 c0             	movzbl %al,%eax
    a42e:	48 85 c0             	test   %rax,%rax
    a431:	74 33                	je     a466 <tmalloc_large+0x661>
    a433:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    a437:	48 8b 40 20          	mov    0x20(%rax),%rax
    a43b:	48 39 85 38 ff ff ff 	cmp    %rax,-0xc8(%rbp)
    a442:	75 11                	jne    a455 <tmalloc_large+0x650>
    a444:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    a448:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    a44f:	48 89 50 20          	mov    %rdx,0x20(%rax)
    a453:	eb 16                	jmp    a46b <tmalloc_large+0x666>
    a455:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    a459:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    a460:	48 89 50 28          	mov    %rdx,0x28(%rax)
    a464:	eb 05                	jmp    a46b <tmalloc_large+0x666>
    a466:	e8 23 5b 02 00       	callq  2ff8e <abort>
    a46b:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
    a472:	00 
    a473:	0f 84 df 00 00 00    	je     a558 <tmalloc_large+0x753>
    a479:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a480:	48 8b 40 18          	mov    0x18(%rax),%rax
    a484:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    a48b:	0f 93 c0             	setae  %al
    a48e:	0f b6 c0             	movzbl %al,%eax
    a491:	48 85 c0             	test   %rax,%rax
    a494:	0f 84 b9 00 00 00    	je     a553 <tmalloc_large+0x74e>
    a49a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    a4a1:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    a4a5:	48 89 50 30          	mov    %rdx,0x30(%rax)
    a4a9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a4b0:	48 8b 40 20          	mov    0x20(%rax),%rax
    a4b4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    a4b8:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    a4bd:	74 3f                	je     a4fe <tmalloc_large+0x6f9>
    a4bf:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a4c6:	48 8b 40 18          	mov    0x18(%rax),%rax
    a4ca:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    a4ce:	0f 93 c0             	setae  %al
    a4d1:	0f b6 c0             	movzbl %al,%eax
    a4d4:	48 85 c0             	test   %rax,%rax
    a4d7:	74 20                	je     a4f9 <tmalloc_large+0x6f4>
    a4d9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    a4e0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    a4e4:	48 89 50 20          	mov    %rdx,0x20(%rax)
    a4e8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    a4ec:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    a4f3:	48 89 50 30          	mov    %rdx,0x30(%rax)
    a4f7:	eb 05                	jmp    a4fe <tmalloc_large+0x6f9>
    a4f9:	e8 90 5a 02 00       	callq  2ff8e <abort>
    a4fe:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a505:	48 8b 40 28          	mov    0x28(%rax),%rax
    a509:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    a50d:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    a512:	74 44                	je     a558 <tmalloc_large+0x753>
    a514:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a51b:	48 8b 40 18          	mov    0x18(%rax),%rax
    a51f:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
    a523:	0f 93 c0             	setae  %al
    a526:	0f b6 c0             	movzbl %al,%eax
    a529:	48 85 c0             	test   %rax,%rax
    a52c:	74 20                	je     a54e <tmalloc_large+0x749>
    a52e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    a535:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    a539:	48 89 50 28          	mov    %rdx,0x28(%rax)
    a53d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    a541:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    a548:	48 89 50 30          	mov    %rdx,0x30(%rax)
    a54c:	eb 0a                	jmp    a558 <tmalloc_large+0x753>
    a54e:	e8 3b 5a 02 00       	callq  2ff8e <abort>
    a553:	e8 36 5a 02 00       	callq  2ff8e <abort>
        if (rsize < MIN_CHUNK_SIZE)
    a558:	48 83 bd 40 ff ff ff 	cmpq   $0x1f,-0xc0(%rbp)
    a55f:	1f 
    a560:	0f 87 99 00 00 00    	ja     a5ff <tmalloc_large+0x7fa>
          set_inuse_and_pinuse(m, v, (rsize + nb));
    a566:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    a56d:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    a574:	48 01 d0             	add    %rdx,%rax
    a577:	48 83 c8 03          	or     $0x3,%rax
    a57b:	48 89 c2             	mov    %rax,%rdx
    a57e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a585:	48 89 50 08          	mov    %rdx,0x8(%rax)
    a589:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    a590:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    a597:	48 01 c2             	add    %rax,%rdx
    a59a:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a5a1:	48 01 d0             	add    %rdx,%rax
    a5a4:	48 8b 50 08          	mov    0x8(%rax),%rdx
    a5a8:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
    a5af:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    a5b6:	48 01 c1             	add    %rax,%rcx
    a5b9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a5c0:	48 01 c8             	add    %rcx,%rax
    a5c3:	48 83 ca 01          	or     $0x1,%rdx
    a5c7:	48 89 50 08          	mov    %rdx,0x8(%rax)
    a5cb:	48 8b 0d ce b3 22 00 	mov    0x22b3ce(%rip),%rcx        # 2359a0 <mparams>
    a5d2:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
    a5d9:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
    a5e0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    a5e7:	48 01 c6             	add    %rax,%rsi
    a5ea:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a5f1:	48 01 f0             	add    %rsi,%rax
    a5f4:	48 31 ca             	xor    %rcx,%rdx
    a5f7:	48 89 10             	mov    %rdx,(%rax)
    a5fa:	e9 57 04 00 00       	jmpq   aa56 <tmalloc_large+0xc51>
        else {
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    a5ff:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    a606:	48 83 c8 03          	or     $0x3,%rax
    a60a:	48 89 c2             	mov    %rax,%rdx
    a60d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    a614:	48 89 50 08          	mov    %rdx,0x8(%rax)
    a618:	48 8b 0d 81 b3 22 00 	mov    0x22b381(%rip),%rcx        # 2359a0 <mparams>
    a61f:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
    a626:	48 8b b5 38 ff ff ff 	mov    -0xc8(%rbp),%rsi
    a62d:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    a634:	48 01 f0             	add    %rsi,%rax
    a637:	48 31 ca             	xor    %rcx,%rdx
    a63a:	48 89 10             	mov    %rdx,(%rax)
          set_size_and_pinuse_of_free_chunk(r, rsize);
    a63d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    a644:	48 83 c8 01          	or     $0x1,%rax
    a648:	48 89 c2             	mov    %rax,%rdx
    a64b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    a64f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    a653:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    a657:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    a65e:	48 01 c2             	add    %rax,%rdx
    a661:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    a668:	48 89 02             	mov    %rax,(%rdx)
          insert_chunk(m, r, rsize);
    a66b:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    a672:	48 c1 e8 03          	shr    $0x3,%rax
    a676:	48 83 f8 1f          	cmp    $0x1f,%rax
    a67a:	0f 87 0c 01 00 00    	ja     a78c <tmalloc_large+0x987>
    a680:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    a687:	48 c1 e8 03          	shr    $0x3,%rax
    a68b:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
    a691:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    a697:	01 c0                	add    %eax,%eax
    a699:	89 c0                	mov    %eax,%eax
    a69b:	48 83 c0 08          	add    $0x8,%rax
    a69f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    a6a6:	00 
    a6a7:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a6ae:	48 01 d0             	add    %rdx,%rax
    a6b1:	48 83 c0 08          	add    $0x8,%rax
    a6b5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    a6b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a6bd:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    a6c4:	48 83 bd 40 ff ff ff 	cmpq   $0x1f,-0xc0(%rbp)
    a6cb:	1f 
    a6cc:	77 05                	ja     a6d3 <tmalloc_large+0x8ce>
    a6ce:	e8 bb 58 02 00       	callq  2ff8e <abort>
    a6d3:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a6da:	8b 10                	mov    (%rax),%edx
    a6dc:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    a6e2:	be 01 00 00 00       	mov    $0x1,%esi
    a6e7:	89 c1                	mov    %eax,%ecx
    a6e9:	d3 e6                	shl    %cl,%esi
    a6eb:	89 f0                	mov    %esi,%eax
    a6ed:	21 d0                	and    %edx,%eax
    a6ef:	85 c0                	test   %eax,%eax
    a6f1:	75 27                	jne    a71a <tmalloc_large+0x915>
    a6f3:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a6fa:	8b 10                	mov    (%rax),%edx
    a6fc:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    a702:	be 01 00 00 00       	mov    $0x1,%esi
    a707:	89 c1                	mov    %eax,%ecx
    a709:	d3 e6                	shl    %cl,%esi
    a70b:	89 f0                	mov    %esi,%eax
    a70d:	09 c2                	or     %eax,%edx
    a70f:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a716:	89 10                	mov    %edx,(%rax)
    a718:	eb 37                	jmp    a751 <tmalloc_large+0x94c>
    a71a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a71e:	48 8b 50 10          	mov    0x10(%rax),%rdx
    a722:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a729:	48 8b 40 18          	mov    0x18(%rax),%rax
    a72d:	48 39 c2             	cmp    %rax,%rdx
    a730:	0f 93 c0             	setae  %al
    a733:	0f b6 c0             	movzbl %al,%eax
    a736:	48 85 c0             	test   %rax,%rax
    a739:	74 11                	je     a74c <tmalloc_large+0x947>
    a73b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a73f:	48 8b 40 10          	mov    0x10(%rax),%rax
    a743:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    a74a:	eb 05                	jmp    a751 <tmalloc_large+0x94c>
    a74c:	e8 3d 58 02 00       	callq  2ff8e <abort>
    a751:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    a755:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    a759:	48 89 50 10          	mov    %rdx,0x10(%rax)
    a75d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    a764:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    a768:	48 89 50 18          	mov    %rdx,0x18(%rax)
    a76c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    a770:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    a777:	48 89 50 10          	mov    %rdx,0x10(%rax)
    a77b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    a77f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    a783:	48 89 50 18          	mov    %rdx,0x18(%rax)
    a787:	e9 ca 02 00 00       	jmpq   aa56 <tmalloc_large+0xc51>
    a78c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    a790:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    a794:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    a79b:	48 c1 e8 08          	shr    $0x8,%rax
    a79f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%rbp)
    a7a5:	83 bd 2c ff ff ff 00 	cmpl   $0x0,-0xd4(%rbp)
    a7ac:	75 0c                	jne    a7ba <tmalloc_large+0x9b5>
    a7ae:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%rbp)
    a7b5:	00 00 00 
    a7b8:	eb 5d                	jmp    a817 <tmalloc_large+0xa12>
    a7ba:	81 bd 2c ff ff ff ff 	cmpl   $0xffff,-0xd4(%rbp)
    a7c1:	ff 00 00 
    a7c4:	76 0c                	jbe    a7d2 <tmalloc_large+0x9cd>
    a7c6:	c7 85 10 ff ff ff 1f 	movl   $0x1f,-0xf0(%rbp)
    a7cd:	00 00 00 
    a7d0:	eb 45                	jmp    a817 <tmalloc_large+0xa12>
    a7d2:	0f bd 85 2c ff ff ff 	bsr    -0xd4(%rbp),%eax
    a7d9:	83 f0 1f             	xor    $0x1f,%eax
    a7dc:	ba 1f 00 00 00       	mov    $0x1f,%edx
    a7e1:	29 c2                	sub    %eax,%edx
    a7e3:	89 d0                	mov    %edx,%eax
    a7e5:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%rbp)
    a7eb:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    a7f1:	8d 34 00             	lea    (%rax,%rax,1),%esi
    a7f4:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    a7fa:	83 c0 07             	add    $0x7,%eax
    a7fd:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    a804:	89 c1                	mov    %eax,%ecx
    a806:	48 d3 ea             	shr    %cl,%rdx
    a809:	48 89 d0             	mov    %rdx,%rax
    a80c:	83 e0 01             	and    $0x1,%eax
    a80f:	01 f0                	add    %esi,%eax
    a811:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%rbp)
    a817:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
    a81d:	48 83 c0 4a          	add    $0x4a,%rax
    a821:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    a828:	00 
    a829:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a830:	48 01 d0             	add    %rdx,%rax
    a833:	48 83 c0 08          	add    $0x8,%rax
    a837:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    a83b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a83f:	8b 95 10 ff ff ff    	mov    -0xf0(%rbp),%edx
    a845:	89 50 38             	mov    %edx,0x38(%rax)
    a848:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a84c:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    a853:	00 
    a854:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a858:	48 8b 50 28          	mov    0x28(%rax),%rdx
    a85c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a860:	48 89 50 20          	mov    %rdx,0x20(%rax)
    a864:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a86b:	8b 50 04             	mov    0x4(%rax),%edx
    a86e:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
    a874:	be 01 00 00 00       	mov    $0x1,%esi
    a879:	89 c1                	mov    %eax,%ecx
    a87b:	d3 e6                	shl    %cl,%esi
    a87d:	89 f0                	mov    %esi,%eax
    a87f:	21 d0                	and    %edx,%eax
    a881:	85 c0                	test   %eax,%eax
    a883:	75 5f                	jne    a8e4 <tmalloc_large+0xadf>
    a885:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a88c:	8b 50 04             	mov    0x4(%rax),%edx
    a88f:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
    a895:	be 01 00 00 00       	mov    $0x1,%esi
    a89a:	89 c1                	mov    %eax,%ecx
    a89c:	d3 e6                	shl    %cl,%esi
    a89e:	89 f0                	mov    %esi,%eax
    a8a0:	09 c2                	or     %eax,%edx
    a8a2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a8a9:	89 50 04             	mov    %edx,0x4(%rax)
    a8ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a8b0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a8b4:	48 89 10             	mov    %rdx,(%rax)
    a8b7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a8bb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    a8bf:	48 89 50 30          	mov    %rdx,0x30(%rax)
    a8c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a8c7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a8cb:	48 89 50 18          	mov    %rdx,0x18(%rax)
    a8cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a8d3:	48 8b 50 18          	mov    0x18(%rax),%rdx
    a8d7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a8db:	48 89 50 10          	mov    %rdx,0x10(%rax)
    a8df:	e9 72 01 00 00       	jmpq   aa56 <tmalloc_large+0xc51>
    a8e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    a8e8:	48 8b 00             	mov    (%rax),%rax
    a8eb:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    a8ef:	83 bd 10 ff ff ff 1f 	cmpl   $0x1f,-0xf0(%rbp)
    a8f6:	74 13                	je     a90b <tmalloc_large+0xb06>
    a8f8:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
    a8fe:	d1 e8                	shr    %eax
    a900:	ba 39 00 00 00       	mov    $0x39,%edx
    a905:	29 c2                	sub    %eax,%edx
    a907:	89 d0                	mov    %edx,%eax
    a909:	eb 05                	jmp    a910 <tmalloc_large+0xb0b>
    a90b:	b8 00 00 00 00       	mov    $0x0,%eax
    a910:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    a917:	89 c1                	mov    %eax,%ecx
    a919:	48 d3 e2             	shl    %cl,%rdx
    a91c:	48 89 d0             	mov    %rdx,%rax
    a91f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    a923:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    a927:	48 8b 40 08          	mov    0x8(%rax),%rax
    a92b:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    a92f:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    a936:	0f 84 93 00 00 00    	je     a9cf <tmalloc_large+0xbca>
    a93c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    a940:	48 c1 e8 3f          	shr    $0x3f,%rax
    a944:	48 83 c0 04          	add    $0x4,%rax
    a948:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    a94f:	00 
    a950:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    a954:	48 01 d0             	add    %rdx,%rax
    a957:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    a95b:	48 d1 65 88          	shlq   -0x78(%rbp)
    a95f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a963:	48 8b 00             	mov    (%rax),%rax
    a966:	48 85 c0             	test   %rax,%rax
    a969:	74 0d                	je     a978 <tmalloc_large+0xb73>
    a96b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a96f:	48 8b 00             	mov    (%rax),%rax
    a972:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    a976:	eb ab                	jmp    a923 <tmalloc_large+0xb1e>
    a978:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a97f:	48 8b 40 18          	mov    0x18(%rax),%rax
    a983:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    a987:	0f 93 c0             	setae  %al
    a98a:	0f b6 c0             	movzbl %al,%eax
    a98d:	48 85 c0             	test   %rax,%rax
    a990:	74 38                	je     a9ca <tmalloc_large+0xbc5>
    a992:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    a996:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a99a:	48 89 10             	mov    %rdx,(%rax)
    a99d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a9a1:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    a9a5:	48 89 50 30          	mov    %rdx,0x30(%rax)
    a9a9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a9ad:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    a9b1:	48 89 50 18          	mov    %rdx,0x18(%rax)
    a9b5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a9b9:	48 8b 50 18          	mov    0x18(%rax),%rdx
    a9bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    a9c1:	48 89 50 10          	mov    %rdx,0x10(%rax)
    a9c5:	e9 8c 00 00 00       	jmpq   aa56 <tmalloc_large+0xc51>
    a9ca:	e8 bf 55 02 00       	callq  2ff8e <abort>
    a9cf:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    a9d3:	48 8b 40 10          	mov    0x10(%rax),%rax
    a9d7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    a9db:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a9e2:	48 8b 40 18          	mov    0x18(%rax),%rax
    a9e6:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
    a9ea:	0f 93 c0             	setae  %al
    a9ed:	0f b6 c0             	movzbl %al,%eax
    a9f0:	48 85 c0             	test   %rax,%rax
    a9f3:	74 5c                	je     aa51 <tmalloc_large+0xc4c>
    a9f5:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    a9fc:	48 8b 40 18          	mov    0x18(%rax),%rax
    aa00:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    aa04:	0f 93 c0             	setae  %al
    aa07:	0f b6 c0             	movzbl %al,%eax
    aa0a:	48 85 c0             	test   %rax,%rax
    aa0d:	74 42                	je     aa51 <tmalloc_large+0xc4c>
    aa0f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    aa13:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    aa17:	48 89 50 18          	mov    %rdx,0x18(%rax)
    aa1b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    aa1f:	48 8b 50 18          	mov    0x18(%rax),%rdx
    aa23:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    aa27:	48 89 50 10          	mov    %rdx,0x10(%rax)
    aa2b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    aa2f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    aa33:	48 89 50 10          	mov    %rdx,0x10(%rax)
    aa37:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    aa3b:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    aa3f:	48 89 50 18          	mov    %rdx,0x18(%rax)
    aa43:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    aa47:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
    aa4e:	00 
    aa4f:	eb 05                	jmp    aa56 <tmalloc_large+0xc51>
    aa51:	e8 38 55 02 00       	callq  2ff8e <abort>
        }
        return chunk2mem(v);
    aa56:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    aa5d:	48 83 c0 10          	add    $0x10,%rax
    aa61:	eb 0a                	jmp    aa6d <tmalloc_large+0xc68>
      }
    }
    CORRUPTION_ERROR_ACTION(m);
    aa63:	e8 26 55 02 00       	callq  2ff8e <abort>
  }
  return 0;
    aa68:	b8 00 00 00 00       	mov    $0x0,%eax
}
    aa6d:	c9                   	leaveq 
    aa6e:	c3                   	retq   

000000000000aa6f <tmalloc_small>:

/* allocate a small request from the best fitting chunk in a treebin */
static void* tmalloc_small(mstate m, size_t nb) {
    aa6f:	55                   	push   %rbp
    aa70:	48 89 e5             	mov    %rsp,%rbp
    aa73:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
    aa7a:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    aa81:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  tchunkptr t, v;
  size_t rsize;
  bindex_t i;
  binmap_t leastbit = least_bit(m->treemap);
    aa88:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    aa8f:	8b 50 04             	mov    0x4(%rax),%edx
    aa92:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    aa99:	8b 40 04             	mov    0x4(%rax),%eax
    aa9c:	f7 d8                	neg    %eax
    aa9e:	21 d0                	and    %edx,%eax
    aaa0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  compute_bit2idx(leastbit, i);
    aaa6:	f3 0f bc 85 68 ff ff 	tzcnt  -0x98(%rbp),%eax
    aaad:	ff 
    aaae:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    aab4:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    aaba:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
  v = t = *treebin_at(m, i);
    aac0:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    aac7:	8b 95 70 ff ff ff    	mov    -0x90(%rbp),%edx
    aacd:	48 83 c2 4a          	add    $0x4a,%rdx
    aad1:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
    aad6:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    aadd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    aae4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  rsize = chunksize(t) - nb;
    aae8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    aaef:	48 8b 40 08          	mov    0x8(%rax),%rax
    aaf3:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    aaf7:	48 2b 85 50 ff ff ff 	sub    -0xb0(%rbp),%rax
    aafe:	48 89 45 88          	mov    %rax,-0x78(%rbp)

  while ((t = leftmost_child(t)) != 0) {
    ab02:	eb 37                	jmp    ab3b <tmalloc_small+0xcc>
    size_t trem = chunksize(t) - nb;
    ab04:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    ab0b:	48 8b 40 08          	mov    0x8(%rax),%rax
    ab0f:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    ab13:	48 2b 85 50 ff ff ff 	sub    -0xb0(%rbp),%rax
    ab1a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (trem < rsize) {
    ab1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab22:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
    ab26:	73 13                	jae    ab3b <tmalloc_small+0xcc>
      rsize = trem;
    ab28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ab2c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
      v = t;
    ab30:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    ab37:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  while ((t = leftmost_child(t)) != 0) {
    ab3b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    ab42:	48 8b 40 20          	mov    0x20(%rax),%rax
    ab46:	48 85 c0             	test   %rax,%rax
    ab49:	74 0d                	je     ab58 <tmalloc_small+0xe9>
    ab4b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    ab52:	48 8b 40 20          	mov    0x20(%rax),%rax
    ab56:	eb 0b                	jmp    ab63 <tmalloc_small+0xf4>
    ab58:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    ab5f:	48 8b 40 28          	mov    0x28(%rax),%rax
    ab63:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    ab6a:	48 83 bd 78 ff ff ff 	cmpq   $0x0,-0x88(%rbp)
    ab71:	00 
    ab72:	75 90                	jne    ab04 <tmalloc_small+0x95>
    }
  }

  if (RTCHECK(ok_address(m, v))) {
    ab74:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    ab7b:	48 8b 40 18          	mov    0x18(%rax),%rax
    ab7f:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
    ab83:	0f 93 c0             	setae  %al
    ab86:	0f b6 c0             	movzbl %al,%eax
    ab89:	48 85 c0             	test   %rax,%rax
    ab8c:	0f 84 8c 05 00 00    	je     b11e <tmalloc_small+0x6af>
    mchunkptr r = chunk_plus_offset(v, nb);
    ab92:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    ab96:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    ab9d:	48 01 d0             	add    %rdx,%rax
    aba0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    assert(chunksize(v) == rsize + nb);
    aba4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    aba8:	48 8b 40 08          	mov    0x8(%rax),%rax
    abac:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    abb0:	48 89 c1             	mov    %rax,%rcx
    abb3:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    abb7:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    abbe:	48 01 d0             	add    %rdx,%rax
    abc1:	48 39 c1             	cmp    %rax,%rcx
    abc4:	74 05                	je     abcb <tmalloc_small+0x15c>
    abc6:	e8 c3 53 02 00       	callq  2ff8e <abort>
    if (RTCHECK(ok_next(v, r))) {
    abcb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    abcf:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
    abd3:	0f 92 c0             	setb   %al
    abd6:	0f b6 c0             	movzbl %al,%eax
    abd9:	48 85 c0             	test   %rax,%rax
    abdc:	0f 84 3c 05 00 00    	je     b11e <tmalloc_small+0x6af>
      unlink_large_chunk(m, v);
    abe2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    abe6:	48 8b 40 30          	mov    0x30(%rax),%rax
    abea:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    abee:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    abf2:	48 8b 40 18          	mov    0x18(%rax),%rax
    abf6:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
    abfa:	0f 84 92 00 00 00    	je     ac92 <tmalloc_small+0x223>
    ac00:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    ac04:	48 8b 40 10          	mov    0x10(%rax),%rax
    ac08:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    ac0c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    ac10:	48 8b 40 18          	mov    0x18(%rax),%rax
    ac14:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    ac18:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    ac1f:	48 8b 40 18          	mov    0x18(%rax),%rax
    ac23:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    ac27:	0f 93 c0             	setae  %al
    ac2a:	0f b6 c0             	movzbl %al,%eax
    ac2d:	48 85 c0             	test   %rax,%rax
    ac30:	74 1e                	je     ac50 <tmalloc_small+0x1e1>
    ac32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ac36:	48 8b 40 18          	mov    0x18(%rax),%rax
    ac3a:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
    ac3e:	0f 94 c0             	sete   %al
    ac41:	0f b6 c0             	movzbl %al,%eax
    ac44:	48 85 c0             	test   %rax,%rax
    ac47:	74 07                	je     ac50 <tmalloc_small+0x1e1>
    ac49:	b8 01 00 00 00       	mov    $0x1,%eax
    ac4e:	eb 05                	jmp    ac55 <tmalloc_small+0x1e6>
    ac50:	b8 00 00 00 00       	mov    $0x0,%eax
    ac55:	85 c0                	test   %eax,%eax
    ac57:	74 34                	je     ac8d <tmalloc_small+0x21e>
    ac59:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    ac5d:	48 8b 40 10          	mov    0x10(%rax),%rax
    ac61:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
    ac65:	0f 94 c0             	sete   %al
    ac68:	0f b6 c0             	movzbl %al,%eax
    ac6b:	48 85 c0             	test   %rax,%rax
    ac6e:	74 1d                	je     ac8d <tmalloc_small+0x21e>
    ac70:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    ac74:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    ac78:	48 89 50 18          	mov    %rdx,0x18(%rax)
    ac7c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    ac80:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    ac84:	48 89 50 10          	mov    %rdx,0x10(%rax)
    ac88:	e9 b2 00 00 00       	jmpq   ad3f <tmalloc_small+0x2d0>
    ac8d:	e8 fc 52 02 00       	callq  2ff8e <abort>
    ac92:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    ac96:	48 83 c0 28          	add    $0x28,%rax
    ac9a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    ac9e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    aca2:	48 8b 00             	mov    (%rax),%rax
    aca5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    aca9:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    acae:	75 33                	jne    ace3 <tmalloc_small+0x274>
    acb0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    acb4:	48 83 c0 20          	add    $0x20,%rax
    acb8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    acbc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    acc0:	48 8b 00             	mov    (%rax),%rax
    acc3:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    acc7:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    accc:	74 71                	je     ad3f <tmalloc_small+0x2d0>
    acce:	eb 13                	jmp    ace3 <tmalloc_small+0x274>
    acd0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    acd4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    acd8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    acdc:	48 8b 00             	mov    (%rax),%rax
    acdf:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    ace3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    ace7:	48 83 c0 28          	add    $0x28,%rax
    aceb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    acef:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    acf3:	48 8b 00             	mov    (%rax),%rax
    acf6:	48 85 c0             	test   %rax,%rax
    acf9:	75 d5                	jne    acd0 <tmalloc_small+0x261>
    acfb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    acff:	48 83 c0 20          	add    $0x20,%rax
    ad03:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    ad07:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    ad0b:	48 8b 00             	mov    (%rax),%rax
    ad0e:	48 85 c0             	test   %rax,%rax
    ad11:	75 bd                	jne    acd0 <tmalloc_small+0x261>
    ad13:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    ad1a:	48 8b 40 18          	mov    0x18(%rax),%rax
    ad1e:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    ad22:	0f 93 c0             	setae  %al
    ad25:	0f b6 c0             	movzbl %al,%eax
    ad28:	48 85 c0             	test   %rax,%rax
    ad2b:	74 0d                	je     ad3a <tmalloc_small+0x2cb>
    ad2d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    ad31:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    ad38:	eb 05                	jmp    ad3f <tmalloc_small+0x2d0>
    ad3a:	e8 4f 52 02 00       	callq  2ff8e <abort>
    ad3f:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
    ad44:	0f 84 92 01 00 00    	je     aedc <tmalloc_small+0x46d>
    ad4a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    ad4e:	8b 40 38             	mov    0x38(%rax),%eax
    ad51:	89 c0                	mov    %eax,%eax
    ad53:	48 83 c0 4a          	add    $0x4a,%rax
    ad57:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ad5e:	00 
    ad5f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    ad66:	48 01 d0             	add    %rdx,%rax
    ad69:	48 83 c0 08          	add    $0x8,%rax
    ad6d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    ad71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ad75:	48 8b 00             	mov    (%rax),%rax
    ad78:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
    ad7c:	75 43                	jne    adc1 <tmalloc_small+0x352>
    ad7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ad82:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    ad86:	48 89 10             	mov    %rdx,(%rax)
    ad89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ad8d:	48 8b 00             	mov    (%rax),%rax
    ad90:	48 85 c0             	test   %rax,%rax
    ad93:	75 75                	jne    ae0a <tmalloc_small+0x39b>
    ad95:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    ad9c:	8b 50 04             	mov    0x4(%rax),%edx
    ad9f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    ada3:	8b 40 38             	mov    0x38(%rax),%eax
    ada6:	be 01 00 00 00       	mov    $0x1,%esi
    adab:	89 c1                	mov    %eax,%ecx
    adad:	d3 e6                	shl    %cl,%esi
    adaf:	89 f0                	mov    %esi,%eax
    adb1:	f7 d0                	not    %eax
    adb3:	21 c2                	and    %eax,%edx
    adb5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    adbc:	89 50 04             	mov    %edx,0x4(%rax)
    adbf:	eb 49                	jmp    ae0a <tmalloc_small+0x39b>
    adc1:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    adc8:	48 8b 40 18          	mov    0x18(%rax),%rax
    adcc:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
    add0:	0f 93 c0             	setae  %al
    add3:	0f b6 c0             	movzbl %al,%eax
    add6:	48 85 c0             	test   %rax,%rax
    add9:	74 2a                	je     ae05 <tmalloc_small+0x396>
    addb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    addf:	48 8b 40 20          	mov    0x20(%rax),%rax
    ade3:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
    ade7:	75 0e                	jne    adf7 <tmalloc_small+0x388>
    ade9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    aded:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    adf1:	48 89 50 20          	mov    %rdx,0x20(%rax)
    adf5:	eb 13                	jmp    ae0a <tmalloc_small+0x39b>
    adf7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    adfb:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    adff:	48 89 50 28          	mov    %rdx,0x28(%rax)
    ae03:	eb 05                	jmp    ae0a <tmalloc_small+0x39b>
    ae05:	e8 84 51 02 00       	callq  2ff8e <abort>
    ae0a:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    ae0f:	0f 84 c7 00 00 00    	je     aedc <tmalloc_small+0x46d>
    ae15:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    ae1c:	48 8b 40 18          	mov    0x18(%rax),%rax
    ae20:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    ae24:	0f 93 c0             	setae  %al
    ae27:	0f b6 c0             	movzbl %al,%eax
    ae2a:	48 85 c0             	test   %rax,%rax
    ae2d:	0f 84 a4 00 00 00    	je     aed7 <tmalloc_small+0x468>
    ae33:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    ae37:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    ae3b:	48 89 50 30          	mov    %rdx,0x30(%rax)
    ae3f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    ae43:	48 8b 40 20          	mov    0x20(%rax),%rax
    ae47:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    ae4b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    ae50:	74 39                	je     ae8b <tmalloc_small+0x41c>
    ae52:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    ae59:	48 8b 40 18          	mov    0x18(%rax),%rax
    ae5d:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
    ae61:	0f 93 c0             	setae  %al
    ae64:	0f b6 c0             	movzbl %al,%eax
    ae67:	48 85 c0             	test   %rax,%rax
    ae6a:	74 1a                	je     ae86 <tmalloc_small+0x417>
    ae6c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    ae70:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    ae74:	48 89 50 20          	mov    %rdx,0x20(%rax)
    ae78:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    ae7c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    ae80:	48 89 50 30          	mov    %rdx,0x30(%rax)
    ae84:	eb 05                	jmp    ae8b <tmalloc_small+0x41c>
    ae86:	e8 03 51 02 00       	callq  2ff8e <abort>
    ae8b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    ae8f:	48 8b 40 28          	mov    0x28(%rax),%rax
    ae93:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    ae97:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    ae9c:	74 3e                	je     aedc <tmalloc_small+0x46d>
    ae9e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    aea5:	48 8b 40 18          	mov    0x18(%rax),%rax
    aea9:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    aead:	0f 93 c0             	setae  %al
    aeb0:	0f b6 c0             	movzbl %al,%eax
    aeb3:	48 85 c0             	test   %rax,%rax
    aeb6:	74 1a                	je     aed2 <tmalloc_small+0x463>
    aeb8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    aebc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    aec0:	48 89 50 28          	mov    %rdx,0x28(%rax)
    aec4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    aec8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    aecc:	48 89 50 30          	mov    %rdx,0x30(%rax)
    aed0:	eb 0a                	jmp    aedc <tmalloc_small+0x46d>
    aed2:	e8 b7 50 02 00       	callq  2ff8e <abort>
    aed7:	e8 b2 50 02 00       	callq  2ff8e <abort>
      if (rsize < MIN_CHUNK_SIZE)
    aedc:	48 83 7d 88 1f       	cmpq   $0x1f,-0x78(%rbp)
    aee1:	0f 87 81 00 00 00    	ja     af68 <tmalloc_small+0x4f9>
        set_inuse_and_pinuse(m, v, (rsize + nb));
    aee7:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    aeeb:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    aef2:	48 01 d0             	add    %rdx,%rax
    aef5:	48 83 c8 03          	or     $0x3,%rax
    aef9:	48 89 c2             	mov    %rax,%rdx
    aefc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    af00:	48 89 50 08          	mov    %rdx,0x8(%rax)
    af04:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    af08:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    af0f:	48 01 c2             	add    %rax,%rdx
    af12:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    af16:	48 01 d0             	add    %rdx,%rax
    af19:	48 8b 50 08          	mov    0x8(%rax),%rdx
    af1d:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
    af21:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    af28:	48 01 c1             	add    %rax,%rcx
    af2b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    af2f:	48 01 c8             	add    %rcx,%rax
    af32:	48 83 ca 01          	or     $0x1,%rdx
    af36:	48 89 50 08          	mov    %rdx,0x8(%rax)
    af3a:	48 8b 0d 5f aa 22 00 	mov    0x22aa5f(%rip),%rcx        # 2359a0 <mparams>
    af41:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
    af48:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
    af4c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    af53:	48 01 c6             	add    %rax,%rsi
    af56:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    af5a:	48 01 f0             	add    %rsi,%rax
    af5d:	48 31 ca             	xor    %rcx,%rdx
    af60:	48 89 10             	mov    %rdx,(%rax)
    af63:	e9 ac 01 00 00       	jmpq   b114 <tmalloc_small+0x6a5>
      else {
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    af68:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    af6f:	48 83 c8 03          	or     $0x3,%rax
    af73:	48 89 c2             	mov    %rax,%rdx
    af76:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    af7a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    af7e:	48 8b 0d 1b aa 22 00 	mov    0x22aa1b(%rip),%rcx        # 2359a0 <mparams>
    af85:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
    af8c:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
    af90:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    af97:	48 01 f0             	add    %rsi,%rax
    af9a:	48 31 ca             	xor    %rcx,%rdx
    af9d:	48 89 10             	mov    %rdx,(%rax)
        set_size_and_pinuse_of_free_chunk(r, rsize);
    afa0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    afa4:	48 83 c8 01          	or     $0x1,%rax
    afa8:	48 89 c2             	mov    %rax,%rdx
    afab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    afaf:	48 89 50 08          	mov    %rdx,0x8(%rax)
    afb3:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    afb7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    afbb:	48 01 c2             	add    %rax,%rdx
    afbe:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    afc2:	48 89 02             	mov    %rax,(%rdx)
        replace_dv(m, r, rsize);
    afc5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    afcc:	48 8b 40 08          	mov    0x8(%rax),%rax
    afd0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    afd4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    afd8:	48 c1 e8 03          	shr    $0x3,%rax
    afdc:	48 83 f8 1f          	cmp    $0x1f,%rax
    afe0:	76 05                	jbe    afe7 <tmalloc_small+0x578>
    afe2:	e8 a7 4f 02 00       	callq  2ff8e <abort>
    afe7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    afec:	0f 84 04 01 00 00    	je     b0f6 <tmalloc_small+0x687>
    aff2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    aff9:	48 8b 40 20          	mov    0x20(%rax),%rax
    affd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    b001:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    b005:	48 c1 e8 03          	shr    $0x3,%rax
    b009:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
    b00f:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    b015:	01 c0                	add    %eax,%eax
    b017:	89 c0                	mov    %eax,%eax
    b019:	48 83 c0 08          	add    $0x8,%rax
    b01d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    b024:	00 
    b025:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    b02c:	48 01 d0             	add    %rdx,%rax
    b02f:	48 83 c0 08          	add    $0x8,%rax
    b033:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    b037:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b03b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    b03f:	48 83 7d e0 1f       	cmpq   $0x1f,-0x20(%rbp)
    b044:	77 05                	ja     b04b <tmalloc_small+0x5dc>
    b046:	e8 43 4f 02 00       	callq  2ff8e <abort>
    b04b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    b052:	8b 10                	mov    (%rax),%edx
    b054:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    b05a:	be 01 00 00 00       	mov    $0x1,%esi
    b05f:	89 c1                	mov    %eax,%ecx
    b061:	d3 e6                	shl    %cl,%esi
    b063:	89 f0                	mov    %esi,%eax
    b065:	21 d0                	and    %edx,%eax
    b067:	85 c0                	test   %eax,%eax
    b069:	75 27                	jne    b092 <tmalloc_small+0x623>
    b06b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    b072:	8b 10                	mov    (%rax),%edx
    b074:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    b07a:	be 01 00 00 00       	mov    $0x1,%esi
    b07f:	89 c1                	mov    %eax,%ecx
    b081:	d3 e6                	shl    %cl,%esi
    b083:	89 f0                	mov    %esi,%eax
    b085:	09 c2                	or     %eax,%edx
    b087:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    b08e:	89 10                	mov    %edx,(%rax)
    b090:	eb 34                	jmp    b0c6 <tmalloc_small+0x657>
    b092:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b096:	48 8b 50 10          	mov    0x10(%rax),%rdx
    b09a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    b0a1:	48 8b 40 18          	mov    0x18(%rax),%rax
    b0a5:	48 39 c2             	cmp    %rax,%rdx
    b0a8:	0f 93 c0             	setae  %al
    b0ab:	0f b6 c0             	movzbl %al,%eax
    b0ae:	48 85 c0             	test   %rax,%rax
    b0b1:	74 0e                	je     b0c1 <tmalloc_small+0x652>
    b0b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b0b7:	48 8b 40 10          	mov    0x10(%rax),%rax
    b0bb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    b0bf:	eb 05                	jmp    b0c6 <tmalloc_small+0x657>
    b0c1:	e8 c8 4e 02 00       	callq  2ff8e <abort>
    b0c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    b0ca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b0ce:	48 89 50 10          	mov    %rdx,0x10(%rax)
    b0d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b0d6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b0da:	48 89 50 18          	mov    %rdx,0x18(%rax)
    b0de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b0e2:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    b0e6:	48 89 50 10          	mov    %rdx,0x10(%rax)
    b0ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b0ee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    b0f2:	48 89 50 18          	mov    %rdx,0x18(%rax)
    b0f6:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    b0fd:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    b101:	48 89 50 08          	mov    %rdx,0x8(%rax)
    b105:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    b10c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    b110:	48 89 50 20          	mov    %rdx,0x20(%rax)
      }
      return chunk2mem(v);
    b114:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    b118:	48 83 c0 10          	add    $0x10,%rax
    b11c:	eb 05                	jmp    b123 <tmalloc_small+0x6b4>
    }
  }

  CORRUPTION_ERROR_ACTION(m);
    b11e:	e8 6b 4e 02 00       	callq  2ff8e <abort>
  return 0;
}
    b123:	c9                   	leaveq 
    b124:	c3                   	retq   

000000000000b125 <dlmalloc>:

#if !ONLY_MSPACES

void* dlmalloc(size_t bytes) {
    b125:	55                   	push   %rbp
    b126:	48 89 e5             	mov    %rsp,%rbp
    b129:	53                   	push   %rbx
    b12a:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    b131:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)

     The ugly goto's here ensure that postaction occurs along all paths.
  */

#if USE_LOCKS
  ensure_initialization(); /* initialize in sys_alloc if not using locks */
    b138:	48 8b 05 61 a8 22 00 	mov    0x22a861(%rip),%rax        # 2359a0 <mparams>
    b13f:	48 85 c0             	test   %rax,%rax
    b142:	75 07                	jne    b14b <dlmalloc+0x26>
    b144:	e8 92 9f ff ff       	callq  50db <init_mparams>
    b149:	85 c0                	test   %eax,%eax
    b14b:	90                   	nop
#endif

  if (!PREACTION(gm)) {
    b14c:	8b 05 fe ab 22 00    	mov    0x22abfe(%rip),%eax        # 235d50 <_gm_+0x370>
    b152:	83 e0 02             	and    $0x2,%eax
    b155:	85 c0                	test   %eax,%eax
    b157:	74 23                	je     b17c <dlmalloc+0x57>
    b159:	b8 01 00 00 00       	mov    $0x1,%eax
    b15e:	87 05 f0 ab 22 00    	xchg   %eax,0x22abf0(%rip)        # 235d54 <_gm_+0x374>
    b164:	85 c0                	test   %eax,%eax
    b166:	74 14                	je     b17c <dlmalloc+0x57>
    b168:	48 8d 3d e5 ab 22 00 	lea    0x22abe5(%rip),%rdi        # 235d54 <_gm_+0x374>
    b16f:	e8 73 9e ff ff       	callq  4fe7 <spin_acquire_lock>
    b174:	85 c0                	test   %eax,%eax
    b176:	0f 85 91 0a 00 00    	jne    bc0d <dlmalloc+0xae8>
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
    b17c:	48 81 bd 18 ff ff ff 	cmpq   $0xe8,-0xe8(%rbp)
    b183:	e8 00 00 00 
    b187:	0f 87 12 07 00 00    	ja     b89f <dlmalloc+0x77a>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    b18d:	48 83 bd 18 ff ff ff 	cmpq   $0xe,-0xe8(%rbp)
    b194:	0e 
    b195:	76 11                	jbe    b1a8 <dlmalloc+0x83>
    b197:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    b19e:	48 83 c0 17          	add    $0x17,%rax
    b1a2:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    b1a6:	eb 05                	jmp    b1ad <dlmalloc+0x88>
    b1a8:	b8 20 00 00 00       	mov    $0x20,%eax
    b1ad:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
      idx = small_index(nb);
    b1b4:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    b1bb:	48 c1 e8 03          	shr    $0x3,%rax
    b1bf:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%rbp)
      smallbits = gm->smallmap >> idx;
    b1c5:	8b 15 15 a8 22 00    	mov    0x22a815(%rip),%edx        # 2359e0 <_gm_>
    b1cb:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b1d1:	89 c1                	mov    %eax,%ecx
    b1d3:	d3 ea                	shr    %cl,%edx
    b1d5:	89 d0                	mov    %edx,%eax
    b1d7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%rbp)

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
    b1dd:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    b1e3:	83 e0 03             	and    $0x3,%eax
    b1e6:	85 c0                	test   %eax,%eax
    b1e8:	0f 84 d3 01 00 00    	je     b3c1 <dlmalloc+0x29c>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
    b1ee:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    b1f4:	83 e0 01             	and    $0x1,%eax
    b1f7:	85 c0                	test   %eax,%eax
    b1f9:	0f 94 c0             	sete   %al
    b1fc:	0f b6 c0             	movzbl %al,%eax
    b1ff:	01 85 2c ff ff ff    	add    %eax,-0xd4(%rbp)
        b = smallbin_at(gm, idx);
    b205:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b20b:	01 c0                	add    %eax,%eax
    b20d:	89 c0                	mov    %eax,%eax
    b20f:	48 83 c0 08          	add    $0x8,%rax
    b213:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    b21a:	00 
    b21b:	48 8d 05 be a7 22 00 	lea    0x22a7be(%rip),%rax        # 2359e0 <_gm_>
    b222:	48 01 d0             	add    %rdx,%rax
    b225:	48 83 c0 08          	add    $0x8,%rax
    b229:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
        p = b->fd;
    b22d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b231:	48 8b 40 10          	mov    0x10(%rax),%rax
    b235:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
        assert(chunksize(p) == small_index2size(idx));
    b239:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b23d:	48 8b 40 08          	mov    0x8(%rax),%rax
    b241:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    b245:	48 89 c2             	mov    %rax,%rdx
    b248:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b24e:	c1 e0 03             	shl    $0x3,%eax
    b251:	89 c0                	mov    %eax,%eax
    b253:	48 39 c2             	cmp    %rax,%rdx
    b256:	74 05                	je     b25d <dlmalloc+0x138>
    b258:	e8 31 4d 02 00       	callq  2ff8e <abort>
        unlink_first_small_chunk(gm, b, p, idx);
    b25d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b261:	48 8b 40 10          	mov    0x10(%rax),%rax
    b265:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    b269:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b26d:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
    b271:	75 05                	jne    b278 <dlmalloc+0x153>
    b273:	e8 16 4d 02 00       	callq  2ff8e <abort>
    b278:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b27c:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
    b280:	75 05                	jne    b287 <dlmalloc+0x162>
    b282:	e8 07 4d 02 00       	callq  2ff8e <abort>
    b287:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b28b:	48 8b 40 08          	mov    0x8(%rax),%rax
    b28f:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    b293:	48 89 c2             	mov    %rax,%rdx
    b296:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b29c:	c1 e0 03             	shl    $0x3,%eax
    b29f:	89 c0                	mov    %eax,%eax
    b2a1:	48 39 c2             	cmp    %rax,%rdx
    b2a4:	74 05                	je     b2ab <dlmalloc+0x186>
    b2a6:	e8 e3 4c 02 00       	callq  2ff8e <abort>
    b2ab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b2af:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
    b2b3:	75 23                	jne    b2d8 <dlmalloc+0x1b3>
    b2b5:	8b 15 25 a7 22 00    	mov    0x22a725(%rip),%edx        # 2359e0 <_gm_>
    b2bb:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b2c1:	be 01 00 00 00       	mov    $0x1,%esi
    b2c6:	89 c1                	mov    %eax,%ecx
    b2c8:	d3 e6                	shl    %cl,%esi
    b2ca:	89 f0                	mov    %esi,%eax
    b2cc:	f7 d0                	not    %eax
    b2ce:	21 d0                	and    %edx,%eax
    b2d0:	89 05 0a a7 22 00    	mov    %eax,0x22a70a(%rip)        # 2359e0 <_gm_>
    b2d6:	eb 4c                	jmp    b324 <dlmalloc+0x1ff>
    b2d8:	48 8b 05 19 a7 22 00 	mov    0x22a719(%rip),%rax        # 2359f8 <_gm_+0x18>
    b2df:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    b2e3:	0f 93 c0             	setae  %al
    b2e6:	0f b6 c0             	movzbl %al,%eax
    b2e9:	48 85 c0             	test   %rax,%rax
    b2ec:	74 31                	je     b31f <dlmalloc+0x1fa>
    b2ee:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    b2f2:	48 8b 40 18          	mov    0x18(%rax),%rax
    b2f6:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    b2fa:	0f 94 c0             	sete   %al
    b2fd:	0f b6 c0             	movzbl %al,%eax
    b300:	48 85 c0             	test   %rax,%rax
    b303:	74 1a                	je     b31f <dlmalloc+0x1fa>
    b305:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    b309:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    b30d:	48 89 50 18          	mov    %rdx,0x18(%rax)
    b311:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    b315:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    b319:	48 89 50 10          	mov    %rdx,0x10(%rax)
    b31d:	eb 05                	jmp    b324 <dlmalloc+0x1ff>
    b31f:	e8 6a 4c 02 00       	callq  2ff8e <abort>
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
    b324:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b32a:	c1 e0 03             	shl    $0x3,%eax
    b32d:	83 c8 03             	or     $0x3,%eax
    b330:	89 c2                	mov    %eax,%edx
    b332:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b336:	48 89 50 08          	mov    %rdx,0x8(%rax)
    b33a:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b340:	c1 e0 03             	shl    $0x3,%eax
    b343:	89 c2                	mov    %eax,%edx
    b345:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b349:	48 01 d0             	add    %rdx,%rax
    b34c:	48 8b 50 08          	mov    0x8(%rax),%rdx
    b350:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b356:	c1 e0 03             	shl    $0x3,%eax
    b359:	89 c1                	mov    %eax,%ecx
    b35b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b35f:	48 01 c8             	add    %rcx,%rax
    b362:	48 83 ca 01          	or     $0x1,%rdx
    b366:	48 89 50 08          	mov    %rdx,0x8(%rax)
    b36a:	48 8b 0d 2f a6 22 00 	mov    0x22a62f(%rip),%rcx        # 2359a0 <mparams>
    b371:	48 8d 15 68 a6 22 00 	lea    0x22a668(%rip),%rdx        # 2359e0 <_gm_>
    b378:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b37e:	c1 e0 03             	shl    $0x3,%eax
    b381:	89 c6                	mov    %eax,%esi
    b383:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b387:	48 01 f0             	add    %rsi,%rax
    b38a:	48 31 ca             	xor    %rcx,%rdx
    b38d:	48 89 10             	mov    %rdx,(%rax)
        mem = chunk2mem(p);
    b390:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    b394:	48 83 c0 10          	add    $0x10,%rax
    b398:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
        check_malloced_chunk(gm, mem, nb);
    b39f:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    b3a6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    b3ad:	48 89 c6             	mov    %rax,%rsi
    b3b0:	48 8d 3d 29 a6 22 00 	lea    0x22a629(%rip),%rdi        # 2359e0 <_gm_>
    b3b7:	e8 e2 a2 ff ff       	callq  569e <do_check_malloced_chunk>
        goto postaction;
    b3bc:	e9 d8 07 00 00       	jmpq   bb99 <dlmalloc+0xa74>
      }

      else if (nb > gm->dvsize) {
    b3c1:	48 8b 05 20 a6 22 00 	mov    0x22a620(%rip),%rax        # 2359e8 <_gm_+0x8>
    b3c8:	48 39 85 50 ff ff ff 	cmp    %rax,-0xb0(%rbp)
    b3cf:	0f 86 4d 05 00 00    	jbe    b922 <dlmalloc+0x7fd>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
    b3d5:	83 bd 30 ff ff ff 00 	cmpl   $0x0,-0xd0(%rbp)
    b3dc:	0f 84 62 04 00 00    	je     b844 <dlmalloc+0x71f>
          mchunkptr b, p, r;
          size_t rsize;
          bindex_t i;
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
    b3e2:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b3e8:	8b 95 30 ff ff ff    	mov    -0xd0(%rbp),%edx
    b3ee:	89 c1                	mov    %eax,%ecx
    b3f0:	d3 e2                	shl    %cl,%edx
    b3f2:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b3f8:	be 01 00 00 00       	mov    $0x1,%esi
    b3fd:	89 c1                	mov    %eax,%ecx
    b3ff:	d3 e6                	shl    %cl,%esi
    b401:	89 f0                	mov    %esi,%eax
    b403:	8d 34 00             	lea    (%rax,%rax,1),%esi
    b406:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    b40c:	bf 01 00 00 00       	mov    $0x1,%edi
    b411:	89 c1                	mov    %eax,%ecx
    b413:	d3 e7                	shl    %cl,%edi
    b415:	89 f8                	mov    %edi,%eax
    b417:	01 c0                	add    %eax,%eax
    b419:	f7 d8                	neg    %eax
    b41b:	09 f0                	or     %esi,%eax
    b41d:	21 d0                	and    %edx,%eax
    b41f:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
          binmap_t leastbit = least_bit(leftbits);
    b425:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    b42b:	f7 d8                	neg    %eax
    b42d:	23 85 34 ff ff ff    	and    -0xcc(%rbp),%eax
    b433:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)
          compute_bit2idx(leastbit, i);
    b439:	f3 0f bc 85 38 ff ff 	tzcnt  -0xc8(%rbp),%eax
    b440:	ff 
    b441:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
    b447:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    b44d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
          b = smallbin_at(gm, i);
    b453:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    b459:	01 c0                	add    %eax,%eax
    b45b:	89 c0                	mov    %eax,%eax
    b45d:	48 83 c0 08          	add    $0x8,%rax
    b461:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    b468:	00 
    b469:	48 8d 05 70 a5 22 00 	lea    0x22a570(%rip),%rax        # 2359e0 <_gm_>
    b470:	48 01 d0             	add    %rdx,%rax
    b473:	48 83 c0 08          	add    $0x8,%rax
    b477:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
          p = b->fd;
    b47e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    b485:	48 8b 40 10          	mov    0x10(%rax),%rax
    b489:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
          assert(chunksize(p) == small_index2size(i));
    b490:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b497:	48 8b 40 08          	mov    0x8(%rax),%rax
    b49b:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    b49f:	48 89 c2             	mov    %rax,%rdx
    b4a2:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    b4a8:	c1 e0 03             	shl    $0x3,%eax
    b4ab:	89 c0                	mov    %eax,%eax
    b4ad:	48 39 c2             	cmp    %rax,%rdx
    b4b0:	74 05                	je     b4b7 <dlmalloc+0x392>
    b4b2:	e8 d7 4a 02 00       	callq  2ff8e <abort>
          unlink_first_small_chunk(gm, b, p, i);
    b4b7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b4be:	48 8b 40 10          	mov    0x10(%rax),%rax
    b4c2:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    b4c9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b4d0:	48 3b 85 60 ff ff ff 	cmp    -0xa0(%rbp),%rax
    b4d7:	75 05                	jne    b4de <dlmalloc+0x3b9>
    b4d9:	e8 b0 4a 02 00       	callq  2ff8e <abort>
    b4de:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b4e5:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
    b4ec:	75 05                	jne    b4f3 <dlmalloc+0x3ce>
    b4ee:	e8 9b 4a 02 00       	callq  2ff8e <abort>
    b4f3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b4fa:	48 8b 40 08          	mov    0x8(%rax),%rax
    b4fe:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    b502:	48 89 c2             	mov    %rax,%rdx
    b505:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    b50b:	c1 e0 03             	shl    $0x3,%eax
    b50e:	89 c0                	mov    %eax,%eax
    b510:	48 39 c2             	cmp    %rax,%rdx
    b513:	74 05                	je     b51a <dlmalloc+0x3f5>
    b515:	e8 74 4a 02 00       	callq  2ff8e <abort>
    b51a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    b521:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
    b528:	75 23                	jne    b54d <dlmalloc+0x428>
    b52a:	8b 15 b0 a4 22 00    	mov    0x22a4b0(%rip),%edx        # 2359e0 <_gm_>
    b530:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    b536:	be 01 00 00 00       	mov    $0x1,%esi
    b53b:	89 c1                	mov    %eax,%ecx
    b53d:	d3 e6                	shl    %cl,%esi
    b53f:	89 f0                	mov    %esi,%eax
    b541:	f7 d0                	not    %eax
    b543:	21 d0                	and    %edx,%eax
    b545:	89 05 95 a4 22 00    	mov    %eax,0x22a495(%rip)        # 2359e0 <_gm_>
    b54b:	eb 61                	jmp    b5ae <dlmalloc+0x489>
    b54d:	48 8b 05 a4 a4 22 00 	mov    0x22a4a4(%rip),%rax        # 2359f8 <_gm_+0x18>
    b554:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
    b55b:	0f 93 c0             	setae  %al
    b55e:	0f b6 c0             	movzbl %al,%eax
    b561:	48 85 c0             	test   %rax,%rax
    b564:	74 43                	je     b5a9 <dlmalloc+0x484>
    b566:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    b56d:	48 8b 40 18          	mov    0x18(%rax),%rax
    b571:	48 39 85 68 ff ff ff 	cmp    %rax,-0x98(%rbp)
    b578:	0f 94 c0             	sete   %al
    b57b:	0f b6 c0             	movzbl %al,%eax
    b57e:	48 85 c0             	test   %rax,%rax
    b581:	74 26                	je     b5a9 <dlmalloc+0x484>
    b583:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    b58a:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    b591:	48 89 50 18          	mov    %rdx,0x18(%rax)
    b595:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    b59c:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
    b5a3:	48 89 50 10          	mov    %rdx,0x10(%rax)
    b5a7:	eb 05                	jmp    b5ae <dlmalloc+0x489>
    b5a9:	e8 e0 49 02 00       	callq  2ff8e <abort>
          rsize = small_index2size(i) - nb;
    b5ae:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    b5b4:	c1 e0 03             	shl    $0x3,%eax
    b5b7:	89 c0                	mov    %eax,%eax
    b5b9:	48 2b 85 50 ff ff ff 	sub    -0xb0(%rbp),%rax
    b5c0:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
          /* Fit here cannot be remainderless if 4byte sizes */
          if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE)
    b5c7:	48 83 bd 78 ff ff ff 	cmpq   $0x1f,-0x88(%rbp)
    b5ce:	1f 
    b5cf:	77 7d                	ja     b64e <dlmalloc+0x529>
            set_inuse_and_pinuse(gm, p, small_index2size(i));
    b5d1:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    b5d7:	c1 e0 03             	shl    $0x3,%eax
    b5da:	83 c8 03             	or     $0x3,%eax
    b5dd:	89 c2                	mov    %eax,%edx
    b5df:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b5e6:	48 89 50 08          	mov    %rdx,0x8(%rax)
    b5ea:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    b5f0:	c1 e0 03             	shl    $0x3,%eax
    b5f3:	89 c2                	mov    %eax,%edx
    b5f5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b5fc:	48 01 d0             	add    %rdx,%rax
    b5ff:	48 8b 50 08          	mov    0x8(%rax),%rdx
    b603:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    b609:	c1 e0 03             	shl    $0x3,%eax
    b60c:	89 c1                	mov    %eax,%ecx
    b60e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b615:	48 01 c8             	add    %rcx,%rax
    b618:	48 83 ca 01          	or     $0x1,%rdx
    b61c:	48 89 50 08          	mov    %rdx,0x8(%rax)
    b620:	48 8b 0d 79 a3 22 00 	mov    0x22a379(%rip),%rcx        # 2359a0 <mparams>
    b627:	48 8d 15 b2 a3 22 00 	lea    0x22a3b2(%rip),%rdx        # 2359e0 <_gm_>
    b62e:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    b634:	c1 e0 03             	shl    $0x3,%eax
    b637:	89 c6                	mov    %eax,%esi
    b639:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b640:	48 01 f0             	add    %rsi,%rax
    b643:	48 31 ca             	xor    %rcx,%rdx
    b646:	48 89 10             	mov    %rdx,(%rax)
    b649:	e9 c2 01 00 00       	jmpq   b810 <dlmalloc+0x6eb>
          else {
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    b64e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    b655:	48 83 c8 03          	or     $0x3,%rax
    b659:	48 89 c2             	mov    %rax,%rdx
    b65c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b663:	48 89 50 08          	mov    %rdx,0x8(%rax)
    b667:	48 8b 0d 32 a3 22 00 	mov    0x22a332(%rip),%rcx        # 2359a0 <mparams>
    b66e:	48 8d 15 6b a3 22 00 	lea    0x22a36b(%rip),%rdx        # 2359e0 <_gm_>
    b675:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
    b67c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    b683:	48 01 f0             	add    %rsi,%rax
    b686:	48 31 ca             	xor    %rcx,%rdx
    b689:	48 89 10             	mov    %rdx,(%rax)
            r = chunk_plus_offset(p, nb);
    b68c:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
    b693:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    b69a:	48 01 d0             	add    %rdx,%rax
    b69d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
            set_size_and_pinuse_of_free_chunk(r, rsize);
    b6a1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    b6a8:	48 83 c8 01          	or     $0x1,%rax
    b6ac:	48 89 c2             	mov    %rax,%rdx
    b6af:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    b6b3:	48 89 50 08          	mov    %rdx,0x8(%rax)
    b6b7:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    b6bb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    b6c2:	48 01 c2             	add    %rax,%rdx
    b6c5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    b6cc:	48 89 02             	mov    %rax,(%rdx)
            replace_dv(gm, r, rsize);
    b6cf:	48 8b 05 12 a3 22 00 	mov    0x22a312(%rip),%rax        # 2359e8 <_gm_+0x8>
    b6d6:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    b6da:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b6de:	48 c1 e8 03          	shr    $0x3,%rax
    b6e2:	48 83 f8 1f          	cmp    $0x1f,%rax
    b6e6:	76 05                	jbe    b6ed <dlmalloc+0x5c8>
    b6e8:	e8 a1 48 02 00       	callq  2ff8e <abort>
    b6ed:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    b6f2:	0f 84 ff 00 00 00    	je     b7f7 <dlmalloc+0x6d2>
    b6f8:	48 8b 05 01 a3 22 00 	mov    0x22a301(%rip),%rax        # 235a00 <_gm_+0x20>
    b6ff:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    b703:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    b707:	48 c1 e8 03          	shr    $0x3,%rax
    b70b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
    b711:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    b717:	01 c0                	add    %eax,%eax
    b719:	89 c0                	mov    %eax,%eax
    b71b:	48 83 c0 08          	add    $0x8,%rax
    b71f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    b726:	00 
    b727:	48 8d 05 b2 a2 22 00 	lea    0x22a2b2(%rip),%rax        # 2359e0 <_gm_>
    b72e:	48 01 d0             	add    %rdx,%rax
    b731:	48 83 c0 08          	add    $0x8,%rax
    b735:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    b739:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b73d:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    b744:	48 83 7d 88 1f       	cmpq   $0x1f,-0x78(%rbp)
    b749:	77 05                	ja     b750 <dlmalloc+0x62b>
    b74b:	e8 3e 48 02 00       	callq  2ff8e <abort>
    b750:	8b 15 8a a2 22 00    	mov    0x22a28a(%rip),%edx        # 2359e0 <_gm_>
    b756:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    b75c:	be 01 00 00 00       	mov    $0x1,%esi
    b761:	89 c1                	mov    %eax,%ecx
    b763:	d3 e6                	shl    %cl,%esi
    b765:	89 f0                	mov    %esi,%eax
    b767:	21 d0                	and    %edx,%eax
    b769:	85 c0                	test   %eax,%eax
    b76b:	75 21                	jne    b78e <dlmalloc+0x669>
    b76d:	8b 15 6d a2 22 00    	mov    0x22a26d(%rip),%edx        # 2359e0 <_gm_>
    b773:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    b779:	be 01 00 00 00       	mov    $0x1,%esi
    b77e:	89 c1                	mov    %eax,%ecx
    b780:	d3 e6                	shl    %cl,%esi
    b782:	89 f0                	mov    %esi,%eax
    b784:	09 d0                	or     %edx,%eax
    b786:	89 05 54 a2 22 00    	mov    %eax,0x22a254(%rip)        # 2359e0 <_gm_>
    b78c:	eb 33                	jmp    b7c1 <dlmalloc+0x69c>
    b78e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b792:	48 8b 50 10          	mov    0x10(%rax),%rdx
    b796:	48 8b 05 5b a2 22 00 	mov    0x22a25b(%rip),%rax        # 2359f8 <_gm_+0x18>
    b79d:	48 39 c2             	cmp    %rax,%rdx
    b7a0:	0f 93 c0             	setae  %al
    b7a3:	0f b6 c0             	movzbl %al,%eax
    b7a6:	48 85 c0             	test   %rax,%rax
    b7a9:	74 11                	je     b7bc <dlmalloc+0x697>
    b7ab:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b7af:	48 8b 40 10          	mov    0x10(%rax),%rax
    b7b3:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    b7ba:	eb 05                	jmp    b7c1 <dlmalloc+0x69c>
    b7bc:	e8 cd 47 02 00       	callq  2ff8e <abort>
    b7c1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    b7c5:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    b7c9:	48 89 50 10          	mov    %rdx,0x10(%rax)
    b7cd:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    b7d4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    b7d8:	48 89 50 18          	mov    %rdx,0x18(%rax)
    b7dc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    b7e0:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
    b7e7:	48 89 50 10          	mov    %rdx,0x10(%rax)
    b7eb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    b7ef:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    b7f3:	48 89 50 18          	mov    %rdx,0x18(%rax)
    b7f7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    b7fe:	48 89 05 e3 a1 22 00 	mov    %rax,0x22a1e3(%rip)        # 2359e8 <_gm_+0x8>
    b805:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    b809:	48 89 05 f0 a1 22 00 	mov    %rax,0x22a1f0(%rip)        # 235a00 <_gm_+0x20>
          }
          mem = chunk2mem(p);
    b810:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    b817:	48 83 c0 10          	add    $0x10,%rax
    b81b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
          check_malloced_chunk(gm, mem, nb);
    b822:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    b829:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    b830:	48 89 c6             	mov    %rax,%rsi
    b833:	48 8d 3d a6 a1 22 00 	lea    0x22a1a6(%rip),%rdi        # 2359e0 <_gm_>
    b83a:	e8 5f 9e ff ff       	callq  569e <do_check_malloced_chunk>
          goto postaction;
    b83f:	e9 55 03 00 00       	jmpq   bb99 <dlmalloc+0xa74>
        }

        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
    b844:	8b 05 9a a1 22 00    	mov    0x22a19a(%rip),%eax        # 2359e4 <_gm_+0x4>
    b84a:	85 c0                	test   %eax,%eax
    b84c:	0f 84 d0 00 00 00    	je     b922 <dlmalloc+0x7fd>
    b852:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    b859:	48 89 c6             	mov    %rax,%rsi
    b85c:	48 8d 3d 7d a1 22 00 	lea    0x22a17d(%rip),%rdi        # 2359e0 <_gm_>
    b863:	e8 07 f2 ff ff       	callq  aa6f <tmalloc_small>
    b868:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    b86f:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
    b876:	00 
    b877:	0f 84 a5 00 00 00    	je     b922 <dlmalloc+0x7fd>
          check_malloced_chunk(gm, mem, nb);
    b87d:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    b884:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    b88b:	48 89 c6             	mov    %rax,%rsi
    b88e:	48 8d 3d 4b a1 22 00 	lea    0x22a14b(%rip),%rdi        # 2359e0 <_gm_>
    b895:	e8 04 9e ff ff       	callq  569e <do_check_malloced_chunk>
          goto postaction;
    b89a:	e9 fa 02 00 00       	jmpq   bb99 <dlmalloc+0xa74>
        }
      }
    }
    else if (bytes >= MAX_REQUEST)
    b89f:	48 81 bd 18 ff ff ff 	cmpq   $0xffffffffffffff7f,-0xe8(%rbp)
    b8a6:	7f ff ff ff 
    b8aa:	76 0d                	jbe    b8b9 <dlmalloc+0x794>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
    b8ac:	48 c7 85 50 ff ff ff 	movq   $0xffffffffffffffff,-0xb0(%rbp)
    b8b3:	ff ff ff ff 
    b8b7:	eb 69                	jmp    b922 <dlmalloc+0x7fd>
    else {
      nb = pad_request(bytes);
    b8b9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    b8c0:	48 83 c0 17          	add    $0x17,%rax
    b8c4:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    b8c8:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    b8cf:	8b 05 0f a1 22 00    	mov    0x22a10f(%rip),%eax        # 2359e4 <_gm_+0x4>
    b8d5:	85 c0                	test   %eax,%eax
    b8d7:	74 49                	je     b922 <dlmalloc+0x7fd>
    b8d9:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    b8e0:	48 89 c6             	mov    %rax,%rsi
    b8e3:	48 8d 3d f6 a0 22 00 	lea    0x22a0f6(%rip),%rdi        # 2359e0 <_gm_>
    b8ea:	e8 16 e5 ff ff       	callq  9e05 <tmalloc_large>
    b8ef:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    b8f6:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
    b8fd:	00 
    b8fe:	74 22                	je     b922 <dlmalloc+0x7fd>
        check_malloced_chunk(gm, mem, nb);
    b900:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    b907:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    b90e:	48 89 c6             	mov    %rax,%rsi
    b911:	48 8d 3d c8 a0 22 00 	lea    0x22a0c8(%rip),%rdi        # 2359e0 <_gm_>
    b918:	e8 81 9d ff ff       	callq  569e <do_check_malloced_chunk>
        goto postaction;
    b91d:	e9 77 02 00 00       	jmpq   bb99 <dlmalloc+0xa74>
      }
    }

    if (nb <= gm->dvsize) {
    b922:	48 8b 05 bf a0 22 00 	mov    0x22a0bf(%rip),%rax        # 2359e8 <_gm_+0x8>
    b929:	48 39 85 50 ff ff ff 	cmp    %rax,-0xb0(%rbp)
    b930:	0f 87 58 01 00 00    	ja     ba8e <dlmalloc+0x969>
      size_t rsize = gm->dvsize - nb;
    b936:	48 8b 05 ab a0 22 00 	mov    0x22a0ab(%rip),%rax        # 2359e8 <_gm_+0x8>
    b93d:	48 2b 85 50 ff ff ff 	sub    -0xb0(%rbp),%rax
    b944:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      mchunkptr p = gm->dv;
    b948:	48 8b 05 b1 a0 22 00 	mov    0x22a0b1(%rip),%rax        # 235a00 <_gm_+0x20>
    b94f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
    b953:	48 83 7d d0 1f       	cmpq   $0x1f,-0x30(%rbp)
    b958:	0f 86 8a 00 00 00    	jbe    b9e8 <dlmalloc+0x8c3>
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
    b95e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    b962:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    b969:	48 01 d0             	add    %rdx,%rax
    b96c:	48 89 05 8d a0 22 00 	mov    %rax,0x22a08d(%rip)        # 235a00 <_gm_+0x20>
    b973:	48 8b 05 86 a0 22 00 	mov    0x22a086(%rip),%rax        # 235a00 <_gm_+0x20>
    b97a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        gm->dvsize = rsize;
    b97e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b982:	48 89 05 5f a0 22 00 	mov    %rax,0x22a05f(%rip)        # 2359e8 <_gm_+0x8>
        set_size_and_pinuse_of_free_chunk(r, rsize);
    b989:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b98d:	48 83 c8 01          	or     $0x1,%rax
    b991:	48 89 c2             	mov    %rax,%rdx
    b994:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    b998:	48 89 50 08          	mov    %rdx,0x8(%rax)
    b99c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    b9a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b9a4:	48 01 c2             	add    %rax,%rdx
    b9a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    b9ab:	48 89 02             	mov    %rax,(%rdx)
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    b9ae:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    b9b5:	48 83 c8 03          	or     $0x3,%rax
    b9b9:	48 89 c2             	mov    %rax,%rdx
    b9bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    b9c0:	48 89 50 08          	mov    %rdx,0x8(%rax)
    b9c4:	48 8b 0d d5 9f 22 00 	mov    0x229fd5(%rip),%rcx        # 2359a0 <mparams>
    b9cb:	48 8d 15 0e a0 22 00 	lea    0x22a00e(%rip),%rdx        # 2359e0 <_gm_>
    b9d2:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    b9d6:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    b9dd:	48 01 f0             	add    %rsi,%rax
    b9e0:	48 31 ca             	xor    %rcx,%rdx
    b9e3:	48 89 10             	mov    %rdx,(%rax)
    b9e6:	eb 75                	jmp    ba5d <dlmalloc+0x938>
      }
      else { /* exhaust dv */
        size_t dvs = gm->dvsize;
    b9e8:	48 8b 05 f9 9f 22 00 	mov    0x229ff9(%rip),%rax        # 2359e8 <_gm_+0x8>
    b9ef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        gm->dvsize = 0;
    b9f3:	48 c7 05 ea 9f 22 00 	movq   $0x0,0x229fea(%rip)        # 2359e8 <_gm_+0x8>
    b9fa:	00 00 00 00 
        gm->dv = 0;
    b9fe:	48 c7 05 f7 9f 22 00 	movq   $0x0,0x229ff7(%rip)        # 235a00 <_gm_+0x20>
    ba05:	00 00 00 00 
        set_inuse_and_pinuse(gm, p, dvs);
    ba09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ba0d:	48 83 c8 03          	or     $0x3,%rax
    ba11:	48 89 c2             	mov    %rax,%rdx
    ba14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ba18:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ba1c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ba20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ba24:	48 01 d0             	add    %rdx,%rax
    ba27:	48 8b 50 08          	mov    0x8(%rax),%rdx
    ba2b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    ba2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ba33:	48 01 c8             	add    %rcx,%rax
    ba36:	48 83 ca 01          	or     $0x1,%rdx
    ba3a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    ba3e:	48 8b 0d 5b 9f 22 00 	mov    0x229f5b(%rip),%rcx        # 2359a0 <mparams>
    ba45:	48 8d 15 94 9f 22 00 	lea    0x229f94(%rip),%rdx        # 2359e0 <_gm_>
    ba4c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    ba50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ba54:	48 01 f0             	add    %rsi,%rax
    ba57:	48 31 ca             	xor    %rcx,%rdx
    ba5a:	48 89 10             	mov    %rdx,(%rax)
      }
      mem = chunk2mem(p);
    ba5d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ba61:	48 83 c0 10          	add    $0x10,%rax
    ba65:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
      check_malloced_chunk(gm, mem, nb);
    ba6c:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    ba73:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    ba7a:	48 89 c6             	mov    %rax,%rsi
    ba7d:	48 8d 3d 5c 9f 22 00 	lea    0x229f5c(%rip),%rdi        # 2359e0 <_gm_>
    ba84:	e8 15 9c ff ff       	callq  569e <do_check_malloced_chunk>
      goto postaction;
    ba89:	e9 0b 01 00 00       	jmpq   bb99 <dlmalloc+0xa74>
    }

    else if (nb < gm->topsize) { /* Split top */
    ba8e:	48 8b 05 5b 9f 22 00 	mov    0x229f5b(%rip),%rax        # 2359f0 <_gm_+0x10>
    ba95:	48 39 85 50 ff ff ff 	cmp    %rax,-0xb0(%rbp)
    ba9c:	0f 83 da 00 00 00    	jae    bb7c <dlmalloc+0xa57>
      size_t rsize = gm->topsize -= nb;
    baa2:	48 8b 05 47 9f 22 00 	mov    0x229f47(%rip),%rax        # 2359f0 <_gm_+0x10>
    baa9:	48 2b 85 50 ff ff ff 	sub    -0xb0(%rbp),%rax
    bab0:	48 89 05 39 9f 22 00 	mov    %rax,0x229f39(%rip)        # 2359f0 <_gm_+0x10>
    bab7:	48 8b 05 32 9f 22 00 	mov    0x229f32(%rip),%rax        # 2359f0 <_gm_+0x10>
    babe:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
      mchunkptr p = gm->top;
    bac2:	48 8b 05 3f 9f 22 00 	mov    0x229f3f(%rip),%rax        # 235a08 <_gm_+0x28>
    bac9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
      mchunkptr r = gm->top = chunk_plus_offset(p, nb);
    bacd:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    bad1:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    bad8:	48 01 d0             	add    %rdx,%rax
    badb:	48 89 05 26 9f 22 00 	mov    %rax,0x229f26(%rip)        # 235a08 <_gm_+0x28>
    bae2:	48 8b 05 1f 9f 22 00 	mov    0x229f1f(%rip),%rax        # 235a08 <_gm_+0x28>
    bae9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      r->head = rsize | PINUSE_BIT;
    baed:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    baf1:	48 83 c8 01          	or     $0x1,%rax
    baf5:	48 89 c2             	mov    %rax,%rdx
    baf8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    bafc:	48 89 50 08          	mov    %rdx,0x8(%rax)
      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    bb00:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    bb07:	48 83 c8 03          	or     $0x3,%rax
    bb0b:	48 89 c2             	mov    %rax,%rdx
    bb0e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    bb12:	48 89 50 08          	mov    %rdx,0x8(%rax)
    bb16:	48 8b 0d 83 9e 22 00 	mov    0x229e83(%rip),%rcx        # 2359a0 <mparams>
    bb1d:	48 8d 15 bc 9e 22 00 	lea    0x229ebc(%rip),%rdx        # 2359e0 <_gm_>
    bb24:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    bb28:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    bb2f:	48 01 f0             	add    %rsi,%rax
    bb32:	48 31 ca             	xor    %rcx,%rdx
    bb35:	48 89 10             	mov    %rdx,(%rax)
      mem = chunk2mem(p);
    bb38:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    bb3c:	48 83 c0 10          	add    $0x10,%rax
    bb40:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
      check_top_chunk(gm, gm->top);
    bb47:	48 8b 05 ba 9e 22 00 	mov    0x229eba(%rip),%rax        # 235a08 <_gm_+0x28>
    bb4e:	48 89 c6             	mov    %rax,%rsi
    bb51:	48 8d 3d 88 9e 22 00 	lea    0x229e88(%rip),%rdi        # 2359e0 <_gm_>
    bb58:	e8 b0 97 ff ff       	callq  530d <do_check_top_chunk>
      check_malloced_chunk(gm, mem, nb);
    bb5d:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    bb64:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    bb6b:	48 89 c6             	mov    %rax,%rsi
    bb6e:	48 8d 3d 6b 9e 22 00 	lea    0x229e6b(%rip),%rdi        # 2359e0 <_gm_>
    bb75:	e8 24 9b ff ff       	callq  569e <do_check_malloced_chunk>
      goto postaction;
    bb7a:	eb 1d                	jmp    bb99 <dlmalloc+0xa74>
    }

    mem = sys_alloc(gm, nb);
    bb7c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    bb83:	48 89 c6             	mov    %rax,%rsi
    bb86:	48 8d 3d 53 9e 22 00 	lea    0x229e53(%rip),%rdi        # 2359e0 <_gm_>
    bb8d:	e8 b8 c2 ff ff       	callq  7e4a <sys_alloc>
    bb92:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)

  postaction:
    if (mem != 0 && !ok_heap_range(mem, bytes)) ABORT;
    bb99:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
    bba0:	00 
    bba1:	74 49                	je     bbec <dlmalloc+0xac7>
    bba3:	e8 d6 76 ff ff       	callq  327e <get_heap_base>
    bba8:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
    bbaf:	72 36                	jb     bbe7 <dlmalloc+0xac2>
    bbb1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    bbb8:	48 f7 d0             	not    %rax
    bbbb:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
    bbc2:	77 23                	ja     bbe7 <dlmalloc+0xac2>
    bbc4:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    bbcb:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    bbd2:	48 01 d0             	add    %rdx,%rax
    bbd5:	48 89 c3             	mov    %rax,%rbx
    bbd8:	bf 00 00 00 00       	mov    $0x0,%edi
    bbdd:	e8 da 2d 00 00       	callq  e9bc <sbrk>
    bbe2:	48 39 c3             	cmp    %rax,%rbx
    bbe5:	76 05                	jbe    bbec <dlmalloc+0xac7>
    bbe7:	e8 a2 43 02 00       	callq  2ff8e <abort>
    POSTACTION(gm);
    bbec:	8b 05 5e a1 22 00    	mov    0x22a15e(%rip),%eax        # 235d50 <_gm_+0x370>
    bbf2:	83 e0 02             	and    $0x2,%eax
    bbf5:	85 c0                	test   %eax,%eax
    bbf7:	74 0b                	je     bc04 <dlmalloc+0xadf>
    bbf9:	b8 00 00 00 00       	mov    $0x0,%eax
    bbfe:	89 05 50 a1 22 00    	mov    %eax,0x22a150(%rip)        # 235d54 <_gm_+0x374>
    return mem;
    bc04:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    bc0b:	eb 05                	jmp    bc12 <dlmalloc+0xaed>
  }

  return 0;
    bc0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    bc12:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    bc19:	5b                   	pop    %rbx
    bc1a:	5d                   	pop    %rbp
    bc1b:	c3                   	retq   

000000000000bc1c <dlfree>:

/* ---------------------------- free --------------------------- */

void dlfree(void* mem) {
    bc1c:	55                   	push   %rbp
    bc1d:	48 89 e5             	mov    %rsp,%rbp
    bc20:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
    bc27:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
     Consolidate freed chunks with preceeding or succeeding bordering
     free chunks, if they exist, and then place in a bin.  Intermixed
     with special cases for top, dv, mmapped chunks, and usage errors.
  */

  if (mem != 0) {
    bc2e:	48 83 bd a8 fe ff ff 	cmpq   $0x0,-0x158(%rbp)
    bc35:	00 
    bc36:	0f 84 ff 14 00 00    	je     d13b <dlfree+0x151f>
    mchunkptr p  = mem2chunk(mem);
    bc3c:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    bc43:	48 83 e8 10          	sub    $0x10,%rax
    bc47:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
#if FOOTERS
    mstate fm = get_mstate_for(p);
    bc4e:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    bc55:	48 8b 40 08          	mov    0x8(%rax),%rax
    bc59:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    bc5d:	48 89 c2             	mov    %rax,%rdx
    bc60:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    bc67:	48 01 d0             	add    %rdx,%rax
    bc6a:	48 8b 10             	mov    (%rax),%rdx
    bc6d:	48 8b 05 2c 9d 22 00 	mov    0x229d2c(%rip),%rax        # 2359a0 <mparams>
    bc74:	48 31 d0             	xor    %rdx,%rax
    bc77:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    if (!ok_magic(fm)) {
    bc7e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bc85:	48 8b 50 40          	mov    0x40(%rax),%rdx
    bc89:	48 8b 05 10 9d 22 00 	mov    0x229d10(%rip),%rax        # 2359a0 <mparams>
    bc90:	48 39 c2             	cmp    %rax,%rdx
    bc93:	74 05                	je     bc9a <dlfree+0x7e>
      USAGE_ERROR_ACTION(fm, p);
    bc95:	e8 f4 42 02 00       	callq  2ff8e <abort>
      return;
    }
#else /* FOOTERS */
#define fm gm
#endif /* FOOTERS */
    if (!PREACTION(fm)) {
    bc9a:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bca1:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    bca7:	83 e0 02             	and    $0x2,%eax
    bcaa:	85 c0                	test   %eax,%eax
    bcac:	74 36                	je     bce4 <dlfree+0xc8>
    bcae:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bcb5:	48 8d 90 74 03 00 00 	lea    0x374(%rax),%rdx
    bcbc:	b8 01 00 00 00       	mov    $0x1,%eax
    bcc1:	87 02                	xchg   %eax,(%rdx)
    bcc3:	85 c0                	test   %eax,%eax
    bcc5:	74 1d                	je     bce4 <dlfree+0xc8>
    bcc7:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bcce:	48 05 74 03 00 00    	add    $0x374,%rax
    bcd4:	48 89 c7             	mov    %rax,%rdi
    bcd7:	e8 0b 93 ff ff       	callq  4fe7 <spin_acquire_lock>
    bcdc:	85 c0                	test   %eax,%eax
    bcde:	0f 85 57 14 00 00    	jne    d13b <dlfree+0x151f>
      check_inuse_chunk(fm, p);
    bce4:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    bceb:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bcf2:	48 89 d6             	mov    %rdx,%rsi
    bcf5:	48 89 c7             	mov    %rax,%rdi
    bcf8:	e8 5a 97 ff ff       	callq  5457 <do_check_inuse_chunk>
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    bcfd:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bd04:	48 8b 40 18          	mov    0x18(%rax),%rax
    bd08:	48 39 85 c8 fe ff ff 	cmp    %rax,-0x138(%rbp)
    bd0f:	0f 93 c0             	setae  %al
    bd12:	0f b6 c0             	movzbl %al,%eax
    bd15:	48 85 c0             	test   %rax,%rax
    bd18:	0f 84 e8 13 00 00    	je     d106 <dlfree+0x14ea>
    bd1e:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    bd25:	48 8b 40 08          	mov    0x8(%rax),%rax
    bd29:	83 e0 03             	and    $0x3,%eax
    bd2c:	48 83 f8 01          	cmp    $0x1,%rax
    bd30:	0f 95 c0             	setne  %al
    bd33:	0f b6 c0             	movzbl %al,%eax
    bd36:	48 85 c0             	test   %rax,%rax
    bd39:	0f 84 c7 13 00 00    	je     d106 <dlfree+0x14ea>
        size_t psize = chunksize(p);
    bd3f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    bd46:	48 8b 40 08          	mov    0x8(%rax),%rax
    bd4a:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    bd4e:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
        mchunkptr next = chunk_plus_offset(p, psize);
    bd55:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    bd5c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    bd63:	48 01 d0             	add    %rdx,%rax
    bd66:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
        if (!pinuse(p)) {
    bd6d:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    bd74:	48 8b 40 08          	mov    0x8(%rax),%rax
    bd78:	83 e0 01             	and    $0x1,%eax
    bd7b:	48 85 c0             	test   %rax,%rax
    bd7e:	0f 85 3a 07 00 00    	jne    c4be <dlfree+0x8a2>
          size_t prevsize = p->prev_foot;
    bd84:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    bd8b:	48 8b 00             	mov    (%rax),%rax
    bd8e:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
          if (is_mmapped(p)) {
    bd95:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    bd9c:	48 8b 40 08          	mov    0x8(%rax),%rax
    bda0:	83 e0 03             	and    $0x3,%eax
    bda3:	48 85 c0             	test   %rax,%rax
    bda6:	75 21                	jne    bdc9 <dlfree+0x1ad>
            psize += prevsize + MMAP_FOOT_PAD;
    bda8:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    bdaf:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    bdb6:	48 01 d0             	add    %rdx,%rax
    bdb9:	48 83 c0 20          	add    $0x20,%rax
    bdbd:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)
              fm->footprint -= psize;
            goto postaction;
    bdc4:	e9 4a 13 00 00       	jmpq   d113 <dlfree+0x14f7>
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
    bdc9:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    bdd0:	48 f7 d8             	neg    %rax
    bdd3:	48 89 c2             	mov    %rax,%rdx
    bdd6:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    bddd:	48 01 d0             	add    %rdx,%rax
    bde0:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
            psize += prevsize;
    bde7:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    bdee:	48 01 85 d0 fe ff ff 	add    %rax,-0x130(%rbp)
            p = prev;
    bdf5:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    bdfc:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
    be03:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    be0a:	48 8b 40 18          	mov    0x18(%rax),%rax
    be0e:	48 39 85 38 ff ff ff 	cmp    %rax,-0xc8(%rbp)
    be15:	0f 93 c0             	setae  %al
    be18:	0f b6 c0             	movzbl %al,%eax
    be1b:	48 85 c0             	test   %rax,%rax
    be1e:	0f 84 e5 12 00 00    	je     d109 <dlfree+0x14ed>
              if (p != fm->dv) {
    be24:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    be2b:	48 8b 40 20          	mov    0x20(%rax),%rax
    be2f:	48 39 85 c8 fe ff ff 	cmp    %rax,-0x138(%rbp)
    be36:	0f 84 06 06 00 00    	je     c442 <dlfree+0x826>
                unlink_chunk(fm, p, prevsize);
    be3c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    be43:	48 c1 e8 03          	shr    $0x3,%rax
    be47:	48 83 f8 1f          	cmp    $0x1f,%rax
    be4b:	0f 87 f9 01 00 00    	ja     c04a <dlfree+0x42e>
    be51:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    be58:	48 8b 40 10          	mov    0x10(%rax),%rax
    be5c:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    be63:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    be6a:	48 8b 40 18          	mov    0x18(%rax),%rax
    be6e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    be75:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    be7c:	48 c1 e8 03          	shr    $0x3,%rax
    be80:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%rbp)
    be86:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    be8d:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
    be94:	75 05                	jne    be9b <dlfree+0x27f>
    be96:	e8 f3 40 02 00       	callq  2ff8e <abort>
    be9b:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    bea2:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
    bea9:	75 05                	jne    beb0 <dlfree+0x294>
    beab:	e8 de 40 02 00       	callq  2ff8e <abort>
    beb0:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    beb7:	48 8b 40 08          	mov    0x8(%rax),%rax
    bebb:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    bebf:	48 89 c2             	mov    %rax,%rdx
    bec2:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
    bec8:	c1 e0 03             	shl    $0x3,%eax
    becb:	89 c0                	mov    %eax,%eax
    becd:	48 39 c2             	cmp    %rax,%rdx
    bed0:	74 05                	je     bed7 <dlfree+0x2bb>
    bed2:	e8 b7 40 02 00       	callq  2ff8e <abort>
    bed7:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
    bedd:	01 c0                	add    %eax,%eax
    bedf:	89 c0                	mov    %eax,%eax
    bee1:	48 83 c0 08          	add    $0x8,%rax
    bee5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    beec:	00 
    beed:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bef4:	48 01 d0             	add    %rdx,%rax
    bef7:	48 83 c0 08          	add    $0x8,%rax
    befb:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
    bf02:	0f 94 c0             	sete   %al
    bf05:	0f b6 c0             	movzbl %al,%eax
    bf08:	48 85 c0             	test   %rax,%rax
    bf0b:	75 4e                	jne    bf5b <dlfree+0x33f>
    bf0d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bf14:	48 8b 40 18          	mov    0x18(%rax),%rax
    bf18:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
    bf1f:	0f 93 c0             	setae  %al
    bf22:	0f b6 c0             	movzbl %al,%eax
    bf25:	48 85 c0             	test   %rax,%rax
    bf28:	74 24                	je     bf4e <dlfree+0x332>
    bf2a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    bf31:	48 8b 40 18          	mov    0x18(%rax),%rax
    bf35:	48 39 85 c8 fe ff ff 	cmp    %rax,-0x138(%rbp)
    bf3c:	0f 94 c0             	sete   %al
    bf3f:	0f b6 c0             	movzbl %al,%eax
    bf42:	48 85 c0             	test   %rax,%rax
    bf45:	74 07                	je     bf4e <dlfree+0x332>
    bf47:	b8 01 00 00 00       	mov    $0x1,%eax
    bf4c:	eb 05                	jmp    bf53 <dlfree+0x337>
    bf4e:	b8 00 00 00 00       	mov    $0x0,%eax
    bf53:	85 c0                	test   %eax,%eax
    bf55:	0f 84 ea 00 00 00    	je     c045 <dlfree+0x429>
    bf5b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    bf62:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
    bf69:	75 2c                	jne    bf97 <dlfree+0x37b>
    bf6b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bf72:	8b 10                	mov    (%rax),%edx
    bf74:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
    bf7a:	be 01 00 00 00       	mov    $0x1,%esi
    bf7f:	89 c1                	mov    %eax,%ecx
    bf81:	d3 e6                	shl    %cl,%esi
    bf83:	89 f0                	mov    %esi,%eax
    bf85:	f7 d0                	not    %eax
    bf87:	21 c2                	and    %eax,%edx
    bf89:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bf90:	89 10                	mov    %edx,(%rax)
    bf92:	e9 27 05 00 00       	jmpq   c4be <dlfree+0x8a2>
    bf97:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
    bf9d:	01 c0                	add    %eax,%eax
    bf9f:	89 c0                	mov    %eax,%eax
    bfa1:	48 83 c0 08          	add    $0x8,%rax
    bfa5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    bfac:	00 
    bfad:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bfb4:	48 01 d0             	add    %rdx,%rax
    bfb7:	48 83 c0 08          	add    $0x8,%rax
    bfbb:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
    bfc2:	0f 94 c0             	sete   %al
    bfc5:	0f b6 c0             	movzbl %al,%eax
    bfc8:	48 85 c0             	test   %rax,%rax
    bfcb:	75 4a                	jne    c017 <dlfree+0x3fb>
    bfcd:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    bfd4:	48 8b 40 18          	mov    0x18(%rax),%rax
    bfd8:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
    bfdf:	0f 93 c0             	setae  %al
    bfe2:	0f b6 c0             	movzbl %al,%eax
    bfe5:	48 85 c0             	test   %rax,%rax
    bfe8:	74 24                	je     c00e <dlfree+0x3f2>
    bfea:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    bff1:	48 8b 40 10          	mov    0x10(%rax),%rax
    bff5:	48 39 85 c8 fe ff ff 	cmp    %rax,-0x138(%rbp)
    bffc:	0f 94 c0             	sete   %al
    bfff:	0f b6 c0             	movzbl %al,%eax
    c002:	48 85 c0             	test   %rax,%rax
    c005:	74 07                	je     c00e <dlfree+0x3f2>
    c007:	b8 01 00 00 00       	mov    $0x1,%eax
    c00c:	eb 05                	jmp    c013 <dlfree+0x3f7>
    c00e:	b8 00 00 00 00       	mov    $0x0,%eax
    c013:	85 c0                	test   %eax,%eax
    c015:	74 29                	je     c040 <dlfree+0x424>
    c017:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    c01e:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    c025:	48 89 50 18          	mov    %rdx,0x18(%rax)
    c029:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    c030:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
    c037:	48 89 50 10          	mov    %rdx,0x10(%rax)
    c03b:	e9 7e 04 00 00       	jmpq   c4be <dlfree+0x8a2>
    c040:	e8 49 3f 02 00       	callq  2ff8e <abort>
    c045:	e8 44 3f 02 00       	callq  2ff8e <abort>
    c04a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    c051:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    c058:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    c05f:	48 8b 40 30          	mov    0x30(%rax),%rax
    c063:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    c06a:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    c071:	48 8b 40 18          	mov    0x18(%rax),%rax
    c075:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    c07c:	0f 84 b9 00 00 00    	je     c13b <dlfree+0x51f>
    c082:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    c089:	48 8b 40 10          	mov    0x10(%rax),%rax
    c08d:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    c094:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    c09b:	48 8b 40 18          	mov    0x18(%rax),%rax
    c09f:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    c0a6:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c0ad:	48 8b 40 18          	mov    0x18(%rax),%rax
    c0b1:	48 39 85 50 ff ff ff 	cmp    %rax,-0xb0(%rbp)
    c0b8:	0f 93 c0             	setae  %al
    c0bb:	0f b6 c0             	movzbl %al,%eax
    c0be:	48 85 c0             	test   %rax,%rax
    c0c1:	74 24                	je     c0e7 <dlfree+0x4cb>
    c0c3:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    c0ca:	48 8b 40 18          	mov    0x18(%rax),%rax
    c0ce:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    c0d5:	0f 94 c0             	sete   %al
    c0d8:	0f b6 c0             	movzbl %al,%eax
    c0db:	48 85 c0             	test   %rax,%rax
    c0de:	74 07                	je     c0e7 <dlfree+0x4cb>
    c0e0:	b8 01 00 00 00       	mov    $0x1,%eax
    c0e5:	eb 05                	jmp    c0ec <dlfree+0x4d0>
    c0e7:	b8 00 00 00 00       	mov    $0x0,%eax
    c0ec:	85 c0                	test   %eax,%eax
    c0ee:	74 46                	je     c136 <dlfree+0x51a>
    c0f0:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    c0f7:	48 8b 40 10          	mov    0x10(%rax),%rax
    c0fb:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    c102:	0f 94 c0             	sete   %al
    c105:	0f b6 c0             	movzbl %al,%eax
    c108:	48 85 c0             	test   %rax,%rax
    c10b:	74 29                	je     c136 <dlfree+0x51a>
    c10d:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    c114:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
    c11b:	48 89 50 18          	mov    %rdx,0x18(%rax)
    c11f:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    c126:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    c12d:	48 89 50 10          	mov    %rdx,0x10(%rax)
    c131:	e9 f8 00 00 00       	jmpq   c22e <dlfree+0x612>
    c136:	e8 53 3e 02 00       	callq  2ff8e <abort>
    c13b:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    c142:	48 83 c0 28          	add    $0x28,%rax
    c146:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    c14d:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    c154:	48 8b 00             	mov    (%rax),%rax
    c157:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    c15e:	48 83 bd d8 fe ff ff 	cmpq   $0x0,-0x128(%rbp)
    c165:	00 
    c166:	75 52                	jne    c1ba <dlfree+0x59e>
    c168:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    c16f:	48 83 c0 20          	add    $0x20,%rax
    c173:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    c17a:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    c181:	48 8b 00             	mov    (%rax),%rax
    c184:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    c18b:	48 83 bd d8 fe ff ff 	cmpq   $0x0,-0x128(%rbp)
    c192:	00 
    c193:	0f 84 95 00 00 00    	je     c22e <dlfree+0x612>
    c199:	eb 1f                	jmp    c1ba <dlfree+0x59e>
    c19b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    c1a2:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
    c1a9:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    c1b0:	48 8b 00             	mov    (%rax),%rax
    c1b3:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
    c1ba:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    c1c1:	48 83 c0 28          	add    $0x28,%rax
    c1c5:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    c1cc:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    c1d3:	48 8b 00             	mov    (%rax),%rax
    c1d6:	48 85 c0             	test   %rax,%rax
    c1d9:	75 c0                	jne    c19b <dlfree+0x57f>
    c1db:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    c1e2:	48 83 c0 20          	add    $0x20,%rax
    c1e6:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
    c1ed:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    c1f4:	48 8b 00             	mov    (%rax),%rax
    c1f7:	48 85 c0             	test   %rax,%rax
    c1fa:	75 9f                	jne    c19b <dlfree+0x57f>
    c1fc:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c203:	48 8b 40 18          	mov    0x18(%rax),%rax
    c207:	48 39 85 e0 fe ff ff 	cmp    %rax,-0x120(%rbp)
    c20e:	0f 93 c0             	setae  %al
    c211:	0f b6 c0             	movzbl %al,%eax
    c214:	48 85 c0             	test   %rax,%rax
    c217:	74 10                	je     c229 <dlfree+0x60d>
    c219:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
    c220:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    c227:	eb 05                	jmp    c22e <dlfree+0x612>
    c229:	e8 60 3d 02 00       	callq  2ff8e <abort>
    c22e:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
    c235:	00 
    c236:	0f 84 82 02 00 00    	je     c4be <dlfree+0x8a2>
    c23c:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    c243:	8b 40 38             	mov    0x38(%rax),%eax
    c246:	89 c0                	mov    %eax,%eax
    c248:	48 83 c0 4a          	add    $0x4a,%rax
    c24c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    c253:	00 
    c254:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c25b:	48 01 d0             	add    %rdx,%rax
    c25e:	48 83 c0 08          	add    $0x8,%rax
    c262:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    c269:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    c270:	48 8b 00             	mov    (%rax),%rax
    c273:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    c27a:	75 53                	jne    c2cf <dlfree+0x6b3>
    c27c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    c283:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
    c28a:	48 89 10             	mov    %rdx,(%rax)
    c28d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    c294:	48 8b 00             	mov    (%rax),%rax
    c297:	48 85 c0             	test   %rax,%rax
    c29a:	0f 85 8d 00 00 00    	jne    c32d <dlfree+0x711>
    c2a0:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c2a7:	8b 50 04             	mov    0x4(%rax),%edx
    c2aa:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    c2b1:	8b 40 38             	mov    0x38(%rax),%eax
    c2b4:	be 01 00 00 00       	mov    $0x1,%esi
    c2b9:	89 c1                	mov    %eax,%ecx
    c2bb:	d3 e6                	shl    %cl,%esi
    c2bd:	89 f0                	mov    %esi,%eax
    c2bf:	f7 d0                	not    %eax
    c2c1:	21 c2                	and    %eax,%edx
    c2c3:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c2ca:	89 50 04             	mov    %edx,0x4(%rax)
    c2cd:	eb 5e                	jmp    c32d <dlfree+0x711>
    c2cf:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c2d6:	48 8b 40 18          	mov    0x18(%rax),%rax
    c2da:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
    c2e1:	0f 93 c0             	setae  %al
    c2e4:	0f b6 c0             	movzbl %al,%eax
    c2e7:	48 85 c0             	test   %rax,%rax
    c2ea:	74 3c                	je     c328 <dlfree+0x70c>
    c2ec:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    c2f3:	48 8b 40 20          	mov    0x20(%rax),%rax
    c2f7:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
    c2fe:	75 14                	jne    c314 <dlfree+0x6f8>
    c300:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    c307:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
    c30e:	48 89 50 20          	mov    %rdx,0x20(%rax)
    c312:	eb 19                	jmp    c32d <dlfree+0x711>
    c314:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    c31b:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
    c322:	48 89 50 28          	mov    %rdx,0x28(%rax)
    c326:	eb 05                	jmp    c32d <dlfree+0x711>
    c328:	e8 61 3c 02 00       	callq  2ff8e <abort>
    c32d:	48 83 bd d8 fe ff ff 	cmpq   $0x0,-0x128(%rbp)
    c334:	00 
    c335:	0f 84 83 01 00 00    	je     c4be <dlfree+0x8a2>
    c33b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c342:	48 8b 40 18          	mov    0x18(%rax),%rax
    c346:	48 39 85 d8 fe ff ff 	cmp    %rax,-0x128(%rbp)
    c34d:	0f 93 c0             	setae  %al
    c350:	0f b6 c0             	movzbl %al,%eax
    c353:	48 85 c0             	test   %rax,%rax
    c356:	0f 84 e1 00 00 00    	je     c43d <dlfree+0x821>
    c35c:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    c363:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    c36a:	48 89 50 30          	mov    %rdx,0x30(%rax)
    c36e:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    c375:	48 8b 40 20          	mov    0x20(%rax),%rax
    c379:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    c380:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
    c387:	00 
    c388:	74 48                	je     c3d2 <dlfree+0x7b6>
    c38a:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c391:	48 8b 40 18          	mov    0x18(%rax),%rax
    c395:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    c39c:	0f 93 c0             	setae  %al
    c39f:	0f b6 c0             	movzbl %al,%eax
    c3a2:	48 85 c0             	test   %rax,%rax
    c3a5:	74 26                	je     c3cd <dlfree+0x7b1>
    c3a7:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    c3ae:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    c3b5:	48 89 50 20          	mov    %rdx,0x20(%rax)
    c3b9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    c3c0:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
    c3c7:	48 89 50 30          	mov    %rdx,0x30(%rax)
    c3cb:	eb 05                	jmp    c3d2 <dlfree+0x7b6>
    c3cd:	e8 bc 3b 02 00       	callq  2ff8e <abort>
    c3d2:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    c3d9:	48 8b 40 28          	mov    0x28(%rax),%rax
    c3dd:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    c3e4:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
    c3eb:	00 
    c3ec:	0f 84 cc 00 00 00    	je     c4be <dlfree+0x8a2>
    c3f2:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c3f9:	48 8b 40 18          	mov    0x18(%rax),%rax
    c3fd:	48 39 85 68 ff ff ff 	cmp    %rax,-0x98(%rbp)
    c404:	0f 93 c0             	setae  %al
    c407:	0f b6 c0             	movzbl %al,%eax
    c40a:	48 85 c0             	test   %rax,%rax
    c40d:	74 29                	je     c438 <dlfree+0x81c>
    c40f:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
    c416:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
    c41d:	48 89 50 28          	mov    %rdx,0x28(%rax)
    c421:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    c428:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
    c42f:	48 89 50 30          	mov    %rdx,0x30(%rax)
    c433:	e9 86 00 00 00       	jmpq   c4be <dlfree+0x8a2>
    c438:	e8 51 3b 02 00       	callq  2ff8e <abort>
    c43d:	e8 4c 3b 02 00       	callq  2ff8e <abort>
              }
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
    c442:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c449:	48 8b 40 08          	mov    0x8(%rax),%rax
    c44d:	83 e0 03             	and    $0x3,%eax
    c450:	48 83 f8 03          	cmp    $0x3,%rax
    c454:	75 68                	jne    c4be <dlfree+0x8a2>
                fm->dvsize = psize;
    c456:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c45d:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
    c464:	48 89 50 08          	mov    %rdx,0x8(%rax)
                set_free_with_pinuse(p, psize, next);
    c468:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c46f:	48 8b 40 08          	mov    0x8(%rax),%rax
    c473:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
    c477:	48 89 c2             	mov    %rax,%rdx
    c47a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c481:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c485:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    c48c:	48 83 c8 01          	or     $0x1,%rax
    c490:	48 89 c2             	mov    %rax,%rdx
    c493:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    c49a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c49e:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    c4a5:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    c4ac:	48 01 c2             	add    %rax,%rdx
    c4af:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    c4b6:	48 89 02             	mov    %rax,(%rdx)
                goto postaction;
    c4b9:	e9 55 0c 00 00       	jmpq   d113 <dlfree+0x14f7>
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
    c4be:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    c4c5:	48 3b 85 28 ff ff ff 	cmp    -0xd8(%rbp),%rax
    c4cc:	0f 92 c0             	setb   %al
    c4cf:	0f b6 c0             	movzbl %al,%eax
    c4d2:	48 85 c0             	test   %rax,%rax
    c4d5:	0f 84 2b 0c 00 00    	je     d106 <dlfree+0x14ea>
    c4db:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c4e2:	48 8b 40 08          	mov    0x8(%rax),%rax
    c4e6:	83 e0 01             	and    $0x1,%eax
    c4e9:	48 85 c0             	test   %rax,%rax
    c4ec:	0f 95 c0             	setne  %al
    c4ef:	0f b6 c0             	movzbl %al,%eax
    c4f2:	48 85 c0             	test   %rax,%rax
    c4f5:	0f 84 0b 0c 00 00    	je     d106 <dlfree+0x14ea>
          if (!cinuse(next)) {  /* consolidate forward */
    c4fb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c502:	48 8b 40 08          	mov    0x8(%rax),%rax
    c506:	83 e0 02             	and    $0x2,%eax
    c509:	48 85 c0             	test   %rax,%rax
    c50c:	0f 85 18 07 00 00    	jne    cc2a <dlfree+0x100e>
            if (next == fm->top) {
    c512:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c519:	48 8b 40 28          	mov    0x28(%rax),%rax
    c51d:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    c524:	0f 85 b7 00 00 00    	jne    c5e1 <dlfree+0x9c5>
              size_t tsize = fm->topsize += psize;
    c52a:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c531:	48 8b 50 10          	mov    0x10(%rax),%rdx
    c535:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    c53c:	48 01 c2             	add    %rax,%rdx
    c53f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c546:	48 89 50 10          	mov    %rdx,0x10(%rax)
    c54a:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c551:	48 8b 40 10          	mov    0x10(%rax),%rax
    c555:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
              fm->top = p;
    c559:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c560:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    c567:	48 89 50 28          	mov    %rdx,0x28(%rax)
              p->head = tsize | PINUSE_BIT;
    c56b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    c56f:	48 83 c8 01          	or     $0x1,%rax
    c573:	48 89 c2             	mov    %rax,%rdx
    c576:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    c57d:	48 89 50 08          	mov    %rdx,0x8(%rax)
              if (p == fm->dv) {
    c581:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c588:	48 8b 40 20          	mov    0x20(%rax),%rax
    c58c:	48 39 85 c8 fe ff ff 	cmp    %rax,-0x138(%rbp)
    c593:	75 1e                	jne    c5b3 <dlfree+0x997>
                fm->dv = 0;
    c595:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c59c:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    c5a3:	00 
                fm->dvsize = 0;
    c5a4:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c5ab:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    c5b2:	00 
              }
              if (should_trim(fm, tsize))
    c5b3:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c5ba:	48 8b 40 30          	mov    0x30(%rax),%rax
    c5be:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
    c5c2:	0f 86 47 0b 00 00    	jbe    d10f <dlfree+0x14f3>
                sys_trim(fm, 0);
    c5c8:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c5cf:	be 00 00 00 00       	mov    $0x0,%esi
    c5d4:	48 89 c7             	mov    %rax,%rdi
    c5d7:	e8 cd c2 ff ff       	callq  88a9 <sys_trim>
              goto postaction;
    c5dc:	e9 2e 0b 00 00       	jmpq   d10f <dlfree+0x14f3>
            }
            else if (next == fm->dv) {
    c5e1:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c5e8:	48 8b 40 20          	mov    0x20(%rax),%rax
    c5ec:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    c5f3:	75 71                	jne    c666 <dlfree+0xa4a>
              size_t dsize = fm->dvsize += psize;
    c5f5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c5fc:	48 8b 50 08          	mov    0x8(%rax),%rdx
    c600:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    c607:	48 01 c2             	add    %rax,%rdx
    c60a:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c611:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c615:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c61c:	48 8b 40 08          	mov    0x8(%rax),%rax
    c620:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
              fm->dv = p;
    c624:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c62b:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    c632:	48 89 50 20          	mov    %rdx,0x20(%rax)
              set_size_and_pinuse_of_free_chunk(p, dsize);
    c636:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    c63a:	48 83 c8 01          	or     $0x1,%rax
    c63e:	48 89 c2             	mov    %rax,%rdx
    c641:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    c648:	48 89 50 08          	mov    %rdx,0x8(%rax)
    c64c:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    c653:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    c657:	48 01 c2             	add    %rax,%rdx
    c65a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    c65e:	48 89 02             	mov    %rax,(%rdx)
              goto postaction;
    c661:	e9 ad 0a 00 00       	jmpq   d113 <dlfree+0x14f7>
            }
            else {
              size_t nsize = chunksize(next);
    c666:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c66d:	48 8b 40 08          	mov    0x8(%rax),%rax
    c671:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    c675:	48 89 45 80          	mov    %rax,-0x80(%rbp)
              psize += nsize;
    c679:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    c67d:	48 01 85 d0 fe ff ff 	add    %rax,-0x130(%rbp)
              unlink_chunk(fm, next, nsize);
    c684:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    c688:	48 c1 e8 03          	shr    $0x3,%rax
    c68c:	48 83 f8 1f          	cmp    $0x1f,%rax
    c690:	0f 87 c6 01 00 00    	ja     c85c <dlfree+0xc40>
    c696:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c69d:	48 8b 40 10          	mov    0x10(%rax),%rax
    c6a1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    c6a5:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c6ac:	48 8b 40 18          	mov    0x18(%rax),%rax
    c6b0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    c6b4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    c6b8:	48 c1 e8 03          	shr    $0x3,%rax
    c6bc:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    c6c2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c6c9:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
    c6cd:	75 05                	jne    c6d4 <dlfree+0xab8>
    c6cf:	e8 ba 38 02 00       	callq  2ff8e <abort>
    c6d4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c6db:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
    c6df:	75 05                	jne    c6e6 <dlfree+0xaca>
    c6e1:	e8 a8 38 02 00       	callq  2ff8e <abort>
    c6e6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c6ed:	48 8b 40 08          	mov    0x8(%rax),%rax
    c6f1:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    c6f5:	48 89 c2             	mov    %rax,%rdx
    c6f8:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    c6fe:	c1 e0 03             	shl    $0x3,%eax
    c701:	89 c0                	mov    %eax,%eax
    c703:	48 39 c2             	cmp    %rax,%rdx
    c706:	74 05                	je     c70d <dlfree+0xaf1>
    c708:	e8 81 38 02 00       	callq  2ff8e <abort>
    c70d:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    c713:	01 c0                	add    %eax,%eax
    c715:	89 c0                	mov    %eax,%eax
    c717:	48 83 c0 08          	add    $0x8,%rax
    c71b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    c722:	00 
    c723:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c72a:	48 01 d0             	add    %rdx,%rax
    c72d:	48 83 c0 08          	add    $0x8,%rax
    c731:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
    c735:	0f 94 c0             	sete   %al
    c738:	0f b6 c0             	movzbl %al,%eax
    c73b:	48 85 c0             	test   %rax,%rax
    c73e:	75 48                	jne    c788 <dlfree+0xb6c>
    c740:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c747:	48 8b 40 18          	mov    0x18(%rax),%rax
    c74b:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
    c74f:	0f 93 c0             	setae  %al
    c752:	0f b6 c0             	movzbl %al,%eax
    c755:	48 85 c0             	test   %rax,%rax
    c758:	74 21                	je     c77b <dlfree+0xb5f>
    c75a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    c75e:	48 8b 40 18          	mov    0x18(%rax),%rax
    c762:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    c769:	0f 94 c0             	sete   %al
    c76c:	0f b6 c0             	movzbl %al,%eax
    c76f:	48 85 c0             	test   %rax,%rax
    c772:	74 07                	je     c77b <dlfree+0xb5f>
    c774:	b8 01 00 00 00       	mov    $0x1,%eax
    c779:	eb 05                	jmp    c780 <dlfree+0xb64>
    c77b:	b8 00 00 00 00       	mov    $0x0,%eax
    c780:	85 c0                	test   %eax,%eax
    c782:	0f 84 cf 00 00 00    	je     c857 <dlfree+0xc3b>
    c788:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c78c:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
    c790:	75 2c                	jne    c7be <dlfree+0xba2>
    c792:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c799:	8b 10                	mov    (%rax),%edx
    c79b:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    c7a1:	be 01 00 00 00       	mov    $0x1,%esi
    c7a6:	89 c1                	mov    %eax,%ecx
    c7a8:	d3 e6                	shl    %cl,%esi
    c7aa:	89 f0                	mov    %esi,%eax
    c7ac:	f7 d0                	not    %eax
    c7ae:	21 c2                	and    %eax,%edx
    c7b0:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c7b7:	89 10                	mov    %edx,(%rax)
    c7b9:	e9 0d 04 00 00       	jmpq   cbcb <dlfree+0xfaf>
    c7be:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    c7c4:	01 c0                	add    %eax,%eax
    c7c6:	89 c0                	mov    %eax,%eax
    c7c8:	48 83 c0 08          	add    $0x8,%rax
    c7cc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    c7d3:	00 
    c7d4:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c7db:	48 01 d0             	add    %rdx,%rax
    c7de:	48 83 c0 08          	add    $0x8,%rax
    c7e2:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    c7e6:	0f 94 c0             	sete   %al
    c7e9:	0f b6 c0             	movzbl %al,%eax
    c7ec:	48 85 c0             	test   %rax,%rax
    c7ef:	75 44                	jne    c835 <dlfree+0xc19>
    c7f1:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c7f8:	48 8b 40 18          	mov    0x18(%rax),%rax
    c7fc:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    c800:	0f 93 c0             	setae  %al
    c803:	0f b6 c0             	movzbl %al,%eax
    c806:	48 85 c0             	test   %rax,%rax
    c809:	74 21                	je     c82c <dlfree+0xc10>
    c80b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c80f:	48 8b 40 10          	mov    0x10(%rax),%rax
    c813:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    c81a:	0f 94 c0             	sete   %al
    c81d:	0f b6 c0             	movzbl %al,%eax
    c820:	48 85 c0             	test   %rax,%rax
    c823:	74 07                	je     c82c <dlfree+0xc10>
    c825:	b8 01 00 00 00       	mov    $0x1,%eax
    c82a:	eb 05                	jmp    c831 <dlfree+0xc15>
    c82c:	b8 00 00 00 00       	mov    $0x0,%eax
    c831:	85 c0                	test   %eax,%eax
    c833:	74 1d                	je     c852 <dlfree+0xc36>
    c835:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    c839:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    c83d:	48 89 50 18          	mov    %rdx,0x18(%rax)
    c841:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    c845:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    c849:	48 89 50 10          	mov    %rdx,0x10(%rax)
    c84d:	e9 79 03 00 00       	jmpq   cbcb <dlfree+0xfaf>
    c852:	e8 37 37 02 00       	callq  2ff8e <abort>
    c857:	e8 32 37 02 00       	callq  2ff8e <abort>
    c85c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    c863:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    c867:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    c86b:	48 8b 40 30          	mov    0x30(%rax),%rax
    c86f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    c873:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    c877:	48 8b 40 18          	mov    0x18(%rax),%rax
    c87b:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    c87f:	0f 84 9e 00 00 00    	je     c923 <dlfree+0xd07>
    c885:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    c889:	48 8b 40 10          	mov    0x10(%rax),%rax
    c88d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    c891:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    c895:	48 8b 40 18          	mov    0x18(%rax),%rax
    c899:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    c8a0:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c8a7:	48 8b 40 18          	mov    0x18(%rax),%rax
    c8ab:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    c8af:	0f 93 c0             	setae  %al
    c8b2:	0f b6 c0             	movzbl %al,%eax
    c8b5:	48 85 c0             	test   %rax,%rax
    c8b8:	74 1e                	je     c8d8 <dlfree+0xcbc>
    c8ba:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    c8be:	48 8b 40 18          	mov    0x18(%rax),%rax
    c8c2:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    c8c6:	0f 94 c0             	sete   %al
    c8c9:	0f b6 c0             	movzbl %al,%eax
    c8cc:	48 85 c0             	test   %rax,%rax
    c8cf:	74 07                	je     c8d8 <dlfree+0xcbc>
    c8d1:	b8 01 00 00 00       	mov    $0x1,%eax
    c8d6:	eb 05                	jmp    c8dd <dlfree+0xcc1>
    c8d8:	b8 00 00 00 00       	mov    $0x0,%eax
    c8dd:	85 c0                	test   %eax,%eax
    c8df:	74 3d                	je     c91e <dlfree+0xd02>
    c8e1:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    c8e8:	48 8b 40 10          	mov    0x10(%rax),%rax
    c8ec:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    c8f0:	0f 94 c0             	sete   %al
    c8f3:	0f b6 c0             	movzbl %al,%eax
    c8f6:	48 85 c0             	test   %rax,%rax
    c8f9:	74 23                	je     c91e <dlfree+0xd02>
    c8fb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    c8ff:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
    c906:	48 89 50 18          	mov    %rdx,0x18(%rax)
    c90a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    c911:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    c915:	48 89 50 10          	mov    %rdx,0x10(%rax)
    c919:	e9 f2 00 00 00       	jmpq   ca10 <dlfree+0xdf4>
    c91e:	e8 6b 36 02 00       	callq  2ff8e <abort>
    c923:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    c927:	48 83 c0 28          	add    $0x28,%rax
    c92b:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    c932:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    c939:	48 8b 00             	mov    (%rax),%rax
    c93c:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    c943:	48 83 bd f0 fe ff ff 	cmpq   $0x0,-0x110(%rbp)
    c94a:	00 
    c94b:	75 4f                	jne    c99c <dlfree+0xd80>
    c94d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    c951:	48 83 c0 20          	add    $0x20,%rax
    c955:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    c95c:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    c963:	48 8b 00             	mov    (%rax),%rax
    c966:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    c96d:	48 83 bd f0 fe ff ff 	cmpq   $0x0,-0x110(%rbp)
    c974:	00 
    c975:	0f 84 95 00 00 00    	je     ca10 <dlfree+0xdf4>
    c97b:	eb 1f                	jmp    c99c <dlfree+0xd80>
    c97d:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    c984:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    c98b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    c992:	48 8b 00             	mov    (%rax),%rax
    c995:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    c99c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    c9a3:	48 83 c0 28          	add    $0x28,%rax
    c9a7:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    c9ae:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    c9b5:	48 8b 00             	mov    (%rax),%rax
    c9b8:	48 85 c0             	test   %rax,%rax
    c9bb:	75 c0                	jne    c97d <dlfree+0xd61>
    c9bd:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    c9c4:	48 83 c0 20          	add    $0x20,%rax
    c9c8:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    c9cf:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    c9d6:	48 8b 00             	mov    (%rax),%rax
    c9d9:	48 85 c0             	test   %rax,%rax
    c9dc:	75 9f                	jne    c97d <dlfree+0xd61>
    c9de:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    c9e5:	48 8b 40 18          	mov    0x18(%rax),%rax
    c9e9:	48 39 85 f8 fe ff ff 	cmp    %rax,-0x108(%rbp)
    c9f0:	0f 93 c0             	setae  %al
    c9f3:	0f b6 c0             	movzbl %al,%eax
    c9f6:	48 85 c0             	test   %rax,%rax
    c9f9:	74 10                	je     ca0b <dlfree+0xdef>
    c9fb:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    ca02:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    ca09:	eb 05                	jmp    ca10 <dlfree+0xdf4>
    ca0b:	e8 7e 35 02 00       	callq  2ff8e <abort>
    ca10:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
    ca15:	0f 84 b0 01 00 00    	je     cbcb <dlfree+0xfaf>
    ca1b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    ca1f:	8b 40 38             	mov    0x38(%rax),%eax
    ca22:	89 c0                	mov    %eax,%eax
    ca24:	48 83 c0 4a          	add    $0x4a,%rax
    ca28:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ca2f:	00 
    ca30:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    ca37:	48 01 d0             	add    %rdx,%rax
    ca3a:	48 83 c0 08          	add    $0x8,%rax
    ca3e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    ca42:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    ca46:	48 8b 00             	mov    (%rax),%rax
    ca49:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    ca4d:	75 46                	jne    ca95 <dlfree+0xe79>
    ca4f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    ca53:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
    ca5a:	48 89 10             	mov    %rdx,(%rax)
    ca5d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    ca61:	48 8b 00             	mov    (%rax),%rax
    ca64:	48 85 c0             	test   %rax,%rax
    ca67:	75 7b                	jne    cae4 <dlfree+0xec8>
    ca69:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    ca70:	8b 50 04             	mov    0x4(%rax),%edx
    ca73:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    ca77:	8b 40 38             	mov    0x38(%rax),%eax
    ca7a:	be 01 00 00 00       	mov    $0x1,%esi
    ca7f:	89 c1                	mov    %eax,%ecx
    ca81:	d3 e6                	shl    %cl,%esi
    ca83:	89 f0                	mov    %esi,%eax
    ca85:	f7 d0                	not    %eax
    ca87:	21 c2                	and    %eax,%edx
    ca89:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    ca90:	89 50 04             	mov    %edx,0x4(%rax)
    ca93:	eb 4f                	jmp    cae4 <dlfree+0xec8>
    ca95:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    ca9c:	48 8b 40 18          	mov    0x18(%rax),%rax
    caa0:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    caa4:	0f 93 c0             	setae  %al
    caa7:	0f b6 c0             	movzbl %al,%eax
    caaa:	48 85 c0             	test   %rax,%rax
    caad:	74 30                	je     cadf <dlfree+0xec3>
    caaf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    cab3:	48 8b 40 20          	mov    0x20(%rax),%rax
    cab7:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    cabb:	75 11                	jne    cace <dlfree+0xeb2>
    cabd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    cac1:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
    cac8:	48 89 50 20          	mov    %rdx,0x20(%rax)
    cacc:	eb 16                	jmp    cae4 <dlfree+0xec8>
    cace:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    cad2:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
    cad9:	48 89 50 28          	mov    %rdx,0x28(%rax)
    cadd:	eb 05                	jmp    cae4 <dlfree+0xec8>
    cadf:	e8 aa 34 02 00       	callq  2ff8e <abort>
    cae4:	48 83 bd f0 fe ff ff 	cmpq   $0x0,-0x110(%rbp)
    caeb:	00 
    caec:	0f 84 d9 00 00 00    	je     cbcb <dlfree+0xfaf>
    caf2:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    caf9:	48 8b 40 18          	mov    0x18(%rax),%rax
    cafd:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
    cb04:	0f 93 c0             	setae  %al
    cb07:	0f b6 c0             	movzbl %al,%eax
    cb0a:	48 85 c0             	test   %rax,%rax
    cb0d:	0f 84 b3 00 00 00    	je     cbc6 <dlfree+0xfaa>
    cb13:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    cb1a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    cb1e:	48 89 50 30          	mov    %rdx,0x30(%rax)
    cb22:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    cb26:	48 8b 40 20          	mov    0x20(%rax),%rax
    cb2a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    cb2e:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
    cb33:	74 3f                	je     cb74 <dlfree+0xf58>
    cb35:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cb3c:	48 8b 40 18          	mov    0x18(%rax),%rax
    cb40:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    cb44:	0f 93 c0             	setae  %al
    cb47:	0f b6 c0             	movzbl %al,%eax
    cb4a:	48 85 c0             	test   %rax,%rax
    cb4d:	74 20                	je     cb6f <dlfree+0xf53>
    cb4f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    cb56:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    cb5a:	48 89 50 20          	mov    %rdx,0x20(%rax)
    cb5e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    cb62:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
    cb69:	48 89 50 30          	mov    %rdx,0x30(%rax)
    cb6d:	eb 05                	jmp    cb74 <dlfree+0xf58>
    cb6f:	e8 1a 34 02 00       	callq  2ff8e <abort>
    cb74:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    cb78:	48 8b 40 28          	mov    0x28(%rax),%rax
    cb7c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    cb80:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
    cb85:	74 44                	je     cbcb <dlfree+0xfaf>
    cb87:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cb8e:	48 8b 40 18          	mov    0x18(%rax),%rax
    cb92:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    cb96:	0f 93 c0             	setae  %al
    cb99:	0f b6 c0             	movzbl %al,%eax
    cb9c:	48 85 c0             	test   %rax,%rax
    cb9f:	74 20                	je     cbc1 <dlfree+0xfa5>
    cba1:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    cba8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    cbac:	48 89 50 28          	mov    %rdx,0x28(%rax)
    cbb0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    cbb4:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
    cbbb:	48 89 50 30          	mov    %rdx,0x30(%rax)
    cbbf:	eb 0a                	jmp    cbcb <dlfree+0xfaf>
    cbc1:	e8 c8 33 02 00       	callq  2ff8e <abort>
    cbc6:	e8 c3 33 02 00       	callq  2ff8e <abort>
              set_size_and_pinuse_of_free_chunk(p, psize);
    cbcb:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    cbd2:	48 83 c8 01          	or     $0x1,%rax
    cbd6:	48 89 c2             	mov    %rax,%rdx
    cbd9:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    cbe0:	48 89 50 08          	mov    %rdx,0x8(%rax)
    cbe4:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    cbeb:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    cbf2:	48 01 c2             	add    %rax,%rdx
    cbf5:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    cbfc:	48 89 02             	mov    %rax,(%rdx)
              if (p == fm->dv) {
    cbff:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cc06:	48 8b 40 20          	mov    0x20(%rax),%rax
    cc0a:	48 39 85 c8 fe ff ff 	cmp    %rax,-0x138(%rbp)
    cc11:	75 68                	jne    cc7b <dlfree+0x105f>
                fm->dvsize = psize;
    cc13:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cc1a:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
    cc21:	48 89 50 08          	mov    %rdx,0x8(%rax)
                goto postaction;
    cc25:	e9 e9 04 00 00       	jmpq   d113 <dlfree+0x14f7>
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
    cc2a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    cc31:	48 8b 40 08          	mov    0x8(%rax),%rax
    cc35:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
    cc39:	48 89 c2             	mov    %rax,%rdx
    cc3c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    cc43:	48 89 50 08          	mov    %rdx,0x8(%rax)
    cc47:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    cc4e:	48 83 c8 01          	or     $0x1,%rax
    cc52:	48 89 c2             	mov    %rax,%rdx
    cc55:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    cc5c:	48 89 50 08          	mov    %rdx,0x8(%rax)
    cc60:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    cc67:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    cc6e:	48 01 c2             	add    %rax,%rdx
    cc71:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    cc78:	48 89 02             	mov    %rax,(%rdx)

          if (is_small(psize)) {
    cc7b:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    cc82:	48 c1 e8 03          	shr    $0x3,%rax
    cc86:	48 83 f8 1f          	cmp    $0x1f,%rax
    cc8a:	0f 87 31 01 00 00    	ja     cdc1 <dlfree+0x11a5>
            insert_small_chunk(fm, p, psize);
    cc90:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    cc97:	48 c1 e8 03          	shr    $0x3,%rax
    cc9b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    cca1:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
    cca7:	01 c0                	add    %eax,%eax
    cca9:	89 c0                	mov    %eax,%eax
    ccab:	48 83 c0 08          	add    $0x8,%rax
    ccaf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ccb6:	00 
    ccb7:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    ccbe:	48 01 d0             	add    %rdx,%rax
    ccc1:	48 83 c0 08          	add    $0x8,%rax
    ccc5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ccc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cccd:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    ccd4:	48 83 bd d0 fe ff ff 	cmpq   $0x1f,-0x130(%rbp)
    ccdb:	1f 
    ccdc:	77 05                	ja     cce3 <dlfree+0x10c7>
    ccde:	e8 ab 32 02 00       	callq  2ff8e <abort>
    cce3:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    ccea:	8b 10                	mov    (%rax),%edx
    ccec:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
    ccf2:	be 01 00 00 00       	mov    $0x1,%esi
    ccf7:	89 c1                	mov    %eax,%ecx
    ccf9:	d3 e6                	shl    %cl,%esi
    ccfb:	89 f0                	mov    %esi,%eax
    ccfd:	21 d0                	and    %edx,%eax
    ccff:	85 c0                	test   %eax,%eax
    cd01:	75 27                	jne    cd2a <dlfree+0x110e>
    cd03:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cd0a:	8b 10                	mov    (%rax),%edx
    cd0c:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
    cd12:	be 01 00 00 00       	mov    $0x1,%esi
    cd17:	89 c1                	mov    %eax,%ecx
    cd19:	d3 e6                	shl    %cl,%esi
    cd1b:	89 f0                	mov    %esi,%eax
    cd1d:	09 c2                	or     %eax,%edx
    cd1f:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cd26:	89 10                	mov    %edx,(%rax)
    cd28:	eb 37                	jmp    cd61 <dlfree+0x1145>
    cd2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cd2e:	48 8b 50 10          	mov    0x10(%rax),%rdx
    cd32:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cd39:	48 8b 40 18          	mov    0x18(%rax),%rax
    cd3d:	48 39 c2             	cmp    %rax,%rdx
    cd40:	0f 93 c0             	setae  %al
    cd43:	0f b6 c0             	movzbl %al,%eax
    cd46:	48 85 c0             	test   %rax,%rax
    cd49:	74 11                	je     cd5c <dlfree+0x1140>
    cd4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cd4f:	48 8b 40 10          	mov    0x10(%rax),%rax
    cd53:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    cd5a:	eb 05                	jmp    cd61 <dlfree+0x1145>
    cd5c:	e8 2d 32 02 00       	callq  2ff8e <abort>
    cd61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    cd65:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    cd6c:	48 89 50 10          	mov    %rdx,0x10(%rax)
    cd70:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    cd77:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    cd7e:	48 89 50 18          	mov    %rdx,0x18(%rax)
    cd82:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    cd89:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    cd90:	48 89 50 10          	mov    %rdx,0x10(%rax)
    cd94:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    cd9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    cd9f:	48 89 50 18          	mov    %rdx,0x18(%rax)
            check_free_chunk(fm, p);
    cda3:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    cdaa:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cdb1:	48 89 d6             	mov    %rdx,%rsi
    cdb4:	48 89 c7             	mov    %rax,%rdi
    cdb7:	e8 71 87 ff ff       	callq  552d <do_check_free_chunk>
            insert_large_chunk(fm, tp, psize);
            check_free_chunk(fm, p);
            if (--fm->release_checks == 0)
              release_unused_segments(fm);
          }
          goto postaction;
    cdbc:	e9 51 03 00 00       	jmpq   d112 <dlfree+0x14f6>
            tchunkptr tp = (tchunkptr)p;
    cdc1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    cdc8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            insert_large_chunk(fm, tp, psize);
    cdcc:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
    cdd3:	48 c1 e8 08          	shr    $0x8,%rax
    cdd7:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    cddd:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
    cde4:	75 0c                	jne    cdf2 <dlfree+0x11d6>
    cde6:	c7 85 b0 fe ff ff 00 	movl   $0x0,-0x150(%rbp)
    cded:	00 00 00 
    cdf0:	eb 5d                	jmp    ce4f <dlfree+0x1233>
    cdf2:	81 bd bc fe ff ff ff 	cmpl   $0xffff,-0x144(%rbp)
    cdf9:	ff 00 00 
    cdfc:	76 0c                	jbe    ce0a <dlfree+0x11ee>
    cdfe:	c7 85 b0 fe ff ff 1f 	movl   $0x1f,-0x150(%rbp)
    ce05:	00 00 00 
    ce08:	eb 45                	jmp    ce4f <dlfree+0x1233>
    ce0a:	0f bd 85 bc fe ff ff 	bsr    -0x144(%rbp),%eax
    ce11:	83 f0 1f             	xor    $0x1f,%eax
    ce14:	ba 1f 00 00 00       	mov    $0x1f,%edx
    ce19:	29 c2                	sub    %eax,%edx
    ce1b:	89 d0                	mov    %edx,%eax
    ce1d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    ce23:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    ce29:	8d 34 00             	lea    (%rax,%rax,1),%esi
    ce2c:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    ce32:	83 c0 07             	add    $0x7,%eax
    ce35:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
    ce3c:	89 c1                	mov    %eax,%ecx
    ce3e:	48 d3 ea             	shr    %cl,%rdx
    ce41:	48 89 d0             	mov    %rdx,%rax
    ce44:	83 e0 01             	and    $0x1,%eax
    ce47:	01 f0                	add    %esi,%eax
    ce49:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%rbp)
    ce4f:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    ce55:	48 83 c0 4a          	add    $0x4a,%rax
    ce59:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    ce60:	00 
    ce61:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    ce68:	48 01 d0             	add    %rdx,%rax
    ce6b:	48 83 c0 08          	add    $0x8,%rax
    ce6f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    ce73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ce77:	8b 95 b0 fe ff ff    	mov    -0x150(%rbp),%edx
    ce7d:	89 50 38             	mov    %edx,0x38(%rax)
    ce80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ce84:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    ce8b:	00 
    ce8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ce90:	48 8b 50 28          	mov    0x28(%rax),%rdx
    ce94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ce98:	48 89 50 20          	mov    %rdx,0x20(%rax)
    ce9c:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cea3:	8b 50 04             	mov    0x4(%rax),%edx
    cea6:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    ceac:	be 01 00 00 00       	mov    $0x1,%esi
    ceb1:	89 c1                	mov    %eax,%ecx
    ceb3:	d3 e6                	shl    %cl,%esi
    ceb5:	89 f0                	mov    %esi,%eax
    ceb7:	21 d0                	and    %edx,%eax
    ceb9:	85 c0                	test   %eax,%eax
    cebb:	75 5f                	jne    cf1c <dlfree+0x1300>
    cebd:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cec4:	8b 50 04             	mov    0x4(%rax),%edx
    cec7:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    cecd:	be 01 00 00 00       	mov    $0x1,%esi
    ced2:	89 c1                	mov    %eax,%ecx
    ced4:	d3 e6                	shl    %cl,%esi
    ced6:	89 f0                	mov    %esi,%eax
    ced8:	09 c2                	or     %eax,%edx
    ceda:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cee1:	89 50 04             	mov    %edx,0x4(%rax)
    cee4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    cee8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    ceec:	48 89 10             	mov    %rdx,(%rax)
    ceef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    cef3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    cef7:	48 89 50 30          	mov    %rdx,0x30(%rax)
    cefb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    ceff:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    cf03:	48 89 50 18          	mov    %rdx,0x18(%rax)
    cf07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    cf0b:	48 8b 50 18          	mov    0x18(%rax),%rdx
    cf0f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    cf13:	48 89 50 10          	mov    %rdx,0x10(%rax)
    cf17:	e9 96 01 00 00       	jmpq   d0b2 <dlfree+0x1496>
    cf1c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    cf20:	48 8b 00             	mov    (%rax),%rax
    cf23:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    cf2a:	83 bd b0 fe ff ff 1f 	cmpl   $0x1f,-0x150(%rbp)
    cf31:	74 13                	je     cf46 <dlfree+0x132a>
    cf33:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    cf39:	d1 e8                	shr    %eax
    cf3b:	ba 39 00 00 00       	mov    $0x39,%edx
    cf40:	29 c2                	sub    %eax,%edx
    cf42:	89 d0                	mov    %edx,%eax
    cf44:	eb 05                	jmp    cf4b <dlfree+0x132f>
    cf46:	b8 00 00 00 00       	mov    $0x0,%eax
    cf4b:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
    cf52:	89 c1                	mov    %eax,%ecx
    cf54:	48 d3 e2             	shl    %cl,%rdx
    cf57:	48 89 d0             	mov    %rdx,%rax
    cf5a:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    cf61:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    cf68:	48 8b 40 08          	mov    0x8(%rax),%rax
    cf6c:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    cf70:	48 39 85 d0 fe ff ff 	cmp    %rax,-0x130(%rbp)
    cf77:	0f 84 a2 00 00 00    	je     d01f <dlfree+0x1403>
    cf7d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    cf84:	48 c1 e8 3f          	shr    $0x3f,%rax
    cf88:	48 83 c0 04          	add    $0x4,%rax
    cf8c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    cf93:	00 
    cf94:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    cf9b:	48 01 d0             	add    %rdx,%rax
    cf9e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    cfa2:	48 d1 a5 18 ff ff ff 	shlq   -0xe8(%rbp)
    cfa9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cfad:	48 8b 00             	mov    (%rax),%rax
    cfb0:	48 85 c0             	test   %rax,%rax
    cfb3:	74 10                	je     cfc5 <dlfree+0x13a9>
    cfb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cfb9:	48 8b 00             	mov    (%rax),%rax
    cfbc:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    cfc3:	eb 9c                	jmp    cf61 <dlfree+0x1345>
    cfc5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    cfcc:	48 8b 40 18          	mov    0x18(%rax),%rax
    cfd0:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    cfd4:	0f 93 c0             	setae  %al
    cfd7:	0f b6 c0             	movzbl %al,%eax
    cfda:	48 85 c0             	test   %rax,%rax
    cfdd:	74 3b                	je     d01a <dlfree+0x13fe>
    cfdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    cfe3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    cfe7:	48 89 10             	mov    %rdx,(%rax)
    cfea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    cfee:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
    cff5:	48 89 50 30          	mov    %rdx,0x30(%rax)
    cff9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    cffd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    d001:	48 89 50 18          	mov    %rdx,0x18(%rax)
    d005:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d009:	48 8b 50 18          	mov    0x18(%rax),%rdx
    d00d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d011:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d015:	e9 98 00 00 00       	jmpq   d0b2 <dlfree+0x1496>
    d01a:	e8 6f 2f 02 00       	callq  2ff8e <abort>
    d01f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    d026:	48 8b 40 10          	mov    0x10(%rax),%rax
    d02a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    d02e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    d035:	48 8b 40 18          	mov    0x18(%rax),%rax
    d039:	48 39 85 10 ff ff ff 	cmp    %rax,-0xf0(%rbp)
    d040:	0f 93 c0             	setae  %al
    d043:	0f b6 c0             	movzbl %al,%eax
    d046:	48 85 c0             	test   %rax,%rax
    d049:	74 62                	je     d0ad <dlfree+0x1491>
    d04b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    d052:	48 8b 40 18          	mov    0x18(%rax),%rax
    d056:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    d05a:	0f 93 c0             	setae  %al
    d05d:	0f b6 c0             	movzbl %al,%eax
    d060:	48 85 c0             	test   %rax,%rax
    d063:	74 48                	je     d0ad <dlfree+0x1491>
    d065:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d069:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    d06d:	48 89 50 18          	mov    %rdx,0x18(%rax)
    d071:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d075:	48 8b 50 18          	mov    0x18(%rax),%rdx
    d079:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
    d080:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d084:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d088:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d08c:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d090:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d094:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
    d09b:	48 89 50 18          	mov    %rdx,0x18(%rax)
    d09f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d0a3:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
    d0aa:	00 
    d0ab:	eb 05                	jmp    d0b2 <dlfree+0x1496>
    d0ad:	e8 dc 2e 02 00       	callq  2ff8e <abort>
            check_free_chunk(fm, p);
    d0b2:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    d0b9:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    d0c0:	48 89 d6             	mov    %rdx,%rsi
    d0c3:	48 89 c7             	mov    %rax,%rdi
    d0c6:	e8 62 84 ff ff       	callq  552d <do_check_free_chunk>
            if (--fm->release_checks == 0)
    d0cb:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    d0d2:	48 8b 40 38          	mov    0x38(%rax),%rax
    d0d6:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    d0da:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    d0e1:	48 89 50 38          	mov    %rdx,0x38(%rax)
    d0e5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    d0ec:	48 8b 40 38          	mov    0x38(%rax),%rax
    d0f0:	48 85 c0             	test   %rax,%rax
    d0f3:	75 1d                	jne    d112 <dlfree+0x14f6>
              release_unused_segments(fm);
    d0f5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    d0fc:	48 89 c7             	mov    %rax,%rdi
    d0ff:	e8 22 b7 ff ff       	callq  8826 <release_unused_segments>
          goto postaction;
    d104:	eb 0c                	jmp    d112 <dlfree+0x14f6>
        }
      }
    erroraction:
    d106:	90                   	nop
    d107:	eb 01                	jmp    d10a <dlfree+0x14ee>
              goto erroraction;
    d109:	90                   	nop
      USAGE_ERROR_ACTION(fm, p);
    d10a:	e8 7f 2e 02 00       	callq  2ff8e <abort>
              goto postaction;
    d10f:	90                   	nop
    d110:	eb 01                	jmp    d113 <dlfree+0x14f7>
          goto postaction;
    d112:	90                   	nop
    postaction:
      POSTACTION(fm);
    d113:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    d11a:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    d120:	83 e0 02             	and    $0x2,%eax
    d123:	85 c0                	test   %eax,%eax
    d125:	74 14                	je     d13b <dlfree+0x151f>
    d127:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    d12e:	48 05 74 03 00 00    	add    $0x374,%rax
    d134:	ba 00 00 00 00       	mov    $0x0,%edx
    d139:	89 10                	mov    %edx,(%rax)
    }
  }
#if !FOOTERS
#undef fm
#endif /* FOOTERS */
}
    d13b:	90                   	nop
    d13c:	c9                   	leaveq 
    d13d:	c3                   	retq   

000000000000d13e <calloc>:

void* dlcalloc(size_t n_elements, size_t elem_size) {
    d13e:	55                   	push   %rbp
    d13f:	48 89 e5             	mov    %rsp,%rbp
    d142:	48 83 ec 20          	sub    $0x20,%rsp
    d146:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    d14a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  void* mem;
  size_t req = 0;
    d14e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    d155:	00 
  if (n_elements != 0) {
    d156:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    d15b:	74 39                	je     d196 <calloc+0x58>
    req = n_elements * elem_size;
    d15d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d161:	48 0f af 45 e0       	imul   -0x20(%rbp),%rax
    d166:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if (((n_elements | elem_size) & ~(size_t)0xffff) &&
    d16a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d16e:	48 0b 45 e0          	or     -0x20(%rbp),%rax
    d172:	66 b8 00 00          	mov    $0x0,%ax
    d176:	48 85 c0             	test   %rax,%rax
    d179:	74 1b                	je     d196 <calloc+0x58>
        (req / n_elements != elem_size))
    d17b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d17f:	ba 00 00 00 00       	mov    $0x0,%edx
    d184:	48 f7 75 e8          	divq   -0x18(%rbp)
    if (((n_elements | elem_size) & ~(size_t)0xffff) &&
    d188:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
    d18c:	74 08                	je     d196 <calloc+0x58>
      req = MAX_SIZE_T; /* force downstream failure on overflow */
    d18e:	48 c7 45 f0 ff ff ff 	movq   $0xffffffffffffffff,-0x10(%rbp)
    d195:	ff 
  }
  mem = dlmalloc(req);
    d196:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d19a:	48 89 c7             	mov    %rax,%rdi
    d19d:	e8 83 df ff ff       	callq  b125 <dlmalloc>
    d1a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  if (mem != 0 && calloc_must_clear(mem2chunk(mem)))
    d1a6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    d1ab:	74 15                	je     d1c2 <calloc+0x84>
    memset(mem, 0, req);
    d1ad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d1b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d1b5:	be 00 00 00 00       	mov    $0x0,%esi
    d1ba:	48 89 c7             	mov    %rax,%rdi
    d1bd:	e8 96 16 00 00       	callq  e858 <memset>
  return mem;
    d1c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    d1c6:	c9                   	leaveq 
    d1c7:	c3                   	retq   

000000000000d1c8 <try_realloc_chunk>:

/* ------------ Internal support for realloc, memalign, etc -------------- */

/* Try to realloc; only in-place unless can_move true */
static mchunkptr try_realloc_chunk(mstate m, mchunkptr p, size_t nb,
                                   int can_move) {
    d1c8:	55                   	push   %rbp
    d1c9:	48 89 e5             	mov    %rsp,%rbp
    d1cc:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
    d1d3:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
    d1da:	48 89 b5 00 ff ff ff 	mov    %rsi,-0x100(%rbp)
    d1e1:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
    d1e8:	89 8d f4 fe ff ff    	mov    %ecx,-0x10c(%rbp)
  mchunkptr newp = 0;
    d1ee:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
    d1f5:	00 00 00 00 
  size_t oldsize = chunksize(p);
    d1f9:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d200:	48 8b 40 08          	mov    0x8(%rax),%rax
    d204:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    d208:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  mchunkptr next = chunk_plus_offset(p, oldsize);
    d20f:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    d216:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    d21d:	48 01 d0             	add    %rdx,%rax
    d220:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  if (RTCHECK(ok_address(m, p) && ok_inuse(p) &&
    d227:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d22e:	48 8b 40 18          	mov    0x18(%rax),%rax
    d232:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
    d239:	0f 93 c0             	setae  %al
    d23c:	0f b6 c0             	movzbl %al,%eax
    d23f:	48 85 c0             	test   %rax,%rax
    d242:	74 24                	je     d268 <try_realloc_chunk+0xa0>
    d244:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d24b:	48 8b 40 08          	mov    0x8(%rax),%rax
    d24f:	83 e0 03             	and    $0x3,%eax
    d252:	48 83 f8 01          	cmp    $0x1,%rax
    d256:	0f 95 c0             	setne  %al
    d259:	0f b6 c0             	movzbl %al,%eax
    d25c:	48 85 c0             	test   %rax,%rax
    d25f:	74 07                	je     d268 <try_realloc_chunk+0xa0>
    d261:	b8 01 00 00 00       	mov    $0x1,%eax
    d266:	eb 05                	jmp    d26d <try_realloc_chunk+0xa5>
    d268:	b8 00 00 00 00       	mov    $0x0,%eax
    d26d:	85 c0                	test   %eax,%eax
    d26f:	74 20                	je     d291 <try_realloc_chunk+0xc9>
    d271:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d278:	48 3b 85 48 ff ff ff 	cmp    -0xb8(%rbp),%rax
    d27f:	0f 92 c0             	setb   %al
    d282:	0f b6 c0             	movzbl %al,%eax
    d285:	48 85 c0             	test   %rax,%rax
    d288:	74 07                	je     d291 <try_realloc_chunk+0xc9>
    d28a:	b8 01 00 00 00       	mov    $0x1,%eax
    d28f:	eb 05                	jmp    d296 <try_realloc_chunk+0xce>
    d291:	b8 00 00 00 00       	mov    $0x0,%eax
    d296:	85 c0                	test   %eax,%eax
    d298:	0f 84 ec 0c 00 00    	je     df8a <try_realloc_chunk+0xdc2>
    d29e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    d2a5:	48 8b 40 08          	mov    0x8(%rax),%rax
    d2a9:	83 e0 01             	and    $0x1,%eax
    d2ac:	48 85 c0             	test   %rax,%rax
    d2af:	0f 95 c0             	setne  %al
    d2b2:	0f b6 c0             	movzbl %al,%eax
    d2b5:	48 85 c0             	test   %rax,%rax
    d2b8:	0f 84 cc 0c 00 00    	je     df8a <try_realloc_chunk+0xdc2>
              ok_next(p, next) && ok_pinuse(next))) {
    if (is_mmapped(p)) {
    d2be:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d2c5:	48 8b 40 08          	mov    0x8(%rax),%rax
    d2c9:	83 e0 03             	and    $0x3,%eax
    d2cc:	48 85 c0             	test   %rax,%rax
    d2cf:	75 2f                	jne    d300 <try_realloc_chunk+0x138>
      newp = mmap_resize(m, p, nb, can_move);
    d2d1:	8b 8d f4 fe ff ff    	mov    -0x10c(%rbp),%ecx
    d2d7:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
    d2de:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
    d2e5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d2ec:	48 89 c7             	mov    %rax,%rdi
    d2ef:	e8 dd 94 ff ff       	callq  67d1 <mmap_resize>
    d2f4:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    if (is_mmapped(p)) {
    d2fb:	e9 8f 0c 00 00       	jmpq   df8f <try_realloc_chunk+0xdc7>
    }
    else if (oldsize >= nb) {             /* already big enough */
    d300:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    d307:	48 3b 85 f8 fe ff ff 	cmp    -0x108(%rbp),%rax
    d30e:	0f 82 55 01 00 00    	jb     d469 <try_realloc_chunk+0x2a1>
      size_t rsize = oldsize - nb;
    d314:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    d31b:	48 2b 85 f8 fe ff ff 	sub    -0x108(%rbp),%rax
    d322:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (rsize >= MIN_CHUNK_SIZE) {      /* split off remainder */
    d326:	48 83 7d f0 1f       	cmpq   $0x1f,-0x10(%rbp)
    d32b:	0f 86 25 01 00 00    	jbe    d456 <try_realloc_chunk+0x28e>
        mchunkptr r = chunk_plus_offset(p, nb);
    d331:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    d338:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d33f:	48 01 d0             	add    %rdx,%rax
    d342:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        set_inuse(m, p, nb);
    d346:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d34d:	48 8b 40 08          	mov    0x8(%rax),%rax
    d351:	83 e0 01             	and    $0x1,%eax
    d354:	48 0b 85 f8 fe ff ff 	or     -0x108(%rbp),%rax
    d35b:	48 83 c8 02          	or     $0x2,%rax
    d35f:	48 89 c2             	mov    %rax,%rdx
    d362:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d369:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d36d:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    d374:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d37b:	48 01 d0             	add    %rdx,%rax
    d37e:	48 8b 50 08          	mov    0x8(%rax),%rdx
    d382:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
    d389:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d390:	48 01 c8             	add    %rcx,%rax
    d393:	48 83 ca 01          	or     $0x1,%rdx
    d397:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d39b:	48 8b 0d fe 85 22 00 	mov    0x2285fe(%rip),%rcx        # 2359a0 <mparams>
    d3a2:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    d3a9:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
    d3b0:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d3b7:	48 01 f0             	add    %rsi,%rax
    d3ba:	48 31 ca             	xor    %rcx,%rdx
    d3bd:	48 89 10             	mov    %rdx,(%rax)
        set_inuse(m, r, rsize);
    d3c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d3c4:	48 8b 40 08          	mov    0x8(%rax),%rax
    d3c8:	83 e0 01             	and    $0x1,%eax
    d3cb:	48 0b 45 f0          	or     -0x10(%rbp),%rax
    d3cf:	48 83 c8 02          	or     $0x2,%rax
    d3d3:	48 89 c2             	mov    %rax,%rdx
    d3d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d3da:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d3de:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    d3e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d3e6:	48 01 d0             	add    %rdx,%rax
    d3e9:	48 8b 50 08          	mov    0x8(%rax),%rdx
    d3ed:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    d3f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d3f5:	48 01 c8             	add    %rcx,%rax
    d3f8:	48 83 ca 01          	or     $0x1,%rdx
    d3fc:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d400:	48 8b 0d 99 85 22 00 	mov    0x228599(%rip),%rcx        # 2359a0 <mparams>
    d407:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    d40e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    d412:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d416:	48 01 f0             	add    %rsi,%rax
    d419:	48 31 ca             	xor    %rcx,%rdx
    d41c:	48 89 10             	mov    %rdx,(%rax)
#ifdef _TLIBC_
        /* Zero recycled chunk */
        memset(chunk2mem(r), 0, rsize - overhead_for(r));
    d41f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    d423:	48 8d 50 f0          	lea    -0x10(%rax),%rdx
    d427:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    d42b:	48 83 c0 10          	add    $0x10,%rax
    d42f:	be 00 00 00 00       	mov    $0x0,%esi
    d434:	48 89 c7             	mov    %rax,%rdi
    d437:	e8 1c 14 00 00       	callq  e858 <memset>
#endif
        dispose_chunk(m, r, rsize);
    d43c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    d440:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    d444:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d44b:	48 89 ce             	mov    %rcx,%rsi
    d44e:	48 89 c7             	mov    %rax,%rdi
    d451:	e8 7f b6 ff ff       	callq  8ad5 <dispose_chunk>
      }
      newp = p;
    d456:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d45d:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    if (is_mmapped(p)) {
    d464:	e9 26 0b 00 00       	jmpq   df8f <try_realloc_chunk+0xdc7>
    }
    else if (next == m->top) {  /* extend into top */
    d469:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d470:	48 8b 40 28          	mov    0x28(%rax),%rax
    d474:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
    d47b:	0f 85 1d 01 00 00    	jne    d59e <try_realloc_chunk+0x3d6>
      if (oldsize + m->topsize > nb) {
    d481:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d488:	48 8b 50 10          	mov    0x10(%rax),%rdx
    d48c:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    d493:	48 01 d0             	add    %rdx,%rax
    d496:	48 39 85 f8 fe ff ff 	cmp    %rax,-0x108(%rbp)
    d49d:	0f 83 ec 0a 00 00    	jae    df8f <try_realloc_chunk+0xdc7>
        size_t newsize = oldsize + m->topsize;
    d4a3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d4aa:	48 8b 50 10          	mov    0x10(%rax),%rdx
    d4ae:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
    d4b5:	48 01 d0             	add    %rdx,%rax
    d4b8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        size_t newtopsize = newsize - nb;
    d4bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    d4c0:	48 2b 85 f8 fe ff ff 	sub    -0x108(%rbp),%rax
    d4c7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        mchunkptr newtop = chunk_plus_offset(p, nb);
    d4cb:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    d4d2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d4d9:	48 01 d0             	add    %rdx,%rax
    d4dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        set_inuse(m, p, nb);
    d4e0:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d4e7:	48 8b 40 08          	mov    0x8(%rax),%rax
    d4eb:	83 e0 01             	and    $0x1,%eax
    d4ee:	48 0b 85 f8 fe ff ff 	or     -0x108(%rbp),%rax
    d4f5:	48 83 c8 02          	or     $0x2,%rax
    d4f9:	48 89 c2             	mov    %rax,%rdx
    d4fc:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d503:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d507:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    d50e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d515:	48 01 d0             	add    %rdx,%rax
    d518:	48 8b 50 08          	mov    0x8(%rax),%rdx
    d51c:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
    d523:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d52a:	48 01 c8             	add    %rcx,%rax
    d52d:	48 83 ca 01          	or     $0x1,%rdx
    d531:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d535:	48 8b 0d 64 84 22 00 	mov    0x228464(%rip),%rcx        # 2359a0 <mparams>
    d53c:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    d543:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
    d54a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d551:	48 01 f0             	add    %rsi,%rax
    d554:	48 31 ca             	xor    %rcx,%rdx
    d557:	48 89 10             	mov    %rdx,(%rax)
        newtop->head = newtopsize |PINUSE_BIT;
    d55a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    d55e:	48 83 c8 01          	or     $0x1,%rax
    d562:	48 89 c2             	mov    %rax,%rdx
    d565:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    d569:	48 89 50 08          	mov    %rdx,0x8(%rax)
        m->top = newtop;
    d56d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d574:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    d578:	48 89 50 28          	mov    %rdx,0x28(%rax)
        m->topsize = newtopsize;
    d57c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d583:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    d587:	48 89 50 10          	mov    %rdx,0x10(%rax)
        newp = p;
    d58b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d592:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    if (is_mmapped(p)) {
    d599:	e9 f1 09 00 00       	jmpq   df8f <try_realloc_chunk+0xdc7>
      }
    }
    else if (next == m->dv) { /* extend into dv */
    d59e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d5a5:	48 8b 40 20          	mov    0x20(%rax),%rax
    d5a9:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
    d5b0:	0f 85 fc 01 00 00    	jne    d7b2 <try_realloc_chunk+0x5ea>
      size_t dvs = m->dvsize;
    d5b6:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d5bd:	48 8b 40 08          	mov    0x8(%rax),%rax
    d5c1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
      if (oldsize + dvs >= nb) {
    d5c5:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    d5cc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    d5d0:	48 01 d0             	add    %rdx,%rax
    d5d3:	48 39 85 f8 fe ff ff 	cmp    %rax,-0x108(%rbp)
    d5da:	0f 87 af 09 00 00    	ja     df8f <try_realloc_chunk+0xdc7>
        size_t dsize = oldsize + dvs - nb;
    d5e0:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    d5e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    d5eb:	48 01 d0             	add    %rdx,%rax
    d5ee:	48 2b 85 f8 fe ff ff 	sub    -0x108(%rbp),%rax
    d5f5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        if (dsize >= MIN_CHUNK_SIZE) {
    d5f9:	48 83 7d b8 1f       	cmpq   $0x1f,-0x48(%rbp)
    d5fe:	0f 86 fd 00 00 00    	jbe    d701 <try_realloc_chunk+0x539>
          mchunkptr r = chunk_plus_offset(p, nb);
    d604:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    d60b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d612:	48 01 d0             	add    %rdx,%rax
    d615:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
          mchunkptr n = chunk_plus_offset(r, dsize);
    d619:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    d61d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d621:	48 01 d0             	add    %rdx,%rax
    d624:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
          set_inuse(m, p, nb);
    d628:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d62f:	48 8b 40 08          	mov    0x8(%rax),%rax
    d633:	83 e0 01             	and    $0x1,%eax
    d636:	48 0b 85 f8 fe ff ff 	or     -0x108(%rbp),%rax
    d63d:	48 83 c8 02          	or     $0x2,%rax
    d641:	48 89 c2             	mov    %rax,%rdx
    d644:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d64b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d64f:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    d656:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d65d:	48 01 d0             	add    %rdx,%rax
    d660:	48 8b 50 08          	mov    0x8(%rax),%rdx
    d664:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
    d66b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d672:	48 01 c8             	add    %rcx,%rax
    d675:	48 83 ca 01          	or     $0x1,%rdx
    d679:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d67d:	48 8b 0d 1c 83 22 00 	mov    0x22831c(%rip),%rcx        # 2359a0 <mparams>
    d684:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    d68b:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
    d692:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    d699:	48 01 f0             	add    %rsi,%rax
    d69c:	48 31 ca             	xor    %rcx,%rdx
    d69f:	48 89 10             	mov    %rdx,(%rax)
          set_size_and_pinuse_of_free_chunk(r, dsize);
    d6a2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d6a6:	48 83 c8 01          	or     $0x1,%rax
    d6aa:	48 89 c2             	mov    %rax,%rdx
    d6ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    d6b1:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d6b5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    d6b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d6bd:	48 01 c2             	add    %rax,%rdx
    d6c0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    d6c4:	48 89 02             	mov    %rax,(%rdx)
          clear_pinuse(n);
    d6c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d6cb:	48 8b 40 08          	mov    0x8(%rax),%rax
    d6cf:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
    d6d3:	48 89 c2             	mov    %rax,%rdx
    d6d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    d6da:	48 89 50 08          	mov    %rdx,0x8(%rax)
          m->dvsize = dsize;
    d6de:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d6e5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    d6e9:	48 89 50 08          	mov    %rdx,0x8(%rax)
          m->dv = r;
    d6ed:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d6f4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    d6f8:	48 89 50 20          	mov    %rdx,0x20(%rax)
    d6fc:	e9 9e 00 00 00       	jmpq   d79f <try_realloc_chunk+0x5d7>
        }
        else { /* exhaust dv */
          size_t newsize = oldsize + dvs;
    d701:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    d708:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    d70c:	48 01 d0             	add    %rdx,%rax
    d70f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
          set_inuse(m, p, newsize);
    d713:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d71a:	48 8b 40 08          	mov    0x8(%rax),%rax
    d71e:	83 e0 01             	and    $0x1,%eax
    d721:	48 0b 45 c0          	or     -0x40(%rbp),%rax
    d725:	48 83 c8 02          	or     $0x2,%rax
    d729:	48 89 c2             	mov    %rax,%rdx
    d72c:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d733:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d737:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    d73e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d742:	48 01 d0             	add    %rdx,%rax
    d745:	48 8b 50 08          	mov    0x8(%rax),%rdx
    d749:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
    d750:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d754:	48 01 c8             	add    %rcx,%rax
    d757:	48 83 ca 01          	or     $0x1,%rdx
    d75b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    d75f:	48 8b 0d 3a 82 22 00 	mov    0x22823a(%rip),%rcx        # 2359a0 <mparams>
    d766:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    d76d:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
    d774:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    d778:	48 01 f0             	add    %rsi,%rax
    d77b:	48 31 ca             	xor    %rcx,%rdx
    d77e:	48 89 10             	mov    %rdx,(%rax)
          m->dvsize = 0;
    d781:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d788:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    d78f:	00 
          m->dv = 0;
    d790:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d797:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    d79e:	00 
        }
        newp = p;
    d79f:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    d7a6:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    if (is_mmapped(p)) {
    d7ad:	e9 dd 07 00 00       	jmpq   df8f <try_realloc_chunk+0xdc7>
      }
    }
    else if (!cinuse(next)) { /* extend into next free chunk */
    d7b2:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    d7b9:	48 8b 40 08          	mov    0x8(%rax),%rax
    d7bd:	83 e0 02             	and    $0x2,%eax
    d7c0:	48 85 c0             	test   %rax,%rax
    d7c3:	0f 85 c6 07 00 00    	jne    df8f <try_realloc_chunk+0xdc7>
      size_t nextsize = chunksize(next);
    d7c9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    d7d0:	48 8b 40 08          	mov    0x8(%rax),%rax
    d7d4:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    d7d8:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
      if (oldsize + nextsize >= nb) {
    d7df:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    d7e6:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    d7ed:	48 01 d0             	add    %rdx,%rax
    d7f0:	48 39 85 f8 fe ff ff 	cmp    %rax,-0x108(%rbp)
    d7f7:	0f 87 92 07 00 00    	ja     df8f <try_realloc_chunk+0xdc7>
        size_t rsize = oldsize + nextsize - nb;
    d7fd:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    d804:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    d80b:	48 01 d0             	add    %rdx,%rax
    d80e:	48 2b 85 f8 fe ff ff 	sub    -0x108(%rbp),%rax
    d815:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
        unlink_chunk(m, next, nextsize);
    d81c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    d823:	48 c1 e8 03          	shr    $0x3,%rax
    d827:	48 83 f8 1f          	cmp    $0x1f,%rax
    d82b:	0f 87 c9 01 00 00    	ja     d9fa <try_realloc_chunk+0x832>
    d831:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    d838:	48 8b 40 10          	mov    0x10(%rax),%rax
    d83c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    d840:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    d847:	48 8b 40 18          	mov    0x18(%rax),%rax
    d84b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    d84f:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    d856:	48 c1 e8 03          	shr    $0x3,%rax
    d85a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
    d860:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    d867:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
    d86b:	75 05                	jne    d872 <try_realloc_chunk+0x6aa>
    d86d:	e8 1c 27 02 00       	callq  2ff8e <abort>
    d872:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    d879:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
    d87d:	75 05                	jne    d884 <try_realloc_chunk+0x6bc>
    d87f:	e8 0a 27 02 00       	callq  2ff8e <abort>
    d884:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    d88b:	48 8b 40 08          	mov    0x8(%rax),%rax
    d88f:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    d893:	48 89 c2             	mov    %rax,%rdx
    d896:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    d89c:	c1 e0 03             	shl    $0x3,%eax
    d89f:	89 c0                	mov    %eax,%eax
    d8a1:	48 39 c2             	cmp    %rax,%rdx
    d8a4:	74 05                	je     d8ab <try_realloc_chunk+0x6e3>
    d8a6:	e8 e3 26 02 00       	callq  2ff8e <abort>
    d8ab:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    d8b1:	01 c0                	add    %eax,%eax
    d8b3:	89 c0                	mov    %eax,%eax
    d8b5:	48 83 c0 08          	add    $0x8,%rax
    d8b9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    d8c0:	00 
    d8c1:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d8c8:	48 01 d0             	add    %rdx,%rax
    d8cb:	48 83 c0 08          	add    $0x8,%rax
    d8cf:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    d8d3:	0f 94 c0             	sete   %al
    d8d6:	0f b6 c0             	movzbl %al,%eax
    d8d9:	48 85 c0             	test   %rax,%rax
    d8dc:	75 48                	jne    d926 <try_realloc_chunk+0x75e>
    d8de:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d8e5:	48 8b 40 18          	mov    0x18(%rax),%rax
    d8e9:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
    d8ed:	0f 93 c0             	setae  %al
    d8f0:	0f b6 c0             	movzbl %al,%eax
    d8f3:	48 85 c0             	test   %rax,%rax
    d8f6:	74 21                	je     d919 <try_realloc_chunk+0x751>
    d8f8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    d8fc:	48 8b 40 18          	mov    0x18(%rax),%rax
    d900:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
    d907:	0f 94 c0             	sete   %al
    d90a:	0f b6 c0             	movzbl %al,%eax
    d90d:	48 85 c0             	test   %rax,%rax
    d910:	74 07                	je     d919 <try_realloc_chunk+0x751>
    d912:	b8 01 00 00 00       	mov    $0x1,%eax
    d917:	eb 05                	jmp    d91e <try_realloc_chunk+0x756>
    d919:	b8 00 00 00 00       	mov    $0x0,%eax
    d91e:	85 c0                	test   %eax,%eax
    d920:	0f 84 cf 00 00 00    	je     d9f5 <try_realloc_chunk+0x82d>
    d926:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    d92a:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
    d92e:	75 2c                	jne    d95c <try_realloc_chunk+0x794>
    d930:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d937:	8b 10                	mov    (%rax),%edx
    d939:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    d93f:	be 01 00 00 00       	mov    $0x1,%esi
    d944:	89 c1                	mov    %eax,%ecx
    d946:	d3 e6                	shl    %cl,%esi
    d948:	89 f0                	mov    %esi,%eax
    d94a:	f7 d0                	not    %eax
    d94c:	21 c2                	and    %eax,%edx
    d94e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d955:	89 10                	mov    %edx,(%rax)
    d957:	e9 71 04 00 00       	jmpq   ddcd <try_realloc_chunk+0xc05>
    d95c:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    d962:	01 c0                	add    %eax,%eax
    d964:	89 c0                	mov    %eax,%eax
    d966:	48 83 c0 08          	add    $0x8,%rax
    d96a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    d971:	00 
    d972:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d979:	48 01 d0             	add    %rdx,%rax
    d97c:	48 83 c0 08          	add    $0x8,%rax
    d980:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    d984:	0f 94 c0             	sete   %al
    d987:	0f b6 c0             	movzbl %al,%eax
    d98a:	48 85 c0             	test   %rax,%rax
    d98d:	75 44                	jne    d9d3 <try_realloc_chunk+0x80b>
    d98f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    d996:	48 8b 40 18          	mov    0x18(%rax),%rax
    d99a:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
    d99e:	0f 93 c0             	setae  %al
    d9a1:	0f b6 c0             	movzbl %al,%eax
    d9a4:	48 85 c0             	test   %rax,%rax
    d9a7:	74 21                	je     d9ca <try_realloc_chunk+0x802>
    d9a9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    d9ad:	48 8b 40 10          	mov    0x10(%rax),%rax
    d9b1:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
    d9b8:	0f 94 c0             	sete   %al
    d9bb:	0f b6 c0             	movzbl %al,%eax
    d9be:	48 85 c0             	test   %rax,%rax
    d9c1:	74 07                	je     d9ca <try_realloc_chunk+0x802>
    d9c3:	b8 01 00 00 00       	mov    $0x1,%eax
    d9c8:	eb 05                	jmp    d9cf <try_realloc_chunk+0x807>
    d9ca:	b8 00 00 00 00       	mov    $0x0,%eax
    d9cf:	85 c0                	test   %eax,%eax
    d9d1:	74 1d                	je     d9f0 <try_realloc_chunk+0x828>
    d9d3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    d9d7:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    d9db:	48 89 50 18          	mov    %rdx,0x18(%rax)
    d9df:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    d9e3:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    d9e7:	48 89 50 10          	mov    %rdx,0x10(%rax)
    d9eb:	e9 dd 03 00 00       	jmpq   ddcd <try_realloc_chunk+0xc05>
    d9f0:	e8 99 25 02 00       	callq  2ff8e <abort>
    d9f5:	e8 94 25 02 00       	callq  2ff8e <abort>
    d9fa:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    da01:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    da08:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    da0f:	48 8b 40 30          	mov    0x30(%rax),%rax
    da13:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    da1a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    da21:	48 8b 40 18          	mov    0x18(%rax),%rax
    da25:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    da2c:	0f 84 b9 00 00 00    	je     daeb <try_realloc_chunk+0x923>
    da32:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    da39:	48 8b 40 10          	mov    0x10(%rax),%rax
    da3d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    da44:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    da4b:	48 8b 40 18          	mov    0x18(%rax),%rax
    da4f:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    da56:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    da5d:	48 8b 40 18          	mov    0x18(%rax),%rax
    da61:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
    da68:	0f 93 c0             	setae  %al
    da6b:	0f b6 c0             	movzbl %al,%eax
    da6e:	48 85 c0             	test   %rax,%rax
    da71:	74 24                	je     da97 <try_realloc_chunk+0x8cf>
    da73:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    da7a:	48 8b 40 18          	mov    0x18(%rax),%rax
    da7e:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    da85:	0f 94 c0             	sete   %al
    da88:	0f b6 c0             	movzbl %al,%eax
    da8b:	48 85 c0             	test   %rax,%rax
    da8e:	74 07                	je     da97 <try_realloc_chunk+0x8cf>
    da90:	b8 01 00 00 00       	mov    $0x1,%eax
    da95:	eb 05                	jmp    da9c <try_realloc_chunk+0x8d4>
    da97:	b8 00 00 00 00       	mov    $0x0,%eax
    da9c:	85 c0                	test   %eax,%eax
    da9e:	74 46                	je     dae6 <try_realloc_chunk+0x91e>
    daa0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    daa7:	48 8b 40 10          	mov    0x10(%rax),%rax
    daab:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    dab2:	0f 94 c0             	sete   %al
    dab5:	0f b6 c0             	movzbl %al,%eax
    dab8:	48 85 c0             	test   %rax,%rax
    dabb:	74 29                	je     dae6 <try_realloc_chunk+0x91e>
    dabd:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    dac4:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    dacb:	48 89 50 18          	mov    %rdx,0x18(%rax)
    dacf:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    dad6:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
    dadd:	48 89 50 10          	mov    %rdx,0x10(%rax)
    dae1:	e9 f8 00 00 00       	jmpq   dbde <try_realloc_chunk+0xa16>
    dae6:	e8 a3 24 02 00       	callq  2ff8e <abort>
    daeb:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    daf2:	48 83 c0 28          	add    $0x28,%rax
    daf6:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    dafd:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    db04:	48 8b 00             	mov    (%rax),%rax
    db07:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    db0e:	48 83 bd 28 ff ff ff 	cmpq   $0x0,-0xd8(%rbp)
    db15:	00 
    db16:	75 52                	jne    db6a <try_realloc_chunk+0x9a2>
    db18:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    db1f:	48 83 c0 20          	add    $0x20,%rax
    db23:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    db2a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    db31:	48 8b 00             	mov    (%rax),%rax
    db34:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    db3b:	48 83 bd 28 ff ff ff 	cmpq   $0x0,-0xd8(%rbp)
    db42:	00 
    db43:	0f 84 95 00 00 00    	je     dbde <try_realloc_chunk+0xa16>
    db49:	eb 1f                	jmp    db6a <try_realloc_chunk+0x9a2>
    db4b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    db52:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    db59:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    db60:	48 8b 00             	mov    (%rax),%rax
    db63:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    db6a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    db71:	48 83 c0 28          	add    $0x28,%rax
    db75:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    db7c:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    db83:	48 8b 00             	mov    (%rax),%rax
    db86:	48 85 c0             	test   %rax,%rax
    db89:	75 c0                	jne    db4b <try_realloc_chunk+0x983>
    db8b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    db92:	48 83 c0 20          	add    $0x20,%rax
    db96:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    db9d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    dba4:	48 8b 00             	mov    (%rax),%rax
    dba7:	48 85 c0             	test   %rax,%rax
    dbaa:	75 9f                	jne    db4b <try_realloc_chunk+0x983>
    dbac:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    dbb3:	48 8b 40 18          	mov    0x18(%rax),%rax
    dbb7:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
    dbbe:	0f 93 c0             	setae  %al
    dbc1:	0f b6 c0             	movzbl %al,%eax
    dbc4:	48 85 c0             	test   %rax,%rax
    dbc7:	74 10                	je     dbd9 <try_realloc_chunk+0xa11>
    dbc9:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    dbd0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    dbd7:	eb 05                	jmp    dbde <try_realloc_chunk+0xa16>
    dbd9:	e8 b0 23 02 00       	callq  2ff8e <abort>
    dbde:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
    dbe5:	00 
    dbe6:	0f 84 e1 01 00 00    	je     ddcd <try_realloc_chunk+0xc05>
    dbec:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    dbf3:	8b 40 38             	mov    0x38(%rax),%eax
    dbf6:	89 c0                	mov    %eax,%eax
    dbf8:	48 83 c0 4a          	add    $0x4a,%rax
    dbfc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    dc03:	00 
    dc04:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    dc0b:	48 01 d0             	add    %rdx,%rax
    dc0e:	48 83 c0 08          	add    $0x8,%rax
    dc12:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    dc19:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    dc20:	48 8b 00             	mov    (%rax),%rax
    dc23:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    dc2a:	75 53                	jne    dc7f <try_realloc_chunk+0xab7>
    dc2c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    dc33:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    dc3a:	48 89 10             	mov    %rdx,(%rax)
    dc3d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    dc44:	48 8b 00             	mov    (%rax),%rax
    dc47:	48 85 c0             	test   %rax,%rax
    dc4a:	0f 85 8d 00 00 00    	jne    dcdd <try_realloc_chunk+0xb15>
    dc50:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    dc57:	8b 50 04             	mov    0x4(%rax),%edx
    dc5a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    dc61:	8b 40 38             	mov    0x38(%rax),%eax
    dc64:	be 01 00 00 00       	mov    $0x1,%esi
    dc69:	89 c1                	mov    %eax,%ecx
    dc6b:	d3 e6                	shl    %cl,%esi
    dc6d:	89 f0                	mov    %esi,%eax
    dc6f:	f7 d0                	not    %eax
    dc71:	21 c2                	and    %eax,%edx
    dc73:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    dc7a:	89 50 04             	mov    %edx,0x4(%rax)
    dc7d:	eb 5e                	jmp    dcdd <try_realloc_chunk+0xb15>
    dc7f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    dc86:	48 8b 40 18          	mov    0x18(%rax),%rax
    dc8a:	48 39 85 68 ff ff ff 	cmp    %rax,-0x98(%rbp)
    dc91:	0f 93 c0             	setae  %al
    dc94:	0f b6 c0             	movzbl %al,%eax
    dc97:	48 85 c0             	test   %rax,%rax
    dc9a:	74 3c                	je     dcd8 <try_realloc_chunk+0xb10>
    dc9c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    dca3:	48 8b 40 20          	mov    0x20(%rax),%rax
    dca7:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
    dcae:	75 14                	jne    dcc4 <try_realloc_chunk+0xafc>
    dcb0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    dcb7:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    dcbe:	48 89 50 20          	mov    %rdx,0x20(%rax)
    dcc2:	eb 19                	jmp    dcdd <try_realloc_chunk+0xb15>
    dcc4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    dccb:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    dcd2:	48 89 50 28          	mov    %rdx,0x28(%rax)
    dcd6:	eb 05                	jmp    dcdd <try_realloc_chunk+0xb15>
    dcd8:	e8 b1 22 02 00       	callq  2ff8e <abort>
    dcdd:	48 83 bd 28 ff ff ff 	cmpq   $0x0,-0xd8(%rbp)
    dce4:	00 
    dce5:	0f 84 e2 00 00 00    	je     ddcd <try_realloc_chunk+0xc05>
    dceb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    dcf2:	48 8b 40 18          	mov    0x18(%rax),%rax
    dcf6:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
    dcfd:	0f 93 c0             	setae  %al
    dd00:	0f b6 c0             	movzbl %al,%eax
    dd03:	48 85 c0             	test   %rax,%rax
    dd06:	0f 84 bc 00 00 00    	je     ddc8 <try_realloc_chunk+0xc00>
    dd0c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    dd13:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
    dd1a:	48 89 50 30          	mov    %rdx,0x30(%rax)
    dd1e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    dd25:	48 8b 40 20          	mov    0x20(%rax),%rax
    dd29:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    dd2d:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
    dd32:	74 3f                	je     dd73 <try_realloc_chunk+0xbab>
    dd34:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    dd3b:	48 8b 40 18          	mov    0x18(%rax),%rax
    dd3f:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
    dd43:	0f 93 c0             	setae  %al
    dd46:	0f b6 c0             	movzbl %al,%eax
    dd49:	48 85 c0             	test   %rax,%rax
    dd4c:	74 20                	je     dd6e <try_realloc_chunk+0xba6>
    dd4e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    dd55:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    dd59:	48 89 50 20          	mov    %rdx,0x20(%rax)
    dd5d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    dd61:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    dd68:	48 89 50 30          	mov    %rdx,0x30(%rax)
    dd6c:	eb 05                	jmp    dd73 <try_realloc_chunk+0xbab>
    dd6e:	e8 1b 22 02 00       	callq  2ff8e <abort>
    dd73:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    dd7a:	48 8b 40 28          	mov    0x28(%rax),%rax
    dd7e:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    dd82:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    dd87:	74 44                	je     ddcd <try_realloc_chunk+0xc05>
    dd89:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    dd90:	48 8b 40 18          	mov    0x18(%rax),%rax
    dd94:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
    dd98:	0f 93 c0             	setae  %al
    dd9b:	0f b6 c0             	movzbl %al,%eax
    dd9e:	48 85 c0             	test   %rax,%rax
    dda1:	74 20                	je     ddc3 <try_realloc_chunk+0xbfb>
    dda3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    ddaa:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    ddae:	48 89 50 28          	mov    %rdx,0x28(%rax)
    ddb2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    ddb6:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    ddbd:	48 89 50 30          	mov    %rdx,0x30(%rax)
    ddc1:	eb 0a                	jmp    ddcd <try_realloc_chunk+0xc05>
    ddc3:	e8 c6 21 02 00       	callq  2ff8e <abort>
    ddc8:	e8 c1 21 02 00       	callq  2ff8e <abort>
        if (rsize < MIN_CHUNK_SIZE) {
    ddcd:	48 83 bd 58 ff ff ff 	cmpq   $0x1f,-0xa8(%rbp)
    ddd4:	1f 
    ddd5:	0f 87 88 00 00 00    	ja     de63 <try_realloc_chunk+0xc9b>
          size_t newsize = oldsize + nextsize;
    dddb:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
    dde2:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    dde9:	48 01 d0             	add    %rdx,%rax
    ddec:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
          set_inuse(m, p, newsize);
    ddf0:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    ddf7:	48 8b 40 08          	mov    0x8(%rax),%rax
    ddfb:	83 e0 01             	and    $0x1,%eax
    ddfe:	48 0b 45 a8          	or     -0x58(%rbp),%rax
    de02:	48 83 c8 02          	or     $0x2,%rax
    de06:	48 89 c2             	mov    %rax,%rdx
    de09:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    de10:	48 89 50 08          	mov    %rdx,0x8(%rax)
    de14:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    de1b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    de1f:	48 01 d0             	add    %rdx,%rax
    de22:	48 8b 50 08          	mov    0x8(%rax),%rdx
    de26:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
    de2d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    de31:	48 01 c8             	add    %rcx,%rax
    de34:	48 83 ca 01          	or     $0x1,%rdx
    de38:	48 89 50 08          	mov    %rdx,0x8(%rax)
    de3c:	48 8b 0d 5d 7b 22 00 	mov    0x227b5d(%rip),%rcx        # 2359a0 <mparams>
    de43:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    de4a:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
    de51:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    de55:	48 01 f0             	add    %rsi,%rax
    de58:	48 31 ca             	xor    %rcx,%rdx
    de5b:	48 89 10             	mov    %rdx,(%rax)
    de5e:	e9 17 01 00 00       	jmpq   df7a <try_realloc_chunk+0xdb2>
        }
        else {
          mchunkptr r = chunk_plus_offset(p, nb);
    de63:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    de6a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    de71:	48 01 d0             	add    %rdx,%rax
    de74:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
          set_inuse(m, p, nb);
    de78:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    de7f:	48 8b 40 08          	mov    0x8(%rax),%rax
    de83:	83 e0 01             	and    $0x1,%eax
    de86:	48 0b 85 f8 fe ff ff 	or     -0x108(%rbp),%rax
    de8d:	48 83 c8 02          	or     $0x2,%rax
    de91:	48 89 c2             	mov    %rax,%rdx
    de94:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    de9b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    de9f:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
    dea6:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    dead:	48 01 d0             	add    %rdx,%rax
    deb0:	48 8b 50 08          	mov    0x8(%rax),%rdx
    deb4:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
    debb:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    dec2:	48 01 c8             	add    %rcx,%rax
    dec5:	48 83 ca 01          	or     $0x1,%rdx
    dec9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    decd:	48 8b 0d cc 7a 22 00 	mov    0x227acc(%rip),%rcx        # 2359a0 <mparams>
    ded4:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    dedb:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
    dee2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    dee9:	48 01 f0             	add    %rsi,%rax
    deec:	48 31 ca             	xor    %rcx,%rdx
    deef:	48 89 10             	mov    %rdx,(%rax)
          set_inuse(m, r, rsize);
    def2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    def6:	48 8b 40 08          	mov    0x8(%rax),%rax
    defa:	83 e0 01             	and    $0x1,%eax
    defd:	48 0b 85 58 ff ff ff 	or     -0xa8(%rbp),%rax
    df04:	48 83 c8 02          	or     $0x2,%rax
    df08:	48 89 c2             	mov    %rax,%rdx
    df0b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    df0f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    df13:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
    df17:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    df1e:	48 01 d0             	add    %rdx,%rax
    df21:	48 8b 50 08          	mov    0x8(%rax),%rdx
    df25:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    df29:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    df30:	48 01 c8             	add    %rcx,%rax
    df33:	48 83 ca 01          	or     $0x1,%rdx
    df37:	48 89 50 08          	mov    %rdx,0x8(%rax)
    df3b:	48 8b 0d 5e 7a 22 00 	mov    0x227a5e(%rip),%rcx        # 2359a0 <mparams>
    df42:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
    df49:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    df4d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    df54:	48 01 f0             	add    %rsi,%rax
    df57:	48 31 ca             	xor    %rcx,%rdx
    df5a:	48 89 10             	mov    %rdx,(%rax)
          dispose_chunk(m, r, rsize);
    df5d:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
    df64:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    df68:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
    df6f:	48 89 ce             	mov    %rcx,%rsi
    df72:	48 89 c7             	mov    %rax,%rdi
    df75:	e8 5b ab ff ff       	callq  8ad5 <dispose_chunk>
        }
        newp = p;
    df7a:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
    df81:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    if (is_mmapped(p)) {
    df88:	eb 05                	jmp    df8f <try_realloc_chunk+0xdc7>
      }
    }
  }
  else {
    USAGE_ERROR_ACTION(m, chunk2mem(p));
    df8a:	e8 ff 1f 02 00       	callq  2ff8e <abort>
    if (is_mmapped(p)) {
    df8f:	90                   	nop
  }
  return newp;
    df90:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
}
    df97:	c9                   	leaveq 
    df98:	c3                   	retq   

000000000000df99 <internal_memalign>:

static void* internal_memalign(mstate m, size_t alignment, size_t bytes) {
    df99:	55                   	push   %rbp
    df9a:	48 89 e5             	mov    %rsp,%rbp
    df9d:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    dfa4:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    dfa8:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    dfac:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  void* mem = 0;
    dfb3:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
    dfba:	00 
  if (alignment <  MIN_CHUNK_SIZE) /* must be at least a minimum chunk size */
    dfbb:	48 83 7d 80 1f       	cmpq   $0x1f,-0x80(%rbp)
    dfc0:	77 08                	ja     dfca <internal_memalign+0x31>
    alignment = MIN_CHUNK_SIZE;
    dfc2:	48 c7 45 80 20 00 00 	movq   $0x20,-0x80(%rbp)
    dfc9:	00 
  if ((alignment & (alignment-SIZE_T_ONE)) != 0) {/* Ensure a power of 2 */
    dfca:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    dfce:	48 83 e8 01          	sub    $0x1,%rax
    dfd2:	48 23 45 80          	and    -0x80(%rbp),%rax
    dfd6:	48 85 c0             	test   %rax,%rax
    dfd9:	74 20                	je     dffb <internal_memalign+0x62>
    size_t a = MALLOC_ALIGNMENT << 1;
    dfdb:	48 c7 45 a0 10 00 00 	movq   $0x10,-0x60(%rbp)
    dfe2:	00 
    while (a < alignment) a <<= 1;
    dfe3:	eb 04                	jmp    dfe9 <internal_memalign+0x50>
    dfe5:	48 d1 65 a0          	shlq   -0x60(%rbp)
    dfe9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    dfed:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
    dff1:	72 f2                	jb     dfe5 <internal_memalign+0x4c>
    alignment = a;
    dff3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    dff7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  }
  if (bytes >= MAX_REQUEST - alignment) {
    dffb:	48 c7 c0 80 ff ff ff 	mov    $0xffffffffffffff80,%rax
    e002:	48 2b 45 80          	sub    -0x80(%rbp),%rax
    e006:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
    e00d:	72 1b                	jb     e02a <internal_memalign+0x91>
    if (m != 0)  { /* Test isn't needed but avoids compiler warning */
    e00f:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
    e014:	0f 84 e6 03 00 00    	je     e400 <internal_memalign+0x467>
      MALLOC_FAILURE_ACTION;
    e01a:	e8 a1 16 01 00       	callq  1f6c0 <__errno>
    e01f:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
    e025:	e9 d6 03 00 00       	jmpq   e400 <internal_memalign+0x467>
    }
  }
  else {
    size_t nb = request2size(bytes);
    e02a:	48 83 bd 78 ff ff ff 	cmpq   $0xe,-0x88(%rbp)
    e031:	0e 
    e032:	76 11                	jbe    e045 <internal_memalign+0xac>
    e034:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    e03b:	48 83 c0 17          	add    $0x17,%rax
    e03f:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    e043:	eb 05                	jmp    e04a <internal_memalign+0xb1>
    e045:	b8 20 00 00 00       	mov    $0x20,%eax
    e04a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    size_t req = nb + alignment + MIN_CHUNK_SIZE - CHUNK_OVERHEAD;
    e04e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
    e052:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    e056:	48 01 d0             	add    %rdx,%rax
    e059:	48 83 c0 10          	add    $0x10,%rax
    e05d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    mem = internal_malloc(m, req);
    e061:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    e065:	48 89 c7             	mov    %rax,%rdi
    e068:	e8 b8 d0 ff ff       	callq  b125 <dlmalloc>
    e06d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    if (mem != 0) {
    e071:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
    e076:	0f 84 84 03 00 00    	je     e400 <internal_memalign+0x467>
      mchunkptr p = mem2chunk(mem);
    e07c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    e080:	48 83 e8 10          	sub    $0x10,%rax
    e084:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
      if (PREACTION(m))
    e088:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e08c:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    e092:	83 e0 02             	and    $0x2,%eax
    e095:	85 c0                	test   %eax,%eax
    e097:	74 36                	je     e0cf <internal_memalign+0x136>
    e099:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e09d:	48 8d 90 74 03 00 00 	lea    0x374(%rax),%rdx
    e0a4:	b8 01 00 00 00       	mov    $0x1,%eax
    e0a9:	87 02                	xchg   %eax,(%rdx)
    e0ab:	85 c0                	test   %eax,%eax
    e0ad:	74 20                	je     e0cf <internal_memalign+0x136>
    e0af:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e0b3:	48 05 74 03 00 00    	add    $0x374,%rax
    e0b9:	48 89 c7             	mov    %rax,%rdi
    e0bc:	e8 26 6f ff ff       	callq  4fe7 <spin_acquire_lock>
    e0c1:	85 c0                	test   %eax,%eax
    e0c3:	74 0a                	je     e0cf <internal_memalign+0x136>
        return 0;
    e0c5:	b8 00 00 00 00       	mov    $0x0,%eax
    e0ca:	e9 35 03 00 00       	jmpq   e404 <internal_memalign+0x46b>
      if ((((size_t)(mem)) & (alignment - 1)) != 0) { /* misaligned */
    e0cf:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    e0d3:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    e0d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    e0db:	48 21 d0             	and    %rdx,%rax
    e0de:	48 85 c0             	test   %rax,%rax
    e0e1:	0f 84 88 01 00 00    	je     e26f <internal_memalign+0x2d6>
          the first calculation places us at a spot with less than
          MIN_CHUNK_SIZE leader, we can move to the next aligned spot.
          We've allocated enough total room so that this is always
          possible.
        */
        char* br = (char*)mem2chunk((size_t)(((size_t)((char*)mem + alignment -
    e0e7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    e0eb:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    e0ef:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    e0f3:	48 01 d0             	add    %rdx,%rax
    e0f6:	48 89 c2             	mov    %rax,%rdx
    e0f9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    e0fd:	48 f7 d8             	neg    %rax
    e100:	48 21 d0             	and    %rdx,%rax
    e103:	48 83 e8 10          	sub    $0x10,%rax
    e107:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
                                                       SIZE_T_ONE)) &
                                             -alignment));
        char* pos = ((size_t)(br - (char*)(p)) >= MIN_CHUNK_SIZE)?
    e10b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    e10f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e113:	48 29 c2             	sub    %rax,%rdx
    e116:	48 89 d0             	mov    %rdx,%rax
          br : br+alignment;
    e119:	48 83 f8 1f          	cmp    $0x1f,%rax
    e11d:	77 0d                	ja     e12c <internal_memalign+0x193>
    e11f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    e123:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    e127:	48 01 d0             	add    %rdx,%rax
    e12a:	eb 04                	jmp    e130 <internal_memalign+0x197>
    e12c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
        char* pos = ((size_t)(br - (char*)(p)) >= MIN_CHUNK_SIZE)?
    e130:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        mchunkptr newp = (mchunkptr)pos;
    e134:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e138:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        size_t leadsize = pos - (char*)(p);
    e13c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    e140:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e144:	48 29 c2             	sub    %rax,%rdx
    e147:	48 89 d0             	mov    %rdx,%rax
    e14a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        size_t newsize = chunksize(p) - leadsize;
    e14e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e152:	48 8b 40 08          	mov    0x8(%rax),%rax
    e156:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    e15a:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
    e15e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

        if (is_mmapped(p)) { /* For mmapped chunks, just adjust offset */
    e162:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e166:	48 8b 40 08          	mov    0x8(%rax),%rax
    e16a:	83 e0 03             	and    $0x3,%eax
    e16d:	48 85 c0             	test   %rax,%rax
    e170:	75 26                	jne    e198 <internal_memalign+0x1ff>
          newp->prev_foot = p->prev_foot + leadsize;
    e172:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e176:	48 8b 10             	mov    (%rax),%rdx
    e179:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e17d:	48 01 c2             	add    %rax,%rdx
    e180:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    e184:	48 89 10             	mov    %rdx,(%rax)
          newp->head = newsize;
    e187:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    e18b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    e18f:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e193:	e9 cf 00 00 00       	jmpq   e267 <internal_memalign+0x2ce>
        }
        else { /* Otherwise, give back leader, use the rest */
          set_inuse(m, newp, newsize);
    e198:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    e19c:	48 8b 40 08          	mov    0x8(%rax),%rax
    e1a0:	83 e0 01             	and    $0x1,%eax
    e1a3:	48 0b 45 e0          	or     -0x20(%rbp),%rax
    e1a7:	48 83 c8 02          	or     $0x2,%rax
    e1ab:	48 89 c2             	mov    %rax,%rdx
    e1ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    e1b2:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e1b6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    e1ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e1be:	48 01 d0             	add    %rdx,%rax
    e1c1:	48 8b 50 08          	mov    0x8(%rax),%rdx
    e1c5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    e1c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e1cd:	48 01 c8             	add    %rcx,%rax
    e1d0:	48 83 ca 01          	or     $0x1,%rdx
    e1d4:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e1d8:	48 8b 0d c1 77 22 00 	mov    0x2277c1(%rip),%rcx        # 2359a0 <mparams>
    e1df:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    e1e3:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    e1e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e1eb:	48 01 f0             	add    %rsi,%rax
    e1ee:	48 31 ca             	xor    %rcx,%rdx
    e1f1:	48 89 10             	mov    %rdx,(%rax)
          set_inuse(m, p, leadsize);
    e1f4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e1f8:	48 8b 40 08          	mov    0x8(%rax),%rax
    e1fc:	83 e0 01             	and    $0x1,%eax
    e1ff:	48 0b 45 d8          	or     -0x28(%rbp),%rax
    e203:	48 83 c8 02          	or     $0x2,%rax
    e207:	48 89 c2             	mov    %rax,%rdx
    e20a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e20e:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e212:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    e216:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e21a:	48 01 d0             	add    %rdx,%rax
    e21d:	48 8b 50 08          	mov    0x8(%rax),%rdx
    e221:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    e225:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e229:	48 01 c8             	add    %rcx,%rax
    e22c:	48 83 ca 01          	or     $0x1,%rdx
    e230:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e234:	48 8b 0d 65 77 22 00 	mov    0x227765(%rip),%rcx        # 2359a0 <mparams>
    e23b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    e23f:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    e243:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e247:	48 01 f0             	add    %rsi,%rax
    e24a:	48 31 ca             	xor    %rcx,%rdx
    e24d:	48 89 10             	mov    %rdx,(%rax)
          dispose_chunk(m, p, leadsize);
    e250:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e254:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    e258:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e25c:	48 89 ce             	mov    %rcx,%rsi
    e25f:	48 89 c7             	mov    %rax,%rdi
    e262:	e8 6e a8 ff ff       	callq  8ad5 <dispose_chunk>
        }
        p = newp;
    e267:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    e26b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
      }

      /* Give back spare room at the end */
      if (!is_mmapped(p)) {
    e26f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e273:	48 8b 40 08          	mov    0x8(%rax),%rax
    e277:	83 e0 03             	and    $0x3,%eax
    e27a:	48 85 c0             	test   %rax,%rax
    e27d:	0f 84 0c 01 00 00    	je     e38f <internal_memalign+0x3f6>
        size_t size = chunksize(p);
    e283:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e287:	48 8b 40 08          	mov    0x8(%rax),%rax
    e28b:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    e28f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        if (size > nb + MIN_CHUNK_SIZE) {
    e293:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e297:	48 83 c0 20          	add    $0x20,%rax
    e29b:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    e29f:	0f 86 ea 00 00 00    	jbe    e38f <internal_memalign+0x3f6>
          size_t remainder_size = size - nb;
    e2a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e2a9:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
    e2ad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
          mchunkptr remainder = chunk_plus_offset(p, nb);
    e2b1:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    e2b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e2b9:	48 01 d0             	add    %rdx,%rax
    e2bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
          set_inuse(m, p, nb);
    e2c0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e2c4:	48 8b 40 08          	mov    0x8(%rax),%rax
    e2c8:	83 e0 01             	and    $0x1,%eax
    e2cb:	48 0b 45 b0          	or     -0x50(%rbp),%rax
    e2cf:	48 83 c8 02          	or     $0x2,%rax
    e2d3:	48 89 c2             	mov    %rax,%rdx
    e2d6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e2da:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e2de:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    e2e2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e2e6:	48 01 d0             	add    %rdx,%rax
    e2e9:	48 8b 50 08          	mov    0x8(%rax),%rdx
    e2ed:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
    e2f1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e2f5:	48 01 c8             	add    %rcx,%rax
    e2f8:	48 83 ca 01          	or     $0x1,%rdx
    e2fc:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e300:	48 8b 0d 99 76 22 00 	mov    0x227699(%rip),%rcx        # 2359a0 <mparams>
    e307:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    e30b:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
    e30f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    e313:	48 01 f0             	add    %rsi,%rax
    e316:	48 31 ca             	xor    %rcx,%rdx
    e319:	48 89 10             	mov    %rdx,(%rax)
          set_inuse(m, remainder, remainder_size);
    e31c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e320:	48 8b 40 08          	mov    0x8(%rax),%rax
    e324:	83 e0 01             	and    $0x1,%eax
    e327:	48 0b 45 f0          	or     -0x10(%rbp),%rax
    e32b:	48 83 c8 02          	or     $0x2,%rax
    e32f:	48 89 c2             	mov    %rax,%rdx
    e332:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e336:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e33a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e33e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e342:	48 01 d0             	add    %rdx,%rax
    e345:	48 8b 50 08          	mov    0x8(%rax),%rdx
    e349:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    e34d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e351:	48 01 c8             	add    %rcx,%rax
    e354:	48 83 ca 01          	or     $0x1,%rdx
    e358:	48 89 50 08          	mov    %rdx,0x8(%rax)
    e35c:	48 8b 0d 3d 76 22 00 	mov    0x22763d(%rip),%rcx        # 2359a0 <mparams>
    e363:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
    e367:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    e36b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e36f:	48 01 f0             	add    %rsi,%rax
    e372:	48 31 ca             	xor    %rcx,%rdx
    e375:	48 89 10             	mov    %rdx,(%rax)
          dispose_chunk(m, remainder, remainder_size);
    e378:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e37c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    e380:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e384:	48 89 ce             	mov    %rcx,%rsi
    e387:	48 89 c7             	mov    %rax,%rdi
    e38a:	e8 46 a7 ff ff       	callq  8ad5 <dispose_chunk>
        }
      }

      mem = chunk2mem(p);
    e38f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e393:	48 83 c0 10          	add    $0x10,%rax
    e397:	48 89 45 98          	mov    %rax,-0x68(%rbp)
      assert (chunksize(p) >= nb);
    e39b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    e39f:	48 8b 40 08          	mov    0x8(%rax),%rax
    e3a3:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    e3a7:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
    e3ab:	76 05                	jbe    e3b2 <internal_memalign+0x419>
    e3ad:	e8 dc 1b 02 00       	callq  2ff8e <abort>
      assert(((size_t)mem & (alignment - 1)) == 0);
    e3b2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    e3b6:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    e3ba:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    e3be:	48 21 d0             	and    %rdx,%rax
    e3c1:	48 85 c0             	test   %rax,%rax
    e3c4:	74 05                	je     e3cb <internal_memalign+0x432>
    e3c6:	e8 c3 1b 02 00       	callq  2ff8e <abort>
      check_inuse_chunk(m, p);
    e3cb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    e3cf:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e3d3:	48 89 d6             	mov    %rdx,%rsi
    e3d6:	48 89 c7             	mov    %rax,%rdi
    e3d9:	e8 79 70 ff ff       	callq  5457 <do_check_inuse_chunk>
      POSTACTION(m);
    e3de:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e3e2:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    e3e8:	83 e0 02             	and    $0x2,%eax
    e3eb:	85 c0                	test   %eax,%eax
    e3ed:	74 11                	je     e400 <internal_memalign+0x467>
    e3ef:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    e3f3:	48 05 74 03 00 00    	add    $0x374,%rax
    e3f9:	ba 00 00 00 00       	mov    $0x0,%edx
    e3fe:	89 10                	mov    %edx,(%rax)
    }
  }
  return mem;
    e400:	48 8b 45 98          	mov    -0x68(%rbp),%rax
}
    e404:	c9                   	leaveq 
    e405:	c3                   	retq   

000000000000e406 <dlrealloc>:

/* ------------------ Exported realloc, memalign, etc -------------------- */

#if !ONLY_MSPACES

void* dlrealloc(void* oldmem, size_t bytes) {
    e406:	55                   	push   %rbp
    e407:	48 89 e5             	mov    %rsp,%rbp
    e40a:	48 83 ec 40          	sub    $0x40,%rsp
    e40e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    e412:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  void* mem = 0;
    e416:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
    e41d:	00 
  if (oldmem == 0) {
    e41e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    e423:	75 15                	jne    e43a <dlrealloc+0x34>
    mem = dlmalloc(bytes);
    e425:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    e429:	48 89 c7             	mov    %rax,%rdi
    e42c:	e8 f4 cc ff ff       	callq  b125 <dlmalloc>
    e431:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    e435:	e9 b3 01 00 00       	jmpq   e5ed <dlrealloc+0x1e7>
  }
  else if (bytes >= MAX_REQUEST) {
    e43a:	48 81 7d c0 7f ff ff 	cmpq   $0xffffffffffffff7f,-0x40(%rbp)
    e441:	ff 
    e442:	76 10                	jbe    e454 <dlrealloc+0x4e>
    MALLOC_FAILURE_ACTION;
    e444:	e8 77 12 01 00       	callq  1f6c0 <__errno>
    e449:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
    e44f:	e9 99 01 00 00       	jmpq   e5ed <dlrealloc+0x1e7>
  }
#ifdef REALLOC_ZERO_BYTES_FREES
  else if (bytes == 0) {
    e454:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    e459:	75 11                	jne    e46c <dlrealloc+0x66>
    dlfree(oldmem);
    e45b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e45f:	48 89 c7             	mov    %rax,%rdi
    e462:	e8 b5 d7 ff ff       	callq  bc1c <dlfree>
    e467:	e9 81 01 00 00       	jmpq   e5ed <dlrealloc+0x1e7>
  }
#endif /* REALLOC_ZERO_BYTES_FREES */
  else {
    size_t nb = request2size(bytes);
    e46c:	48 83 7d c0 0e       	cmpq   $0xe,-0x40(%rbp)
    e471:	76 0e                	jbe    e481 <dlrealloc+0x7b>
    e473:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    e477:	48 83 c0 17          	add    $0x17,%rax
    e47b:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    e47f:	eb 05                	jmp    e486 <dlrealloc+0x80>
    e481:	b8 20 00 00 00       	mov    $0x20,%eax
    e486:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    mchunkptr oldp = mem2chunk(oldmem);
    e48a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e48e:	48 83 e8 10          	sub    $0x10,%rax
    e492:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if ! FOOTERS
    mstate m = gm;
#else /* FOOTERS */
    mstate m = get_mstate_for(oldp);
    e496:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e49a:	48 8b 40 08          	mov    0x8(%rax),%rax
    e49e:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    e4a2:	48 89 c2             	mov    %rax,%rdx
    e4a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e4a9:	48 01 d0             	add    %rdx,%rax
    e4ac:	48 8b 10             	mov    (%rax),%rdx
    e4af:	48 8b 05 ea 74 22 00 	mov    0x2274ea(%rip),%rax        # 2359a0 <mparams>
    e4b6:	48 31 d0             	xor    %rdx,%rax
    e4b9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (!ok_magic(m)) {
    e4bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e4c1:	48 8b 50 40          	mov    0x40(%rax),%rdx
    e4c5:	48 8b 05 d4 74 22 00 	mov    0x2274d4(%rip),%rax        # 2359a0 <mparams>
    e4cc:	48 39 c2             	cmp    %rax,%rdx
    e4cf:	74 05                	je     e4d6 <dlrealloc+0xd0>
      USAGE_ERROR_ACTION(m, oldmem);
    e4d1:	e8 b8 1a 02 00       	callq  2ff8e <abort>
      return 0;
    }
#endif /* FOOTERS */
    if (!PREACTION(m)) {
    e4d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e4da:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    e4e0:	83 e0 02             	and    $0x2,%eax
    e4e3:	85 c0                	test   %eax,%eax
    e4e5:	74 30                	je     e517 <dlrealloc+0x111>
    e4e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e4eb:	48 8d 90 74 03 00 00 	lea    0x374(%rax),%rdx
    e4f2:	b8 01 00 00 00       	mov    $0x1,%eax
    e4f7:	87 02                	xchg   %eax,(%rdx)
    e4f9:	85 c0                	test   %eax,%eax
    e4fb:	74 1a                	je     e517 <dlrealloc+0x111>
    e4fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e501:	48 05 74 03 00 00    	add    $0x374,%rax
    e507:	48 89 c7             	mov    %rax,%rdi
    e50a:	e8 d8 6a ff ff       	callq  4fe7 <spin_acquire_lock>
    e50f:	85 c0                	test   %eax,%eax
    e511:	0f 85 d6 00 00 00    	jne    e5ed <dlrealloc+0x1e7>
      mchunkptr newp = try_realloc_chunk(m, oldp, nb, 1);
    e517:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    e51b:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    e51f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e523:	b9 01 00 00 00       	mov    $0x1,%ecx
    e528:	48 89 c7             	mov    %rax,%rdi
    e52b:	e8 98 ec ff ff       	callq  d1c8 <try_realloc_chunk>
    e530:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      POSTACTION(m);
    e534:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e538:	8b 80 70 03 00 00    	mov    0x370(%rax),%eax
    e53e:	83 e0 02             	and    $0x2,%eax
    e541:	85 c0                	test   %eax,%eax
    e543:	74 11                	je     e556 <dlrealloc+0x150>
    e545:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e549:	48 05 74 03 00 00    	add    $0x374,%rax
    e54f:	ba 00 00 00 00       	mov    $0x0,%edx
    e554:	89 10                	mov    %edx,(%rax)
      if (newp != 0) {
    e556:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    e55b:	74 21                	je     e57e <dlrealloc+0x178>
        check_inuse_chunk(m, newp);
    e55d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e561:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e565:	48 89 d6             	mov    %rdx,%rsi
    e568:	48 89 c7             	mov    %rax,%rdi
    e56b:	e8 e7 6e ff ff       	callq  5457 <do_check_inuse_chunk>
        mem = chunk2mem(newp);
    e570:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e574:	48 83 c0 10          	add    $0x10,%rax
    e578:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    e57c:	eb 6f                	jmp    e5ed <dlrealloc+0x1e7>
      }
      else {
        mem = internal_malloc(m, bytes);
    e57e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    e582:	48 89 c7             	mov    %rax,%rdi
    e585:	e8 9b cb ff ff       	callq  b125 <dlmalloc>
    e58a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        if (mem != 0) {
    e58e:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    e593:	74 58                	je     e5ed <dlrealloc+0x1e7>
          size_t oc = chunksize(oldp) - overhead_for(oldp);
    e595:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e599:	48 8b 40 08          	mov    0x8(%rax),%rax
    e59d:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    e5a1:	48 83 e8 10          	sub    $0x10,%rax
    e5a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
          memcpy(mem, oldmem, (oc < bytes)? oc : bytes);
    e5a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e5ad:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
    e5b1:	48 0f 46 45 c0       	cmovbe -0x40(%rbp),%rax
    e5b6:	48 89 c2             	mov    %rax,%rdx
    e5b9:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    e5bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    e5c1:	48 89 ce             	mov    %rcx,%rsi
    e5c4:	48 89 c7             	mov    %rax,%rdi
    e5c7:	e8 1e 02 00 00       	callq  e7ea <memcpy>
#ifdef _TLIBC_
          /* Zero recycled chunk */
          memset(oldmem, 0, oc);
    e5cc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e5d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e5d4:	be 00 00 00 00       	mov    $0x0,%esi
    e5d9:	48 89 c7             	mov    %rax,%rdi
    e5dc:	e8 77 02 00 00       	callq  e858 <memset>
#endif
          internal_free(m, oldmem);
    e5e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e5e5:	48 89 c7             	mov    %rax,%rdi
    e5e8:	e8 2f d6 ff ff       	callq  bc1c <dlfree>
        }
      }
    }
  }
  return mem;
    e5ed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
}
    e5f1:	c9                   	leaveq 
    e5f2:	c3                   	retq   

000000000000e5f3 <dlmemalign>:
  }
  return mem;
}
#endif

void* dlmemalign(size_t alignment, size_t bytes) {
    e5f3:	55                   	push   %rbp
    e5f4:	48 89 e5             	mov    %rsp,%rbp
    e5f7:	48 83 ec 10          	sub    $0x10,%rsp
    e5fb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e5ff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  if (alignment <= MALLOC_ALIGNMENT) {
    e603:	48 83 7d f8 08       	cmpq   $0x8,-0x8(%rbp)
    e608:	77 0e                	ja     e618 <dlmemalign+0x25>
    return dlmalloc(bytes);
    e60a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e60e:	48 89 c7             	mov    %rax,%rdi
    e611:	e8 0f cb ff ff       	callq  b125 <dlmalloc>
    e616:	eb 17                	jmp    e62f <dlmemalign+0x3c>
  }
  return internal_memalign(gm, alignment, bytes);
    e618:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e61c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e620:	48 89 c6             	mov    %rax,%rsi
    e623:	48 8d 3d b6 73 22 00 	lea    0x2273b6(%rip),%rdi        # 2359e0 <_gm_>
    e62a:	e8 6a f9 ff ff       	callq  df99 <internal_memalign>
}
    e62f:	c9                   	leaveq 
    e630:	c3                   	retq   

000000000000e631 <dlmallinfo>:
}

#endif /* USE_MALLOC_DEPRECATED */

#if !NO_MALLINFO
struct mallinfo dlmallinfo(void) {
    e631:	55                   	push   %rbp
    e632:	48 89 e5             	mov    %rsp,%rbp
    e635:	48 83 ec 20          	sub    $0x20,%rsp
    e639:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e63d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    e644:	00 00 
    e646:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e64a:	31 c0                	xor    %eax,%eax
  return internal_mallinfo(gm);
    e64c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e650:	48 8d 35 89 73 22 00 	lea    0x227389(%rip),%rsi        # 2359e0 <_gm_>
    e657:	48 89 c7             	mov    %rax,%rdi
    e65a:	e8 44 7b ff ff       	callq  61a3 <internal_mallinfo>
}
    e65f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e663:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    e667:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    e66e:	00 00 
    e670:	74 05                	je     e677 <dlmallinfo+0x46>
    e672:	e8 21 69 ff ff       	callq  4f98 <__stack_chk_fail>
    e677:	c9                   	leaveq 
    e678:	c3                   	retq   

000000000000e679 <__memcpy>:
/*
 * Copy a block of memory, not handling overlap.
 */
void *
__memcpy(void *dst0, const void *src0, size_t length)
{
    e679:	55                   	push   %rbp
    e67a:	48 89 e5             	mov    %rsp,%rbp
    e67d:	48 83 ec 40          	sub    $0x40,%rsp
    e681:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    e685:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    e689:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	char *dst = (char *)dst0;
    e68d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    e691:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	const char *src = (const char *)src0;
    e695:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    e699:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	size_t t;

	if (length == 0 || dst == src)		/* nothing to do */
    e69d:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    e6a2:	0f 84 3b 01 00 00    	je     e7e3 <__memcpy+0x16a>
    e6a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e6ac:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    e6b0:	0f 84 2d 01 00 00    	je     e7e3 <__memcpy+0x16a>
		goto done;

	if ((dst < src && dst + length > src) ||
    e6b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e6ba:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    e6be:	73 11                	jae    e6d1 <__memcpy+0x58>
    e6c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e6c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e6c8:	48 01 d0             	add    %rdx,%rax
    e6cb:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    e6cf:	72 1b                	jb     e6ec <__memcpy+0x73>
    e6d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e6d5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    e6d9:	73 16                	jae    e6f1 <__memcpy+0x78>
	    (src < dst && src + length > dst)) {
    e6db:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e6df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e6e3:	48 01 d0             	add    %rdx,%rax
    e6e6:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    e6ea:	73 05                	jae    e6f1 <__memcpy+0x78>
        /* backwards memcpy */
		abort();
    e6ec:	e8 9d 18 02 00       	callq  2ff8e <abort>
#define	TLOOP1(s) do { s; } while (--t)

	/*
	 * Copy forward.
	 */
	t = (long)src;	/* only need low bits */
    e6f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e6f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if ((t | (long)dst) & wmask) {
    e6f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e6fd:	48 0b 45 f8          	or     -0x8(%rbp),%rax
    e701:	83 e0 07             	and    $0x7,%eax
    e704:	48 85 c0             	test   %rax,%rax
    e707:	74 68                	je     e771 <__memcpy+0xf8>
		/*
		 * Try to align operands.  This cannot be done
		 * unless the low bits match.
		 */
		if ((t ^ (long)dst) & wmask || length < wsize)
    e709:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e70d:	48 33 45 f8          	xor    -0x8(%rbp),%rax
    e711:	83 e0 07             	and    $0x7,%eax
    e714:	48 85 c0             	test   %rax,%rax
    e717:	75 07                	jne    e720 <__memcpy+0xa7>
    e719:	48 83 7d c8 07       	cmpq   $0x7,-0x38(%rbp)
    e71e:	77 0a                	ja     e72a <__memcpy+0xb1>
			t = length;
    e720:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e724:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    e728:	eb 16                	jmp    e740 <__memcpy+0xc7>
		else
			t = wsize - (t & wmask);
    e72a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e72e:	83 e0 07             	and    $0x7,%eax
    e731:	ba 08 00 00 00       	mov    $0x8,%edx
    e736:	48 29 c2             	sub    %rax,%rdx
    e739:	48 89 d0             	mov    %rdx,%rax
    e73c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		length -= t;
    e740:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e744:	48 29 45 c8          	sub    %rax,-0x38(%rbp)
		TLOOP1(*dst++ = *src++);
    e748:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e74c:	48 8d 42 01          	lea    0x1(%rdx),%rax
    e750:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e754:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e758:	48 8d 48 01          	lea    0x1(%rax),%rcx
    e75c:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    e760:	0f b6 12             	movzbl (%rdx),%edx
    e763:	88 10                	mov    %dl,(%rax)
    e765:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
    e76a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    e76f:	75 d7                	jne    e748 <__memcpy+0xcf>
	}
	/*
	 * Copy whole words, then mop up any trailing bytes.
	 */
	t = length / wsize;
    e771:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e775:	48 c1 e8 03          	shr    $0x3,%rax
    e779:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	TLOOP(*(word *)dst = *(word *)src; src += wsize; dst += wsize);
    e77d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    e782:	74 24                	je     e7a8 <__memcpy+0x12f>
    e784:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e788:	48 8b 10             	mov    (%rax),%rdx
    e78b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e78f:	48 89 10             	mov    %rdx,(%rax)
    e792:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    e797:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
    e79c:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
    e7a1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    e7a6:	75 dc                	jne    e784 <__memcpy+0x10b>
	t = length & wmask;
    e7a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    e7ac:	83 e0 07             	and    $0x7,%eax
    e7af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	TLOOP(*dst++ = *src++);
    e7b3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    e7b8:	74 29                	je     e7e3 <__memcpy+0x16a>
    e7ba:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    e7be:	48 8d 42 01          	lea    0x1(%rdx),%rax
    e7c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e7c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e7ca:	48 8d 48 01          	lea    0x1(%rax),%rcx
    e7ce:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    e7d2:	0f b6 12             	movzbl (%rdx),%edx
    e7d5:	88 10                	mov    %dl,(%rax)
    e7d7:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
    e7dc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    e7e1:	75 d7                	jne    e7ba <__memcpy+0x141>
done:
    e7e3:	90                   	nop
	return (dst0);
    e7e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
    e7e8:	c9                   	leaveq 
    e7e9:	c3                   	retq   

000000000000e7ea <memcpy>:


void *
memcpy(void *dst0, const void *src0, size_t length)
{
    e7ea:	55                   	push   %rbp
    e7eb:	48 89 e5             	mov    %rsp,%rbp
    e7ee:	48 83 ec 20          	sub    $0x20,%rsp
    e7f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e7f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e7fa:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
#ifdef _TLIBC_USE_INTEL_FAST_STRING_
 	return _intel_fast_memcpy(dst0, (void*)src0, length);
    e7fe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e802:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    e806:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e80a:	48 89 ce             	mov    %rcx,%rsi
    e80d:	48 89 c7             	mov    %rax,%rdi
    e810:	e8 eb 11 00 00       	callq  fa00 <_intel_fast_memcpy>
#else
	return __memcpy(dst0, src0, length);
#endif
}
    e815:	c9                   	leaveq 
    e816:	c3                   	retq   

000000000000e817 <__memset>:
extern void *_intel_fast_memset(void *, void *, size_t);
#endif

void *
__memset(void *dst, int c, size_t n)
{
    e817:	55                   	push   %rbp
    e818:	48 89 e5             	mov    %rsp,%rbp
    e81b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e81f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    e822:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (n != 0) {
    e826:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    e82b:	74 25                	je     e852 <__memset+0x3b>
                unsigned char *d = dst;
    e82d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e831:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

                do
                        *d++ = (unsigned char)c;
    e835:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e839:	48 8d 50 01          	lea    0x1(%rax),%rdx
    e83d:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    e841:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    e844:	88 10                	mov    %dl,(%rax)
                while (--n != 0);
    e846:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
    e84b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    e850:	75 e3                	jne    e835 <__memset+0x1e>
        }
        return (dst);
    e852:	48 8b 45 e8          	mov    -0x18(%rbp),%rax


}
    e856:	5d                   	pop    %rbp
    e857:	c3                   	retq   

000000000000e858 <memset>:

void *
memset(void *dst, int c, size_t n)
{
    e858:	55                   	push   %rbp
    e859:	48 89 e5             	mov    %rsp,%rbp
    e85c:	48 83 ec 20          	sub    $0x20,%rsp
    e860:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e864:	89 75 f4             	mov    %esi,-0xc(%rbp)
    e867:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
#ifdef _TLIBC_USE_INTEL_FAST_STRING_
	return _intel_fast_memset(dst, (void*)c, n);
    e86b:	8b 45 f4             	mov    -0xc(%rbp),%eax
    e86e:	48 98                	cltq   
    e870:	48 89 c1             	mov    %rax,%rcx
    e873:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    e877:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e87b:	48 89 ce             	mov    %rcx,%rsi
    e87e:	48 89 c7             	mov    %rax,%rdi
    e881:	e8 7a 12 00 00       	callq  fb00 <_intel_fast_memset>
#else
	return __memset(dst, c, n);
#endif /* !_TLIBC_USE_INTEL_FAST_STRING_ */	
}
    e886:	c9                   	leaveq 
    e887:	c3                   	retq   

000000000000e888 <memset_s>:

#undef memset_s /* in case it was defined as a macro */

errno_t
memset_s(void *s, size_t smax, int c, size_t n)
{
    e888:	55                   	push   %rbp
    e889:	48 89 e5             	mov    %rsp,%rbp
    e88c:	48 83 ec 30          	sub    $0x30,%rsp
    e890:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    e894:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    e898:	89 55 dc             	mov    %edx,-0x24(%rbp)
    e89b:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    errno_t err = 0;
    e89f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

    if (s == NULL) {
    e8a6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    e8ab:	75 09                	jne    e8b6 <memset_s+0x2e>
        err = EINVAL;
    e8ad:	c7 45 fc 16 00 00 00 	movl   $0x16,-0x4(%rbp)
        goto out;
    e8b4:	eb 30                	jmp    e8e6 <memset_s+0x5e>
    }
    if (n > SIZE_MAX) {
        err = E2BIG;
        n = smax;
    }
    if (n > smax) {
    e8b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    e8ba:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    e8be:	76 0f                	jbe    e8cf <memset_s+0x47>
        err = EOVERFLOW;
    e8c0:	c7 45 fc 4b 00 00 00 	movl   $0x4b,-0x4(%rbp)
        n = smax;
    e8c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    e8cb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    }

    /* Calling through a volatile pointer should never be optimised away. */
    (*__memset_vp)(s, c, n);
    e8cf:	48 8b 05 62 67 22 00 	mov    0x226762(%rip),%rax        # 235038 <__memset_vp>
    e8d6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    e8da:	8b 75 dc             	mov    -0x24(%rbp),%esi
    e8dd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    e8e1:	48 89 cf             	mov    %rcx,%rdi
    e8e4:	ff d0                	callq  *%rax

    out:
    if (err == 0)
    e8e6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    e8ea:	75 07                	jne    e8f3 <memset_s+0x6b>
        return 0;
    e8ec:	b8 00 00 00 00       	mov    $0x0,%eax
    e8f1:	eb 10                	jmp    e903 <memset_s+0x7b>
    else {
        errno = err;
    e8f3:	e8 c8 0d 01 00       	callq  1f6c0 <__errno>
    e8f8:	48 89 c2             	mov    %rax,%rdx
    e8fb:	8b 45 fc             	mov    -0x4(%rbp),%eax
    e8fe:	89 02                	mov    %eax,(%rdx)
        /* XXX call runtime-constraint handler */
        return err;
    e900:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
}
    e903:	c9                   	leaveq 
    e904:	c3                   	retq   

000000000000e905 <heap_init>:
static size_t heap_size __attribute__((section(RELRO_SECTION_NAME))) = 0;
static int is_edmm_supported __attribute__((section(RELRO_SECTION_NAME))) = 0;
static size_t heap_min_size __attribute__((section(RELRO_SECTION_NAME))) = 0;

int heap_init(void *_heap_base, size_t _heap_size, size_t _heap_min_size, int _is_edmm_supported)
{
    e905:	55                   	push   %rbp
    e906:	48 89 e5             	mov    %rsp,%rbp
    e909:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    e90d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    e911:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    e915:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    if (heap_base != NULL)
    e918:	48 8b 05 91 64 22 00 	mov    0x226491(%rip),%rax        # 234db0 <heap_base>
    e91f:	48 85 c0             	test   %rax,%rax
    e922:	74 0a                	je     e92e <heap_init+0x29>
        return SGX_ERROR_UNEXPECTED;
    e924:	b8 01 00 00 00       	mov    $0x1,%eax
    e929:	e9 8c 00 00 00       	jmpq   e9ba <heap_init+0xb5>

    if ((_heap_base == NULL) || (((size_t) _heap_base) & (SE_PAGE_SIZE - 1)))
    e92e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    e933:	74 0e                	je     e943 <heap_init+0x3e>
    e935:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e939:	25 ff 0f 00 00       	and    $0xfff,%eax
    e93e:	48 85 c0             	test   %rax,%rax
    e941:	74 07                	je     e94a <heap_init+0x45>
        return SGX_ERROR_UNEXPECTED;
    e943:	b8 01 00 00 00       	mov    $0x1,%eax
    e948:	eb 70                	jmp    e9ba <heap_init+0xb5>

    if (_heap_size & (SE_PAGE_SIZE - 1))
    e94a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e94e:	25 ff 0f 00 00       	and    $0xfff,%eax
    e953:	48 85 c0             	test   %rax,%rax
    e956:	74 07                	je     e95f <heap_init+0x5a>
        return SGX_ERROR_UNEXPECTED;
    e958:	b8 01 00 00 00       	mov    $0x1,%eax
    e95d:	eb 5b                	jmp    e9ba <heap_init+0xb5>

    if (_heap_min_size & (SE_PAGE_SIZE - 1))
    e95f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e963:	25 ff 0f 00 00       	and    $0xfff,%eax
    e968:	48 85 c0             	test   %rax,%rax
    e96b:	74 07                	je     e974 <heap_init+0x6f>
        return SGX_ERROR_UNEXPECTED;
    e96d:	b8 01 00 00 00       	mov    $0x1,%eax
    e972:	eb 46                	jmp    e9ba <heap_init+0xb5>

    if (_heap_size > SIZE_MAX - (size_t)heap_base)
    e974:	48 8b 05 35 64 22 00 	mov    0x226435(%rip),%rax        # 234db0 <heap_base>
    e97b:	48 f7 d0             	not    %rax
    e97e:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    e982:	76 07                	jbe    e98b <heap_init+0x86>
        return SGX_ERROR_UNEXPECTED;
    e984:	b8 01 00 00 00       	mov    $0x1,%eax
    e989:	eb 2f                	jmp    e9ba <heap_init+0xb5>

    heap_base = _heap_base;
    e98b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    e98f:	48 89 05 1a 64 22 00 	mov    %rax,0x22641a(%rip)        # 234db0 <heap_base>
    heap_size = _heap_size;
    e996:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    e99a:	48 89 05 17 64 22 00 	mov    %rax,0x226417(%rip)        # 234db8 <heap_size>
    heap_min_size = _heap_min_size;
    e9a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    e9a5:	48 89 05 1c 64 22 00 	mov    %rax,0x22641c(%rip)        # 234dc8 <heap_min_size>
    is_edmm_supported = _is_edmm_supported;
    e9ac:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    e9af:	89 05 0b 64 22 00    	mov    %eax,0x22640b(%rip)        # 234dc0 <is_edmm_supported>

    return SGX_SUCCESS;
    e9b5:	b8 00 00 00 00       	mov    $0x0,%eax
}
    e9ba:	5d                   	pop    %rbp
    e9bb:	c3                   	retq   

000000000000e9bc <sbrk>:

void* sbrk(intptr_t n)
{
    e9bc:	55                   	push   %rbp
    e9bd:	48 89 e5             	mov    %rsp,%rbp
    e9c0:	48 83 ec 40          	sub    $0x40,%rsp
    e9c4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    static size_t heap_used;
    void *heap_ptr = NULL;
    e9c8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    e9cf:	00 
    size_t prev_heap_used = heap_used;
    e9d0:	48 8b 05 b9 73 22 00 	mov    0x2273b9(%rip),%rax        # 235d90 <heap_used.2388>
    e9d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    void * start_addr;
    size_t size = 0;
    e9db:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    e9e2:	00 

    if (!heap_base)
    e9e3:	48 8b 05 c6 63 22 00 	mov    0x2263c6(%rip),%rax        # 234db0 <heap_base>
    e9ea:	48 85 c0             	test   %rax,%rax
    e9ed:	75 0c                	jne    e9fb <sbrk+0x3f>
        return (void *)(~(size_t)0);
    e9ef:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    e9f6:	e9 9d 02 00 00       	jmpq   ec98 <sbrk+0x2dc>

    /* shrink the heap */
    if (n < 0) {
    e9fb:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
    ea00:	0f 89 31 01 00 00    	jns    eb37 <sbrk+0x17b>

        n *= -1;
    ea06:	48 f7 5d c8          	negq   -0x38(%rbp)
        if (heap_used < n)
    ea0a:	48 8b 15 7f 73 22 00 	mov    0x22737f(%rip),%rdx        # 235d90 <heap_used.2388>
    ea11:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ea15:	48 39 c2             	cmp    %rax,%rdx
    ea18:	73 0c                	jae    ea26 <sbrk+0x6a>
            return (void *)(~(size_t)0);
    ea1a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    ea21:	e9 72 02 00 00       	jmpq   ec98 <sbrk+0x2dc>

        heap_used -= n;
    ea26:	48 8b 15 63 73 22 00 	mov    0x227363(%rip),%rdx        # 235d90 <heap_used.2388>
    ea2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ea31:	48 29 c2             	sub    %rax,%rdx
    ea34:	48 89 d0             	mov    %rdx,%rax
    ea37:	48 89 05 52 73 22 00 	mov    %rax,0x227352(%rip)        # 235d90 <heap_used.2388>

        /* heap_used is never larger than heap_size, and since heap_size <= SIZE_MAX - (size_t)heap_base,
           there's no integer overflow here.
         */  
        heap_ptr = (void *)((size_t)heap_base + (size_t)heap_used);
    ea3e:	48 8b 05 6b 63 22 00 	mov    0x22636b(%rip),%rax        # 234db0 <heap_base>
    ea45:	48 89 c2             	mov    %rax,%rdx
    ea48:	48 8b 05 41 73 22 00 	mov    0x227341(%rip),%rax        # 235d90 <heap_used.2388>
    ea4f:	48 01 d0             	add    %rdx,%rax
    ea52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

        if (is_edmm_supported && (prev_heap_used > heap_min_size)) 
    ea56:	8b 05 64 63 22 00    	mov    0x226364(%rip),%eax        # 234dc0 <is_edmm_supported>
    ea5c:	85 c0                	test   %eax,%eax
    ea5e:	0f 84 ca 00 00 00    	je     eb2e <sbrk+0x172>
    ea64:	48 8b 05 5d 63 22 00 	mov    0x22635d(%rip),%rax        # 234dc8 <heap_min_size>
    ea6b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    ea6f:	0f 86 b9 00 00 00    	jbe    eb2e <sbrk+0x172>
        {
            assert((n & (SE_PAGE_SIZE - 1)) == 0);
    ea75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ea79:	25 ff 0f 00 00       	and    $0xfff,%eax
    ea7e:	48 85 c0             	test   %rax,%rax
    ea81:	74 1f                	je     eaa2 <sbrk+0xe6>
    ea83:	48 8d 0d 46 17 02 00 	lea    0x21746(%rip),%rcx        # 301d0 <_ZZL16init_stack_guardPvE8__func__+0xc0>
    ea8a:	48 8d 15 68 17 02 00 	lea    0x21768(%rip),%rdx        # 301f9 <__func__.2393>
    ea91:	be 65 00 00 00       	mov    $0x65,%esi
    ea96:	48 8d 3d 51 17 02 00 	lea    0x21751(%rip),%rdi        # 301ee <_ZZL16init_stack_guardPvE8__func__+0xde>
    ea9d:	e8 29 65 ff ff       	callq  4fcb <__assert>

            if (heap_used > heap_min_size)
    eaa2:	48 8b 15 e7 72 22 00 	mov    0x2272e7(%rip),%rdx        # 235d90 <heap_used.2388>
    eaa9:	48 8b 05 18 63 22 00 	mov    0x226318(%rip),%rax        # 234dc8 <heap_min_size>
    eab0:	48 39 c2             	cmp    %rax,%rdx
    eab3:	76 12                	jbe    eac7 <sbrk+0x10b>
            {
                start_addr = heap_ptr;
    eab5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    eab9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
                size = n;
    eabd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    eac1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    eac5:	eb 2d                	jmp    eaf4 <sbrk+0x138>
            else
            {
                /* heap_min_size is never larger than heap_size, and since heap_size <= SIZE_MAX - (size_t)heap_base,
                   there's no integer overflow here.
                 */  
                start_addr = (void *)((size_t)(heap_base) + heap_min_size);
    eac7:	48 8b 05 e2 62 22 00 	mov    0x2262e2(%rip),%rax        # 234db0 <heap_base>
    eace:	48 89 c2             	mov    %rax,%rdx
    ead1:	48 8b 05 f0 62 22 00 	mov    0x2262f0(%rip),%rax        # 234dc8 <heap_min_size>
    ead8:	48 01 d0             	add    %rdx,%rax
    eadb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
                size = prev_heap_used - heap_min_size;
    eadf:	48 8b 05 e2 62 22 00 	mov    0x2262e2(%rip),%rax        # 234dc8 <heap_min_size>
    eae6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    eaea:	48 29 c2             	sub    %rax,%rdx
    eaed:	48 89 d0             	mov    %rdx,%rax
    eaf0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            }
            int ret = trim_EPC_pages(start_addr, size >> SE_PAGE_SHIFT);
    eaf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    eaf8:	48 c1 e8 0c          	shr    $0xc,%rax
    eafc:	48 89 c2             	mov    %rax,%rdx
    eaff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    eb03:	48 89 d6             	mov    %rdx,%rsi
    eb06:	48 89 c7             	mov    %rax,%rdi
    eb09:	e8 3f 31 ff ff       	callq  1c4d <trim_EPC_pages>
    eb0e:	89 45 dc             	mov    %eax,-0x24(%rbp)
            if (ret != 0)
    eb11:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    eb15:	74 17                	je     eb2e <sbrk+0x172>
            {
                heap_used = prev_heap_used;
    eb17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    eb1b:	48 89 05 6e 72 22 00 	mov    %rax,0x22726e(%rip)        # 235d90 <heap_used.2388>
                return (void *)(~(size_t)0);
    eb22:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    eb29:	e9 6a 01 00 00       	jmpq   ec98 <sbrk+0x2dc>
            }
        }
        return heap_ptr;
    eb2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    eb32:	e9 61 01 00 00       	jmpq   ec98 <sbrk+0x2dc>
    }

    /* extend the heap */
    if((heap_used > (SIZE_MAX - n)) || ((heap_used + n) > heap_size))
    eb37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    eb3b:	48 f7 d0             	not    %rax
    eb3e:	48 89 c2             	mov    %rax,%rdx
    eb41:	48 8b 05 48 72 22 00 	mov    0x227248(%rip),%rax        # 235d90 <heap_used.2388>
    eb48:	48 39 c2             	cmp    %rax,%rdx
    eb4b:	72 1a                	jb     eb67 <sbrk+0x1ab>
    eb4d:	48 8b 15 3c 72 22 00 	mov    0x22723c(%rip),%rdx        # 235d90 <heap_used.2388>
    eb54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    eb58:	48 01 c2             	add    %rax,%rdx
    eb5b:	48 8b 05 56 62 22 00 	mov    0x226256(%rip),%rax        # 234db8 <heap_size>
    eb62:	48 39 c2             	cmp    %rax,%rdx
    eb65:	76 0c                	jbe    eb73 <sbrk+0x1b7>
        return (void *)(~(size_t)0);
    eb67:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    eb6e:	e9 25 01 00 00       	jmpq   ec98 <sbrk+0x2dc>

    /* heap_used is never larger than heap_size, and since heap_size <= SIZE_MAX - (size_t)heap_base,
       there's no integer overflow here.
     */  
    heap_ptr = (void *)((size_t)heap_base + (size_t)heap_used);
    eb73:	48 8b 05 36 62 22 00 	mov    0x226236(%rip),%rax        # 234db0 <heap_base>
    eb7a:	48 89 c2             	mov    %rax,%rdx
    eb7d:	48 8b 05 0c 72 22 00 	mov    0x22720c(%rip),%rax        # 235d90 <heap_used.2388>
    eb84:	48 01 d0             	add    %rdx,%rax
    eb87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    heap_used += n;
    eb8b:	48 8b 15 fe 71 22 00 	mov    0x2271fe(%rip),%rdx        # 235d90 <heap_used.2388>
    eb92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    eb96:	48 01 d0             	add    %rdx,%rax
    eb99:	48 89 05 f0 71 22 00 	mov    %rax,0x2271f0(%rip)        # 235d90 <heap_used.2388>

    /* update g_peak_heap_used */
    g_peak_heap_used = (g_peak_heap_used < heap_used) ? heap_used : g_peak_heap_used;
    eba0:	48 8b 15 e1 71 22 00 	mov    0x2271e1(%rip),%rdx        # 235d88 <g_peak_heap_used>
    eba7:	48 8b 05 e2 71 22 00 	mov    0x2271e2(%rip),%rax        # 235d90 <heap_used.2388>
    ebae:	48 39 c2             	cmp    %rax,%rdx
    ebb1:	48 0f 43 c2          	cmovae %rdx,%rax
    ebb5:	48 89 05 cc 71 22 00 	mov    %rax,0x2271cc(%rip)        # 235d88 <g_peak_heap_used>

    if (is_edmm_supported && heap_used > heap_min_size)
    ebbc:	8b 05 fe 61 22 00    	mov    0x2261fe(%rip),%eax        # 234dc0 <is_edmm_supported>
    ebc2:	85 c0                	test   %eax,%eax
    ebc4:	0f 84 ca 00 00 00    	je     ec94 <sbrk+0x2d8>
    ebca:	48 8b 15 bf 71 22 00 	mov    0x2271bf(%rip),%rdx        # 235d90 <heap_used.2388>
    ebd1:	48 8b 05 f0 61 22 00 	mov    0x2261f0(%rip),%rax        # 234dc8 <heap_min_size>
    ebd8:	48 39 c2             	cmp    %rax,%rdx
    ebdb:	0f 86 b3 00 00 00    	jbe    ec94 <sbrk+0x2d8>
    {
        assert((n & (SE_PAGE_SIZE - 1)) == 0);
    ebe1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ebe5:	25 ff 0f 00 00       	and    $0xfff,%eax
    ebea:	48 85 c0             	test   %rax,%rax
    ebed:	74 1f                	je     ec0e <sbrk+0x252>
    ebef:	48 8d 0d da 15 02 00 	lea    0x215da(%rip),%rcx        # 301d0 <_ZZL16init_stack_guardPvE8__func__+0xc0>
    ebf6:	48 8d 15 fc 15 02 00 	lea    0x215fc(%rip),%rdx        # 301f9 <__func__.2393>
    ebfd:	be 8d 00 00 00       	mov    $0x8d,%esi
    ec02:	48 8d 3d e5 15 02 00 	lea    0x215e5(%rip),%rdi        # 301ee <_ZZL16init_stack_guardPvE8__func__+0xde>
    ec09:	e8 bd 63 ff ff       	callq  4fcb <__assert>

        if (prev_heap_used > heap_min_size)
    ec0e:	48 8b 05 b3 61 22 00 	mov    0x2261b3(%rip),%rax        # 234dc8 <heap_min_size>
    ec15:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    ec19:	76 12                	jbe    ec2d <sbrk+0x271>
        {
            start_addr = heap_ptr;
    ec1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    ec1f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            size = n;
    ec23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    ec27:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ec2b:	eb 30                	jmp    ec5d <sbrk+0x2a1>
        {

            /* heap_min_size is never larger than heap_size, and since heap_size <= SIZE_MAX - (size_t)heap_base,
               there's no integer overflow here.
             */  
            start_addr = (void *)((size_t)(heap_base) + heap_min_size);
    ec2d:	48 8b 05 7c 61 22 00 	mov    0x22617c(%rip),%rax        # 234db0 <heap_base>
    ec34:	48 89 c2             	mov    %rax,%rdx
    ec37:	48 8b 05 8a 61 22 00 	mov    0x22618a(%rip),%rax        # 234dc8 <heap_min_size>
    ec3e:	48 01 d0             	add    %rdx,%rax
    ec41:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            size = heap_used - heap_min_size;
    ec45:	48 8b 15 44 71 22 00 	mov    0x227144(%rip),%rdx        # 235d90 <heap_used.2388>
    ec4c:	48 8b 05 75 61 22 00 	mov    0x226175(%rip),%rax        # 234dc8 <heap_min_size>
    ec53:	48 29 c2             	sub    %rax,%rdx
    ec56:	48 89 d0             	mov    %rdx,%rax
    ec59:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        }
        int ret = apply_EPC_pages(start_addr, size >> SE_PAGE_SHIFT);
    ec5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ec61:	48 c1 e8 0c          	shr    $0xc,%rax
    ec65:	48 89 c2             	mov    %rax,%rdx
    ec68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    ec6c:	48 89 d6             	mov    %rdx,%rsi
    ec6f:	48 89 c7             	mov    %rax,%rdi
    ec72:	e8 03 2f ff ff       	callq  1b7a <apply_EPC_pages>
    ec77:	89 45 d8             	mov    %eax,-0x28(%rbp)
        if (ret != 0)
    ec7a:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
    ec7e:	74 14                	je     ec94 <sbrk+0x2d8>
        {
            heap_used = prev_heap_used;
    ec80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ec84:	48 89 05 05 71 22 00 	mov    %rax,0x227105(%rip)        # 235d90 <heap_used.2388>
            return (void *)(~(size_t)0);
    ec8b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    ec92:	eb 04                	jmp    ec98 <sbrk+0x2dc>
        }
    }
    return heap_ptr;
    ec94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
    ec98:	c9                   	leaveq 
    ec99:	c3                   	retq   

000000000000ec9a <tstdc_access_version_dummy1>:
#include "stdint.h"
#include "se_cpu_feature.h"
#include "se_cdefs.h"

// add a version to tlibc.
SGX_ACCESS_VERSION(tstdc, 1)
    ec9a:	55                   	push   %rbp
    ec9b:	48 89 e5             	mov    %rsp,%rbp
    ec9e:	c6 05 9b 63 22 00 73 	movb   $0x73,0x22639b(%rip)        # 235040 <sgx_tstdc_version>
    eca5:	48 8d 05 94 63 22 00 	lea    0x226394(%rip),%rax        # 235040 <sgx_tstdc_version>
    ecac:	5d                   	pop    %rbp
    ecad:	c3                   	retq   

000000000000ecae <_intel_cpu_indicator_init>:
extern uint64_t __intel_cpu_feature_indicator;
extern uint64_t __intel_cpu_feature_indicator_x;
extern unsigned int __intel_cpu_indicator;

static int _intel_cpu_indicator_init(uint64_t cpu_feature_bits)
{
    ecae:	55                   	push   %rbp
    ecaf:	48 89 e5             	mov    %rsp,%rbp
    ecb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    // We have the assumption that SSE3 is the lowest feature for enclave loading,
    // so failure will be returned if features are all below-SSE3.

    __intel_cpu_indicator = CPU_GENERIC;
    ecb6:	c7 05 d8 70 22 00 01 	movl   $0x1,0x2270d8(%rip)        # 235d98 <__intel_cpu_indicator>
    ecbd:	00 00 00 

    if ((cpu_feature_bits & CPU_FEATURE_AVX2) &&
    ecc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ecc4:	25 00 00 80 00       	and    $0x800000,%eax
    ecc9:	48 85 c0             	test   %rax,%rax
    eccc:	74 55                	je     ed23 <_intel_cpu_indicator_init+0x75>
        (cpu_feature_bits & CPU_FEATURE_FMA) &&
    ecce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ecd2:	25 00 00 04 00       	and    $0x40000,%eax
    if ((cpu_feature_bits & CPU_FEATURE_AVX2) &&
    ecd7:	48 85 c0             	test   %rax,%rax
    ecda:	74 47                	je     ed23 <_intel_cpu_indicator_init+0x75>
        (cpu_feature_bits & CPU_FEATURE_BMI) &&
    ecdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ece0:	25 00 00 08 00       	and    $0x80000,%eax
        (cpu_feature_bits & CPU_FEATURE_FMA) &&
    ece5:	48 85 c0             	test   %rax,%rax
    ece8:	74 39                	je     ed23 <_intel_cpu_indicator_init+0x75>
        (cpu_feature_bits & CPU_FEATURE_LZCNT) &&
    ecea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ecee:	25 00 00 10 00       	and    $0x100000,%eax
        (cpu_feature_bits & CPU_FEATURE_BMI) &&
    ecf3:	48 85 c0             	test   %rax,%rax
    ecf6:	74 2b                	je     ed23 <_intel_cpu_indicator_init+0x75>
        (cpu_feature_bits & CPU_FEATURE_HLE) &&
    ecf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ecfc:	25 00 00 20 00       	and    $0x200000,%eax
        (cpu_feature_bits & CPU_FEATURE_LZCNT) &&
    ed01:	48 85 c0             	test   %rax,%rax
    ed04:	74 1d                	je     ed23 <_intel_cpu_indicator_init+0x75>
        (cpu_feature_bits & CPU_FEATURE_RTM)) {
    ed06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed0a:	25 00 00 40 00       	and    $0x400000,%eax
        (cpu_feature_bits & CPU_FEATURE_HLE) &&
    ed0f:	48 85 c0             	test   %rax,%rax
    ed12:	74 0f                	je     ed23 <_intel_cpu_indicator_init+0x75>

        __intel_cpu_indicator = CPU_HSW;
    ed14:	c7 05 7a 70 22 00 00 	movl   $0x200000,0x22707a(%rip)        # 235d98 <__intel_cpu_indicator>
    ed1b:	00 20 00 
    ed1e:	e9 32 01 00 00       	jmpq   ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else if (cpu_feature_bits & CPU_FEATURE_F16C) {
    ed23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed27:	25 00 80 00 00       	and    $0x8000,%eax
    ed2c:	48 85 c0             	test   %rax,%rax
    ed2f:	74 0f                	je     ed40 <_intel_cpu_indicator_init+0x92>
        __intel_cpu_indicator = CPU_IVB;
    ed31:	c7 05 5d 70 22 00 00 	movl   $0x40000,0x22705d(%rip)        # 235d98 <__intel_cpu_indicator>
    ed38:	00 04 00 
    ed3b:	e9 15 01 00 00       	jmpq   ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else if (cpu_feature_bits & CPU_FEATURE_AVX) {
    ed40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed44:	25 00 00 01 00       	and    $0x10000,%eax
    ed49:	48 85 c0             	test   %rax,%rax
    ed4c:	74 0f                	je     ed5d <_intel_cpu_indicator_init+0xaf>
        __intel_cpu_indicator = CPU_SNB;
    ed4e:	c7 05 40 70 22 00 00 	movl   $0x20000,0x227040(%rip)        # 235d98 <__intel_cpu_indicator>
    ed55:	00 02 00 
    ed58:	e9 f8 00 00 00       	jmpq   ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else if ((cpu_feature_bits & CPU_FEATURE_PCLMULQDQ) &&
    ed5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed61:	25 00 20 00 00       	and    $0x2000,%eax
    ed66:	48 85 c0             	test   %rax,%rax
    ed69:	74 1d                	je     ed88 <_intel_cpu_indicator_init+0xda>
        (cpu_feature_bits & CPU_FEATURE_AES)) {
    ed6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed6f:	25 00 40 00 00       	and    $0x4000,%eax
    else if ((cpu_feature_bits & CPU_FEATURE_PCLMULQDQ) &&
    ed74:	48 85 c0             	test   %rax,%rax
    ed77:	74 0f                	je     ed88 <_intel_cpu_indicator_init+0xda>
            __intel_cpu_indicator = CPU_WSM;
    ed79:	c7 05 15 70 22 00 00 	movl   $0x10000,0x227015(%rip)        # 235d98 <__intel_cpu_indicator>
    ed80:	00 01 00 
    ed83:	e9 cd 00 00 00       	jmpq   ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else if ((cpu_feature_bits & CPU_FEATURE_SSE4_2) &&
    ed88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed8c:	25 00 04 00 00       	and    $0x400,%eax
    ed91:	48 85 c0             	test   %rax,%rax
    ed94:	74 1d                	je     edb3 <_intel_cpu_indicator_init+0x105>
        (cpu_feature_bits & CPU_FEATURE_POPCNT)) {
    ed96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ed9a:	25 00 10 00 00       	and    $0x1000,%eax
    else if ((cpu_feature_bits & CPU_FEATURE_SSE4_2) &&
    ed9f:	48 85 c0             	test   %rax,%rax
    eda2:	74 0f                	je     edb3 <_intel_cpu_indicator_init+0x105>
            __intel_cpu_indicator = CPU_NHM;
    eda4:	c7 05 ea 6f 22 00 00 	movl   $0x8000,0x226fea(%rip)        # 235d98 <__intel_cpu_indicator>
    edab:	80 00 00 
    edae:	e9 a2 00 00 00       	jmpq   ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else if (cpu_feature_bits & CPU_FEATURE_SSE4_1) {
    edb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    edb7:	25 00 02 00 00       	and    $0x200,%eax
    edbc:	48 85 c0             	test   %rax,%rax
    edbf:	74 0f                	je     edd0 <_intel_cpu_indicator_init+0x122>
        __intel_cpu_indicator = CPU_SNI;
    edc1:	c7 05 cd 6f 22 00 00 	movl   $0x2000,0x226fcd(%rip)        # 235d98 <__intel_cpu_indicator>
    edc8:	20 00 00 
    edcb:	e9 85 00 00 00       	jmpq   ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else if (cpu_feature_bits & CPU_FEATURE_MOVBE) {
    edd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    edd4:	25 00 08 00 00       	and    $0x800,%eax
    edd9:	48 85 c0             	test   %rax,%rax
    eddc:	74 0c                	je     edea <_intel_cpu_indicator_init+0x13c>
        __intel_cpu_indicator = CPU_BNL;
    edde:	c7 05 b0 6f 22 00 00 	movl   $0x4000,0x226fb0(%rip)        # 235d98 <__intel_cpu_indicator>
    ede5:	40 00 00 
    ede8:	eb 6b                	jmp    ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else if (cpu_feature_bits & CPU_FEATURE_SSSE3) {
    edea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    edee:	25 00 01 00 00       	and    $0x100,%eax
    edf3:	48 85 c0             	test   %rax,%rax
    edf6:	74 0c                	je     ee04 <_intel_cpu_indicator_init+0x156>
        __intel_cpu_indicator = CPU_MNI;
    edf8:	c7 05 96 6f 22 00 00 	movl   $0x1000,0x226f96(%rip)        # 235d98 <__intel_cpu_indicator>
    edff:	10 00 00 
    ee02:	eb 51                	jmp    ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else if (cpu_feature_bits & CPU_FEATURE_SSE3) {
    ee04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee08:	25 80 00 00 00       	and    $0x80,%eax
    ee0d:	48 85 c0             	test   %rax,%rax
    ee10:	74 0c                	je     ee1e <_intel_cpu_indicator_init+0x170>
        __intel_cpu_indicator = CPU_PENTIUM_4_PNI;
    ee12:	c7 05 7c 6f 22 00 00 	movl   $0x800,0x226f7c(%rip)        # 235d98 <__intel_cpu_indicator>
    ee19:	08 00 00 
    ee1c:	eb 37                	jmp    ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else if (cpu_feature_bits & CPU_FEATURE_SSE2) {
    ee1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee22:	83 e0 40             	and    $0x40,%eax
    ee25:	48 85 c0             	test   %rax,%rax
    ee28:	74 0c                	je     ee36 <_intel_cpu_indicator_init+0x188>
        __intel_cpu_indicator = CPU_BNI;
    ee2a:	c7 05 64 6f 22 00 00 	movl   $0x400,0x226f64(%rip)        # 235d98 <__intel_cpu_indicator>
    ee31:	04 00 00 
    ee34:	eb 1f                	jmp    ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else if (cpu_feature_bits & CPU_FEATURE_SSE) {
    ee36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ee3a:	83 e0 20             	and    $0x20,%eax
    ee3d:	48 85 c0             	test   %rax,%rax
    ee40:	74 0c                	je     ee4e <_intel_cpu_indicator_init+0x1a0>
        __intel_cpu_indicator = CPU_PENTIUM_III_SSE;
    ee42:	c7 05 4c 6f 22 00 80 	movl   $0x80,0x226f4c(%rip)        # 235d98 <__intel_cpu_indicator>
    ee49:	00 00 00 
    ee4c:	eb 07                	jmp    ee55 <_intel_cpu_indicator_init+0x1a7>
    }
    else {
        return -1;
    ee4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    ee53:	eb 05                	jmp    ee5a <_intel_cpu_indicator_init+0x1ac>
    }
    return 0;
    ee55:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ee5a:	5d                   	pop    %rbp
    ee5b:	c3                   	retq   

000000000000ee5c <sgx_init_string_lib>:


int sgx_init_string_lib(uint64_t cpu_feature_indicator)
{
    ee5c:	55                   	push   %rbp
    ee5d:	48 89 e5             	mov    %rsp,%rbp
    ee60:	48 83 ec 18          	sub    $0x18,%rsp
    ee64:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    int genuine_intel = (cpu_feature_indicator & ~(CPU_FEATURE_GENERIC_IA32));
    ee68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ee6c:	83 e0 fe             	and    $0xfffffffe,%eax
    ee6f:	89 45 fc             	mov    %eax,-0x4(%rbp)

    if(genuine_intel) {
    ee72:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    ee76:	74 1b                	je     ee93 <sgx_init_string_lib+0x37>
        __intel_cpu_feature_indicator = __intel_cpu_feature_indicator_x = cpu_feature_indicator;
    ee78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    ee7c:	48 89 05 25 6f 22 00 	mov    %rax,0x226f25(%rip)        # 235da8 <__intel_cpu_feature_indicator_x>
    ee83:	48 8b 05 1e 6f 22 00 	mov    0x226f1e(%rip),%rax        # 235da8 <__intel_cpu_feature_indicator_x>
    ee8a:	48 89 05 0f 6f 22 00 	mov    %rax,0x226f0f(%rip)        # 235da0 <__intel_cpu_feature_indicator>
    ee91:	eb 19                	jmp    eeac <sgx_init_string_lib+0x50>
    }
    else {
        __intel_cpu_feature_indicator = __intel_cpu_feature_indicator_x = CPU_FEATURE_GENERIC_IA32;
    ee93:	48 c7 05 0a 6f 22 00 	movq   $0x1,0x226f0a(%rip)        # 235da8 <__intel_cpu_feature_indicator_x>
    ee9a:	01 00 00 00 
    ee9e:	48 8b 05 03 6f 22 00 	mov    0x226f03(%rip),%rax        # 235da8 <__intel_cpu_feature_indicator_x>
    eea5:	48 89 05 f4 6e 22 00 	mov    %rax,0x226ef4(%rip)        # 235da0 <__intel_cpu_feature_indicator>
    }

    return _intel_cpu_indicator_init(cpu_feature_indicator);
    eeac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    eeb0:	48 89 c7             	mov    %rax,%rdi
    eeb3:	e8 f6 fd ff ff       	callq  ecae <_intel_cpu_indicator_init>
}
    eeb8:	c9                   	leaveq 
    eeb9:	c3                   	retq   

000000000000eeba <sgx_spin_lock>:
    return (res);
   
}

uint32_t sgx_spin_lock(sgx_spinlock_t *lock)
{
    eeba:	55                   	push   %rbp
    eebb:	48 89 e5             	mov    %rsp,%rbp
    eebe:	48 83 ec 30          	sub    $0x30,%rsp
    eec2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    eec6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    eecd:	00 00 
    eecf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    eed3:	31 c0                	xor    %eax,%eax
    while(_InterlockedExchange((volatile int *)lock, 1) != 0) {
    eed5:	eb 0c                	jmp    eee3 <sgx_spin_lock+0x29>
    __asm __volatile(
    eed7:	f3 90                	pause  
        while (*lock) {
    eed9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eedd:	8b 00                	mov    (%rax),%eax
    eedf:	85 c0                	test   %eax,%eax
    eee1:	75 f4                	jne    eed7 <sgx_spin_lock+0x1d>
    eee3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    eee7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    eeeb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
    __asm __volatile(
    eef2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    eef6:	8b 55 ec             	mov    -0x14(%rbp),%edx
    eef9:	f0 87 10             	lock xchg %edx,(%rax)
    eefc:	89 55 e8             	mov    %edx,-0x18(%rbp)
    return (res);
    eeff:	8b 45 e8             	mov    -0x18(%rbp),%eax
    while(_InterlockedExchange((volatile int *)lock, 1) != 0) {
    ef02:	85 c0                	test   %eax,%eax
    ef04:	75 d3                	jne    eed9 <sgx_spin_lock+0x1f>
            /* tell cpu we are spinning */
            _mm_pause();
        } 
    }

    return (0);
    ef06:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ef0b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    ef0f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    ef16:	00 00 
    ef18:	74 05                	je     ef1f <sgx_spin_lock+0x65>
    ef1a:	e8 79 60 ff ff       	callq  4f98 <__stack_chk_fail>
    ef1f:	c9                   	leaveq 
    ef20:	c3                   	retq   

000000000000ef21 <sgx_spin_unlock>:

uint32_t sgx_spin_unlock(sgx_spinlock_t *lock)
{
    ef21:	55                   	push   %rbp
    ef22:	48 89 e5             	mov    %rsp,%rbp
    ef25:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    *lock = 0;
    ef29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef2d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)

    return (0);
    ef33:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ef38:	5d                   	pop    %rbp
    ef39:	c3                   	retq   

000000000000ef3a <strlen>:
extern size_t _intel_fast_strlen(const char *);
#endif

size_t
strlen(const char *str)
{
    ef3a:	55                   	push   %rbp
    ef3b:	48 89 e5             	mov    %rsp,%rbp
    ef3e:	48 83 ec 10          	sub    $0x10,%rsp
    ef42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
#ifdef _TLIBC_USE_INTEL_FAST_STRING_
	return _intel_fast_strlen(str);
    ef46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    ef4a:	48 89 c7             	mov    %rax,%rdi
    ef4d:	e8 3e be 00 00       	callq  1ad90 <_intel_fast_strlen>

	for (s = str; *s; ++s)
		;
	return (s - str);
#endif
}
    ef52:	c9                   	leaveq 
    ef53:	c3                   	retq   

000000000000ef54 <vsnprintf>:
#include <string.h>
#include "local.h"

int
vsnprintf(char *str, size_t n, const char *fmt, __va_list ap)
{
    ef54:	55                   	push   %rbp
    ef55:	48 89 e5             	mov    %rsp,%rbp
    ef58:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
    ef5f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
    ef66:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
    ef6d:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
    ef74:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
    ef7b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    ef82:	00 00 
    ef84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ef88:	31 c0                	xor    %eax,%eax
	int ret;
	char dummy;
	FILE f;
	struct __sfileext fext;

	_FILEEXT_SETUP(&f, &fext);
    ef8a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    ef8e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    ef92:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    ef96:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    ef9d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    efa1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
    efa8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    efac:	48 85 c0             	test   %rax,%rax
    efaf:	74 0a                	je     efbb <vsnprintf+0x67>
    efb1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    efb5:	48 83 c0 10          	add    $0x10,%rax
    efb9:	eb 05                	jmp    efc0 <vsnprintf+0x6c>
    efbb:	b8 00 00 00 00       	mov    $0x0,%eax
    efc0:	ba 28 00 00 00       	mov    $0x28,%edx
    efc5:	be 00 00 00 00       	mov    $0x0,%esi
    efca:	48 89 c7             	mov    %rax,%rdi
    efcd:	e8 86 f8 ff ff       	callq  e858 <memset>

	/* While snprintf(3) specifies size_t stdio uses an int internally */
	if (n > INT_MAX)
    efd2:	48 81 bd 60 ff ff ff 	cmpq   $0x7fffffff,-0xa0(%rbp)
    efd9:	ff ff ff 7f 
    efdd:	76 0b                	jbe    efea <vsnprintf+0x96>
		n = INT_MAX;
    efdf:	48 c7 85 60 ff ff ff 	movq   $0x7fffffff,-0xa0(%rbp)
    efe6:	ff ff ff 7f 
	/* Stdio internals do not deal correctly with zero length buffer */
	if (n == 0) {
    efea:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
    eff1:	00 
    eff2:	75 19                	jne    f00d <vsnprintf+0xb9>
		str = &dummy;
    eff4:	48 8d 85 7b ff ff ff 	lea    -0x85(%rbp),%rax
    effb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
		n = 1;
    f002:	48 c7 85 60 ff ff ff 	movq   $0x1,-0xa0(%rbp)
    f009:	01 00 00 00 
	}
	f._file = -1;
    f00d:	66 c7 45 92 ff ff    	movw   $0xffff,-0x6e(%rbp)
	f._flags = __SWR | __SSTR;
    f013:	66 c7 45 90 08 02    	movw   $0x208,-0x70(%rbp)
	f._bf._base = f._p = (unsigned char *)str;
    f019:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    f020:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    f024:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    f028:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	f._bf._size = f._w = n - 1;
    f02c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
    f033:	83 e8 01             	sub    $0x1,%eax
    f036:	89 45 8c             	mov    %eax,-0x74(%rbp)
    f039:	8b 45 8c             	mov    -0x74(%rbp),%eax
    f03c:	89 45 a0             	mov    %eax,-0x60(%rbp)
	ret = __vfprintf(&f, fmt, ap);
    f03f:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
    f046:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
    f04d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    f051:	48 89 ce             	mov    %rcx,%rsi
    f054:	48 89 c7             	mov    %rax,%rdi
    f057:	e8 7b 0b 01 00       	callq  1fbd7 <__vfprintf>
    f05c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
	*f._p = '\0';
    f062:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    f066:	c6 00 00             	movb   $0x0,(%rax)
	return (ret);
    f069:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
}
    f06f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    f073:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    f07a:	00 00 
    f07c:	74 05                	je     f083 <vsnprintf+0x12f>
    f07e:	e8 15 5f ff ff       	callq  4f98 <__stack_chk_fail>
    f083:	c9                   	leaveq 
    f084:	c3                   	retq   

000000000000f085 <memcpy_s>:
    void * dst,
    size_t sizeInBytes,
    const void * src,
    size_t count
)
{
    f085:	55                   	push   %rbp
    f086:	48 89 e5             	mov    %rsp,%rbp
    f089:	48 83 ec 30          	sub    $0x30,%rsp
    f08d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    f091:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    f095:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    f099:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    if (count == 0)
    f09d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    f0a2:	75 0a                	jne    f0ae <memcpy_s+0x29>
    {
        /* nothing to do */
        return 0;
    f0a4:	b8 00 00 00 00       	mov    $0x0,%eax
    f0a9:	e9 c1 00 00 00       	jmpq   f16f <memcpy_s+0xea>
    }

    /* validation section */
    _VALIDATE_RETURN_ERRCODE(dst != NULL, EINVAL);
    f0ae:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    f0b3:	0f 95 c0             	setne  %al
    f0b6:	0f b6 c0             	movzbl %al,%eax
    f0b9:	89 45 f4             	mov    %eax,-0xc(%rbp)
    f0bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
    f0c0:	75 15                	jne    f0d7 <memcpy_s+0x52>
    f0c2:	e8 f9 05 01 00       	callq  1f6c0 <__errno>
    f0c7:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
    f0cd:	b8 16 00 00 00       	mov    $0x16,%eax
    f0d2:	e9 98 00 00 00       	jmpq   f16f <memcpy_s+0xea>
    if (src == NULL || sizeInBytes < count)
    f0d7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    f0dc:	74 0a                	je     f0e8 <memcpy_s+0x63>
    f0de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f0e2:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
    f0e6:	73 6b                	jae    f153 <memcpy_s+0xce>
    {
        /* zeroes the destination buffer */
        memset(dst, 0, sizeInBytes);
    f0e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    f0ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f0f0:	be 00 00 00 00       	mov    $0x0,%esi
    f0f5:	48 89 c7             	mov    %rax,%rdi
    f0f8:	e8 5b f7 ff ff       	callq  e858 <memset>

        _VALIDATE_RETURN_ERRCODE(src != NULL, EINVAL);
    f0fd:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    f102:	0f 95 c0             	setne  %al
    f105:	0f b6 c0             	movzbl %al,%eax
    f108:	89 45 f8             	mov    %eax,-0x8(%rbp)
    f10b:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
    f10f:	75 12                	jne    f123 <memcpy_s+0x9e>
    f111:	e8 aa 05 01 00       	callq  1f6c0 <__errno>
    f116:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
    f11c:	b8 16 00 00 00       	mov    $0x16,%eax
    f121:	eb 4c                	jmp    f16f <memcpy_s+0xea>
        _VALIDATE_RETURN_ERRCODE(sizeInBytes >= count, ERANGE);
    f123:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    f127:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
    f12b:	0f 93 c0             	setae  %al
    f12e:	0f b6 c0             	movzbl %al,%eax
    f131:	89 45 fc             	mov    %eax,-0x4(%rbp)
    f134:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    f138:	75 12                	jne    f14c <memcpy_s+0xc7>
    f13a:	e8 81 05 01 00       	callq  1f6c0 <__errno>
    f13f:	c7 00 22 00 00 00    	movl   $0x22,(%rax)
    f145:	b8 22 00 00 00       	mov    $0x22,%eax
    f14a:	eb 23                	jmp    f16f <memcpy_s+0xea>
        /* useless, but prefast is confused */
        return EINVAL;
    f14c:	b8 16 00 00 00       	mov    $0x16,%eax
    f151:	eb 1c                	jmp    f16f <memcpy_s+0xea>
    }

    memcpy(dst, src, count);
    f153:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    f157:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    f15b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    f15f:	48 89 ce             	mov    %rcx,%rsi
    f162:	48 89 c7             	mov    %rax,%rdi
    f165:	e8 80 f6 ff ff       	callq  e7ea <memcpy>
    return 0;
    f16a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f16f:	c9                   	leaveq 
    f170:	c3                   	retq   
    f171:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    f178:	00 00 00 
    f17b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000000f180 <__intel_cpu_indicator_init>:
    f180:	f3 0f 1e fa          	endbr64 
    f184:	50                   	push   %rax
    f185:	52                   	push   %rdx
    f186:	51                   	push   %rcx
    f187:	53                   	push   %rbx
    f188:	57                   	push   %rdi
    f189:	56                   	push   %rsi
    f18a:	55                   	push   %rbp
    f18b:	41 50                	push   %r8
    f18d:	41 51                	push   %r9
    f18f:	41 54                	push   %r12
    f191:	41 55                	push   %r13
    f193:	41 56                	push   %r14
    f195:	41 57                	push   %r15
    f197:	48 89 e5             	mov    %rsp,%rbp
    f19a:	48 83 ec 50          	sub    $0x50,%rsp
    f19e:	9c                   	pushfq 
    f19f:	58                   	pop    %rax
    f1a0:	48 89 c1             	mov    %rax,%rcx
    f1a3:	48 35 00 00 20 00    	xor    $0x200000,%rax
    f1a9:	50                   	push   %rax
    f1aa:	9d                   	popfq  
    f1ab:	9c                   	pushfq 
    f1ac:	58                   	pop    %rax
    f1ad:	48 3b c1             	cmp    %rcx,%rax
    f1b0:	74 2a                	je     f1dc <__intel_cpu_indicator_init+0x5c>
    f1b2:	51                   	push   %rcx
    f1b3:	9d                   	popfq  
    f1b4:	48 33 c0             	xor    %rax,%rax
    f1b7:	0f a2                	cpuid  
    f1b9:	89 45 e0             	mov    %eax,-0x20(%rbp)
    f1bc:	89 5d f0             	mov    %ebx,-0x10(%rbp)
    f1bf:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    f1c2:	89 55 ec             	mov    %edx,-0x14(%rbp)
    f1c5:	48 c7 c0 01 00 00 00 	mov    $0x1,%rax
    f1cc:	0f a2                	cpuid  
    f1ce:	89 45 e8             	mov    %eax,-0x18(%rbp)
    f1d1:	89 5d b0             	mov    %ebx,-0x50(%rbp)
    f1d4:	89 4d dc             	mov    %ecx,-0x24(%rbp)
    f1d7:	89 55 b4             	mov    %edx,-0x4c(%rbp)
    f1da:	eb 1b                	jmp    f1f7 <__intel_cpu_indicator_init+0x77>
    f1dc:	48 33 c0             	xor    %rax,%rax
    f1df:	89 45 e0             	mov    %eax,-0x20(%rbp)
    f1e2:	89 45 f0             	mov    %eax,-0x10(%rbp)
    f1e5:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    f1e8:	89 45 ec             	mov    %eax,-0x14(%rbp)
    f1eb:	89 45 e8             	mov    %eax,-0x18(%rbp)
    f1ee:	89 45 b0             	mov    %eax,-0x50(%rbp)
    f1f1:	89 45 dc             	mov    %eax,-0x24(%rbp)
    f1f4:	89 45 b4             	mov    %eax,-0x4c(%rbp)
    f1f7:	bb 01 00 00 00       	mov    $0x1,%ebx
    f1fc:	81 7d f0 47 65 6e 75 	cmpl   $0x756e6547,-0x10(%rbp)
    f203:	0f 85 fb 01 00 00    	jne    f404 <__intel_cpu_indicator_init+0x284>
    f209:	81 7d ec 69 6e 65 49 	cmpl   $0x49656e69,-0x14(%rbp)
    f210:	0f 85 ee 01 00 00    	jne    f404 <__intel_cpu_indicator_init+0x284>
    f216:	81 7d e4 6e 74 65 6c 	cmpl   $0x6c65746e,-0x1c(%rbp)
    f21d:	0f 85 e1 01 00 00    	jne    f404 <__intel_cpu_indicator_init+0x284>
    f223:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
    f227:	0f 84 d7 01 00 00    	je     f404 <__intel_cpu_indicator_init+0x284>
    f22d:	8a 45 e9             	mov    -0x17(%rbp),%al
    f230:	24 0f                	and    $0xf,%al
    f232:	3c 0f                	cmp    $0xf,%al
    f234:	75 11                	jne    f247 <__intel_cpu_indicator_init+0xc7>
    f236:	b8 00 08 00 00       	mov    $0x800,%eax
    f23b:	f6 45 dc 01          	testb  $0x1,-0x24(%rbp)
    f23f:	0f 45 d8             	cmovne %eax,%ebx
    f242:	e9 bd 01 00 00       	jmpq   f404 <__intel_cpu_indicator_init+0x284>
    f247:	3c 06                	cmp    $0x6,%al
    f249:	0f 85 b5 01 00 00    	jne    f404 <__intel_cpu_indicator_init+0x284>
    f24f:	44 8b 5d dc          	mov    -0x24(%rbp),%r11d
    f253:	b8 00 08 00 00       	mov    $0x800,%eax
    f258:	41 f7 c3 01 00 00 00 	test   $0x1,%r11d
    f25f:	0f 45 d8             	cmovne %eax,%ebx
    f262:	ba 00 10 00 00       	mov    $0x1000,%edx
    f267:	41 f7 c3 00 02 00 00 	test   $0x200,%r11d
    f26e:	0f 45 da             	cmovne %edx,%ebx
    f271:	b9 00 40 00 00       	mov    $0x4000,%ecx
    f276:	41 f7 c3 00 00 40 00 	test   $0x400000,%r11d
    f27d:	44 89 df             	mov    %r11d,%edi
    f280:	0f 45 d9             	cmovne %ecx,%ebx
    f283:	be 00 20 00 00       	mov    $0x2000,%esi
    f288:	41 f7 c3 00 00 08 00 	test   $0x80000,%r11d
    f28f:	45 89 d9             	mov    %r11d,%r9d
    f292:	0f 45 de             	cmovne %esi,%ebx
    f295:	41 b8 00 80 00 00    	mov    $0x8000,%r8d
    f29b:	81 e7 00 00 90 00    	and    $0x900000,%edi
    f2a1:	81 ff 00 00 90 00    	cmp    $0x900000,%edi
    f2a7:	41 0f 44 d8          	cmove  %r8d,%ebx
    f2ab:	41 ba 00 00 01 00    	mov    $0x10000,%r10d
    f2b1:	41 81 e1 02 00 00 02 	and    $0x2000002,%r9d
    f2b8:	41 81 f9 02 00 00 02 	cmp    $0x2000002,%r9d
    f2bf:	41 0f 44 da          	cmove  %r10d,%ebx
    f2c3:	41 f7 c3 00 00 00 08 	test   $0x8000000,%r11d
    f2ca:	0f 84 34 01 00 00    	je     f404 <__intel_cpu_indicator_init+0x284>
    f2d0:	b9 00 00 00 00       	mov    $0x0,%ecx
    f2d5:	0f 01 d0             	xgetbv 
    f2d8:	89 45 d8             	mov    %eax,-0x28(%rbp)
    f2db:	8a 45 d8             	mov    -0x28(%rbp),%al
    f2de:	24 06                	and    $0x6,%al
    f2e0:	3c 06                	cmp    $0x6,%al
    f2e2:	0f 85 1c 01 00 00    	jne    f404 <__intel_cpu_indicator_init+0x284>
    f2e8:	8b 75 dc             	mov    -0x24(%rbp),%esi
    f2eb:	f7 c6 00 00 00 10    	test   $0x10000000,%esi
    f2f1:	0f 84 0d 01 00 00    	je     f404 <__intel_cpu_indicator_init+0x284>
    f2f7:	81 e6 00 00 00 20    	and    $0x20000000,%esi
    f2fd:	c1 ee 0c             	shr    $0xc,%esi
    f300:	81 c6 00 00 02 00    	add    $0x20000,%esi
    f306:	b8 07 00 00 00       	mov    $0x7,%eax
    f30b:	33 c9                	xor    %ecx,%ecx
    f30d:	0f a2                	cpuid  
    f30f:	89 45 b8             	mov    %eax,-0x48(%rbp)
    f312:	89 5d bc             	mov    %ebx,-0x44(%rbp)
    f315:	89 4d c0             	mov    %ecx,-0x40(%rbp)
    f318:	89 55 c4             	mov    %edx,-0x3c(%rbp)
    f31b:	b8 01 00 00 80       	mov    $0x80000001,%eax
    f320:	0f a2                	cpuid  
    f322:	89 45 c8             	mov    %eax,-0x38(%rbp)
    f325:	89 5d cc             	mov    %ebx,-0x34(%rbp)
    f328:	89 4d d0             	mov    %ecx,-0x30(%rbp)
    f32b:	89 55 d4             	mov    %edx,-0x2c(%rbp)
    f32e:	8b 55 bc             	mov    -0x44(%rbp),%edx
    f331:	f6 c2 20             	test   $0x20,%dl
    f334:	74 30                	je     f366 <__intel_cpu_indicator_init+0x1e6>
    f336:	89 d0                	mov    %edx,%eax
    f338:	25 08 01 00 00       	and    $0x108,%eax
    f33d:	3d 08 01 00 00       	cmp    $0x108,%eax
    f342:	75 22                	jne    f366 <__intel_cpu_indicator_init+0x1e6>
    f344:	f6 45 d0 20          	testb  $0x20,-0x30(%rbp)
    f348:	74 1c                	je     f366 <__intel_cpu_indicator_init+0x1e6>
    f34a:	f7 45 dc 00 10 00 00 	testl  $0x1000,-0x24(%rbp)
    f351:	74 13                	je     f366 <__intel_cpu_indicator_init+0x1e6>
    f353:	f6 c2 10             	test   $0x10,%dl
    f356:	74 0e                	je     f366 <__intel_cpu_indicator_init+0x1e6>
    f358:	b8 00 00 20 00       	mov    $0x200000,%eax
    f35d:	f7 c2 00 08 00 00    	test   $0x800,%edx
    f363:	0f 45 f0             	cmovne %eax,%esi
    f366:	89 d3                	mov    %edx,%ebx
    f368:	81 e3 00 00 0c 00    	and    $0xc0000,%ebx
    f36e:	81 fb 00 00 0c 00    	cmp    $0xc0000,%ebx
    f374:	bb 00 00 80 00       	mov    $0x800000,%ebx
    f379:	8a 45 d8             	mov    -0x28(%rbp),%al
    f37c:	0f 45 de             	cmovne %esi,%ebx
    f37f:	24 e0                	and    $0xe0,%al
    f381:	3c e0                	cmp    $0xe0,%al
    f383:	75 7f                	jne    f404 <__intel_cpu_indicator_init+0x284>
    f385:	89 d0                	mov    %edx,%eax
    f387:	25 00 00 01 04       	and    $0x4010000,%eax
    f38c:	3d 00 00 01 04       	cmp    $0x4010000,%eax
    f391:	75 16                	jne    f3a9 <__intel_cpu_indicator_init+0x229>
    f393:	f7 c2 00 00 00 08    	test   $0x8000000,%edx
    f399:	74 0e                	je     f3a9 <__intel_cpu_indicator_init+0x229>
    f39b:	b8 00 00 00 02       	mov    $0x2000000,%eax
    f3a0:	f7 c2 00 00 00 10    	test   $0x10000000,%edx
    f3a6:	0f 45 d8             	cmovne %eax,%ebx
    f3a9:	89 d0                	mov    %edx,%eax
    f3ab:	25 00 00 03 00       	and    $0x30000,%eax
    f3b0:	3d 00 00 03 00       	cmp    $0x30000,%eax
    f3b5:	75 16                	jne    f3cd <__intel_cpu_indicator_init+0x24d>
    f3b7:	f7 c2 00 00 00 40    	test   $0x40000000,%edx
    f3bd:	74 0e                	je     f3cd <__intel_cpu_indicator_init+0x24d>
    f3bf:	b8 00 00 00 04       	mov    $0x4000000,%eax
    f3c4:	f7 c2 00 00 00 80    	test   $0x80000000,%edx
    f3ca:	0f 45 d8             	cmovne %eax,%ebx
    f3cd:	8b 55 c0             	mov    -0x40(%rbp),%edx
    f3d0:	89 d0                	mov    %edx,%eax
    f3d2:	25 40 01 00 00       	and    $0x140,%eax
    f3d7:	3d 40 01 00 00       	cmp    $0x140,%eax
    f3dc:	75 26                	jne    f404 <__intel_cpu_indicator_init+0x284>
    f3de:	f7 c2 00 02 00 00    	test   $0x200,%edx
    f3e4:	74 1e                	je     f404 <__intel_cpu_indicator_init+0x284>
    f3e6:	f7 c2 00 04 00 00    	test   $0x400,%edx
    f3ec:	74 16                	je     f404 <__intel_cpu_indicator_init+0x284>
    f3ee:	f7 c2 00 08 00 00    	test   $0x800,%edx
    f3f4:	74 0e                	je     f404 <__intel_cpu_indicator_init+0x284>
    f3f6:	b8 00 00 00 10       	mov    $0x10000000,%eax
    f3fb:	f7 c2 00 10 00 00    	test   $0x1000,%edx
    f401:	0f 45 d8             	cmovne %eax,%ebx
    f404:	89 1d 8e 69 22 00    	mov    %ebx,0x22698e(%rip)        # 235d98 <__intel_cpu_indicator>
    f40a:	48 83 c4 50          	add    $0x50,%rsp
    f40e:	41 5f                	pop    %r15
    f410:	41 5e                	pop    %r14
    f412:	41 5d                	pop    %r13
    f414:	41 5c                	pop    %r12
    f416:	41 59                	pop    %r9
    f418:	41 58                	pop    %r8
    f41a:	5d                   	pop    %rbp
    f41b:	5e                   	pop    %rsi
    f41c:	5f                   	pop    %rdi
    f41d:	5b                   	pop    %rbx
    f41e:	59                   	pop    %rcx
    f41f:	5a                   	pop    %rdx
    f420:	58                   	pop    %rax
    f421:	c3                   	retq   
    f422:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    f429:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000f430 <__intel_cpu_features_init_x>:
    f430:	f3 0f 1e fa          	endbr64 
    f434:	50                   	push   %rax
    f435:	33 c0                	xor    %eax,%eax
    f437:	e8 24 00 00 00       	callq  f460 <__intel_cpu_features_init_body>
    f43c:	58                   	pop    %rax
    f43d:	c3                   	retq   
    f43e:	66 90                	xchg   %ax,%ax

000000000000f440 <__intel_cpu_features_init>:
    f440:	f3 0f 1e fa          	endbr64 
    f444:	50                   	push   %rax
    f445:	b8 01 00 00 00       	mov    $0x1,%eax
    f44a:	e8 11 00 00 00       	callq  f460 <__intel_cpu_features_init_body>
    f44f:	58                   	pop    %rax
    f450:	c3                   	retq   
    f451:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    f458:	00 
    f459:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000f460 <__intel_cpu_features_init_body>:
    f460:	52                   	push   %rdx
    f461:	51                   	push   %rcx
    f462:	53                   	push   %rbx
    f463:	56                   	push   %rsi
    f464:	57                   	push   %rdi
    f465:	41 50                	push   %r8
    f467:	41 51                	push   %r9
    f469:	41 57                	push   %r15
    f46b:	55                   	push   %rbp
    f46c:	41 89 c3             	mov    %eax,%r11d
    f46f:	33 c0                	xor    %eax,%eax
    f471:	0f a2                	cpuid  
    f473:	89 44 24 f0          	mov    %eax,-0x10(%rsp)
    f477:	89 5c 24 f4          	mov    %ebx,-0xc(%rsp)
    f47b:	89 4c 24 f8          	mov    %ecx,-0x8(%rsp)
    f47f:	89 54 24 fc          	mov    %edx,-0x4(%rsp)
    f483:	83 7c 24 f0 00       	cmpl   $0x0,-0x10(%rsp)
    f488:	0f 84 be 04 00 00    	je     f94c <__intel_cpu_features_init_body+0x4ec>
    f48e:	41 83 fb 01          	cmp    $0x1,%r11d
    f492:	0f 84 cc 04 00 00    	je     f964 <__intel_cpu_features_init_body+0x504>
    f498:	b8 01 00 00 00       	mov    $0x1,%eax
    f49d:	0f a2                	cpuid  
    f49f:	89 d7                	mov    %edx,%edi
    f4a1:	89 d5                	mov    %edx,%ebp
    f4a3:	81 e7 00 80 00 00    	and    $0x8000,%edi
    f4a9:	83 e5 01             	and    $0x1,%ebp
    f4ac:	89 ce                	mov    %ecx,%esi
    f4ae:	41 89 c2             	mov    %eax,%r10d
    f4b1:	48 c1 ef 0d          	shr    $0xd,%rdi
    f4b5:	f7 c2 00 00 80 00    	test   $0x800000,%edx
    f4bb:	48 8d 6c 6f 01       	lea    0x1(%rdi,%rbp,2),%rbp
    f4c0:	4c 8d 45 08          	lea    0x8(%rbp),%r8
    f4c4:	49 0f 45 e8          	cmovne %r8,%rbp
    f4c8:	f7 c2 00 00 00 01    	test   $0x1000000,%edx
    f4ce:	75 25                	jne    f4f5 <__intel_cpu_features_init_body+0x95>
    f4d0:	89 f7                	mov    %esi,%edi
    f4d2:	81 e7 00 00 00 40    	and    $0x40000000,%edi
    f4d8:	b8 07 00 00 00       	mov    $0x7,%eax
    f4dd:	33 c9                	xor    %ecx,%ecx
    f4df:	0f a2                	cpuid  
    f4e1:	48 c1 ef 0d          	shr    $0xd,%rdi
    f4e5:	41 89 d1             	mov    %edx,%r9d
    f4e8:	48 03 ef             	add    %rdi,%rbp
    f4eb:	41 89 c8             	mov    %ecx,%r8d
    f4ee:	89 df                	mov    %ebx,%edi
    f4f0:	e9 e3 00 00 00       	jmpq   f5d8 <__intel_cpu_features_init_body+0x178>
    f4f5:	41 89 f1             	mov    %esi,%r9d
    f4f8:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
    f4fc:	48 83 c5 30          	add    $0x30,%rbp
    f500:	f7 c2 00 00 00 02    	test   $0x2000000,%edx
    f506:	48 0f 45 fd          	cmovne %rbp,%rdi
    f50a:	81 e2 00 00 00 04    	and    $0x4000000,%edx
    f510:	41 81 e1 00 02 00 00 	and    $0x200,%r9d
    f517:	48 c1 ea 14          	shr    $0x14,%rdx
    f51b:	f7 c6 01 00 00 00    	test   $0x1,%esi
    f521:	48 8d 2c 3a          	lea    (%rdx,%rdi,1),%rbp
    f525:	4c 8d 84 17 80 00 00 	lea    0x80(%rdi,%rdx,1),%r8
    f52c:	00 
    f52d:	89 f7                	mov    %esi,%edi
    f52f:	49 0f 45 e8          	cmovne %r8,%rbp
    f533:	81 e7 00 00 08 00    	and    $0x80000,%edi
    f539:	49 d1 e9             	shr    %r9
    f53c:	89 f2                	mov    %esi,%edx
    f53e:	49 0b e9             	or     %r9,%rbp
    f541:	41 89 f1             	mov    %esi,%r9d
    f544:	49 89 ef             	mov    %rbp,%r15
    f547:	41 81 e1 00 00 80 00 	and    $0x800000,%r9d
    f54e:	49 81 cf 00 08 00 00 	or     $0x800,%r15
    f555:	f7 c6 00 00 40 00    	test   $0x400000,%esi
    f55b:	49 0f 45 ef          	cmovne %r15,%rbp
    f55f:	81 e2 00 00 00 02    	and    $0x2000000,%edx
    f565:	48 c1 ef 0a          	shr    $0xa,%rdi
    f569:	48 0b ef             	or     %rdi,%rbp
    f56c:	49 89 e8             	mov    %rbp,%r8
    f56f:	49 81 c8 00 04 00 00 	or     $0x400,%r8
    f576:	f7 c6 00 00 10 00    	test   $0x100000,%esi
    f57c:	49 0f 45 e8          	cmovne %r8,%rbp
    f580:	49 c1 e9 0b          	shr    $0xb,%r9
    f584:	49 0b e9             	or     %r9,%rbp
    f587:	48 89 e8             	mov    %rbp,%rax
    f58a:	48 0d 00 20 00 00    	or     $0x2000,%rax
    f590:	f7 c6 02 00 00 00    	test   $0x2,%esi
    f596:	48 0f 45 e8          	cmovne %rax,%rbp
    f59a:	48 c1 ea 0b          	shr    $0xb,%rdx
    f59e:	48 0b ea             	or     %rdx,%rbp
    f5a1:	b8 07 00 00 00       	mov    $0x7,%eax
    f5a6:	33 c9                	xor    %ecx,%ecx
    f5a8:	0f a2                	cpuid  
    f5aa:	41 89 c8             	mov    %ecx,%r8d
    f5ad:	89 df                	mov    %ebx,%edi
    f5af:	48 b9 00 00 00 00 08 	movabs $0x800000000,%rcx
    f5b6:	00 00 00 
    f5b9:	89 f3                	mov    %esi,%ebx
    f5bb:	48 0b cd             	or     %rbp,%rcx
    f5be:	f7 c7 00 00 00 20    	test   $0x20000000,%edi
    f5c4:	41 89 d1             	mov    %edx,%r9d
    f5c7:	48 0f 45 e9          	cmovne %rcx,%rbp
    f5cb:	81 e3 00 00 00 40    	and    $0x40000000,%ebx
    f5d1:	48 c1 eb 0d          	shr    $0xd,%rbx
    f5d5:	48 0b eb             	or     %rbx,%rbp
    f5d8:	89 f8                	mov    %edi,%eax
    f5da:	48 89 eb             	mov    %rbp,%rbx
    f5dd:	25 08 01 00 00       	and    $0x108,%eax
    f5e2:	41 89 ff             	mov    %edi,%r15d
    f5e5:	48 81 cb 00 00 08 00 	or     $0x80000,%rbx
    f5ec:	3d 08 01 00 00       	cmp    $0x108,%eax
    f5f1:	89 f8                	mov    %edi,%eax
    f5f3:	89 f9                	mov    %edi,%ecx
    f5f5:	48 0f 44 eb          	cmove  %rbx,%rbp
    f5f9:	41 83 e7 04          	and    $0x4,%r15d
    f5fd:	25 00 08 00 00       	and    $0x800,%eax
    f602:	81 e1 00 00 04 00    	and    $0x40000,%ecx
    f608:	49 c1 e7 33          	shl    $0x33,%r15
    f60c:	48 ba 00 00 00 00 00 	movabs $0x2000000000000,%rdx
    f613:	00 02 00 
    f616:	4c 0b fd             	or     %rbp,%r15
    f619:	4c 89 fd             	mov    %r15,%rbp
    f61c:	48 81 cd 00 00 20 00 	or     $0x200000,%rbp
    f623:	f7 c7 10 00 00 00    	test   $0x10,%edi
    f629:	4c 0f 45 fd          	cmovne %rbp,%r15
    f62d:	48 bd 00 00 00 00 00 	movabs $0x40000000000000,%rbp
    f634:	00 40 00 
    f637:	48 c1 e0 0b          	shl    $0xb,%rax
    f63b:	4c 0b f8             	or     %rax,%r15
    f63e:	4c 89 fb             	mov    %r15,%rbx
    f641:	48 81 cb 00 00 00 10 	or     $0x10000000,%rbx
    f648:	f7 c7 00 00 08 00    	test   $0x80000,%edi
    f64e:	4c 0f 45 fb          	cmovne %rbx,%r15
    f652:	48 c1 e1 0b          	shl    $0xb,%rcx
    f656:	4c 0b f9             	or     %rcx,%r15
    f659:	49 0b d7             	or     %r15,%rdx
    f65c:	f7 c7 00 00 00 01    	test   $0x1000000,%edi
    f662:	4c 0f 45 fa          	cmovne %rdx,%r15
    f666:	b8 01 00 00 80       	mov    $0x80000001,%eax
    f66b:	0f a2                	cpuid  
    f66d:	83 e1 20             	and    $0x20,%ecx
    f670:	48 c1 e1 0f          	shl    $0xf,%rcx
    f674:	4c 0b f9             	or     %rcx,%r15
    f677:	b8 08 00 00 80       	mov    $0x80000008,%eax
    f67c:	0f a2                	cpuid  
    f67e:	49 0b ef             	or     %r15,%rbp
    f681:	f7 c3 00 02 00 00    	test   $0x200,%ebx
    f687:	44 89 c0             	mov    %r8d,%eax
    f68a:	44 89 c3             	mov    %r8d,%ebx
    f68d:	4c 0f 45 fd          	cmovne %rbp,%r15
    f691:	25 00 01 00 00       	and    $0x100,%eax
    f696:	81 e3 80 00 00 00    	and    $0x80,%ebx
    f69c:	48 bd 00 00 00 00 00 	movabs $0x8000000000000,%rbp
    f6a3:	00 08 00 
    f6a6:	48 c1 e0 25          	shl    $0x25,%rax
    f6aa:	49 0b c7             	or     %r15,%rax
    f6ad:	49 bf 00 00 00 00 00 	movabs $0x4000000000000,%r15
    f6b4:	00 04 00 
    f6b7:	4c 0b f8             	or     %rax,%r15
    f6ba:	41 f7 c0 00 00 40 00 	test   $0x400000,%r8d
    f6c1:	49 0f 45 c7          	cmovne %r15,%rax
    f6c5:	48 c1 e3 2d          	shl    $0x2d,%rbx
    f6c9:	48 0b d8             	or     %rax,%rbx
    f6cc:	48 0b eb             	or     %rbx,%rbp
    f6cf:	41 f7 c1 00 00 10 00 	test   $0x100000,%r9d
    f6d6:	48 0f 45 dd          	cmovne %rbp,%rbx
    f6da:	44 89 cd             	mov    %r9d,%ebp
    f6dd:	81 e5 00 00 04 00    	and    $0x40000,%ebp
    f6e3:	48 c1 e5 25          	shl    $0x25,%rbp
    f6e7:	48 0b eb             	or     %rbx,%rbp
    f6ea:	b8 14 00 00 00       	mov    $0x14,%eax
    f6ef:	33 c9                	xor    %ecx,%ecx
    f6f1:	0f a2                	cpuid  
    f6f3:	48 89 ea             	mov    %rbp,%rdx
    f6f6:	48 81 ca 00 00 00 02 	or     $0x2000000,%rdx
    f6fd:	f6 c3 10             	test   $0x10,%bl
    f700:	48 0f 45 ea          	cmovne %rdx,%rbp
    f704:	f7 c6 00 00 00 08    	test   $0x8000000,%esi
    f70a:	0f 84 dd 01 00 00    	je     f8ed <__intel_cpu_features_init_body+0x48d>
    f710:	33 c9                	xor    %ecx,%ecx
    f712:	0f 01 d0             	xgetbv 
    f715:	48 83 cd 01          	or     $0x1,%rbp
    f719:	89 c2                	mov    %eax,%edx
    f71b:	83 e2 06             	and    $0x6,%edx
    f71e:	83 fa 06             	cmp    $0x6,%edx
    f721:	0f 85 c6 01 00 00    	jne    f8ed <__intel_cpu_features_init_body+0x48d>
    f727:	f7 c6 00 00 00 10    	test   $0x10000000,%esi
    f72d:	74 2f                	je     f75e <__intel_cpu_features_init_body+0x2fe>
    f72f:	48 81 cd 00 00 01 00 	or     $0x10000,%rbp
    f736:	48 ba 00 00 00 00 00 	movabs $0x400000000000,%rdx
    f73d:	40 00 00 
    f740:	44 89 c1             	mov    %r8d,%ecx
    f743:	48 0b d5             	or     %rbp,%rdx
    f746:	41 f7 c0 00 02 00 00 	test   $0x200,%r8d
    f74d:	48 0f 45 ea          	cmovne %rdx,%rbp
    f751:	81 e1 00 04 00 00    	and    $0x400,%ecx
    f757:	48 c1 e1 25          	shl    $0x25,%rcx
    f75b:	48 0b e9             	or     %rcx,%rbp
    f75e:	48 89 ea             	mov    %rbp,%rdx
    f761:	89 f9                	mov    %edi,%ecx
    f763:	48 81 ca 00 80 00 00 	or     $0x8000,%rdx
    f76a:	f7 c6 00 00 00 20    	test   $0x20000000,%esi
    f770:	48 0f 45 ea          	cmovne %rdx,%rbp
    f774:	83 e1 20             	and    $0x20,%ecx
    f777:	48 c1 e1 12          	shl    $0x12,%rcx
    f77b:	48 0b e9             	or     %rcx,%rbp
    f77e:	48 89 eb             	mov    %rbp,%rbx
    f781:	48 81 cb 00 00 04 00 	or     $0x40000,%rbx
    f788:	f7 c6 00 10 00 00    	test   $0x1000,%esi
    f78e:	89 c6                	mov    %eax,%esi
    f790:	48 0f 45 eb          	cmovne %rbx,%rbp
    f794:	83 e6 18             	and    $0x18,%esi
    f797:	83 fe 18             	cmp    $0x18,%esi
    f79a:	75 1b                	jne    f7b7 <__intel_cpu_features_init_body+0x357>
    f79c:	48 83 cd 01          	or     $0x1,%rbp
    f7a0:	48 ba 00 00 00 00 10 	movabs $0x1000000000,%rdx
    f7a7:	00 00 00 
    f7aa:	48 0b d5             	or     %rbp,%rdx
    f7ad:	f7 c7 00 40 00 00    	test   $0x4000,%edi
    f7b3:	48 0f 45 ea          	cmovne %rdx,%rbp
    f7b7:	25 e0 00 00 00       	and    $0xe0,%eax
    f7bc:	3d e0 00 00 00       	cmp    $0xe0,%eax
    f7c1:	0f 85 26 01 00 00    	jne    f8ed <__intel_cpu_features_init_body+0x48d>
    f7c7:	48 83 cd 01          	or     $0x1,%rbp
    f7cb:	89 f9                	mov    %edi,%ecx
    f7cd:	48 89 ea             	mov    %rbp,%rdx
    f7d0:	81 e1 00 00 00 10    	and    $0x10000000,%ecx
    f7d6:	48 81 ca 00 00 00 08 	or     $0x8000000,%rdx
    f7dd:	f7 c7 00 00 01 00    	test   $0x10000,%edi
    f7e3:	89 fb                	mov    %edi,%ebx
    f7e5:	89 f8                	mov    %edi,%eax
    f7e7:	48 0f 45 ea          	cmovne %rdx,%rbp
    f7eb:	81 e3 00 00 00 04    	and    $0x4000000,%ebx
    f7f1:	48 c1 e1 06          	shl    $0x6,%rcx
    f7f5:	25 00 00 00 40       	and    $0x40000000,%eax
    f7fa:	48 0b cd             	or     %rbp,%rcx
    f7fd:	48 bd 00 00 00 00 01 	movabs $0x100000000,%rbp
    f804:	00 00 00 
    f807:	48 0b e9             	or     %rcx,%rbp
    f80a:	f7 c7 00 00 00 08    	test   $0x8000000,%edi
    f810:	41 89 ff             	mov    %edi,%r15d
    f813:	44 89 c2             	mov    %r8d,%edx
    f816:	48 0f 45 cd          	cmovne %rbp,%rcx
    f81a:	48 bd 00 00 00 00 40 	movabs $0x4000000000,%rbp
    f821:	00 00 00 
    f824:	48 c1 e3 07          	shl    $0x7,%rbx
    f828:	41 81 e7 00 00 00 80 	and    $0x80000000,%r15d
    f82f:	48 0b d9             	or     %rcx,%rbx
    f832:	81 e2 00 40 00 00    	and    $0x4000,%edx
    f838:	48 89 de             	mov    %rbx,%rsi
    f83b:	48 81 ce 00 00 00 01 	or     $0x1000000,%rsi
    f842:	f7 c7 00 00 02 00    	test   $0x20000,%edi
    f848:	48 0f 45 de          	cmovne %rsi,%rbx
    f84c:	81 e7 00 00 20 00    	and    $0x200000,%edi
    f852:	48 c1 e0 07          	shl    $0x7,%rax
    f856:	48 0b c3             	or     %rbx,%rax
    f859:	48 0b e8             	or     %rax,%rbp
    f85c:	41 81 ff 00 00 00 80 	cmp    $0x80000000,%r15d
    f863:	48 0f 44 c5          	cmove  %rbp,%rax
    f867:	48 bd 00 00 00 00 80 	movabs $0x8000000000,%rbp
    f86e:	00 00 00 
    f871:	48 c1 e7 09          	shl    $0x9,%rdi
    f875:	48 0b c7             	or     %rdi,%rax
    f878:	48 0b e8             	or     %rax,%rbp
    f87b:	41 f7 c0 02 00 00 00 	test   $0x2,%r8d
    f882:	48 0f 45 c5          	cmovne %rbp,%rax
    f886:	48 bd 00 00 00 00 00 	movabs $0x80000000000,%rbp
    f88d:	08 00 00 
    f890:	48 c1 e2 1c          	shl    $0x1c,%rdx
    f894:	48 0b d0             	or     %rax,%rdx
    f897:	48 b8 00 00 00 00 00 	movabs $0x20000000000,%rax
    f89e:	02 00 00 
    f8a1:	48 0b c2             	or     %rdx,%rax
    f8a4:	41 f7 c1 04 00 00 00 	test   $0x4,%r9d
    f8ab:	48 0f 45 d0          	cmovne %rax,%rdx
    f8af:	41 83 e1 08          	and    $0x8,%r9d
    f8b3:	48 b8 00 00 00 00 00 	movabs $0x1000000000000,%rax
    f8ba:	00 01 00 
    f8bd:	49 c1 e1 25          	shl    $0x25,%r9
    f8c1:	4c 0b ca             	or     %rdx,%r9
    f8c4:	49 0b e9             	or     %r9,%rbp
    f8c7:	41 f7 c0 00 10 00 00 	test   $0x1000,%r8d
    f8ce:	4c 0f 45 cd          	cmovne %rbp,%r9
    f8d2:	44 89 c5             	mov    %r8d,%ebp
    f8d5:	83 e5 40             	and    $0x40,%ebp
    f8d8:	48 c1 e5 26          	shl    $0x26,%rbp
    f8dc:	49 0b e9             	or     %r9,%rbp
    f8df:	48 0b c5             	or     %rbp,%rax
    f8e2:	41 f7 c0 00 08 00 00 	test   $0x800,%r8d
    f8e9:	48 0f 45 e8          	cmovne %rax,%rbp
    f8ed:	44 89 d0             	mov    %r10d,%eax
    f8f0:	c1 e8 0c             	shr    $0xc,%eax
    f8f3:	41 c1 ea 04          	shr    $0x4,%r10d
    f8f7:	25 f0 00 00 00       	and    $0xf0,%eax
    f8fc:	41 83 e2 0f          	and    $0xf,%r10d
    f900:	41 03 c2             	add    %r10d,%eax
    f903:	83 f8 1c             	cmp    $0x1c,%eax
    f906:	74 0a                	je     f912 <__intel_cpu_features_init_body+0x4b2>
    f908:	83 f8 26             	cmp    $0x26,%eax
    f90b:	74 05                	je     f912 <__intel_cpu_features_init_body+0x4b2>
    f90d:	83 f8 27             	cmp    $0x27,%eax
    f910:	75 05                	jne    f917 <__intel_cpu_features_init_body+0x4b7>
    f912:	48 0f ba ed 1f       	bts    $0x1f,%rbp
    f917:	41 83 fb 01          	cmp    $0x1,%r11d
    f91b:	74 14                	je     f931 <__intel_cpu_features_init_body+0x4d1>
    f91d:	48 89 2d 84 64 22 00 	mov    %rbp,0x226484(%rip)        # 235da8 <__intel_cpu_feature_indicator_x>
    f924:	5d                   	pop    %rbp
    f925:	41 5f                	pop    %r15
    f927:	41 59                	pop    %r9
    f929:	41 58                	pop    %r8
    f92b:	5f                   	pop    %rdi
    f92c:	5e                   	pop    %rsi
    f92d:	5b                   	pop    %rbx
    f92e:	59                   	pop    %rcx
    f92f:	5a                   	pop    %rdx
    f930:	c3                   	retq   
    f931:	48 89 2d 68 64 22 00 	mov    %rbp,0x226468(%rip)        # 235da0 <__intel_cpu_feature_indicator>
    f938:	48 89 2d 69 64 22 00 	mov    %rbp,0x226469(%rip)        # 235da8 <__intel_cpu_feature_indicator_x>
    f93f:	5d                   	pop    %rbp
    f940:	41 5f                	pop    %r15
    f942:	41 59                	pop    %r9
    f944:	41 58                	pop    %r8
    f946:	5f                   	pop    %rdi
    f947:	5e                   	pop    %rsi
    f948:	5b                   	pop    %rbx
    f949:	59                   	pop    %rcx
    f94a:	5a                   	pop    %rdx
    f94b:	c3                   	retq   
    f94c:	48 c7 05 49 64 22 00 	movq   $0x1,0x226449(%rip)        # 235da0 <__intel_cpu_feature_indicator>
    f953:	01 00 00 00 
    f957:	5d                   	pop    %rbp
    f958:	41 5f                	pop    %r15
    f95a:	41 59                	pop    %r9
    f95c:	41 58                	pop    %r8
    f95e:	5f                   	pop    %rdi
    f95f:	5e                   	pop    %rsi
    f960:	5b                   	pop    %rbx
    f961:	59                   	pop    %rcx
    f962:	5a                   	pop    %rdx
    f963:	c3                   	retq   
    f964:	81 7c 24 f4 47 65 6e 	cmpl   $0x756e6547,-0xc(%rsp)
    f96b:	75 
    f96c:	75 de                	jne    f94c <__intel_cpu_features_init_body+0x4ec>
    f96e:	81 7c 24 fc 69 6e 65 	cmpl   $0x49656e69,-0x4(%rsp)
    f975:	49 
    f976:	75 d4                	jne    f94c <__intel_cpu_features_init_body+0x4ec>
    f978:	81 7c 24 f8 6e 74 65 	cmpl   $0x6c65746e,-0x8(%rsp)
    f97f:	6c 
    f980:	75 ca                	jne    f94c <__intel_cpu_features_init_body+0x4ec>
    f982:	e9 11 fb ff ff       	jmpq   f498 <__intel_cpu_features_init_body+0x38>
    f987:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    f98e:	00 00 

000000000000f990 <_intel_fast_memcpy.A>:
    f990:	f3 0f 1e fa          	endbr64 
    f994:	e9 e0 ec ff ff       	jmpq   e679 <__memcpy>
    f999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000f9a0 <_intel_fast_memcpy.J>:
    f9a0:	f3 0f 1e fa          	endbr64 
    f9a4:	e9 07 6b 01 00       	jmpq   264b0 <__intel_memcpy>
    f9a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000f9b0 <_intel_fast_memcpy.M>:
    f9b0:	f3 0f 1e fa          	endbr64 
    f9b4:	e9 87 5e 00 00       	jmpq   15840 <__intel_ssse3_memcpy>
    f9b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000f9c0 <_intel_fast_memcpy.P>:
    f9c0:	f3 0f 1e fa          	endbr64 
    f9c4:	e9 47 88 00 00       	jmpq   18210 <__intel_ssse3_rep_memcpy>
    f9c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000f9d0 <_intel_fast_memcpy.V>:
    f9d0:	f3 0f 1e fa          	endbr64 
    f9d4:	e9 a7 01 00 00       	jmpq   fb80 <__intel_avx_rep_memcpy>
    f9d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000f9e0 <_intel_fast_memcpy.Z>:
    f9e0:	f3 0f 1e fa          	endbr64 
    f9e4:	e9 d7 29 00 00       	jmpq   123c0 <__intel_mic_avx512f_memcpy>
    f9e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000f9f0 <_intel_fast_memcpy.a>:
    f9f0:	f3 0f 1e fa          	endbr64 
    f9f4:	e9 87 01 00 00       	jmpq   fb80 <__intel_avx_rep_memcpy>
    f9f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000fa00 <_intel_fast_memcpy>:
    fa00:	f3 0f 1e fa          	endbr64 
    fa04:	56                   	push   %rsi
    fa05:	48 b9 ff 97 9d 18 07 	movabs $0x7189d97ff,%rcx
    fa0c:	00 00 00 
    fa0f:	48 8d 05 8a 63 22 00 	lea    0x22638a(%rip),%rax        # 235da0 <__intel_cpu_feature_indicator>
    fa16:	4c 8b 00             	mov    (%rax),%r8
    fa19:	4c 23 c1             	and    %rcx,%r8
    fa1c:	4c 3b c1             	cmp    %rcx,%r8
    fa1f:	75 09                	jne    fa2a <_intel_fast_memcpy+0x2a>
    fa21:	48 83 c4 08          	add    $0x8,%rsp
    fa25:	e9 b6 ff ff ff       	jmpq   f9e0 <_intel_fast_memcpy.Z>
    fa2a:	44 8b 08             	mov    (%rax),%r9d
    fa2d:	45 89 c8             	mov    %r9d,%r8d
    fa30:	41 81 e0 ff 97 9d 00 	and    $0x9d97ff,%r8d
    fa37:	41 81 f8 ff 97 9d 00 	cmp    $0x9d97ff,%r8d
    fa3e:	75 09                	jne    fa49 <_intel_fast_memcpy+0x49>
    fa40:	48 83 c4 08          	add    $0x8,%rsp
    fa44:	e9 87 ff ff ff       	jmpq   f9d0 <_intel_fast_memcpy.V>
    fa49:	45 89 c8             	mov    %r9d,%r8d
    fa4c:	41 81 e0 ff 17 00 00 	and    $0x17ff,%r8d
    fa53:	41 81 f8 ff 17 00 00 	cmp    $0x17ff,%r8d
    fa5a:	75 09                	jne    fa65 <_intel_fast_memcpy+0x65>
    fa5c:	48 83 c4 08          	add    $0x8,%rsp
    fa60:	e9 5b ff ff ff       	jmpq   f9c0 <_intel_fast_memcpy.P>
    fa65:	41 81 e1 ff 01 00 00 	and    $0x1ff,%r9d
    fa6c:	41 81 f9 ff 01 00 00 	cmp    $0x1ff,%r9d
    fa73:	75 09                	jne    fa7e <_intel_fast_memcpy+0x7e>
    fa75:	48 83 c4 08          	add    $0x8,%rsp
    fa79:	e9 32 ff ff ff       	jmpq   f9b0 <_intel_fast_memcpy.M>
    fa7e:	44 8a 00             	mov    (%rax),%r8b
    fa81:	41 80 e0 7f          	and    $0x7f,%r8b
    fa85:	41 80 f8 7f          	cmp    $0x7f,%r8b
    fa89:	75 09                	jne    fa94 <_intel_fast_memcpy+0x94>
    fa8b:	48 83 c4 08          	add    $0x8,%rsp
    fa8f:	e9 0c ff ff ff       	jmpq   f9a0 <_intel_fast_memcpy.J>
    fa94:	f6 00 01             	testb  $0x1,(%rax)
    fa97:	74 09                	je     faa2 <_intel_fast_memcpy+0xa2>
    fa99:	48 83 c4 08          	add    $0x8,%rsp
    fa9d:	e9 ee fe ff ff       	jmpq   f990 <_intel_fast_memcpy.A>
    faa2:	ff 15 e8 54 22 00    	callq  *0x2254e8(%rip)        # 234f90 <_GLOBAL_OFFSET_TABLE_+0x20>
    faa8:	e9 69 ff ff ff       	jmpq   fa16 <_intel_fast_memcpy+0x16>
    faad:	0f 1f 00             	nopl   (%rax)

000000000000fab0 <_intel_fast_memset.A>:
    fab0:	f3 0f 1e fa          	endbr64 
    fab4:	e9 5e ed ff ff       	jmpq   e817 <__memset>
    fab9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000fac0 <_intel_fast_memset.J>:
    fac0:	f3 0f 1e fa          	endbr64 
    fac4:	e9 97 81 01 00       	jmpq   27c60 <__intel_memset>
    fac9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000fad0 <_intel_fast_memset.V>:
    fad0:	f3 0f 1e fa          	endbr64 
    fad4:	e9 77 18 00 00       	jmpq   11350 <__intel_avx_rep_memset>
    fad9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000fae0 <_intel_fast_memset.Z>:
    fae0:	f3 0f 1e fa          	endbr64 
    fae4:	e9 57 44 00 00       	jmpq   13f40 <__intel_mic_avx512f_memset>
    fae9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000faf0 <_intel_fast_memset.a>:
    faf0:	f3 0f 1e fa          	endbr64 
    faf4:	e9 57 18 00 00       	jmpq   11350 <__intel_avx_rep_memset>
    faf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000fb00 <_intel_fast_memset>:
    fb00:	f3 0f 1e fa          	endbr64 
    fb04:	56                   	push   %rsi
    fb05:	48 b9 ff 97 9d 18 07 	movabs $0x7189d97ff,%rcx
    fb0c:	00 00 00 
    fb0f:	48 8d 05 8a 62 22 00 	lea    0x22628a(%rip),%rax        # 235da0 <__intel_cpu_feature_indicator>
    fb16:	4c 8b 00             	mov    (%rax),%r8
    fb19:	4c 23 c1             	and    %rcx,%r8
    fb1c:	4c 3b c1             	cmp    %rcx,%r8
    fb1f:	75 09                	jne    fb2a <_intel_fast_memset+0x2a>
    fb21:	48 83 c4 08          	add    $0x8,%rsp
    fb25:	e9 b6 ff ff ff       	jmpq   fae0 <_intel_fast_memset.Z>
    fb2a:	44 8b 00             	mov    (%rax),%r8d
    fb2d:	41 81 e0 ff 97 9d 00 	and    $0x9d97ff,%r8d
    fb34:	41 81 f8 ff 97 9d 00 	cmp    $0x9d97ff,%r8d
    fb3b:	75 09                	jne    fb46 <_intel_fast_memset+0x46>
    fb3d:	48 83 c4 08          	add    $0x8,%rsp
    fb41:	e9 8a ff ff ff       	jmpq   fad0 <_intel_fast_memset.V>
    fb46:	44 8a 00             	mov    (%rax),%r8b
    fb49:	41 80 e0 7f          	and    $0x7f,%r8b
    fb4d:	41 80 f8 7f          	cmp    $0x7f,%r8b
    fb51:	75 09                	jne    fb5c <_intel_fast_memset+0x5c>
    fb53:	48 83 c4 08          	add    $0x8,%rsp
    fb57:	e9 64 ff ff ff       	jmpq   fac0 <_intel_fast_memset.J>
    fb5c:	f6 00 01             	testb  $0x1,(%rax)
    fb5f:	74 09                	je     fb6a <_intel_fast_memset+0x6a>
    fb61:	48 83 c4 08          	add    $0x8,%rsp
    fb65:	e9 46 ff ff ff       	jmpq   fab0 <_intel_fast_memset.A>
    fb6a:	ff 15 20 54 22 00    	callq  *0x225420(%rip)        # 234f90 <_GLOBAL_OFFSET_TABLE_+0x20>
    fb70:	eb a4                	jmp    fb16 <_intel_fast_memset+0x16>
    fb72:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    fb79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000000fb80 <__intel_avx_rep_memcpy>:
    fb80:	f3 0f 1e fa          	endbr64 
    fb84:	41 54                	push   %r12
    fb86:	48 89 d1             	mov    %rdx,%rcx
    fb89:	4c 8d 15 f8 5c 22 00 	lea    0x225cf8(%rip),%r10        # 235888 <__libirc_largest_cache_size_half>
    fb90:	4c 8d 05 f9 5c 22 00 	lea    0x225cf9(%rip),%r8        # 235890 <__libirc_data_cache_size_half>
    fb97:	48 89 f8             	mov    %rdi,%rax
    fb9a:	48 81 f9 00 01 00 00 	cmp    $0x100,%rcx
    fba1:	77 1d                	ja     fbc0 <__intel_avx_rep_memcpy+0x40>
    fba3:	4c 8d 0d 86 0f 00 00 	lea    0xf86(%rip),%r9        # 10b30 <__intel_avx_rep_memcpy+0xfb0>
    fbaa:	4d 2b 0c c9          	sub    (%r9,%rcx,8),%r9
    fbae:	3e 41 ff e1          	notrack jmpq *%r9
    fbb2:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    fbb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    fbc0:	4c 8d 0d 69 06 00 00 	lea    0x669(%rip),%r9        # 10230 <__intel_avx_rep_memcpy+0x6b0>
    fbc7:	49 89 fb             	mov    %rdi,%r11
    fbca:	49 83 e3 1f          	and    $0x1f,%r11
    fbce:	74 26                	je     fbf6 <__intel_avx_rep_memcpy+0x76>
    fbd0:	49 f7 db             	neg    %r11
    fbd3:	49 83 c3 20          	add    $0x20,%r11
    fbd7:	49 2b cb             	sub    %r11,%rcx
    fbda:	49 89 fc             	mov    %rdi,%r12
    fbdd:	4d 03 e3             	add    %r11,%r12
    fbe0:	48 89 f2             	mov    %rsi,%rdx
    fbe3:	49 03 d3             	add    %r11,%rdx
    fbe6:	4f 2b 0c d9          	sub    (%r9,%r11,8),%r9
    fbea:	3e 41 ff e1          	notrack jmpq *%r9
    fbee:	66 90                	xchg   %ax,%ax
    fbf0:	49 03 fb             	add    %r11,%rdi
    fbf3:	49 03 f3             	add    %r11,%rsi
    fbf6:	48 81 f9 00 01 00 00 	cmp    $0x100,%rcx
    fbfd:	0f 8c 4d 02 00 00    	jl     fe50 <__intel_avx_rep_memcpy+0x2d0>
    fc03:	45 8b 08             	mov    (%r8),%r9d
    fc06:	4d 89 cb             	mov    %r9,%r11
    fc09:	49 c1 e9 02          	shr    $0x2,%r9
    fc0d:	4d 2b d9             	sub    %r9,%r11
    fc10:	49 3b cb             	cmp    %r11,%rcx
    fc13:	0f 83 97 00 00 00    	jae    fcb0 <__intel_avx_rep_memcpy+0x130>
    fc19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    fc20:	c5 fe 6f 0e          	vmovdqu (%rsi),%ymm1
    fc24:	c5 fe 6f 56 20       	vmovdqu 0x20(%rsi),%ymm2
    fc29:	c5 fe 6f 5e 40       	vmovdqu 0x40(%rsi),%ymm3
    fc2e:	c5 fe 6f 66 60       	vmovdqu 0x60(%rsi),%ymm4
    fc33:	c5 fe 6f ae 80 00 00 	vmovdqu 0x80(%rsi),%ymm5
    fc3a:	00 
    fc3b:	c5 fe 6f b6 a0 00 00 	vmovdqu 0xa0(%rsi),%ymm6
    fc42:	00 
    fc43:	c5 fe 6f be c0 00 00 	vmovdqu 0xc0(%rsi),%ymm7
    fc4a:	00 
    fc4b:	c5 7e 6f 86 e0 00 00 	vmovdqu 0xe0(%rsi),%ymm8
    fc52:	00 
    fc53:	c5 fd 7f 0f          	vmovdqa %ymm1,(%rdi)
    fc57:	c5 fd 7f 57 20       	vmovdqa %ymm2,0x20(%rdi)
    fc5c:	c5 fd 7f 5f 40       	vmovdqa %ymm3,0x40(%rdi)
    fc61:	c5 fd 7f 67 60       	vmovdqa %ymm4,0x60(%rdi)
    fc66:	c5 fd 7f af 80 00 00 	vmovdqa %ymm5,0x80(%rdi)
    fc6d:	00 
    fc6e:	c5 fd 7f b7 a0 00 00 	vmovdqa %ymm6,0xa0(%rdi)
    fc75:	00 
    fc76:	c5 fd 7f bf c0 00 00 	vmovdqa %ymm7,0xc0(%rdi)
    fc7d:	00 
    fc7e:	c5 7d 7f 87 e0 00 00 	vmovdqa %ymm8,0xe0(%rdi)
    fc85:	00 
    fc86:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    fc8d:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    fc94:	48 81 e9 00 01 00 00 	sub    $0x100,%rcx
    fc9b:	48 81 f9 00 01 00 00 	cmp    $0x100,%rcx
    fca2:	0f 83 78 ff ff ff    	jae    fc20 <__intel_avx_rep_memcpy+0xa0>
    fca8:	e9 a3 01 00 00       	jmpq   fe50 <__intel_avx_rep_memcpy+0x2d0>
    fcad:	0f 1f 00             	nopl   (%rax)
    fcb0:	45 8b 0a             	mov    (%r10),%r9d
    fcb3:	49 3b c9             	cmp    %r9,%rcx
    fcb6:	73 18                	jae    fcd0 <__intel_avx_rep_memcpy+0x150>
    fcb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    fcbf:	00 
    fcc0:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
    fcc2:	e9 79 16 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    fcc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    fcce:	00 00 
    fcd0:	0f 18 8e 00 02 00 00 	prefetcht0 0x200(%rsi)
    fcd7:	0f 18 8e 40 02 00 00 	prefetcht0 0x240(%rsi)
    fcde:	0f 18 8e 80 02 00 00 	prefetcht0 0x280(%rsi)
    fce5:	0f 18 8e c0 02 00 00 	prefetcht0 0x2c0(%rsi)
    fcec:	c5 fe 6f 0e          	vmovdqu (%rsi),%ymm1
    fcf0:	c5 fe 6f 56 20       	vmovdqu 0x20(%rsi),%ymm2
    fcf5:	c5 fe 6f 5e 40       	vmovdqu 0x40(%rsi),%ymm3
    fcfa:	c5 fe 6f 66 60       	vmovdqu 0x60(%rsi),%ymm4
    fcff:	c5 fe 6f ae 80 00 00 	vmovdqu 0x80(%rsi),%ymm5
    fd06:	00 
    fd07:	c5 fe 6f b6 a0 00 00 	vmovdqu 0xa0(%rsi),%ymm6
    fd0e:	00 
    fd0f:	c5 fe 6f be c0 00 00 	vmovdqu 0xc0(%rsi),%ymm7
    fd16:	00 
    fd17:	c5 7e 6f 86 e0 00 00 	vmovdqu 0xe0(%rsi),%ymm8
    fd1e:	00 
    fd1f:	48 81 e9 00 01 00 00 	sub    $0x100,%rcx
    fd26:	c5 fd e7 0f          	vmovntdq %ymm1,(%rdi)
    fd2a:	c5 fd e7 57 20       	vmovntdq %ymm2,0x20(%rdi)
    fd2f:	c5 fd e7 5f 40       	vmovntdq %ymm3,0x40(%rdi)
    fd34:	c5 fd e7 67 60       	vmovntdq %ymm4,0x60(%rdi)
    fd39:	c5 fd e7 af 80 00 00 	vmovntdq %ymm5,0x80(%rdi)
    fd40:	00 
    fd41:	c5 fd e7 b7 a0 00 00 	vmovntdq %ymm6,0xa0(%rdi)
    fd48:	00 
    fd49:	c5 fd e7 bf c0 00 00 	vmovntdq %ymm7,0xc0(%rdi)
    fd50:	00 
    fd51:	c5 7d e7 87 e0 00 00 	vmovntdq %ymm8,0xe0(%rdi)
    fd58:	00 
    fd59:	48 8d bf 00 01 00 00 	lea    0x100(%rdi),%rdi
    fd60:	48 8d b6 00 01 00 00 	lea    0x100(%rsi),%rsi
    fd67:	48 81 f9 00 03 00 00 	cmp    $0x300,%rcx
    fd6e:	0f 8d 5c ff ff ff    	jge    fcd0 <__intel_avx_rep_memcpy+0x150>
    fd74:	0f ae f8             	sfence 
    fd77:	e9 a4 fe ff ff       	jmpq   fc20 <__intel_avx_rep_memcpy+0xa0>
    fd7c:	0f 1f 40 00          	nopl   0x0(%rax)
    fd80:	44 8a 0e             	mov    (%rsi),%r9b
    fd83:	44 88 0f             	mov    %r9b,(%rdi)
    fd86:	e9 65 fe ff ff       	jmpq   fbf0 <__intel_avx_rep_memcpy+0x70>
    fd8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    fd90:	66 44 8b 0e          	mov    (%rsi),%r9w
    fd94:	66 44 89 0f          	mov    %r9w,(%rdi)
    fd98:	e9 53 fe ff ff       	jmpq   fbf0 <__intel_avx_rep_memcpy+0x70>
    fd9d:	0f 1f 00             	nopl   (%rax)
    fda0:	66 44 8b 0e          	mov    (%rsi),%r9w
    fda4:	66 44 89 0f          	mov    %r9w,(%rdi)
    fda8:	44 8a 4e 02          	mov    0x2(%rsi),%r9b
    fdac:	44 88 4f 02          	mov    %r9b,0x2(%rdi)
    fdb0:	e9 3b fe ff ff       	jmpq   fbf0 <__intel_avx_rep_memcpy+0x70>
    fdb5:	0f 1f 40 00          	nopl   0x0(%rax)
    fdb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    fdc0:	44 8b 0e             	mov    (%rsi),%r9d
    fdc3:	44 89 0f             	mov    %r9d,(%rdi)
    fdc6:	e9 25 fe ff ff       	jmpq   fbf0 <__intel_avx_rep_memcpy+0x70>
    fdcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    fdd0:	44 8b 0e             	mov    (%rsi),%r9d
    fdd3:	44 89 0f             	mov    %r9d,(%rdi)
    fdd6:	44 8b 4a fc          	mov    -0x4(%rdx),%r9d
    fdda:	45 89 4c 24 fc       	mov    %r9d,-0x4(%r12)
    fddf:	e9 0c fe ff ff       	jmpq   fbf0 <__intel_avx_rep_memcpy+0x70>
    fde4:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    fde9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    fdf0:	4c 8b 0e             	mov    (%rsi),%r9
    fdf3:	4c 89 0f             	mov    %r9,(%rdi)
    fdf6:	e9 f5 fd ff ff       	jmpq   fbf0 <__intel_avx_rep_memcpy+0x70>
    fdfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    fe00:	4c 8b 0e             	mov    (%rsi),%r9
    fe03:	4c 89 0f             	mov    %r9,(%rdi)
    fe06:	4c 8b 4a f8          	mov    -0x8(%rdx),%r9
    fe0a:	4d 89 4c 24 f8       	mov    %r9,-0x8(%r12)
    fe0f:	e9 dc fd ff ff       	jmpq   fbf0 <__intel_avx_rep_memcpy+0x70>
    fe14:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    fe19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    fe20:	c5 f8 10 06          	vmovups (%rsi),%xmm0
    fe24:	c5 f8 11 07          	vmovups %xmm0,(%rdi)
    fe28:	e9 c3 fd ff ff       	jmpq   fbf0 <__intel_avx_rep_memcpy+0x70>
    fe2d:	0f 1f 00             	nopl   (%rax)
    fe30:	c5 f8 10 06          	vmovups (%rsi),%xmm0
    fe34:	c5 f8 11 07          	vmovups %xmm0,(%rdi)
    fe38:	c5 f8 10 42 f0       	vmovups -0x10(%rdx),%xmm0
    fe3d:	c4 c1 78 11 44 24 f0 	vmovups %xmm0,-0x10(%r12)
    fe44:	e9 a7 fd ff ff       	jmpq   fbf0 <__intel_avx_rep_memcpy+0x70>
    fe49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    fe50:	48 03 f9             	add    %rcx,%rdi
    fe53:	49 89 fc             	mov    %rdi,%r12
    fe56:	4d 89 e3             	mov    %r12,%r11
    fe59:	48 83 e7 e0          	and    $0xffffffffffffffe0,%rdi
    fe5d:	48 03 f1             	add    %rcx,%rsi
    fe60:	48 89 f2             	mov    %rsi,%rdx
    fe63:	4c 2b df             	sub    %rdi,%r11
    fe66:	49 2b f3             	sub    %r11,%rsi
    fe69:	4c 8d 0d c0 04 00 00 	lea    0x4c0(%rip),%r9        # 10330 <__intel_avx_rep_memcpy+0x7b0>
    fe70:	4d 2b 0c c9          	sub    (%r9,%rcx,8),%r9
    fe74:	3e 41 ff e1          	notrack jmpq *%r9
    fe78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    fe7f:	00 
    fe80:	c5 fc 10 86 20 ff ff 	vmovups -0xe0(%rsi),%ymm0
    fe87:	ff 
    fe88:	c5 fc 29 87 20 ff ff 	vmovaps %ymm0,-0xe0(%rdi)
    fe8f:	ff 
    fe90:	c5 fc 10 86 40 ff ff 	vmovups -0xc0(%rsi),%ymm0
    fe97:	ff 
    fe98:	c5 fc 29 87 40 ff ff 	vmovaps %ymm0,-0xc0(%rdi)
    fe9f:	ff 
    fea0:	c5 fc 10 86 60 ff ff 	vmovups -0xa0(%rsi),%ymm0
    fea7:	ff 
    fea8:	c5 fc 29 87 60 ff ff 	vmovaps %ymm0,-0xa0(%rdi)
    feaf:	ff 
    feb0:	c5 fc 10 46 80       	vmovups -0x80(%rsi),%ymm0
    feb5:	c5 fc 29 47 80       	vmovaps %ymm0,-0x80(%rdi)
    feba:	c5 fc 10 46 a0       	vmovups -0x60(%rsi),%ymm0
    febf:	c5 fc 29 47 a0       	vmovaps %ymm0,-0x60(%rdi)
    fec4:	c5 fc 10 46 c0       	vmovups -0x40(%rsi),%ymm0
    fec9:	c5 fc 29 47 c0       	vmovaps %ymm0,-0x40(%rdi)
    fece:	c5 fc 10 46 e0       	vmovups -0x20(%rsi),%ymm0
    fed3:	c5 fc 29 47 e0       	vmovaps %ymm0,-0x20(%rdi)
    fed8:	4c 8d 0d 51 04 00 00 	lea    0x451(%rip),%r9        # 10330 <__intel_avx_rep_memcpy+0x7b0>
    fedf:	4c 89 d9             	mov    %r11,%rcx
    fee2:	4f 2b 0c d9          	sub    (%r9,%r11,8),%r9
    fee6:	3e 41 ff e1          	notrack jmpq *%r9
    feea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    fef0:	44 8a 0e             	mov    (%rsi),%r9b
    fef3:	44 88 0f             	mov    %r9b,(%rdi)
    fef6:	e9 45 14 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    fefb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    ff00:	e9 3b 14 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    ff05:	0f 1f 40 00          	nopl   0x0(%rax)
    ff09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ff10:	66 44 8b 0e          	mov    (%rsi),%r9w
    ff14:	66 44 89 0f          	mov    %r9w,(%rdi)
    ff18:	e9 23 14 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    ff1d:	0f 1f 00             	nopl   (%rax)
    ff20:	66 44 8b 0e          	mov    (%rsi),%r9w
    ff24:	66 44 89 0f          	mov    %r9w,(%rdi)
    ff28:	44 8a 4e 02          	mov    0x2(%rsi),%r9b
    ff2c:	44 88 4f 02          	mov    %r9b,0x2(%rdi)
    ff30:	e9 0b 14 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    ff35:	0f 1f 40 00          	nopl   0x0(%rax)
    ff39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ff40:	44 8b 0e             	mov    (%rsi),%r9d
    ff43:	44 89 0f             	mov    %r9d,(%rdi)
    ff46:	e9 f5 13 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    ff4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    ff50:	44 8b 0e             	mov    (%rsi),%r9d
    ff53:	44 89 0f             	mov    %r9d,(%rdi)
    ff56:	44 8b 4c 0e fc       	mov    -0x4(%rsi,%rcx,1),%r9d
    ff5b:	44 89 4c 0f fc       	mov    %r9d,-0x4(%rdi,%rcx,1)
    ff60:	e9 db 13 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    ff65:	0f 1f 40 00          	nopl   0x0(%rax)
    ff69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ff70:	4c 8b 0e             	mov    (%rsi),%r9
    ff73:	4c 89 0f             	mov    %r9,(%rdi)
    ff76:	e9 c5 13 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    ff7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    ff80:	4c 8b 0e             	mov    (%rsi),%r9
    ff83:	4c 89 0f             	mov    %r9,(%rdi)
    ff86:	4c 8b 4c 0e f8       	mov    -0x8(%rsi,%rcx,1),%r9
    ff8b:	4c 89 4c 0f f8       	mov    %r9,-0x8(%rdi,%rcx,1)
    ff90:	e9 ab 13 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    ff95:	0f 1f 40 00          	nopl   0x0(%rax)
    ff99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ffa0:	c5 f8 10 06          	vmovups (%rsi),%xmm0
    ffa4:	c5 f8 11 07          	vmovups %xmm0,(%rdi)
    ffa8:	e9 93 13 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    ffad:	0f 1f 00             	nopl   (%rax)
    ffb0:	c5 f8 10 06          	vmovups (%rsi),%xmm0
    ffb4:	c5 f8 11 07          	vmovups %xmm0,(%rdi)
    ffb8:	c5 f8 10 44 0e f0    	vmovups -0x10(%rsi,%rcx,1),%xmm0
    ffbe:	c5 f8 11 44 0f f0    	vmovups %xmm0,-0x10(%rdi,%rcx,1)
    ffc4:	e9 77 13 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    ffc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ffd0:	c5 fc 10 06          	vmovups (%rsi),%ymm0
    ffd4:	c5 fc 11 07          	vmovups %ymm0,(%rdi)
    ffd8:	c5 fc 10 44 0e e0    	vmovups -0x20(%rsi,%rcx,1),%ymm0
    ffde:	c5 fc 11 44 0f e0    	vmovups %ymm0,-0x20(%rdi,%rcx,1)
    ffe4:	e9 57 13 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
    ffe9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    fff0:	c5 fc 10 06          	vmovups (%rsi),%ymm0
    fff4:	c5 fc 11 07          	vmovups %ymm0,(%rdi)
    fff8:	c5 fc 10 46 20       	vmovups 0x20(%rsi),%ymm0
    fffd:	c5 fc 11 47 20       	vmovups %ymm0,0x20(%rdi)
   10002:	c5 fc 10 44 0e e0    	vmovups -0x20(%rsi,%rcx,1),%ymm0
   10008:	c5 fc 11 44 0f e0    	vmovups %ymm0,-0x20(%rdi,%rcx,1)
   1000e:	e9 2d 13 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
   10013:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   10018:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1001f:	00 
   10020:	c5 fc 10 06          	vmovups (%rsi),%ymm0
   10024:	c5 fc 11 07          	vmovups %ymm0,(%rdi)
   10028:	c5 fc 10 46 20       	vmovups 0x20(%rsi),%ymm0
   1002d:	c5 fc 11 47 20       	vmovups %ymm0,0x20(%rdi)
   10032:	c5 fc 10 46 40       	vmovups 0x40(%rsi),%ymm0
   10037:	c5 fc 11 47 40       	vmovups %ymm0,0x40(%rdi)
   1003c:	c5 fc 10 44 0e e0    	vmovups -0x20(%rsi,%rcx,1),%ymm0
   10042:	c5 fc 11 44 0f e0    	vmovups %ymm0,-0x20(%rdi,%rcx,1)
   10048:	e9 f3 12 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
   1004d:	0f 1f 00             	nopl   (%rax)
   10050:	c5 fc 10 06          	vmovups (%rsi),%ymm0
   10054:	c5 fc 11 07          	vmovups %ymm0,(%rdi)
   10058:	c5 fc 10 46 20       	vmovups 0x20(%rsi),%ymm0
   1005d:	c5 fc 11 47 20       	vmovups %ymm0,0x20(%rdi)
   10062:	c5 fc 10 46 40       	vmovups 0x40(%rsi),%ymm0
   10067:	c5 fc 11 47 40       	vmovups %ymm0,0x40(%rdi)
   1006c:	c5 fc 10 46 60       	vmovups 0x60(%rsi),%ymm0
   10071:	c5 fc 11 47 60       	vmovups %ymm0,0x60(%rdi)
   10076:	c5 fc 10 44 0e e0    	vmovups -0x20(%rsi,%rcx,1),%ymm0
   1007c:	c5 fc 11 44 0f e0    	vmovups %ymm0,-0x20(%rdi,%rcx,1)
   10082:	e9 b9 12 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
   10087:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1008e:	00 00 
   10090:	c5 fc 10 06          	vmovups (%rsi),%ymm0
   10094:	c5 fc 11 07          	vmovups %ymm0,(%rdi)
   10098:	c5 fc 10 46 20       	vmovups 0x20(%rsi),%ymm0
   1009d:	c5 fc 11 47 20       	vmovups %ymm0,0x20(%rdi)
   100a2:	c5 fc 10 46 40       	vmovups 0x40(%rsi),%ymm0
   100a7:	c5 fc 11 47 40       	vmovups %ymm0,0x40(%rdi)
   100ac:	c5 fc 10 46 60       	vmovups 0x60(%rsi),%ymm0
   100b1:	c5 fc 11 47 60       	vmovups %ymm0,0x60(%rdi)
   100b6:	c5 fc 10 86 80 00 00 	vmovups 0x80(%rsi),%ymm0
   100bd:	00 
   100be:	c5 fc 11 87 80 00 00 	vmovups %ymm0,0x80(%rdi)
   100c5:	00 
   100c6:	c5 fc 10 44 0e e0    	vmovups -0x20(%rsi,%rcx,1),%ymm0
   100cc:	c5 fc 11 44 0f e0    	vmovups %ymm0,-0x20(%rdi,%rcx,1)
   100d2:	e9 69 12 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
   100d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   100de:	00 00 
   100e0:	c5 fc 10 06          	vmovups (%rsi),%ymm0
   100e4:	c5 fc 11 07          	vmovups %ymm0,(%rdi)
   100e8:	c5 fc 10 46 20       	vmovups 0x20(%rsi),%ymm0
   100ed:	c5 fc 11 47 20       	vmovups %ymm0,0x20(%rdi)
   100f2:	c5 fc 10 46 40       	vmovups 0x40(%rsi),%ymm0
   100f7:	c5 fc 11 47 40       	vmovups %ymm0,0x40(%rdi)
   100fc:	c5 fc 10 46 60       	vmovups 0x60(%rsi),%ymm0
   10101:	c5 fc 11 47 60       	vmovups %ymm0,0x60(%rdi)
   10106:	c5 fc 10 86 80 00 00 	vmovups 0x80(%rsi),%ymm0
   1010d:	00 
   1010e:	c5 fc 11 87 80 00 00 	vmovups %ymm0,0x80(%rdi)
   10115:	00 
   10116:	c5 fc 10 86 a0 00 00 	vmovups 0xa0(%rsi),%ymm0
   1011d:	00 
   1011e:	c5 fc 11 87 a0 00 00 	vmovups %ymm0,0xa0(%rdi)
   10125:	00 
   10126:	c5 fc 10 44 0e e0    	vmovups -0x20(%rsi,%rcx,1),%ymm0
   1012c:	c5 fc 11 44 0f e0    	vmovups %ymm0,-0x20(%rdi,%rcx,1)
   10132:	e9 09 12 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
   10137:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1013e:	00 00 
   10140:	c5 fc 10 06          	vmovups (%rsi),%ymm0
   10144:	c5 fc 11 07          	vmovups %ymm0,(%rdi)
   10148:	c5 fc 10 46 20       	vmovups 0x20(%rsi),%ymm0
   1014d:	c5 fc 11 47 20       	vmovups %ymm0,0x20(%rdi)
   10152:	c5 fc 10 46 40       	vmovups 0x40(%rsi),%ymm0
   10157:	c5 fc 11 47 40       	vmovups %ymm0,0x40(%rdi)
   1015c:	c5 fc 10 46 60       	vmovups 0x60(%rsi),%ymm0
   10161:	c5 fc 11 47 60       	vmovups %ymm0,0x60(%rdi)
   10166:	c5 fc 10 86 80 00 00 	vmovups 0x80(%rsi),%ymm0
   1016d:	00 
   1016e:	c5 fc 11 87 80 00 00 	vmovups %ymm0,0x80(%rdi)
   10175:	00 
   10176:	c5 fc 10 86 a0 00 00 	vmovups 0xa0(%rsi),%ymm0
   1017d:	00 
   1017e:	c5 fc 11 87 a0 00 00 	vmovups %ymm0,0xa0(%rdi)
   10185:	00 
   10186:	c5 fc 10 86 c0 00 00 	vmovups 0xc0(%rsi),%ymm0
   1018d:	00 
   1018e:	c5 fc 11 87 c0 00 00 	vmovups %ymm0,0xc0(%rdi)
   10195:	00 
   10196:	c5 fc 10 44 0e e0    	vmovups -0x20(%rsi,%rcx,1),%ymm0
   1019c:	c5 fc 11 44 0f e0    	vmovups %ymm0,-0x20(%rdi,%rcx,1)
   101a2:	e9 99 11 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
   101a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   101ae:	00 00 
   101b0:	c5 fc 10 84 0e 00 ff 	vmovups -0x100(%rsi,%rcx,1),%ymm0
   101b7:	ff ff 
   101b9:	c5 fc 11 84 0f 00 ff 	vmovups %ymm0,-0x100(%rdi,%rcx,1)
   101c0:	ff ff 
   101c2:	c5 fc 10 84 0e 20 ff 	vmovups -0xe0(%rsi,%rcx,1),%ymm0
   101c9:	ff ff 
   101cb:	c5 fc 11 84 0f 20 ff 	vmovups %ymm0,-0xe0(%rdi,%rcx,1)
   101d2:	ff ff 
   101d4:	c5 fc 10 84 0e 40 ff 	vmovups -0xc0(%rsi,%rcx,1),%ymm0
   101db:	ff ff 
   101dd:	c5 fc 11 84 0f 40 ff 	vmovups %ymm0,-0xc0(%rdi,%rcx,1)
   101e4:	ff ff 
   101e6:	c5 fc 10 84 0e 60 ff 	vmovups -0xa0(%rsi,%rcx,1),%ymm0
   101ed:	ff ff 
   101ef:	c5 fc 11 84 0f 60 ff 	vmovups %ymm0,-0xa0(%rdi,%rcx,1)
   101f6:	ff ff 
   101f8:	c5 fc 10 44 0e 80    	vmovups -0x80(%rsi,%rcx,1),%ymm0
   101fe:	c5 fc 11 44 0f 80    	vmovups %ymm0,-0x80(%rdi,%rcx,1)
   10204:	c5 fc 10 44 0e a0    	vmovups -0x60(%rsi,%rcx,1),%ymm0
   1020a:	c5 fc 11 44 0f a0    	vmovups %ymm0,-0x60(%rdi,%rcx,1)
   10210:	c5 fc 10 44 0e c0    	vmovups -0x40(%rsi,%rcx,1),%ymm0
   10216:	c5 fc 11 44 0f c0    	vmovups %ymm0,-0x40(%rdi,%rcx,1)
   1021c:	c5 fc 10 44 0e e0    	vmovups -0x20(%rsi,%rcx,1),%ymm0
   10222:	c5 fc 11 44 0f e0    	vmovups %ymm0,-0x20(%rdi,%rcx,1)
   10228:	e9 13 11 00 00       	jmpq   11340 <__intel_avx_rep_memcpy+0x17c0>
   1022d:	0f 1f 00             	nopl   (%rax)
   10230:	aa                   	stos   %al,%es:(%rdi)
   10231:	04 00                	add    $0x0,%al
   10233:	00 00                	add    %al,(%rax)
   10235:	00 00                	add    %al,(%rax)
   10237:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   1023d:	00 00                	add    %al,(%rax)
   1023f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10245:	00 00                	add    %al,(%rax)
   10247:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1024d:	00 00                	add    %al,(%rax)
   1024f:	00 70 04             	add    %dh,0x4(%rax)
   10252:	00 00                	add    %al,(%rax)
   10254:	00 00                	add    %al,(%rax)
   10256:	00 00                	add    %al,(%rax)
   10258:	60                   	(bad)  
   10259:	04 00                	add    $0x0,%al
   1025b:	00 00                	add    %al,(%rax)
   1025d:	00 00                	add    %al,(%rax)
   1025f:	00 60 04             	add    %ah,0x4(%rax)
   10262:	00 00                	add    %al,(%rax)
   10264:	00 00                	add    %al,(%rax)
   10266:	00 00                	add    %al,(%rax)
   10268:	60                   	(bad)  
   10269:	04 00                	add    $0x0,%al
   1026b:	00 00                	add    %al,(%rax)
   1026d:	00 00                	add    %al,(%rax)
   1026f:	00 40 04             	add    %al,0x4(%rax)
   10272:	00 00                	add    %al,(%rax)
   10274:	00 00                	add    %al,(%rax)
   10276:	00 00                	add    %al,(%rax)
   10278:	30 04 00             	xor    %al,(%rax,%rax,1)
   1027b:	00 00                	add    %al,(%rax)
   1027d:	00 00                	add    %al,(%rax)
   1027f:	00 30                	add    %dh,(%rax)
   10281:	04 00                	add    $0x0,%al
   10283:	00 00                	add    %al,(%rax)
   10285:	00 00                	add    %al,(%rax)
   10287:	00 30                	add    %dh,(%rax)
   10289:	04 00                	add    $0x0,%al
   1028b:	00 00                	add    %al,(%rax)
   1028d:	00 00                	add    %al,(%rax)
   1028f:	00 30                	add    %dh,(%rax)
   10291:	04 00                	add    $0x0,%al
   10293:	00 00                	add    %al,(%rax)
   10295:	00 00                	add    %al,(%rax)
   10297:	00 30                	add    %dh,(%rax)
   10299:	04 00                	add    $0x0,%al
   1029b:	00 00                	add    %al,(%rax)
   1029d:	00 00                	add    %al,(%rax)
   1029f:	00 30                	add    %dh,(%rax)
   102a1:	04 00                	add    $0x0,%al
   102a3:	00 00                	add    %al,(%rax)
   102a5:	00 00                	add    %al,(%rax)
   102a7:	00 30                	add    %dh,(%rax)
   102a9:	04 00                	add    $0x0,%al
   102ab:	00 00                	add    %al,(%rax)
   102ad:	00 00                	add    %al,(%rax)
   102af:	00 10                	add    %dl,(%rax)
   102b1:	04 00                	add    $0x0,%al
   102b3:	00 00                	add    %al,(%rax)
   102b5:	00 00                	add    %al,(%rax)
   102b7:	00 00                	add    %al,(%rax)
   102b9:	04 00                	add    $0x0,%al
   102bb:	00 00                	add    %al,(%rax)
   102bd:	00 00                	add    %al,(%rax)
   102bf:	00 00                	add    %al,(%rax)
   102c1:	04 00                	add    $0x0,%al
   102c3:	00 00                	add    %al,(%rax)
   102c5:	00 00                	add    %al,(%rax)
   102c7:	00 00                	add    %al,(%rax)
   102c9:	04 00                	add    $0x0,%al
   102cb:	00 00                	add    %al,(%rax)
   102cd:	00 00                	add    %al,(%rax)
   102cf:	00 00                	add    %al,(%rax)
   102d1:	04 00                	add    $0x0,%al
   102d3:	00 00                	add    %al,(%rax)
   102d5:	00 00                	add    %al,(%rax)
   102d7:	00 00                	add    %al,(%rax)
   102d9:	04 00                	add    $0x0,%al
   102db:	00 00                	add    %al,(%rax)
   102dd:	00 00                	add    %al,(%rax)
   102df:	00 00                	add    %al,(%rax)
   102e1:	04 00                	add    $0x0,%al
   102e3:	00 00                	add    %al,(%rax)
   102e5:	00 00                	add    %al,(%rax)
   102e7:	00 00                	add    %al,(%rax)
   102e9:	04 00                	add    $0x0,%al
   102eb:	00 00                	add    %al,(%rax)
   102ed:	00 00                	add    %al,(%rax)
   102ef:	00 00                	add    %al,(%rax)
   102f1:	04 00                	add    $0x0,%al
   102f3:	00 00                	add    %al,(%rax)
   102f5:	00 00                	add    %al,(%rax)
   102f7:	00 00                	add    %al,(%rax)
   102f9:	04 00                	add    $0x0,%al
   102fb:	00 00                	add    %al,(%rax)
   102fd:	00 00                	add    %al,(%rax)
   102ff:	00 00                	add    %al,(%rax)
   10301:	04 00                	add    $0x0,%al
   10303:	00 00                	add    %al,(%rax)
   10305:	00 00                	add    %al,(%rax)
   10307:	00 00                	add    %al,(%rax)
   10309:	04 00                	add    $0x0,%al
   1030b:	00 00                	add    %al,(%rax)
   1030d:	00 00                	add    %al,(%rax)
   1030f:	00 00                	add    %al,(%rax)
   10311:	04 00                	add    $0x0,%al
   10313:	00 00                	add    %al,(%rax)
   10315:	00 00                	add    %al,(%rax)
   10317:	00 00                	add    %al,(%rax)
   10319:	04 00                	add    $0x0,%al
   1031b:	00 00                	add    %al,(%rax)
   1031d:	00 00                	add    %al,(%rax)
   1031f:	00 00                	add    %al,(%rax)
   10321:	04 00                	add    $0x0,%al
   10323:	00 00                	add    %al,(%rax)
   10325:	00 00                	add    %al,(%rax)
   10327:	00 00                	add    %al,(%rax)
   10329:	04 00                	add    $0x0,%al
   1032b:	00 00                	add    %al,(%rax)
   1032d:	00 00                	add    %al,(%rax)
   1032f:	00 30                	add    %dh,(%rax)
   10331:	04 00                	add    $0x0,%al
   10333:	00 00                	add    %al,(%rax)
   10335:	00 00                	add    %al,(%rax)
   10337:	00 40 04             	add    %al,0x4(%rax)
   1033a:	00 00                	add    %al,(%rax)
   1033c:	00 00                	add    %al,(%rax)
   1033e:	00 00                	add    %al,(%rax)
   10340:	20 04 00             	and    %al,(%rax,%rax,1)
   10343:	00 00                	add    %al,(%rax)
   10345:	00 00                	add    %al,(%rax)
   10347:	00 10                	add    %dl,(%rax)
   10349:	04 00                	add    $0x0,%al
   1034b:	00 00                	add    %al,(%rax)
   1034d:	00 00                	add    %al,(%rax)
   1034f:	00 f0                	add    %dh,%al
   10351:	03 00                	add    (%rax),%eax
   10353:	00 00                	add    %al,(%rax)
   10355:	00 00                	add    %al,(%rax)
   10357:	00 e0                	add    %ah,%al
   10359:	03 00                	add    (%rax),%eax
   1035b:	00 00                	add    %al,(%rax)
   1035d:	00 00                	add    %al,(%rax)
   1035f:	00 e0                	add    %ah,%al
   10361:	03 00                	add    (%rax),%eax
   10363:	00 00                	add    %al,(%rax)
   10365:	00 00                	add    %al,(%rax)
   10367:	00 e0                	add    %ah,%al
   10369:	03 00                	add    (%rax),%eax
   1036b:	00 00                	add    %al,(%rax)
   1036d:	00 00                	add    %al,(%rax)
   1036f:	00 c0                	add    %al,%al
   10371:	03 00                	add    (%rax),%eax
   10373:	00 00                	add    %al,(%rax)
   10375:	00 00                	add    %al,(%rax)
   10377:	00 b0 03 00 00 00    	add    %dh,0x3(%rax)
   1037d:	00 00                	add    %al,(%rax)
   1037f:	00 b0 03 00 00 00    	add    %dh,0x3(%rax)
   10385:	00 00                	add    %al,(%rax)
   10387:	00 b0 03 00 00 00    	add    %dh,0x3(%rax)
   1038d:	00 00                	add    %al,(%rax)
   1038f:	00 b0 03 00 00 00    	add    %dh,0x3(%rax)
   10395:	00 00                	add    %al,(%rax)
   10397:	00 b0 03 00 00 00    	add    %dh,0x3(%rax)
   1039d:	00 00                	add    %al,(%rax)
   1039f:	00 b0 03 00 00 00    	add    %dh,0x3(%rax)
   103a5:	00 00                	add    %al,(%rax)
   103a7:	00 b0 03 00 00 00    	add    %dh,0x3(%rax)
   103ad:	00 00                	add    %al,(%rax)
   103af:	00 90 03 00 00 00    	add    %dl,0x3(%rax)
   103b5:	00 00                	add    %al,(%rax)
   103b7:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   103bd:	00 00                	add    %al,(%rax)
   103bf:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   103c5:	00 00                	add    %al,(%rax)
   103c7:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   103cd:	00 00                	add    %al,(%rax)
   103cf:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   103d5:	00 00                	add    %al,(%rax)
   103d7:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   103dd:	00 00                	add    %al,(%rax)
   103df:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   103e5:	00 00                	add    %al,(%rax)
   103e7:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   103ed:	00 00                	add    %al,(%rax)
   103ef:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   103f5:	00 00                	add    %al,(%rax)
   103f7:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   103fd:	00 00                	add    %al,(%rax)
   103ff:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   10405:	00 00                	add    %al,(%rax)
   10407:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   1040d:	00 00                	add    %al,(%rax)
   1040f:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   10415:	00 00                	add    %al,(%rax)
   10417:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   1041d:	00 00                	add    %al,(%rax)
   1041f:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   10425:	00 00                	add    %al,(%rax)
   10427:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   1042d:	00 00                	add    %al,(%rax)
   1042f:	00 62 04             	add    %ah,0x4(%rdx)
   10432:	00 00                	add    %al,(%rax)
   10434:	00 00                	add    %al,(%rax)
   10436:	00 00                	add    %al,(%rax)
   10438:	62                   	(bad)  
   10439:	04 00                	add    $0x0,%al
   1043b:	00 00                	add    %al,(%rax)
   1043d:	00 00                	add    %al,(%rax)
   1043f:	00 62 04             	add    %ah,0x4(%rdx)
   10442:	00 00                	add    %al,(%rax)
   10444:	00 00                	add    %al,(%rax)
   10446:	00 00                	add    %al,(%rax)
   10448:	62                   	(bad)  
   10449:	04 00                	add    $0x0,%al
   1044b:	00 00                	add    %al,(%rax)
   1044d:	00 00                	add    %al,(%rax)
   1044f:	00 62 04             	add    %ah,0x4(%rdx)
   10452:	00 00                	add    %al,(%rax)
   10454:	00 00                	add    %al,(%rax)
   10456:	00 00                	add    %al,(%rax)
   10458:	62                   	(bad)  
   10459:	04 00                	add    $0x0,%al
   1045b:	00 00                	add    %al,(%rax)
   1045d:	00 00                	add    %al,(%rax)
   1045f:	00 62 04             	add    %ah,0x4(%rdx)
   10462:	00 00                	add    %al,(%rax)
   10464:	00 00                	add    %al,(%rax)
   10466:	00 00                	add    %al,(%rax)
   10468:	62                   	(bad)  
   10469:	04 00                	add    $0x0,%al
   1046b:	00 00                	add    %al,(%rax)
   1046d:	00 00                	add    %al,(%rax)
   1046f:	00 62 04             	add    %ah,0x4(%rdx)
   10472:	00 00                	add    %al,(%rax)
   10474:	00 00                	add    %al,(%rax)
   10476:	00 00                	add    %al,(%rax)
   10478:	62                   	(bad)  
   10479:	04 00                	add    $0x0,%al
   1047b:	00 00                	add    %al,(%rax)
   1047d:	00 00                	add    %al,(%rax)
   1047f:	00 62 04             	add    %ah,0x4(%rdx)
   10482:	00 00                	add    %al,(%rax)
   10484:	00 00                	add    %al,(%rax)
   10486:	00 00                	add    %al,(%rax)
   10488:	62                   	(bad)  
   10489:	04 00                	add    $0x0,%al
   1048b:	00 00                	add    %al,(%rax)
   1048d:	00 00                	add    %al,(%rax)
   1048f:	00 62 04             	add    %ah,0x4(%rdx)
   10492:	00 00                	add    %al,(%rax)
   10494:	00 00                	add    %al,(%rax)
   10496:	00 00                	add    %al,(%rax)
   10498:	62                   	(bad)  
   10499:	04 00                	add    $0x0,%al
   1049b:	00 00                	add    %al,(%rax)
   1049d:	00 00                	add    %al,(%rax)
   1049f:	00 62 04             	add    %ah,0x4(%rdx)
   104a2:	00 00                	add    %al,(%rax)
   104a4:	00 00                	add    %al,(%rax)
   104a6:	00 00                	add    %al,(%rax)
   104a8:	62                   	(bad)  
   104a9:	04 00                	add    $0x0,%al
   104ab:	00 00                	add    %al,(%rax)
   104ad:	00 00                	add    %al,(%rax)
   104af:	00 62 04             	add    %ah,0x4(%rdx)
   104b2:	00 00                	add    %al,(%rax)
   104b4:	00 00                	add    %al,(%rax)
   104b6:	00 00                	add    %al,(%rax)
   104b8:	62                   	(bad)  
   104b9:	04 00                	add    $0x0,%al
   104bb:	00 00                	add    %al,(%rax)
   104bd:	00 00                	add    %al,(%rax)
   104bf:	00 62 04             	add    %ah,0x4(%rdx)
   104c2:	00 00                	add    %al,(%rax)
   104c4:	00 00                	add    %al,(%rax)
   104c6:	00 00                	add    %al,(%rax)
   104c8:	62                   	(bad)  
   104c9:	04 00                	add    $0x0,%al
   104cb:	00 00                	add    %al,(%rax)
   104cd:	00 00                	add    %al,(%rax)
   104cf:	00 62 04             	add    %ah,0x4(%rdx)
   104d2:	00 00                	add    %al,(%rax)
   104d4:	00 00                	add    %al,(%rax)
   104d6:	00 00                	add    %al,(%rax)
   104d8:	62                   	(bad)  
   104d9:	04 00                	add    $0x0,%al
   104db:	00 00                	add    %al,(%rax)
   104dd:	00 00                	add    %al,(%rax)
   104df:	00 62 04             	add    %ah,0x4(%rdx)
   104e2:	00 00                	add    %al,(%rax)
   104e4:	00 00                	add    %al,(%rax)
   104e6:	00 00                	add    %al,(%rax)
   104e8:	62                   	(bad)  
   104e9:	04 00                	add    $0x0,%al
   104eb:	00 00                	add    %al,(%rax)
   104ed:	00 00                	add    %al,(%rax)
   104ef:	00 62 04             	add    %ah,0x4(%rdx)
   104f2:	00 00                	add    %al,(%rax)
   104f4:	00 00                	add    %al,(%rax)
   104f6:	00 00                	add    %al,(%rax)
   104f8:	62                   	(bad)  
   104f9:	04 00                	add    $0x0,%al
   104fb:	00 00                	add    %al,(%rax)
   104fd:	00 00                	add    %al,(%rax)
   104ff:	00 62 04             	add    %ah,0x4(%rdx)
   10502:	00 00                	add    %al,(%rax)
   10504:	00 00                	add    %al,(%rax)
   10506:	00 00                	add    %al,(%rax)
   10508:	62                   	(bad)  
   10509:	04 00                	add    $0x0,%al
   1050b:	00 00                	add    %al,(%rax)
   1050d:	00 00                	add    %al,(%rax)
   1050f:	00 62 04             	add    %ah,0x4(%rdx)
   10512:	00 00                	add    %al,(%rax)
   10514:	00 00                	add    %al,(%rax)
   10516:	00 00                	add    %al,(%rax)
   10518:	62                   	(bad)  
   10519:	04 00                	add    $0x0,%al
   1051b:	00 00                	add    %al,(%rax)
   1051d:	00 00                	add    %al,(%rax)
   1051f:	00 62 04             	add    %ah,0x4(%rdx)
   10522:	00 00                	add    %al,(%rax)
   10524:	00 00                	add    %al,(%rax)
   10526:	00 00                	add    %al,(%rax)
   10528:	62                   	(bad)  
   10529:	04 00                	add    $0x0,%al
   1052b:	00 00                	add    %al,(%rax)
   1052d:	00 00                	add    %al,(%rax)
   1052f:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   10533:	00 00                	add    %al,(%rax)
   10535:	00 00                	add    %al,(%rax)
   10537:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   1053b:	00 00                	add    %al,(%rax)
   1053d:	00 00                	add    %al,(%rax)
   1053f:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   10543:	00 00                	add    %al,(%rax)
   10545:	00 00                	add    %al,(%rax)
   10547:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   1054b:	00 00                	add    %al,(%rax)
   1054d:	00 00                	add    %al,(%rax)
   1054f:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   10553:	00 00                	add    %al,(%rax)
   10555:	00 00                	add    %al,(%rax)
   10557:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   1055b:	00 00                	add    %al,(%rax)
   1055d:	00 00                	add    %al,(%rax)
   1055f:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   10563:	00 00                	add    %al,(%rax)
   10565:	00 00                	add    %al,(%rax)
   10567:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   1056b:	00 00                	add    %al,(%rax)
   1056d:	00 00                	add    %al,(%rax)
   1056f:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   10573:	00 00                	add    %al,(%rax)
   10575:	00 00                	add    %al,(%rax)
   10577:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   1057b:	00 00                	add    %al,(%rax)
   1057d:	00 00                	add    %al,(%rax)
   1057f:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   10583:	00 00                	add    %al,(%rax)
   10585:	00 00                	add    %al,(%rax)
   10587:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   1058b:	00 00                	add    %al,(%rax)
   1058d:	00 00                	add    %al,(%rax)
   1058f:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   10593:	00 00                	add    %al,(%rax)
   10595:	00 00                	add    %al,(%rax)
   10597:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   1059b:	00 00                	add    %al,(%rax)
   1059d:	00 00                	add    %al,(%rax)
   1059f:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105a3:	00 00                	add    %al,(%rax)
   105a5:	00 00                	add    %al,(%rax)
   105a7:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105ab:	00 00                	add    %al,(%rax)
   105ad:	00 00                	add    %al,(%rax)
   105af:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105b3:	00 00                	add    %al,(%rax)
   105b5:	00 00                	add    %al,(%rax)
   105b7:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105bb:	00 00                	add    %al,(%rax)
   105bd:	00 00                	add    %al,(%rax)
   105bf:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105c3:	00 00                	add    %al,(%rax)
   105c5:	00 00                	add    %al,(%rax)
   105c7:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105cb:	00 00                	add    %al,(%rax)
   105cd:	00 00                	add    %al,(%rax)
   105cf:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105d3:	00 00                	add    %al,(%rax)
   105d5:	00 00                	add    %al,(%rax)
   105d7:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105db:	00 00                	add    %al,(%rax)
   105dd:	00 00                	add    %al,(%rax)
   105df:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105e3:	00 00                	add    %al,(%rax)
   105e5:	00 00                	add    %al,(%rax)
   105e7:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105eb:	00 00                	add    %al,(%rax)
   105ed:	00 00                	add    %al,(%rax)
   105ef:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105f3:	00 00                	add    %al,(%rax)
   105f5:	00 00                	add    %al,(%rax)
   105f7:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   105fb:	00 00                	add    %al,(%rax)
   105fd:	00 00                	add    %al,(%rax)
   105ff:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   10603:	00 00                	add    %al,(%rax)
   10605:	00 00                	add    %al,(%rax)
   10607:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   1060b:	00 00                	add    %al,(%rax)
   1060d:	00 00                	add    %al,(%rax)
   1060f:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   10613:	00 00                	add    %al,(%rax)
   10615:	00 00                	add    %al,(%rax)
   10617:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   1061b:	00 00                	add    %al,(%rax)
   1061d:	00 00                	add    %al,(%rax)
   1061f:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   10623:	00 00                	add    %al,(%rax)
   10625:	00 00                	add    %al,(%rax)
   10627:	00 6c 04 00          	add    %ch,0x0(%rsp,%rax,1)
   1062b:	00 00                	add    %al,(%rax)
   1062d:	00 00                	add    %al,(%rax)
   1062f:	00 76 04             	add    %dh,0x4(%rsi)
   10632:	00 00                	add    %al,(%rax)
   10634:	00 00                	add    %al,(%rax)
   10636:	00 00                	add    %al,(%rax)
   10638:	76 04                	jbe    1063e <__intel_avx_rep_memcpy+0xabe>
   1063a:	00 00                	add    %al,(%rax)
   1063c:	00 00                	add    %al,(%rax)
   1063e:	00 00                	add    %al,(%rax)
   10640:	76 04                	jbe    10646 <__intel_avx_rep_memcpy+0xac6>
   10642:	00 00                	add    %al,(%rax)
   10644:	00 00                	add    %al,(%rax)
   10646:	00 00                	add    %al,(%rax)
   10648:	76 04                	jbe    1064e <__intel_avx_rep_memcpy+0xace>
   1064a:	00 00                	add    %al,(%rax)
   1064c:	00 00                	add    %al,(%rax)
   1064e:	00 00                	add    %al,(%rax)
   10650:	76 04                	jbe    10656 <__intel_avx_rep_memcpy+0xad6>
   10652:	00 00                	add    %al,(%rax)
   10654:	00 00                	add    %al,(%rax)
   10656:	00 00                	add    %al,(%rax)
   10658:	76 04                	jbe    1065e <__intel_avx_rep_memcpy+0xade>
   1065a:	00 00                	add    %al,(%rax)
   1065c:	00 00                	add    %al,(%rax)
   1065e:	00 00                	add    %al,(%rax)
   10660:	76 04                	jbe    10666 <__intel_avx_rep_memcpy+0xae6>
   10662:	00 00                	add    %al,(%rax)
   10664:	00 00                	add    %al,(%rax)
   10666:	00 00                	add    %al,(%rax)
   10668:	76 04                	jbe    1066e <__intel_avx_rep_memcpy+0xaee>
   1066a:	00 00                	add    %al,(%rax)
   1066c:	00 00                	add    %al,(%rax)
   1066e:	00 00                	add    %al,(%rax)
   10670:	76 04                	jbe    10676 <__intel_avx_rep_memcpy+0xaf6>
   10672:	00 00                	add    %al,(%rax)
   10674:	00 00                	add    %al,(%rax)
   10676:	00 00                	add    %al,(%rax)
   10678:	76 04                	jbe    1067e <__intel_avx_rep_memcpy+0xafe>
   1067a:	00 00                	add    %al,(%rax)
   1067c:	00 00                	add    %al,(%rax)
   1067e:	00 00                	add    %al,(%rax)
   10680:	76 04                	jbe    10686 <__intel_avx_rep_memcpy+0xb06>
   10682:	00 00                	add    %al,(%rax)
   10684:	00 00                	add    %al,(%rax)
   10686:	00 00                	add    %al,(%rax)
   10688:	76 04                	jbe    1068e <__intel_avx_rep_memcpy+0xb0e>
   1068a:	00 00                	add    %al,(%rax)
   1068c:	00 00                	add    %al,(%rax)
   1068e:	00 00                	add    %al,(%rax)
   10690:	76 04                	jbe    10696 <__intel_avx_rep_memcpy+0xb16>
   10692:	00 00                	add    %al,(%rax)
   10694:	00 00                	add    %al,(%rax)
   10696:	00 00                	add    %al,(%rax)
   10698:	76 04                	jbe    1069e <__intel_avx_rep_memcpy+0xb1e>
   1069a:	00 00                	add    %al,(%rax)
   1069c:	00 00                	add    %al,(%rax)
   1069e:	00 00                	add    %al,(%rax)
   106a0:	76 04                	jbe    106a6 <__intel_avx_rep_memcpy+0xb26>
   106a2:	00 00                	add    %al,(%rax)
   106a4:	00 00                	add    %al,(%rax)
   106a6:	00 00                	add    %al,(%rax)
   106a8:	76 04                	jbe    106ae <__intel_avx_rep_memcpy+0xb2e>
   106aa:	00 00                	add    %al,(%rax)
   106ac:	00 00                	add    %al,(%rax)
   106ae:	00 00                	add    %al,(%rax)
   106b0:	76 04                	jbe    106b6 <__intel_avx_rep_memcpy+0xb36>
   106b2:	00 00                	add    %al,(%rax)
   106b4:	00 00                	add    %al,(%rax)
   106b6:	00 00                	add    %al,(%rax)
   106b8:	76 04                	jbe    106be <__intel_avx_rep_memcpy+0xb3e>
   106ba:	00 00                	add    %al,(%rax)
   106bc:	00 00                	add    %al,(%rax)
   106be:	00 00                	add    %al,(%rax)
   106c0:	76 04                	jbe    106c6 <__intel_avx_rep_memcpy+0xb46>
   106c2:	00 00                	add    %al,(%rax)
   106c4:	00 00                	add    %al,(%rax)
   106c6:	00 00                	add    %al,(%rax)
   106c8:	76 04                	jbe    106ce <__intel_avx_rep_memcpy+0xb4e>
   106ca:	00 00                	add    %al,(%rax)
   106cc:	00 00                	add    %al,(%rax)
   106ce:	00 00                	add    %al,(%rax)
   106d0:	76 04                	jbe    106d6 <__intel_avx_rep_memcpy+0xb56>
   106d2:	00 00                	add    %al,(%rax)
   106d4:	00 00                	add    %al,(%rax)
   106d6:	00 00                	add    %al,(%rax)
   106d8:	76 04                	jbe    106de <__intel_avx_rep_memcpy+0xb5e>
   106da:	00 00                	add    %al,(%rax)
   106dc:	00 00                	add    %al,(%rax)
   106de:	00 00                	add    %al,(%rax)
   106e0:	76 04                	jbe    106e6 <__intel_avx_rep_memcpy+0xb66>
   106e2:	00 00                	add    %al,(%rax)
   106e4:	00 00                	add    %al,(%rax)
   106e6:	00 00                	add    %al,(%rax)
   106e8:	76 04                	jbe    106ee <__intel_avx_rep_memcpy+0xb6e>
   106ea:	00 00                	add    %al,(%rax)
   106ec:	00 00                	add    %al,(%rax)
   106ee:	00 00                	add    %al,(%rax)
   106f0:	76 04                	jbe    106f6 <__intel_avx_rep_memcpy+0xb76>
   106f2:	00 00                	add    %al,(%rax)
   106f4:	00 00                	add    %al,(%rax)
   106f6:	00 00                	add    %al,(%rax)
   106f8:	76 04                	jbe    106fe <__intel_avx_rep_memcpy+0xb7e>
   106fa:	00 00                	add    %al,(%rax)
   106fc:	00 00                	add    %al,(%rax)
   106fe:	00 00                	add    %al,(%rax)
   10700:	76 04                	jbe    10706 <__intel_avx_rep_memcpy+0xb86>
   10702:	00 00                	add    %al,(%rax)
   10704:	00 00                	add    %al,(%rax)
   10706:	00 00                	add    %al,(%rax)
   10708:	76 04                	jbe    1070e <__intel_avx_rep_memcpy+0xb8e>
   1070a:	00 00                	add    %al,(%rax)
   1070c:	00 00                	add    %al,(%rax)
   1070e:	00 00                	add    %al,(%rax)
   10710:	76 04                	jbe    10716 <__intel_avx_rep_memcpy+0xb96>
   10712:	00 00                	add    %al,(%rax)
   10714:	00 00                	add    %al,(%rax)
   10716:	00 00                	add    %al,(%rax)
   10718:	76 04                	jbe    1071e <__intel_avx_rep_memcpy+0xb9e>
   1071a:	00 00                	add    %al,(%rax)
   1071c:	00 00                	add    %al,(%rax)
   1071e:	00 00                	add    %al,(%rax)
   10720:	76 04                	jbe    10726 <__intel_avx_rep_memcpy+0xba6>
   10722:	00 00                	add    %al,(%rax)
   10724:	00 00                	add    %al,(%rax)
   10726:	00 00                	add    %al,(%rax)
   10728:	76 04                	jbe    1072e <__intel_avx_rep_memcpy+0xbae>
   1072a:	00 00                	add    %al,(%rax)
   1072c:	00 00                	add    %al,(%rax)
   1072e:	00 00                	add    %al,(%rax)
   10730:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   10734:	00 00                	add    %al,(%rax)
   10736:	00 00                	add    %al,(%rax)
   10738:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   1073c:	00 00                	add    %al,(%rax)
   1073e:	00 00                	add    %al,(%rax)
   10740:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   10744:	00 00                	add    %al,(%rax)
   10746:	00 00                	add    %al,(%rax)
   10748:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   1074c:	00 00                	add    %al,(%rax)
   1074e:	00 00                	add    %al,(%rax)
   10750:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   10754:	00 00                	add    %al,(%rax)
   10756:	00 00                	add    %al,(%rax)
   10758:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   1075c:	00 00                	add    %al,(%rax)
   1075e:	00 00                	add    %al,(%rax)
   10760:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   10764:	00 00                	add    %al,(%rax)
   10766:	00 00                	add    %al,(%rax)
   10768:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   1076c:	00 00                	add    %al,(%rax)
   1076e:	00 00                	add    %al,(%rax)
   10770:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   10774:	00 00                	add    %al,(%rax)
   10776:	00 00                	add    %al,(%rax)
   10778:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   1077c:	00 00                	add    %al,(%rax)
   1077e:	00 00                	add    %al,(%rax)
   10780:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   10784:	00 00                	add    %al,(%rax)
   10786:	00 00                	add    %al,(%rax)
   10788:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   1078c:	00 00                	add    %al,(%rax)
   1078e:	00 00                	add    %al,(%rax)
   10790:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   10794:	00 00                	add    %al,(%rax)
   10796:	00 00                	add    %al,(%rax)
   10798:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   1079c:	00 00                	add    %al,(%rax)
   1079e:	00 00                	add    %al,(%rax)
   107a0:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107a4:	00 00                	add    %al,(%rax)
   107a6:	00 00                	add    %al,(%rax)
   107a8:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107ac:	00 00                	add    %al,(%rax)
   107ae:	00 00                	add    %al,(%rax)
   107b0:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107b4:	00 00                	add    %al,(%rax)
   107b6:	00 00                	add    %al,(%rax)
   107b8:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107bc:	00 00                	add    %al,(%rax)
   107be:	00 00                	add    %al,(%rax)
   107c0:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107c4:	00 00                	add    %al,(%rax)
   107c6:	00 00                	add    %al,(%rax)
   107c8:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107cc:	00 00                	add    %al,(%rax)
   107ce:	00 00                	add    %al,(%rax)
   107d0:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107d4:	00 00                	add    %al,(%rax)
   107d6:	00 00                	add    %al,(%rax)
   107d8:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107dc:	00 00                	add    %al,(%rax)
   107de:	00 00                	add    %al,(%rax)
   107e0:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107e4:	00 00                	add    %al,(%rax)
   107e6:	00 00                	add    %al,(%rax)
   107e8:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107ec:	00 00                	add    %al,(%rax)
   107ee:	00 00                	add    %al,(%rax)
   107f0:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107f4:	00 00                	add    %al,(%rax)
   107f6:	00 00                	add    %al,(%rax)
   107f8:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   107fc:	00 00                	add    %al,(%rax)
   107fe:	00 00                	add    %al,(%rax)
   10800:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   10804:	00 00                	add    %al,(%rax)
   10806:	00 00                	add    %al,(%rax)
   10808:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   1080c:	00 00                	add    %al,(%rax)
   1080e:	00 00                	add    %al,(%rax)
   10810:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   10814:	00 00                	add    %al,(%rax)
   10816:	00 00                	add    %al,(%rax)
   10818:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   1081c:	00 00                	add    %al,(%rax)
   1081e:	00 00                	add    %al,(%rax)
   10820:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   10824:	00 00                	add    %al,(%rax)
   10826:	00 00                	add    %al,(%rax)
   10828:	80 04 00 00          	addb   $0x0,(%rax,%rax,1)
   1082c:	00 00                	add    %al,(%rax)
   1082e:	00 00                	add    %al,(%rax)
   10830:	90                   	nop
   10831:	04 00                	add    $0x0,%al
   10833:	00 00                	add    %al,(%rax)
   10835:	00 00                	add    %al,(%rax)
   10837:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1083d:	00 00                	add    %al,(%rax)
   1083f:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   10845:	00 00                	add    %al,(%rax)
   10847:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1084d:	00 00                	add    %al,(%rax)
   1084f:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   10855:	00 00                	add    %al,(%rax)
   10857:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1085d:	00 00                	add    %al,(%rax)
   1085f:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   10865:	00 00                	add    %al,(%rax)
   10867:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1086d:	00 00                	add    %al,(%rax)
   1086f:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   10875:	00 00                	add    %al,(%rax)
   10877:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1087d:	00 00                	add    %al,(%rax)
   1087f:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   10885:	00 00                	add    %al,(%rax)
   10887:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1088d:	00 00                	add    %al,(%rax)
   1088f:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   10895:	00 00                	add    %al,(%rax)
   10897:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1089d:	00 00                	add    %al,(%rax)
   1089f:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108a5:	00 00                	add    %al,(%rax)
   108a7:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108ad:	00 00                	add    %al,(%rax)
   108af:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108b5:	00 00                	add    %al,(%rax)
   108b7:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108bd:	00 00                	add    %al,(%rax)
   108bf:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108c5:	00 00                	add    %al,(%rax)
   108c7:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108cd:	00 00                	add    %al,(%rax)
   108cf:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108d5:	00 00                	add    %al,(%rax)
   108d7:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108dd:	00 00                	add    %al,(%rax)
   108df:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108e5:	00 00                	add    %al,(%rax)
   108e7:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108ed:	00 00                	add    %al,(%rax)
   108ef:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108f5:	00 00                	add    %al,(%rax)
   108f7:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   108fd:	00 00                	add    %al,(%rax)
   108ff:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   10905:	00 00                	add    %al,(%rax)
   10907:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1090d:	00 00                	add    %al,(%rax)
   1090f:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   10915:	00 00                	add    %al,(%rax)
   10917:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1091d:	00 00                	add    %al,(%rax)
   1091f:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   10925:	00 00                	add    %al,(%rax)
   10927:	00 90 04 00 00 00    	add    %dl,0x4(%rax)
   1092d:	00 00                	add    %al,(%rax)
   1092f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10935:	00 00                	add    %al,(%rax)
   10937:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   1093d:	00 00                	add    %al,(%rax)
   1093f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10945:	00 00                	add    %al,(%rax)
   10947:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   1094d:	00 00                	add    %al,(%rax)
   1094f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10955:	00 00                	add    %al,(%rax)
   10957:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   1095d:	00 00                	add    %al,(%rax)
   1095f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10965:	00 00                	add    %al,(%rax)
   10967:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   1096d:	00 00                	add    %al,(%rax)
   1096f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10975:	00 00                	add    %al,(%rax)
   10977:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   1097d:	00 00                	add    %al,(%rax)
   1097f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10985:	00 00                	add    %al,(%rax)
   10987:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   1098d:	00 00                	add    %al,(%rax)
   1098f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10995:	00 00                	add    %al,(%rax)
   10997:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   1099d:	00 00                	add    %al,(%rax)
   1099f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109a5:	00 00                	add    %al,(%rax)
   109a7:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109ad:	00 00                	add    %al,(%rax)
   109af:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109b5:	00 00                	add    %al,(%rax)
   109b7:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109bd:	00 00                	add    %al,(%rax)
   109bf:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109c5:	00 00                	add    %al,(%rax)
   109c7:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109cd:	00 00                	add    %al,(%rax)
   109cf:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109d5:	00 00                	add    %al,(%rax)
   109d7:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109dd:	00 00                	add    %al,(%rax)
   109df:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109e5:	00 00                	add    %al,(%rax)
   109e7:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109ed:	00 00                	add    %al,(%rax)
   109ef:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109f5:	00 00                	add    %al,(%rax)
   109f7:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   109fd:	00 00                	add    %al,(%rax)
   109ff:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10a05:	00 00                	add    %al,(%rax)
   10a07:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10a0d:	00 00                	add    %al,(%rax)
   10a0f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10a15:	00 00                	add    %al,(%rax)
   10a17:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10a1d:	00 00                	add    %al,(%rax)
   10a1f:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10a25:	00 00                	add    %al,(%rax)
   10a27:	00 a0 04 00 00 00    	add    %ah,0x4(%rax)
   10a2d:	00 00                	add    %al,(%rax)
   10a2f:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a35:	00 00                	add    %al,(%rax)
   10a37:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a3d:	00 00                	add    %al,(%rax)
   10a3f:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a45:	00 00                	add    %al,(%rax)
   10a47:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a4d:	00 00                	add    %al,(%rax)
   10a4f:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a55:	00 00                	add    %al,(%rax)
   10a57:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a5d:	00 00                	add    %al,(%rax)
   10a5f:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a65:	00 00                	add    %al,(%rax)
   10a67:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a6d:	00 00                	add    %al,(%rax)
   10a6f:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a75:	00 00                	add    %al,(%rax)
   10a77:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a7d:	00 00                	add    %al,(%rax)
   10a7f:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a85:	00 00                	add    %al,(%rax)
   10a87:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a8d:	00 00                	add    %al,(%rax)
   10a8f:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a95:	00 00                	add    %al,(%rax)
   10a97:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10a9d:	00 00                	add    %al,(%rax)
   10a9f:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10aa5:	00 00                	add    %al,(%rax)
   10aa7:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10aad:	00 00                	add    %al,(%rax)
   10aaf:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10ab5:	00 00                	add    %al,(%rax)
   10ab7:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10abd:	00 00                	add    %al,(%rax)
   10abf:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10ac5:	00 00                	add    %al,(%rax)
   10ac7:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10acd:	00 00                	add    %al,(%rax)
   10acf:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10ad5:	00 00                	add    %al,(%rax)
   10ad7:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10add:	00 00                	add    %al,(%rax)
   10adf:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10ae5:	00 00                	add    %al,(%rax)
   10ae7:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10aed:	00 00                	add    %al,(%rax)
   10aef:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10af5:	00 00                	add    %al,(%rax)
   10af7:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10afd:	00 00                	add    %al,(%rax)
   10aff:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10b05:	00 00                	add    %al,(%rax)
   10b07:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10b0d:	00 00                	add    %al,(%rax)
   10b0f:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10b15:	00 00                	add    %al,(%rax)
   10b17:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10b1d:	00 00                	add    %al,(%rax)
   10b1f:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10b25:	00 00                	add    %al,(%rax)
   10b27:	00 b0 04 00 00 00    	add    %dh,0x4(%rax)
   10b2d:	00 00                	add    %al,(%rax)
   10b2f:	00 30                	add    %dh,(%rax)
   10b31:	0c 00                	or     $0x0,%al
   10b33:	00 00                	add    %al,(%rax)
   10b35:	00 00                	add    %al,(%rax)
   10b37:	00 40 0c             	add    %al,0xc(%rax)
   10b3a:	00 00                	add    %al,(%rax)
   10b3c:	00 00                	add    %al,(%rax)
   10b3e:	00 00                	add    %al,(%rax)
   10b40:	20 0c 00             	and    %cl,(%rax,%rax,1)
   10b43:	00 00                	add    %al,(%rax)
   10b45:	00 00                	add    %al,(%rax)
   10b47:	00 10                	add    %dl,(%rax)
   10b49:	0c 00                	or     $0x0,%al
   10b4b:	00 00                	add    %al,(%rax)
   10b4d:	00 00                	add    %al,(%rax)
   10b4f:	00 f0                	add    %dh,%al
   10b51:	0b 00                	or     (%rax),%eax
   10b53:	00 00                	add    %al,(%rax)
   10b55:	00 00                	add    %al,(%rax)
   10b57:	00 e0                	add    %ah,%al
   10b59:	0b 00                	or     (%rax),%eax
   10b5b:	00 00                	add    %al,(%rax)
   10b5d:	00 00                	add    %al,(%rax)
   10b5f:	00 e0                	add    %ah,%al
   10b61:	0b 00                	or     (%rax),%eax
   10b63:	00 00                	add    %al,(%rax)
   10b65:	00 00                	add    %al,(%rax)
   10b67:	00 e0                	add    %ah,%al
   10b69:	0b 00                	or     (%rax),%eax
   10b6b:	00 00                	add    %al,(%rax)
   10b6d:	00 00                	add    %al,(%rax)
   10b6f:	00 c0                	add    %al,%al
   10b71:	0b 00                	or     (%rax),%eax
   10b73:	00 00                	add    %al,(%rax)
   10b75:	00 00                	add    %al,(%rax)
   10b77:	00 b0 0b 00 00 00    	add    %dh,0xb(%rax)
   10b7d:	00 00                	add    %al,(%rax)
   10b7f:	00 b0 0b 00 00 00    	add    %dh,0xb(%rax)
   10b85:	00 00                	add    %al,(%rax)
   10b87:	00 b0 0b 00 00 00    	add    %dh,0xb(%rax)
   10b8d:	00 00                	add    %al,(%rax)
   10b8f:	00 b0 0b 00 00 00    	add    %dh,0xb(%rax)
   10b95:	00 00                	add    %al,(%rax)
   10b97:	00 b0 0b 00 00 00    	add    %dh,0xb(%rax)
   10b9d:	00 00                	add    %al,(%rax)
   10b9f:	00 b0 0b 00 00 00    	add    %dh,0xb(%rax)
   10ba5:	00 00                	add    %al,(%rax)
   10ba7:	00 b0 0b 00 00 00    	add    %dh,0xb(%rax)
   10bad:	00 00                	add    %al,(%rax)
   10baf:	00 90 0b 00 00 00    	add    %dl,0xb(%rax)
   10bb5:	00 00                	add    %al,(%rax)
   10bb7:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10bbd:	00 00                	add    %al,(%rax)
   10bbf:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10bc5:	00 00                	add    %al,(%rax)
   10bc7:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10bcd:	00 00                	add    %al,(%rax)
   10bcf:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10bd5:	00 00                	add    %al,(%rax)
   10bd7:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10bdd:	00 00                	add    %al,(%rax)
   10bdf:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10be5:	00 00                	add    %al,(%rax)
   10be7:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10bed:	00 00                	add    %al,(%rax)
   10bef:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10bf5:	00 00                	add    %al,(%rax)
   10bf7:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10bfd:	00 00                	add    %al,(%rax)
   10bff:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10c05:	00 00                	add    %al,(%rax)
   10c07:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10c0d:	00 00                	add    %al,(%rax)
   10c0f:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10c15:	00 00                	add    %al,(%rax)
   10c17:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10c1d:	00 00                	add    %al,(%rax)
   10c1f:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10c25:	00 00                	add    %al,(%rax)
   10c27:	00 80 0b 00 00 00    	add    %al,0xb(%rax)
   10c2d:	00 00                	add    %al,(%rax)
   10c2f:	00 14 09             	add    %dl,(%rcx,%rcx,1)
   10c32:	00 00                	add    %al,(%rax)
   10c34:	00 00                	add    %al,(%rax)
   10c36:	00 00                	add    %al,(%rax)
   10c38:	60                   	(bad)  
   10c39:	0b 00                	or     (%rax),%eax
   10c3b:	00 00                	add    %al,(%rax)
   10c3d:	00 00                	add    %al,(%rax)
   10c3f:	00 60 0b             	add    %ah,0xb(%rax)
   10c42:	00 00                	add    %al,(%rax)
   10c44:	00 00                	add    %al,(%rax)
   10c46:	00 00                	add    %al,(%rax)
   10c48:	60                   	(bad)  
   10c49:	0b 00                	or     (%rax),%eax
   10c4b:	00 00                	add    %al,(%rax)
   10c4d:	00 00                	add    %al,(%rax)
   10c4f:	00 60 0b             	add    %ah,0xb(%rax)
   10c52:	00 00                	add    %al,(%rax)
   10c54:	00 00                	add    %al,(%rax)
   10c56:	00 00                	add    %al,(%rax)
   10c58:	60                   	(bad)  
   10c59:	0b 00                	or     (%rax),%eax
   10c5b:	00 00                	add    %al,(%rax)
   10c5d:	00 00                	add    %al,(%rax)
   10c5f:	00 60 0b             	add    %ah,0xb(%rax)
   10c62:	00 00                	add    %al,(%rax)
   10c64:	00 00                	add    %al,(%rax)
   10c66:	00 00                	add    %al,(%rax)
   10c68:	60                   	(bad)  
   10c69:	0b 00                	or     (%rax),%eax
   10c6b:	00 00                	add    %al,(%rax)
   10c6d:	00 00                	add    %al,(%rax)
   10c6f:	00 60 0b             	add    %ah,0xb(%rax)
   10c72:	00 00                	add    %al,(%rax)
   10c74:	00 00                	add    %al,(%rax)
   10c76:	00 00                	add    %al,(%rax)
   10c78:	60                   	(bad)  
   10c79:	0b 00                	or     (%rax),%eax
   10c7b:	00 00                	add    %al,(%rax)
   10c7d:	00 00                	add    %al,(%rax)
   10c7f:	00 60 0b             	add    %ah,0xb(%rax)
   10c82:	00 00                	add    %al,(%rax)
   10c84:	00 00                	add    %al,(%rax)
   10c86:	00 00                	add    %al,(%rax)
   10c88:	60                   	(bad)  
   10c89:	0b 00                	or     (%rax),%eax
   10c8b:	00 00                	add    %al,(%rax)
   10c8d:	00 00                	add    %al,(%rax)
   10c8f:	00 60 0b             	add    %ah,0xb(%rax)
   10c92:	00 00                	add    %al,(%rax)
   10c94:	00 00                	add    %al,(%rax)
   10c96:	00 00                	add    %al,(%rax)
   10c98:	60                   	(bad)  
   10c99:	0b 00                	or     (%rax),%eax
   10c9b:	00 00                	add    %al,(%rax)
   10c9d:	00 00                	add    %al,(%rax)
   10c9f:	00 60 0b             	add    %ah,0xb(%rax)
   10ca2:	00 00                	add    %al,(%rax)
   10ca4:	00 00                	add    %al,(%rax)
   10ca6:	00 00                	add    %al,(%rax)
   10ca8:	60                   	(bad)  
   10ca9:	0b 00                	or     (%rax),%eax
   10cab:	00 00                	add    %al,(%rax)
   10cad:	00 00                	add    %al,(%rax)
   10caf:	00 60 0b             	add    %ah,0xb(%rax)
   10cb2:	00 00                	add    %al,(%rax)
   10cb4:	00 00                	add    %al,(%rax)
   10cb6:	00 00                	add    %al,(%rax)
   10cb8:	60                   	(bad)  
   10cb9:	0b 00                	or     (%rax),%eax
   10cbb:	00 00                	add    %al,(%rax)
   10cbd:	00 00                	add    %al,(%rax)
   10cbf:	00 60 0b             	add    %ah,0xb(%rax)
   10cc2:	00 00                	add    %al,(%rax)
   10cc4:	00 00                	add    %al,(%rax)
   10cc6:	00 00                	add    %al,(%rax)
   10cc8:	60                   	(bad)  
   10cc9:	0b 00                	or     (%rax),%eax
   10ccb:	00 00                	add    %al,(%rax)
   10ccd:	00 00                	add    %al,(%rax)
   10ccf:	00 60 0b             	add    %ah,0xb(%rax)
   10cd2:	00 00                	add    %al,(%rax)
   10cd4:	00 00                	add    %al,(%rax)
   10cd6:	00 00                	add    %al,(%rax)
   10cd8:	60                   	(bad)  
   10cd9:	0b 00                	or     (%rax),%eax
   10cdb:	00 00                	add    %al,(%rax)
   10cdd:	00 00                	add    %al,(%rax)
   10cdf:	00 60 0b             	add    %ah,0xb(%rax)
   10ce2:	00 00                	add    %al,(%rax)
   10ce4:	00 00                	add    %al,(%rax)
   10ce6:	00 00                	add    %al,(%rax)
   10ce8:	60                   	(bad)  
   10ce9:	0b 00                	or     (%rax),%eax
   10ceb:	00 00                	add    %al,(%rax)
   10ced:	00 00                	add    %al,(%rax)
   10cef:	00 60 0b             	add    %ah,0xb(%rax)
   10cf2:	00 00                	add    %al,(%rax)
   10cf4:	00 00                	add    %al,(%rax)
   10cf6:	00 00                	add    %al,(%rax)
   10cf8:	60                   	(bad)  
   10cf9:	0b 00                	or     (%rax),%eax
   10cfb:	00 00                	add    %al,(%rax)
   10cfd:	00 00                	add    %al,(%rax)
   10cff:	00 60 0b             	add    %ah,0xb(%rax)
   10d02:	00 00                	add    %al,(%rax)
   10d04:	00 00                	add    %al,(%rax)
   10d06:	00 00                	add    %al,(%rax)
   10d08:	60                   	(bad)  
   10d09:	0b 00                	or     (%rax),%eax
   10d0b:	00 00                	add    %al,(%rax)
   10d0d:	00 00                	add    %al,(%rax)
   10d0f:	00 60 0b             	add    %ah,0xb(%rax)
   10d12:	00 00                	add    %al,(%rax)
   10d14:	00 00                	add    %al,(%rax)
   10d16:	00 00                	add    %al,(%rax)
   10d18:	60                   	(bad)  
   10d19:	0b 00                	or     (%rax),%eax
   10d1b:	00 00                	add    %al,(%rax)
   10d1d:	00 00                	add    %al,(%rax)
   10d1f:	00 60 0b             	add    %ah,0xb(%rax)
   10d22:	00 00                	add    %al,(%rax)
   10d24:	00 00                	add    %al,(%rax)
   10d26:	00 00                	add    %al,(%rax)
   10d28:	60                   	(bad)  
   10d29:	0b 00                	or     (%rax),%eax
   10d2b:	00 00                	add    %al,(%rax)
   10d2d:	00 00                	add    %al,(%rax)
   10d2f:	00 20                	add    %ah,(%rax)
   10d31:	09 00                	or     %eax,(%rax)
   10d33:	00 00                	add    %al,(%rax)
   10d35:	00 00                	add    %al,(%rax)
   10d37:	00 40 0b             	add    %al,0xb(%rax)
   10d3a:	00 00                	add    %al,(%rax)
   10d3c:	00 00                	add    %al,(%rax)
   10d3e:	00 00                	add    %al,(%rax)
   10d40:	40 0b 00             	rex or (%rax),%eax
   10d43:	00 00                	add    %al,(%rax)
   10d45:	00 00                	add    %al,(%rax)
   10d47:	00 40 0b             	add    %al,0xb(%rax)
   10d4a:	00 00                	add    %al,(%rax)
   10d4c:	00 00                	add    %al,(%rax)
   10d4e:	00 00                	add    %al,(%rax)
   10d50:	40 0b 00             	rex or (%rax),%eax
   10d53:	00 00                	add    %al,(%rax)
   10d55:	00 00                	add    %al,(%rax)
   10d57:	00 40 0b             	add    %al,0xb(%rax)
   10d5a:	00 00                	add    %al,(%rax)
   10d5c:	00 00                	add    %al,(%rax)
   10d5e:	00 00                	add    %al,(%rax)
   10d60:	40 0b 00             	rex or (%rax),%eax
   10d63:	00 00                	add    %al,(%rax)
   10d65:	00 00                	add    %al,(%rax)
   10d67:	00 40 0b             	add    %al,0xb(%rax)
   10d6a:	00 00                	add    %al,(%rax)
   10d6c:	00 00                	add    %al,(%rax)
   10d6e:	00 00                	add    %al,(%rax)
   10d70:	40 0b 00             	rex or (%rax),%eax
   10d73:	00 00                	add    %al,(%rax)
   10d75:	00 00                	add    %al,(%rax)
   10d77:	00 40 0b             	add    %al,0xb(%rax)
   10d7a:	00 00                	add    %al,(%rax)
   10d7c:	00 00                	add    %al,(%rax)
   10d7e:	00 00                	add    %al,(%rax)
   10d80:	40 0b 00             	rex or (%rax),%eax
   10d83:	00 00                	add    %al,(%rax)
   10d85:	00 00                	add    %al,(%rax)
   10d87:	00 40 0b             	add    %al,0xb(%rax)
   10d8a:	00 00                	add    %al,(%rax)
   10d8c:	00 00                	add    %al,(%rax)
   10d8e:	00 00                	add    %al,(%rax)
   10d90:	40 0b 00             	rex or (%rax),%eax
   10d93:	00 00                	add    %al,(%rax)
   10d95:	00 00                	add    %al,(%rax)
   10d97:	00 40 0b             	add    %al,0xb(%rax)
   10d9a:	00 00                	add    %al,(%rax)
   10d9c:	00 00                	add    %al,(%rax)
   10d9e:	00 00                	add    %al,(%rax)
   10da0:	40 0b 00             	rex or (%rax),%eax
   10da3:	00 00                	add    %al,(%rax)
   10da5:	00 00                	add    %al,(%rax)
   10da7:	00 40 0b             	add    %al,0xb(%rax)
   10daa:	00 00                	add    %al,(%rax)
   10dac:	00 00                	add    %al,(%rax)
   10dae:	00 00                	add    %al,(%rax)
   10db0:	40 0b 00             	rex or (%rax),%eax
   10db3:	00 00                	add    %al,(%rax)
   10db5:	00 00                	add    %al,(%rax)
   10db7:	00 40 0b             	add    %al,0xb(%rax)
   10dba:	00 00                	add    %al,(%rax)
   10dbc:	00 00                	add    %al,(%rax)
   10dbe:	00 00                	add    %al,(%rax)
   10dc0:	40 0b 00             	rex or (%rax),%eax
   10dc3:	00 00                	add    %al,(%rax)
   10dc5:	00 00                	add    %al,(%rax)
   10dc7:	00 40 0b             	add    %al,0xb(%rax)
   10dca:	00 00                	add    %al,(%rax)
   10dcc:	00 00                	add    %al,(%rax)
   10dce:	00 00                	add    %al,(%rax)
   10dd0:	40 0b 00             	rex or (%rax),%eax
   10dd3:	00 00                	add    %al,(%rax)
   10dd5:	00 00                	add    %al,(%rax)
   10dd7:	00 40 0b             	add    %al,0xb(%rax)
   10dda:	00 00                	add    %al,(%rax)
   10ddc:	00 00                	add    %al,(%rax)
   10dde:	00 00                	add    %al,(%rax)
   10de0:	40 0b 00             	rex or (%rax),%eax
   10de3:	00 00                	add    %al,(%rax)
   10de5:	00 00                	add    %al,(%rax)
   10de7:	00 40 0b             	add    %al,0xb(%rax)
   10dea:	00 00                	add    %al,(%rax)
   10dec:	00 00                	add    %al,(%rax)
   10dee:	00 00                	add    %al,(%rax)
   10df0:	40 0b 00             	rex or (%rax),%eax
   10df3:	00 00                	add    %al,(%rax)
   10df5:	00 00                	add    %al,(%rax)
   10df7:	00 40 0b             	add    %al,0xb(%rax)
   10dfa:	00 00                	add    %al,(%rax)
   10dfc:	00 00                	add    %al,(%rax)
   10dfe:	00 00                	add    %al,(%rax)
   10e00:	40 0b 00             	rex or (%rax),%eax
   10e03:	00 00                	add    %al,(%rax)
   10e05:	00 00                	add    %al,(%rax)
   10e07:	00 40 0b             	add    %al,0xb(%rax)
   10e0a:	00 00                	add    %al,(%rax)
   10e0c:	00 00                	add    %al,(%rax)
   10e0e:	00 00                	add    %al,(%rax)
   10e10:	40 0b 00             	rex or (%rax),%eax
   10e13:	00 00                	add    %al,(%rax)
   10e15:	00 00                	add    %al,(%rax)
   10e17:	00 40 0b             	add    %al,0xb(%rax)
   10e1a:	00 00                	add    %al,(%rax)
   10e1c:	00 00                	add    %al,(%rax)
   10e1e:	00 00                	add    %al,(%rax)
   10e20:	40 0b 00             	rex or (%rax),%eax
   10e23:	00 00                	add    %al,(%rax)
   10e25:	00 00                	add    %al,(%rax)
   10e27:	00 40 0b             	add    %al,0xb(%rax)
   10e2a:	00 00                	add    %al,(%rax)
   10e2c:	00 00                	add    %al,(%rax)
   10e2e:	00 00                	add    %al,(%rax)
   10e30:	2c 09                	sub    $0x9,%al
   10e32:	00 00                	add    %al,(%rax)
   10e34:	00 00                	add    %al,(%rax)
   10e36:	00 00                	add    %al,(%rax)
   10e38:	10 0b                	adc    %cl,(%rbx)
   10e3a:	00 00                	add    %al,(%rax)
   10e3c:	00 00                	add    %al,(%rax)
   10e3e:	00 00                	add    %al,(%rax)
   10e40:	10 0b                	adc    %cl,(%rbx)
   10e42:	00 00                	add    %al,(%rax)
   10e44:	00 00                	add    %al,(%rax)
   10e46:	00 00                	add    %al,(%rax)
   10e48:	10 0b                	adc    %cl,(%rbx)
   10e4a:	00 00                	add    %al,(%rax)
   10e4c:	00 00                	add    %al,(%rax)
   10e4e:	00 00                	add    %al,(%rax)
   10e50:	10 0b                	adc    %cl,(%rbx)
   10e52:	00 00                	add    %al,(%rax)
   10e54:	00 00                	add    %al,(%rax)
   10e56:	00 00                	add    %al,(%rax)
   10e58:	10 0b                	adc    %cl,(%rbx)
   10e5a:	00 00                	add    %al,(%rax)
   10e5c:	00 00                	add    %al,(%rax)
   10e5e:	00 00                	add    %al,(%rax)
   10e60:	10 0b                	adc    %cl,(%rbx)
   10e62:	00 00                	add    %al,(%rax)
   10e64:	00 00                	add    %al,(%rax)
   10e66:	00 00                	add    %al,(%rax)
   10e68:	10 0b                	adc    %cl,(%rbx)
   10e6a:	00 00                	add    %al,(%rax)
   10e6c:	00 00                	add    %al,(%rax)
   10e6e:	00 00                	add    %al,(%rax)
   10e70:	10 0b                	adc    %cl,(%rbx)
   10e72:	00 00                	add    %al,(%rax)
   10e74:	00 00                	add    %al,(%rax)
   10e76:	00 00                	add    %al,(%rax)
   10e78:	10 0b                	adc    %cl,(%rbx)
   10e7a:	00 00                	add    %al,(%rax)
   10e7c:	00 00                	add    %al,(%rax)
   10e7e:	00 00                	add    %al,(%rax)
   10e80:	10 0b                	adc    %cl,(%rbx)
   10e82:	00 00                	add    %al,(%rax)
   10e84:	00 00                	add    %al,(%rax)
   10e86:	00 00                	add    %al,(%rax)
   10e88:	10 0b                	adc    %cl,(%rbx)
   10e8a:	00 00                	add    %al,(%rax)
   10e8c:	00 00                	add    %al,(%rax)
   10e8e:	00 00                	add    %al,(%rax)
   10e90:	10 0b                	adc    %cl,(%rbx)
   10e92:	00 00                	add    %al,(%rax)
   10e94:	00 00                	add    %al,(%rax)
   10e96:	00 00                	add    %al,(%rax)
   10e98:	10 0b                	adc    %cl,(%rbx)
   10e9a:	00 00                	add    %al,(%rax)
   10e9c:	00 00                	add    %al,(%rax)
   10e9e:	00 00                	add    %al,(%rax)
   10ea0:	10 0b                	adc    %cl,(%rbx)
   10ea2:	00 00                	add    %al,(%rax)
   10ea4:	00 00                	add    %al,(%rax)
   10ea6:	00 00                	add    %al,(%rax)
   10ea8:	10 0b                	adc    %cl,(%rbx)
   10eaa:	00 00                	add    %al,(%rax)
   10eac:	00 00                	add    %al,(%rax)
   10eae:	00 00                	add    %al,(%rax)
   10eb0:	10 0b                	adc    %cl,(%rbx)
   10eb2:	00 00                	add    %al,(%rax)
   10eb4:	00 00                	add    %al,(%rax)
   10eb6:	00 00                	add    %al,(%rax)
   10eb8:	10 0b                	adc    %cl,(%rbx)
   10eba:	00 00                	add    %al,(%rax)
   10ebc:	00 00                	add    %al,(%rax)
   10ebe:	00 00                	add    %al,(%rax)
   10ec0:	10 0b                	adc    %cl,(%rbx)
   10ec2:	00 00                	add    %al,(%rax)
   10ec4:	00 00                	add    %al,(%rax)
   10ec6:	00 00                	add    %al,(%rax)
   10ec8:	10 0b                	adc    %cl,(%rbx)
   10eca:	00 00                	add    %al,(%rax)
   10ecc:	00 00                	add    %al,(%rax)
   10ece:	00 00                	add    %al,(%rax)
   10ed0:	10 0b                	adc    %cl,(%rbx)
   10ed2:	00 00                	add    %al,(%rax)
   10ed4:	00 00                	add    %al,(%rax)
   10ed6:	00 00                	add    %al,(%rax)
   10ed8:	10 0b                	adc    %cl,(%rbx)
   10eda:	00 00                	add    %al,(%rax)
   10edc:	00 00                	add    %al,(%rax)
   10ede:	00 00                	add    %al,(%rax)
   10ee0:	10 0b                	adc    %cl,(%rbx)
   10ee2:	00 00                	add    %al,(%rax)
   10ee4:	00 00                	add    %al,(%rax)
   10ee6:	00 00                	add    %al,(%rax)
   10ee8:	10 0b                	adc    %cl,(%rbx)
   10eea:	00 00                	add    %al,(%rax)
   10eec:	00 00                	add    %al,(%rax)
   10eee:	00 00                	add    %al,(%rax)
   10ef0:	10 0b                	adc    %cl,(%rbx)
   10ef2:	00 00                	add    %al,(%rax)
   10ef4:	00 00                	add    %al,(%rax)
   10ef6:	00 00                	add    %al,(%rax)
   10ef8:	10 0b                	adc    %cl,(%rbx)
   10efa:	00 00                	add    %al,(%rax)
   10efc:	00 00                	add    %al,(%rax)
   10efe:	00 00                	add    %al,(%rax)
   10f00:	10 0b                	adc    %cl,(%rbx)
   10f02:	00 00                	add    %al,(%rax)
   10f04:	00 00                	add    %al,(%rax)
   10f06:	00 00                	add    %al,(%rax)
   10f08:	10 0b                	adc    %cl,(%rbx)
   10f0a:	00 00                	add    %al,(%rax)
   10f0c:	00 00                	add    %al,(%rax)
   10f0e:	00 00                	add    %al,(%rax)
   10f10:	10 0b                	adc    %cl,(%rbx)
   10f12:	00 00                	add    %al,(%rax)
   10f14:	00 00                	add    %al,(%rax)
   10f16:	00 00                	add    %al,(%rax)
   10f18:	10 0b                	adc    %cl,(%rbx)
   10f1a:	00 00                	add    %al,(%rax)
   10f1c:	00 00                	add    %al,(%rax)
   10f1e:	00 00                	add    %al,(%rax)
   10f20:	10 0b                	adc    %cl,(%rbx)
   10f22:	00 00                	add    %al,(%rax)
   10f24:	00 00                	add    %al,(%rax)
   10f26:	00 00                	add    %al,(%rax)
   10f28:	10 0b                	adc    %cl,(%rbx)
   10f2a:	00 00                	add    %al,(%rax)
   10f2c:	00 00                	add    %al,(%rax)
   10f2e:	00 00                	add    %al,(%rax)
   10f30:	38 09                	cmp    %cl,(%rcx)
   10f32:	00 00                	add    %al,(%rax)
   10f34:	00 00                	add    %al,(%rax)
   10f36:	00 00                	add    %al,(%rax)
   10f38:	e0 0a                	loopne 10f44 <__intel_avx_rep_memcpy+0x13c4>
   10f3a:	00 00                	add    %al,(%rax)
   10f3c:	00 00                	add    %al,(%rax)
   10f3e:	00 00                	add    %al,(%rax)
   10f40:	e0 0a                	loopne 10f4c <__intel_avx_rep_memcpy+0x13cc>
   10f42:	00 00                	add    %al,(%rax)
   10f44:	00 00                	add    %al,(%rax)
   10f46:	00 00                	add    %al,(%rax)
   10f48:	e0 0a                	loopne 10f54 <__intel_avx_rep_memcpy+0x13d4>
   10f4a:	00 00                	add    %al,(%rax)
   10f4c:	00 00                	add    %al,(%rax)
   10f4e:	00 00                	add    %al,(%rax)
   10f50:	e0 0a                	loopne 10f5c <__intel_avx_rep_memcpy+0x13dc>
   10f52:	00 00                	add    %al,(%rax)
   10f54:	00 00                	add    %al,(%rax)
   10f56:	00 00                	add    %al,(%rax)
   10f58:	e0 0a                	loopne 10f64 <__intel_avx_rep_memcpy+0x13e4>
   10f5a:	00 00                	add    %al,(%rax)
   10f5c:	00 00                	add    %al,(%rax)
   10f5e:	00 00                	add    %al,(%rax)
   10f60:	e0 0a                	loopne 10f6c <__intel_avx_rep_memcpy+0x13ec>
   10f62:	00 00                	add    %al,(%rax)
   10f64:	00 00                	add    %al,(%rax)
   10f66:	00 00                	add    %al,(%rax)
   10f68:	e0 0a                	loopne 10f74 <__intel_avx_rep_memcpy+0x13f4>
   10f6a:	00 00                	add    %al,(%rax)
   10f6c:	00 00                	add    %al,(%rax)
   10f6e:	00 00                	add    %al,(%rax)
   10f70:	e0 0a                	loopne 10f7c <__intel_avx_rep_memcpy+0x13fc>
   10f72:	00 00                	add    %al,(%rax)
   10f74:	00 00                	add    %al,(%rax)
   10f76:	00 00                	add    %al,(%rax)
   10f78:	e0 0a                	loopne 10f84 <__intel_avx_rep_memcpy+0x1404>
   10f7a:	00 00                	add    %al,(%rax)
   10f7c:	00 00                	add    %al,(%rax)
   10f7e:	00 00                	add    %al,(%rax)
   10f80:	e0 0a                	loopne 10f8c <__intel_avx_rep_memcpy+0x140c>
   10f82:	00 00                	add    %al,(%rax)
   10f84:	00 00                	add    %al,(%rax)
   10f86:	00 00                	add    %al,(%rax)
   10f88:	e0 0a                	loopne 10f94 <__intel_avx_rep_memcpy+0x1414>
   10f8a:	00 00                	add    %al,(%rax)
   10f8c:	00 00                	add    %al,(%rax)
   10f8e:	00 00                	add    %al,(%rax)
   10f90:	e0 0a                	loopne 10f9c <__intel_avx_rep_memcpy+0x141c>
   10f92:	00 00                	add    %al,(%rax)
   10f94:	00 00                	add    %al,(%rax)
   10f96:	00 00                	add    %al,(%rax)
   10f98:	e0 0a                	loopne 10fa4 <__intel_avx_rep_memcpy+0x1424>
   10f9a:	00 00                	add    %al,(%rax)
   10f9c:	00 00                	add    %al,(%rax)
   10f9e:	00 00                	add    %al,(%rax)
   10fa0:	e0 0a                	loopne 10fac <__intel_avx_rep_memcpy+0x142c>
   10fa2:	00 00                	add    %al,(%rax)
   10fa4:	00 00                	add    %al,(%rax)
   10fa6:	00 00                	add    %al,(%rax)
   10fa8:	e0 0a                	loopne 10fb4 <__intel_avx_rep_memcpy+0x1434>
   10faa:	00 00                	add    %al,(%rax)
   10fac:	00 00                	add    %al,(%rax)
   10fae:	00 00                	add    %al,(%rax)
   10fb0:	e0 0a                	loopne 10fbc <__intel_avx_rep_memcpy+0x143c>
   10fb2:	00 00                	add    %al,(%rax)
   10fb4:	00 00                	add    %al,(%rax)
   10fb6:	00 00                	add    %al,(%rax)
   10fb8:	e0 0a                	loopne 10fc4 <__intel_avx_rep_memcpy+0x1444>
   10fba:	00 00                	add    %al,(%rax)
   10fbc:	00 00                	add    %al,(%rax)
   10fbe:	00 00                	add    %al,(%rax)
   10fc0:	e0 0a                	loopne 10fcc <__intel_avx_rep_memcpy+0x144c>
   10fc2:	00 00                	add    %al,(%rax)
   10fc4:	00 00                	add    %al,(%rax)
   10fc6:	00 00                	add    %al,(%rax)
   10fc8:	e0 0a                	loopne 10fd4 <__intel_avx_rep_memcpy+0x1454>
   10fca:	00 00                	add    %al,(%rax)
   10fcc:	00 00                	add    %al,(%rax)
   10fce:	00 00                	add    %al,(%rax)
   10fd0:	e0 0a                	loopne 10fdc <__intel_avx_rep_memcpy+0x145c>
   10fd2:	00 00                	add    %al,(%rax)
   10fd4:	00 00                	add    %al,(%rax)
   10fd6:	00 00                	add    %al,(%rax)
   10fd8:	e0 0a                	loopne 10fe4 <__intel_avx_rep_memcpy+0x1464>
   10fda:	00 00                	add    %al,(%rax)
   10fdc:	00 00                	add    %al,(%rax)
   10fde:	00 00                	add    %al,(%rax)
   10fe0:	e0 0a                	loopne 10fec <__intel_avx_rep_memcpy+0x146c>
   10fe2:	00 00                	add    %al,(%rax)
   10fe4:	00 00                	add    %al,(%rax)
   10fe6:	00 00                	add    %al,(%rax)
   10fe8:	e0 0a                	loopne 10ff4 <__intel_avx_rep_memcpy+0x1474>
   10fea:	00 00                	add    %al,(%rax)
   10fec:	00 00                	add    %al,(%rax)
   10fee:	00 00                	add    %al,(%rax)
   10ff0:	e0 0a                	loopne 10ffc <__intel_avx_rep_memcpy+0x147c>
   10ff2:	00 00                	add    %al,(%rax)
   10ff4:	00 00                	add    %al,(%rax)
   10ff6:	00 00                	add    %al,(%rax)
   10ff8:	e0 0a                	loopne 11004 <__intel_avx_rep_memcpy+0x1484>
   10ffa:	00 00                	add    %al,(%rax)
   10ffc:	00 00                	add    %al,(%rax)
   10ffe:	00 00                	add    %al,(%rax)
   11000:	e0 0a                	loopne 1100c <__intel_avx_rep_memcpy+0x148c>
   11002:	00 00                	add    %al,(%rax)
   11004:	00 00                	add    %al,(%rax)
   11006:	00 00                	add    %al,(%rax)
   11008:	e0 0a                	loopne 11014 <__intel_avx_rep_memcpy+0x1494>
   1100a:	00 00                	add    %al,(%rax)
   1100c:	00 00                	add    %al,(%rax)
   1100e:	00 00                	add    %al,(%rax)
   11010:	e0 0a                	loopne 1101c <__intel_avx_rep_memcpy+0x149c>
   11012:	00 00                	add    %al,(%rax)
   11014:	00 00                	add    %al,(%rax)
   11016:	00 00                	add    %al,(%rax)
   11018:	e0 0a                	loopne 11024 <__intel_avx_rep_memcpy+0x14a4>
   1101a:	00 00                	add    %al,(%rax)
   1101c:	00 00                	add    %al,(%rax)
   1101e:	00 00                	add    %al,(%rax)
   11020:	e0 0a                	loopne 1102c <__intel_avx_rep_memcpy+0x14ac>
   11022:	00 00                	add    %al,(%rax)
   11024:	00 00                	add    %al,(%rax)
   11026:	00 00                	add    %al,(%rax)
   11028:	e0 0a                	loopne 11034 <__intel_avx_rep_memcpy+0x14b4>
   1102a:	00 00                	add    %al,(%rax)
   1102c:	00 00                	add    %al,(%rax)
   1102e:	00 00                	add    %al,(%rax)
   11030:	4a 09 00             	rex.WX or %rax,(%rax)
   11033:	00 00                	add    %al,(%rax)
   11035:	00 00                	add    %al,(%rax)
   11037:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   1103d:	00 00                	add    %al,(%rax)
   1103f:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   11045:	00 00                	add    %al,(%rax)
   11047:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   1104d:	00 00                	add    %al,(%rax)
   1104f:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   11055:	00 00                	add    %al,(%rax)
   11057:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   1105d:	00 00                	add    %al,(%rax)
   1105f:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   11065:	00 00                	add    %al,(%rax)
   11067:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   1106d:	00 00                	add    %al,(%rax)
   1106f:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   11075:	00 00                	add    %al,(%rax)
   11077:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   1107d:	00 00                	add    %al,(%rax)
   1107f:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   11085:	00 00                	add    %al,(%rax)
   11087:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   1108d:	00 00                	add    %al,(%rax)
   1108f:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   11095:	00 00                	add    %al,(%rax)
   11097:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   1109d:	00 00                	add    %al,(%rax)
   1109f:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110a5:	00 00                	add    %al,(%rax)
   110a7:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110ad:	00 00                	add    %al,(%rax)
   110af:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110b5:	00 00                	add    %al,(%rax)
   110b7:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110bd:	00 00                	add    %al,(%rax)
   110bf:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110c5:	00 00                	add    %al,(%rax)
   110c7:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110cd:	00 00                	add    %al,(%rax)
   110cf:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110d5:	00 00                	add    %al,(%rax)
   110d7:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110dd:	00 00                	add    %al,(%rax)
   110df:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110e5:	00 00                	add    %al,(%rax)
   110e7:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110ed:	00 00                	add    %al,(%rax)
   110ef:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110f5:	00 00                	add    %al,(%rax)
   110f7:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   110fd:	00 00                	add    %al,(%rax)
   110ff:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   11105:	00 00                	add    %al,(%rax)
   11107:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   1110d:	00 00                	add    %al,(%rax)
   1110f:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   11115:	00 00                	add    %al,(%rax)
   11117:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   1111d:	00 00                	add    %al,(%rax)
   1111f:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   11125:	00 00                	add    %al,(%rax)
   11127:	00 a0 0a 00 00 00    	add    %ah,0xa(%rax)
   1112d:	00 00                	add    %al,(%rax)
   1112f:	00 5c 09 00          	add    %bl,0x0(%rcx,%rcx,1)
   11133:	00 00                	add    %al,(%rax)
   11135:	00 00                	add    %al,(%rax)
   11137:	00 50 0a             	add    %dl,0xa(%rax)
   1113a:	00 00                	add    %al,(%rax)
   1113c:	00 00                	add    %al,(%rax)
   1113e:	00 00                	add    %al,(%rax)
   11140:	50                   	push   %rax
   11141:	0a 00                	or     (%rax),%al
   11143:	00 00                	add    %al,(%rax)
   11145:	00 00                	add    %al,(%rax)
   11147:	00 50 0a             	add    %dl,0xa(%rax)
   1114a:	00 00                	add    %al,(%rax)
   1114c:	00 00                	add    %al,(%rax)
   1114e:	00 00                	add    %al,(%rax)
   11150:	50                   	push   %rax
   11151:	0a 00                	or     (%rax),%al
   11153:	00 00                	add    %al,(%rax)
   11155:	00 00                	add    %al,(%rax)
   11157:	00 50 0a             	add    %dl,0xa(%rax)
   1115a:	00 00                	add    %al,(%rax)
   1115c:	00 00                	add    %al,(%rax)
   1115e:	00 00                	add    %al,(%rax)
   11160:	50                   	push   %rax
   11161:	0a 00                	or     (%rax),%al
   11163:	00 00                	add    %al,(%rax)
   11165:	00 00                	add    %al,(%rax)
   11167:	00 50 0a             	add    %dl,0xa(%rax)
   1116a:	00 00                	add    %al,(%rax)
   1116c:	00 00                	add    %al,(%rax)
   1116e:	00 00                	add    %al,(%rax)
   11170:	50                   	push   %rax
   11171:	0a 00                	or     (%rax),%al
   11173:	00 00                	add    %al,(%rax)
   11175:	00 00                	add    %al,(%rax)
   11177:	00 50 0a             	add    %dl,0xa(%rax)
   1117a:	00 00                	add    %al,(%rax)
   1117c:	00 00                	add    %al,(%rax)
   1117e:	00 00                	add    %al,(%rax)
   11180:	50                   	push   %rax
   11181:	0a 00                	or     (%rax),%al
   11183:	00 00                	add    %al,(%rax)
   11185:	00 00                	add    %al,(%rax)
   11187:	00 50 0a             	add    %dl,0xa(%rax)
   1118a:	00 00                	add    %al,(%rax)
   1118c:	00 00                	add    %al,(%rax)
   1118e:	00 00                	add    %al,(%rax)
   11190:	50                   	push   %rax
   11191:	0a 00                	or     (%rax),%al
   11193:	00 00                	add    %al,(%rax)
   11195:	00 00                	add    %al,(%rax)
   11197:	00 50 0a             	add    %dl,0xa(%rax)
   1119a:	00 00                	add    %al,(%rax)
   1119c:	00 00                	add    %al,(%rax)
   1119e:	00 00                	add    %al,(%rax)
   111a0:	50                   	push   %rax
   111a1:	0a 00                	or     (%rax),%al
   111a3:	00 00                	add    %al,(%rax)
   111a5:	00 00                	add    %al,(%rax)
   111a7:	00 50 0a             	add    %dl,0xa(%rax)
   111aa:	00 00                	add    %al,(%rax)
   111ac:	00 00                	add    %al,(%rax)
   111ae:	00 00                	add    %al,(%rax)
   111b0:	50                   	push   %rax
   111b1:	0a 00                	or     (%rax),%al
   111b3:	00 00                	add    %al,(%rax)
   111b5:	00 00                	add    %al,(%rax)
   111b7:	00 50 0a             	add    %dl,0xa(%rax)
   111ba:	00 00                	add    %al,(%rax)
   111bc:	00 00                	add    %al,(%rax)
   111be:	00 00                	add    %al,(%rax)
   111c0:	50                   	push   %rax
   111c1:	0a 00                	or     (%rax),%al
   111c3:	00 00                	add    %al,(%rax)
   111c5:	00 00                	add    %al,(%rax)
   111c7:	00 50 0a             	add    %dl,0xa(%rax)
   111ca:	00 00                	add    %al,(%rax)
   111cc:	00 00                	add    %al,(%rax)
   111ce:	00 00                	add    %al,(%rax)
   111d0:	50                   	push   %rax
   111d1:	0a 00                	or     (%rax),%al
   111d3:	00 00                	add    %al,(%rax)
   111d5:	00 00                	add    %al,(%rax)
   111d7:	00 50 0a             	add    %dl,0xa(%rax)
   111da:	00 00                	add    %al,(%rax)
   111dc:	00 00                	add    %al,(%rax)
   111de:	00 00                	add    %al,(%rax)
   111e0:	50                   	push   %rax
   111e1:	0a 00                	or     (%rax),%al
   111e3:	00 00                	add    %al,(%rax)
   111e5:	00 00                	add    %al,(%rax)
   111e7:	00 50 0a             	add    %dl,0xa(%rax)
   111ea:	00 00                	add    %al,(%rax)
   111ec:	00 00                	add    %al,(%rax)
   111ee:	00 00                	add    %al,(%rax)
   111f0:	50                   	push   %rax
   111f1:	0a 00                	or     (%rax),%al
   111f3:	00 00                	add    %al,(%rax)
   111f5:	00 00                	add    %al,(%rax)
   111f7:	00 50 0a             	add    %dl,0xa(%rax)
   111fa:	00 00                	add    %al,(%rax)
   111fc:	00 00                	add    %al,(%rax)
   111fe:	00 00                	add    %al,(%rax)
   11200:	50                   	push   %rax
   11201:	0a 00                	or     (%rax),%al
   11203:	00 00                	add    %al,(%rax)
   11205:	00 00                	add    %al,(%rax)
   11207:	00 50 0a             	add    %dl,0xa(%rax)
   1120a:	00 00                	add    %al,(%rax)
   1120c:	00 00                	add    %al,(%rax)
   1120e:	00 00                	add    %al,(%rax)
   11210:	50                   	push   %rax
   11211:	0a 00                	or     (%rax),%al
   11213:	00 00                	add    %al,(%rax)
   11215:	00 00                	add    %al,(%rax)
   11217:	00 50 0a             	add    %dl,0xa(%rax)
   1121a:	00 00                	add    %al,(%rax)
   1121c:	00 00                	add    %al,(%rax)
   1121e:	00 00                	add    %al,(%rax)
   11220:	50                   	push   %rax
   11221:	0a 00                	or     (%rax),%al
   11223:	00 00                	add    %al,(%rax)
   11225:	00 00                	add    %al,(%rax)
   11227:	00 50 0a             	add    %dl,0xa(%rax)
   1122a:	00 00                	add    %al,(%rax)
   1122c:	00 00                	add    %al,(%rax)
   1122e:	00 00                	add    %al,(%rax)
   11230:	6e                   	outsb  %ds:(%rsi),(%dx)
   11231:	09 00                	or     %eax,(%rax)
   11233:	00 00                	add    %al,(%rax)
   11235:	00 00                	add    %al,(%rax)
   11237:	00 f0                	add    %dh,%al
   11239:	09 00                	or     %eax,(%rax)
   1123b:	00 00                	add    %al,(%rax)
   1123d:	00 00                	add    %al,(%rax)
   1123f:	00 f0                	add    %dh,%al
   11241:	09 00                	or     %eax,(%rax)
   11243:	00 00                	add    %al,(%rax)
   11245:	00 00                	add    %al,(%rax)
   11247:	00 f0                	add    %dh,%al
   11249:	09 00                	or     %eax,(%rax)
   1124b:	00 00                	add    %al,(%rax)
   1124d:	00 00                	add    %al,(%rax)
   1124f:	00 f0                	add    %dh,%al
   11251:	09 00                	or     %eax,(%rax)
   11253:	00 00                	add    %al,(%rax)
   11255:	00 00                	add    %al,(%rax)
   11257:	00 f0                	add    %dh,%al
   11259:	09 00                	or     %eax,(%rax)
   1125b:	00 00                	add    %al,(%rax)
   1125d:	00 00                	add    %al,(%rax)
   1125f:	00 f0                	add    %dh,%al
   11261:	09 00                	or     %eax,(%rax)
   11263:	00 00                	add    %al,(%rax)
   11265:	00 00                	add    %al,(%rax)
   11267:	00 f0                	add    %dh,%al
   11269:	09 00                	or     %eax,(%rax)
   1126b:	00 00                	add    %al,(%rax)
   1126d:	00 00                	add    %al,(%rax)
   1126f:	00 f0                	add    %dh,%al
   11271:	09 00                	or     %eax,(%rax)
   11273:	00 00                	add    %al,(%rax)
   11275:	00 00                	add    %al,(%rax)
   11277:	00 f0                	add    %dh,%al
   11279:	09 00                	or     %eax,(%rax)
   1127b:	00 00                	add    %al,(%rax)
   1127d:	00 00                	add    %al,(%rax)
   1127f:	00 f0                	add    %dh,%al
   11281:	09 00                	or     %eax,(%rax)
   11283:	00 00                	add    %al,(%rax)
   11285:	00 00                	add    %al,(%rax)
   11287:	00 f0                	add    %dh,%al
   11289:	09 00                	or     %eax,(%rax)
   1128b:	00 00                	add    %al,(%rax)
   1128d:	00 00                	add    %al,(%rax)
   1128f:	00 f0                	add    %dh,%al
   11291:	09 00                	or     %eax,(%rax)
   11293:	00 00                	add    %al,(%rax)
   11295:	00 00                	add    %al,(%rax)
   11297:	00 f0                	add    %dh,%al
   11299:	09 00                	or     %eax,(%rax)
   1129b:	00 00                	add    %al,(%rax)
   1129d:	00 00                	add    %al,(%rax)
   1129f:	00 f0                	add    %dh,%al
   112a1:	09 00                	or     %eax,(%rax)
   112a3:	00 00                	add    %al,(%rax)
   112a5:	00 00                	add    %al,(%rax)
   112a7:	00 f0                	add    %dh,%al
   112a9:	09 00                	or     %eax,(%rax)
   112ab:	00 00                	add    %al,(%rax)
   112ad:	00 00                	add    %al,(%rax)
   112af:	00 f0                	add    %dh,%al
   112b1:	09 00                	or     %eax,(%rax)
   112b3:	00 00                	add    %al,(%rax)
   112b5:	00 00                	add    %al,(%rax)
   112b7:	00 f0                	add    %dh,%al
   112b9:	09 00                	or     %eax,(%rax)
   112bb:	00 00                	add    %al,(%rax)
   112bd:	00 00                	add    %al,(%rax)
   112bf:	00 f0                	add    %dh,%al
   112c1:	09 00                	or     %eax,(%rax)
   112c3:	00 00                	add    %al,(%rax)
   112c5:	00 00                	add    %al,(%rax)
   112c7:	00 f0                	add    %dh,%al
   112c9:	09 00                	or     %eax,(%rax)
   112cb:	00 00                	add    %al,(%rax)
   112cd:	00 00                	add    %al,(%rax)
   112cf:	00 f0                	add    %dh,%al
   112d1:	09 00                	or     %eax,(%rax)
   112d3:	00 00                	add    %al,(%rax)
   112d5:	00 00                	add    %al,(%rax)
   112d7:	00 f0                	add    %dh,%al
   112d9:	09 00                	or     %eax,(%rax)
   112db:	00 00                	add    %al,(%rax)
   112dd:	00 00                	add    %al,(%rax)
   112df:	00 f0                	add    %dh,%al
   112e1:	09 00                	or     %eax,(%rax)
   112e3:	00 00                	add    %al,(%rax)
   112e5:	00 00                	add    %al,(%rax)
   112e7:	00 f0                	add    %dh,%al
   112e9:	09 00                	or     %eax,(%rax)
   112eb:	00 00                	add    %al,(%rax)
   112ed:	00 00                	add    %al,(%rax)
   112ef:	00 f0                	add    %dh,%al
   112f1:	09 00                	or     %eax,(%rax)
   112f3:	00 00                	add    %al,(%rax)
   112f5:	00 00                	add    %al,(%rax)
   112f7:	00 f0                	add    %dh,%al
   112f9:	09 00                	or     %eax,(%rax)
   112fb:	00 00                	add    %al,(%rax)
   112fd:	00 00                	add    %al,(%rax)
   112ff:	00 f0                	add    %dh,%al
   11301:	09 00                	or     %eax,(%rax)
   11303:	00 00                	add    %al,(%rax)
   11305:	00 00                	add    %al,(%rax)
   11307:	00 f0                	add    %dh,%al
   11309:	09 00                	or     %eax,(%rax)
   1130b:	00 00                	add    %al,(%rax)
   1130d:	00 00                	add    %al,(%rax)
   1130f:	00 f0                	add    %dh,%al
   11311:	09 00                	or     %eax,(%rax)
   11313:	00 00                	add    %al,(%rax)
   11315:	00 00                	add    %al,(%rax)
   11317:	00 f0                	add    %dh,%al
   11319:	09 00                	or     %eax,(%rax)
   1131b:	00 00                	add    %al,(%rax)
   1131d:	00 00                	add    %al,(%rax)
   1131f:	00 f0                	add    %dh,%al
   11321:	09 00                	or     %eax,(%rax)
   11323:	00 00                	add    %al,(%rax)
   11325:	00 00                	add    %al,(%rax)
   11327:	00 f0                	add    %dh,%al
   11329:	09 00                	or     %eax,(%rax)
   1132b:	00 00                	add    %al,(%rax)
   1132d:	00 00                	add    %al,(%rax)
   1132f:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   11335:	00 00                	add    %al,(%rax)
   11337:	00 0f                	add    %cl,(%rdi)
   11339:	1f                   	(bad)  
   1133a:	84 00                	test   %al,(%rax)
   1133c:	00 00                	add    %al,(%rax)
   1133e:	00 00                	add    %al,(%rax)
   11340:	c5 f8 77             	vzeroupper 
   11343:	41 5c                	pop    %r12
   11345:	c3                   	retq   
   11346:	0f 1f 00             	nopl   (%rax)
   11349:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000011350 <__intel_avx_rep_memset>:
   11350:	f3 0f 1e fa          	endbr64 
   11354:	49 89 f8             	mov    %rdi,%r8
   11357:	49 89 d3             	mov    %rdx,%r11
   1135a:	4d 89 c2             	mov    %r8,%r10
   1135d:	48 8d 15 28 45 22 00 	lea    0x224528(%rip),%rdx        # 23588c <__libirc_data_cache_size>
   11364:	48 b8 01 01 01 01 01 	movabs $0x101010101010101,%rax
   1136b:	01 01 01 
   1136e:	4c 0f b6 ce          	movzbq %sil,%r9
   11372:	4c 0f af c8          	imul   %rax,%r9
   11376:	48 8d 35 f3 0b 00 00 	lea    0xbf3(%rip),%rsi        # 11f70 <__intel_avx_rep_memset+0xc20>
   1137d:	c4 c1 f9 6e c1       	vmovq  %r9,%xmm0
   11382:	c4 e2 7d 58 c0       	vpbroadcastd %xmm0,%ymm0
   11387:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
   1138e:	77 10                	ja     113a0 <__intel_avx_rep_memset+0x50>
   11390:	4c 89 d7             	mov    %r10,%rdi
   11393:	49 03 fb             	add    %r11,%rdi
   11396:	4a 2b 34 de          	sub    (%rsi,%r11,8),%rsi
   1139a:	3e ff e6             	notrack jmpq *%rsi
   1139d:	0f 1f 00             	nopl   (%rax)
   113a0:	48 8d 35 c9 02 00 00 	lea    0x2c9(%rip),%rsi        # 11670 <__intel_avx_rep_memset+0x320>
   113a7:	4c 89 d1             	mov    %r10,%rcx
   113aa:	48 83 e1 1f          	and    $0x1f,%rcx
   113ae:	74 23                	je     113d3 <__intel_avx_rep_memset+0x83>
   113b0:	48 f7 d9             	neg    %rcx
   113b3:	48 83 c1 20          	add    $0x20,%rcx
   113b7:	4c 2b d9             	sub    %rcx,%r11
   113ba:	4c 89 d7             	mov    %r10,%rdi
   113bd:	48 03 f9             	add    %rcx,%rdi
   113c0:	48 2b 34 ce          	sub    (%rsi,%rcx,8),%rsi
   113c4:	3e ff e6             	notrack jmpq *%rsi
   113c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   113ce:	00 00 
   113d0:	4c 03 d1             	add    %rcx,%r10
   113d3:	49 81 fb 00 01 00 00 	cmp    $0x100,%r11
   113da:	0f 8c 10 01 00 00    	jl     114f0 <__intel_avx_rep_memset+0x1a0>
   113e0:	8b 0a                	mov    (%rdx),%ecx
   113e2:	48 89 cf             	mov    %rcx,%rdi
   113e5:	48 c1 e9 04          	shr    $0x4,%rcx
   113e9:	48 2b f9             	sub    %rcx,%rdi
   113ec:	4c 3b df             	cmp    %rdi,%r11
   113ef:	73 4f                	jae    11440 <__intel_avx_rep_memset+0xf0>
   113f1:	c4 c1 7d 7f 02       	vmovdqa %ymm0,(%r10)
   113f6:	c4 c1 7d 7f 42 20    	vmovdqa %ymm0,0x20(%r10)
   113fc:	c4 c1 7d 7f 42 40    	vmovdqa %ymm0,0x40(%r10)
   11402:	c4 c1 7d 7f 42 60    	vmovdqa %ymm0,0x60(%r10)
   11408:	49 81 c2 00 01 00 00 	add    $0x100,%r10
   1140f:	49 81 eb 00 01 00 00 	sub    $0x100,%r11
   11416:	c4 c1 7d 7f 42 80    	vmovdqa %ymm0,-0x80(%r10)
   1141c:	c4 c1 7d 7f 42 a0    	vmovdqa %ymm0,-0x60(%r10)
   11422:	c4 c1 7d 7f 42 c0    	vmovdqa %ymm0,-0x40(%r10)
   11428:	c4 c1 7d 7f 42 e0    	vmovdqa %ymm0,-0x20(%r10)
   1142e:	49 81 fb 00 01 00 00 	cmp    $0x100,%r11
   11435:	7d ba                	jge    113f1 <__intel_avx_rep_memset+0xa1>
   11437:	e9 b4 00 00 00       	jmpq   114f0 <__intel_avx_rep_memset+0x1a0>
   1143c:	0f 1f 40 00          	nopl   0x0(%rax)
   11440:	4c 89 d7             	mov    %r10,%rdi
   11443:	4c 89 c8             	mov    %r9,%rax
   11446:	4c 89 d9             	mov    %r11,%rcx
   11449:	fc                   	cld    
   1144a:	f3 aa                	rep stos %al,%es:(%rdi)
   1144c:	e9 2f 0f 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   11451:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   11458:	00 
   11459:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   11460:	45 88 0a             	mov    %r9b,(%r10)
   11463:	e9 68 ff ff ff       	jmpq   113d0 <__intel_avx_rep_memset+0x80>
   11468:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1146f:	00 
   11470:	66 45 89 0a          	mov    %r9w,(%r10)
   11474:	e9 57 ff ff ff       	jmpq   113d0 <__intel_avx_rep_memset+0x80>
   11479:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   11480:	66 45 89 0a          	mov    %r9w,(%r10)
   11484:	45 88 4a 02          	mov    %r9b,0x2(%r10)
   11488:	e9 43 ff ff ff       	jmpq   113d0 <__intel_avx_rep_memset+0x80>
   1148d:	0f 1f 00             	nopl   (%rax)
   11490:	45 89 0a             	mov    %r9d,(%r10)
   11493:	e9 38 ff ff ff       	jmpq   113d0 <__intel_avx_rep_memset+0x80>
   11498:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1149f:	00 
   114a0:	45 89 0a             	mov    %r9d,(%r10)
   114a3:	44 89 4f fc          	mov    %r9d,-0x4(%rdi)
   114a7:	e9 24 ff ff ff       	jmpq   113d0 <__intel_avx_rep_memset+0x80>
   114ac:	0f 1f 40 00          	nopl   0x0(%rax)
   114b0:	4d 89 0a             	mov    %r9,(%r10)
   114b3:	e9 18 ff ff ff       	jmpq   113d0 <__intel_avx_rep_memset+0x80>
   114b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   114bf:	00 
   114c0:	4d 89 0a             	mov    %r9,(%r10)
   114c3:	4c 89 4f f8          	mov    %r9,-0x8(%rdi)
   114c7:	e9 04 ff ff ff       	jmpq   113d0 <__intel_avx_rep_memset+0x80>
   114cc:	0f 1f 40 00          	nopl   0x0(%rax)
   114d0:	c4 c1 78 11 02       	vmovups %xmm0,(%r10)
   114d5:	e9 f6 fe ff ff       	jmpq   113d0 <__intel_avx_rep_memset+0x80>
   114da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   114e0:	c4 c1 78 11 02       	vmovups %xmm0,(%r10)
   114e5:	c5 f8 11 47 f0       	vmovups %xmm0,-0x10(%rdi)
   114ea:	e9 e1 fe ff ff       	jmpq   113d0 <__intel_avx_rep_memset+0x80>
   114ef:	90                   	nop
   114f0:	4d 03 d3             	add    %r11,%r10
   114f3:	4c 89 d7             	mov    %r10,%rdi
   114f6:	49 83 e2 e0          	and    $0xffffffffffffffe0,%r10
   114fa:	48 8d 35 6f 02 00 00 	lea    0x26f(%rip),%rsi        # 11770 <__intel_avx_rep_memset+0x420>
   11501:	4a 2b 34 de          	sub    (%rsi,%r11,8),%rsi
   11505:	3e ff e6             	notrack jmpq *%rsi
   11508:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1150f:	00 
   11510:	c4 c1 7c 29 82 20 ff 	vmovaps %ymm0,-0xe0(%r10)
   11517:	ff ff 
   11519:	c4 c1 7c 29 82 40 ff 	vmovaps %ymm0,-0xc0(%r10)
   11520:	ff ff 
   11522:	c4 c1 7c 29 82 60 ff 	vmovaps %ymm0,-0xa0(%r10)
   11529:	ff ff 
   1152b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   11530:	c4 c1 7c 29 42 80    	vmovaps %ymm0,-0x80(%r10)
   11536:	c4 c1 7c 29 42 a0    	vmovaps %ymm0,-0x60(%r10)
   1153c:	c4 c1 7c 29 42 c0    	vmovaps %ymm0,-0x40(%r10)
   11542:	c4 c1 7c 29 42 e0    	vmovaps %ymm0,-0x20(%r10)
   11548:	49 89 fb             	mov    %rdi,%r11
   1154b:	49 83 e3 1f          	and    $0x1f,%r11
   1154f:	48 8d 35 1a 02 00 00 	lea    0x21a(%rip),%rsi        # 11770 <__intel_avx_rep_memset+0x420>
   11556:	4a 2b 34 de          	sub    (%rsi,%r11,8),%rsi
   1155a:	3e ff e6             	notrack jmpq *%rsi
   1155d:	0f 1f 00             	nopl   (%rax)
   11560:	45 88 0a             	mov    %r9b,(%r10)
   11563:	e9 18 0e 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   11568:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1156f:	00 
   11570:	e9 0b 0e 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   11575:	0f 1f 40 00          	nopl   0x0(%rax)
   11579:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   11580:	66 45 89 0a          	mov    %r9w,(%r10)
   11584:	e9 f7 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   11589:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   11590:	66 45 89 0a          	mov    %r9w,(%r10)
   11594:	45 88 4a 02          	mov    %r9b,0x2(%r10)
   11598:	e9 e3 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   1159d:	0f 1f 00             	nopl   (%rax)
   115a0:	45 89 0a             	mov    %r9d,(%r10)
   115a3:	e9 d8 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   115a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   115af:	00 
   115b0:	45 89 0a             	mov    %r9d,(%r10)
   115b3:	44 89 4f fc          	mov    %r9d,-0x4(%rdi)
   115b7:	e9 c4 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   115bc:	0f 1f 40 00          	nopl   0x0(%rax)
   115c0:	4d 89 0a             	mov    %r9,(%r10)
   115c3:	e9 b8 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   115c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   115cf:	00 
   115d0:	4d 89 0a             	mov    %r9,(%r10)
   115d3:	4c 89 4f f8          	mov    %r9,-0x8(%rdi)
   115d7:	e9 a4 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   115dc:	0f 1f 40 00          	nopl   0x0(%rax)
   115e0:	c4 c1 78 11 02       	vmovups %xmm0,(%r10)
   115e5:	e9 96 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   115ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   115f0:	c4 c1 78 11 02       	vmovups %xmm0,(%r10)
   115f5:	c5 f8 11 47 f0       	vmovups %xmm0,-0x10(%rdi)
   115fa:	e9 81 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   115ff:	90                   	nop
   11600:	c4 c1 7c 11 02       	vmovups %ymm0,(%r10)
   11605:	e9 76 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   1160a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   11610:	c4 c1 7c 11 02       	vmovups %ymm0,(%r10)
   11615:	c5 fc 11 47 e0       	vmovups %ymm0,-0x20(%rdi)
   1161a:	e9 61 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   1161f:	90                   	nop
   11620:	c4 c1 7c 11 02       	vmovups %ymm0,(%r10)
   11625:	c4 c1 7c 11 42 20    	vmovups %ymm0,0x20(%r10)
   1162b:	e9 50 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   11630:	c4 c1 7c 11 02       	vmovups %ymm0,(%r10)
   11635:	c4 c1 7c 11 42 20    	vmovups %ymm0,0x20(%r10)
   1163b:	c5 fc 11 47 e0       	vmovups %ymm0,-0x20(%rdi)
   11640:	c5 fc 11 47 c0       	vmovups %ymm0,-0x40(%rdi)
   11645:	e9 36 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   1164a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   11650:	c4 c1 7c 11 02       	vmovups %ymm0,(%r10)
   11655:	c4 c1 7c 11 42 20    	vmovups %ymm0,0x20(%r10)
   1165b:	c4 c1 7c 11 42 40    	vmovups %ymm0,0x40(%r10)
   11661:	c4 c1 7c 11 42 60    	vmovups %ymm0,0x60(%r10)
   11667:	e9 14 0d 00 00       	jmpq   12380 <__intel_avx_rep_memset+0x1030>
   1166c:	0f 1f 40 00          	nopl   0x0(%rax)
   11670:	0d 02 00 00 00       	or     $0x2,%eax
   11675:	00 00                	add    %al,(%rax)
   11677:	00 10                	add    %dl,(%rax)
   11679:	02 00                	add    (%rax),%al
   1167b:	00 00                	add    %al,(%rax)
   1167d:	00 00                	add    %al,(%rax)
   1167f:	00 00                	add    %al,(%rax)
   11681:	02 00                	add    (%rax),%al
   11683:	00 00                	add    %al,(%rax)
   11685:	00 00                	add    %al,(%rax)
   11687:	00 f0                	add    %dh,%al
   11689:	01 00                	add    %eax,(%rax)
   1168b:	00 00                	add    %al,(%rax)
   1168d:	00 00                	add    %al,(%rax)
   1168f:	00 e0                	add    %ah,%al
   11691:	01 00                	add    %eax,(%rax)
   11693:	00 00                	add    %al,(%rax)
   11695:	00 00                	add    %al,(%rax)
   11697:	00 d0                	add    %dl,%al
   11699:	01 00                	add    %eax,(%rax)
   1169b:	00 00                	add    %al,(%rax)
   1169d:	00 00                	add    %al,(%rax)
   1169f:	00 d0                	add    %dl,%al
   116a1:	01 00                	add    %eax,(%rax)
   116a3:	00 00                	add    %al,(%rax)
   116a5:	00 00                	add    %al,(%rax)
   116a7:	00 d0                	add    %dl,%al
   116a9:	01 00                	add    %eax,(%rax)
   116ab:	00 00                	add    %al,(%rax)
   116ad:	00 00                	add    %al,(%rax)
   116af:	00 c0                	add    %al,%al
   116b1:	01 00                	add    %eax,(%rax)
   116b3:	00 00                	add    %al,(%rax)
   116b5:	00 00                	add    %al,(%rax)
   116b7:	00 b0 01 00 00 00    	add    %dh,0x1(%rax)
   116bd:	00 00                	add    %al,(%rax)
   116bf:	00 b0 01 00 00 00    	add    %dh,0x1(%rax)
   116c5:	00 00                	add    %al,(%rax)
   116c7:	00 b0 01 00 00 00    	add    %dh,0x1(%rax)
   116cd:	00 00                	add    %al,(%rax)
   116cf:	00 b0 01 00 00 00    	add    %dh,0x1(%rax)
   116d5:	00 00                	add    %al,(%rax)
   116d7:	00 b0 01 00 00 00    	add    %dh,0x1(%rax)
   116dd:	00 00                	add    %al,(%rax)
   116df:	00 b0 01 00 00 00    	add    %dh,0x1(%rax)
   116e5:	00 00                	add    %al,(%rax)
   116e7:	00 b0 01 00 00 00    	add    %dh,0x1(%rax)
   116ed:	00 00                	add    %al,(%rax)
   116ef:	00 a0 01 00 00 00    	add    %ah,0x1(%rax)
   116f5:	00 00                	add    %al,(%rax)
   116f7:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   116fd:	00 00                	add    %al,(%rax)
   116ff:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   11705:	00 00                	add    %al,(%rax)
   11707:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   1170d:	00 00                	add    %al,(%rax)
   1170f:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   11715:	00 00                	add    %al,(%rax)
   11717:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   1171d:	00 00                	add    %al,(%rax)
   1171f:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   11725:	00 00                	add    %al,(%rax)
   11727:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   1172d:	00 00                	add    %al,(%rax)
   1172f:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   11735:	00 00                	add    %al,(%rax)
   11737:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   1173d:	00 00                	add    %al,(%rax)
   1173f:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   11745:	00 00                	add    %al,(%rax)
   11747:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   1174d:	00 00                	add    %al,(%rax)
   1174f:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   11755:	00 00                	add    %al,(%rax)
   11757:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   1175d:	00 00                	add    %al,(%rax)
   1175f:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   11765:	00 00                	add    %al,(%rax)
   11767:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   1176d:	00 00                	add    %al,(%rax)
   1176f:	00 00                	add    %al,(%rax)
   11771:	02 00                	add    (%rax),%al
   11773:	00 00                	add    %al,(%rax)
   11775:	00 00                	add    %al,(%rax)
   11777:	00 10                	add    %dl,(%rax)
   11779:	02 00                	add    (%rax),%al
   1177b:	00 00                	add    %al,(%rax)
   1177d:	00 00                	add    %al,(%rax)
   1177f:	00 f0                	add    %dh,%al
   11781:	01 00                	add    %eax,(%rax)
   11783:	00 00                	add    %al,(%rax)
   11785:	00 00                	add    %al,(%rax)
   11787:	00 e0                	add    %ah,%al
   11789:	01 00                	add    %eax,(%rax)
   1178b:	00 00                	add    %al,(%rax)
   1178d:	00 00                	add    %al,(%rax)
   1178f:	00 d0                	add    %dl,%al
   11791:	01 00                	add    %eax,(%rax)
   11793:	00 00                	add    %al,(%rax)
   11795:	00 00                	add    %al,(%rax)
   11797:	00 c0                	add    %al,%al
   11799:	01 00                	add    %eax,(%rax)
   1179b:	00 00                	add    %al,(%rax)
   1179d:	00 00                	add    %al,(%rax)
   1179f:	00 c0                	add    %al,%al
   117a1:	01 00                	add    %eax,(%rax)
   117a3:	00 00                	add    %al,(%rax)
   117a5:	00 00                	add    %al,(%rax)
   117a7:	00 c0                	add    %al,%al
   117a9:	01 00                	add    %eax,(%rax)
   117ab:	00 00                	add    %al,(%rax)
   117ad:	00 00                	add    %al,(%rax)
   117af:	00 b0 01 00 00 00    	add    %dh,0x1(%rax)
   117b5:	00 00                	add    %al,(%rax)
   117b7:	00 a0 01 00 00 00    	add    %ah,0x1(%rax)
   117bd:	00 00                	add    %al,(%rax)
   117bf:	00 a0 01 00 00 00    	add    %ah,0x1(%rax)
   117c5:	00 00                	add    %al,(%rax)
   117c7:	00 a0 01 00 00 00    	add    %ah,0x1(%rax)
   117cd:	00 00                	add    %al,(%rax)
   117cf:	00 a0 01 00 00 00    	add    %ah,0x1(%rax)
   117d5:	00 00                	add    %al,(%rax)
   117d7:	00 a0 01 00 00 00    	add    %ah,0x1(%rax)
   117dd:	00 00                	add    %al,(%rax)
   117df:	00 a0 01 00 00 00    	add    %ah,0x1(%rax)
   117e5:	00 00                	add    %al,(%rax)
   117e7:	00 a0 01 00 00 00    	add    %ah,0x1(%rax)
   117ed:	00 00                	add    %al,(%rax)
   117ef:	00 90 01 00 00 00    	add    %dl,0x1(%rax)
   117f5:	00 00                	add    %al,(%rax)
   117f7:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   117fd:	00 00                	add    %al,(%rax)
   117ff:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   11805:	00 00                	add    %al,(%rax)
   11807:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   1180d:	00 00                	add    %al,(%rax)
   1180f:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   11815:	00 00                	add    %al,(%rax)
   11817:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   1181d:	00 00                	add    %al,(%rax)
   1181f:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   11825:	00 00                	add    %al,(%rax)
   11827:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   1182d:	00 00                	add    %al,(%rax)
   1182f:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   11835:	00 00                	add    %al,(%rax)
   11837:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   1183d:	00 00                	add    %al,(%rax)
   1183f:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   11845:	00 00                	add    %al,(%rax)
   11847:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   1184d:	00 00                	add    %al,(%rax)
   1184f:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   11855:	00 00                	add    %al,(%rax)
   11857:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   1185d:	00 00                	add    %al,(%rax)
   1185f:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   11865:	00 00                	add    %al,(%rax)
   11867:	00 80 01 00 00 00    	add    %al,0x1(%rax)
   1186d:	00 00                	add    %al,(%rax)
   1186f:	00 2e                	add    %ch,(%rsi)
   11871:	02 00                	add    (%rax),%al
   11873:	00 00                	add    %al,(%rax)
   11875:	00 00                	add    %al,(%rax)
   11877:	00 2e                	add    %ch,(%rsi)
   11879:	02 00                	add    (%rax),%al
   1187b:	00 00                	add    %al,(%rax)
   1187d:	00 00                	add    %al,(%rax)
   1187f:	00 2e                	add    %ch,(%rsi)
   11881:	02 00                	add    (%rax),%al
   11883:	00 00                	add    %al,(%rax)
   11885:	00 00                	add    %al,(%rax)
   11887:	00 2e                	add    %ch,(%rsi)
   11889:	02 00                	add    (%rax),%al
   1188b:	00 00                	add    %al,(%rax)
   1188d:	00 00                	add    %al,(%rax)
   1188f:	00 2e                	add    %ch,(%rsi)
   11891:	02 00                	add    (%rax),%al
   11893:	00 00                	add    %al,(%rax)
   11895:	00 00                	add    %al,(%rax)
   11897:	00 2e                	add    %ch,(%rsi)
   11899:	02 00                	add    (%rax),%al
   1189b:	00 00                	add    %al,(%rax)
   1189d:	00 00                	add    %al,(%rax)
   1189f:	00 2e                	add    %ch,(%rsi)
   118a1:	02 00                	add    (%rax),%al
   118a3:	00 00                	add    %al,(%rax)
   118a5:	00 00                	add    %al,(%rax)
   118a7:	00 2e                	add    %ch,(%rsi)
   118a9:	02 00                	add    (%rax),%al
   118ab:	00 00                	add    %al,(%rax)
   118ad:	00 00                	add    %al,(%rax)
   118af:	00 2e                	add    %ch,(%rsi)
   118b1:	02 00                	add    (%rax),%al
   118b3:	00 00                	add    %al,(%rax)
   118b5:	00 00                	add    %al,(%rax)
   118b7:	00 2e                	add    %ch,(%rsi)
   118b9:	02 00                	add    (%rax),%al
   118bb:	00 00                	add    %al,(%rax)
   118bd:	00 00                	add    %al,(%rax)
   118bf:	00 2e                	add    %ch,(%rsi)
   118c1:	02 00                	add    (%rax),%al
   118c3:	00 00                	add    %al,(%rax)
   118c5:	00 00                	add    %al,(%rax)
   118c7:	00 2e                	add    %ch,(%rsi)
   118c9:	02 00                	add    (%rax),%al
   118cb:	00 00                	add    %al,(%rax)
   118cd:	00 00                	add    %al,(%rax)
   118cf:	00 2e                	add    %ch,(%rsi)
   118d1:	02 00                	add    (%rax),%al
   118d3:	00 00                	add    %al,(%rax)
   118d5:	00 00                	add    %al,(%rax)
   118d7:	00 2e                	add    %ch,(%rsi)
   118d9:	02 00                	add    (%rax),%al
   118db:	00 00                	add    %al,(%rax)
   118dd:	00 00                	add    %al,(%rax)
   118df:	00 2e                	add    %ch,(%rsi)
   118e1:	02 00                	add    (%rax),%al
   118e3:	00 00                	add    %al,(%rax)
   118e5:	00 00                	add    %al,(%rax)
   118e7:	00 2e                	add    %ch,(%rsi)
   118e9:	02 00                	add    (%rax),%al
   118eb:	00 00                	add    %al,(%rax)
   118ed:	00 00                	add    %al,(%rax)
   118ef:	00 2e                	add    %ch,(%rsi)
   118f1:	02 00                	add    (%rax),%al
   118f3:	00 00                	add    %al,(%rax)
   118f5:	00 00                	add    %al,(%rax)
   118f7:	00 2e                	add    %ch,(%rsi)
   118f9:	02 00                	add    (%rax),%al
   118fb:	00 00                	add    %al,(%rax)
   118fd:	00 00                	add    %al,(%rax)
   118ff:	00 2e                	add    %ch,(%rsi)
   11901:	02 00                	add    (%rax),%al
   11903:	00 00                	add    %al,(%rax)
   11905:	00 00                	add    %al,(%rax)
   11907:	00 2e                	add    %ch,(%rsi)
   11909:	02 00                	add    (%rax),%al
   1190b:	00 00                	add    %al,(%rax)
   1190d:	00 00                	add    %al,(%rax)
   1190f:	00 2e                	add    %ch,(%rsi)
   11911:	02 00                	add    (%rax),%al
   11913:	00 00                	add    %al,(%rax)
   11915:	00 00                	add    %al,(%rax)
   11917:	00 2e                	add    %ch,(%rsi)
   11919:	02 00                	add    (%rax),%al
   1191b:	00 00                	add    %al,(%rax)
   1191d:	00 00                	add    %al,(%rax)
   1191f:	00 2e                	add    %ch,(%rsi)
   11921:	02 00                	add    (%rax),%al
   11923:	00 00                	add    %al,(%rax)
   11925:	00 00                	add    %al,(%rax)
   11927:	00 2e                	add    %ch,(%rsi)
   11929:	02 00                	add    (%rax),%al
   1192b:	00 00                	add    %al,(%rax)
   1192d:	00 00                	add    %al,(%rax)
   1192f:	00 2e                	add    %ch,(%rsi)
   11931:	02 00                	add    (%rax),%al
   11933:	00 00                	add    %al,(%rax)
   11935:	00 00                	add    %al,(%rax)
   11937:	00 2e                	add    %ch,(%rsi)
   11939:	02 00                	add    (%rax),%al
   1193b:	00 00                	add    %al,(%rax)
   1193d:	00 00                	add    %al,(%rax)
   1193f:	00 2e                	add    %ch,(%rsi)
   11941:	02 00                	add    (%rax),%al
   11943:	00 00                	add    %al,(%rax)
   11945:	00 00                	add    %al,(%rax)
   11947:	00 2e                	add    %ch,(%rsi)
   11949:	02 00                	add    (%rax),%al
   1194b:	00 00                	add    %al,(%rax)
   1194d:	00 00                	add    %al,(%rax)
   1194f:	00 2e                	add    %ch,(%rsi)
   11951:	02 00                	add    (%rax),%al
   11953:	00 00                	add    %al,(%rax)
   11955:	00 00                	add    %al,(%rax)
   11957:	00 2e                	add    %ch,(%rsi)
   11959:	02 00                	add    (%rax),%al
   1195b:	00 00                	add    %al,(%rax)
   1195d:	00 00                	add    %al,(%rax)
   1195f:	00 2e                	add    %ch,(%rsi)
   11961:	02 00                	add    (%rax),%al
   11963:	00 00                	add    %al,(%rax)
   11965:	00 00                	add    %al,(%rax)
   11967:	00 2e                	add    %ch,(%rsi)
   11969:	02 00                	add    (%rax),%al
   1196b:	00 00                	add    %al,(%rax)
   1196d:	00 00                	add    %al,(%rax)
   1196f:	00 34 02             	add    %dh,(%rdx,%rax,1)
   11972:	00 00                	add    %al,(%rax)
   11974:	00 00                	add    %al,(%rax)
   11976:	00 00                	add    %al,(%rax)
   11978:	34 02                	xor    $0x2,%al
   1197a:	00 00                	add    %al,(%rax)
   1197c:	00 00                	add    %al,(%rax)
   1197e:	00 00                	add    %al,(%rax)
   11980:	34 02                	xor    $0x2,%al
   11982:	00 00                	add    %al,(%rax)
   11984:	00 00                	add    %al,(%rax)
   11986:	00 00                	add    %al,(%rax)
   11988:	34 02                	xor    $0x2,%al
   1198a:	00 00                	add    %al,(%rax)
   1198c:	00 00                	add    %al,(%rax)
   1198e:	00 00                	add    %al,(%rax)
   11990:	34 02                	xor    $0x2,%al
   11992:	00 00                	add    %al,(%rax)
   11994:	00 00                	add    %al,(%rax)
   11996:	00 00                	add    %al,(%rax)
   11998:	34 02                	xor    $0x2,%al
   1199a:	00 00                	add    %al,(%rax)
   1199c:	00 00                	add    %al,(%rax)
   1199e:	00 00                	add    %al,(%rax)
   119a0:	34 02                	xor    $0x2,%al
   119a2:	00 00                	add    %al,(%rax)
   119a4:	00 00                	add    %al,(%rax)
   119a6:	00 00                	add    %al,(%rax)
   119a8:	34 02                	xor    $0x2,%al
   119aa:	00 00                	add    %al,(%rax)
   119ac:	00 00                	add    %al,(%rax)
   119ae:	00 00                	add    %al,(%rax)
   119b0:	34 02                	xor    $0x2,%al
   119b2:	00 00                	add    %al,(%rax)
   119b4:	00 00                	add    %al,(%rax)
   119b6:	00 00                	add    %al,(%rax)
   119b8:	34 02                	xor    $0x2,%al
   119ba:	00 00                	add    %al,(%rax)
   119bc:	00 00                	add    %al,(%rax)
   119be:	00 00                	add    %al,(%rax)
   119c0:	34 02                	xor    $0x2,%al
   119c2:	00 00                	add    %al,(%rax)
   119c4:	00 00                	add    %al,(%rax)
   119c6:	00 00                	add    %al,(%rax)
   119c8:	34 02                	xor    $0x2,%al
   119ca:	00 00                	add    %al,(%rax)
   119cc:	00 00                	add    %al,(%rax)
   119ce:	00 00                	add    %al,(%rax)
   119d0:	34 02                	xor    $0x2,%al
   119d2:	00 00                	add    %al,(%rax)
   119d4:	00 00                	add    %al,(%rax)
   119d6:	00 00                	add    %al,(%rax)
   119d8:	34 02                	xor    $0x2,%al
   119da:	00 00                	add    %al,(%rax)
   119dc:	00 00                	add    %al,(%rax)
   119de:	00 00                	add    %al,(%rax)
   119e0:	34 02                	xor    $0x2,%al
   119e2:	00 00                	add    %al,(%rax)
   119e4:	00 00                	add    %al,(%rax)
   119e6:	00 00                	add    %al,(%rax)
   119e8:	34 02                	xor    $0x2,%al
   119ea:	00 00                	add    %al,(%rax)
   119ec:	00 00                	add    %al,(%rax)
   119ee:	00 00                	add    %al,(%rax)
   119f0:	34 02                	xor    $0x2,%al
   119f2:	00 00                	add    %al,(%rax)
   119f4:	00 00                	add    %al,(%rax)
   119f6:	00 00                	add    %al,(%rax)
   119f8:	34 02                	xor    $0x2,%al
   119fa:	00 00                	add    %al,(%rax)
   119fc:	00 00                	add    %al,(%rax)
   119fe:	00 00                	add    %al,(%rax)
   11a00:	34 02                	xor    $0x2,%al
   11a02:	00 00                	add    %al,(%rax)
   11a04:	00 00                	add    %al,(%rax)
   11a06:	00 00                	add    %al,(%rax)
   11a08:	34 02                	xor    $0x2,%al
   11a0a:	00 00                	add    %al,(%rax)
   11a0c:	00 00                	add    %al,(%rax)
   11a0e:	00 00                	add    %al,(%rax)
   11a10:	34 02                	xor    $0x2,%al
   11a12:	00 00                	add    %al,(%rax)
   11a14:	00 00                	add    %al,(%rax)
   11a16:	00 00                	add    %al,(%rax)
   11a18:	34 02                	xor    $0x2,%al
   11a1a:	00 00                	add    %al,(%rax)
   11a1c:	00 00                	add    %al,(%rax)
   11a1e:	00 00                	add    %al,(%rax)
   11a20:	34 02                	xor    $0x2,%al
   11a22:	00 00                	add    %al,(%rax)
   11a24:	00 00                	add    %al,(%rax)
   11a26:	00 00                	add    %al,(%rax)
   11a28:	34 02                	xor    $0x2,%al
   11a2a:	00 00                	add    %al,(%rax)
   11a2c:	00 00                	add    %al,(%rax)
   11a2e:	00 00                	add    %al,(%rax)
   11a30:	34 02                	xor    $0x2,%al
   11a32:	00 00                	add    %al,(%rax)
   11a34:	00 00                	add    %al,(%rax)
   11a36:	00 00                	add    %al,(%rax)
   11a38:	34 02                	xor    $0x2,%al
   11a3a:	00 00                	add    %al,(%rax)
   11a3c:	00 00                	add    %al,(%rax)
   11a3e:	00 00                	add    %al,(%rax)
   11a40:	34 02                	xor    $0x2,%al
   11a42:	00 00                	add    %al,(%rax)
   11a44:	00 00                	add    %al,(%rax)
   11a46:	00 00                	add    %al,(%rax)
   11a48:	34 02                	xor    $0x2,%al
   11a4a:	00 00                	add    %al,(%rax)
   11a4c:	00 00                	add    %al,(%rax)
   11a4e:	00 00                	add    %al,(%rax)
   11a50:	34 02                	xor    $0x2,%al
   11a52:	00 00                	add    %al,(%rax)
   11a54:	00 00                	add    %al,(%rax)
   11a56:	00 00                	add    %al,(%rax)
   11a58:	34 02                	xor    $0x2,%al
   11a5a:	00 00                	add    %al,(%rax)
   11a5c:	00 00                	add    %al,(%rax)
   11a5e:	00 00                	add    %al,(%rax)
   11a60:	34 02                	xor    $0x2,%al
   11a62:	00 00                	add    %al,(%rax)
   11a64:	00 00                	add    %al,(%rax)
   11a66:	00 00                	add    %al,(%rax)
   11a68:	34 02                	xor    $0x2,%al
   11a6a:	00 00                	add    %al,(%rax)
   11a6c:	00 00                	add    %al,(%rax)
   11a6e:	00 00                	add    %al,(%rax)
   11a70:	3a 02                	cmp    (%rdx),%al
   11a72:	00 00                	add    %al,(%rax)
   11a74:	00 00                	add    %al,(%rax)
   11a76:	00 00                	add    %al,(%rax)
   11a78:	3a 02                	cmp    (%rdx),%al
   11a7a:	00 00                	add    %al,(%rax)
   11a7c:	00 00                	add    %al,(%rax)
   11a7e:	00 00                	add    %al,(%rax)
   11a80:	3a 02                	cmp    (%rdx),%al
   11a82:	00 00                	add    %al,(%rax)
   11a84:	00 00                	add    %al,(%rax)
   11a86:	00 00                	add    %al,(%rax)
   11a88:	3a 02                	cmp    (%rdx),%al
   11a8a:	00 00                	add    %al,(%rax)
   11a8c:	00 00                	add    %al,(%rax)
   11a8e:	00 00                	add    %al,(%rax)
   11a90:	3a 02                	cmp    (%rdx),%al
   11a92:	00 00                	add    %al,(%rax)
   11a94:	00 00                	add    %al,(%rax)
   11a96:	00 00                	add    %al,(%rax)
   11a98:	3a 02                	cmp    (%rdx),%al
   11a9a:	00 00                	add    %al,(%rax)
   11a9c:	00 00                	add    %al,(%rax)
   11a9e:	00 00                	add    %al,(%rax)
   11aa0:	3a 02                	cmp    (%rdx),%al
   11aa2:	00 00                	add    %al,(%rax)
   11aa4:	00 00                	add    %al,(%rax)
   11aa6:	00 00                	add    %al,(%rax)
   11aa8:	3a 02                	cmp    (%rdx),%al
   11aaa:	00 00                	add    %al,(%rax)
   11aac:	00 00                	add    %al,(%rax)
   11aae:	00 00                	add    %al,(%rax)
   11ab0:	3a 02                	cmp    (%rdx),%al
   11ab2:	00 00                	add    %al,(%rax)
   11ab4:	00 00                	add    %al,(%rax)
   11ab6:	00 00                	add    %al,(%rax)
   11ab8:	3a 02                	cmp    (%rdx),%al
   11aba:	00 00                	add    %al,(%rax)
   11abc:	00 00                	add    %al,(%rax)
   11abe:	00 00                	add    %al,(%rax)
   11ac0:	3a 02                	cmp    (%rdx),%al
   11ac2:	00 00                	add    %al,(%rax)
   11ac4:	00 00                	add    %al,(%rax)
   11ac6:	00 00                	add    %al,(%rax)
   11ac8:	3a 02                	cmp    (%rdx),%al
   11aca:	00 00                	add    %al,(%rax)
   11acc:	00 00                	add    %al,(%rax)
   11ace:	00 00                	add    %al,(%rax)
   11ad0:	3a 02                	cmp    (%rdx),%al
   11ad2:	00 00                	add    %al,(%rax)
   11ad4:	00 00                	add    %al,(%rax)
   11ad6:	00 00                	add    %al,(%rax)
   11ad8:	3a 02                	cmp    (%rdx),%al
   11ada:	00 00                	add    %al,(%rax)
   11adc:	00 00                	add    %al,(%rax)
   11ade:	00 00                	add    %al,(%rax)
   11ae0:	3a 02                	cmp    (%rdx),%al
   11ae2:	00 00                	add    %al,(%rax)
   11ae4:	00 00                	add    %al,(%rax)
   11ae6:	00 00                	add    %al,(%rax)
   11ae8:	3a 02                	cmp    (%rdx),%al
   11aea:	00 00                	add    %al,(%rax)
   11aec:	00 00                	add    %al,(%rax)
   11aee:	00 00                	add    %al,(%rax)
   11af0:	3a 02                	cmp    (%rdx),%al
   11af2:	00 00                	add    %al,(%rax)
   11af4:	00 00                	add    %al,(%rax)
   11af6:	00 00                	add    %al,(%rax)
   11af8:	3a 02                	cmp    (%rdx),%al
   11afa:	00 00                	add    %al,(%rax)
   11afc:	00 00                	add    %al,(%rax)
   11afe:	00 00                	add    %al,(%rax)
   11b00:	3a 02                	cmp    (%rdx),%al
   11b02:	00 00                	add    %al,(%rax)
   11b04:	00 00                	add    %al,(%rax)
   11b06:	00 00                	add    %al,(%rax)
   11b08:	3a 02                	cmp    (%rdx),%al
   11b0a:	00 00                	add    %al,(%rax)
   11b0c:	00 00                	add    %al,(%rax)
   11b0e:	00 00                	add    %al,(%rax)
   11b10:	3a 02                	cmp    (%rdx),%al
   11b12:	00 00                	add    %al,(%rax)
   11b14:	00 00                	add    %al,(%rax)
   11b16:	00 00                	add    %al,(%rax)
   11b18:	3a 02                	cmp    (%rdx),%al
   11b1a:	00 00                	add    %al,(%rax)
   11b1c:	00 00                	add    %al,(%rax)
   11b1e:	00 00                	add    %al,(%rax)
   11b20:	3a 02                	cmp    (%rdx),%al
   11b22:	00 00                	add    %al,(%rax)
   11b24:	00 00                	add    %al,(%rax)
   11b26:	00 00                	add    %al,(%rax)
   11b28:	3a 02                	cmp    (%rdx),%al
   11b2a:	00 00                	add    %al,(%rax)
   11b2c:	00 00                	add    %al,(%rax)
   11b2e:	00 00                	add    %al,(%rax)
   11b30:	3a 02                	cmp    (%rdx),%al
   11b32:	00 00                	add    %al,(%rax)
   11b34:	00 00                	add    %al,(%rax)
   11b36:	00 00                	add    %al,(%rax)
   11b38:	3a 02                	cmp    (%rdx),%al
   11b3a:	00 00                	add    %al,(%rax)
   11b3c:	00 00                	add    %al,(%rax)
   11b3e:	00 00                	add    %al,(%rax)
   11b40:	3a 02                	cmp    (%rdx),%al
   11b42:	00 00                	add    %al,(%rax)
   11b44:	00 00                	add    %al,(%rax)
   11b46:	00 00                	add    %al,(%rax)
   11b48:	3a 02                	cmp    (%rdx),%al
   11b4a:	00 00                	add    %al,(%rax)
   11b4c:	00 00                	add    %al,(%rax)
   11b4e:	00 00                	add    %al,(%rax)
   11b50:	3a 02                	cmp    (%rdx),%al
   11b52:	00 00                	add    %al,(%rax)
   11b54:	00 00                	add    %al,(%rax)
   11b56:	00 00                	add    %al,(%rax)
   11b58:	3a 02                	cmp    (%rdx),%al
   11b5a:	00 00                	add    %al,(%rax)
   11b5c:	00 00                	add    %al,(%rax)
   11b5e:	00 00                	add    %al,(%rax)
   11b60:	3a 02                	cmp    (%rdx),%al
   11b62:	00 00                	add    %al,(%rax)
   11b64:	00 00                	add    %al,(%rax)
   11b66:	00 00                	add    %al,(%rax)
   11b68:	3a 02                	cmp    (%rdx),%al
   11b6a:	00 00                	add    %al,(%rax)
   11b6c:	00 00                	add    %al,(%rax)
   11b6e:	00 00                	add    %al,(%rax)
   11b70:	40 02 00             	add    (%rax),%al
   11b73:	00 00                	add    %al,(%rax)
   11b75:	00 00                	add    %al,(%rax)
   11b77:	00 40 02             	add    %al,0x2(%rax)
   11b7a:	00 00                	add    %al,(%rax)
   11b7c:	00 00                	add    %al,(%rax)
   11b7e:	00 00                	add    %al,(%rax)
   11b80:	40 02 00             	add    (%rax),%al
   11b83:	00 00                	add    %al,(%rax)
   11b85:	00 00                	add    %al,(%rax)
   11b87:	00 40 02             	add    %al,0x2(%rax)
   11b8a:	00 00                	add    %al,(%rax)
   11b8c:	00 00                	add    %al,(%rax)
   11b8e:	00 00                	add    %al,(%rax)
   11b90:	40 02 00             	add    (%rax),%al
   11b93:	00 00                	add    %al,(%rax)
   11b95:	00 00                	add    %al,(%rax)
   11b97:	00 40 02             	add    %al,0x2(%rax)
   11b9a:	00 00                	add    %al,(%rax)
   11b9c:	00 00                	add    %al,(%rax)
   11b9e:	00 00                	add    %al,(%rax)
   11ba0:	40 02 00             	add    (%rax),%al
   11ba3:	00 00                	add    %al,(%rax)
   11ba5:	00 00                	add    %al,(%rax)
   11ba7:	00 40 02             	add    %al,0x2(%rax)
   11baa:	00 00                	add    %al,(%rax)
   11bac:	00 00                	add    %al,(%rax)
   11bae:	00 00                	add    %al,(%rax)
   11bb0:	40 02 00             	add    (%rax),%al
   11bb3:	00 00                	add    %al,(%rax)
   11bb5:	00 00                	add    %al,(%rax)
   11bb7:	00 40 02             	add    %al,0x2(%rax)
   11bba:	00 00                	add    %al,(%rax)
   11bbc:	00 00                	add    %al,(%rax)
   11bbe:	00 00                	add    %al,(%rax)
   11bc0:	40 02 00             	add    (%rax),%al
   11bc3:	00 00                	add    %al,(%rax)
   11bc5:	00 00                	add    %al,(%rax)
   11bc7:	00 40 02             	add    %al,0x2(%rax)
   11bca:	00 00                	add    %al,(%rax)
   11bcc:	00 00                	add    %al,(%rax)
   11bce:	00 00                	add    %al,(%rax)
   11bd0:	40 02 00             	add    (%rax),%al
   11bd3:	00 00                	add    %al,(%rax)
   11bd5:	00 00                	add    %al,(%rax)
   11bd7:	00 40 02             	add    %al,0x2(%rax)
   11bda:	00 00                	add    %al,(%rax)
   11bdc:	00 00                	add    %al,(%rax)
   11bde:	00 00                	add    %al,(%rax)
   11be0:	40 02 00             	add    (%rax),%al
   11be3:	00 00                	add    %al,(%rax)
   11be5:	00 00                	add    %al,(%rax)
   11be7:	00 40 02             	add    %al,0x2(%rax)
   11bea:	00 00                	add    %al,(%rax)
   11bec:	00 00                	add    %al,(%rax)
   11bee:	00 00                	add    %al,(%rax)
   11bf0:	40 02 00             	add    (%rax),%al
   11bf3:	00 00                	add    %al,(%rax)
   11bf5:	00 00                	add    %al,(%rax)
   11bf7:	00 40 02             	add    %al,0x2(%rax)
   11bfa:	00 00                	add    %al,(%rax)
   11bfc:	00 00                	add    %al,(%rax)
   11bfe:	00 00                	add    %al,(%rax)
   11c00:	40 02 00             	add    (%rax),%al
   11c03:	00 00                	add    %al,(%rax)
   11c05:	00 00                	add    %al,(%rax)
   11c07:	00 40 02             	add    %al,0x2(%rax)
   11c0a:	00 00                	add    %al,(%rax)
   11c0c:	00 00                	add    %al,(%rax)
   11c0e:	00 00                	add    %al,(%rax)
   11c10:	40 02 00             	add    (%rax),%al
   11c13:	00 00                	add    %al,(%rax)
   11c15:	00 00                	add    %al,(%rax)
   11c17:	00 40 02             	add    %al,0x2(%rax)
   11c1a:	00 00                	add    %al,(%rax)
   11c1c:	00 00                	add    %al,(%rax)
   11c1e:	00 00                	add    %al,(%rax)
   11c20:	40 02 00             	add    (%rax),%al
   11c23:	00 00                	add    %al,(%rax)
   11c25:	00 00                	add    %al,(%rax)
   11c27:	00 40 02             	add    %al,0x2(%rax)
   11c2a:	00 00                	add    %al,(%rax)
   11c2c:	00 00                	add    %al,(%rax)
   11c2e:	00 00                	add    %al,(%rax)
   11c30:	40 02 00             	add    (%rax),%al
   11c33:	00 00                	add    %al,(%rax)
   11c35:	00 00                	add    %al,(%rax)
   11c37:	00 40 02             	add    %al,0x2(%rax)
   11c3a:	00 00                	add    %al,(%rax)
   11c3c:	00 00                	add    %al,(%rax)
   11c3e:	00 00                	add    %al,(%rax)
   11c40:	40 02 00             	add    (%rax),%al
   11c43:	00 00                	add    %al,(%rax)
   11c45:	00 00                	add    %al,(%rax)
   11c47:	00 40 02             	add    %al,0x2(%rax)
   11c4a:	00 00                	add    %al,(%rax)
   11c4c:	00 00                	add    %al,(%rax)
   11c4e:	00 00                	add    %al,(%rax)
   11c50:	40 02 00             	add    (%rax),%al
   11c53:	00 00                	add    %al,(%rax)
   11c55:	00 00                	add    %al,(%rax)
   11c57:	00 40 02             	add    %al,0x2(%rax)
   11c5a:	00 00                	add    %al,(%rax)
   11c5c:	00 00                	add    %al,(%rax)
   11c5e:	00 00                	add    %al,(%rax)
   11c60:	40 02 00             	add    (%rax),%al
   11c63:	00 00                	add    %al,(%rax)
   11c65:	00 00                	add    %al,(%rax)
   11c67:	00 40 02             	add    %al,0x2(%rax)
   11c6a:	00 00                	add    %al,(%rax)
   11c6c:	00 00                	add    %al,(%rax)
   11c6e:	00 00                	add    %al,(%rax)
   11c70:	4e 02 00             	rex.WRX add (%rax),%r8b
   11c73:	00 00                	add    %al,(%rax)
   11c75:	00 00                	add    %al,(%rax)
   11c77:	00 4e 02             	add    %cl,0x2(%rsi)
   11c7a:	00 00                	add    %al,(%rax)
   11c7c:	00 00                	add    %al,(%rax)
   11c7e:	00 00                	add    %al,(%rax)
   11c80:	4e 02 00             	rex.WRX add (%rax),%r8b
   11c83:	00 00                	add    %al,(%rax)
   11c85:	00 00                	add    %al,(%rax)
   11c87:	00 4e 02             	add    %cl,0x2(%rsi)
   11c8a:	00 00                	add    %al,(%rax)
   11c8c:	00 00                	add    %al,(%rax)
   11c8e:	00 00                	add    %al,(%rax)
   11c90:	4e 02 00             	rex.WRX add (%rax),%r8b
   11c93:	00 00                	add    %al,(%rax)
   11c95:	00 00                	add    %al,(%rax)
   11c97:	00 4e 02             	add    %cl,0x2(%rsi)
   11c9a:	00 00                	add    %al,(%rax)
   11c9c:	00 00                	add    %al,(%rax)
   11c9e:	00 00                	add    %al,(%rax)
   11ca0:	4e 02 00             	rex.WRX add (%rax),%r8b
   11ca3:	00 00                	add    %al,(%rax)
   11ca5:	00 00                	add    %al,(%rax)
   11ca7:	00 4e 02             	add    %cl,0x2(%rsi)
   11caa:	00 00                	add    %al,(%rax)
   11cac:	00 00                	add    %al,(%rax)
   11cae:	00 00                	add    %al,(%rax)
   11cb0:	4e 02 00             	rex.WRX add (%rax),%r8b
   11cb3:	00 00                	add    %al,(%rax)
   11cb5:	00 00                	add    %al,(%rax)
   11cb7:	00 4e 02             	add    %cl,0x2(%rsi)
   11cba:	00 00                	add    %al,(%rax)
   11cbc:	00 00                	add    %al,(%rax)
   11cbe:	00 00                	add    %al,(%rax)
   11cc0:	4e 02 00             	rex.WRX add (%rax),%r8b
   11cc3:	00 00                	add    %al,(%rax)
   11cc5:	00 00                	add    %al,(%rax)
   11cc7:	00 4e 02             	add    %cl,0x2(%rsi)
   11cca:	00 00                	add    %al,(%rax)
   11ccc:	00 00                	add    %al,(%rax)
   11cce:	00 00                	add    %al,(%rax)
   11cd0:	4e 02 00             	rex.WRX add (%rax),%r8b
   11cd3:	00 00                	add    %al,(%rax)
   11cd5:	00 00                	add    %al,(%rax)
   11cd7:	00 4e 02             	add    %cl,0x2(%rsi)
   11cda:	00 00                	add    %al,(%rax)
   11cdc:	00 00                	add    %al,(%rax)
   11cde:	00 00                	add    %al,(%rax)
   11ce0:	4e 02 00             	rex.WRX add (%rax),%r8b
   11ce3:	00 00                	add    %al,(%rax)
   11ce5:	00 00                	add    %al,(%rax)
   11ce7:	00 4e 02             	add    %cl,0x2(%rsi)
   11cea:	00 00                	add    %al,(%rax)
   11cec:	00 00                	add    %al,(%rax)
   11cee:	00 00                	add    %al,(%rax)
   11cf0:	4e 02 00             	rex.WRX add (%rax),%r8b
   11cf3:	00 00                	add    %al,(%rax)
   11cf5:	00 00                	add    %al,(%rax)
   11cf7:	00 4e 02             	add    %cl,0x2(%rsi)
   11cfa:	00 00                	add    %al,(%rax)
   11cfc:	00 00                	add    %al,(%rax)
   11cfe:	00 00                	add    %al,(%rax)
   11d00:	4e 02 00             	rex.WRX add (%rax),%r8b
   11d03:	00 00                	add    %al,(%rax)
   11d05:	00 00                	add    %al,(%rax)
   11d07:	00 4e 02             	add    %cl,0x2(%rsi)
   11d0a:	00 00                	add    %al,(%rax)
   11d0c:	00 00                	add    %al,(%rax)
   11d0e:	00 00                	add    %al,(%rax)
   11d10:	4e 02 00             	rex.WRX add (%rax),%r8b
   11d13:	00 00                	add    %al,(%rax)
   11d15:	00 00                	add    %al,(%rax)
   11d17:	00 4e 02             	add    %cl,0x2(%rsi)
   11d1a:	00 00                	add    %al,(%rax)
   11d1c:	00 00                	add    %al,(%rax)
   11d1e:	00 00                	add    %al,(%rax)
   11d20:	4e 02 00             	rex.WRX add (%rax),%r8b
   11d23:	00 00                	add    %al,(%rax)
   11d25:	00 00                	add    %al,(%rax)
   11d27:	00 4e 02             	add    %cl,0x2(%rsi)
   11d2a:	00 00                	add    %al,(%rax)
   11d2c:	00 00                	add    %al,(%rax)
   11d2e:	00 00                	add    %al,(%rax)
   11d30:	4e 02 00             	rex.WRX add (%rax),%r8b
   11d33:	00 00                	add    %al,(%rax)
   11d35:	00 00                	add    %al,(%rax)
   11d37:	00 4e 02             	add    %cl,0x2(%rsi)
   11d3a:	00 00                	add    %al,(%rax)
   11d3c:	00 00                	add    %al,(%rax)
   11d3e:	00 00                	add    %al,(%rax)
   11d40:	4e 02 00             	rex.WRX add (%rax),%r8b
   11d43:	00 00                	add    %al,(%rax)
   11d45:	00 00                	add    %al,(%rax)
   11d47:	00 4e 02             	add    %cl,0x2(%rsi)
   11d4a:	00 00                	add    %al,(%rax)
   11d4c:	00 00                	add    %al,(%rax)
   11d4e:	00 00                	add    %al,(%rax)
   11d50:	4e 02 00             	rex.WRX add (%rax),%r8b
   11d53:	00 00                	add    %al,(%rax)
   11d55:	00 00                	add    %al,(%rax)
   11d57:	00 4e 02             	add    %cl,0x2(%rsi)
   11d5a:	00 00                	add    %al,(%rax)
   11d5c:	00 00                	add    %al,(%rax)
   11d5e:	00 00                	add    %al,(%rax)
   11d60:	4e 02 00             	rex.WRX add (%rax),%r8b
   11d63:	00 00                	add    %al,(%rax)
   11d65:	00 00                	add    %al,(%rax)
   11d67:	00 4e 02             	add    %cl,0x2(%rsi)
   11d6a:	00 00                	add    %al,(%rax)
   11d6c:	00 00                	add    %al,(%rax)
   11d6e:	00 00                	add    %al,(%rax)
   11d70:	57                   	push   %rdi
   11d71:	02 00                	add    (%rax),%al
   11d73:	00 00                	add    %al,(%rax)
   11d75:	00 00                	add    %al,(%rax)
   11d77:	00 57 02             	add    %dl,0x2(%rdi)
   11d7a:	00 00                	add    %al,(%rax)
   11d7c:	00 00                	add    %al,(%rax)
   11d7e:	00 00                	add    %al,(%rax)
   11d80:	57                   	push   %rdi
   11d81:	02 00                	add    (%rax),%al
   11d83:	00 00                	add    %al,(%rax)
   11d85:	00 00                	add    %al,(%rax)
   11d87:	00 57 02             	add    %dl,0x2(%rdi)
   11d8a:	00 00                	add    %al,(%rax)
   11d8c:	00 00                	add    %al,(%rax)
   11d8e:	00 00                	add    %al,(%rax)
   11d90:	57                   	push   %rdi
   11d91:	02 00                	add    (%rax),%al
   11d93:	00 00                	add    %al,(%rax)
   11d95:	00 00                	add    %al,(%rax)
   11d97:	00 57 02             	add    %dl,0x2(%rdi)
   11d9a:	00 00                	add    %al,(%rax)
   11d9c:	00 00                	add    %al,(%rax)
   11d9e:	00 00                	add    %al,(%rax)
   11da0:	57                   	push   %rdi
   11da1:	02 00                	add    (%rax),%al
   11da3:	00 00                	add    %al,(%rax)
   11da5:	00 00                	add    %al,(%rax)
   11da7:	00 57 02             	add    %dl,0x2(%rdi)
   11daa:	00 00                	add    %al,(%rax)
   11dac:	00 00                	add    %al,(%rax)
   11dae:	00 00                	add    %al,(%rax)
   11db0:	57                   	push   %rdi
   11db1:	02 00                	add    (%rax),%al
   11db3:	00 00                	add    %al,(%rax)
   11db5:	00 00                	add    %al,(%rax)
   11db7:	00 57 02             	add    %dl,0x2(%rdi)
   11dba:	00 00                	add    %al,(%rax)
   11dbc:	00 00                	add    %al,(%rax)
   11dbe:	00 00                	add    %al,(%rax)
   11dc0:	57                   	push   %rdi
   11dc1:	02 00                	add    (%rax),%al
   11dc3:	00 00                	add    %al,(%rax)
   11dc5:	00 00                	add    %al,(%rax)
   11dc7:	00 57 02             	add    %dl,0x2(%rdi)
   11dca:	00 00                	add    %al,(%rax)
   11dcc:	00 00                	add    %al,(%rax)
   11dce:	00 00                	add    %al,(%rax)
   11dd0:	57                   	push   %rdi
   11dd1:	02 00                	add    (%rax),%al
   11dd3:	00 00                	add    %al,(%rax)
   11dd5:	00 00                	add    %al,(%rax)
   11dd7:	00 57 02             	add    %dl,0x2(%rdi)
   11dda:	00 00                	add    %al,(%rax)
   11ddc:	00 00                	add    %al,(%rax)
   11dde:	00 00                	add    %al,(%rax)
   11de0:	57                   	push   %rdi
   11de1:	02 00                	add    (%rax),%al
   11de3:	00 00                	add    %al,(%rax)
   11de5:	00 00                	add    %al,(%rax)
   11de7:	00 57 02             	add    %dl,0x2(%rdi)
   11dea:	00 00                	add    %al,(%rax)
   11dec:	00 00                	add    %al,(%rax)
   11dee:	00 00                	add    %al,(%rax)
   11df0:	57                   	push   %rdi
   11df1:	02 00                	add    (%rax),%al
   11df3:	00 00                	add    %al,(%rax)
   11df5:	00 00                	add    %al,(%rax)
   11df7:	00 57 02             	add    %dl,0x2(%rdi)
   11dfa:	00 00                	add    %al,(%rax)
   11dfc:	00 00                	add    %al,(%rax)
   11dfe:	00 00                	add    %al,(%rax)
   11e00:	57                   	push   %rdi
   11e01:	02 00                	add    (%rax),%al
   11e03:	00 00                	add    %al,(%rax)
   11e05:	00 00                	add    %al,(%rax)
   11e07:	00 57 02             	add    %dl,0x2(%rdi)
   11e0a:	00 00                	add    %al,(%rax)
   11e0c:	00 00                	add    %al,(%rax)
   11e0e:	00 00                	add    %al,(%rax)
   11e10:	57                   	push   %rdi
   11e11:	02 00                	add    (%rax),%al
   11e13:	00 00                	add    %al,(%rax)
   11e15:	00 00                	add    %al,(%rax)
   11e17:	00 57 02             	add    %dl,0x2(%rdi)
   11e1a:	00 00                	add    %al,(%rax)
   11e1c:	00 00                	add    %al,(%rax)
   11e1e:	00 00                	add    %al,(%rax)
   11e20:	57                   	push   %rdi
   11e21:	02 00                	add    (%rax),%al
   11e23:	00 00                	add    %al,(%rax)
   11e25:	00 00                	add    %al,(%rax)
   11e27:	00 57 02             	add    %dl,0x2(%rdi)
   11e2a:	00 00                	add    %al,(%rax)
   11e2c:	00 00                	add    %al,(%rax)
   11e2e:	00 00                	add    %al,(%rax)
   11e30:	57                   	push   %rdi
   11e31:	02 00                	add    (%rax),%al
   11e33:	00 00                	add    %al,(%rax)
   11e35:	00 00                	add    %al,(%rax)
   11e37:	00 57 02             	add    %dl,0x2(%rdi)
   11e3a:	00 00                	add    %al,(%rax)
   11e3c:	00 00                	add    %al,(%rax)
   11e3e:	00 00                	add    %al,(%rax)
   11e40:	57                   	push   %rdi
   11e41:	02 00                	add    (%rax),%al
   11e43:	00 00                	add    %al,(%rax)
   11e45:	00 00                	add    %al,(%rax)
   11e47:	00 57 02             	add    %dl,0x2(%rdi)
   11e4a:	00 00                	add    %al,(%rax)
   11e4c:	00 00                	add    %al,(%rax)
   11e4e:	00 00                	add    %al,(%rax)
   11e50:	57                   	push   %rdi
   11e51:	02 00                	add    (%rax),%al
   11e53:	00 00                	add    %al,(%rax)
   11e55:	00 00                	add    %al,(%rax)
   11e57:	00 57 02             	add    %dl,0x2(%rdi)
   11e5a:	00 00                	add    %al,(%rax)
   11e5c:	00 00                	add    %al,(%rax)
   11e5e:	00 00                	add    %al,(%rax)
   11e60:	57                   	push   %rdi
   11e61:	02 00                	add    (%rax),%al
   11e63:	00 00                	add    %al,(%rax)
   11e65:	00 00                	add    %al,(%rax)
   11e67:	00 57 02             	add    %dl,0x2(%rdi)
   11e6a:	00 00                	add    %al,(%rax)
   11e6c:	00 00                	add    %al,(%rax)
   11e6e:	00 00                	add    %al,(%rax)
   11e70:	60                   	(bad)  
   11e71:	02 00                	add    (%rax),%al
   11e73:	00 00                	add    %al,(%rax)
   11e75:	00 00                	add    %al,(%rax)
   11e77:	00 60 02             	add    %ah,0x2(%rax)
   11e7a:	00 00                	add    %al,(%rax)
   11e7c:	00 00                	add    %al,(%rax)
   11e7e:	00 00                	add    %al,(%rax)
   11e80:	60                   	(bad)  
   11e81:	02 00                	add    (%rax),%al
   11e83:	00 00                	add    %al,(%rax)
   11e85:	00 00                	add    %al,(%rax)
   11e87:	00 60 02             	add    %ah,0x2(%rax)
   11e8a:	00 00                	add    %al,(%rax)
   11e8c:	00 00                	add    %al,(%rax)
   11e8e:	00 00                	add    %al,(%rax)
   11e90:	60                   	(bad)  
   11e91:	02 00                	add    (%rax),%al
   11e93:	00 00                	add    %al,(%rax)
   11e95:	00 00                	add    %al,(%rax)
   11e97:	00 60 02             	add    %ah,0x2(%rax)
   11e9a:	00 00                	add    %al,(%rax)
   11e9c:	00 00                	add    %al,(%rax)
   11e9e:	00 00                	add    %al,(%rax)
   11ea0:	60                   	(bad)  
   11ea1:	02 00                	add    (%rax),%al
   11ea3:	00 00                	add    %al,(%rax)
   11ea5:	00 00                	add    %al,(%rax)
   11ea7:	00 60 02             	add    %ah,0x2(%rax)
   11eaa:	00 00                	add    %al,(%rax)
   11eac:	00 00                	add    %al,(%rax)
   11eae:	00 00                	add    %al,(%rax)
   11eb0:	60                   	(bad)  
   11eb1:	02 00                	add    (%rax),%al
   11eb3:	00 00                	add    %al,(%rax)
   11eb5:	00 00                	add    %al,(%rax)
   11eb7:	00 60 02             	add    %ah,0x2(%rax)
   11eba:	00 00                	add    %al,(%rax)
   11ebc:	00 00                	add    %al,(%rax)
   11ebe:	00 00                	add    %al,(%rax)
   11ec0:	60                   	(bad)  
   11ec1:	02 00                	add    (%rax),%al
   11ec3:	00 00                	add    %al,(%rax)
   11ec5:	00 00                	add    %al,(%rax)
   11ec7:	00 60 02             	add    %ah,0x2(%rax)
   11eca:	00 00                	add    %al,(%rax)
   11ecc:	00 00                	add    %al,(%rax)
   11ece:	00 00                	add    %al,(%rax)
   11ed0:	60                   	(bad)  
   11ed1:	02 00                	add    (%rax),%al
   11ed3:	00 00                	add    %al,(%rax)
   11ed5:	00 00                	add    %al,(%rax)
   11ed7:	00 60 02             	add    %ah,0x2(%rax)
   11eda:	00 00                	add    %al,(%rax)
   11edc:	00 00                	add    %al,(%rax)
   11ede:	00 00                	add    %al,(%rax)
   11ee0:	60                   	(bad)  
   11ee1:	02 00                	add    (%rax),%al
   11ee3:	00 00                	add    %al,(%rax)
   11ee5:	00 00                	add    %al,(%rax)
   11ee7:	00 60 02             	add    %ah,0x2(%rax)
   11eea:	00 00                	add    %al,(%rax)
   11eec:	00 00                	add    %al,(%rax)
   11eee:	00 00                	add    %al,(%rax)
   11ef0:	60                   	(bad)  
   11ef1:	02 00                	add    (%rax),%al
   11ef3:	00 00                	add    %al,(%rax)
   11ef5:	00 00                	add    %al,(%rax)
   11ef7:	00 60 02             	add    %ah,0x2(%rax)
   11efa:	00 00                	add    %al,(%rax)
   11efc:	00 00                	add    %al,(%rax)
   11efe:	00 00                	add    %al,(%rax)
   11f00:	60                   	(bad)  
   11f01:	02 00                	add    (%rax),%al
   11f03:	00 00                	add    %al,(%rax)
   11f05:	00 00                	add    %al,(%rax)
   11f07:	00 60 02             	add    %ah,0x2(%rax)
   11f0a:	00 00                	add    %al,(%rax)
   11f0c:	00 00                	add    %al,(%rax)
   11f0e:	00 00                	add    %al,(%rax)
   11f10:	60                   	(bad)  
   11f11:	02 00                	add    (%rax),%al
   11f13:	00 00                	add    %al,(%rax)
   11f15:	00 00                	add    %al,(%rax)
   11f17:	00 60 02             	add    %ah,0x2(%rax)
   11f1a:	00 00                	add    %al,(%rax)
   11f1c:	00 00                	add    %al,(%rax)
   11f1e:	00 00                	add    %al,(%rax)
   11f20:	60                   	(bad)  
   11f21:	02 00                	add    (%rax),%al
   11f23:	00 00                	add    %al,(%rax)
   11f25:	00 00                	add    %al,(%rax)
   11f27:	00 60 02             	add    %ah,0x2(%rax)
   11f2a:	00 00                	add    %al,(%rax)
   11f2c:	00 00                	add    %al,(%rax)
   11f2e:	00 00                	add    %al,(%rax)
   11f30:	60                   	(bad)  
   11f31:	02 00                	add    (%rax),%al
   11f33:	00 00                	add    %al,(%rax)
   11f35:	00 00                	add    %al,(%rax)
   11f37:	00 60 02             	add    %ah,0x2(%rax)
   11f3a:	00 00                	add    %al,(%rax)
   11f3c:	00 00                	add    %al,(%rax)
   11f3e:	00 00                	add    %al,(%rax)
   11f40:	60                   	(bad)  
   11f41:	02 00                	add    (%rax),%al
   11f43:	00 00                	add    %al,(%rax)
   11f45:	00 00                	add    %al,(%rax)
   11f47:	00 60 02             	add    %ah,0x2(%rax)
   11f4a:	00 00                	add    %al,(%rax)
   11f4c:	00 00                	add    %al,(%rax)
   11f4e:	00 00                	add    %al,(%rax)
   11f50:	60                   	(bad)  
   11f51:	02 00                	add    (%rax),%al
   11f53:	00 00                	add    %al,(%rax)
   11f55:	00 00                	add    %al,(%rax)
   11f57:	00 60 02             	add    %ah,0x2(%rax)
   11f5a:	00 00                	add    %al,(%rax)
   11f5c:	00 00                	add    %al,(%rax)
   11f5e:	00 00                	add    %al,(%rax)
   11f60:	60                   	(bad)  
   11f61:	02 00                	add    (%rax),%al
   11f63:	00 00                	add    %al,(%rax)
   11f65:	00 00                	add    %al,(%rax)
   11f67:	00 60 02             	add    %ah,0x2(%rax)
   11f6a:	00 00                	add    %al,(%rax)
   11f6c:	00 00                	add    %al,(%rax)
   11f6e:	00 00                	add    %al,(%rax)
   11f70:	00 0a                	add    %cl,(%rdx)
   11f72:	00 00                	add    %al,(%rax)
   11f74:	00 00                	add    %al,(%rax)
   11f76:	00 00                	add    %al,(%rax)
   11f78:	10 0a                	adc    %cl,(%rdx)
   11f7a:	00 00                	add    %al,(%rax)
   11f7c:	00 00                	add    %al,(%rax)
   11f7e:	00 00                	add    %al,(%rax)
   11f80:	f0 09 00             	lock or %eax,(%rax)
   11f83:	00 00                	add    %al,(%rax)
   11f85:	00 00                	add    %al,(%rax)
   11f87:	00 e0                	add    %ah,%al
   11f89:	09 00                	or     %eax,(%rax)
   11f8b:	00 00                	add    %al,(%rax)
   11f8d:	00 00                	add    %al,(%rax)
   11f8f:	00 d0                	add    %dl,%al
   11f91:	09 00                	or     %eax,(%rax)
   11f93:	00 00                	add    %al,(%rax)
   11f95:	00 00                	add    %al,(%rax)
   11f97:	00 c0                	add    %al,%al
   11f99:	09 00                	or     %eax,(%rax)
   11f9b:	00 00                	add    %al,(%rax)
   11f9d:	00 00                	add    %al,(%rax)
   11f9f:	00 c0                	add    %al,%al
   11fa1:	09 00                	or     %eax,(%rax)
   11fa3:	00 00                	add    %al,(%rax)
   11fa5:	00 00                	add    %al,(%rax)
   11fa7:	00 c0                	add    %al,%al
   11fa9:	09 00                	or     %eax,(%rax)
   11fab:	00 00                	add    %al,(%rax)
   11fad:	00 00                	add    %al,(%rax)
   11faf:	00 b0 09 00 00 00    	add    %dh,0x9(%rax)
   11fb5:	00 00                	add    %al,(%rax)
   11fb7:	00 a0 09 00 00 00    	add    %ah,0x9(%rax)
   11fbd:	00 00                	add    %al,(%rax)
   11fbf:	00 a0 09 00 00 00    	add    %ah,0x9(%rax)
   11fc5:	00 00                	add    %al,(%rax)
   11fc7:	00 a0 09 00 00 00    	add    %ah,0x9(%rax)
   11fcd:	00 00                	add    %al,(%rax)
   11fcf:	00 a0 09 00 00 00    	add    %ah,0x9(%rax)
   11fd5:	00 00                	add    %al,(%rax)
   11fd7:	00 a0 09 00 00 00    	add    %ah,0x9(%rax)
   11fdd:	00 00                	add    %al,(%rax)
   11fdf:	00 a0 09 00 00 00    	add    %ah,0x9(%rax)
   11fe5:	00 00                	add    %al,(%rax)
   11fe7:	00 a0 09 00 00 00    	add    %ah,0x9(%rax)
   11fed:	00 00                	add    %al,(%rax)
   11fef:	00 90 09 00 00 00    	add    %dl,0x9(%rax)
   11ff5:	00 00                	add    %al,(%rax)
   11ff7:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   11ffd:	00 00                	add    %al,(%rax)
   11fff:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   12005:	00 00                	add    %al,(%rax)
   12007:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   1200d:	00 00                	add    %al,(%rax)
   1200f:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   12015:	00 00                	add    %al,(%rax)
   12017:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   1201d:	00 00                	add    %al,(%rax)
   1201f:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   12025:	00 00                	add    %al,(%rax)
   12027:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   1202d:	00 00                	add    %al,(%rax)
   1202f:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   12035:	00 00                	add    %al,(%rax)
   12037:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   1203d:	00 00                	add    %al,(%rax)
   1203f:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   12045:	00 00                	add    %al,(%rax)
   12047:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   1204d:	00 00                	add    %al,(%rax)
   1204f:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   12055:	00 00                	add    %al,(%rax)
   12057:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   1205d:	00 00                	add    %al,(%rax)
   1205f:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   12065:	00 00                	add    %al,(%rax)
   12067:	00 80 09 00 00 00    	add    %al,0x9(%rax)
   1206d:	00 00                	add    %al,(%rax)
   1206f:	00 70 09             	add    %dh,0x9(%rax)
   12072:	00 00                	add    %al,(%rax)
   12074:	00 00                	add    %al,(%rax)
   12076:	00 00                	add    %al,(%rax)
   12078:	60                   	(bad)  
   12079:	09 00                	or     %eax,(%rax)
   1207b:	00 00                	add    %al,(%rax)
   1207d:	00 00                	add    %al,(%rax)
   1207f:	00 60 09             	add    %ah,0x9(%rax)
   12082:	00 00                	add    %al,(%rax)
   12084:	00 00                	add    %al,(%rax)
   12086:	00 00                	add    %al,(%rax)
   12088:	60                   	(bad)  
   12089:	09 00                	or     %eax,(%rax)
   1208b:	00 00                	add    %al,(%rax)
   1208d:	00 00                	add    %al,(%rax)
   1208f:	00 60 09             	add    %ah,0x9(%rax)
   12092:	00 00                	add    %al,(%rax)
   12094:	00 00                	add    %al,(%rax)
   12096:	00 00                	add    %al,(%rax)
   12098:	60                   	(bad)  
   12099:	09 00                	or     %eax,(%rax)
   1209b:	00 00                	add    %al,(%rax)
   1209d:	00 00                	add    %al,(%rax)
   1209f:	00 60 09             	add    %ah,0x9(%rax)
   120a2:	00 00                	add    %al,(%rax)
   120a4:	00 00                	add    %al,(%rax)
   120a6:	00 00                	add    %al,(%rax)
   120a8:	60                   	(bad)  
   120a9:	09 00                	or     %eax,(%rax)
   120ab:	00 00                	add    %al,(%rax)
   120ad:	00 00                	add    %al,(%rax)
   120af:	00 60 09             	add    %ah,0x9(%rax)
   120b2:	00 00                	add    %al,(%rax)
   120b4:	00 00                	add    %al,(%rax)
   120b6:	00 00                	add    %al,(%rax)
   120b8:	60                   	(bad)  
   120b9:	09 00                	or     %eax,(%rax)
   120bb:	00 00                	add    %al,(%rax)
   120bd:	00 00                	add    %al,(%rax)
   120bf:	00 60 09             	add    %ah,0x9(%rax)
   120c2:	00 00                	add    %al,(%rax)
   120c4:	00 00                	add    %al,(%rax)
   120c6:	00 00                	add    %al,(%rax)
   120c8:	60                   	(bad)  
   120c9:	09 00                	or     %eax,(%rax)
   120cb:	00 00                	add    %al,(%rax)
   120cd:	00 00                	add    %al,(%rax)
   120cf:	00 60 09             	add    %ah,0x9(%rax)
   120d2:	00 00                	add    %al,(%rax)
   120d4:	00 00                	add    %al,(%rax)
   120d6:	00 00                	add    %al,(%rax)
   120d8:	60                   	(bad)  
   120d9:	09 00                	or     %eax,(%rax)
   120db:	00 00                	add    %al,(%rax)
   120dd:	00 00                	add    %al,(%rax)
   120df:	00 60 09             	add    %ah,0x9(%rax)
   120e2:	00 00                	add    %al,(%rax)
   120e4:	00 00                	add    %al,(%rax)
   120e6:	00 00                	add    %al,(%rax)
   120e8:	60                   	(bad)  
   120e9:	09 00                	or     %eax,(%rax)
   120eb:	00 00                	add    %al,(%rax)
   120ed:	00 00                	add    %al,(%rax)
   120ef:	00 60 09             	add    %ah,0x9(%rax)
   120f2:	00 00                	add    %al,(%rax)
   120f4:	00 00                	add    %al,(%rax)
   120f6:	00 00                	add    %al,(%rax)
   120f8:	60                   	(bad)  
   120f9:	09 00                	or     %eax,(%rax)
   120fb:	00 00                	add    %al,(%rax)
   120fd:	00 00                	add    %al,(%rax)
   120ff:	00 60 09             	add    %ah,0x9(%rax)
   12102:	00 00                	add    %al,(%rax)
   12104:	00 00                	add    %al,(%rax)
   12106:	00 00                	add    %al,(%rax)
   12108:	60                   	(bad)  
   12109:	09 00                	or     %eax,(%rax)
   1210b:	00 00                	add    %al,(%rax)
   1210d:	00 00                	add    %al,(%rax)
   1210f:	00 60 09             	add    %ah,0x9(%rax)
   12112:	00 00                	add    %al,(%rax)
   12114:	00 00                	add    %al,(%rax)
   12116:	00 00                	add    %al,(%rax)
   12118:	60                   	(bad)  
   12119:	09 00                	or     %eax,(%rax)
   1211b:	00 00                	add    %al,(%rax)
   1211d:	00 00                	add    %al,(%rax)
   1211f:	00 60 09             	add    %ah,0x9(%rax)
   12122:	00 00                	add    %al,(%rax)
   12124:	00 00                	add    %al,(%rax)
   12126:	00 00                	add    %al,(%rax)
   12128:	60                   	(bad)  
   12129:	09 00                	or     %eax,(%rax)
   1212b:	00 00                	add    %al,(%rax)
   1212d:	00 00                	add    %al,(%rax)
   1212f:	00 60 09             	add    %ah,0x9(%rax)
   12132:	00 00                	add    %al,(%rax)
   12134:	00 00                	add    %al,(%rax)
   12136:	00 00                	add    %al,(%rax)
   12138:	60                   	(bad)  
   12139:	09 00                	or     %eax,(%rax)
   1213b:	00 00                	add    %al,(%rax)
   1213d:	00 00                	add    %al,(%rax)
   1213f:	00 60 09             	add    %ah,0x9(%rax)
   12142:	00 00                	add    %al,(%rax)
   12144:	00 00                	add    %al,(%rax)
   12146:	00 00                	add    %al,(%rax)
   12148:	60                   	(bad)  
   12149:	09 00                	or     %eax,(%rax)
   1214b:	00 00                	add    %al,(%rax)
   1214d:	00 00                	add    %al,(%rax)
   1214f:	00 60 09             	add    %ah,0x9(%rax)
   12152:	00 00                	add    %al,(%rax)
   12154:	00 00                	add    %al,(%rax)
   12156:	00 00                	add    %al,(%rax)
   12158:	60                   	(bad)  
   12159:	09 00                	or     %eax,(%rax)
   1215b:	00 00                	add    %al,(%rax)
   1215d:	00 00                	add    %al,(%rax)
   1215f:	00 60 09             	add    %ah,0x9(%rax)
   12162:	00 00                	add    %al,(%rax)
   12164:	00 00                	add    %al,(%rax)
   12166:	00 00                	add    %al,(%rax)
   12168:	60                   	(bad)  
   12169:	09 00                	or     %eax,(%rax)
   1216b:	00 00                	add    %al,(%rax)
   1216d:	00 00                	add    %al,(%rax)
   1216f:	00 50 09             	add    %dl,0x9(%rax)
   12172:	00 00                	add    %al,(%rax)
   12174:	00 00                	add    %al,(%rax)
   12176:	00 00                	add    %al,(%rax)
   12178:	40 09 00             	rex or %eax,(%rax)
   1217b:	00 00                	add    %al,(%rax)
   1217d:	00 00                	add    %al,(%rax)
   1217f:	00 40 09             	add    %al,0x9(%rax)
   12182:	00 00                	add    %al,(%rax)
   12184:	00 00                	add    %al,(%rax)
   12186:	00 00                	add    %al,(%rax)
   12188:	40 09 00             	rex or %eax,(%rax)
   1218b:	00 00                	add    %al,(%rax)
   1218d:	00 00                	add    %al,(%rax)
   1218f:	00 40 09             	add    %al,0x9(%rax)
   12192:	00 00                	add    %al,(%rax)
   12194:	00 00                	add    %al,(%rax)
   12196:	00 00                	add    %al,(%rax)
   12198:	40 09 00             	rex or %eax,(%rax)
   1219b:	00 00                	add    %al,(%rax)
   1219d:	00 00                	add    %al,(%rax)
   1219f:	00 40 09             	add    %al,0x9(%rax)
   121a2:	00 00                	add    %al,(%rax)
   121a4:	00 00                	add    %al,(%rax)
   121a6:	00 00                	add    %al,(%rax)
   121a8:	40 09 00             	rex or %eax,(%rax)
   121ab:	00 00                	add    %al,(%rax)
   121ad:	00 00                	add    %al,(%rax)
   121af:	00 40 09             	add    %al,0x9(%rax)
   121b2:	00 00                	add    %al,(%rax)
   121b4:	00 00                	add    %al,(%rax)
   121b6:	00 00                	add    %al,(%rax)
   121b8:	40 09 00             	rex or %eax,(%rax)
   121bb:	00 00                	add    %al,(%rax)
   121bd:	00 00                	add    %al,(%rax)
   121bf:	00 40 09             	add    %al,0x9(%rax)
   121c2:	00 00                	add    %al,(%rax)
   121c4:	00 00                	add    %al,(%rax)
   121c6:	00 00                	add    %al,(%rax)
   121c8:	40 09 00             	rex or %eax,(%rax)
   121cb:	00 00                	add    %al,(%rax)
   121cd:	00 00                	add    %al,(%rax)
   121cf:	00 40 09             	add    %al,0x9(%rax)
   121d2:	00 00                	add    %al,(%rax)
   121d4:	00 00                	add    %al,(%rax)
   121d6:	00 00                	add    %al,(%rax)
   121d8:	40 09 00             	rex or %eax,(%rax)
   121db:	00 00                	add    %al,(%rax)
   121dd:	00 00                	add    %al,(%rax)
   121df:	00 40 09             	add    %al,0x9(%rax)
   121e2:	00 00                	add    %al,(%rax)
   121e4:	00 00                	add    %al,(%rax)
   121e6:	00 00                	add    %al,(%rax)
   121e8:	40 09 00             	rex or %eax,(%rax)
   121eb:	00 00                	add    %al,(%rax)
   121ed:	00 00                	add    %al,(%rax)
   121ef:	00 40 09             	add    %al,0x9(%rax)
   121f2:	00 00                	add    %al,(%rax)
   121f4:	00 00                	add    %al,(%rax)
   121f6:	00 00                	add    %al,(%rax)
   121f8:	40 09 00             	rex or %eax,(%rax)
   121fb:	00 00                	add    %al,(%rax)
   121fd:	00 00                	add    %al,(%rax)
   121ff:	00 40 09             	add    %al,0x9(%rax)
   12202:	00 00                	add    %al,(%rax)
   12204:	00 00                	add    %al,(%rax)
   12206:	00 00                	add    %al,(%rax)
   12208:	40 09 00             	rex or %eax,(%rax)
   1220b:	00 00                	add    %al,(%rax)
   1220d:	00 00                	add    %al,(%rax)
   1220f:	00 40 09             	add    %al,0x9(%rax)
   12212:	00 00                	add    %al,(%rax)
   12214:	00 00                	add    %al,(%rax)
   12216:	00 00                	add    %al,(%rax)
   12218:	40 09 00             	rex or %eax,(%rax)
   1221b:	00 00                	add    %al,(%rax)
   1221d:	00 00                	add    %al,(%rax)
   1221f:	00 40 09             	add    %al,0x9(%rax)
   12222:	00 00                	add    %al,(%rax)
   12224:	00 00                	add    %al,(%rax)
   12226:	00 00                	add    %al,(%rax)
   12228:	40 09 00             	rex or %eax,(%rax)
   1222b:	00 00                	add    %al,(%rax)
   1222d:	00 00                	add    %al,(%rax)
   1222f:	00 40 09             	add    %al,0x9(%rax)
   12232:	00 00                	add    %al,(%rax)
   12234:	00 00                	add    %al,(%rax)
   12236:	00 00                	add    %al,(%rax)
   12238:	40 09 00             	rex or %eax,(%rax)
   1223b:	00 00                	add    %al,(%rax)
   1223d:	00 00                	add    %al,(%rax)
   1223f:	00 40 09             	add    %al,0x9(%rax)
   12242:	00 00                	add    %al,(%rax)
   12244:	00 00                	add    %al,(%rax)
   12246:	00 00                	add    %al,(%rax)
   12248:	40 09 00             	rex or %eax,(%rax)
   1224b:	00 00                	add    %al,(%rax)
   1224d:	00 00                	add    %al,(%rax)
   1224f:	00 40 09             	add    %al,0x9(%rax)
   12252:	00 00                	add    %al,(%rax)
   12254:	00 00                	add    %al,(%rax)
   12256:	00 00                	add    %al,(%rax)
   12258:	40 09 00             	rex or %eax,(%rax)
   1225b:	00 00                	add    %al,(%rax)
   1225d:	00 00                	add    %al,(%rax)
   1225f:	00 40 09             	add    %al,0x9(%rax)
   12262:	00 00                	add    %al,(%rax)
   12264:	00 00                	add    %al,(%rax)
   12266:	00 00                	add    %al,(%rax)
   12268:	40 09 00             	rex or %eax,(%rax)
   1226b:	00 00                	add    %al,(%rax)
   1226d:	00 00                	add    %al,(%rax)
   1226f:	00 40 09             	add    %al,0x9(%rax)
   12272:	00 00                	add    %al,(%rax)
   12274:	00 00                	add    %al,(%rax)
   12276:	00 00                	add    %al,(%rax)
   12278:	40 09 00             	rex or %eax,(%rax)
   1227b:	00 00                	add    %al,(%rax)
   1227d:	00 00                	add    %al,(%rax)
   1227f:	00 40 09             	add    %al,0x9(%rax)
   12282:	00 00                	add    %al,(%rax)
   12284:	00 00                	add    %al,(%rax)
   12286:	00 00                	add    %al,(%rax)
   12288:	40 09 00             	rex or %eax,(%rax)
   1228b:	00 00                	add    %al,(%rax)
   1228d:	00 00                	add    %al,(%rax)
   1228f:	00 40 09             	add    %al,0x9(%rax)
   12292:	00 00                	add    %al,(%rax)
   12294:	00 00                	add    %al,(%rax)
   12296:	00 00                	add    %al,(%rax)
   12298:	40 09 00             	rex or %eax,(%rax)
   1229b:	00 00                	add    %al,(%rax)
   1229d:	00 00                	add    %al,(%rax)
   1229f:	00 40 09             	add    %al,0x9(%rax)
   122a2:	00 00                	add    %al,(%rax)
   122a4:	00 00                	add    %al,(%rax)
   122a6:	00 00                	add    %al,(%rax)
   122a8:	40 09 00             	rex or %eax,(%rax)
   122ab:	00 00                	add    %al,(%rax)
   122ad:	00 00                	add    %al,(%rax)
   122af:	00 40 09             	add    %al,0x9(%rax)
   122b2:	00 00                	add    %al,(%rax)
   122b4:	00 00                	add    %al,(%rax)
   122b6:	00 00                	add    %al,(%rax)
   122b8:	40 09 00             	rex or %eax,(%rax)
   122bb:	00 00                	add    %al,(%rax)
   122bd:	00 00                	add    %al,(%rax)
   122bf:	00 40 09             	add    %al,0x9(%rax)
   122c2:	00 00                	add    %al,(%rax)
   122c4:	00 00                	add    %al,(%rax)
   122c6:	00 00                	add    %al,(%rax)
   122c8:	40 09 00             	rex or %eax,(%rax)
   122cb:	00 00                	add    %al,(%rax)
   122cd:	00 00                	add    %al,(%rax)
   122cf:	00 40 09             	add    %al,0x9(%rax)
   122d2:	00 00                	add    %al,(%rax)
   122d4:	00 00                	add    %al,(%rax)
   122d6:	00 00                	add    %al,(%rax)
   122d8:	40 09 00             	rex or %eax,(%rax)
   122db:	00 00                	add    %al,(%rax)
   122dd:	00 00                	add    %al,(%rax)
   122df:	00 40 09             	add    %al,0x9(%rax)
   122e2:	00 00                	add    %al,(%rax)
   122e4:	00 00                	add    %al,(%rax)
   122e6:	00 00                	add    %al,(%rax)
   122e8:	40 09 00             	rex or %eax,(%rax)
   122eb:	00 00                	add    %al,(%rax)
   122ed:	00 00                	add    %al,(%rax)
   122ef:	00 40 09             	add    %al,0x9(%rax)
   122f2:	00 00                	add    %al,(%rax)
   122f4:	00 00                	add    %al,(%rax)
   122f6:	00 00                	add    %al,(%rax)
   122f8:	40 09 00             	rex or %eax,(%rax)
   122fb:	00 00                	add    %al,(%rax)
   122fd:	00 00                	add    %al,(%rax)
   122ff:	00 40 09             	add    %al,0x9(%rax)
   12302:	00 00                	add    %al,(%rax)
   12304:	00 00                	add    %al,(%rax)
   12306:	00 00                	add    %al,(%rax)
   12308:	40 09 00             	rex or %eax,(%rax)
   1230b:	00 00                	add    %al,(%rax)
   1230d:	00 00                	add    %al,(%rax)
   1230f:	00 40 09             	add    %al,0x9(%rax)
   12312:	00 00                	add    %al,(%rax)
   12314:	00 00                	add    %al,(%rax)
   12316:	00 00                	add    %al,(%rax)
   12318:	40 09 00             	rex or %eax,(%rax)
   1231b:	00 00                	add    %al,(%rax)
   1231d:	00 00                	add    %al,(%rax)
   1231f:	00 40 09             	add    %al,0x9(%rax)
   12322:	00 00                	add    %al,(%rax)
   12324:	00 00                	add    %al,(%rax)
   12326:	00 00                	add    %al,(%rax)
   12328:	40 09 00             	rex or %eax,(%rax)
   1232b:	00 00                	add    %al,(%rax)
   1232d:	00 00                	add    %al,(%rax)
   1232f:	00 40 09             	add    %al,0x9(%rax)
   12332:	00 00                	add    %al,(%rax)
   12334:	00 00                	add    %al,(%rax)
   12336:	00 00                	add    %al,(%rax)
   12338:	40 09 00             	rex or %eax,(%rax)
   1233b:	00 00                	add    %al,(%rax)
   1233d:	00 00                	add    %al,(%rax)
   1233f:	00 40 09             	add    %al,0x9(%rax)
   12342:	00 00                	add    %al,(%rax)
   12344:	00 00                	add    %al,(%rax)
   12346:	00 00                	add    %al,(%rax)
   12348:	40 09 00             	rex or %eax,(%rax)
   1234b:	00 00                	add    %al,(%rax)
   1234d:	00 00                	add    %al,(%rax)
   1234f:	00 40 09             	add    %al,0x9(%rax)
   12352:	00 00                	add    %al,(%rax)
   12354:	00 00                	add    %al,(%rax)
   12356:	00 00                	add    %al,(%rax)
   12358:	40 09 00             	rex or %eax,(%rax)
   1235b:	00 00                	add    %al,(%rax)
   1235d:	00 00                	add    %al,(%rax)
   1235f:	00 40 09             	add    %al,0x9(%rax)
   12362:	00 00                	add    %al,(%rax)
   12364:	00 00                	add    %al,(%rax)
   12366:	00 00                	add    %al,(%rax)
   12368:	40 09 00             	rex or %eax,(%rax)
   1236b:	00 00                	add    %al,(%rax)
   1236d:	00 00                	add    %al,(%rax)
   1236f:	00 20                	add    %ah,(%rax)
   12371:	09 00                	or     %eax,(%rax)
   12373:	00 00                	add    %al,(%rax)
   12375:	00 00                	add    %al,(%rax)
   12377:	00 20                	add    %ah,(%rax)
   12379:	09 00                	or     %eax,(%rax)
   1237b:	00 00                	add    %al,(%rax)
   1237d:	00 00                	add    %al,(%rax)
   1237f:	00 c5                	add    %al,%ch
   12381:	f8                   	clc    
   12382:	77 4c                	ja     123d0 <__intel_mic_avx512f_memcpy+0x10>
   12384:	89 c0                	mov    %eax,%eax
   12386:	c3                   	retq   
   12387:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1238e:	00 00 
   12390:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   12397:	00 00 00 
   1239a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   123a1:	00 00 00 
   123a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   123ab:	00 00 00 
   123ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   123b5:	00 00 00 
   123b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   123bf:	00 

00000000000123c0 <__intel_mic_avx512f_memcpy>:
   123c0:	f3 0f 1e fa          	endbr64 
   123c4:	41 56                	push   %r14
   123c6:	48 89 f8             	mov    %rdi,%rax
   123c9:	4c 8d 05 b8 34 22 00 	lea    0x2234b8(%rip),%r8        # 235888 <__libirc_largest_cache_size_half>
   123d0:	49 89 c6             	mov    %rax,%r14
   123d3:	48 8d 0d b6 34 22 00 	lea    0x2234b6(%rip),%rcx        # 235890 <__libirc_data_cache_size_half>
   123da:	4c 8d 0d 1f 17 00 00 	lea    0x171f(%rip),%r9        # 13b00 <__intel_mic_avx512f_memcpy+0x1740>
   123e1:	48 81 fa 80 00 00 00 	cmp    $0x80,%rdx
   123e8:	7d 13                	jge    123fd <__intel_mic_avx512f_memcpy+0x3d>
   123ea:	4c 89 f7             	mov    %r14,%rdi
   123ed:	48 03 fa             	add    %rdx,%rdi
   123f0:	49 89 f3             	mov    %rsi,%r11
   123f3:	4c 03 da             	add    %rdx,%r11
   123f6:	4d 2b 0c d1          	sub    (%r9,%rdx,8),%r9
   123fa:	41 ff e1             	jmpq   *%r9
   123fd:	4c 8d 0d fc 04 00 00 	lea    0x4fc(%rip),%r9        # 12900 <__intel_mic_avx512f_memcpy+0x540>
   12404:	4d 89 f2             	mov    %r14,%r10
   12407:	49 f7 da             	neg    %r10
   1240a:	49 83 c2 40          	add    $0x40,%r10
   1240e:	49 83 e2 3f          	and    $0x3f,%r10
   12412:	74 1c                	je     12430 <__intel_mic_avx512f_memcpy+0x70>
   12414:	49 2b d2             	sub    %r10,%rdx
   12417:	4c 89 f7             	mov    %r14,%rdi
   1241a:	49 03 fa             	add    %r10,%rdi
   1241d:	49 89 f3             	mov    %rsi,%r11
   12420:	4d 03 da             	add    %r10,%r11
   12423:	4f 2b 0c d1          	sub    (%r9,%r10,8),%r9
   12427:	41 ff e1             	jmpq   *%r9
   1242a:	4d 03 f2             	add    %r10,%r14
   1242d:	49 03 f2             	add    %r10,%rsi
   12430:	48 81 fa 00 02 00 00 	cmp    $0x200,%rdx
   12437:	0f 8c 01 03 00 00    	jl     1273e <__intel_mic_avx512f_memcpy+0x37e>
   1243d:	45 8b 08             	mov    (%r8),%r9d
   12440:	49 3b d1             	cmp    %r9,%rdx
   12443:	0f 83 cd 00 00 00    	jae    12516 <__intel_mic_avx512f_memcpy+0x156>
   12449:	62 f1 fe 48 6f 06    	vmovdqu64 (%rsi),%zmm0
   1244f:	0f 18 96 00 06 00 00 	prefetcht1 0x600(%rsi)
   12456:	62 d1 7c 48 29 06    	vmovaps %zmm0,(%r14)
   1245c:	62 f1 fe 48 6f 46 01 	vmovdqu64 0x40(%rsi),%zmm0
   12463:	0f 18 96 40 06 00 00 	prefetcht1 0x640(%rsi)
   1246a:	62 d1 7c 48 29 46 01 	vmovaps %zmm0,0x40(%r14)
   12471:	62 f1 fe 48 6f 46 02 	vmovdqu64 0x80(%rsi),%zmm0
   12478:	0f 18 96 80 06 00 00 	prefetcht1 0x680(%rsi)
   1247f:	62 d1 7c 48 29 46 02 	vmovaps %zmm0,0x80(%r14)
   12486:	62 f1 fe 48 6f 46 03 	vmovdqu64 0xc0(%rsi),%zmm0
   1248d:	0f 18 96 c0 06 00 00 	prefetcht1 0x6c0(%rsi)
   12494:	62 d1 7c 48 29 46 03 	vmovaps %zmm0,0xc0(%r14)
   1249b:	4d 8d b6 00 02 00 00 	lea    0x200(%r14),%r14
   124a2:	48 8d b6 00 02 00 00 	lea    0x200(%rsi),%rsi
   124a9:	48 81 ea 00 02 00 00 	sub    $0x200,%rdx
   124b0:	62 f1 fe 48 6f 46 fc 	vmovdqu64 -0x100(%rsi),%zmm0
   124b7:	0f 18 96 00 05 00 00 	prefetcht1 0x500(%rsi)
   124be:	62 d1 7c 48 29 46 fc 	vmovaps %zmm0,-0x100(%r14)
   124c5:	62 f1 fe 48 6f 46 fd 	vmovdqu64 -0xc0(%rsi),%zmm0
   124cc:	0f 18 96 40 05 00 00 	prefetcht1 0x540(%rsi)
   124d3:	62 d1 7c 48 29 46 fd 	vmovaps %zmm0,-0xc0(%r14)
   124da:	62 f1 fe 48 6f 46 fe 	vmovdqu64 -0x80(%rsi),%zmm0
   124e1:	0f 18 96 80 05 00 00 	prefetcht1 0x580(%rsi)
   124e8:	62 d1 7c 48 29 46 fe 	vmovaps %zmm0,-0x80(%r14)
   124ef:	62 f1 fe 48 6f 46 ff 	vmovdqu64 -0x40(%rsi),%zmm0
   124f6:	0f 18 96 c0 05 00 00 	prefetcht1 0x5c0(%rsi)
   124fd:	62 d1 7c 48 29 46 ff 	vmovaps %zmm0,-0x40(%r14)
   12504:	48 81 fa 00 02 00 00 	cmp    $0x200,%rdx
   1250b:	0f 8d 38 ff ff ff    	jge    12449 <__intel_mic_avx512f_memcpy+0x89>
   12511:	e9 28 02 00 00       	jmpq   1273e <__intel_mic_avx512f_memcpy+0x37e>
   12516:	0f 18 16             	prefetcht1 (%rsi)
   12519:	0f 18 56 40          	prefetcht1 0x40(%rsi)
   1251d:	0f 18 96 80 00 00 00 	prefetcht1 0x80(%rsi)
   12524:	0f 18 96 c0 00 00 00 	prefetcht1 0xc0(%rsi)
   1252b:	0f 18 96 00 01 00 00 	prefetcht1 0x100(%rsi)
   12532:	0f 18 96 40 01 00 00 	prefetcht1 0x140(%rsi)
   12539:	0f 18 96 80 01 00 00 	prefetcht1 0x180(%rsi)
   12540:	0f 18 96 c0 01 00 00 	prefetcht1 0x1c0(%rsi)
   12547:	0f 18 96 00 02 00 00 	prefetcht1 0x200(%rsi)
   1254e:	0f 18 96 40 02 00 00 	prefetcht1 0x240(%rsi)
   12555:	0f 18 96 80 02 00 00 	prefetcht1 0x280(%rsi)
   1255c:	0f 18 96 c0 02 00 00 	prefetcht1 0x2c0(%rsi)
   12563:	0f 18 96 00 03 00 00 	prefetcht1 0x300(%rsi)
   1256a:	0f 18 96 40 03 00 00 	prefetcht1 0x340(%rsi)
   12571:	0f 18 96 80 03 00 00 	prefetcht1 0x380(%rsi)
   12578:	0f 18 96 c0 03 00 00 	prefetcht1 0x3c0(%rsi)
   1257f:	0f 18 96 00 04 00 00 	prefetcht1 0x400(%rsi)
   12586:	0f 18 96 40 04 00 00 	prefetcht1 0x440(%rsi)
   1258d:	0f 18 96 80 04 00 00 	prefetcht1 0x480(%rsi)
   12594:	0f 18 96 c0 04 00 00 	prefetcht1 0x4c0(%rsi)
   1259b:	0f 18 96 00 05 00 00 	prefetcht1 0x500(%rsi)
   125a2:	0f 18 96 40 05 00 00 	prefetcht1 0x540(%rsi)
   125a9:	0f 18 96 80 05 00 00 	prefetcht1 0x580(%rsi)
   125b0:	0f 18 96 c0 05 00 00 	prefetcht1 0x5c0(%rsi)
   125b7:	62 f1 fe 48 6f 06    	vmovdqu64 (%rsi),%zmm0
   125bd:	0f 18 96 00 06 00 00 	prefetcht1 0x600(%rsi)
   125c4:	62 d1 7d 48 e7 06    	vmovntdq %zmm0,(%r14)
   125ca:	62 f1 fe 48 6f 46 01 	vmovdqu64 0x40(%rsi),%zmm0
   125d1:	0f 18 96 40 06 00 00 	prefetcht1 0x640(%rsi)
   125d8:	62 d1 7d 48 e7 46 01 	vmovntdq %zmm0,0x40(%r14)
   125df:	62 f1 fe 48 6f 46 02 	vmovdqu64 0x80(%rsi),%zmm0
   125e6:	0f 18 96 80 06 00 00 	prefetcht1 0x680(%rsi)
   125ed:	62 d1 7d 48 e7 46 02 	vmovntdq %zmm0,0x80(%r14)
   125f4:	62 f1 fe 48 6f 46 03 	vmovdqu64 0xc0(%rsi),%zmm0
   125fb:	0f 18 96 c0 06 00 00 	prefetcht1 0x6c0(%rsi)
   12602:	62 d1 7d 48 e7 46 03 	vmovntdq %zmm0,0xc0(%r14)
   12609:	4d 8d b6 00 02 00 00 	lea    0x200(%r14),%r14
   12610:	48 8d b6 00 02 00 00 	lea    0x200(%rsi),%rsi
   12617:	48 81 ea 00 02 00 00 	sub    $0x200,%rdx
   1261e:	62 f1 fe 48 6f 46 fc 	vmovdqu64 -0x100(%rsi),%zmm0
   12625:	0f 18 96 00 05 00 00 	prefetcht1 0x500(%rsi)
   1262c:	62 d1 7d 48 e7 46 fc 	vmovntdq %zmm0,-0x100(%r14)
   12633:	62 f1 fe 48 6f 46 fd 	vmovdqu64 -0xc0(%rsi),%zmm0
   1263a:	0f 18 96 40 05 00 00 	prefetcht1 0x540(%rsi)
   12641:	62 d1 7d 48 e7 46 fd 	vmovntdq %zmm0,-0xc0(%r14)
   12648:	62 f1 fe 48 6f 46 fe 	vmovdqu64 -0x80(%rsi),%zmm0
   1264f:	0f 18 96 80 05 00 00 	prefetcht1 0x580(%rsi)
   12656:	62 d1 7d 48 e7 46 fe 	vmovntdq %zmm0,-0x80(%r14)
   1265d:	62 f1 fe 48 6f 46 ff 	vmovdqu64 -0x40(%rsi),%zmm0
   12664:	0f 18 96 c0 05 00 00 	prefetcht1 0x5c0(%rsi)
   1266b:	62 d1 7d 48 e7 46 ff 	vmovntdq %zmm0,-0x40(%r14)
   12672:	48 81 fa 00 02 00 00 	cmp    $0x200,%rdx
   12679:	0f 8d 38 ff ff ff    	jge    125b7 <__intel_mic_avx512f_memcpy+0x1f7>
   1267f:	0f ae f8             	sfence 
   12682:	e9 b7 00 00 00       	jmpq   1273e <__intel_mic_avx512f_memcpy+0x37e>
   12687:	44 8a 0e             	mov    (%rsi),%r9b
   1268a:	45 88 0e             	mov    %r9b,(%r14)
   1268d:	e9 98 fd ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   12692:	66 44 8b 0e          	mov    (%rsi),%r9w
   12696:	66 45 89 0e          	mov    %r9w,(%r14)
   1269a:	e9 8b fd ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   1269f:	66 44 8b 0e          	mov    (%rsi),%r9w
   126a3:	66 45 89 0e          	mov    %r9w,(%r14)
   126a7:	44 8a 4e 02          	mov    0x2(%rsi),%r9b
   126ab:	45 88 4e 02          	mov    %r9b,0x2(%r14)
   126af:	e9 76 fd ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   126b4:	44 8b 0e             	mov    (%rsi),%r9d
   126b7:	45 89 0e             	mov    %r9d,(%r14)
   126ba:	e9 6b fd ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   126bf:	44 8b 0e             	mov    (%rsi),%r9d
   126c2:	45 89 0e             	mov    %r9d,(%r14)
   126c5:	45 8b 4b fc          	mov    -0x4(%r11),%r9d
   126c9:	44 89 4f fc          	mov    %r9d,-0x4(%rdi)
   126cd:	e9 58 fd ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   126d2:	4c 8b 0e             	mov    (%rsi),%r9
   126d5:	4d 89 0e             	mov    %r9,(%r14)
   126d8:	e9 4d fd ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   126dd:	4c 8b 0e             	mov    (%rsi),%r9
   126e0:	4d 89 0e             	mov    %r9,(%r14)
   126e3:	4d 8b 4b f8          	mov    -0x8(%r11),%r9
   126e7:	4c 89 4f f8          	mov    %r9,-0x8(%rdi)
   126eb:	e9 3a fd ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   126f0:	c5 f8 10 06          	vmovups (%rsi),%xmm0
   126f4:	c4 c1 78 11 06       	vmovups %xmm0,(%r14)
   126f9:	e9 2c fd ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   126fe:	c5 f8 10 06          	vmovups (%rsi),%xmm0
   12702:	c4 c1 78 11 06       	vmovups %xmm0,(%r14)
   12707:	c4 c1 78 10 43 f0    	vmovups -0x10(%r11),%xmm0
   1270d:	c5 f8 11 47 f0       	vmovups %xmm0,-0x10(%rdi)
   12712:	e9 13 fd ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   12717:	c5 fc 10 06          	vmovups (%rsi),%ymm0
   1271b:	c4 c1 7c 11 06       	vmovups %ymm0,(%r14)
   12720:	e9 05 fd ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   12725:	c5 fc 10 06          	vmovups (%rsi),%ymm0
   12729:	c4 c1 7c 11 06       	vmovups %ymm0,(%r14)
   1272e:	c4 c1 7c 10 43 e0    	vmovups -0x20(%r11),%ymm0
   12734:	c5 fc 11 47 e0       	vmovups %ymm0,-0x20(%rdi)
   12739:	e9 ec fc ff ff       	jmpq   1242a <__intel_mic_avx512f_memcpy+0x6a>
   1273e:	4c 89 f7             	mov    %r14,%rdi
   12741:	48 03 fa             	add    %rdx,%rdi
   12744:	49 89 fa             	mov    %rdi,%r10
   12747:	4c 03 f2             	add    %rdx,%r14
   1274a:	49 83 e6 c0          	and    $0xffffffffffffffc0,%r14
   1274e:	49 89 f3             	mov    %rsi,%r11
   12751:	4c 03 da             	add    %rdx,%r11
   12754:	4d 2b d6             	sub    %r14,%r10
   12757:	4c 89 de             	mov    %r11,%rsi
   1275a:	49 2b f2             	sub    %r10,%rsi
   1275d:	4c 8d 0d 9c 03 00 00 	lea    0x39c(%rip),%r9        # 12b00 <__intel_mic_avx512f_memcpy+0x740>
   12764:	4d 2b 0c d1          	sub    (%r9,%rdx,8),%r9
   12768:	41 ff e1             	jmpq   *%r9
   1276b:	62 f1 7c 48 10 46 f9 	vmovups -0x1c0(%rsi),%zmm0
   12772:	62 d1 7c 48 29 46 f9 	vmovaps %zmm0,-0x1c0(%r14)
   12779:	62 f1 7c 48 10 46 fa 	vmovups -0x180(%rsi),%zmm0
   12780:	62 d1 7c 48 29 46 fa 	vmovaps %zmm0,-0x180(%r14)
   12787:	62 f1 7c 48 10 46 fb 	vmovups -0x140(%rsi),%zmm0
   1278e:	62 d1 7c 48 29 46 fb 	vmovaps %zmm0,-0x140(%r14)
   12795:	62 f1 7c 48 10 46 fc 	vmovups -0x100(%rsi),%zmm0
   1279c:	62 d1 7c 48 29 46 fc 	vmovaps %zmm0,-0x100(%r14)
   127a3:	62 f1 7c 48 10 46 fd 	vmovups -0xc0(%rsi),%zmm0
   127aa:	62 d1 7c 48 29 46 fd 	vmovaps %zmm0,-0xc0(%r14)
   127b1:	62 f1 7c 48 10 46 fe 	vmovups -0x80(%rsi),%zmm0
   127b8:	62 d1 7c 48 29 46 fe 	vmovaps %zmm0,-0x80(%r14)
   127bf:	62 f1 7c 48 10 46 ff 	vmovups -0x40(%rsi),%zmm0
   127c6:	62 d1 7c 48 29 46 ff 	vmovaps %zmm0,-0x40(%r14)
   127cd:	4c 8d 0d 2c 03 00 00 	lea    0x32c(%rip),%r9        # 12b00 <__intel_mic_avx512f_memcpy+0x740>
   127d4:	4f 2b 0c d1          	sub    (%r9,%r10,8),%r9
   127d8:	41 ff e1             	jmpq   *%r9
   127db:	44 8a 0e             	mov    (%rsi),%r9b
   127de:	45 88 0e             	mov    %r9b,(%r14)
   127e1:	e9 1a 17 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   127e6:	e9 15 17 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   127eb:	66 44 8b 0e          	mov    (%rsi),%r9w
   127ef:	66 45 89 0e          	mov    %r9w,(%r14)
   127f3:	e9 08 17 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   127f8:	66 44 8b 0e          	mov    (%rsi),%r9w
   127fc:	66 45 89 0e          	mov    %r9w,(%r14)
   12800:	44 8a 4e 02          	mov    0x2(%rsi),%r9b
   12804:	45 88 4e 02          	mov    %r9b,0x2(%r14)
   12808:	e9 f3 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   1280d:	44 8b 0e             	mov    (%rsi),%r9d
   12810:	45 89 0e             	mov    %r9d,(%r14)
   12813:	e9 e8 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   12818:	44 8b 0e             	mov    (%rsi),%r9d
   1281b:	45 89 0e             	mov    %r9d,(%r14)
   1281e:	45 8b 4b fc          	mov    -0x4(%r11),%r9d
   12822:	44 89 4f fc          	mov    %r9d,-0x4(%rdi)
   12826:	e9 d5 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   1282b:	4c 8b 0e             	mov    (%rsi),%r9
   1282e:	4d 89 0e             	mov    %r9,(%r14)
   12831:	e9 ca 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   12836:	4c 8b 0e             	mov    (%rsi),%r9
   12839:	4d 89 0e             	mov    %r9,(%r14)
   1283c:	4d 8b 4b f8          	mov    -0x8(%r11),%r9
   12840:	4c 89 4f f8          	mov    %r9,-0x8(%rdi)
   12844:	e9 b7 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   12849:	c5 f8 10 06          	vmovups (%rsi),%xmm0
   1284d:	c4 c1 78 11 06       	vmovups %xmm0,(%r14)
   12852:	e9 a9 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   12857:	c5 f8 10 06          	vmovups (%rsi),%xmm0
   1285b:	c4 c1 78 11 06       	vmovups %xmm0,(%r14)
   12860:	c4 c1 78 10 43 f0    	vmovups -0x10(%r11),%xmm0
   12866:	c5 f8 11 47 f0       	vmovups %xmm0,-0x10(%rdi)
   1286b:	e9 90 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   12870:	c5 fc 10 06          	vmovups (%rsi),%ymm0
   12874:	c4 c1 7c 11 06       	vmovups %ymm0,(%r14)
   12879:	e9 82 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   1287e:	c5 fc 10 06          	vmovups (%rsi),%ymm0
   12882:	c4 c1 7c 11 06       	vmovups %ymm0,(%r14)
   12887:	c4 c1 7c 10 43 e0    	vmovups -0x20(%r11),%ymm0
   1288d:	c5 fc 11 47 e0       	vmovups %ymm0,-0x20(%rdi)
   12892:	e9 69 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   12897:	62 f1 7c 48 10 06    	vmovups (%rsi),%zmm0
   1289d:	62 d1 7c 48 11 06    	vmovups %zmm0,(%r14)
   128a3:	e9 58 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   128a8:	62 f1 7c 48 10 06    	vmovups (%rsi),%zmm0
   128ae:	62 d1 7c 48 11 06    	vmovups %zmm0,(%r14)
   128b4:	62 d1 7c 48 10 43 ff 	vmovups -0x40(%r11),%zmm0
   128bb:	62 f1 7c 48 11 47 ff 	vmovups %zmm0,-0x40(%rdi)
   128c2:	e9 39 16 00 00       	jmpq   13f00 <__intel_mic_avx512f_memcpy+0x1b40>
   128c7:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   128ce:	00 
   128cf:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   128d6:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   128dd:	00 
   128de:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   128e5:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   128ec:	00 
   128ed:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   128f4:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   128f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   12900:	73 02                	jae    12904 <__intel_mic_avx512f_memcpy+0x544>
   12902:	00 00                	add    %al,(%rax)
   12904:	00 00                	add    %al,(%rax)
   12906:	00 00                	add    %al,(%rax)
   12908:	79 02                	jns    1290c <__intel_mic_avx512f_memcpy+0x54c>
   1290a:	00 00                	add    %al,(%rax)
   1290c:	00 00                	add    %al,(%rax)
   1290e:	00 00                	add    %al,(%rax)
   12910:	6e                   	outsb  %ds:(%rsi),(%dx)
   12911:	02 00                	add    (%rax),%al
   12913:	00 00                	add    %al,(%rax)
   12915:	00 00                	add    %al,(%rax)
   12917:	00 61 02             	add    %ah,0x2(%rcx)
   1291a:	00 00                	add    %al,(%rax)
   1291c:	00 00                	add    %al,(%rax)
   1291e:	00 00                	add    %al,(%rax)
   12920:	4c 02 00             	rex.WR add (%rax),%r8b
   12923:	00 00                	add    %al,(%rax)
   12925:	00 00                	add    %al,(%rax)
   12927:	00 41 02             	add    %al,0x2(%rcx)
   1292a:	00 00                	add    %al,(%rax)
   1292c:	00 00                	add    %al,(%rax)
   1292e:	00 00                	add    %al,(%rax)
   12930:	41 02 00             	add    (%r8),%al
   12933:	00 00                	add    %al,(%rax)
   12935:	00 00                	add    %al,(%rax)
   12937:	00 41 02             	add    %al,0x2(%rcx)
   1293a:	00 00                	add    %al,(%rax)
   1293c:	00 00                	add    %al,(%rax)
   1293e:	00 00                	add    %al,(%rax)
   12940:	2e 02 00             	add    %cs:(%rax),%al
   12943:	00 00                	add    %al,(%rax)
   12945:	00 00                	add    %al,(%rax)
   12947:	00 23                	add    %ah,(%rbx)
   12949:	02 00                	add    (%rax),%al
   1294b:	00 00                	add    %al,(%rax)
   1294d:	00 00                	add    %al,(%rax)
   1294f:	00 23                	add    %ah,(%rbx)
   12951:	02 00                	add    (%rax),%al
   12953:	00 00                	add    %al,(%rax)
   12955:	00 00                	add    %al,(%rax)
   12957:	00 23                	add    %ah,(%rbx)
   12959:	02 00                	add    (%rax),%al
   1295b:	00 00                	add    %al,(%rax)
   1295d:	00 00                	add    %al,(%rax)
   1295f:	00 23                	add    %ah,(%rbx)
   12961:	02 00                	add    (%rax),%al
   12963:	00 00                	add    %al,(%rax)
   12965:	00 00                	add    %al,(%rax)
   12967:	00 23                	add    %ah,(%rbx)
   12969:	02 00                	add    (%rax),%al
   1296b:	00 00                	add    %al,(%rax)
   1296d:	00 00                	add    %al,(%rax)
   1296f:	00 23                	add    %ah,(%rbx)
   12971:	02 00                	add    (%rax),%al
   12973:	00 00                	add    %al,(%rax)
   12975:	00 00                	add    %al,(%rax)
   12977:	00 23                	add    %ah,(%rbx)
   12979:	02 00                	add    (%rax),%al
   1297b:	00 00                	add    %al,(%rax)
   1297d:	00 00                	add    %al,(%rax)
   1297f:	00 10                	add    %dl,(%rax)
   12981:	02 00                	add    (%rax),%al
   12983:	00 00                	add    %al,(%rax)
   12985:	00 00                	add    %al,(%rax)
   12987:	00 02                	add    %al,(%rdx)
   12989:	02 00                	add    (%rax),%al
   1298b:	00 00                	add    %al,(%rax)
   1298d:	00 00                	add    %al,(%rax)
   1298f:	00 02                	add    %al,(%rdx)
   12991:	02 00                	add    (%rax),%al
   12993:	00 00                	add    %al,(%rax)
   12995:	00 00                	add    %al,(%rax)
   12997:	00 02                	add    %al,(%rdx)
   12999:	02 00                	add    (%rax),%al
   1299b:	00 00                	add    %al,(%rax)
   1299d:	00 00                	add    %al,(%rax)
   1299f:	00 02                	add    %al,(%rdx)
   129a1:	02 00                	add    (%rax),%al
   129a3:	00 00                	add    %al,(%rax)
   129a5:	00 00                	add    %al,(%rax)
   129a7:	00 02                	add    %al,(%rdx)
   129a9:	02 00                	add    (%rax),%al
   129ab:	00 00                	add    %al,(%rax)
   129ad:	00 00                	add    %al,(%rax)
   129af:	00 02                	add    %al,(%rdx)
   129b1:	02 00                	add    (%rax),%al
   129b3:	00 00                	add    %al,(%rax)
   129b5:	00 00                	add    %al,(%rax)
   129b7:	00 02                	add    %al,(%rdx)
   129b9:	02 00                	add    (%rax),%al
   129bb:	00 00                	add    %al,(%rax)
   129bd:	00 00                	add    %al,(%rax)
   129bf:	00 02                	add    %al,(%rdx)
   129c1:	02 00                	add    (%rax),%al
   129c3:	00 00                	add    %al,(%rax)
   129c5:	00 00                	add    %al,(%rax)
   129c7:	00 02                	add    %al,(%rdx)
   129c9:	02 00                	add    (%rax),%al
   129cb:	00 00                	add    %al,(%rax)
   129cd:	00 00                	add    %al,(%rax)
   129cf:	00 02                	add    %al,(%rdx)
   129d1:	02 00                	add    (%rax),%al
   129d3:	00 00                	add    %al,(%rax)
   129d5:	00 00                	add    %al,(%rax)
   129d7:	00 02                	add    %al,(%rdx)
   129d9:	02 00                	add    (%rax),%al
   129db:	00 00                	add    %al,(%rax)
   129dd:	00 00                	add    %al,(%rax)
   129df:	00 02                	add    %al,(%rdx)
   129e1:	02 00                	add    (%rax),%al
   129e3:	00 00                	add    %al,(%rax)
   129e5:	00 00                	add    %al,(%rax)
   129e7:	00 02                	add    %al,(%rdx)
   129e9:	02 00                	add    (%rax),%al
   129eb:	00 00                	add    %al,(%rax)
   129ed:	00 00                	add    %al,(%rax)
   129ef:	00 02                	add    %al,(%rdx)
   129f1:	02 00                	add    (%rax),%al
   129f3:	00 00                	add    %al,(%rax)
   129f5:	00 00                	add    %al,(%rax)
   129f7:	00 02                	add    %al,(%rdx)
   129f9:	02 00                	add    (%rax),%al
   129fb:	00 00                	add    %al,(%rax)
   129fd:	00 00                	add    %al,(%rax)
   129ff:	00 e9                	add    %ch,%cl
   12a01:	01 00                	add    %eax,(%rax)
   12a03:	00 00                	add    %al,(%rax)
   12a05:	00 00                	add    %al,(%rax)
   12a07:	00 db                	add    %bl,%bl
   12a09:	01 00                	add    %eax,(%rax)
   12a0b:	00 00                	add    %al,(%rax)
   12a0d:	00 00                	add    %al,(%rax)
   12a0f:	00 db                	add    %bl,%bl
   12a11:	01 00                	add    %eax,(%rax)
   12a13:	00 00                	add    %al,(%rax)
   12a15:	00 00                	add    %al,(%rax)
   12a17:	00 db                	add    %bl,%bl
   12a19:	01 00                	add    %eax,(%rax)
   12a1b:	00 00                	add    %al,(%rax)
   12a1d:	00 00                	add    %al,(%rax)
   12a1f:	00 db                	add    %bl,%bl
   12a21:	01 00                	add    %eax,(%rax)
   12a23:	00 00                	add    %al,(%rax)
   12a25:	00 00                	add    %al,(%rax)
   12a27:	00 db                	add    %bl,%bl
   12a29:	01 00                	add    %eax,(%rax)
   12a2b:	00 00                	add    %al,(%rax)
   12a2d:	00 00                	add    %al,(%rax)
   12a2f:	00 db                	add    %bl,%bl
   12a31:	01 00                	add    %eax,(%rax)
   12a33:	00 00                	add    %al,(%rax)
   12a35:	00 00                	add    %al,(%rax)
   12a37:	00 db                	add    %bl,%bl
   12a39:	01 00                	add    %eax,(%rax)
   12a3b:	00 00                	add    %al,(%rax)
   12a3d:	00 00                	add    %al,(%rax)
   12a3f:	00 db                	add    %bl,%bl
   12a41:	01 00                	add    %eax,(%rax)
   12a43:	00 00                	add    %al,(%rax)
   12a45:	00 00                	add    %al,(%rax)
   12a47:	00 db                	add    %bl,%bl
   12a49:	01 00                	add    %eax,(%rax)
   12a4b:	00 00                	add    %al,(%rax)
   12a4d:	00 00                	add    %al,(%rax)
   12a4f:	00 db                	add    %bl,%bl
   12a51:	01 00                	add    %eax,(%rax)
   12a53:	00 00                	add    %al,(%rax)
   12a55:	00 00                	add    %al,(%rax)
   12a57:	00 db                	add    %bl,%bl
   12a59:	01 00                	add    %eax,(%rax)
   12a5b:	00 00                	add    %al,(%rax)
   12a5d:	00 00                	add    %al,(%rax)
   12a5f:	00 db                	add    %bl,%bl
   12a61:	01 00                	add    %eax,(%rax)
   12a63:	00 00                	add    %al,(%rax)
   12a65:	00 00                	add    %al,(%rax)
   12a67:	00 db                	add    %bl,%bl
   12a69:	01 00                	add    %eax,(%rax)
   12a6b:	00 00                	add    %al,(%rax)
   12a6d:	00 00                	add    %al,(%rax)
   12a6f:	00 db                	add    %bl,%bl
   12a71:	01 00                	add    %eax,(%rax)
   12a73:	00 00                	add    %al,(%rax)
   12a75:	00 00                	add    %al,(%rax)
   12a77:	00 db                	add    %bl,%bl
   12a79:	01 00                	add    %eax,(%rax)
   12a7b:	00 00                	add    %al,(%rax)
   12a7d:	00 00                	add    %al,(%rax)
   12a7f:	00 db                	add    %bl,%bl
   12a81:	01 00                	add    %eax,(%rax)
   12a83:	00 00                	add    %al,(%rax)
   12a85:	00 00                	add    %al,(%rax)
   12a87:	00 db                	add    %bl,%bl
   12a89:	01 00                	add    %eax,(%rax)
   12a8b:	00 00                	add    %al,(%rax)
   12a8d:	00 00                	add    %al,(%rax)
   12a8f:	00 db                	add    %bl,%bl
   12a91:	01 00                	add    %eax,(%rax)
   12a93:	00 00                	add    %al,(%rax)
   12a95:	00 00                	add    %al,(%rax)
   12a97:	00 db                	add    %bl,%bl
   12a99:	01 00                	add    %eax,(%rax)
   12a9b:	00 00                	add    %al,(%rax)
   12a9d:	00 00                	add    %al,(%rax)
   12a9f:	00 db                	add    %bl,%bl
   12aa1:	01 00                	add    %eax,(%rax)
   12aa3:	00 00                	add    %al,(%rax)
   12aa5:	00 00                	add    %al,(%rax)
   12aa7:	00 db                	add    %bl,%bl
   12aa9:	01 00                	add    %eax,(%rax)
   12aab:	00 00                	add    %al,(%rax)
   12aad:	00 00                	add    %al,(%rax)
   12aaf:	00 db                	add    %bl,%bl
   12ab1:	01 00                	add    %eax,(%rax)
   12ab3:	00 00                	add    %al,(%rax)
   12ab5:	00 00                	add    %al,(%rax)
   12ab7:	00 db                	add    %bl,%bl
   12ab9:	01 00                	add    %eax,(%rax)
   12abb:	00 00                	add    %al,(%rax)
   12abd:	00 00                	add    %al,(%rax)
   12abf:	00 db                	add    %bl,%bl
   12ac1:	01 00                	add    %eax,(%rax)
   12ac3:	00 00                	add    %al,(%rax)
   12ac5:	00 00                	add    %al,(%rax)
   12ac7:	00 db                	add    %bl,%bl
   12ac9:	01 00                	add    %eax,(%rax)
   12acb:	00 00                	add    %al,(%rax)
   12acd:	00 00                	add    %al,(%rax)
   12acf:	00 db                	add    %bl,%bl
   12ad1:	01 00                	add    %eax,(%rax)
   12ad3:	00 00                	add    %al,(%rax)
   12ad5:	00 00                	add    %al,(%rax)
   12ad7:	00 db                	add    %bl,%bl
   12ad9:	01 00                	add    %eax,(%rax)
   12adb:	00 00                	add    %al,(%rax)
   12add:	00 00                	add    %al,(%rax)
   12adf:	00 db                	add    %bl,%bl
   12ae1:	01 00                	add    %eax,(%rax)
   12ae3:	00 00                	add    %al,(%rax)
   12ae5:	00 00                	add    %al,(%rax)
   12ae7:	00 db                	add    %bl,%bl
   12ae9:	01 00                	add    %eax,(%rax)
   12aeb:	00 00                	add    %al,(%rax)
   12aed:	00 00                	add    %al,(%rax)
   12aef:	00 db                	add    %bl,%bl
   12af1:	01 00                	add    %eax,(%rax)
   12af3:	00 00                	add    %al,(%rax)
   12af5:	00 00                	add    %al,(%rax)
   12af7:	00 db                	add    %bl,%bl
   12af9:	01 00                	add    %eax,(%rax)
   12afb:	00 00                	add    %al,(%rax)
   12afd:	00 00                	add    %al,(%rax)
   12aff:	00 1a                	add    %bl,(%rdx)
   12b01:	03 00                	add    (%rax),%eax
   12b03:	00 00                	add    %al,(%rax)
   12b05:	00 00                	add    %al,(%rax)
   12b07:	00 25 03 00 00 00    	add    %ah,0x3(%rip)        # 12b10 <__intel_mic_avx512f_memcpy+0x750>
   12b0d:	00 00                	add    %al,(%rax)
   12b0f:	00 15 03 00 00 00    	add    %dl,0x3(%rip)        # 12b18 <__intel_mic_avx512f_memcpy+0x758>
   12b15:	00 00                	add    %al,(%rax)
   12b17:	00 08                	add    %cl,(%rax)
   12b19:	03 00                	add    (%rax),%eax
   12b1b:	00 00                	add    %al,(%rax)
   12b1d:	00 00                	add    %al,(%rax)
   12b1f:	00 f3                	add    %dh,%bl
   12b21:	02 00                	add    (%rax),%al
   12b23:	00 00                	add    %al,(%rax)
   12b25:	00 00                	add    %al,(%rax)
   12b27:	00 e8                	add    %ch,%al
   12b29:	02 00                	add    (%rax),%al
   12b2b:	00 00                	add    %al,(%rax)
   12b2d:	00 00                	add    %al,(%rax)
   12b2f:	00 e8                	add    %ch,%al
   12b31:	02 00                	add    (%rax),%al
   12b33:	00 00                	add    %al,(%rax)
   12b35:	00 00                	add    %al,(%rax)
   12b37:	00 e8                	add    %ch,%al
   12b39:	02 00                	add    (%rax),%al
   12b3b:	00 00                	add    %al,(%rax)
   12b3d:	00 00                	add    %al,(%rax)
   12b3f:	00 d5                	add    %dl,%ch
   12b41:	02 00                	add    (%rax),%al
   12b43:	00 00                	add    %al,(%rax)
   12b45:	00 00                	add    %al,(%rax)
   12b47:	00 ca                	add    %cl,%dl
   12b49:	02 00                	add    (%rax),%al
   12b4b:	00 00                	add    %al,(%rax)
   12b4d:	00 00                	add    %al,(%rax)
   12b4f:	00 ca                	add    %cl,%dl
   12b51:	02 00                	add    (%rax),%al
   12b53:	00 00                	add    %al,(%rax)
   12b55:	00 00                	add    %al,(%rax)
   12b57:	00 ca                	add    %cl,%dl
   12b59:	02 00                	add    (%rax),%al
   12b5b:	00 00                	add    %al,(%rax)
   12b5d:	00 00                	add    %al,(%rax)
   12b5f:	00 ca                	add    %cl,%dl
   12b61:	02 00                	add    (%rax),%al
   12b63:	00 00                	add    %al,(%rax)
   12b65:	00 00                	add    %al,(%rax)
   12b67:	00 ca                	add    %cl,%dl
   12b69:	02 00                	add    (%rax),%al
   12b6b:	00 00                	add    %al,(%rax)
   12b6d:	00 00                	add    %al,(%rax)
   12b6f:	00 ca                	add    %cl,%dl
   12b71:	02 00                	add    (%rax),%al
   12b73:	00 00                	add    %al,(%rax)
   12b75:	00 00                	add    %al,(%rax)
   12b77:	00 ca                	add    %cl,%dl
   12b79:	02 00                	add    (%rax),%al
   12b7b:	00 00                	add    %al,(%rax)
   12b7d:	00 00                	add    %al,(%rax)
   12b7f:	00 b7 02 00 00 00    	add    %dh,0x2(%rdi)
   12b85:	00 00                	add    %al,(%rax)
   12b87:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12b8d:	00 00                	add    %al,(%rax)
   12b8f:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12b95:	00 00                	add    %al,(%rax)
   12b97:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12b9d:	00 00                	add    %al,(%rax)
   12b9f:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12ba5:	00 00                	add    %al,(%rax)
   12ba7:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12bad:	00 00                	add    %al,(%rax)
   12baf:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12bb5:	00 00                	add    %al,(%rax)
   12bb7:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12bbd:	00 00                	add    %al,(%rax)
   12bbf:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12bc5:	00 00                	add    %al,(%rax)
   12bc7:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12bcd:	00 00                	add    %al,(%rax)
   12bcf:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12bd5:	00 00                	add    %al,(%rax)
   12bd7:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12bdd:	00 00                	add    %al,(%rax)
   12bdf:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12be5:	00 00                	add    %al,(%rax)
   12be7:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12bed:	00 00                	add    %al,(%rax)
   12bef:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12bf5:	00 00                	add    %al,(%rax)
   12bf7:	00 a9 02 00 00 00    	add    %ch,0x2(%rcx)
   12bfd:	00 00                	add    %al,(%rax)
   12bff:	00 90 02 00 00 00    	add    %dl,0x2(%rax)
   12c05:	00 00                	add    %al,(%rax)
   12c07:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c0d:	00 00                	add    %al,(%rax)
   12c0f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c15:	00 00                	add    %al,(%rax)
   12c17:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c1d:	00 00                	add    %al,(%rax)
   12c1f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c25:	00 00                	add    %al,(%rax)
   12c27:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c2d:	00 00                	add    %al,(%rax)
   12c2f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c35:	00 00                	add    %al,(%rax)
   12c37:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c3d:	00 00                	add    %al,(%rax)
   12c3f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c45:	00 00                	add    %al,(%rax)
   12c47:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c4d:	00 00                	add    %al,(%rax)
   12c4f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c55:	00 00                	add    %al,(%rax)
   12c57:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c5d:	00 00                	add    %al,(%rax)
   12c5f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c65:	00 00                	add    %al,(%rax)
   12c67:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c6d:	00 00                	add    %al,(%rax)
   12c6f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c75:	00 00                	add    %al,(%rax)
   12c77:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c7d:	00 00                	add    %al,(%rax)
   12c7f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c85:	00 00                	add    %al,(%rax)
   12c87:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c8d:	00 00                	add    %al,(%rax)
   12c8f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c95:	00 00                	add    %al,(%rax)
   12c97:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12c9d:	00 00                	add    %al,(%rax)
   12c9f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12ca5:	00 00                	add    %al,(%rax)
   12ca7:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12cad:	00 00                	add    %al,(%rax)
   12caf:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12cb5:	00 00                	add    %al,(%rax)
   12cb7:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12cbd:	00 00                	add    %al,(%rax)
   12cbf:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12cc5:	00 00                	add    %al,(%rax)
   12cc7:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12ccd:	00 00                	add    %al,(%rax)
   12ccf:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12cd5:	00 00                	add    %al,(%rax)
   12cd7:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12cdd:	00 00                	add    %al,(%rax)
   12cdf:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12ce5:	00 00                	add    %al,(%rax)
   12ce7:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12ced:	00 00                	add    %al,(%rax)
   12cef:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12cf5:	00 00                	add    %al,(%rax)
   12cf7:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   12cfd:	00 00                	add    %al,(%rax)
   12cff:	00 41 03             	add    %al,0x3(%rcx)
   12d02:	00 00                	add    %al,(%rax)
   12d04:	00 00                	add    %al,(%rax)
   12d06:	00 00                	add    %al,(%rax)
   12d08:	41 03 00             	add    (%r8),%eax
   12d0b:	00 00                	add    %al,(%rax)
   12d0d:	00 00                	add    %al,(%rax)
   12d0f:	00 41 03             	add    %al,0x3(%rcx)
   12d12:	00 00                	add    %al,(%rax)
   12d14:	00 00                	add    %al,(%rax)
   12d16:	00 00                	add    %al,(%rax)
   12d18:	41 03 00             	add    (%r8),%eax
   12d1b:	00 00                	add    %al,(%rax)
   12d1d:	00 00                	add    %al,(%rax)
   12d1f:	00 41 03             	add    %al,0x3(%rcx)
   12d22:	00 00                	add    %al,(%rax)
   12d24:	00 00                	add    %al,(%rax)
   12d26:	00 00                	add    %al,(%rax)
   12d28:	41 03 00             	add    (%r8),%eax
   12d2b:	00 00                	add    %al,(%rax)
   12d2d:	00 00                	add    %al,(%rax)
   12d2f:	00 41 03             	add    %al,0x3(%rcx)
   12d32:	00 00                	add    %al,(%rax)
   12d34:	00 00                	add    %al,(%rax)
   12d36:	00 00                	add    %al,(%rax)
   12d38:	41 03 00             	add    (%r8),%eax
   12d3b:	00 00                	add    %al,(%rax)
   12d3d:	00 00                	add    %al,(%rax)
   12d3f:	00 41 03             	add    %al,0x3(%rcx)
   12d42:	00 00                	add    %al,(%rax)
   12d44:	00 00                	add    %al,(%rax)
   12d46:	00 00                	add    %al,(%rax)
   12d48:	41 03 00             	add    (%r8),%eax
   12d4b:	00 00                	add    %al,(%rax)
   12d4d:	00 00                	add    %al,(%rax)
   12d4f:	00 41 03             	add    %al,0x3(%rcx)
   12d52:	00 00                	add    %al,(%rax)
   12d54:	00 00                	add    %al,(%rax)
   12d56:	00 00                	add    %al,(%rax)
   12d58:	41 03 00             	add    (%r8),%eax
   12d5b:	00 00                	add    %al,(%rax)
   12d5d:	00 00                	add    %al,(%rax)
   12d5f:	00 41 03             	add    %al,0x3(%rcx)
   12d62:	00 00                	add    %al,(%rax)
   12d64:	00 00                	add    %al,(%rax)
   12d66:	00 00                	add    %al,(%rax)
   12d68:	41 03 00             	add    (%r8),%eax
   12d6b:	00 00                	add    %al,(%rax)
   12d6d:	00 00                	add    %al,(%rax)
   12d6f:	00 41 03             	add    %al,0x3(%rcx)
   12d72:	00 00                	add    %al,(%rax)
   12d74:	00 00                	add    %al,(%rax)
   12d76:	00 00                	add    %al,(%rax)
   12d78:	41 03 00             	add    (%r8),%eax
   12d7b:	00 00                	add    %al,(%rax)
   12d7d:	00 00                	add    %al,(%rax)
   12d7f:	00 41 03             	add    %al,0x3(%rcx)
   12d82:	00 00                	add    %al,(%rax)
   12d84:	00 00                	add    %al,(%rax)
   12d86:	00 00                	add    %al,(%rax)
   12d88:	41 03 00             	add    (%r8),%eax
   12d8b:	00 00                	add    %al,(%rax)
   12d8d:	00 00                	add    %al,(%rax)
   12d8f:	00 41 03             	add    %al,0x3(%rcx)
   12d92:	00 00                	add    %al,(%rax)
   12d94:	00 00                	add    %al,(%rax)
   12d96:	00 00                	add    %al,(%rax)
   12d98:	41 03 00             	add    (%r8),%eax
   12d9b:	00 00                	add    %al,(%rax)
   12d9d:	00 00                	add    %al,(%rax)
   12d9f:	00 41 03             	add    %al,0x3(%rcx)
   12da2:	00 00                	add    %al,(%rax)
   12da4:	00 00                	add    %al,(%rax)
   12da6:	00 00                	add    %al,(%rax)
   12da8:	41 03 00             	add    (%r8),%eax
   12dab:	00 00                	add    %al,(%rax)
   12dad:	00 00                	add    %al,(%rax)
   12daf:	00 41 03             	add    %al,0x3(%rcx)
   12db2:	00 00                	add    %al,(%rax)
   12db4:	00 00                	add    %al,(%rax)
   12db6:	00 00                	add    %al,(%rax)
   12db8:	41 03 00             	add    (%r8),%eax
   12dbb:	00 00                	add    %al,(%rax)
   12dbd:	00 00                	add    %al,(%rax)
   12dbf:	00 41 03             	add    %al,0x3(%rcx)
   12dc2:	00 00                	add    %al,(%rax)
   12dc4:	00 00                	add    %al,(%rax)
   12dc6:	00 00                	add    %al,(%rax)
   12dc8:	41 03 00             	add    (%r8),%eax
   12dcb:	00 00                	add    %al,(%rax)
   12dcd:	00 00                	add    %al,(%rax)
   12dcf:	00 41 03             	add    %al,0x3(%rcx)
   12dd2:	00 00                	add    %al,(%rax)
   12dd4:	00 00                	add    %al,(%rax)
   12dd6:	00 00                	add    %al,(%rax)
   12dd8:	41 03 00             	add    (%r8),%eax
   12ddb:	00 00                	add    %al,(%rax)
   12ddd:	00 00                	add    %al,(%rax)
   12ddf:	00 41 03             	add    %al,0x3(%rcx)
   12de2:	00 00                	add    %al,(%rax)
   12de4:	00 00                	add    %al,(%rax)
   12de6:	00 00                	add    %al,(%rax)
   12de8:	41 03 00             	add    (%r8),%eax
   12deb:	00 00                	add    %al,(%rax)
   12ded:	00 00                	add    %al,(%rax)
   12def:	00 41 03             	add    %al,0x3(%rcx)
   12df2:	00 00                	add    %al,(%rax)
   12df4:	00 00                	add    %al,(%rax)
   12df6:	00 00                	add    %al,(%rax)
   12df8:	41 03 00             	add    (%r8),%eax
   12dfb:	00 00                	add    %al,(%rax)
   12dfd:	00 00                	add    %al,(%rax)
   12dff:	00 41 03             	add    %al,0x3(%rcx)
   12e02:	00 00                	add    %al,(%rax)
   12e04:	00 00                	add    %al,(%rax)
   12e06:	00 00                	add    %al,(%rax)
   12e08:	41 03 00             	add    (%r8),%eax
   12e0b:	00 00                	add    %al,(%rax)
   12e0d:	00 00                	add    %al,(%rax)
   12e0f:	00 41 03             	add    %al,0x3(%rcx)
   12e12:	00 00                	add    %al,(%rax)
   12e14:	00 00                	add    %al,(%rax)
   12e16:	00 00                	add    %al,(%rax)
   12e18:	41 03 00             	add    (%r8),%eax
   12e1b:	00 00                	add    %al,(%rax)
   12e1d:	00 00                	add    %al,(%rax)
   12e1f:	00 41 03             	add    %al,0x3(%rcx)
   12e22:	00 00                	add    %al,(%rax)
   12e24:	00 00                	add    %al,(%rax)
   12e26:	00 00                	add    %al,(%rax)
   12e28:	41 03 00             	add    (%r8),%eax
   12e2b:	00 00                	add    %al,(%rax)
   12e2d:	00 00                	add    %al,(%rax)
   12e2f:	00 41 03             	add    %al,0x3(%rcx)
   12e32:	00 00                	add    %al,(%rax)
   12e34:	00 00                	add    %al,(%rax)
   12e36:	00 00                	add    %al,(%rax)
   12e38:	41 03 00             	add    (%r8),%eax
   12e3b:	00 00                	add    %al,(%rax)
   12e3d:	00 00                	add    %al,(%rax)
   12e3f:	00 41 03             	add    %al,0x3(%rcx)
   12e42:	00 00                	add    %al,(%rax)
   12e44:	00 00                	add    %al,(%rax)
   12e46:	00 00                	add    %al,(%rax)
   12e48:	41 03 00             	add    (%r8),%eax
   12e4b:	00 00                	add    %al,(%rax)
   12e4d:	00 00                	add    %al,(%rax)
   12e4f:	00 41 03             	add    %al,0x3(%rcx)
   12e52:	00 00                	add    %al,(%rax)
   12e54:	00 00                	add    %al,(%rax)
   12e56:	00 00                	add    %al,(%rax)
   12e58:	41 03 00             	add    (%r8),%eax
   12e5b:	00 00                	add    %al,(%rax)
   12e5d:	00 00                	add    %al,(%rax)
   12e5f:	00 41 03             	add    %al,0x3(%rcx)
   12e62:	00 00                	add    %al,(%rax)
   12e64:	00 00                	add    %al,(%rax)
   12e66:	00 00                	add    %al,(%rax)
   12e68:	41 03 00             	add    (%r8),%eax
   12e6b:	00 00                	add    %al,(%rax)
   12e6d:	00 00                	add    %al,(%rax)
   12e6f:	00 41 03             	add    %al,0x3(%rcx)
   12e72:	00 00                	add    %al,(%rax)
   12e74:	00 00                	add    %al,(%rax)
   12e76:	00 00                	add    %al,(%rax)
   12e78:	41 03 00             	add    (%r8),%eax
   12e7b:	00 00                	add    %al,(%rax)
   12e7d:	00 00                	add    %al,(%rax)
   12e7f:	00 41 03             	add    %al,0x3(%rcx)
   12e82:	00 00                	add    %al,(%rax)
   12e84:	00 00                	add    %al,(%rax)
   12e86:	00 00                	add    %al,(%rax)
   12e88:	41 03 00             	add    (%r8),%eax
   12e8b:	00 00                	add    %al,(%rax)
   12e8d:	00 00                	add    %al,(%rax)
   12e8f:	00 41 03             	add    %al,0x3(%rcx)
   12e92:	00 00                	add    %al,(%rax)
   12e94:	00 00                	add    %al,(%rax)
   12e96:	00 00                	add    %al,(%rax)
   12e98:	41 03 00             	add    (%r8),%eax
   12e9b:	00 00                	add    %al,(%rax)
   12e9d:	00 00                	add    %al,(%rax)
   12e9f:	00 41 03             	add    %al,0x3(%rcx)
   12ea2:	00 00                	add    %al,(%rax)
   12ea4:	00 00                	add    %al,(%rax)
   12ea6:	00 00                	add    %al,(%rax)
   12ea8:	41 03 00             	add    (%r8),%eax
   12eab:	00 00                	add    %al,(%rax)
   12ead:	00 00                	add    %al,(%rax)
   12eaf:	00 41 03             	add    %al,0x3(%rcx)
   12eb2:	00 00                	add    %al,(%rax)
   12eb4:	00 00                	add    %al,(%rax)
   12eb6:	00 00                	add    %al,(%rax)
   12eb8:	41 03 00             	add    (%r8),%eax
   12ebb:	00 00                	add    %al,(%rax)
   12ebd:	00 00                	add    %al,(%rax)
   12ebf:	00 41 03             	add    %al,0x3(%rcx)
   12ec2:	00 00                	add    %al,(%rax)
   12ec4:	00 00                	add    %al,(%rax)
   12ec6:	00 00                	add    %al,(%rax)
   12ec8:	41 03 00             	add    (%r8),%eax
   12ecb:	00 00                	add    %al,(%rax)
   12ecd:	00 00                	add    %al,(%rax)
   12ecf:	00 41 03             	add    %al,0x3(%rcx)
   12ed2:	00 00                	add    %al,(%rax)
   12ed4:	00 00                	add    %al,(%rax)
   12ed6:	00 00                	add    %al,(%rax)
   12ed8:	41 03 00             	add    (%r8),%eax
   12edb:	00 00                	add    %al,(%rax)
   12edd:	00 00                	add    %al,(%rax)
   12edf:	00 41 03             	add    %al,0x3(%rcx)
   12ee2:	00 00                	add    %al,(%rax)
   12ee4:	00 00                	add    %al,(%rax)
   12ee6:	00 00                	add    %al,(%rax)
   12ee8:	41 03 00             	add    (%r8),%eax
   12eeb:	00 00                	add    %al,(%rax)
   12eed:	00 00                	add    %al,(%rax)
   12eef:	00 41 03             	add    %al,0x3(%rcx)
   12ef2:	00 00                	add    %al,(%rax)
   12ef4:	00 00                	add    %al,(%rax)
   12ef6:	00 00                	add    %al,(%rax)
   12ef8:	41 03 00             	add    (%r8),%eax
   12efb:	00 00                	add    %al,(%rax)
   12efd:	00 00                	add    %al,(%rax)
   12eff:	00 4f 03             	add    %cl,0x3(%rdi)
   12f02:	00 00                	add    %al,(%rax)
   12f04:	00 00                	add    %al,(%rax)
   12f06:	00 00                	add    %al,(%rax)
   12f08:	4f 03 00             	rex.WRXB add (%r8),%r8
   12f0b:	00 00                	add    %al,(%rax)
   12f0d:	00 00                	add    %al,(%rax)
   12f0f:	00 4f 03             	add    %cl,0x3(%rdi)
   12f12:	00 00                	add    %al,(%rax)
   12f14:	00 00                	add    %al,(%rax)
   12f16:	00 00                	add    %al,(%rax)
   12f18:	4f 03 00             	rex.WRXB add (%r8),%r8
   12f1b:	00 00                	add    %al,(%rax)
   12f1d:	00 00                	add    %al,(%rax)
   12f1f:	00 4f 03             	add    %cl,0x3(%rdi)
   12f22:	00 00                	add    %al,(%rax)
   12f24:	00 00                	add    %al,(%rax)
   12f26:	00 00                	add    %al,(%rax)
   12f28:	4f 03 00             	rex.WRXB add (%r8),%r8
   12f2b:	00 00                	add    %al,(%rax)
   12f2d:	00 00                	add    %al,(%rax)
   12f2f:	00 4f 03             	add    %cl,0x3(%rdi)
   12f32:	00 00                	add    %al,(%rax)
   12f34:	00 00                	add    %al,(%rax)
   12f36:	00 00                	add    %al,(%rax)
   12f38:	4f 03 00             	rex.WRXB add (%r8),%r8
   12f3b:	00 00                	add    %al,(%rax)
   12f3d:	00 00                	add    %al,(%rax)
   12f3f:	00 4f 03             	add    %cl,0x3(%rdi)
   12f42:	00 00                	add    %al,(%rax)
   12f44:	00 00                	add    %al,(%rax)
   12f46:	00 00                	add    %al,(%rax)
   12f48:	4f 03 00             	rex.WRXB add (%r8),%r8
   12f4b:	00 00                	add    %al,(%rax)
   12f4d:	00 00                	add    %al,(%rax)
   12f4f:	00 4f 03             	add    %cl,0x3(%rdi)
   12f52:	00 00                	add    %al,(%rax)
   12f54:	00 00                	add    %al,(%rax)
   12f56:	00 00                	add    %al,(%rax)
   12f58:	4f 03 00             	rex.WRXB add (%r8),%r8
   12f5b:	00 00                	add    %al,(%rax)
   12f5d:	00 00                	add    %al,(%rax)
   12f5f:	00 4f 03             	add    %cl,0x3(%rdi)
   12f62:	00 00                	add    %al,(%rax)
   12f64:	00 00                	add    %al,(%rax)
   12f66:	00 00                	add    %al,(%rax)
   12f68:	4f 03 00             	rex.WRXB add (%r8),%r8
   12f6b:	00 00                	add    %al,(%rax)
   12f6d:	00 00                	add    %al,(%rax)
   12f6f:	00 4f 03             	add    %cl,0x3(%rdi)
   12f72:	00 00                	add    %al,(%rax)
   12f74:	00 00                	add    %al,(%rax)
   12f76:	00 00                	add    %al,(%rax)
   12f78:	4f 03 00             	rex.WRXB add (%r8),%r8
   12f7b:	00 00                	add    %al,(%rax)
   12f7d:	00 00                	add    %al,(%rax)
   12f7f:	00 4f 03             	add    %cl,0x3(%rdi)
   12f82:	00 00                	add    %al,(%rax)
   12f84:	00 00                	add    %al,(%rax)
   12f86:	00 00                	add    %al,(%rax)
   12f88:	4f 03 00             	rex.WRXB add (%r8),%r8
   12f8b:	00 00                	add    %al,(%rax)
   12f8d:	00 00                	add    %al,(%rax)
   12f8f:	00 4f 03             	add    %cl,0x3(%rdi)
   12f92:	00 00                	add    %al,(%rax)
   12f94:	00 00                	add    %al,(%rax)
   12f96:	00 00                	add    %al,(%rax)
   12f98:	4f 03 00             	rex.WRXB add (%r8),%r8
   12f9b:	00 00                	add    %al,(%rax)
   12f9d:	00 00                	add    %al,(%rax)
   12f9f:	00 4f 03             	add    %cl,0x3(%rdi)
   12fa2:	00 00                	add    %al,(%rax)
   12fa4:	00 00                	add    %al,(%rax)
   12fa6:	00 00                	add    %al,(%rax)
   12fa8:	4f 03 00             	rex.WRXB add (%r8),%r8
   12fab:	00 00                	add    %al,(%rax)
   12fad:	00 00                	add    %al,(%rax)
   12faf:	00 4f 03             	add    %cl,0x3(%rdi)
   12fb2:	00 00                	add    %al,(%rax)
   12fb4:	00 00                	add    %al,(%rax)
   12fb6:	00 00                	add    %al,(%rax)
   12fb8:	4f 03 00             	rex.WRXB add (%r8),%r8
   12fbb:	00 00                	add    %al,(%rax)
   12fbd:	00 00                	add    %al,(%rax)
   12fbf:	00 4f 03             	add    %cl,0x3(%rdi)
   12fc2:	00 00                	add    %al,(%rax)
   12fc4:	00 00                	add    %al,(%rax)
   12fc6:	00 00                	add    %al,(%rax)
   12fc8:	4f 03 00             	rex.WRXB add (%r8),%r8
   12fcb:	00 00                	add    %al,(%rax)
   12fcd:	00 00                	add    %al,(%rax)
   12fcf:	00 4f 03             	add    %cl,0x3(%rdi)
   12fd2:	00 00                	add    %al,(%rax)
   12fd4:	00 00                	add    %al,(%rax)
   12fd6:	00 00                	add    %al,(%rax)
   12fd8:	4f 03 00             	rex.WRXB add (%r8),%r8
   12fdb:	00 00                	add    %al,(%rax)
   12fdd:	00 00                	add    %al,(%rax)
   12fdf:	00 4f 03             	add    %cl,0x3(%rdi)
   12fe2:	00 00                	add    %al,(%rax)
   12fe4:	00 00                	add    %al,(%rax)
   12fe6:	00 00                	add    %al,(%rax)
   12fe8:	4f 03 00             	rex.WRXB add (%r8),%r8
   12feb:	00 00                	add    %al,(%rax)
   12fed:	00 00                	add    %al,(%rax)
   12fef:	00 4f 03             	add    %cl,0x3(%rdi)
   12ff2:	00 00                	add    %al,(%rax)
   12ff4:	00 00                	add    %al,(%rax)
   12ff6:	00 00                	add    %al,(%rax)
   12ff8:	4f 03 00             	rex.WRXB add (%r8),%r8
   12ffb:	00 00                	add    %al,(%rax)
   12ffd:	00 00                	add    %al,(%rax)
   12fff:	00 4f 03             	add    %cl,0x3(%rdi)
   13002:	00 00                	add    %al,(%rax)
   13004:	00 00                	add    %al,(%rax)
   13006:	00 00                	add    %al,(%rax)
   13008:	4f 03 00             	rex.WRXB add (%r8),%r8
   1300b:	00 00                	add    %al,(%rax)
   1300d:	00 00                	add    %al,(%rax)
   1300f:	00 4f 03             	add    %cl,0x3(%rdi)
   13012:	00 00                	add    %al,(%rax)
   13014:	00 00                	add    %al,(%rax)
   13016:	00 00                	add    %al,(%rax)
   13018:	4f 03 00             	rex.WRXB add (%r8),%r8
   1301b:	00 00                	add    %al,(%rax)
   1301d:	00 00                	add    %al,(%rax)
   1301f:	00 4f 03             	add    %cl,0x3(%rdi)
   13022:	00 00                	add    %al,(%rax)
   13024:	00 00                	add    %al,(%rax)
   13026:	00 00                	add    %al,(%rax)
   13028:	4f 03 00             	rex.WRXB add (%r8),%r8
   1302b:	00 00                	add    %al,(%rax)
   1302d:	00 00                	add    %al,(%rax)
   1302f:	00 4f 03             	add    %cl,0x3(%rdi)
   13032:	00 00                	add    %al,(%rax)
   13034:	00 00                	add    %al,(%rax)
   13036:	00 00                	add    %al,(%rax)
   13038:	4f 03 00             	rex.WRXB add (%r8),%r8
   1303b:	00 00                	add    %al,(%rax)
   1303d:	00 00                	add    %al,(%rax)
   1303f:	00 4f 03             	add    %cl,0x3(%rdi)
   13042:	00 00                	add    %al,(%rax)
   13044:	00 00                	add    %al,(%rax)
   13046:	00 00                	add    %al,(%rax)
   13048:	4f 03 00             	rex.WRXB add (%r8),%r8
   1304b:	00 00                	add    %al,(%rax)
   1304d:	00 00                	add    %al,(%rax)
   1304f:	00 4f 03             	add    %cl,0x3(%rdi)
   13052:	00 00                	add    %al,(%rax)
   13054:	00 00                	add    %al,(%rax)
   13056:	00 00                	add    %al,(%rax)
   13058:	4f 03 00             	rex.WRXB add (%r8),%r8
   1305b:	00 00                	add    %al,(%rax)
   1305d:	00 00                	add    %al,(%rax)
   1305f:	00 4f 03             	add    %cl,0x3(%rdi)
   13062:	00 00                	add    %al,(%rax)
   13064:	00 00                	add    %al,(%rax)
   13066:	00 00                	add    %al,(%rax)
   13068:	4f 03 00             	rex.WRXB add (%r8),%r8
   1306b:	00 00                	add    %al,(%rax)
   1306d:	00 00                	add    %al,(%rax)
   1306f:	00 4f 03             	add    %cl,0x3(%rdi)
   13072:	00 00                	add    %al,(%rax)
   13074:	00 00                	add    %al,(%rax)
   13076:	00 00                	add    %al,(%rax)
   13078:	4f 03 00             	rex.WRXB add (%r8),%r8
   1307b:	00 00                	add    %al,(%rax)
   1307d:	00 00                	add    %al,(%rax)
   1307f:	00 4f 03             	add    %cl,0x3(%rdi)
   13082:	00 00                	add    %al,(%rax)
   13084:	00 00                	add    %al,(%rax)
   13086:	00 00                	add    %al,(%rax)
   13088:	4f 03 00             	rex.WRXB add (%r8),%r8
   1308b:	00 00                	add    %al,(%rax)
   1308d:	00 00                	add    %al,(%rax)
   1308f:	00 4f 03             	add    %cl,0x3(%rdi)
   13092:	00 00                	add    %al,(%rax)
   13094:	00 00                	add    %al,(%rax)
   13096:	00 00                	add    %al,(%rax)
   13098:	4f 03 00             	rex.WRXB add (%r8),%r8
   1309b:	00 00                	add    %al,(%rax)
   1309d:	00 00                	add    %al,(%rax)
   1309f:	00 4f 03             	add    %cl,0x3(%rdi)
   130a2:	00 00                	add    %al,(%rax)
   130a4:	00 00                	add    %al,(%rax)
   130a6:	00 00                	add    %al,(%rax)
   130a8:	4f 03 00             	rex.WRXB add (%r8),%r8
   130ab:	00 00                	add    %al,(%rax)
   130ad:	00 00                	add    %al,(%rax)
   130af:	00 4f 03             	add    %cl,0x3(%rdi)
   130b2:	00 00                	add    %al,(%rax)
   130b4:	00 00                	add    %al,(%rax)
   130b6:	00 00                	add    %al,(%rax)
   130b8:	4f 03 00             	rex.WRXB add (%r8),%r8
   130bb:	00 00                	add    %al,(%rax)
   130bd:	00 00                	add    %al,(%rax)
   130bf:	00 4f 03             	add    %cl,0x3(%rdi)
   130c2:	00 00                	add    %al,(%rax)
   130c4:	00 00                	add    %al,(%rax)
   130c6:	00 00                	add    %al,(%rax)
   130c8:	4f 03 00             	rex.WRXB add (%r8),%r8
   130cb:	00 00                	add    %al,(%rax)
   130cd:	00 00                	add    %al,(%rax)
   130cf:	00 4f 03             	add    %cl,0x3(%rdi)
   130d2:	00 00                	add    %al,(%rax)
   130d4:	00 00                	add    %al,(%rax)
   130d6:	00 00                	add    %al,(%rax)
   130d8:	4f 03 00             	rex.WRXB add (%r8),%r8
   130db:	00 00                	add    %al,(%rax)
   130dd:	00 00                	add    %al,(%rax)
   130df:	00 4f 03             	add    %cl,0x3(%rdi)
   130e2:	00 00                	add    %al,(%rax)
   130e4:	00 00                	add    %al,(%rax)
   130e6:	00 00                	add    %al,(%rax)
   130e8:	4f 03 00             	rex.WRXB add (%r8),%r8
   130eb:	00 00                	add    %al,(%rax)
   130ed:	00 00                	add    %al,(%rax)
   130ef:	00 4f 03             	add    %cl,0x3(%rdi)
   130f2:	00 00                	add    %al,(%rax)
   130f4:	00 00                	add    %al,(%rax)
   130f6:	00 00                	add    %al,(%rax)
   130f8:	4f 03 00             	rex.WRXB add (%r8),%r8
   130fb:	00 00                	add    %al,(%rax)
   130fd:	00 00                	add    %al,(%rax)
   130ff:	00 5d 03             	add    %bl,0x3(%rbp)
   13102:	00 00                	add    %al,(%rax)
   13104:	00 00                	add    %al,(%rax)
   13106:	00 00                	add    %al,(%rax)
   13108:	5d                   	pop    %rbp
   13109:	03 00                	add    (%rax),%eax
   1310b:	00 00                	add    %al,(%rax)
   1310d:	00 00                	add    %al,(%rax)
   1310f:	00 5d 03             	add    %bl,0x3(%rbp)
   13112:	00 00                	add    %al,(%rax)
   13114:	00 00                	add    %al,(%rax)
   13116:	00 00                	add    %al,(%rax)
   13118:	5d                   	pop    %rbp
   13119:	03 00                	add    (%rax),%eax
   1311b:	00 00                	add    %al,(%rax)
   1311d:	00 00                	add    %al,(%rax)
   1311f:	00 5d 03             	add    %bl,0x3(%rbp)
   13122:	00 00                	add    %al,(%rax)
   13124:	00 00                	add    %al,(%rax)
   13126:	00 00                	add    %al,(%rax)
   13128:	5d                   	pop    %rbp
   13129:	03 00                	add    (%rax),%eax
   1312b:	00 00                	add    %al,(%rax)
   1312d:	00 00                	add    %al,(%rax)
   1312f:	00 5d 03             	add    %bl,0x3(%rbp)
   13132:	00 00                	add    %al,(%rax)
   13134:	00 00                	add    %al,(%rax)
   13136:	00 00                	add    %al,(%rax)
   13138:	5d                   	pop    %rbp
   13139:	03 00                	add    (%rax),%eax
   1313b:	00 00                	add    %al,(%rax)
   1313d:	00 00                	add    %al,(%rax)
   1313f:	00 5d 03             	add    %bl,0x3(%rbp)
   13142:	00 00                	add    %al,(%rax)
   13144:	00 00                	add    %al,(%rax)
   13146:	00 00                	add    %al,(%rax)
   13148:	5d                   	pop    %rbp
   13149:	03 00                	add    (%rax),%eax
   1314b:	00 00                	add    %al,(%rax)
   1314d:	00 00                	add    %al,(%rax)
   1314f:	00 5d 03             	add    %bl,0x3(%rbp)
   13152:	00 00                	add    %al,(%rax)
   13154:	00 00                	add    %al,(%rax)
   13156:	00 00                	add    %al,(%rax)
   13158:	5d                   	pop    %rbp
   13159:	03 00                	add    (%rax),%eax
   1315b:	00 00                	add    %al,(%rax)
   1315d:	00 00                	add    %al,(%rax)
   1315f:	00 5d 03             	add    %bl,0x3(%rbp)
   13162:	00 00                	add    %al,(%rax)
   13164:	00 00                	add    %al,(%rax)
   13166:	00 00                	add    %al,(%rax)
   13168:	5d                   	pop    %rbp
   13169:	03 00                	add    (%rax),%eax
   1316b:	00 00                	add    %al,(%rax)
   1316d:	00 00                	add    %al,(%rax)
   1316f:	00 5d 03             	add    %bl,0x3(%rbp)
   13172:	00 00                	add    %al,(%rax)
   13174:	00 00                	add    %al,(%rax)
   13176:	00 00                	add    %al,(%rax)
   13178:	5d                   	pop    %rbp
   13179:	03 00                	add    (%rax),%eax
   1317b:	00 00                	add    %al,(%rax)
   1317d:	00 00                	add    %al,(%rax)
   1317f:	00 5d 03             	add    %bl,0x3(%rbp)
   13182:	00 00                	add    %al,(%rax)
   13184:	00 00                	add    %al,(%rax)
   13186:	00 00                	add    %al,(%rax)
   13188:	5d                   	pop    %rbp
   13189:	03 00                	add    (%rax),%eax
   1318b:	00 00                	add    %al,(%rax)
   1318d:	00 00                	add    %al,(%rax)
   1318f:	00 5d 03             	add    %bl,0x3(%rbp)
   13192:	00 00                	add    %al,(%rax)
   13194:	00 00                	add    %al,(%rax)
   13196:	00 00                	add    %al,(%rax)
   13198:	5d                   	pop    %rbp
   13199:	03 00                	add    (%rax),%eax
   1319b:	00 00                	add    %al,(%rax)
   1319d:	00 00                	add    %al,(%rax)
   1319f:	00 5d 03             	add    %bl,0x3(%rbp)
   131a2:	00 00                	add    %al,(%rax)
   131a4:	00 00                	add    %al,(%rax)
   131a6:	00 00                	add    %al,(%rax)
   131a8:	5d                   	pop    %rbp
   131a9:	03 00                	add    (%rax),%eax
   131ab:	00 00                	add    %al,(%rax)
   131ad:	00 00                	add    %al,(%rax)
   131af:	00 5d 03             	add    %bl,0x3(%rbp)
   131b2:	00 00                	add    %al,(%rax)
   131b4:	00 00                	add    %al,(%rax)
   131b6:	00 00                	add    %al,(%rax)
   131b8:	5d                   	pop    %rbp
   131b9:	03 00                	add    (%rax),%eax
   131bb:	00 00                	add    %al,(%rax)
   131bd:	00 00                	add    %al,(%rax)
   131bf:	00 5d 03             	add    %bl,0x3(%rbp)
   131c2:	00 00                	add    %al,(%rax)
   131c4:	00 00                	add    %al,(%rax)
   131c6:	00 00                	add    %al,(%rax)
   131c8:	5d                   	pop    %rbp
   131c9:	03 00                	add    (%rax),%eax
   131cb:	00 00                	add    %al,(%rax)
   131cd:	00 00                	add    %al,(%rax)
   131cf:	00 5d 03             	add    %bl,0x3(%rbp)
   131d2:	00 00                	add    %al,(%rax)
   131d4:	00 00                	add    %al,(%rax)
   131d6:	00 00                	add    %al,(%rax)
   131d8:	5d                   	pop    %rbp
   131d9:	03 00                	add    (%rax),%eax
   131db:	00 00                	add    %al,(%rax)
   131dd:	00 00                	add    %al,(%rax)
   131df:	00 5d 03             	add    %bl,0x3(%rbp)
   131e2:	00 00                	add    %al,(%rax)
   131e4:	00 00                	add    %al,(%rax)
   131e6:	00 00                	add    %al,(%rax)
   131e8:	5d                   	pop    %rbp
   131e9:	03 00                	add    (%rax),%eax
   131eb:	00 00                	add    %al,(%rax)
   131ed:	00 00                	add    %al,(%rax)
   131ef:	00 5d 03             	add    %bl,0x3(%rbp)
   131f2:	00 00                	add    %al,(%rax)
   131f4:	00 00                	add    %al,(%rax)
   131f6:	00 00                	add    %al,(%rax)
   131f8:	5d                   	pop    %rbp
   131f9:	03 00                	add    (%rax),%eax
   131fb:	00 00                	add    %al,(%rax)
   131fd:	00 00                	add    %al,(%rax)
   131ff:	00 5d 03             	add    %bl,0x3(%rbp)
   13202:	00 00                	add    %al,(%rax)
   13204:	00 00                	add    %al,(%rax)
   13206:	00 00                	add    %al,(%rax)
   13208:	5d                   	pop    %rbp
   13209:	03 00                	add    (%rax),%eax
   1320b:	00 00                	add    %al,(%rax)
   1320d:	00 00                	add    %al,(%rax)
   1320f:	00 5d 03             	add    %bl,0x3(%rbp)
   13212:	00 00                	add    %al,(%rax)
   13214:	00 00                	add    %al,(%rax)
   13216:	00 00                	add    %al,(%rax)
   13218:	5d                   	pop    %rbp
   13219:	03 00                	add    (%rax),%eax
   1321b:	00 00                	add    %al,(%rax)
   1321d:	00 00                	add    %al,(%rax)
   1321f:	00 5d 03             	add    %bl,0x3(%rbp)
   13222:	00 00                	add    %al,(%rax)
   13224:	00 00                	add    %al,(%rax)
   13226:	00 00                	add    %al,(%rax)
   13228:	5d                   	pop    %rbp
   13229:	03 00                	add    (%rax),%eax
   1322b:	00 00                	add    %al,(%rax)
   1322d:	00 00                	add    %al,(%rax)
   1322f:	00 5d 03             	add    %bl,0x3(%rbp)
   13232:	00 00                	add    %al,(%rax)
   13234:	00 00                	add    %al,(%rax)
   13236:	00 00                	add    %al,(%rax)
   13238:	5d                   	pop    %rbp
   13239:	03 00                	add    (%rax),%eax
   1323b:	00 00                	add    %al,(%rax)
   1323d:	00 00                	add    %al,(%rax)
   1323f:	00 5d 03             	add    %bl,0x3(%rbp)
   13242:	00 00                	add    %al,(%rax)
   13244:	00 00                	add    %al,(%rax)
   13246:	00 00                	add    %al,(%rax)
   13248:	5d                   	pop    %rbp
   13249:	03 00                	add    (%rax),%eax
   1324b:	00 00                	add    %al,(%rax)
   1324d:	00 00                	add    %al,(%rax)
   1324f:	00 5d 03             	add    %bl,0x3(%rbp)
   13252:	00 00                	add    %al,(%rax)
   13254:	00 00                	add    %al,(%rax)
   13256:	00 00                	add    %al,(%rax)
   13258:	5d                   	pop    %rbp
   13259:	03 00                	add    (%rax),%eax
   1325b:	00 00                	add    %al,(%rax)
   1325d:	00 00                	add    %al,(%rax)
   1325f:	00 5d 03             	add    %bl,0x3(%rbp)
   13262:	00 00                	add    %al,(%rax)
   13264:	00 00                	add    %al,(%rax)
   13266:	00 00                	add    %al,(%rax)
   13268:	5d                   	pop    %rbp
   13269:	03 00                	add    (%rax),%eax
   1326b:	00 00                	add    %al,(%rax)
   1326d:	00 00                	add    %al,(%rax)
   1326f:	00 5d 03             	add    %bl,0x3(%rbp)
   13272:	00 00                	add    %al,(%rax)
   13274:	00 00                	add    %al,(%rax)
   13276:	00 00                	add    %al,(%rax)
   13278:	5d                   	pop    %rbp
   13279:	03 00                	add    (%rax),%eax
   1327b:	00 00                	add    %al,(%rax)
   1327d:	00 00                	add    %al,(%rax)
   1327f:	00 5d 03             	add    %bl,0x3(%rbp)
   13282:	00 00                	add    %al,(%rax)
   13284:	00 00                	add    %al,(%rax)
   13286:	00 00                	add    %al,(%rax)
   13288:	5d                   	pop    %rbp
   13289:	03 00                	add    (%rax),%eax
   1328b:	00 00                	add    %al,(%rax)
   1328d:	00 00                	add    %al,(%rax)
   1328f:	00 5d 03             	add    %bl,0x3(%rbp)
   13292:	00 00                	add    %al,(%rax)
   13294:	00 00                	add    %al,(%rax)
   13296:	00 00                	add    %al,(%rax)
   13298:	5d                   	pop    %rbp
   13299:	03 00                	add    (%rax),%eax
   1329b:	00 00                	add    %al,(%rax)
   1329d:	00 00                	add    %al,(%rax)
   1329f:	00 5d 03             	add    %bl,0x3(%rbp)
   132a2:	00 00                	add    %al,(%rax)
   132a4:	00 00                	add    %al,(%rax)
   132a6:	00 00                	add    %al,(%rax)
   132a8:	5d                   	pop    %rbp
   132a9:	03 00                	add    (%rax),%eax
   132ab:	00 00                	add    %al,(%rax)
   132ad:	00 00                	add    %al,(%rax)
   132af:	00 5d 03             	add    %bl,0x3(%rbp)
   132b2:	00 00                	add    %al,(%rax)
   132b4:	00 00                	add    %al,(%rax)
   132b6:	00 00                	add    %al,(%rax)
   132b8:	5d                   	pop    %rbp
   132b9:	03 00                	add    (%rax),%eax
   132bb:	00 00                	add    %al,(%rax)
   132bd:	00 00                	add    %al,(%rax)
   132bf:	00 5d 03             	add    %bl,0x3(%rbp)
   132c2:	00 00                	add    %al,(%rax)
   132c4:	00 00                	add    %al,(%rax)
   132c6:	00 00                	add    %al,(%rax)
   132c8:	5d                   	pop    %rbp
   132c9:	03 00                	add    (%rax),%eax
   132cb:	00 00                	add    %al,(%rax)
   132cd:	00 00                	add    %al,(%rax)
   132cf:	00 5d 03             	add    %bl,0x3(%rbp)
   132d2:	00 00                	add    %al,(%rax)
   132d4:	00 00                	add    %al,(%rax)
   132d6:	00 00                	add    %al,(%rax)
   132d8:	5d                   	pop    %rbp
   132d9:	03 00                	add    (%rax),%eax
   132db:	00 00                	add    %al,(%rax)
   132dd:	00 00                	add    %al,(%rax)
   132df:	00 5d 03             	add    %bl,0x3(%rbp)
   132e2:	00 00                	add    %al,(%rax)
   132e4:	00 00                	add    %al,(%rax)
   132e6:	00 00                	add    %al,(%rax)
   132e8:	5d                   	pop    %rbp
   132e9:	03 00                	add    (%rax),%eax
   132eb:	00 00                	add    %al,(%rax)
   132ed:	00 00                	add    %al,(%rax)
   132ef:	00 5d 03             	add    %bl,0x3(%rbp)
   132f2:	00 00                	add    %al,(%rax)
   132f4:	00 00                	add    %al,(%rax)
   132f6:	00 00                	add    %al,(%rax)
   132f8:	5d                   	pop    %rbp
   132f9:	03 00                	add    (%rax),%eax
   132fb:	00 00                	add    %al,(%rax)
   132fd:	00 00                	add    %al,(%rax)
   132ff:	00 6b 03             	add    %ch,0x3(%rbx)
   13302:	00 00                	add    %al,(%rax)
   13304:	00 00                	add    %al,(%rax)
   13306:	00 00                	add    %al,(%rax)
   13308:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1330b:	00 00                	add    %al,(%rax)
   1330d:	00 00                	add    %al,(%rax)
   1330f:	00 6b 03             	add    %ch,0x3(%rbx)
   13312:	00 00                	add    %al,(%rax)
   13314:	00 00                	add    %al,(%rax)
   13316:	00 00                	add    %al,(%rax)
   13318:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1331b:	00 00                	add    %al,(%rax)
   1331d:	00 00                	add    %al,(%rax)
   1331f:	00 6b 03             	add    %ch,0x3(%rbx)
   13322:	00 00                	add    %al,(%rax)
   13324:	00 00                	add    %al,(%rax)
   13326:	00 00                	add    %al,(%rax)
   13328:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1332b:	00 00                	add    %al,(%rax)
   1332d:	00 00                	add    %al,(%rax)
   1332f:	00 6b 03             	add    %ch,0x3(%rbx)
   13332:	00 00                	add    %al,(%rax)
   13334:	00 00                	add    %al,(%rax)
   13336:	00 00                	add    %al,(%rax)
   13338:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1333b:	00 00                	add    %al,(%rax)
   1333d:	00 00                	add    %al,(%rax)
   1333f:	00 6b 03             	add    %ch,0x3(%rbx)
   13342:	00 00                	add    %al,(%rax)
   13344:	00 00                	add    %al,(%rax)
   13346:	00 00                	add    %al,(%rax)
   13348:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1334b:	00 00                	add    %al,(%rax)
   1334d:	00 00                	add    %al,(%rax)
   1334f:	00 6b 03             	add    %ch,0x3(%rbx)
   13352:	00 00                	add    %al,(%rax)
   13354:	00 00                	add    %al,(%rax)
   13356:	00 00                	add    %al,(%rax)
   13358:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1335b:	00 00                	add    %al,(%rax)
   1335d:	00 00                	add    %al,(%rax)
   1335f:	00 6b 03             	add    %ch,0x3(%rbx)
   13362:	00 00                	add    %al,(%rax)
   13364:	00 00                	add    %al,(%rax)
   13366:	00 00                	add    %al,(%rax)
   13368:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1336b:	00 00                	add    %al,(%rax)
   1336d:	00 00                	add    %al,(%rax)
   1336f:	00 6b 03             	add    %ch,0x3(%rbx)
   13372:	00 00                	add    %al,(%rax)
   13374:	00 00                	add    %al,(%rax)
   13376:	00 00                	add    %al,(%rax)
   13378:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1337b:	00 00                	add    %al,(%rax)
   1337d:	00 00                	add    %al,(%rax)
   1337f:	00 6b 03             	add    %ch,0x3(%rbx)
   13382:	00 00                	add    %al,(%rax)
   13384:	00 00                	add    %al,(%rax)
   13386:	00 00                	add    %al,(%rax)
   13388:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1338b:	00 00                	add    %al,(%rax)
   1338d:	00 00                	add    %al,(%rax)
   1338f:	00 6b 03             	add    %ch,0x3(%rbx)
   13392:	00 00                	add    %al,(%rax)
   13394:	00 00                	add    %al,(%rax)
   13396:	00 00                	add    %al,(%rax)
   13398:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1339b:	00 00                	add    %al,(%rax)
   1339d:	00 00                	add    %al,(%rax)
   1339f:	00 6b 03             	add    %ch,0x3(%rbx)
   133a2:	00 00                	add    %al,(%rax)
   133a4:	00 00                	add    %al,(%rax)
   133a6:	00 00                	add    %al,(%rax)
   133a8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   133ab:	00 00                	add    %al,(%rax)
   133ad:	00 00                	add    %al,(%rax)
   133af:	00 6b 03             	add    %ch,0x3(%rbx)
   133b2:	00 00                	add    %al,(%rax)
   133b4:	00 00                	add    %al,(%rax)
   133b6:	00 00                	add    %al,(%rax)
   133b8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   133bb:	00 00                	add    %al,(%rax)
   133bd:	00 00                	add    %al,(%rax)
   133bf:	00 6b 03             	add    %ch,0x3(%rbx)
   133c2:	00 00                	add    %al,(%rax)
   133c4:	00 00                	add    %al,(%rax)
   133c6:	00 00                	add    %al,(%rax)
   133c8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   133cb:	00 00                	add    %al,(%rax)
   133cd:	00 00                	add    %al,(%rax)
   133cf:	00 6b 03             	add    %ch,0x3(%rbx)
   133d2:	00 00                	add    %al,(%rax)
   133d4:	00 00                	add    %al,(%rax)
   133d6:	00 00                	add    %al,(%rax)
   133d8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   133db:	00 00                	add    %al,(%rax)
   133dd:	00 00                	add    %al,(%rax)
   133df:	00 6b 03             	add    %ch,0x3(%rbx)
   133e2:	00 00                	add    %al,(%rax)
   133e4:	00 00                	add    %al,(%rax)
   133e6:	00 00                	add    %al,(%rax)
   133e8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   133eb:	00 00                	add    %al,(%rax)
   133ed:	00 00                	add    %al,(%rax)
   133ef:	00 6b 03             	add    %ch,0x3(%rbx)
   133f2:	00 00                	add    %al,(%rax)
   133f4:	00 00                	add    %al,(%rax)
   133f6:	00 00                	add    %al,(%rax)
   133f8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   133fb:	00 00                	add    %al,(%rax)
   133fd:	00 00                	add    %al,(%rax)
   133ff:	00 6b 03             	add    %ch,0x3(%rbx)
   13402:	00 00                	add    %al,(%rax)
   13404:	00 00                	add    %al,(%rax)
   13406:	00 00                	add    %al,(%rax)
   13408:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1340b:	00 00                	add    %al,(%rax)
   1340d:	00 00                	add    %al,(%rax)
   1340f:	00 6b 03             	add    %ch,0x3(%rbx)
   13412:	00 00                	add    %al,(%rax)
   13414:	00 00                	add    %al,(%rax)
   13416:	00 00                	add    %al,(%rax)
   13418:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1341b:	00 00                	add    %al,(%rax)
   1341d:	00 00                	add    %al,(%rax)
   1341f:	00 6b 03             	add    %ch,0x3(%rbx)
   13422:	00 00                	add    %al,(%rax)
   13424:	00 00                	add    %al,(%rax)
   13426:	00 00                	add    %al,(%rax)
   13428:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1342b:	00 00                	add    %al,(%rax)
   1342d:	00 00                	add    %al,(%rax)
   1342f:	00 6b 03             	add    %ch,0x3(%rbx)
   13432:	00 00                	add    %al,(%rax)
   13434:	00 00                	add    %al,(%rax)
   13436:	00 00                	add    %al,(%rax)
   13438:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1343b:	00 00                	add    %al,(%rax)
   1343d:	00 00                	add    %al,(%rax)
   1343f:	00 6b 03             	add    %ch,0x3(%rbx)
   13442:	00 00                	add    %al,(%rax)
   13444:	00 00                	add    %al,(%rax)
   13446:	00 00                	add    %al,(%rax)
   13448:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1344b:	00 00                	add    %al,(%rax)
   1344d:	00 00                	add    %al,(%rax)
   1344f:	00 6b 03             	add    %ch,0x3(%rbx)
   13452:	00 00                	add    %al,(%rax)
   13454:	00 00                	add    %al,(%rax)
   13456:	00 00                	add    %al,(%rax)
   13458:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1345b:	00 00                	add    %al,(%rax)
   1345d:	00 00                	add    %al,(%rax)
   1345f:	00 6b 03             	add    %ch,0x3(%rbx)
   13462:	00 00                	add    %al,(%rax)
   13464:	00 00                	add    %al,(%rax)
   13466:	00 00                	add    %al,(%rax)
   13468:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1346b:	00 00                	add    %al,(%rax)
   1346d:	00 00                	add    %al,(%rax)
   1346f:	00 6b 03             	add    %ch,0x3(%rbx)
   13472:	00 00                	add    %al,(%rax)
   13474:	00 00                	add    %al,(%rax)
   13476:	00 00                	add    %al,(%rax)
   13478:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1347b:	00 00                	add    %al,(%rax)
   1347d:	00 00                	add    %al,(%rax)
   1347f:	00 6b 03             	add    %ch,0x3(%rbx)
   13482:	00 00                	add    %al,(%rax)
   13484:	00 00                	add    %al,(%rax)
   13486:	00 00                	add    %al,(%rax)
   13488:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1348b:	00 00                	add    %al,(%rax)
   1348d:	00 00                	add    %al,(%rax)
   1348f:	00 6b 03             	add    %ch,0x3(%rbx)
   13492:	00 00                	add    %al,(%rax)
   13494:	00 00                	add    %al,(%rax)
   13496:	00 00                	add    %al,(%rax)
   13498:	6b 03 00             	imul   $0x0,(%rbx),%eax
   1349b:	00 00                	add    %al,(%rax)
   1349d:	00 00                	add    %al,(%rax)
   1349f:	00 6b 03             	add    %ch,0x3(%rbx)
   134a2:	00 00                	add    %al,(%rax)
   134a4:	00 00                	add    %al,(%rax)
   134a6:	00 00                	add    %al,(%rax)
   134a8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   134ab:	00 00                	add    %al,(%rax)
   134ad:	00 00                	add    %al,(%rax)
   134af:	00 6b 03             	add    %ch,0x3(%rbx)
   134b2:	00 00                	add    %al,(%rax)
   134b4:	00 00                	add    %al,(%rax)
   134b6:	00 00                	add    %al,(%rax)
   134b8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   134bb:	00 00                	add    %al,(%rax)
   134bd:	00 00                	add    %al,(%rax)
   134bf:	00 6b 03             	add    %ch,0x3(%rbx)
   134c2:	00 00                	add    %al,(%rax)
   134c4:	00 00                	add    %al,(%rax)
   134c6:	00 00                	add    %al,(%rax)
   134c8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   134cb:	00 00                	add    %al,(%rax)
   134cd:	00 00                	add    %al,(%rax)
   134cf:	00 6b 03             	add    %ch,0x3(%rbx)
   134d2:	00 00                	add    %al,(%rax)
   134d4:	00 00                	add    %al,(%rax)
   134d6:	00 00                	add    %al,(%rax)
   134d8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   134db:	00 00                	add    %al,(%rax)
   134dd:	00 00                	add    %al,(%rax)
   134df:	00 6b 03             	add    %ch,0x3(%rbx)
   134e2:	00 00                	add    %al,(%rax)
   134e4:	00 00                	add    %al,(%rax)
   134e6:	00 00                	add    %al,(%rax)
   134e8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   134eb:	00 00                	add    %al,(%rax)
   134ed:	00 00                	add    %al,(%rax)
   134ef:	00 6b 03             	add    %ch,0x3(%rbx)
   134f2:	00 00                	add    %al,(%rax)
   134f4:	00 00                	add    %al,(%rax)
   134f6:	00 00                	add    %al,(%rax)
   134f8:	6b 03 00             	imul   $0x0,(%rbx),%eax
   134fb:	00 00                	add    %al,(%rax)
   134fd:	00 00                	add    %al,(%rax)
   134ff:	00 79 03             	add    %bh,0x3(%rcx)
   13502:	00 00                	add    %al,(%rax)
   13504:	00 00                	add    %al,(%rax)
   13506:	00 00                	add    %al,(%rax)
   13508:	79 03                	jns    1350d <__intel_mic_avx512f_memcpy+0x114d>
   1350a:	00 00                	add    %al,(%rax)
   1350c:	00 00                	add    %al,(%rax)
   1350e:	00 00                	add    %al,(%rax)
   13510:	79 03                	jns    13515 <__intel_mic_avx512f_memcpy+0x1155>
   13512:	00 00                	add    %al,(%rax)
   13514:	00 00                	add    %al,(%rax)
   13516:	00 00                	add    %al,(%rax)
   13518:	79 03                	jns    1351d <__intel_mic_avx512f_memcpy+0x115d>
   1351a:	00 00                	add    %al,(%rax)
   1351c:	00 00                	add    %al,(%rax)
   1351e:	00 00                	add    %al,(%rax)
   13520:	79 03                	jns    13525 <__intel_mic_avx512f_memcpy+0x1165>
   13522:	00 00                	add    %al,(%rax)
   13524:	00 00                	add    %al,(%rax)
   13526:	00 00                	add    %al,(%rax)
   13528:	79 03                	jns    1352d <__intel_mic_avx512f_memcpy+0x116d>
   1352a:	00 00                	add    %al,(%rax)
   1352c:	00 00                	add    %al,(%rax)
   1352e:	00 00                	add    %al,(%rax)
   13530:	79 03                	jns    13535 <__intel_mic_avx512f_memcpy+0x1175>
   13532:	00 00                	add    %al,(%rax)
   13534:	00 00                	add    %al,(%rax)
   13536:	00 00                	add    %al,(%rax)
   13538:	79 03                	jns    1353d <__intel_mic_avx512f_memcpy+0x117d>
   1353a:	00 00                	add    %al,(%rax)
   1353c:	00 00                	add    %al,(%rax)
   1353e:	00 00                	add    %al,(%rax)
   13540:	79 03                	jns    13545 <__intel_mic_avx512f_memcpy+0x1185>
   13542:	00 00                	add    %al,(%rax)
   13544:	00 00                	add    %al,(%rax)
   13546:	00 00                	add    %al,(%rax)
   13548:	79 03                	jns    1354d <__intel_mic_avx512f_memcpy+0x118d>
   1354a:	00 00                	add    %al,(%rax)
   1354c:	00 00                	add    %al,(%rax)
   1354e:	00 00                	add    %al,(%rax)
   13550:	79 03                	jns    13555 <__intel_mic_avx512f_memcpy+0x1195>
   13552:	00 00                	add    %al,(%rax)
   13554:	00 00                	add    %al,(%rax)
   13556:	00 00                	add    %al,(%rax)
   13558:	79 03                	jns    1355d <__intel_mic_avx512f_memcpy+0x119d>
   1355a:	00 00                	add    %al,(%rax)
   1355c:	00 00                	add    %al,(%rax)
   1355e:	00 00                	add    %al,(%rax)
   13560:	79 03                	jns    13565 <__intel_mic_avx512f_memcpy+0x11a5>
   13562:	00 00                	add    %al,(%rax)
   13564:	00 00                	add    %al,(%rax)
   13566:	00 00                	add    %al,(%rax)
   13568:	79 03                	jns    1356d <__intel_mic_avx512f_memcpy+0x11ad>
   1356a:	00 00                	add    %al,(%rax)
   1356c:	00 00                	add    %al,(%rax)
   1356e:	00 00                	add    %al,(%rax)
   13570:	79 03                	jns    13575 <__intel_mic_avx512f_memcpy+0x11b5>
   13572:	00 00                	add    %al,(%rax)
   13574:	00 00                	add    %al,(%rax)
   13576:	00 00                	add    %al,(%rax)
   13578:	79 03                	jns    1357d <__intel_mic_avx512f_memcpy+0x11bd>
   1357a:	00 00                	add    %al,(%rax)
   1357c:	00 00                	add    %al,(%rax)
   1357e:	00 00                	add    %al,(%rax)
   13580:	79 03                	jns    13585 <__intel_mic_avx512f_memcpy+0x11c5>
   13582:	00 00                	add    %al,(%rax)
   13584:	00 00                	add    %al,(%rax)
   13586:	00 00                	add    %al,(%rax)
   13588:	79 03                	jns    1358d <__intel_mic_avx512f_memcpy+0x11cd>
   1358a:	00 00                	add    %al,(%rax)
   1358c:	00 00                	add    %al,(%rax)
   1358e:	00 00                	add    %al,(%rax)
   13590:	79 03                	jns    13595 <__intel_mic_avx512f_memcpy+0x11d5>
   13592:	00 00                	add    %al,(%rax)
   13594:	00 00                	add    %al,(%rax)
   13596:	00 00                	add    %al,(%rax)
   13598:	79 03                	jns    1359d <__intel_mic_avx512f_memcpy+0x11dd>
   1359a:	00 00                	add    %al,(%rax)
   1359c:	00 00                	add    %al,(%rax)
   1359e:	00 00                	add    %al,(%rax)
   135a0:	79 03                	jns    135a5 <__intel_mic_avx512f_memcpy+0x11e5>
   135a2:	00 00                	add    %al,(%rax)
   135a4:	00 00                	add    %al,(%rax)
   135a6:	00 00                	add    %al,(%rax)
   135a8:	79 03                	jns    135ad <__intel_mic_avx512f_memcpy+0x11ed>
   135aa:	00 00                	add    %al,(%rax)
   135ac:	00 00                	add    %al,(%rax)
   135ae:	00 00                	add    %al,(%rax)
   135b0:	79 03                	jns    135b5 <__intel_mic_avx512f_memcpy+0x11f5>
   135b2:	00 00                	add    %al,(%rax)
   135b4:	00 00                	add    %al,(%rax)
   135b6:	00 00                	add    %al,(%rax)
   135b8:	79 03                	jns    135bd <__intel_mic_avx512f_memcpy+0x11fd>
   135ba:	00 00                	add    %al,(%rax)
   135bc:	00 00                	add    %al,(%rax)
   135be:	00 00                	add    %al,(%rax)
   135c0:	79 03                	jns    135c5 <__intel_mic_avx512f_memcpy+0x1205>
   135c2:	00 00                	add    %al,(%rax)
   135c4:	00 00                	add    %al,(%rax)
   135c6:	00 00                	add    %al,(%rax)
   135c8:	79 03                	jns    135cd <__intel_mic_avx512f_memcpy+0x120d>
   135ca:	00 00                	add    %al,(%rax)
   135cc:	00 00                	add    %al,(%rax)
   135ce:	00 00                	add    %al,(%rax)
   135d0:	79 03                	jns    135d5 <__intel_mic_avx512f_memcpy+0x1215>
   135d2:	00 00                	add    %al,(%rax)
   135d4:	00 00                	add    %al,(%rax)
   135d6:	00 00                	add    %al,(%rax)
   135d8:	79 03                	jns    135dd <__intel_mic_avx512f_memcpy+0x121d>
   135da:	00 00                	add    %al,(%rax)
   135dc:	00 00                	add    %al,(%rax)
   135de:	00 00                	add    %al,(%rax)
   135e0:	79 03                	jns    135e5 <__intel_mic_avx512f_memcpy+0x1225>
   135e2:	00 00                	add    %al,(%rax)
   135e4:	00 00                	add    %al,(%rax)
   135e6:	00 00                	add    %al,(%rax)
   135e8:	79 03                	jns    135ed <__intel_mic_avx512f_memcpy+0x122d>
   135ea:	00 00                	add    %al,(%rax)
   135ec:	00 00                	add    %al,(%rax)
   135ee:	00 00                	add    %al,(%rax)
   135f0:	79 03                	jns    135f5 <__intel_mic_avx512f_memcpy+0x1235>
   135f2:	00 00                	add    %al,(%rax)
   135f4:	00 00                	add    %al,(%rax)
   135f6:	00 00                	add    %al,(%rax)
   135f8:	79 03                	jns    135fd <__intel_mic_avx512f_memcpy+0x123d>
   135fa:	00 00                	add    %al,(%rax)
   135fc:	00 00                	add    %al,(%rax)
   135fe:	00 00                	add    %al,(%rax)
   13600:	79 03                	jns    13605 <__intel_mic_avx512f_memcpy+0x1245>
   13602:	00 00                	add    %al,(%rax)
   13604:	00 00                	add    %al,(%rax)
   13606:	00 00                	add    %al,(%rax)
   13608:	79 03                	jns    1360d <__intel_mic_avx512f_memcpy+0x124d>
   1360a:	00 00                	add    %al,(%rax)
   1360c:	00 00                	add    %al,(%rax)
   1360e:	00 00                	add    %al,(%rax)
   13610:	79 03                	jns    13615 <__intel_mic_avx512f_memcpy+0x1255>
   13612:	00 00                	add    %al,(%rax)
   13614:	00 00                	add    %al,(%rax)
   13616:	00 00                	add    %al,(%rax)
   13618:	79 03                	jns    1361d <__intel_mic_avx512f_memcpy+0x125d>
   1361a:	00 00                	add    %al,(%rax)
   1361c:	00 00                	add    %al,(%rax)
   1361e:	00 00                	add    %al,(%rax)
   13620:	79 03                	jns    13625 <__intel_mic_avx512f_memcpy+0x1265>
   13622:	00 00                	add    %al,(%rax)
   13624:	00 00                	add    %al,(%rax)
   13626:	00 00                	add    %al,(%rax)
   13628:	79 03                	jns    1362d <__intel_mic_avx512f_memcpy+0x126d>
   1362a:	00 00                	add    %al,(%rax)
   1362c:	00 00                	add    %al,(%rax)
   1362e:	00 00                	add    %al,(%rax)
   13630:	79 03                	jns    13635 <__intel_mic_avx512f_memcpy+0x1275>
   13632:	00 00                	add    %al,(%rax)
   13634:	00 00                	add    %al,(%rax)
   13636:	00 00                	add    %al,(%rax)
   13638:	79 03                	jns    1363d <__intel_mic_avx512f_memcpy+0x127d>
   1363a:	00 00                	add    %al,(%rax)
   1363c:	00 00                	add    %al,(%rax)
   1363e:	00 00                	add    %al,(%rax)
   13640:	79 03                	jns    13645 <__intel_mic_avx512f_memcpy+0x1285>
   13642:	00 00                	add    %al,(%rax)
   13644:	00 00                	add    %al,(%rax)
   13646:	00 00                	add    %al,(%rax)
   13648:	79 03                	jns    1364d <__intel_mic_avx512f_memcpy+0x128d>
   1364a:	00 00                	add    %al,(%rax)
   1364c:	00 00                	add    %al,(%rax)
   1364e:	00 00                	add    %al,(%rax)
   13650:	79 03                	jns    13655 <__intel_mic_avx512f_memcpy+0x1295>
   13652:	00 00                	add    %al,(%rax)
   13654:	00 00                	add    %al,(%rax)
   13656:	00 00                	add    %al,(%rax)
   13658:	79 03                	jns    1365d <__intel_mic_avx512f_memcpy+0x129d>
   1365a:	00 00                	add    %al,(%rax)
   1365c:	00 00                	add    %al,(%rax)
   1365e:	00 00                	add    %al,(%rax)
   13660:	79 03                	jns    13665 <__intel_mic_avx512f_memcpy+0x12a5>
   13662:	00 00                	add    %al,(%rax)
   13664:	00 00                	add    %al,(%rax)
   13666:	00 00                	add    %al,(%rax)
   13668:	79 03                	jns    1366d <__intel_mic_avx512f_memcpy+0x12ad>
   1366a:	00 00                	add    %al,(%rax)
   1366c:	00 00                	add    %al,(%rax)
   1366e:	00 00                	add    %al,(%rax)
   13670:	79 03                	jns    13675 <__intel_mic_avx512f_memcpy+0x12b5>
   13672:	00 00                	add    %al,(%rax)
   13674:	00 00                	add    %al,(%rax)
   13676:	00 00                	add    %al,(%rax)
   13678:	79 03                	jns    1367d <__intel_mic_avx512f_memcpy+0x12bd>
   1367a:	00 00                	add    %al,(%rax)
   1367c:	00 00                	add    %al,(%rax)
   1367e:	00 00                	add    %al,(%rax)
   13680:	79 03                	jns    13685 <__intel_mic_avx512f_memcpy+0x12c5>
   13682:	00 00                	add    %al,(%rax)
   13684:	00 00                	add    %al,(%rax)
   13686:	00 00                	add    %al,(%rax)
   13688:	79 03                	jns    1368d <__intel_mic_avx512f_memcpy+0x12cd>
   1368a:	00 00                	add    %al,(%rax)
   1368c:	00 00                	add    %al,(%rax)
   1368e:	00 00                	add    %al,(%rax)
   13690:	79 03                	jns    13695 <__intel_mic_avx512f_memcpy+0x12d5>
   13692:	00 00                	add    %al,(%rax)
   13694:	00 00                	add    %al,(%rax)
   13696:	00 00                	add    %al,(%rax)
   13698:	79 03                	jns    1369d <__intel_mic_avx512f_memcpy+0x12dd>
   1369a:	00 00                	add    %al,(%rax)
   1369c:	00 00                	add    %al,(%rax)
   1369e:	00 00                	add    %al,(%rax)
   136a0:	79 03                	jns    136a5 <__intel_mic_avx512f_memcpy+0x12e5>
   136a2:	00 00                	add    %al,(%rax)
   136a4:	00 00                	add    %al,(%rax)
   136a6:	00 00                	add    %al,(%rax)
   136a8:	79 03                	jns    136ad <__intel_mic_avx512f_memcpy+0x12ed>
   136aa:	00 00                	add    %al,(%rax)
   136ac:	00 00                	add    %al,(%rax)
   136ae:	00 00                	add    %al,(%rax)
   136b0:	79 03                	jns    136b5 <__intel_mic_avx512f_memcpy+0x12f5>
   136b2:	00 00                	add    %al,(%rax)
   136b4:	00 00                	add    %al,(%rax)
   136b6:	00 00                	add    %al,(%rax)
   136b8:	79 03                	jns    136bd <__intel_mic_avx512f_memcpy+0x12fd>
   136ba:	00 00                	add    %al,(%rax)
   136bc:	00 00                	add    %al,(%rax)
   136be:	00 00                	add    %al,(%rax)
   136c0:	79 03                	jns    136c5 <__intel_mic_avx512f_memcpy+0x1305>
   136c2:	00 00                	add    %al,(%rax)
   136c4:	00 00                	add    %al,(%rax)
   136c6:	00 00                	add    %al,(%rax)
   136c8:	79 03                	jns    136cd <__intel_mic_avx512f_memcpy+0x130d>
   136ca:	00 00                	add    %al,(%rax)
   136cc:	00 00                	add    %al,(%rax)
   136ce:	00 00                	add    %al,(%rax)
   136d0:	79 03                	jns    136d5 <__intel_mic_avx512f_memcpy+0x1315>
   136d2:	00 00                	add    %al,(%rax)
   136d4:	00 00                	add    %al,(%rax)
   136d6:	00 00                	add    %al,(%rax)
   136d8:	79 03                	jns    136dd <__intel_mic_avx512f_memcpy+0x131d>
   136da:	00 00                	add    %al,(%rax)
   136dc:	00 00                	add    %al,(%rax)
   136de:	00 00                	add    %al,(%rax)
   136e0:	79 03                	jns    136e5 <__intel_mic_avx512f_memcpy+0x1325>
   136e2:	00 00                	add    %al,(%rax)
   136e4:	00 00                	add    %al,(%rax)
   136e6:	00 00                	add    %al,(%rax)
   136e8:	79 03                	jns    136ed <__intel_mic_avx512f_memcpy+0x132d>
   136ea:	00 00                	add    %al,(%rax)
   136ec:	00 00                	add    %al,(%rax)
   136ee:	00 00                	add    %al,(%rax)
   136f0:	79 03                	jns    136f5 <__intel_mic_avx512f_memcpy+0x1335>
   136f2:	00 00                	add    %al,(%rax)
   136f4:	00 00                	add    %al,(%rax)
   136f6:	00 00                	add    %al,(%rax)
   136f8:	79 03                	jns    136fd <__intel_mic_avx512f_memcpy+0x133d>
   136fa:	00 00                	add    %al,(%rax)
   136fc:	00 00                	add    %al,(%rax)
   136fe:	00 00                	add    %al,(%rax)
   13700:	87 03                	xchg   %eax,(%rbx)
   13702:	00 00                	add    %al,(%rax)
   13704:	00 00                	add    %al,(%rax)
   13706:	00 00                	add    %al,(%rax)
   13708:	87 03                	xchg   %eax,(%rbx)
   1370a:	00 00                	add    %al,(%rax)
   1370c:	00 00                	add    %al,(%rax)
   1370e:	00 00                	add    %al,(%rax)
   13710:	87 03                	xchg   %eax,(%rbx)
   13712:	00 00                	add    %al,(%rax)
   13714:	00 00                	add    %al,(%rax)
   13716:	00 00                	add    %al,(%rax)
   13718:	87 03                	xchg   %eax,(%rbx)
   1371a:	00 00                	add    %al,(%rax)
   1371c:	00 00                	add    %al,(%rax)
   1371e:	00 00                	add    %al,(%rax)
   13720:	87 03                	xchg   %eax,(%rbx)
   13722:	00 00                	add    %al,(%rax)
   13724:	00 00                	add    %al,(%rax)
   13726:	00 00                	add    %al,(%rax)
   13728:	87 03                	xchg   %eax,(%rbx)
   1372a:	00 00                	add    %al,(%rax)
   1372c:	00 00                	add    %al,(%rax)
   1372e:	00 00                	add    %al,(%rax)
   13730:	87 03                	xchg   %eax,(%rbx)
   13732:	00 00                	add    %al,(%rax)
   13734:	00 00                	add    %al,(%rax)
   13736:	00 00                	add    %al,(%rax)
   13738:	87 03                	xchg   %eax,(%rbx)
   1373a:	00 00                	add    %al,(%rax)
   1373c:	00 00                	add    %al,(%rax)
   1373e:	00 00                	add    %al,(%rax)
   13740:	87 03                	xchg   %eax,(%rbx)
   13742:	00 00                	add    %al,(%rax)
   13744:	00 00                	add    %al,(%rax)
   13746:	00 00                	add    %al,(%rax)
   13748:	87 03                	xchg   %eax,(%rbx)
   1374a:	00 00                	add    %al,(%rax)
   1374c:	00 00                	add    %al,(%rax)
   1374e:	00 00                	add    %al,(%rax)
   13750:	87 03                	xchg   %eax,(%rbx)
   13752:	00 00                	add    %al,(%rax)
   13754:	00 00                	add    %al,(%rax)
   13756:	00 00                	add    %al,(%rax)
   13758:	87 03                	xchg   %eax,(%rbx)
   1375a:	00 00                	add    %al,(%rax)
   1375c:	00 00                	add    %al,(%rax)
   1375e:	00 00                	add    %al,(%rax)
   13760:	87 03                	xchg   %eax,(%rbx)
   13762:	00 00                	add    %al,(%rax)
   13764:	00 00                	add    %al,(%rax)
   13766:	00 00                	add    %al,(%rax)
   13768:	87 03                	xchg   %eax,(%rbx)
   1376a:	00 00                	add    %al,(%rax)
   1376c:	00 00                	add    %al,(%rax)
   1376e:	00 00                	add    %al,(%rax)
   13770:	87 03                	xchg   %eax,(%rbx)
   13772:	00 00                	add    %al,(%rax)
   13774:	00 00                	add    %al,(%rax)
   13776:	00 00                	add    %al,(%rax)
   13778:	87 03                	xchg   %eax,(%rbx)
   1377a:	00 00                	add    %al,(%rax)
   1377c:	00 00                	add    %al,(%rax)
   1377e:	00 00                	add    %al,(%rax)
   13780:	87 03                	xchg   %eax,(%rbx)
   13782:	00 00                	add    %al,(%rax)
   13784:	00 00                	add    %al,(%rax)
   13786:	00 00                	add    %al,(%rax)
   13788:	87 03                	xchg   %eax,(%rbx)
   1378a:	00 00                	add    %al,(%rax)
   1378c:	00 00                	add    %al,(%rax)
   1378e:	00 00                	add    %al,(%rax)
   13790:	87 03                	xchg   %eax,(%rbx)
   13792:	00 00                	add    %al,(%rax)
   13794:	00 00                	add    %al,(%rax)
   13796:	00 00                	add    %al,(%rax)
   13798:	87 03                	xchg   %eax,(%rbx)
   1379a:	00 00                	add    %al,(%rax)
   1379c:	00 00                	add    %al,(%rax)
   1379e:	00 00                	add    %al,(%rax)
   137a0:	87 03                	xchg   %eax,(%rbx)
   137a2:	00 00                	add    %al,(%rax)
   137a4:	00 00                	add    %al,(%rax)
   137a6:	00 00                	add    %al,(%rax)
   137a8:	87 03                	xchg   %eax,(%rbx)
   137aa:	00 00                	add    %al,(%rax)
   137ac:	00 00                	add    %al,(%rax)
   137ae:	00 00                	add    %al,(%rax)
   137b0:	87 03                	xchg   %eax,(%rbx)
   137b2:	00 00                	add    %al,(%rax)
   137b4:	00 00                	add    %al,(%rax)
   137b6:	00 00                	add    %al,(%rax)
   137b8:	87 03                	xchg   %eax,(%rbx)
   137ba:	00 00                	add    %al,(%rax)
   137bc:	00 00                	add    %al,(%rax)
   137be:	00 00                	add    %al,(%rax)
   137c0:	87 03                	xchg   %eax,(%rbx)
   137c2:	00 00                	add    %al,(%rax)
   137c4:	00 00                	add    %al,(%rax)
   137c6:	00 00                	add    %al,(%rax)
   137c8:	87 03                	xchg   %eax,(%rbx)
   137ca:	00 00                	add    %al,(%rax)
   137cc:	00 00                	add    %al,(%rax)
   137ce:	00 00                	add    %al,(%rax)
   137d0:	87 03                	xchg   %eax,(%rbx)
   137d2:	00 00                	add    %al,(%rax)
   137d4:	00 00                	add    %al,(%rax)
   137d6:	00 00                	add    %al,(%rax)
   137d8:	87 03                	xchg   %eax,(%rbx)
   137da:	00 00                	add    %al,(%rax)
   137dc:	00 00                	add    %al,(%rax)
   137de:	00 00                	add    %al,(%rax)
   137e0:	87 03                	xchg   %eax,(%rbx)
   137e2:	00 00                	add    %al,(%rax)
   137e4:	00 00                	add    %al,(%rax)
   137e6:	00 00                	add    %al,(%rax)
   137e8:	87 03                	xchg   %eax,(%rbx)
   137ea:	00 00                	add    %al,(%rax)
   137ec:	00 00                	add    %al,(%rax)
   137ee:	00 00                	add    %al,(%rax)
   137f0:	87 03                	xchg   %eax,(%rbx)
   137f2:	00 00                	add    %al,(%rax)
   137f4:	00 00                	add    %al,(%rax)
   137f6:	00 00                	add    %al,(%rax)
   137f8:	87 03                	xchg   %eax,(%rbx)
   137fa:	00 00                	add    %al,(%rax)
   137fc:	00 00                	add    %al,(%rax)
   137fe:	00 00                	add    %al,(%rax)
   13800:	87 03                	xchg   %eax,(%rbx)
   13802:	00 00                	add    %al,(%rax)
   13804:	00 00                	add    %al,(%rax)
   13806:	00 00                	add    %al,(%rax)
   13808:	87 03                	xchg   %eax,(%rbx)
   1380a:	00 00                	add    %al,(%rax)
   1380c:	00 00                	add    %al,(%rax)
   1380e:	00 00                	add    %al,(%rax)
   13810:	87 03                	xchg   %eax,(%rbx)
   13812:	00 00                	add    %al,(%rax)
   13814:	00 00                	add    %al,(%rax)
   13816:	00 00                	add    %al,(%rax)
   13818:	87 03                	xchg   %eax,(%rbx)
   1381a:	00 00                	add    %al,(%rax)
   1381c:	00 00                	add    %al,(%rax)
   1381e:	00 00                	add    %al,(%rax)
   13820:	87 03                	xchg   %eax,(%rbx)
   13822:	00 00                	add    %al,(%rax)
   13824:	00 00                	add    %al,(%rax)
   13826:	00 00                	add    %al,(%rax)
   13828:	87 03                	xchg   %eax,(%rbx)
   1382a:	00 00                	add    %al,(%rax)
   1382c:	00 00                	add    %al,(%rax)
   1382e:	00 00                	add    %al,(%rax)
   13830:	87 03                	xchg   %eax,(%rbx)
   13832:	00 00                	add    %al,(%rax)
   13834:	00 00                	add    %al,(%rax)
   13836:	00 00                	add    %al,(%rax)
   13838:	87 03                	xchg   %eax,(%rbx)
   1383a:	00 00                	add    %al,(%rax)
   1383c:	00 00                	add    %al,(%rax)
   1383e:	00 00                	add    %al,(%rax)
   13840:	87 03                	xchg   %eax,(%rbx)
   13842:	00 00                	add    %al,(%rax)
   13844:	00 00                	add    %al,(%rax)
   13846:	00 00                	add    %al,(%rax)
   13848:	87 03                	xchg   %eax,(%rbx)
   1384a:	00 00                	add    %al,(%rax)
   1384c:	00 00                	add    %al,(%rax)
   1384e:	00 00                	add    %al,(%rax)
   13850:	87 03                	xchg   %eax,(%rbx)
   13852:	00 00                	add    %al,(%rax)
   13854:	00 00                	add    %al,(%rax)
   13856:	00 00                	add    %al,(%rax)
   13858:	87 03                	xchg   %eax,(%rbx)
   1385a:	00 00                	add    %al,(%rax)
   1385c:	00 00                	add    %al,(%rax)
   1385e:	00 00                	add    %al,(%rax)
   13860:	87 03                	xchg   %eax,(%rbx)
   13862:	00 00                	add    %al,(%rax)
   13864:	00 00                	add    %al,(%rax)
   13866:	00 00                	add    %al,(%rax)
   13868:	87 03                	xchg   %eax,(%rbx)
   1386a:	00 00                	add    %al,(%rax)
   1386c:	00 00                	add    %al,(%rax)
   1386e:	00 00                	add    %al,(%rax)
   13870:	87 03                	xchg   %eax,(%rbx)
   13872:	00 00                	add    %al,(%rax)
   13874:	00 00                	add    %al,(%rax)
   13876:	00 00                	add    %al,(%rax)
   13878:	87 03                	xchg   %eax,(%rbx)
   1387a:	00 00                	add    %al,(%rax)
   1387c:	00 00                	add    %al,(%rax)
   1387e:	00 00                	add    %al,(%rax)
   13880:	87 03                	xchg   %eax,(%rbx)
   13882:	00 00                	add    %al,(%rax)
   13884:	00 00                	add    %al,(%rax)
   13886:	00 00                	add    %al,(%rax)
   13888:	87 03                	xchg   %eax,(%rbx)
   1388a:	00 00                	add    %al,(%rax)
   1388c:	00 00                	add    %al,(%rax)
   1388e:	00 00                	add    %al,(%rax)
   13890:	87 03                	xchg   %eax,(%rbx)
   13892:	00 00                	add    %al,(%rax)
   13894:	00 00                	add    %al,(%rax)
   13896:	00 00                	add    %al,(%rax)
   13898:	87 03                	xchg   %eax,(%rbx)
   1389a:	00 00                	add    %al,(%rax)
   1389c:	00 00                	add    %al,(%rax)
   1389e:	00 00                	add    %al,(%rax)
   138a0:	87 03                	xchg   %eax,(%rbx)
   138a2:	00 00                	add    %al,(%rax)
   138a4:	00 00                	add    %al,(%rax)
   138a6:	00 00                	add    %al,(%rax)
   138a8:	87 03                	xchg   %eax,(%rbx)
   138aa:	00 00                	add    %al,(%rax)
   138ac:	00 00                	add    %al,(%rax)
   138ae:	00 00                	add    %al,(%rax)
   138b0:	87 03                	xchg   %eax,(%rbx)
   138b2:	00 00                	add    %al,(%rax)
   138b4:	00 00                	add    %al,(%rax)
   138b6:	00 00                	add    %al,(%rax)
   138b8:	87 03                	xchg   %eax,(%rbx)
   138ba:	00 00                	add    %al,(%rax)
   138bc:	00 00                	add    %al,(%rax)
   138be:	00 00                	add    %al,(%rax)
   138c0:	87 03                	xchg   %eax,(%rbx)
   138c2:	00 00                	add    %al,(%rax)
   138c4:	00 00                	add    %al,(%rax)
   138c6:	00 00                	add    %al,(%rax)
   138c8:	87 03                	xchg   %eax,(%rbx)
   138ca:	00 00                	add    %al,(%rax)
   138cc:	00 00                	add    %al,(%rax)
   138ce:	00 00                	add    %al,(%rax)
   138d0:	87 03                	xchg   %eax,(%rbx)
   138d2:	00 00                	add    %al,(%rax)
   138d4:	00 00                	add    %al,(%rax)
   138d6:	00 00                	add    %al,(%rax)
   138d8:	87 03                	xchg   %eax,(%rbx)
   138da:	00 00                	add    %al,(%rax)
   138dc:	00 00                	add    %al,(%rax)
   138de:	00 00                	add    %al,(%rax)
   138e0:	87 03                	xchg   %eax,(%rbx)
   138e2:	00 00                	add    %al,(%rax)
   138e4:	00 00                	add    %al,(%rax)
   138e6:	00 00                	add    %al,(%rax)
   138e8:	87 03                	xchg   %eax,(%rbx)
   138ea:	00 00                	add    %al,(%rax)
   138ec:	00 00                	add    %al,(%rax)
   138ee:	00 00                	add    %al,(%rax)
   138f0:	87 03                	xchg   %eax,(%rbx)
   138f2:	00 00                	add    %al,(%rax)
   138f4:	00 00                	add    %al,(%rax)
   138f6:	00 00                	add    %al,(%rax)
   138f8:	87 03                	xchg   %eax,(%rbx)
   138fa:	00 00                	add    %al,(%rax)
   138fc:	00 00                	add    %al,(%rax)
   138fe:	00 00                	add    %al,(%rax)
   13900:	95                   	xchg   %eax,%ebp
   13901:	03 00                	add    (%rax),%eax
   13903:	00 00                	add    %al,(%rax)
   13905:	00 00                	add    %al,(%rax)
   13907:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   1390d:	00 00                	add    %al,(%rax)
   1390f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13915:	00 00                	add    %al,(%rax)
   13917:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   1391d:	00 00                	add    %al,(%rax)
   1391f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13925:	00 00                	add    %al,(%rax)
   13927:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   1392d:	00 00                	add    %al,(%rax)
   1392f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13935:	00 00                	add    %al,(%rax)
   13937:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   1393d:	00 00                	add    %al,(%rax)
   1393f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13945:	00 00                	add    %al,(%rax)
   13947:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   1394d:	00 00                	add    %al,(%rax)
   1394f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13955:	00 00                	add    %al,(%rax)
   13957:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   1395d:	00 00                	add    %al,(%rax)
   1395f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13965:	00 00                	add    %al,(%rax)
   13967:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   1396d:	00 00                	add    %al,(%rax)
   1396f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13975:	00 00                	add    %al,(%rax)
   13977:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   1397d:	00 00                	add    %al,(%rax)
   1397f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13985:	00 00                	add    %al,(%rax)
   13987:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   1398d:	00 00                	add    %al,(%rax)
   1398f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13995:	00 00                	add    %al,(%rax)
   13997:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   1399d:	00 00                	add    %al,(%rax)
   1399f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139a5:	00 00                	add    %al,(%rax)
   139a7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139ad:	00 00                	add    %al,(%rax)
   139af:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139b5:	00 00                	add    %al,(%rax)
   139b7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139bd:	00 00                	add    %al,(%rax)
   139bf:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139c5:	00 00                	add    %al,(%rax)
   139c7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139cd:	00 00                	add    %al,(%rax)
   139cf:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139d5:	00 00                	add    %al,(%rax)
   139d7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139dd:	00 00                	add    %al,(%rax)
   139df:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139e5:	00 00                	add    %al,(%rax)
   139e7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139ed:	00 00                	add    %al,(%rax)
   139ef:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139f5:	00 00                	add    %al,(%rax)
   139f7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   139fd:	00 00                	add    %al,(%rax)
   139ff:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a05:	00 00                	add    %al,(%rax)
   13a07:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a0d:	00 00                	add    %al,(%rax)
   13a0f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a15:	00 00                	add    %al,(%rax)
   13a17:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a1d:	00 00                	add    %al,(%rax)
   13a1f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a25:	00 00                	add    %al,(%rax)
   13a27:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a2d:	00 00                	add    %al,(%rax)
   13a2f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a35:	00 00                	add    %al,(%rax)
   13a37:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a3d:	00 00                	add    %al,(%rax)
   13a3f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a45:	00 00                	add    %al,(%rax)
   13a47:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a4d:	00 00                	add    %al,(%rax)
   13a4f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a55:	00 00                	add    %al,(%rax)
   13a57:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a5d:	00 00                	add    %al,(%rax)
   13a5f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a65:	00 00                	add    %al,(%rax)
   13a67:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a6d:	00 00                	add    %al,(%rax)
   13a6f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a75:	00 00                	add    %al,(%rax)
   13a77:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a7d:	00 00                	add    %al,(%rax)
   13a7f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a85:	00 00                	add    %al,(%rax)
   13a87:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a8d:	00 00                	add    %al,(%rax)
   13a8f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a95:	00 00                	add    %al,(%rax)
   13a97:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13a9d:	00 00                	add    %al,(%rax)
   13a9f:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13aa5:	00 00                	add    %al,(%rax)
   13aa7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13aad:	00 00                	add    %al,(%rax)
   13aaf:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13ab5:	00 00                	add    %al,(%rax)
   13ab7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13abd:	00 00                	add    %al,(%rax)
   13abf:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13ac5:	00 00                	add    %al,(%rax)
   13ac7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13acd:	00 00                	add    %al,(%rax)
   13acf:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13ad5:	00 00                	add    %al,(%rax)
   13ad7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13add:	00 00                	add    %al,(%rax)
   13adf:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13ae5:	00 00                	add    %al,(%rax)
   13ae7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13aed:	00 00                	add    %al,(%rax)
   13aef:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13af5:	00 00                	add    %al,(%rax)
   13af7:	00 95 03 00 00 00    	add    %dl,0x3(%rbp)
   13afd:	00 00                	add    %al,(%rax)
   13aff:	00 1a                	add    %bl,(%rdx)
   13b01:	13 00                	adc    (%rax),%eax
   13b03:	00 00                	add    %al,(%rax)
   13b05:	00 00                	add    %al,(%rax)
   13b07:	00 25 13 00 00 00    	add    %ah,0x13(%rip)        # 13b20 <__intel_mic_avx512f_memcpy+0x1760>
   13b0d:	00 00                	add    %al,(%rax)
   13b0f:	00 15 13 00 00 00    	add    %dl,0x13(%rip)        # 13b28 <__intel_mic_avx512f_memcpy+0x1768>
   13b15:	00 00                	add    %al,(%rax)
   13b17:	00 08                	add    %cl,(%rax)
   13b19:	13 00                	adc    (%rax),%eax
   13b1b:	00 00                	add    %al,(%rax)
   13b1d:	00 00                	add    %al,(%rax)
   13b1f:	00 f3                	add    %dh,%bl
   13b21:	12 00                	adc    (%rax),%al
   13b23:	00 00                	add    %al,(%rax)
   13b25:	00 00                	add    %al,(%rax)
   13b27:	00 e8                	add    %ch,%al
   13b29:	12 00                	adc    (%rax),%al
   13b2b:	00 00                	add    %al,(%rax)
   13b2d:	00 00                	add    %al,(%rax)
   13b2f:	00 e8                	add    %ch,%al
   13b31:	12 00                	adc    (%rax),%al
   13b33:	00 00                	add    %al,(%rax)
   13b35:	00 00                	add    %al,(%rax)
   13b37:	00 e8                	add    %ch,%al
   13b39:	12 00                	adc    (%rax),%al
   13b3b:	00 00                	add    %al,(%rax)
   13b3d:	00 00                	add    %al,(%rax)
   13b3f:	00 d5                	add    %dl,%ch
   13b41:	12 00                	adc    (%rax),%al
   13b43:	00 00                	add    %al,(%rax)
   13b45:	00 00                	add    %al,(%rax)
   13b47:	00 ca                	add    %cl,%dl
   13b49:	12 00                	adc    (%rax),%al
   13b4b:	00 00                	add    %al,(%rax)
   13b4d:	00 00                	add    %al,(%rax)
   13b4f:	00 ca                	add    %cl,%dl
   13b51:	12 00                	adc    (%rax),%al
   13b53:	00 00                	add    %al,(%rax)
   13b55:	00 00                	add    %al,(%rax)
   13b57:	00 ca                	add    %cl,%dl
   13b59:	12 00                	adc    (%rax),%al
   13b5b:	00 00                	add    %al,(%rax)
   13b5d:	00 00                	add    %al,(%rax)
   13b5f:	00 ca                	add    %cl,%dl
   13b61:	12 00                	adc    (%rax),%al
   13b63:	00 00                	add    %al,(%rax)
   13b65:	00 00                	add    %al,(%rax)
   13b67:	00 ca                	add    %cl,%dl
   13b69:	12 00                	adc    (%rax),%al
   13b6b:	00 00                	add    %al,(%rax)
   13b6d:	00 00                	add    %al,(%rax)
   13b6f:	00 ca                	add    %cl,%dl
   13b71:	12 00                	adc    (%rax),%al
   13b73:	00 00                	add    %al,(%rax)
   13b75:	00 00                	add    %al,(%rax)
   13b77:	00 ca                	add    %cl,%dl
   13b79:	12 00                	adc    (%rax),%al
   13b7b:	00 00                	add    %al,(%rax)
   13b7d:	00 00                	add    %al,(%rax)
   13b7f:	00 b7 12 00 00 00    	add    %dh,0x12(%rdi)
   13b85:	00 00                	add    %al,(%rax)
   13b87:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13b8d:	00 00                	add    %al,(%rax)
   13b8f:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13b95:	00 00                	add    %al,(%rax)
   13b97:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13b9d:	00 00                	add    %al,(%rax)
   13b9f:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13ba5:	00 00                	add    %al,(%rax)
   13ba7:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13bad:	00 00                	add    %al,(%rax)
   13baf:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13bb5:	00 00                	add    %al,(%rax)
   13bb7:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13bbd:	00 00                	add    %al,(%rax)
   13bbf:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13bc5:	00 00                	add    %al,(%rax)
   13bc7:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13bcd:	00 00                	add    %al,(%rax)
   13bcf:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13bd5:	00 00                	add    %al,(%rax)
   13bd7:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13bdd:	00 00                	add    %al,(%rax)
   13bdf:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13be5:	00 00                	add    %al,(%rax)
   13be7:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13bed:	00 00                	add    %al,(%rax)
   13bef:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13bf5:	00 00                	add    %al,(%rax)
   13bf7:	00 a9 12 00 00 00    	add    %ch,0x12(%rcx)
   13bfd:	00 00                	add    %al,(%rax)
   13bff:	00 90 12 00 00 00    	add    %dl,0x12(%rax)
   13c05:	00 00                	add    %al,(%rax)
   13c07:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c0d:	00 00                	add    %al,(%rax)
   13c0f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c15:	00 00                	add    %al,(%rax)
   13c17:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c1d:	00 00                	add    %al,(%rax)
   13c1f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c25:	00 00                	add    %al,(%rax)
   13c27:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c2d:	00 00                	add    %al,(%rax)
   13c2f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c35:	00 00                	add    %al,(%rax)
   13c37:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c3d:	00 00                	add    %al,(%rax)
   13c3f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c45:	00 00                	add    %al,(%rax)
   13c47:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c4d:	00 00                	add    %al,(%rax)
   13c4f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c55:	00 00                	add    %al,(%rax)
   13c57:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c5d:	00 00                	add    %al,(%rax)
   13c5f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c65:	00 00                	add    %al,(%rax)
   13c67:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c6d:	00 00                	add    %al,(%rax)
   13c6f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c75:	00 00                	add    %al,(%rax)
   13c77:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c7d:	00 00                	add    %al,(%rax)
   13c7f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c85:	00 00                	add    %al,(%rax)
   13c87:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c8d:	00 00                	add    %al,(%rax)
   13c8f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c95:	00 00                	add    %al,(%rax)
   13c97:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13c9d:	00 00                	add    %al,(%rax)
   13c9f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13ca5:	00 00                	add    %al,(%rax)
   13ca7:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13cad:	00 00                	add    %al,(%rax)
   13caf:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13cb5:	00 00                	add    %al,(%rax)
   13cb7:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13cbd:	00 00                	add    %al,(%rax)
   13cbf:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13cc5:	00 00                	add    %al,(%rax)
   13cc7:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13ccd:	00 00                	add    %al,(%rax)
   13ccf:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13cd5:	00 00                	add    %al,(%rax)
   13cd7:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13cdd:	00 00                	add    %al,(%rax)
   13cdf:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13ce5:	00 00                	add    %al,(%rax)
   13ce7:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13ced:	00 00                	add    %al,(%rax)
   13cef:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13cf5:	00 00                	add    %al,(%rax)
   13cf7:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   13cfd:	00 00                	add    %al,(%rax)
   13cff:	00 69 12             	add    %ch,0x12(%rcx)
   13d02:	00 00                	add    %al,(%rax)
   13d04:	00 00                	add    %al,(%rax)
   13d06:	00 00                	add    %al,(%rax)
   13d08:	58                   	pop    %rax
   13d09:	12 00                	adc    (%rax),%al
   13d0b:	00 00                	add    %al,(%rax)
   13d0d:	00 00                	add    %al,(%rax)
   13d0f:	00 58 12             	add    %bl,0x12(%rax)
   13d12:	00 00                	add    %al,(%rax)
   13d14:	00 00                	add    %al,(%rax)
   13d16:	00 00                	add    %al,(%rax)
   13d18:	58                   	pop    %rax
   13d19:	12 00                	adc    (%rax),%al
   13d1b:	00 00                	add    %al,(%rax)
   13d1d:	00 00                	add    %al,(%rax)
   13d1f:	00 58 12             	add    %bl,0x12(%rax)
   13d22:	00 00                	add    %al,(%rax)
   13d24:	00 00                	add    %al,(%rax)
   13d26:	00 00                	add    %al,(%rax)
   13d28:	58                   	pop    %rax
   13d29:	12 00                	adc    (%rax),%al
   13d2b:	00 00                	add    %al,(%rax)
   13d2d:	00 00                	add    %al,(%rax)
   13d2f:	00 58 12             	add    %bl,0x12(%rax)
   13d32:	00 00                	add    %al,(%rax)
   13d34:	00 00                	add    %al,(%rax)
   13d36:	00 00                	add    %al,(%rax)
   13d38:	58                   	pop    %rax
   13d39:	12 00                	adc    (%rax),%al
   13d3b:	00 00                	add    %al,(%rax)
   13d3d:	00 00                	add    %al,(%rax)
   13d3f:	00 58 12             	add    %bl,0x12(%rax)
   13d42:	00 00                	add    %al,(%rax)
   13d44:	00 00                	add    %al,(%rax)
   13d46:	00 00                	add    %al,(%rax)
   13d48:	58                   	pop    %rax
   13d49:	12 00                	adc    (%rax),%al
   13d4b:	00 00                	add    %al,(%rax)
   13d4d:	00 00                	add    %al,(%rax)
   13d4f:	00 58 12             	add    %bl,0x12(%rax)
   13d52:	00 00                	add    %al,(%rax)
   13d54:	00 00                	add    %al,(%rax)
   13d56:	00 00                	add    %al,(%rax)
   13d58:	58                   	pop    %rax
   13d59:	12 00                	adc    (%rax),%al
   13d5b:	00 00                	add    %al,(%rax)
   13d5d:	00 00                	add    %al,(%rax)
   13d5f:	00 58 12             	add    %bl,0x12(%rax)
   13d62:	00 00                	add    %al,(%rax)
   13d64:	00 00                	add    %al,(%rax)
   13d66:	00 00                	add    %al,(%rax)
   13d68:	58                   	pop    %rax
   13d69:	12 00                	adc    (%rax),%al
   13d6b:	00 00                	add    %al,(%rax)
   13d6d:	00 00                	add    %al,(%rax)
   13d6f:	00 58 12             	add    %bl,0x12(%rax)
   13d72:	00 00                	add    %al,(%rax)
   13d74:	00 00                	add    %al,(%rax)
   13d76:	00 00                	add    %al,(%rax)
   13d78:	58                   	pop    %rax
   13d79:	12 00                	adc    (%rax),%al
   13d7b:	00 00                	add    %al,(%rax)
   13d7d:	00 00                	add    %al,(%rax)
   13d7f:	00 58 12             	add    %bl,0x12(%rax)
   13d82:	00 00                	add    %al,(%rax)
   13d84:	00 00                	add    %al,(%rax)
   13d86:	00 00                	add    %al,(%rax)
   13d88:	58                   	pop    %rax
   13d89:	12 00                	adc    (%rax),%al
   13d8b:	00 00                	add    %al,(%rax)
   13d8d:	00 00                	add    %al,(%rax)
   13d8f:	00 58 12             	add    %bl,0x12(%rax)
   13d92:	00 00                	add    %al,(%rax)
   13d94:	00 00                	add    %al,(%rax)
   13d96:	00 00                	add    %al,(%rax)
   13d98:	58                   	pop    %rax
   13d99:	12 00                	adc    (%rax),%al
   13d9b:	00 00                	add    %al,(%rax)
   13d9d:	00 00                	add    %al,(%rax)
   13d9f:	00 58 12             	add    %bl,0x12(%rax)
   13da2:	00 00                	add    %al,(%rax)
   13da4:	00 00                	add    %al,(%rax)
   13da6:	00 00                	add    %al,(%rax)
   13da8:	58                   	pop    %rax
   13da9:	12 00                	adc    (%rax),%al
   13dab:	00 00                	add    %al,(%rax)
   13dad:	00 00                	add    %al,(%rax)
   13daf:	00 58 12             	add    %bl,0x12(%rax)
   13db2:	00 00                	add    %al,(%rax)
   13db4:	00 00                	add    %al,(%rax)
   13db6:	00 00                	add    %al,(%rax)
   13db8:	58                   	pop    %rax
   13db9:	12 00                	adc    (%rax),%al
   13dbb:	00 00                	add    %al,(%rax)
   13dbd:	00 00                	add    %al,(%rax)
   13dbf:	00 58 12             	add    %bl,0x12(%rax)
   13dc2:	00 00                	add    %al,(%rax)
   13dc4:	00 00                	add    %al,(%rax)
   13dc6:	00 00                	add    %al,(%rax)
   13dc8:	58                   	pop    %rax
   13dc9:	12 00                	adc    (%rax),%al
   13dcb:	00 00                	add    %al,(%rax)
   13dcd:	00 00                	add    %al,(%rax)
   13dcf:	00 58 12             	add    %bl,0x12(%rax)
   13dd2:	00 00                	add    %al,(%rax)
   13dd4:	00 00                	add    %al,(%rax)
   13dd6:	00 00                	add    %al,(%rax)
   13dd8:	58                   	pop    %rax
   13dd9:	12 00                	adc    (%rax),%al
   13ddb:	00 00                	add    %al,(%rax)
   13ddd:	00 00                	add    %al,(%rax)
   13ddf:	00 58 12             	add    %bl,0x12(%rax)
   13de2:	00 00                	add    %al,(%rax)
   13de4:	00 00                	add    %al,(%rax)
   13de6:	00 00                	add    %al,(%rax)
   13de8:	58                   	pop    %rax
   13de9:	12 00                	adc    (%rax),%al
   13deb:	00 00                	add    %al,(%rax)
   13ded:	00 00                	add    %al,(%rax)
   13def:	00 58 12             	add    %bl,0x12(%rax)
   13df2:	00 00                	add    %al,(%rax)
   13df4:	00 00                	add    %al,(%rax)
   13df6:	00 00                	add    %al,(%rax)
   13df8:	58                   	pop    %rax
   13df9:	12 00                	adc    (%rax),%al
   13dfb:	00 00                	add    %al,(%rax)
   13dfd:	00 00                	add    %al,(%rax)
   13dff:	00 58 12             	add    %bl,0x12(%rax)
   13e02:	00 00                	add    %al,(%rax)
   13e04:	00 00                	add    %al,(%rax)
   13e06:	00 00                	add    %al,(%rax)
   13e08:	58                   	pop    %rax
   13e09:	12 00                	adc    (%rax),%al
   13e0b:	00 00                	add    %al,(%rax)
   13e0d:	00 00                	add    %al,(%rax)
   13e0f:	00 58 12             	add    %bl,0x12(%rax)
   13e12:	00 00                	add    %al,(%rax)
   13e14:	00 00                	add    %al,(%rax)
   13e16:	00 00                	add    %al,(%rax)
   13e18:	58                   	pop    %rax
   13e19:	12 00                	adc    (%rax),%al
   13e1b:	00 00                	add    %al,(%rax)
   13e1d:	00 00                	add    %al,(%rax)
   13e1f:	00 58 12             	add    %bl,0x12(%rax)
   13e22:	00 00                	add    %al,(%rax)
   13e24:	00 00                	add    %al,(%rax)
   13e26:	00 00                	add    %al,(%rax)
   13e28:	58                   	pop    %rax
   13e29:	12 00                	adc    (%rax),%al
   13e2b:	00 00                	add    %al,(%rax)
   13e2d:	00 00                	add    %al,(%rax)
   13e2f:	00 58 12             	add    %bl,0x12(%rax)
   13e32:	00 00                	add    %al,(%rax)
   13e34:	00 00                	add    %al,(%rax)
   13e36:	00 00                	add    %al,(%rax)
   13e38:	58                   	pop    %rax
   13e39:	12 00                	adc    (%rax),%al
   13e3b:	00 00                	add    %al,(%rax)
   13e3d:	00 00                	add    %al,(%rax)
   13e3f:	00 58 12             	add    %bl,0x12(%rax)
   13e42:	00 00                	add    %al,(%rax)
   13e44:	00 00                	add    %al,(%rax)
   13e46:	00 00                	add    %al,(%rax)
   13e48:	58                   	pop    %rax
   13e49:	12 00                	adc    (%rax),%al
   13e4b:	00 00                	add    %al,(%rax)
   13e4d:	00 00                	add    %al,(%rax)
   13e4f:	00 58 12             	add    %bl,0x12(%rax)
   13e52:	00 00                	add    %al,(%rax)
   13e54:	00 00                	add    %al,(%rax)
   13e56:	00 00                	add    %al,(%rax)
   13e58:	58                   	pop    %rax
   13e59:	12 00                	adc    (%rax),%al
   13e5b:	00 00                	add    %al,(%rax)
   13e5d:	00 00                	add    %al,(%rax)
   13e5f:	00 58 12             	add    %bl,0x12(%rax)
   13e62:	00 00                	add    %al,(%rax)
   13e64:	00 00                	add    %al,(%rax)
   13e66:	00 00                	add    %al,(%rax)
   13e68:	58                   	pop    %rax
   13e69:	12 00                	adc    (%rax),%al
   13e6b:	00 00                	add    %al,(%rax)
   13e6d:	00 00                	add    %al,(%rax)
   13e6f:	00 58 12             	add    %bl,0x12(%rax)
   13e72:	00 00                	add    %al,(%rax)
   13e74:	00 00                	add    %al,(%rax)
   13e76:	00 00                	add    %al,(%rax)
   13e78:	58                   	pop    %rax
   13e79:	12 00                	adc    (%rax),%al
   13e7b:	00 00                	add    %al,(%rax)
   13e7d:	00 00                	add    %al,(%rax)
   13e7f:	00 58 12             	add    %bl,0x12(%rax)
   13e82:	00 00                	add    %al,(%rax)
   13e84:	00 00                	add    %al,(%rax)
   13e86:	00 00                	add    %al,(%rax)
   13e88:	58                   	pop    %rax
   13e89:	12 00                	adc    (%rax),%al
   13e8b:	00 00                	add    %al,(%rax)
   13e8d:	00 00                	add    %al,(%rax)
   13e8f:	00 58 12             	add    %bl,0x12(%rax)
   13e92:	00 00                	add    %al,(%rax)
   13e94:	00 00                	add    %al,(%rax)
   13e96:	00 00                	add    %al,(%rax)
   13e98:	58                   	pop    %rax
   13e99:	12 00                	adc    (%rax),%al
   13e9b:	00 00                	add    %al,(%rax)
   13e9d:	00 00                	add    %al,(%rax)
   13e9f:	00 58 12             	add    %bl,0x12(%rax)
   13ea2:	00 00                	add    %al,(%rax)
   13ea4:	00 00                	add    %al,(%rax)
   13ea6:	00 00                	add    %al,(%rax)
   13ea8:	58                   	pop    %rax
   13ea9:	12 00                	adc    (%rax),%al
   13eab:	00 00                	add    %al,(%rax)
   13ead:	00 00                	add    %al,(%rax)
   13eaf:	00 58 12             	add    %bl,0x12(%rax)
   13eb2:	00 00                	add    %al,(%rax)
   13eb4:	00 00                	add    %al,(%rax)
   13eb6:	00 00                	add    %al,(%rax)
   13eb8:	58                   	pop    %rax
   13eb9:	12 00                	adc    (%rax),%al
   13ebb:	00 00                	add    %al,(%rax)
   13ebd:	00 00                	add    %al,(%rax)
   13ebf:	00 58 12             	add    %bl,0x12(%rax)
   13ec2:	00 00                	add    %al,(%rax)
   13ec4:	00 00                	add    %al,(%rax)
   13ec6:	00 00                	add    %al,(%rax)
   13ec8:	58                   	pop    %rax
   13ec9:	12 00                	adc    (%rax),%al
   13ecb:	00 00                	add    %al,(%rax)
   13ecd:	00 00                	add    %al,(%rax)
   13ecf:	00 58 12             	add    %bl,0x12(%rax)
   13ed2:	00 00                	add    %al,(%rax)
   13ed4:	00 00                	add    %al,(%rax)
   13ed6:	00 00                	add    %al,(%rax)
   13ed8:	58                   	pop    %rax
   13ed9:	12 00                	adc    (%rax),%al
   13edb:	00 00                	add    %al,(%rax)
   13edd:	00 00                	add    %al,(%rax)
   13edf:	00 58 12             	add    %bl,0x12(%rax)
   13ee2:	00 00                	add    %al,(%rax)
   13ee4:	00 00                	add    %al,(%rax)
   13ee6:	00 00                	add    %al,(%rax)
   13ee8:	58                   	pop    %rax
   13ee9:	12 00                	adc    (%rax),%al
   13eeb:	00 00                	add    %al,(%rax)
   13eed:	00 00                	add    %al,(%rax)
   13eef:	00 58 12             	add    %bl,0x12(%rax)
   13ef2:	00 00                	add    %al,(%rax)
   13ef4:	00 00                	add    %al,(%rax)
   13ef6:	00 00                	add    %al,(%rax)
   13ef8:	58                   	pop    %rax
   13ef9:	12 00                	adc    (%rax),%al
   13efb:	00 00                	add    %al,(%rax)
   13efd:	00 00                	add    %al,(%rax)
   13eff:	00 41 5e             	add    %al,0x5e(%rcx)
   13f02:	c3                   	retq   
   13f03:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   13f08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   13f0f:	00 
   13f10:	90                   	nop
   13f11:	90                   	nop
   13f12:	90                   	nop
   13f13:	90                   	nop
   13f14:	90                   	nop
   13f15:	90                   	nop
   13f16:	90                   	nop
   13f17:	90                   	nop
   13f18:	90                   	nop
   13f19:	90                   	nop
   13f1a:	90                   	nop
   13f1b:	90                   	nop
   13f1c:	90                   	nop
   13f1d:	90                   	nop
   13f1e:	90                   	nop
   13f1f:	90                   	nop
   13f20:	90                   	nop
   13f21:	90                   	nop
   13f22:	90                   	nop
   13f23:	90                   	nop
   13f24:	90                   	nop
   13f25:	90                   	nop
   13f26:	90                   	nop
   13f27:	90                   	nop
   13f28:	90                   	nop
   13f29:	90                   	nop
   13f2a:	90                   	nop
   13f2b:	90                   	nop
   13f2c:	90                   	nop
   13f2d:	90                   	nop
   13f2e:	90                   	nop
   13f2f:	90                   	nop
   13f30:	90                   	nop
   13f31:	90                   	nop
   13f32:	90                   	nop
   13f33:	90                   	nop
   13f34:	90                   	nop
   13f35:	90                   	nop
   13f36:	90                   	nop
   13f37:	90                   	nop
   13f38:	90                   	nop
   13f39:	90                   	nop
   13f3a:	90                   	nop
   13f3b:	90                   	nop
   13f3c:	90                   	nop
   13f3d:	90                   	nop
   13f3e:	90                   	nop
   13f3f:	90                   	nop

0000000000013f40 <__intel_mic_avx512f_memset>:
   13f40:	f3 0f 1e fa          	endbr64 
   13f44:	49 89 fb             	mov    %rdi,%r11
   13f47:	48 8d 0d 46 19 22 00 	lea    0x221946(%rip),%rcx        # 235894 <__libirc_largest_cache_size_quoter>
   13f4e:	48 89 f8             	mov    %rdi,%rax
   13f51:	49 ba 01 01 01 01 01 	movabs $0x101010101010101,%r10
   13f58:	01 01 01 
   13f5b:	4c 0f b6 ce          	movzbq %sil,%r9
   13f5f:	4d 0f af ca          	imul   %r10,%r9
   13f63:	48 8d 35 96 14 00 00 	lea    0x1496(%rip),%rsi        # 15400 <__intel_mic_avx512f_memset+0x14c0>
   13f6a:	62 d2 7d 48 7c c1    	vpbroadcastd %r9d,%zmm0
   13f70:	48 81 fa 80 00 00 00 	cmp    $0x80,%rdx
   13f77:	7d 0c                	jge    13f85 <__intel_mic_avx512f_memset+0x45>
   13f79:	4d 89 da             	mov    %r11,%r10
   13f7c:	4c 03 d2             	add    %rdx,%r10
   13f7f:	48 2b 34 d6          	sub    (%rsi,%rdx,8),%rsi
   13f83:	ff e6                	jmpq   *%rsi
   13f85:	48 8d 35 74 02 00 00 	lea    0x274(%rip),%rsi        # 14200 <__intel_mic_avx512f_memset+0x2c0>
   13f8c:	4d 89 d8             	mov    %r11,%r8
   13f8f:	49 f7 d8             	neg    %r8
   13f92:	49 83 c0 40          	add    $0x40,%r8
   13f96:	49 83 e0 3f          	and    $0x3f,%r8
   13f9a:	74 12                	je     13fae <__intel_mic_avx512f_memset+0x6e>
   13f9c:	49 2b d0             	sub    %r8,%rdx
   13f9f:	4d 89 da             	mov    %r11,%r10
   13fa2:	4d 03 d0             	add    %r8,%r10
   13fa5:	4a 2b 34 c6          	sub    (%rsi,%r8,8),%rsi
   13fa9:	ff e6                	jmpq   *%rsi
   13fab:	4d 03 d8             	add    %r8,%r11
   13fae:	48 81 fa 00 02 00 00 	cmp    $0x200,%rdx
   13fb5:	0f 8c 25 01 00 00    	jl     140e0 <__intel_mic_avx512f_memset+0x1a0>
   13fbb:	48 3b 11             	cmp    (%rcx),%rdx
   13fbe:	73 53                	jae    14013 <__intel_mic_avx512f_memset+0xd3>
   13fc0:	62 d1 7c 48 29 03    	vmovaps %zmm0,(%r11)
   13fc6:	62 d1 7c 48 29 43 01 	vmovaps %zmm0,0x40(%r11)
   13fcd:	62 d1 7c 48 29 43 02 	vmovaps %zmm0,0x80(%r11)
   13fd4:	62 d1 7c 48 29 43 03 	vmovaps %zmm0,0xc0(%r11)
   13fdb:	4d 8d 9b 00 02 00 00 	lea    0x200(%r11),%r11
   13fe2:	48 81 ea 00 02 00 00 	sub    $0x200,%rdx
   13fe9:	62 d1 7c 48 29 43 fc 	vmovaps %zmm0,-0x100(%r11)
   13ff0:	62 d1 7c 48 29 43 fd 	vmovaps %zmm0,-0xc0(%r11)
   13ff7:	62 d1 7c 48 29 43 fe 	vmovaps %zmm0,-0x80(%r11)
   13ffe:	62 d1 7c 48 29 43 ff 	vmovaps %zmm0,-0x40(%r11)
   14005:	48 81 fa 00 02 00 00 	cmp    $0x200,%rdx
   1400c:	7d b2                	jge    13fc0 <__intel_mic_avx512f_memset+0x80>
   1400e:	e9 cd 00 00 00       	jmpq   140e0 <__intel_mic_avx512f_memset+0x1a0>
   14013:	62 d1 7d 48 e7 03    	vmovntdq %zmm0,(%r11)
   14019:	62 d1 7d 48 e7 43 01 	vmovntdq %zmm0,0x40(%r11)
   14020:	62 d1 7d 48 e7 43 02 	vmovntdq %zmm0,0x80(%r11)
   14027:	62 d1 7d 48 e7 43 03 	vmovntdq %zmm0,0xc0(%r11)
   1402e:	4d 8d 9b 00 02 00 00 	lea    0x200(%r11),%r11
   14035:	48 81 ea 00 02 00 00 	sub    $0x200,%rdx
   1403c:	62 d1 7d 48 e7 43 fc 	vmovntdq %zmm0,-0x100(%r11)
   14043:	62 d1 7d 48 e7 43 fd 	vmovntdq %zmm0,-0xc0(%r11)
   1404a:	62 d1 7d 48 e7 43 fe 	vmovntdq %zmm0,-0x80(%r11)
   14051:	62 d1 7d 48 e7 43 ff 	vmovntdq %zmm0,-0x40(%r11)
   14058:	48 81 fa 00 02 00 00 	cmp    $0x200,%rdx
   1405f:	7d b2                	jge    14013 <__intel_mic_avx512f_memset+0xd3>
   14061:	0f ae f8             	sfence 
   14064:	eb 7a                	jmp    140e0 <__intel_mic_avx512f_memset+0x1a0>
   14066:	45 88 0b             	mov    %r9b,(%r11)
   14069:	e9 3d ff ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   1406e:	66 45 89 0b          	mov    %r9w,(%r11)
   14072:	e9 34 ff ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   14077:	66 45 89 0b          	mov    %r9w,(%r11)
   1407b:	45 88 4b 02          	mov    %r9b,0x2(%r11)
   1407f:	e9 27 ff ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   14084:	45 89 0b             	mov    %r9d,(%r11)
   14087:	e9 1f ff ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   1408c:	45 89 0b             	mov    %r9d,(%r11)
   1408f:	45 89 4a fc          	mov    %r9d,-0x4(%r10)
   14093:	e9 13 ff ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   14098:	4d 89 0b             	mov    %r9,(%r11)
   1409b:	e9 0b ff ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   140a0:	4d 89 0b             	mov    %r9,(%r11)
   140a3:	4d 89 4a f8          	mov    %r9,-0x8(%r10)
   140a7:	e9 ff fe ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   140ac:	c4 c1 78 11 03       	vmovups %xmm0,(%r11)
   140b1:	e9 f5 fe ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   140b6:	c4 c1 78 11 03       	vmovups %xmm0,(%r11)
   140bb:	c4 c1 78 11 42 f0    	vmovups %xmm0,-0x10(%r10)
   140c1:	e9 e5 fe ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   140c6:	c4 c1 7c 11 03       	vmovups %ymm0,(%r11)
   140cb:	e9 db fe ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   140d0:	c4 c1 7c 11 03       	vmovups %ymm0,(%r11)
   140d5:	c4 c1 7c 11 42 e0    	vmovups %ymm0,-0x20(%r10)
   140db:	e9 cb fe ff ff       	jmpq   13fab <__intel_mic_avx512f_memset+0x6b>
   140e0:	4d 89 da             	mov    %r11,%r10
   140e3:	4c 03 d2             	add    %rdx,%r10
   140e6:	4c 03 da             	add    %rdx,%r11
   140e9:	49 83 e3 c0          	and    $0xffffffffffffffc0,%r11
   140ed:	48 8d 35 0c 03 00 00 	lea    0x30c(%rip),%rsi        # 14400 <__intel_mic_avx512f_memset+0x4c0>
   140f4:	48 2b 34 d6          	sub    (%rsi,%rdx,8),%rsi
   140f8:	ff e6                	jmpq   *%rsi
   140fa:	62 d1 7c 48 29 43 f9 	vmovaps %zmm0,-0x1c0(%r11)
   14101:	62 d1 7c 48 29 43 fa 	vmovaps %zmm0,-0x180(%r11)
   14108:	62 d1 7c 48 29 43 fb 	vmovaps %zmm0,-0x140(%r11)
   1410f:	62 d1 7c 48 29 43 fc 	vmovaps %zmm0,-0x100(%r11)
   14116:	62 d1 7c 48 29 43 fd 	vmovaps %zmm0,-0xc0(%r11)
   1411d:	62 d1 7c 48 29 43 fe 	vmovaps %zmm0,-0x80(%r11)
   14124:	62 d1 7c 48 29 43 ff 	vmovaps %zmm0,-0x40(%r11)
   1412b:	4c 89 d2             	mov    %r10,%rdx
   1412e:	48 83 e2 3f          	and    $0x3f,%rdx
   14132:	48 8d 35 c7 02 00 00 	lea    0x2c7(%rip),%rsi        # 14400 <__intel_mic_avx512f_memset+0x4c0>
   14139:	48 2b 34 d6          	sub    (%rsi,%rdx,8),%rsi
   1413d:	ff e6                	jmpq   *%rsi
   1413f:	45 88 0b             	mov    %r9b,(%r11)
   14142:	e9 b9 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   14147:	e9 b4 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   1414c:	66 45 89 0b          	mov    %r9w,(%r11)
   14150:	e9 ab 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   14155:	66 45 89 0b          	mov    %r9w,(%r11)
   14159:	45 88 4b 02          	mov    %r9b,0x2(%r11)
   1415d:	e9 9e 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   14162:	45 89 0b             	mov    %r9d,(%r11)
   14165:	e9 96 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   1416a:	45 89 0b             	mov    %r9d,(%r11)
   1416d:	45 89 4a fc          	mov    %r9d,-0x4(%r10)
   14171:	e9 8a 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   14176:	4d 89 0b             	mov    %r9,(%r11)
   14179:	e9 82 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   1417e:	4d 89 0b             	mov    %r9,(%r11)
   14181:	4d 89 4a f8          	mov    %r9,-0x8(%r10)
   14185:	e9 76 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   1418a:	c4 c1 78 11 03       	vmovups %xmm0,(%r11)
   1418f:	e9 6c 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   14194:	c4 c1 78 11 03       	vmovups %xmm0,(%r11)
   14199:	c4 c1 78 11 42 f0    	vmovups %xmm0,-0x10(%r10)
   1419f:	e9 5c 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   141a4:	c4 c1 7c 11 03       	vmovups %ymm0,(%r11)
   141a9:	e9 52 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   141ae:	c4 c1 7c 11 03       	vmovups %ymm0,(%r11)
   141b3:	c4 c1 7c 11 42 e0    	vmovups %ymm0,-0x20(%r10)
   141b9:	e9 42 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   141be:	62 d1 7c 48 11 03    	vmovups %zmm0,(%r11)
   141c4:	e9 37 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   141c9:	62 d1 7c 48 11 03    	vmovups %zmm0,(%r11)
   141cf:	62 d1 7c 48 11 42 ff 	vmovups %zmm0,-0x40(%r10)
   141d6:	e9 25 16 00 00       	jmpq   15800 <__intel_mic_avx512f_memset+0x18c0>
   141db:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   141e2:	00 
   141e3:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   141ea:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   141f1:	00 
   141f2:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   141f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   14200:	97                   	xchg   %eax,%edi
   14201:	01 00                	add    %eax,(%rax)
   14203:	00 00                	add    %al,(%rax)
   14205:	00 00                	add    %al,(%rax)
   14207:	00 9a 01 00 00 00    	add    %bl,0x1(%rdx)
   1420d:	00 00                	add    %al,(%rax)
   1420f:	00 92 01 00 00 00    	add    %dl,0x1(%rdx)
   14215:	00 00                	add    %al,(%rax)
   14217:	00 89 01 00 00 00    	add    %cl,0x1(%rcx)
   1421d:	00 00                	add    %al,(%rax)
   1421f:	00 7c 01 00          	add    %bh,0x0(%rcx,%rax,1)
   14223:	00 00                	add    %al,(%rax)
   14225:	00 00                	add    %al,(%rax)
   14227:	00 74 01 00          	add    %dh,0x0(%rcx,%rax,1)
   1422b:	00 00                	add    %al,(%rax)
   1422d:	00 00                	add    %al,(%rax)
   1422f:	00 74 01 00          	add    %dh,0x0(%rcx,%rax,1)
   14233:	00 00                	add    %al,(%rax)
   14235:	00 00                	add    %al,(%rax)
   14237:	00 74 01 00          	add    %dh,0x0(%rcx,%rax,1)
   1423b:	00 00                	add    %al,(%rax)
   1423d:	00 00                	add    %al,(%rax)
   1423f:	00 68 01             	add    %ch,0x1(%rax)
   14242:	00 00                	add    %al,(%rax)
   14244:	00 00                	add    %al,(%rax)
   14246:	00 00                	add    %al,(%rax)
   14248:	60                   	(bad)  
   14249:	01 00                	add    %eax,(%rax)
   1424b:	00 00                	add    %al,(%rax)
   1424d:	00 00                	add    %al,(%rax)
   1424f:	00 60 01             	add    %ah,0x1(%rax)
   14252:	00 00                	add    %al,(%rax)
   14254:	00 00                	add    %al,(%rax)
   14256:	00 00                	add    %al,(%rax)
   14258:	60                   	(bad)  
   14259:	01 00                	add    %eax,(%rax)
   1425b:	00 00                	add    %al,(%rax)
   1425d:	00 00                	add    %al,(%rax)
   1425f:	00 60 01             	add    %ah,0x1(%rax)
   14262:	00 00                	add    %al,(%rax)
   14264:	00 00                	add    %al,(%rax)
   14266:	00 00                	add    %al,(%rax)
   14268:	60                   	(bad)  
   14269:	01 00                	add    %eax,(%rax)
   1426b:	00 00                	add    %al,(%rax)
   1426d:	00 00                	add    %al,(%rax)
   1426f:	00 60 01             	add    %ah,0x1(%rax)
   14272:	00 00                	add    %al,(%rax)
   14274:	00 00                	add    %al,(%rax)
   14276:	00 00                	add    %al,(%rax)
   14278:	60                   	(bad)  
   14279:	01 00                	add    %eax,(%rax)
   1427b:	00 00                	add    %al,(%rax)
   1427d:	00 00                	add    %al,(%rax)
   1427f:	00 54 01 00          	add    %dl,0x0(%rcx,%rax,1)
   14283:	00 00                	add    %al,(%rax)
   14285:	00 00                	add    %al,(%rax)
   14287:	00 4a 01             	add    %cl,0x1(%rdx)
   1428a:	00 00                	add    %al,(%rax)
   1428c:	00 00                	add    %al,(%rax)
   1428e:	00 00                	add    %al,(%rax)
   14290:	4a 01 00             	rex.WX add %rax,(%rax)
   14293:	00 00                	add    %al,(%rax)
   14295:	00 00                	add    %al,(%rax)
   14297:	00 4a 01             	add    %cl,0x1(%rdx)
   1429a:	00 00                	add    %al,(%rax)
   1429c:	00 00                	add    %al,(%rax)
   1429e:	00 00                	add    %al,(%rax)
   142a0:	4a 01 00             	rex.WX add %rax,(%rax)
   142a3:	00 00                	add    %al,(%rax)
   142a5:	00 00                	add    %al,(%rax)
   142a7:	00 4a 01             	add    %cl,0x1(%rdx)
   142aa:	00 00                	add    %al,(%rax)
   142ac:	00 00                	add    %al,(%rax)
   142ae:	00 00                	add    %al,(%rax)
   142b0:	4a 01 00             	rex.WX add %rax,(%rax)
   142b3:	00 00                	add    %al,(%rax)
   142b5:	00 00                	add    %al,(%rax)
   142b7:	00 4a 01             	add    %cl,0x1(%rdx)
   142ba:	00 00                	add    %al,(%rax)
   142bc:	00 00                	add    %al,(%rax)
   142be:	00 00                	add    %al,(%rax)
   142c0:	4a 01 00             	rex.WX add %rax,(%rax)
   142c3:	00 00                	add    %al,(%rax)
   142c5:	00 00                	add    %al,(%rax)
   142c7:	00 4a 01             	add    %cl,0x1(%rdx)
   142ca:	00 00                	add    %al,(%rax)
   142cc:	00 00                	add    %al,(%rax)
   142ce:	00 00                	add    %al,(%rax)
   142d0:	4a 01 00             	rex.WX add %rax,(%rax)
   142d3:	00 00                	add    %al,(%rax)
   142d5:	00 00                	add    %al,(%rax)
   142d7:	00 4a 01             	add    %cl,0x1(%rdx)
   142da:	00 00                	add    %al,(%rax)
   142dc:	00 00                	add    %al,(%rax)
   142de:	00 00                	add    %al,(%rax)
   142e0:	4a 01 00             	rex.WX add %rax,(%rax)
   142e3:	00 00                	add    %al,(%rax)
   142e5:	00 00                	add    %al,(%rax)
   142e7:	00 4a 01             	add    %cl,0x1(%rdx)
   142ea:	00 00                	add    %al,(%rax)
   142ec:	00 00                	add    %al,(%rax)
   142ee:	00 00                	add    %al,(%rax)
   142f0:	4a 01 00             	rex.WX add %rax,(%rax)
   142f3:	00 00                	add    %al,(%rax)
   142f5:	00 00                	add    %al,(%rax)
   142f7:	00 4a 01             	add    %cl,0x1(%rdx)
   142fa:	00 00                	add    %al,(%rax)
   142fc:	00 00                	add    %al,(%rax)
   142fe:	00 00                	add    %al,(%rax)
   14300:	3a 01                	cmp    (%rcx),%al
   14302:	00 00                	add    %al,(%rax)
   14304:	00 00                	add    %al,(%rax)
   14306:	00 00                	add    %al,(%rax)
   14308:	30 01                	xor    %al,(%rcx)
   1430a:	00 00                	add    %al,(%rax)
   1430c:	00 00                	add    %al,(%rax)
   1430e:	00 00                	add    %al,(%rax)
   14310:	30 01                	xor    %al,(%rcx)
   14312:	00 00                	add    %al,(%rax)
   14314:	00 00                	add    %al,(%rax)
   14316:	00 00                	add    %al,(%rax)
   14318:	30 01                	xor    %al,(%rcx)
   1431a:	00 00                	add    %al,(%rax)
   1431c:	00 00                	add    %al,(%rax)
   1431e:	00 00                	add    %al,(%rax)
   14320:	30 01                	xor    %al,(%rcx)
   14322:	00 00                	add    %al,(%rax)
   14324:	00 00                	add    %al,(%rax)
   14326:	00 00                	add    %al,(%rax)
   14328:	30 01                	xor    %al,(%rcx)
   1432a:	00 00                	add    %al,(%rax)
   1432c:	00 00                	add    %al,(%rax)
   1432e:	00 00                	add    %al,(%rax)
   14330:	30 01                	xor    %al,(%rcx)
   14332:	00 00                	add    %al,(%rax)
   14334:	00 00                	add    %al,(%rax)
   14336:	00 00                	add    %al,(%rax)
   14338:	30 01                	xor    %al,(%rcx)
   1433a:	00 00                	add    %al,(%rax)
   1433c:	00 00                	add    %al,(%rax)
   1433e:	00 00                	add    %al,(%rax)
   14340:	30 01                	xor    %al,(%rcx)
   14342:	00 00                	add    %al,(%rax)
   14344:	00 00                	add    %al,(%rax)
   14346:	00 00                	add    %al,(%rax)
   14348:	30 01                	xor    %al,(%rcx)
   1434a:	00 00                	add    %al,(%rax)
   1434c:	00 00                	add    %al,(%rax)
   1434e:	00 00                	add    %al,(%rax)
   14350:	30 01                	xor    %al,(%rcx)
   14352:	00 00                	add    %al,(%rax)
   14354:	00 00                	add    %al,(%rax)
   14356:	00 00                	add    %al,(%rax)
   14358:	30 01                	xor    %al,(%rcx)
   1435a:	00 00                	add    %al,(%rax)
   1435c:	00 00                	add    %al,(%rax)
   1435e:	00 00                	add    %al,(%rax)
   14360:	30 01                	xor    %al,(%rcx)
   14362:	00 00                	add    %al,(%rax)
   14364:	00 00                	add    %al,(%rax)
   14366:	00 00                	add    %al,(%rax)
   14368:	30 01                	xor    %al,(%rcx)
   1436a:	00 00                	add    %al,(%rax)
   1436c:	00 00                	add    %al,(%rax)
   1436e:	00 00                	add    %al,(%rax)
   14370:	30 01                	xor    %al,(%rcx)
   14372:	00 00                	add    %al,(%rax)
   14374:	00 00                	add    %al,(%rax)
   14376:	00 00                	add    %al,(%rax)
   14378:	30 01                	xor    %al,(%rcx)
   1437a:	00 00                	add    %al,(%rax)
   1437c:	00 00                	add    %al,(%rax)
   1437e:	00 00                	add    %al,(%rax)
   14380:	30 01                	xor    %al,(%rcx)
   14382:	00 00                	add    %al,(%rax)
   14384:	00 00                	add    %al,(%rax)
   14386:	00 00                	add    %al,(%rax)
   14388:	30 01                	xor    %al,(%rcx)
   1438a:	00 00                	add    %al,(%rax)
   1438c:	00 00                	add    %al,(%rax)
   1438e:	00 00                	add    %al,(%rax)
   14390:	30 01                	xor    %al,(%rcx)
   14392:	00 00                	add    %al,(%rax)
   14394:	00 00                	add    %al,(%rax)
   14396:	00 00                	add    %al,(%rax)
   14398:	30 01                	xor    %al,(%rcx)
   1439a:	00 00                	add    %al,(%rax)
   1439c:	00 00                	add    %al,(%rax)
   1439e:	00 00                	add    %al,(%rax)
   143a0:	30 01                	xor    %al,(%rcx)
   143a2:	00 00                	add    %al,(%rax)
   143a4:	00 00                	add    %al,(%rax)
   143a6:	00 00                	add    %al,(%rax)
   143a8:	30 01                	xor    %al,(%rcx)
   143aa:	00 00                	add    %al,(%rax)
   143ac:	00 00                	add    %al,(%rax)
   143ae:	00 00                	add    %al,(%rax)
   143b0:	30 01                	xor    %al,(%rcx)
   143b2:	00 00                	add    %al,(%rax)
   143b4:	00 00                	add    %al,(%rax)
   143b6:	00 00                	add    %al,(%rax)
   143b8:	30 01                	xor    %al,(%rcx)
   143ba:	00 00                	add    %al,(%rax)
   143bc:	00 00                	add    %al,(%rax)
   143be:	00 00                	add    %al,(%rax)
   143c0:	30 01                	xor    %al,(%rcx)
   143c2:	00 00                	add    %al,(%rax)
   143c4:	00 00                	add    %al,(%rax)
   143c6:	00 00                	add    %al,(%rax)
   143c8:	30 01                	xor    %al,(%rcx)
   143ca:	00 00                	add    %al,(%rax)
   143cc:	00 00                	add    %al,(%rax)
   143ce:	00 00                	add    %al,(%rax)
   143d0:	30 01                	xor    %al,(%rcx)
   143d2:	00 00                	add    %al,(%rax)
   143d4:	00 00                	add    %al,(%rax)
   143d6:	00 00                	add    %al,(%rax)
   143d8:	30 01                	xor    %al,(%rcx)
   143da:	00 00                	add    %al,(%rax)
   143dc:	00 00                	add    %al,(%rax)
   143de:	00 00                	add    %al,(%rax)
   143e0:	30 01                	xor    %al,(%rcx)
   143e2:	00 00                	add    %al,(%rax)
   143e4:	00 00                	add    %al,(%rax)
   143e6:	00 00                	add    %al,(%rax)
   143e8:	30 01                	xor    %al,(%rcx)
   143ea:	00 00                	add    %al,(%rax)
   143ec:	00 00                	add    %al,(%rax)
   143ee:	00 00                	add    %al,(%rax)
   143f0:	30 01                	xor    %al,(%rcx)
   143f2:	00 00                	add    %al,(%rax)
   143f4:	00 00                	add    %al,(%rax)
   143f6:	00 00                	add    %al,(%rax)
   143f8:	30 01                	xor    %al,(%rcx)
   143fa:	00 00                	add    %al,(%rax)
   143fc:	00 00                	add    %al,(%rax)
   143fe:	00 00                	add    %al,(%rax)
   14400:	b9 02 00 00 00       	mov    $0x2,%ecx
   14405:	00 00                	add    %al,(%rax)
   14407:	00 c1                	add    %al,%cl
   14409:	02 00                	add    (%rax),%al
   1440b:	00 00                	add    %al,(%rax)
   1440d:	00 00                	add    %al,(%rax)
   1440f:	00 b4 02 00 00 00 00 	add    %dh,0x0(%rdx,%rax,1)
   14416:	00 00                	add    %al,(%rax)
   14418:	ab                   	stos   %eax,%es:(%rdi)
   14419:	02 00                	add    (%rax),%al
   1441b:	00 00                	add    %al,(%rax)
   1441d:	00 00                	add    %al,(%rax)
   1441f:	00 9e 02 00 00 00    	add    %bl,0x2(%rsi)
   14425:	00 00                	add    %al,(%rax)
   14427:	00 96 02 00 00 00    	add    %dl,0x2(%rsi)
   1442d:	00 00                	add    %al,(%rax)
   1442f:	00 96 02 00 00 00    	add    %dl,0x2(%rsi)
   14435:	00 00                	add    %al,(%rax)
   14437:	00 96 02 00 00 00    	add    %dl,0x2(%rsi)
   1443d:	00 00                	add    %al,(%rax)
   1443f:	00 8a 02 00 00 00    	add    %cl,0x2(%rdx)
   14445:	00 00                	add    %al,(%rax)
   14447:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   1444d:	00 00                	add    %al,(%rax)
   1444f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   14455:	00 00                	add    %al,(%rax)
   14457:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   1445d:	00 00                	add    %al,(%rax)
   1445f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   14465:	00 00                	add    %al,(%rax)
   14467:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   1446d:	00 00                	add    %al,(%rax)
   1446f:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   14475:	00 00                	add    %al,(%rax)
   14477:	00 82 02 00 00 00    	add    %al,0x2(%rdx)
   1447d:	00 00                	add    %al,(%rax)
   1447f:	00 76 02             	add    %dh,0x2(%rsi)
   14482:	00 00                	add    %al,(%rax)
   14484:	00 00                	add    %al,(%rax)
   14486:	00 00                	add    %al,(%rax)
   14488:	6c                   	insb   (%dx),%es:(%rdi)
   14489:	02 00                	add    (%rax),%al
   1448b:	00 00                	add    %al,(%rax)
   1448d:	00 00                	add    %al,(%rax)
   1448f:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   14493:	00 00                	add    %al,(%rax)
   14495:	00 00                	add    %al,(%rax)
   14497:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   1449b:	00 00                	add    %al,(%rax)
   1449d:	00 00                	add    %al,(%rax)
   1449f:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144a3:	00 00                	add    %al,(%rax)
   144a5:	00 00                	add    %al,(%rax)
   144a7:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144ab:	00 00                	add    %al,(%rax)
   144ad:	00 00                	add    %al,(%rax)
   144af:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144b3:	00 00                	add    %al,(%rax)
   144b5:	00 00                	add    %al,(%rax)
   144b7:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144bb:	00 00                	add    %al,(%rax)
   144bd:	00 00                	add    %al,(%rax)
   144bf:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144c3:	00 00                	add    %al,(%rax)
   144c5:	00 00                	add    %al,(%rax)
   144c7:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144cb:	00 00                	add    %al,(%rax)
   144cd:	00 00                	add    %al,(%rax)
   144cf:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144d3:	00 00                	add    %al,(%rax)
   144d5:	00 00                	add    %al,(%rax)
   144d7:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144db:	00 00                	add    %al,(%rax)
   144dd:	00 00                	add    %al,(%rax)
   144df:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144e3:	00 00                	add    %al,(%rax)
   144e5:	00 00                	add    %al,(%rax)
   144e7:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144eb:	00 00                	add    %al,(%rax)
   144ed:	00 00                	add    %al,(%rax)
   144ef:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144f3:	00 00                	add    %al,(%rax)
   144f5:	00 00                	add    %al,(%rax)
   144f7:	00 6c 02 00          	add    %ch,0x0(%rdx,%rax,1)
   144fb:	00 00                	add    %al,(%rax)
   144fd:	00 00                	add    %al,(%rax)
   144ff:	00 5c 02 00          	add    %bl,0x0(%rdx,%rax,1)
   14503:	00 00                	add    %al,(%rax)
   14505:	00 00                	add    %al,(%rax)
   14507:	00 52 02             	add    %dl,0x2(%rdx)
   1450a:	00 00                	add    %al,(%rax)
   1450c:	00 00                	add    %al,(%rax)
   1450e:	00 00                	add    %al,(%rax)
   14510:	52                   	push   %rdx
   14511:	02 00                	add    (%rax),%al
   14513:	00 00                	add    %al,(%rax)
   14515:	00 00                	add    %al,(%rax)
   14517:	00 52 02             	add    %dl,0x2(%rdx)
   1451a:	00 00                	add    %al,(%rax)
   1451c:	00 00                	add    %al,(%rax)
   1451e:	00 00                	add    %al,(%rax)
   14520:	52                   	push   %rdx
   14521:	02 00                	add    (%rax),%al
   14523:	00 00                	add    %al,(%rax)
   14525:	00 00                	add    %al,(%rax)
   14527:	00 52 02             	add    %dl,0x2(%rdx)
   1452a:	00 00                	add    %al,(%rax)
   1452c:	00 00                	add    %al,(%rax)
   1452e:	00 00                	add    %al,(%rax)
   14530:	52                   	push   %rdx
   14531:	02 00                	add    (%rax),%al
   14533:	00 00                	add    %al,(%rax)
   14535:	00 00                	add    %al,(%rax)
   14537:	00 52 02             	add    %dl,0x2(%rdx)
   1453a:	00 00                	add    %al,(%rax)
   1453c:	00 00                	add    %al,(%rax)
   1453e:	00 00                	add    %al,(%rax)
   14540:	52                   	push   %rdx
   14541:	02 00                	add    (%rax),%al
   14543:	00 00                	add    %al,(%rax)
   14545:	00 00                	add    %al,(%rax)
   14547:	00 52 02             	add    %dl,0x2(%rdx)
   1454a:	00 00                	add    %al,(%rax)
   1454c:	00 00                	add    %al,(%rax)
   1454e:	00 00                	add    %al,(%rax)
   14550:	52                   	push   %rdx
   14551:	02 00                	add    (%rax),%al
   14553:	00 00                	add    %al,(%rax)
   14555:	00 00                	add    %al,(%rax)
   14557:	00 52 02             	add    %dl,0x2(%rdx)
   1455a:	00 00                	add    %al,(%rax)
   1455c:	00 00                	add    %al,(%rax)
   1455e:	00 00                	add    %al,(%rax)
   14560:	52                   	push   %rdx
   14561:	02 00                	add    (%rax),%al
   14563:	00 00                	add    %al,(%rax)
   14565:	00 00                	add    %al,(%rax)
   14567:	00 52 02             	add    %dl,0x2(%rdx)
   1456a:	00 00                	add    %al,(%rax)
   1456c:	00 00                	add    %al,(%rax)
   1456e:	00 00                	add    %al,(%rax)
   14570:	52                   	push   %rdx
   14571:	02 00                	add    (%rax),%al
   14573:	00 00                	add    %al,(%rax)
   14575:	00 00                	add    %al,(%rax)
   14577:	00 52 02             	add    %dl,0x2(%rdx)
   1457a:	00 00                	add    %al,(%rax)
   1457c:	00 00                	add    %al,(%rax)
   1457e:	00 00                	add    %al,(%rax)
   14580:	52                   	push   %rdx
   14581:	02 00                	add    (%rax),%al
   14583:	00 00                	add    %al,(%rax)
   14585:	00 00                	add    %al,(%rax)
   14587:	00 52 02             	add    %dl,0x2(%rdx)
   1458a:	00 00                	add    %al,(%rax)
   1458c:	00 00                	add    %al,(%rax)
   1458e:	00 00                	add    %al,(%rax)
   14590:	52                   	push   %rdx
   14591:	02 00                	add    (%rax),%al
   14593:	00 00                	add    %al,(%rax)
   14595:	00 00                	add    %al,(%rax)
   14597:	00 52 02             	add    %dl,0x2(%rdx)
   1459a:	00 00                	add    %al,(%rax)
   1459c:	00 00                	add    %al,(%rax)
   1459e:	00 00                	add    %al,(%rax)
   145a0:	52                   	push   %rdx
   145a1:	02 00                	add    (%rax),%al
   145a3:	00 00                	add    %al,(%rax)
   145a5:	00 00                	add    %al,(%rax)
   145a7:	00 52 02             	add    %dl,0x2(%rdx)
   145aa:	00 00                	add    %al,(%rax)
   145ac:	00 00                	add    %al,(%rax)
   145ae:	00 00                	add    %al,(%rax)
   145b0:	52                   	push   %rdx
   145b1:	02 00                	add    (%rax),%al
   145b3:	00 00                	add    %al,(%rax)
   145b5:	00 00                	add    %al,(%rax)
   145b7:	00 52 02             	add    %dl,0x2(%rdx)
   145ba:	00 00                	add    %al,(%rax)
   145bc:	00 00                	add    %al,(%rax)
   145be:	00 00                	add    %al,(%rax)
   145c0:	52                   	push   %rdx
   145c1:	02 00                	add    (%rax),%al
   145c3:	00 00                	add    %al,(%rax)
   145c5:	00 00                	add    %al,(%rax)
   145c7:	00 52 02             	add    %dl,0x2(%rdx)
   145ca:	00 00                	add    %al,(%rax)
   145cc:	00 00                	add    %al,(%rax)
   145ce:	00 00                	add    %al,(%rax)
   145d0:	52                   	push   %rdx
   145d1:	02 00                	add    (%rax),%al
   145d3:	00 00                	add    %al,(%rax)
   145d5:	00 00                	add    %al,(%rax)
   145d7:	00 52 02             	add    %dl,0x2(%rdx)
   145da:	00 00                	add    %al,(%rax)
   145dc:	00 00                	add    %al,(%rax)
   145de:	00 00                	add    %al,(%rax)
   145e0:	52                   	push   %rdx
   145e1:	02 00                	add    (%rax),%al
   145e3:	00 00                	add    %al,(%rax)
   145e5:	00 00                	add    %al,(%rax)
   145e7:	00 52 02             	add    %dl,0x2(%rdx)
   145ea:	00 00                	add    %al,(%rax)
   145ec:	00 00                	add    %al,(%rax)
   145ee:	00 00                	add    %al,(%rax)
   145f0:	52                   	push   %rdx
   145f1:	02 00                	add    (%rax),%al
   145f3:	00 00                	add    %al,(%rax)
   145f5:	00 00                	add    %al,(%rax)
   145f7:	00 52 02             	add    %dl,0x2(%rdx)
   145fa:	00 00                	add    %al,(%rax)
   145fc:	00 00                	add    %al,(%rax)
   145fe:	00 00                	add    %al,(%rax)
   14600:	dc 02                	faddl  (%rdx)
   14602:	00 00                	add    %al,(%rax)
   14604:	00 00                	add    %al,(%rax)
   14606:	00 00                	add    %al,(%rax)
   14608:	dc 02                	faddl  (%rdx)
   1460a:	00 00                	add    %al,(%rax)
   1460c:	00 00                	add    %al,(%rax)
   1460e:	00 00                	add    %al,(%rax)
   14610:	dc 02                	faddl  (%rdx)
   14612:	00 00                	add    %al,(%rax)
   14614:	00 00                	add    %al,(%rax)
   14616:	00 00                	add    %al,(%rax)
   14618:	dc 02                	faddl  (%rdx)
   1461a:	00 00                	add    %al,(%rax)
   1461c:	00 00                	add    %al,(%rax)
   1461e:	00 00                	add    %al,(%rax)
   14620:	dc 02                	faddl  (%rdx)
   14622:	00 00                	add    %al,(%rax)
   14624:	00 00                	add    %al,(%rax)
   14626:	00 00                	add    %al,(%rax)
   14628:	dc 02                	faddl  (%rdx)
   1462a:	00 00                	add    %al,(%rax)
   1462c:	00 00                	add    %al,(%rax)
   1462e:	00 00                	add    %al,(%rax)
   14630:	dc 02                	faddl  (%rdx)
   14632:	00 00                	add    %al,(%rax)
   14634:	00 00                	add    %al,(%rax)
   14636:	00 00                	add    %al,(%rax)
   14638:	dc 02                	faddl  (%rdx)
   1463a:	00 00                	add    %al,(%rax)
   1463c:	00 00                	add    %al,(%rax)
   1463e:	00 00                	add    %al,(%rax)
   14640:	dc 02                	faddl  (%rdx)
   14642:	00 00                	add    %al,(%rax)
   14644:	00 00                	add    %al,(%rax)
   14646:	00 00                	add    %al,(%rax)
   14648:	dc 02                	faddl  (%rdx)
   1464a:	00 00                	add    %al,(%rax)
   1464c:	00 00                	add    %al,(%rax)
   1464e:	00 00                	add    %al,(%rax)
   14650:	dc 02                	faddl  (%rdx)
   14652:	00 00                	add    %al,(%rax)
   14654:	00 00                	add    %al,(%rax)
   14656:	00 00                	add    %al,(%rax)
   14658:	dc 02                	faddl  (%rdx)
   1465a:	00 00                	add    %al,(%rax)
   1465c:	00 00                	add    %al,(%rax)
   1465e:	00 00                	add    %al,(%rax)
   14660:	dc 02                	faddl  (%rdx)
   14662:	00 00                	add    %al,(%rax)
   14664:	00 00                	add    %al,(%rax)
   14666:	00 00                	add    %al,(%rax)
   14668:	dc 02                	faddl  (%rdx)
   1466a:	00 00                	add    %al,(%rax)
   1466c:	00 00                	add    %al,(%rax)
   1466e:	00 00                	add    %al,(%rax)
   14670:	dc 02                	faddl  (%rdx)
   14672:	00 00                	add    %al,(%rax)
   14674:	00 00                	add    %al,(%rax)
   14676:	00 00                	add    %al,(%rax)
   14678:	dc 02                	faddl  (%rdx)
   1467a:	00 00                	add    %al,(%rax)
   1467c:	00 00                	add    %al,(%rax)
   1467e:	00 00                	add    %al,(%rax)
   14680:	dc 02                	faddl  (%rdx)
   14682:	00 00                	add    %al,(%rax)
   14684:	00 00                	add    %al,(%rax)
   14686:	00 00                	add    %al,(%rax)
   14688:	dc 02                	faddl  (%rdx)
   1468a:	00 00                	add    %al,(%rax)
   1468c:	00 00                	add    %al,(%rax)
   1468e:	00 00                	add    %al,(%rax)
   14690:	dc 02                	faddl  (%rdx)
   14692:	00 00                	add    %al,(%rax)
   14694:	00 00                	add    %al,(%rax)
   14696:	00 00                	add    %al,(%rax)
   14698:	dc 02                	faddl  (%rdx)
   1469a:	00 00                	add    %al,(%rax)
   1469c:	00 00                	add    %al,(%rax)
   1469e:	00 00                	add    %al,(%rax)
   146a0:	dc 02                	faddl  (%rdx)
   146a2:	00 00                	add    %al,(%rax)
   146a4:	00 00                	add    %al,(%rax)
   146a6:	00 00                	add    %al,(%rax)
   146a8:	dc 02                	faddl  (%rdx)
   146aa:	00 00                	add    %al,(%rax)
   146ac:	00 00                	add    %al,(%rax)
   146ae:	00 00                	add    %al,(%rax)
   146b0:	dc 02                	faddl  (%rdx)
   146b2:	00 00                	add    %al,(%rax)
   146b4:	00 00                	add    %al,(%rax)
   146b6:	00 00                	add    %al,(%rax)
   146b8:	dc 02                	faddl  (%rdx)
   146ba:	00 00                	add    %al,(%rax)
   146bc:	00 00                	add    %al,(%rax)
   146be:	00 00                	add    %al,(%rax)
   146c0:	dc 02                	faddl  (%rdx)
   146c2:	00 00                	add    %al,(%rax)
   146c4:	00 00                	add    %al,(%rax)
   146c6:	00 00                	add    %al,(%rax)
   146c8:	dc 02                	faddl  (%rdx)
   146ca:	00 00                	add    %al,(%rax)
   146cc:	00 00                	add    %al,(%rax)
   146ce:	00 00                	add    %al,(%rax)
   146d0:	dc 02                	faddl  (%rdx)
   146d2:	00 00                	add    %al,(%rax)
   146d4:	00 00                	add    %al,(%rax)
   146d6:	00 00                	add    %al,(%rax)
   146d8:	dc 02                	faddl  (%rdx)
   146da:	00 00                	add    %al,(%rax)
   146dc:	00 00                	add    %al,(%rax)
   146de:	00 00                	add    %al,(%rax)
   146e0:	dc 02                	faddl  (%rdx)
   146e2:	00 00                	add    %al,(%rax)
   146e4:	00 00                	add    %al,(%rax)
   146e6:	00 00                	add    %al,(%rax)
   146e8:	dc 02                	faddl  (%rdx)
   146ea:	00 00                	add    %al,(%rax)
   146ec:	00 00                	add    %al,(%rax)
   146ee:	00 00                	add    %al,(%rax)
   146f0:	dc 02                	faddl  (%rdx)
   146f2:	00 00                	add    %al,(%rax)
   146f4:	00 00                	add    %al,(%rax)
   146f6:	00 00                	add    %al,(%rax)
   146f8:	dc 02                	faddl  (%rdx)
   146fa:	00 00                	add    %al,(%rax)
   146fc:	00 00                	add    %al,(%rax)
   146fe:	00 00                	add    %al,(%rax)
   14700:	dc 02                	faddl  (%rdx)
   14702:	00 00                	add    %al,(%rax)
   14704:	00 00                	add    %al,(%rax)
   14706:	00 00                	add    %al,(%rax)
   14708:	dc 02                	faddl  (%rdx)
   1470a:	00 00                	add    %al,(%rax)
   1470c:	00 00                	add    %al,(%rax)
   1470e:	00 00                	add    %al,(%rax)
   14710:	dc 02                	faddl  (%rdx)
   14712:	00 00                	add    %al,(%rax)
   14714:	00 00                	add    %al,(%rax)
   14716:	00 00                	add    %al,(%rax)
   14718:	dc 02                	faddl  (%rdx)
   1471a:	00 00                	add    %al,(%rax)
   1471c:	00 00                	add    %al,(%rax)
   1471e:	00 00                	add    %al,(%rax)
   14720:	dc 02                	faddl  (%rdx)
   14722:	00 00                	add    %al,(%rax)
   14724:	00 00                	add    %al,(%rax)
   14726:	00 00                	add    %al,(%rax)
   14728:	dc 02                	faddl  (%rdx)
   1472a:	00 00                	add    %al,(%rax)
   1472c:	00 00                	add    %al,(%rax)
   1472e:	00 00                	add    %al,(%rax)
   14730:	dc 02                	faddl  (%rdx)
   14732:	00 00                	add    %al,(%rax)
   14734:	00 00                	add    %al,(%rax)
   14736:	00 00                	add    %al,(%rax)
   14738:	dc 02                	faddl  (%rdx)
   1473a:	00 00                	add    %al,(%rax)
   1473c:	00 00                	add    %al,(%rax)
   1473e:	00 00                	add    %al,(%rax)
   14740:	dc 02                	faddl  (%rdx)
   14742:	00 00                	add    %al,(%rax)
   14744:	00 00                	add    %al,(%rax)
   14746:	00 00                	add    %al,(%rax)
   14748:	dc 02                	faddl  (%rdx)
   1474a:	00 00                	add    %al,(%rax)
   1474c:	00 00                	add    %al,(%rax)
   1474e:	00 00                	add    %al,(%rax)
   14750:	dc 02                	faddl  (%rdx)
   14752:	00 00                	add    %al,(%rax)
   14754:	00 00                	add    %al,(%rax)
   14756:	00 00                	add    %al,(%rax)
   14758:	dc 02                	faddl  (%rdx)
   1475a:	00 00                	add    %al,(%rax)
   1475c:	00 00                	add    %al,(%rax)
   1475e:	00 00                	add    %al,(%rax)
   14760:	dc 02                	faddl  (%rdx)
   14762:	00 00                	add    %al,(%rax)
   14764:	00 00                	add    %al,(%rax)
   14766:	00 00                	add    %al,(%rax)
   14768:	dc 02                	faddl  (%rdx)
   1476a:	00 00                	add    %al,(%rax)
   1476c:	00 00                	add    %al,(%rax)
   1476e:	00 00                	add    %al,(%rax)
   14770:	dc 02                	faddl  (%rdx)
   14772:	00 00                	add    %al,(%rax)
   14774:	00 00                	add    %al,(%rax)
   14776:	00 00                	add    %al,(%rax)
   14778:	dc 02                	faddl  (%rdx)
   1477a:	00 00                	add    %al,(%rax)
   1477c:	00 00                	add    %al,(%rax)
   1477e:	00 00                	add    %al,(%rax)
   14780:	dc 02                	faddl  (%rdx)
   14782:	00 00                	add    %al,(%rax)
   14784:	00 00                	add    %al,(%rax)
   14786:	00 00                	add    %al,(%rax)
   14788:	dc 02                	faddl  (%rdx)
   1478a:	00 00                	add    %al,(%rax)
   1478c:	00 00                	add    %al,(%rax)
   1478e:	00 00                	add    %al,(%rax)
   14790:	dc 02                	faddl  (%rdx)
   14792:	00 00                	add    %al,(%rax)
   14794:	00 00                	add    %al,(%rax)
   14796:	00 00                	add    %al,(%rax)
   14798:	dc 02                	faddl  (%rdx)
   1479a:	00 00                	add    %al,(%rax)
   1479c:	00 00                	add    %al,(%rax)
   1479e:	00 00                	add    %al,(%rax)
   147a0:	dc 02                	faddl  (%rdx)
   147a2:	00 00                	add    %al,(%rax)
   147a4:	00 00                	add    %al,(%rax)
   147a6:	00 00                	add    %al,(%rax)
   147a8:	dc 02                	faddl  (%rdx)
   147aa:	00 00                	add    %al,(%rax)
   147ac:	00 00                	add    %al,(%rax)
   147ae:	00 00                	add    %al,(%rax)
   147b0:	dc 02                	faddl  (%rdx)
   147b2:	00 00                	add    %al,(%rax)
   147b4:	00 00                	add    %al,(%rax)
   147b6:	00 00                	add    %al,(%rax)
   147b8:	dc 02                	faddl  (%rdx)
   147ba:	00 00                	add    %al,(%rax)
   147bc:	00 00                	add    %al,(%rax)
   147be:	00 00                	add    %al,(%rax)
   147c0:	dc 02                	faddl  (%rdx)
   147c2:	00 00                	add    %al,(%rax)
   147c4:	00 00                	add    %al,(%rax)
   147c6:	00 00                	add    %al,(%rax)
   147c8:	dc 02                	faddl  (%rdx)
   147ca:	00 00                	add    %al,(%rax)
   147cc:	00 00                	add    %al,(%rax)
   147ce:	00 00                	add    %al,(%rax)
   147d0:	dc 02                	faddl  (%rdx)
   147d2:	00 00                	add    %al,(%rax)
   147d4:	00 00                	add    %al,(%rax)
   147d6:	00 00                	add    %al,(%rax)
   147d8:	dc 02                	faddl  (%rdx)
   147da:	00 00                	add    %al,(%rax)
   147dc:	00 00                	add    %al,(%rax)
   147de:	00 00                	add    %al,(%rax)
   147e0:	dc 02                	faddl  (%rdx)
   147e2:	00 00                	add    %al,(%rax)
   147e4:	00 00                	add    %al,(%rax)
   147e6:	00 00                	add    %al,(%rax)
   147e8:	dc 02                	faddl  (%rdx)
   147ea:	00 00                	add    %al,(%rax)
   147ec:	00 00                	add    %al,(%rax)
   147ee:	00 00                	add    %al,(%rax)
   147f0:	dc 02                	faddl  (%rdx)
   147f2:	00 00                	add    %al,(%rax)
   147f4:	00 00                	add    %al,(%rax)
   147f6:	00 00                	add    %al,(%rax)
   147f8:	dc 02                	faddl  (%rdx)
   147fa:	00 00                	add    %al,(%rax)
   147fc:	00 00                	add    %al,(%rax)
   147fe:	00 00                	add    %al,(%rax)
   14800:	e3 02                	jrcxz  14804 <__intel_mic_avx512f_memset+0x8c4>
   14802:	00 00                	add    %al,(%rax)
   14804:	00 00                	add    %al,(%rax)
   14806:	00 00                	add    %al,(%rax)
   14808:	e3 02                	jrcxz  1480c <__intel_mic_avx512f_memset+0x8cc>
   1480a:	00 00                	add    %al,(%rax)
   1480c:	00 00                	add    %al,(%rax)
   1480e:	00 00                	add    %al,(%rax)
   14810:	e3 02                	jrcxz  14814 <__intel_mic_avx512f_memset+0x8d4>
   14812:	00 00                	add    %al,(%rax)
   14814:	00 00                	add    %al,(%rax)
   14816:	00 00                	add    %al,(%rax)
   14818:	e3 02                	jrcxz  1481c <__intel_mic_avx512f_memset+0x8dc>
   1481a:	00 00                	add    %al,(%rax)
   1481c:	00 00                	add    %al,(%rax)
   1481e:	00 00                	add    %al,(%rax)
   14820:	e3 02                	jrcxz  14824 <__intel_mic_avx512f_memset+0x8e4>
   14822:	00 00                	add    %al,(%rax)
   14824:	00 00                	add    %al,(%rax)
   14826:	00 00                	add    %al,(%rax)
   14828:	e3 02                	jrcxz  1482c <__intel_mic_avx512f_memset+0x8ec>
   1482a:	00 00                	add    %al,(%rax)
   1482c:	00 00                	add    %al,(%rax)
   1482e:	00 00                	add    %al,(%rax)
   14830:	e3 02                	jrcxz  14834 <__intel_mic_avx512f_memset+0x8f4>
   14832:	00 00                	add    %al,(%rax)
   14834:	00 00                	add    %al,(%rax)
   14836:	00 00                	add    %al,(%rax)
   14838:	e3 02                	jrcxz  1483c <__intel_mic_avx512f_memset+0x8fc>
   1483a:	00 00                	add    %al,(%rax)
   1483c:	00 00                	add    %al,(%rax)
   1483e:	00 00                	add    %al,(%rax)
   14840:	e3 02                	jrcxz  14844 <__intel_mic_avx512f_memset+0x904>
   14842:	00 00                	add    %al,(%rax)
   14844:	00 00                	add    %al,(%rax)
   14846:	00 00                	add    %al,(%rax)
   14848:	e3 02                	jrcxz  1484c <__intel_mic_avx512f_memset+0x90c>
   1484a:	00 00                	add    %al,(%rax)
   1484c:	00 00                	add    %al,(%rax)
   1484e:	00 00                	add    %al,(%rax)
   14850:	e3 02                	jrcxz  14854 <__intel_mic_avx512f_memset+0x914>
   14852:	00 00                	add    %al,(%rax)
   14854:	00 00                	add    %al,(%rax)
   14856:	00 00                	add    %al,(%rax)
   14858:	e3 02                	jrcxz  1485c <__intel_mic_avx512f_memset+0x91c>
   1485a:	00 00                	add    %al,(%rax)
   1485c:	00 00                	add    %al,(%rax)
   1485e:	00 00                	add    %al,(%rax)
   14860:	e3 02                	jrcxz  14864 <__intel_mic_avx512f_memset+0x924>
   14862:	00 00                	add    %al,(%rax)
   14864:	00 00                	add    %al,(%rax)
   14866:	00 00                	add    %al,(%rax)
   14868:	e3 02                	jrcxz  1486c <__intel_mic_avx512f_memset+0x92c>
   1486a:	00 00                	add    %al,(%rax)
   1486c:	00 00                	add    %al,(%rax)
   1486e:	00 00                	add    %al,(%rax)
   14870:	e3 02                	jrcxz  14874 <__intel_mic_avx512f_memset+0x934>
   14872:	00 00                	add    %al,(%rax)
   14874:	00 00                	add    %al,(%rax)
   14876:	00 00                	add    %al,(%rax)
   14878:	e3 02                	jrcxz  1487c <__intel_mic_avx512f_memset+0x93c>
   1487a:	00 00                	add    %al,(%rax)
   1487c:	00 00                	add    %al,(%rax)
   1487e:	00 00                	add    %al,(%rax)
   14880:	e3 02                	jrcxz  14884 <__intel_mic_avx512f_memset+0x944>
   14882:	00 00                	add    %al,(%rax)
   14884:	00 00                	add    %al,(%rax)
   14886:	00 00                	add    %al,(%rax)
   14888:	e3 02                	jrcxz  1488c <__intel_mic_avx512f_memset+0x94c>
   1488a:	00 00                	add    %al,(%rax)
   1488c:	00 00                	add    %al,(%rax)
   1488e:	00 00                	add    %al,(%rax)
   14890:	e3 02                	jrcxz  14894 <__intel_mic_avx512f_memset+0x954>
   14892:	00 00                	add    %al,(%rax)
   14894:	00 00                	add    %al,(%rax)
   14896:	00 00                	add    %al,(%rax)
   14898:	e3 02                	jrcxz  1489c <__intel_mic_avx512f_memset+0x95c>
   1489a:	00 00                	add    %al,(%rax)
   1489c:	00 00                	add    %al,(%rax)
   1489e:	00 00                	add    %al,(%rax)
   148a0:	e3 02                	jrcxz  148a4 <__intel_mic_avx512f_memset+0x964>
   148a2:	00 00                	add    %al,(%rax)
   148a4:	00 00                	add    %al,(%rax)
   148a6:	00 00                	add    %al,(%rax)
   148a8:	e3 02                	jrcxz  148ac <__intel_mic_avx512f_memset+0x96c>
   148aa:	00 00                	add    %al,(%rax)
   148ac:	00 00                	add    %al,(%rax)
   148ae:	00 00                	add    %al,(%rax)
   148b0:	e3 02                	jrcxz  148b4 <__intel_mic_avx512f_memset+0x974>
   148b2:	00 00                	add    %al,(%rax)
   148b4:	00 00                	add    %al,(%rax)
   148b6:	00 00                	add    %al,(%rax)
   148b8:	e3 02                	jrcxz  148bc <__intel_mic_avx512f_memset+0x97c>
   148ba:	00 00                	add    %al,(%rax)
   148bc:	00 00                	add    %al,(%rax)
   148be:	00 00                	add    %al,(%rax)
   148c0:	e3 02                	jrcxz  148c4 <__intel_mic_avx512f_memset+0x984>
   148c2:	00 00                	add    %al,(%rax)
   148c4:	00 00                	add    %al,(%rax)
   148c6:	00 00                	add    %al,(%rax)
   148c8:	e3 02                	jrcxz  148cc <__intel_mic_avx512f_memset+0x98c>
   148ca:	00 00                	add    %al,(%rax)
   148cc:	00 00                	add    %al,(%rax)
   148ce:	00 00                	add    %al,(%rax)
   148d0:	e3 02                	jrcxz  148d4 <__intel_mic_avx512f_memset+0x994>
   148d2:	00 00                	add    %al,(%rax)
   148d4:	00 00                	add    %al,(%rax)
   148d6:	00 00                	add    %al,(%rax)
   148d8:	e3 02                	jrcxz  148dc <__intel_mic_avx512f_memset+0x99c>
   148da:	00 00                	add    %al,(%rax)
   148dc:	00 00                	add    %al,(%rax)
   148de:	00 00                	add    %al,(%rax)
   148e0:	e3 02                	jrcxz  148e4 <__intel_mic_avx512f_memset+0x9a4>
   148e2:	00 00                	add    %al,(%rax)
   148e4:	00 00                	add    %al,(%rax)
   148e6:	00 00                	add    %al,(%rax)
   148e8:	e3 02                	jrcxz  148ec <__intel_mic_avx512f_memset+0x9ac>
   148ea:	00 00                	add    %al,(%rax)
   148ec:	00 00                	add    %al,(%rax)
   148ee:	00 00                	add    %al,(%rax)
   148f0:	e3 02                	jrcxz  148f4 <__intel_mic_avx512f_memset+0x9b4>
   148f2:	00 00                	add    %al,(%rax)
   148f4:	00 00                	add    %al,(%rax)
   148f6:	00 00                	add    %al,(%rax)
   148f8:	e3 02                	jrcxz  148fc <__intel_mic_avx512f_memset+0x9bc>
   148fa:	00 00                	add    %al,(%rax)
   148fc:	00 00                	add    %al,(%rax)
   148fe:	00 00                	add    %al,(%rax)
   14900:	e3 02                	jrcxz  14904 <__intel_mic_avx512f_memset+0x9c4>
   14902:	00 00                	add    %al,(%rax)
   14904:	00 00                	add    %al,(%rax)
   14906:	00 00                	add    %al,(%rax)
   14908:	e3 02                	jrcxz  1490c <__intel_mic_avx512f_memset+0x9cc>
   1490a:	00 00                	add    %al,(%rax)
   1490c:	00 00                	add    %al,(%rax)
   1490e:	00 00                	add    %al,(%rax)
   14910:	e3 02                	jrcxz  14914 <__intel_mic_avx512f_memset+0x9d4>
   14912:	00 00                	add    %al,(%rax)
   14914:	00 00                	add    %al,(%rax)
   14916:	00 00                	add    %al,(%rax)
   14918:	e3 02                	jrcxz  1491c <__intel_mic_avx512f_memset+0x9dc>
   1491a:	00 00                	add    %al,(%rax)
   1491c:	00 00                	add    %al,(%rax)
   1491e:	00 00                	add    %al,(%rax)
   14920:	e3 02                	jrcxz  14924 <__intel_mic_avx512f_memset+0x9e4>
   14922:	00 00                	add    %al,(%rax)
   14924:	00 00                	add    %al,(%rax)
   14926:	00 00                	add    %al,(%rax)
   14928:	e3 02                	jrcxz  1492c <__intel_mic_avx512f_memset+0x9ec>
   1492a:	00 00                	add    %al,(%rax)
   1492c:	00 00                	add    %al,(%rax)
   1492e:	00 00                	add    %al,(%rax)
   14930:	e3 02                	jrcxz  14934 <__intel_mic_avx512f_memset+0x9f4>
   14932:	00 00                	add    %al,(%rax)
   14934:	00 00                	add    %al,(%rax)
   14936:	00 00                	add    %al,(%rax)
   14938:	e3 02                	jrcxz  1493c <__intel_mic_avx512f_memset+0x9fc>
   1493a:	00 00                	add    %al,(%rax)
   1493c:	00 00                	add    %al,(%rax)
   1493e:	00 00                	add    %al,(%rax)
   14940:	e3 02                	jrcxz  14944 <__intel_mic_avx512f_memset+0xa04>
   14942:	00 00                	add    %al,(%rax)
   14944:	00 00                	add    %al,(%rax)
   14946:	00 00                	add    %al,(%rax)
   14948:	e3 02                	jrcxz  1494c <__intel_mic_avx512f_memset+0xa0c>
   1494a:	00 00                	add    %al,(%rax)
   1494c:	00 00                	add    %al,(%rax)
   1494e:	00 00                	add    %al,(%rax)
   14950:	e3 02                	jrcxz  14954 <__intel_mic_avx512f_memset+0xa14>
   14952:	00 00                	add    %al,(%rax)
   14954:	00 00                	add    %al,(%rax)
   14956:	00 00                	add    %al,(%rax)
   14958:	e3 02                	jrcxz  1495c <__intel_mic_avx512f_memset+0xa1c>
   1495a:	00 00                	add    %al,(%rax)
   1495c:	00 00                	add    %al,(%rax)
   1495e:	00 00                	add    %al,(%rax)
   14960:	e3 02                	jrcxz  14964 <__intel_mic_avx512f_memset+0xa24>
   14962:	00 00                	add    %al,(%rax)
   14964:	00 00                	add    %al,(%rax)
   14966:	00 00                	add    %al,(%rax)
   14968:	e3 02                	jrcxz  1496c <__intel_mic_avx512f_memset+0xa2c>
   1496a:	00 00                	add    %al,(%rax)
   1496c:	00 00                	add    %al,(%rax)
   1496e:	00 00                	add    %al,(%rax)
   14970:	e3 02                	jrcxz  14974 <__intel_mic_avx512f_memset+0xa34>
   14972:	00 00                	add    %al,(%rax)
   14974:	00 00                	add    %al,(%rax)
   14976:	00 00                	add    %al,(%rax)
   14978:	e3 02                	jrcxz  1497c <__intel_mic_avx512f_memset+0xa3c>
   1497a:	00 00                	add    %al,(%rax)
   1497c:	00 00                	add    %al,(%rax)
   1497e:	00 00                	add    %al,(%rax)
   14980:	e3 02                	jrcxz  14984 <__intel_mic_avx512f_memset+0xa44>
   14982:	00 00                	add    %al,(%rax)
   14984:	00 00                	add    %al,(%rax)
   14986:	00 00                	add    %al,(%rax)
   14988:	e3 02                	jrcxz  1498c <__intel_mic_avx512f_memset+0xa4c>
   1498a:	00 00                	add    %al,(%rax)
   1498c:	00 00                	add    %al,(%rax)
   1498e:	00 00                	add    %al,(%rax)
   14990:	e3 02                	jrcxz  14994 <__intel_mic_avx512f_memset+0xa54>
   14992:	00 00                	add    %al,(%rax)
   14994:	00 00                	add    %al,(%rax)
   14996:	00 00                	add    %al,(%rax)
   14998:	e3 02                	jrcxz  1499c <__intel_mic_avx512f_memset+0xa5c>
   1499a:	00 00                	add    %al,(%rax)
   1499c:	00 00                	add    %al,(%rax)
   1499e:	00 00                	add    %al,(%rax)
   149a0:	e3 02                	jrcxz  149a4 <__intel_mic_avx512f_memset+0xa64>
   149a2:	00 00                	add    %al,(%rax)
   149a4:	00 00                	add    %al,(%rax)
   149a6:	00 00                	add    %al,(%rax)
   149a8:	e3 02                	jrcxz  149ac <__intel_mic_avx512f_memset+0xa6c>
   149aa:	00 00                	add    %al,(%rax)
   149ac:	00 00                	add    %al,(%rax)
   149ae:	00 00                	add    %al,(%rax)
   149b0:	e3 02                	jrcxz  149b4 <__intel_mic_avx512f_memset+0xa74>
   149b2:	00 00                	add    %al,(%rax)
   149b4:	00 00                	add    %al,(%rax)
   149b6:	00 00                	add    %al,(%rax)
   149b8:	e3 02                	jrcxz  149bc <__intel_mic_avx512f_memset+0xa7c>
   149ba:	00 00                	add    %al,(%rax)
   149bc:	00 00                	add    %al,(%rax)
   149be:	00 00                	add    %al,(%rax)
   149c0:	e3 02                	jrcxz  149c4 <__intel_mic_avx512f_memset+0xa84>
   149c2:	00 00                	add    %al,(%rax)
   149c4:	00 00                	add    %al,(%rax)
   149c6:	00 00                	add    %al,(%rax)
   149c8:	e3 02                	jrcxz  149cc <__intel_mic_avx512f_memset+0xa8c>
   149ca:	00 00                	add    %al,(%rax)
   149cc:	00 00                	add    %al,(%rax)
   149ce:	00 00                	add    %al,(%rax)
   149d0:	e3 02                	jrcxz  149d4 <__intel_mic_avx512f_memset+0xa94>
   149d2:	00 00                	add    %al,(%rax)
   149d4:	00 00                	add    %al,(%rax)
   149d6:	00 00                	add    %al,(%rax)
   149d8:	e3 02                	jrcxz  149dc <__intel_mic_avx512f_memset+0xa9c>
   149da:	00 00                	add    %al,(%rax)
   149dc:	00 00                	add    %al,(%rax)
   149de:	00 00                	add    %al,(%rax)
   149e0:	e3 02                	jrcxz  149e4 <__intel_mic_avx512f_memset+0xaa4>
   149e2:	00 00                	add    %al,(%rax)
   149e4:	00 00                	add    %al,(%rax)
   149e6:	00 00                	add    %al,(%rax)
   149e8:	e3 02                	jrcxz  149ec <__intel_mic_avx512f_memset+0xaac>
   149ea:	00 00                	add    %al,(%rax)
   149ec:	00 00                	add    %al,(%rax)
   149ee:	00 00                	add    %al,(%rax)
   149f0:	e3 02                	jrcxz  149f4 <__intel_mic_avx512f_memset+0xab4>
   149f2:	00 00                	add    %al,(%rax)
   149f4:	00 00                	add    %al,(%rax)
   149f6:	00 00                	add    %al,(%rax)
   149f8:	e3 02                	jrcxz  149fc <__intel_mic_avx512f_memset+0xabc>
   149fa:	00 00                	add    %al,(%rax)
   149fc:	00 00                	add    %al,(%rax)
   149fe:	00 00                	add    %al,(%rax)
   14a00:	ea                   	(bad)  
   14a01:	02 00                	add    (%rax),%al
   14a03:	00 00                	add    %al,(%rax)
   14a05:	00 00                	add    %al,(%rax)
   14a07:	00 ea                	add    %ch,%dl
   14a09:	02 00                	add    (%rax),%al
   14a0b:	00 00                	add    %al,(%rax)
   14a0d:	00 00                	add    %al,(%rax)
   14a0f:	00 ea                	add    %ch,%dl
   14a11:	02 00                	add    (%rax),%al
   14a13:	00 00                	add    %al,(%rax)
   14a15:	00 00                	add    %al,(%rax)
   14a17:	00 ea                	add    %ch,%dl
   14a19:	02 00                	add    (%rax),%al
   14a1b:	00 00                	add    %al,(%rax)
   14a1d:	00 00                	add    %al,(%rax)
   14a1f:	00 ea                	add    %ch,%dl
   14a21:	02 00                	add    (%rax),%al
   14a23:	00 00                	add    %al,(%rax)
   14a25:	00 00                	add    %al,(%rax)
   14a27:	00 ea                	add    %ch,%dl
   14a29:	02 00                	add    (%rax),%al
   14a2b:	00 00                	add    %al,(%rax)
   14a2d:	00 00                	add    %al,(%rax)
   14a2f:	00 ea                	add    %ch,%dl
   14a31:	02 00                	add    (%rax),%al
   14a33:	00 00                	add    %al,(%rax)
   14a35:	00 00                	add    %al,(%rax)
   14a37:	00 ea                	add    %ch,%dl
   14a39:	02 00                	add    (%rax),%al
   14a3b:	00 00                	add    %al,(%rax)
   14a3d:	00 00                	add    %al,(%rax)
   14a3f:	00 ea                	add    %ch,%dl
   14a41:	02 00                	add    (%rax),%al
   14a43:	00 00                	add    %al,(%rax)
   14a45:	00 00                	add    %al,(%rax)
   14a47:	00 ea                	add    %ch,%dl
   14a49:	02 00                	add    (%rax),%al
   14a4b:	00 00                	add    %al,(%rax)
   14a4d:	00 00                	add    %al,(%rax)
   14a4f:	00 ea                	add    %ch,%dl
   14a51:	02 00                	add    (%rax),%al
   14a53:	00 00                	add    %al,(%rax)
   14a55:	00 00                	add    %al,(%rax)
   14a57:	00 ea                	add    %ch,%dl
   14a59:	02 00                	add    (%rax),%al
   14a5b:	00 00                	add    %al,(%rax)
   14a5d:	00 00                	add    %al,(%rax)
   14a5f:	00 ea                	add    %ch,%dl
   14a61:	02 00                	add    (%rax),%al
   14a63:	00 00                	add    %al,(%rax)
   14a65:	00 00                	add    %al,(%rax)
   14a67:	00 ea                	add    %ch,%dl
   14a69:	02 00                	add    (%rax),%al
   14a6b:	00 00                	add    %al,(%rax)
   14a6d:	00 00                	add    %al,(%rax)
   14a6f:	00 ea                	add    %ch,%dl
   14a71:	02 00                	add    (%rax),%al
   14a73:	00 00                	add    %al,(%rax)
   14a75:	00 00                	add    %al,(%rax)
   14a77:	00 ea                	add    %ch,%dl
   14a79:	02 00                	add    (%rax),%al
   14a7b:	00 00                	add    %al,(%rax)
   14a7d:	00 00                	add    %al,(%rax)
   14a7f:	00 ea                	add    %ch,%dl
   14a81:	02 00                	add    (%rax),%al
   14a83:	00 00                	add    %al,(%rax)
   14a85:	00 00                	add    %al,(%rax)
   14a87:	00 ea                	add    %ch,%dl
   14a89:	02 00                	add    (%rax),%al
   14a8b:	00 00                	add    %al,(%rax)
   14a8d:	00 00                	add    %al,(%rax)
   14a8f:	00 ea                	add    %ch,%dl
   14a91:	02 00                	add    (%rax),%al
   14a93:	00 00                	add    %al,(%rax)
   14a95:	00 00                	add    %al,(%rax)
   14a97:	00 ea                	add    %ch,%dl
   14a99:	02 00                	add    (%rax),%al
   14a9b:	00 00                	add    %al,(%rax)
   14a9d:	00 00                	add    %al,(%rax)
   14a9f:	00 ea                	add    %ch,%dl
   14aa1:	02 00                	add    (%rax),%al
   14aa3:	00 00                	add    %al,(%rax)
   14aa5:	00 00                	add    %al,(%rax)
   14aa7:	00 ea                	add    %ch,%dl
   14aa9:	02 00                	add    (%rax),%al
   14aab:	00 00                	add    %al,(%rax)
   14aad:	00 00                	add    %al,(%rax)
   14aaf:	00 ea                	add    %ch,%dl
   14ab1:	02 00                	add    (%rax),%al
   14ab3:	00 00                	add    %al,(%rax)
   14ab5:	00 00                	add    %al,(%rax)
   14ab7:	00 ea                	add    %ch,%dl
   14ab9:	02 00                	add    (%rax),%al
   14abb:	00 00                	add    %al,(%rax)
   14abd:	00 00                	add    %al,(%rax)
   14abf:	00 ea                	add    %ch,%dl
   14ac1:	02 00                	add    (%rax),%al
   14ac3:	00 00                	add    %al,(%rax)
   14ac5:	00 00                	add    %al,(%rax)
   14ac7:	00 ea                	add    %ch,%dl
   14ac9:	02 00                	add    (%rax),%al
   14acb:	00 00                	add    %al,(%rax)
   14acd:	00 00                	add    %al,(%rax)
   14acf:	00 ea                	add    %ch,%dl
   14ad1:	02 00                	add    (%rax),%al
   14ad3:	00 00                	add    %al,(%rax)
   14ad5:	00 00                	add    %al,(%rax)
   14ad7:	00 ea                	add    %ch,%dl
   14ad9:	02 00                	add    (%rax),%al
   14adb:	00 00                	add    %al,(%rax)
   14add:	00 00                	add    %al,(%rax)
   14adf:	00 ea                	add    %ch,%dl
   14ae1:	02 00                	add    (%rax),%al
   14ae3:	00 00                	add    %al,(%rax)
   14ae5:	00 00                	add    %al,(%rax)
   14ae7:	00 ea                	add    %ch,%dl
   14ae9:	02 00                	add    (%rax),%al
   14aeb:	00 00                	add    %al,(%rax)
   14aed:	00 00                	add    %al,(%rax)
   14aef:	00 ea                	add    %ch,%dl
   14af1:	02 00                	add    (%rax),%al
   14af3:	00 00                	add    %al,(%rax)
   14af5:	00 00                	add    %al,(%rax)
   14af7:	00 ea                	add    %ch,%dl
   14af9:	02 00                	add    (%rax),%al
   14afb:	00 00                	add    %al,(%rax)
   14afd:	00 00                	add    %al,(%rax)
   14aff:	00 ea                	add    %ch,%dl
   14b01:	02 00                	add    (%rax),%al
   14b03:	00 00                	add    %al,(%rax)
   14b05:	00 00                	add    %al,(%rax)
   14b07:	00 ea                	add    %ch,%dl
   14b09:	02 00                	add    (%rax),%al
   14b0b:	00 00                	add    %al,(%rax)
   14b0d:	00 00                	add    %al,(%rax)
   14b0f:	00 ea                	add    %ch,%dl
   14b11:	02 00                	add    (%rax),%al
   14b13:	00 00                	add    %al,(%rax)
   14b15:	00 00                	add    %al,(%rax)
   14b17:	00 ea                	add    %ch,%dl
   14b19:	02 00                	add    (%rax),%al
   14b1b:	00 00                	add    %al,(%rax)
   14b1d:	00 00                	add    %al,(%rax)
   14b1f:	00 ea                	add    %ch,%dl
   14b21:	02 00                	add    (%rax),%al
   14b23:	00 00                	add    %al,(%rax)
   14b25:	00 00                	add    %al,(%rax)
   14b27:	00 ea                	add    %ch,%dl
   14b29:	02 00                	add    (%rax),%al
   14b2b:	00 00                	add    %al,(%rax)
   14b2d:	00 00                	add    %al,(%rax)
   14b2f:	00 ea                	add    %ch,%dl
   14b31:	02 00                	add    (%rax),%al
   14b33:	00 00                	add    %al,(%rax)
   14b35:	00 00                	add    %al,(%rax)
   14b37:	00 ea                	add    %ch,%dl
   14b39:	02 00                	add    (%rax),%al
   14b3b:	00 00                	add    %al,(%rax)
   14b3d:	00 00                	add    %al,(%rax)
   14b3f:	00 ea                	add    %ch,%dl
   14b41:	02 00                	add    (%rax),%al
   14b43:	00 00                	add    %al,(%rax)
   14b45:	00 00                	add    %al,(%rax)
   14b47:	00 ea                	add    %ch,%dl
   14b49:	02 00                	add    (%rax),%al
   14b4b:	00 00                	add    %al,(%rax)
   14b4d:	00 00                	add    %al,(%rax)
   14b4f:	00 ea                	add    %ch,%dl
   14b51:	02 00                	add    (%rax),%al
   14b53:	00 00                	add    %al,(%rax)
   14b55:	00 00                	add    %al,(%rax)
   14b57:	00 ea                	add    %ch,%dl
   14b59:	02 00                	add    (%rax),%al
   14b5b:	00 00                	add    %al,(%rax)
   14b5d:	00 00                	add    %al,(%rax)
   14b5f:	00 ea                	add    %ch,%dl
   14b61:	02 00                	add    (%rax),%al
   14b63:	00 00                	add    %al,(%rax)
   14b65:	00 00                	add    %al,(%rax)
   14b67:	00 ea                	add    %ch,%dl
   14b69:	02 00                	add    (%rax),%al
   14b6b:	00 00                	add    %al,(%rax)
   14b6d:	00 00                	add    %al,(%rax)
   14b6f:	00 ea                	add    %ch,%dl
   14b71:	02 00                	add    (%rax),%al
   14b73:	00 00                	add    %al,(%rax)
   14b75:	00 00                	add    %al,(%rax)
   14b77:	00 ea                	add    %ch,%dl
   14b79:	02 00                	add    (%rax),%al
   14b7b:	00 00                	add    %al,(%rax)
   14b7d:	00 00                	add    %al,(%rax)
   14b7f:	00 ea                	add    %ch,%dl
   14b81:	02 00                	add    (%rax),%al
   14b83:	00 00                	add    %al,(%rax)
   14b85:	00 00                	add    %al,(%rax)
   14b87:	00 ea                	add    %ch,%dl
   14b89:	02 00                	add    (%rax),%al
   14b8b:	00 00                	add    %al,(%rax)
   14b8d:	00 00                	add    %al,(%rax)
   14b8f:	00 ea                	add    %ch,%dl
   14b91:	02 00                	add    (%rax),%al
   14b93:	00 00                	add    %al,(%rax)
   14b95:	00 00                	add    %al,(%rax)
   14b97:	00 ea                	add    %ch,%dl
   14b99:	02 00                	add    (%rax),%al
   14b9b:	00 00                	add    %al,(%rax)
   14b9d:	00 00                	add    %al,(%rax)
   14b9f:	00 ea                	add    %ch,%dl
   14ba1:	02 00                	add    (%rax),%al
   14ba3:	00 00                	add    %al,(%rax)
   14ba5:	00 00                	add    %al,(%rax)
   14ba7:	00 ea                	add    %ch,%dl
   14ba9:	02 00                	add    (%rax),%al
   14bab:	00 00                	add    %al,(%rax)
   14bad:	00 00                	add    %al,(%rax)
   14baf:	00 ea                	add    %ch,%dl
   14bb1:	02 00                	add    (%rax),%al
   14bb3:	00 00                	add    %al,(%rax)
   14bb5:	00 00                	add    %al,(%rax)
   14bb7:	00 ea                	add    %ch,%dl
   14bb9:	02 00                	add    (%rax),%al
   14bbb:	00 00                	add    %al,(%rax)
   14bbd:	00 00                	add    %al,(%rax)
   14bbf:	00 ea                	add    %ch,%dl
   14bc1:	02 00                	add    (%rax),%al
   14bc3:	00 00                	add    %al,(%rax)
   14bc5:	00 00                	add    %al,(%rax)
   14bc7:	00 ea                	add    %ch,%dl
   14bc9:	02 00                	add    (%rax),%al
   14bcb:	00 00                	add    %al,(%rax)
   14bcd:	00 00                	add    %al,(%rax)
   14bcf:	00 ea                	add    %ch,%dl
   14bd1:	02 00                	add    (%rax),%al
   14bd3:	00 00                	add    %al,(%rax)
   14bd5:	00 00                	add    %al,(%rax)
   14bd7:	00 ea                	add    %ch,%dl
   14bd9:	02 00                	add    (%rax),%al
   14bdb:	00 00                	add    %al,(%rax)
   14bdd:	00 00                	add    %al,(%rax)
   14bdf:	00 ea                	add    %ch,%dl
   14be1:	02 00                	add    (%rax),%al
   14be3:	00 00                	add    %al,(%rax)
   14be5:	00 00                	add    %al,(%rax)
   14be7:	00 ea                	add    %ch,%dl
   14be9:	02 00                	add    (%rax),%al
   14beb:	00 00                	add    %al,(%rax)
   14bed:	00 00                	add    %al,(%rax)
   14bef:	00 ea                	add    %ch,%dl
   14bf1:	02 00                	add    (%rax),%al
   14bf3:	00 00                	add    %al,(%rax)
   14bf5:	00 00                	add    %al,(%rax)
   14bf7:	00 ea                	add    %ch,%dl
   14bf9:	02 00                	add    (%rax),%al
   14bfb:	00 00                	add    %al,(%rax)
   14bfd:	00 00                	add    %al,(%rax)
   14bff:	00 f1                	add    %dh,%cl
   14c01:	02 00                	add    (%rax),%al
   14c03:	00 00                	add    %al,(%rax)
   14c05:	00 00                	add    %al,(%rax)
   14c07:	00 f1                	add    %dh,%cl
   14c09:	02 00                	add    (%rax),%al
   14c0b:	00 00                	add    %al,(%rax)
   14c0d:	00 00                	add    %al,(%rax)
   14c0f:	00 f1                	add    %dh,%cl
   14c11:	02 00                	add    (%rax),%al
   14c13:	00 00                	add    %al,(%rax)
   14c15:	00 00                	add    %al,(%rax)
   14c17:	00 f1                	add    %dh,%cl
   14c19:	02 00                	add    (%rax),%al
   14c1b:	00 00                	add    %al,(%rax)
   14c1d:	00 00                	add    %al,(%rax)
   14c1f:	00 f1                	add    %dh,%cl
   14c21:	02 00                	add    (%rax),%al
   14c23:	00 00                	add    %al,(%rax)
   14c25:	00 00                	add    %al,(%rax)
   14c27:	00 f1                	add    %dh,%cl
   14c29:	02 00                	add    (%rax),%al
   14c2b:	00 00                	add    %al,(%rax)
   14c2d:	00 00                	add    %al,(%rax)
   14c2f:	00 f1                	add    %dh,%cl
   14c31:	02 00                	add    (%rax),%al
   14c33:	00 00                	add    %al,(%rax)
   14c35:	00 00                	add    %al,(%rax)
   14c37:	00 f1                	add    %dh,%cl
   14c39:	02 00                	add    (%rax),%al
   14c3b:	00 00                	add    %al,(%rax)
   14c3d:	00 00                	add    %al,(%rax)
   14c3f:	00 f1                	add    %dh,%cl
   14c41:	02 00                	add    (%rax),%al
   14c43:	00 00                	add    %al,(%rax)
   14c45:	00 00                	add    %al,(%rax)
   14c47:	00 f1                	add    %dh,%cl
   14c49:	02 00                	add    (%rax),%al
   14c4b:	00 00                	add    %al,(%rax)
   14c4d:	00 00                	add    %al,(%rax)
   14c4f:	00 f1                	add    %dh,%cl
   14c51:	02 00                	add    (%rax),%al
   14c53:	00 00                	add    %al,(%rax)
   14c55:	00 00                	add    %al,(%rax)
   14c57:	00 f1                	add    %dh,%cl
   14c59:	02 00                	add    (%rax),%al
   14c5b:	00 00                	add    %al,(%rax)
   14c5d:	00 00                	add    %al,(%rax)
   14c5f:	00 f1                	add    %dh,%cl
   14c61:	02 00                	add    (%rax),%al
   14c63:	00 00                	add    %al,(%rax)
   14c65:	00 00                	add    %al,(%rax)
   14c67:	00 f1                	add    %dh,%cl
   14c69:	02 00                	add    (%rax),%al
   14c6b:	00 00                	add    %al,(%rax)
   14c6d:	00 00                	add    %al,(%rax)
   14c6f:	00 f1                	add    %dh,%cl
   14c71:	02 00                	add    (%rax),%al
   14c73:	00 00                	add    %al,(%rax)
   14c75:	00 00                	add    %al,(%rax)
   14c77:	00 f1                	add    %dh,%cl
   14c79:	02 00                	add    (%rax),%al
   14c7b:	00 00                	add    %al,(%rax)
   14c7d:	00 00                	add    %al,(%rax)
   14c7f:	00 f1                	add    %dh,%cl
   14c81:	02 00                	add    (%rax),%al
   14c83:	00 00                	add    %al,(%rax)
   14c85:	00 00                	add    %al,(%rax)
   14c87:	00 f1                	add    %dh,%cl
   14c89:	02 00                	add    (%rax),%al
   14c8b:	00 00                	add    %al,(%rax)
   14c8d:	00 00                	add    %al,(%rax)
   14c8f:	00 f1                	add    %dh,%cl
   14c91:	02 00                	add    (%rax),%al
   14c93:	00 00                	add    %al,(%rax)
   14c95:	00 00                	add    %al,(%rax)
   14c97:	00 f1                	add    %dh,%cl
   14c99:	02 00                	add    (%rax),%al
   14c9b:	00 00                	add    %al,(%rax)
   14c9d:	00 00                	add    %al,(%rax)
   14c9f:	00 f1                	add    %dh,%cl
   14ca1:	02 00                	add    (%rax),%al
   14ca3:	00 00                	add    %al,(%rax)
   14ca5:	00 00                	add    %al,(%rax)
   14ca7:	00 f1                	add    %dh,%cl
   14ca9:	02 00                	add    (%rax),%al
   14cab:	00 00                	add    %al,(%rax)
   14cad:	00 00                	add    %al,(%rax)
   14caf:	00 f1                	add    %dh,%cl
   14cb1:	02 00                	add    (%rax),%al
   14cb3:	00 00                	add    %al,(%rax)
   14cb5:	00 00                	add    %al,(%rax)
   14cb7:	00 f1                	add    %dh,%cl
   14cb9:	02 00                	add    (%rax),%al
   14cbb:	00 00                	add    %al,(%rax)
   14cbd:	00 00                	add    %al,(%rax)
   14cbf:	00 f1                	add    %dh,%cl
   14cc1:	02 00                	add    (%rax),%al
   14cc3:	00 00                	add    %al,(%rax)
   14cc5:	00 00                	add    %al,(%rax)
   14cc7:	00 f1                	add    %dh,%cl
   14cc9:	02 00                	add    (%rax),%al
   14ccb:	00 00                	add    %al,(%rax)
   14ccd:	00 00                	add    %al,(%rax)
   14ccf:	00 f1                	add    %dh,%cl
   14cd1:	02 00                	add    (%rax),%al
   14cd3:	00 00                	add    %al,(%rax)
   14cd5:	00 00                	add    %al,(%rax)
   14cd7:	00 f1                	add    %dh,%cl
   14cd9:	02 00                	add    (%rax),%al
   14cdb:	00 00                	add    %al,(%rax)
   14cdd:	00 00                	add    %al,(%rax)
   14cdf:	00 f1                	add    %dh,%cl
   14ce1:	02 00                	add    (%rax),%al
   14ce3:	00 00                	add    %al,(%rax)
   14ce5:	00 00                	add    %al,(%rax)
   14ce7:	00 f1                	add    %dh,%cl
   14ce9:	02 00                	add    (%rax),%al
   14ceb:	00 00                	add    %al,(%rax)
   14ced:	00 00                	add    %al,(%rax)
   14cef:	00 f1                	add    %dh,%cl
   14cf1:	02 00                	add    (%rax),%al
   14cf3:	00 00                	add    %al,(%rax)
   14cf5:	00 00                	add    %al,(%rax)
   14cf7:	00 f1                	add    %dh,%cl
   14cf9:	02 00                	add    (%rax),%al
   14cfb:	00 00                	add    %al,(%rax)
   14cfd:	00 00                	add    %al,(%rax)
   14cff:	00 f1                	add    %dh,%cl
   14d01:	02 00                	add    (%rax),%al
   14d03:	00 00                	add    %al,(%rax)
   14d05:	00 00                	add    %al,(%rax)
   14d07:	00 f1                	add    %dh,%cl
   14d09:	02 00                	add    (%rax),%al
   14d0b:	00 00                	add    %al,(%rax)
   14d0d:	00 00                	add    %al,(%rax)
   14d0f:	00 f1                	add    %dh,%cl
   14d11:	02 00                	add    (%rax),%al
   14d13:	00 00                	add    %al,(%rax)
   14d15:	00 00                	add    %al,(%rax)
   14d17:	00 f1                	add    %dh,%cl
   14d19:	02 00                	add    (%rax),%al
   14d1b:	00 00                	add    %al,(%rax)
   14d1d:	00 00                	add    %al,(%rax)
   14d1f:	00 f1                	add    %dh,%cl
   14d21:	02 00                	add    (%rax),%al
   14d23:	00 00                	add    %al,(%rax)
   14d25:	00 00                	add    %al,(%rax)
   14d27:	00 f1                	add    %dh,%cl
   14d29:	02 00                	add    (%rax),%al
   14d2b:	00 00                	add    %al,(%rax)
   14d2d:	00 00                	add    %al,(%rax)
   14d2f:	00 f1                	add    %dh,%cl
   14d31:	02 00                	add    (%rax),%al
   14d33:	00 00                	add    %al,(%rax)
   14d35:	00 00                	add    %al,(%rax)
   14d37:	00 f1                	add    %dh,%cl
   14d39:	02 00                	add    (%rax),%al
   14d3b:	00 00                	add    %al,(%rax)
   14d3d:	00 00                	add    %al,(%rax)
   14d3f:	00 f1                	add    %dh,%cl
   14d41:	02 00                	add    (%rax),%al
   14d43:	00 00                	add    %al,(%rax)
   14d45:	00 00                	add    %al,(%rax)
   14d47:	00 f1                	add    %dh,%cl
   14d49:	02 00                	add    (%rax),%al
   14d4b:	00 00                	add    %al,(%rax)
   14d4d:	00 00                	add    %al,(%rax)
   14d4f:	00 f1                	add    %dh,%cl
   14d51:	02 00                	add    (%rax),%al
   14d53:	00 00                	add    %al,(%rax)
   14d55:	00 00                	add    %al,(%rax)
   14d57:	00 f1                	add    %dh,%cl
   14d59:	02 00                	add    (%rax),%al
   14d5b:	00 00                	add    %al,(%rax)
   14d5d:	00 00                	add    %al,(%rax)
   14d5f:	00 f1                	add    %dh,%cl
   14d61:	02 00                	add    (%rax),%al
   14d63:	00 00                	add    %al,(%rax)
   14d65:	00 00                	add    %al,(%rax)
   14d67:	00 f1                	add    %dh,%cl
   14d69:	02 00                	add    (%rax),%al
   14d6b:	00 00                	add    %al,(%rax)
   14d6d:	00 00                	add    %al,(%rax)
   14d6f:	00 f1                	add    %dh,%cl
   14d71:	02 00                	add    (%rax),%al
   14d73:	00 00                	add    %al,(%rax)
   14d75:	00 00                	add    %al,(%rax)
   14d77:	00 f1                	add    %dh,%cl
   14d79:	02 00                	add    (%rax),%al
   14d7b:	00 00                	add    %al,(%rax)
   14d7d:	00 00                	add    %al,(%rax)
   14d7f:	00 f1                	add    %dh,%cl
   14d81:	02 00                	add    (%rax),%al
   14d83:	00 00                	add    %al,(%rax)
   14d85:	00 00                	add    %al,(%rax)
   14d87:	00 f1                	add    %dh,%cl
   14d89:	02 00                	add    (%rax),%al
   14d8b:	00 00                	add    %al,(%rax)
   14d8d:	00 00                	add    %al,(%rax)
   14d8f:	00 f1                	add    %dh,%cl
   14d91:	02 00                	add    (%rax),%al
   14d93:	00 00                	add    %al,(%rax)
   14d95:	00 00                	add    %al,(%rax)
   14d97:	00 f1                	add    %dh,%cl
   14d99:	02 00                	add    (%rax),%al
   14d9b:	00 00                	add    %al,(%rax)
   14d9d:	00 00                	add    %al,(%rax)
   14d9f:	00 f1                	add    %dh,%cl
   14da1:	02 00                	add    (%rax),%al
   14da3:	00 00                	add    %al,(%rax)
   14da5:	00 00                	add    %al,(%rax)
   14da7:	00 f1                	add    %dh,%cl
   14da9:	02 00                	add    (%rax),%al
   14dab:	00 00                	add    %al,(%rax)
   14dad:	00 00                	add    %al,(%rax)
   14daf:	00 f1                	add    %dh,%cl
   14db1:	02 00                	add    (%rax),%al
   14db3:	00 00                	add    %al,(%rax)
   14db5:	00 00                	add    %al,(%rax)
   14db7:	00 f1                	add    %dh,%cl
   14db9:	02 00                	add    (%rax),%al
   14dbb:	00 00                	add    %al,(%rax)
   14dbd:	00 00                	add    %al,(%rax)
   14dbf:	00 f1                	add    %dh,%cl
   14dc1:	02 00                	add    (%rax),%al
   14dc3:	00 00                	add    %al,(%rax)
   14dc5:	00 00                	add    %al,(%rax)
   14dc7:	00 f1                	add    %dh,%cl
   14dc9:	02 00                	add    (%rax),%al
   14dcb:	00 00                	add    %al,(%rax)
   14dcd:	00 00                	add    %al,(%rax)
   14dcf:	00 f1                	add    %dh,%cl
   14dd1:	02 00                	add    (%rax),%al
   14dd3:	00 00                	add    %al,(%rax)
   14dd5:	00 00                	add    %al,(%rax)
   14dd7:	00 f1                	add    %dh,%cl
   14dd9:	02 00                	add    (%rax),%al
   14ddb:	00 00                	add    %al,(%rax)
   14ddd:	00 00                	add    %al,(%rax)
   14ddf:	00 f1                	add    %dh,%cl
   14de1:	02 00                	add    (%rax),%al
   14de3:	00 00                	add    %al,(%rax)
   14de5:	00 00                	add    %al,(%rax)
   14de7:	00 f1                	add    %dh,%cl
   14de9:	02 00                	add    (%rax),%al
   14deb:	00 00                	add    %al,(%rax)
   14ded:	00 00                	add    %al,(%rax)
   14def:	00 f1                	add    %dh,%cl
   14df1:	02 00                	add    (%rax),%al
   14df3:	00 00                	add    %al,(%rax)
   14df5:	00 00                	add    %al,(%rax)
   14df7:	00 f1                	add    %dh,%cl
   14df9:	02 00                	add    (%rax),%al
   14dfb:	00 00                	add    %al,(%rax)
   14dfd:	00 00                	add    %al,(%rax)
   14dff:	00 f8                	add    %bh,%al
   14e01:	02 00                	add    (%rax),%al
   14e03:	00 00                	add    %al,(%rax)
   14e05:	00 00                	add    %al,(%rax)
   14e07:	00 f8                	add    %bh,%al
   14e09:	02 00                	add    (%rax),%al
   14e0b:	00 00                	add    %al,(%rax)
   14e0d:	00 00                	add    %al,(%rax)
   14e0f:	00 f8                	add    %bh,%al
   14e11:	02 00                	add    (%rax),%al
   14e13:	00 00                	add    %al,(%rax)
   14e15:	00 00                	add    %al,(%rax)
   14e17:	00 f8                	add    %bh,%al
   14e19:	02 00                	add    (%rax),%al
   14e1b:	00 00                	add    %al,(%rax)
   14e1d:	00 00                	add    %al,(%rax)
   14e1f:	00 f8                	add    %bh,%al
   14e21:	02 00                	add    (%rax),%al
   14e23:	00 00                	add    %al,(%rax)
   14e25:	00 00                	add    %al,(%rax)
   14e27:	00 f8                	add    %bh,%al
   14e29:	02 00                	add    (%rax),%al
   14e2b:	00 00                	add    %al,(%rax)
   14e2d:	00 00                	add    %al,(%rax)
   14e2f:	00 f8                	add    %bh,%al
   14e31:	02 00                	add    (%rax),%al
   14e33:	00 00                	add    %al,(%rax)
   14e35:	00 00                	add    %al,(%rax)
   14e37:	00 f8                	add    %bh,%al
   14e39:	02 00                	add    (%rax),%al
   14e3b:	00 00                	add    %al,(%rax)
   14e3d:	00 00                	add    %al,(%rax)
   14e3f:	00 f8                	add    %bh,%al
   14e41:	02 00                	add    (%rax),%al
   14e43:	00 00                	add    %al,(%rax)
   14e45:	00 00                	add    %al,(%rax)
   14e47:	00 f8                	add    %bh,%al
   14e49:	02 00                	add    (%rax),%al
   14e4b:	00 00                	add    %al,(%rax)
   14e4d:	00 00                	add    %al,(%rax)
   14e4f:	00 f8                	add    %bh,%al
   14e51:	02 00                	add    (%rax),%al
   14e53:	00 00                	add    %al,(%rax)
   14e55:	00 00                	add    %al,(%rax)
   14e57:	00 f8                	add    %bh,%al
   14e59:	02 00                	add    (%rax),%al
   14e5b:	00 00                	add    %al,(%rax)
   14e5d:	00 00                	add    %al,(%rax)
   14e5f:	00 f8                	add    %bh,%al
   14e61:	02 00                	add    (%rax),%al
   14e63:	00 00                	add    %al,(%rax)
   14e65:	00 00                	add    %al,(%rax)
   14e67:	00 f8                	add    %bh,%al
   14e69:	02 00                	add    (%rax),%al
   14e6b:	00 00                	add    %al,(%rax)
   14e6d:	00 00                	add    %al,(%rax)
   14e6f:	00 f8                	add    %bh,%al
   14e71:	02 00                	add    (%rax),%al
   14e73:	00 00                	add    %al,(%rax)
   14e75:	00 00                	add    %al,(%rax)
   14e77:	00 f8                	add    %bh,%al
   14e79:	02 00                	add    (%rax),%al
   14e7b:	00 00                	add    %al,(%rax)
   14e7d:	00 00                	add    %al,(%rax)
   14e7f:	00 f8                	add    %bh,%al
   14e81:	02 00                	add    (%rax),%al
   14e83:	00 00                	add    %al,(%rax)
   14e85:	00 00                	add    %al,(%rax)
   14e87:	00 f8                	add    %bh,%al
   14e89:	02 00                	add    (%rax),%al
   14e8b:	00 00                	add    %al,(%rax)
   14e8d:	00 00                	add    %al,(%rax)
   14e8f:	00 f8                	add    %bh,%al
   14e91:	02 00                	add    (%rax),%al
   14e93:	00 00                	add    %al,(%rax)
   14e95:	00 00                	add    %al,(%rax)
   14e97:	00 f8                	add    %bh,%al
   14e99:	02 00                	add    (%rax),%al
   14e9b:	00 00                	add    %al,(%rax)
   14e9d:	00 00                	add    %al,(%rax)
   14e9f:	00 f8                	add    %bh,%al
   14ea1:	02 00                	add    (%rax),%al
   14ea3:	00 00                	add    %al,(%rax)
   14ea5:	00 00                	add    %al,(%rax)
   14ea7:	00 f8                	add    %bh,%al
   14ea9:	02 00                	add    (%rax),%al
   14eab:	00 00                	add    %al,(%rax)
   14ead:	00 00                	add    %al,(%rax)
   14eaf:	00 f8                	add    %bh,%al
   14eb1:	02 00                	add    (%rax),%al
   14eb3:	00 00                	add    %al,(%rax)
   14eb5:	00 00                	add    %al,(%rax)
   14eb7:	00 f8                	add    %bh,%al
   14eb9:	02 00                	add    (%rax),%al
   14ebb:	00 00                	add    %al,(%rax)
   14ebd:	00 00                	add    %al,(%rax)
   14ebf:	00 f8                	add    %bh,%al
   14ec1:	02 00                	add    (%rax),%al
   14ec3:	00 00                	add    %al,(%rax)
   14ec5:	00 00                	add    %al,(%rax)
   14ec7:	00 f8                	add    %bh,%al
   14ec9:	02 00                	add    (%rax),%al
   14ecb:	00 00                	add    %al,(%rax)
   14ecd:	00 00                	add    %al,(%rax)
   14ecf:	00 f8                	add    %bh,%al
   14ed1:	02 00                	add    (%rax),%al
   14ed3:	00 00                	add    %al,(%rax)
   14ed5:	00 00                	add    %al,(%rax)
   14ed7:	00 f8                	add    %bh,%al
   14ed9:	02 00                	add    (%rax),%al
   14edb:	00 00                	add    %al,(%rax)
   14edd:	00 00                	add    %al,(%rax)
   14edf:	00 f8                	add    %bh,%al
   14ee1:	02 00                	add    (%rax),%al
   14ee3:	00 00                	add    %al,(%rax)
   14ee5:	00 00                	add    %al,(%rax)
   14ee7:	00 f8                	add    %bh,%al
   14ee9:	02 00                	add    (%rax),%al
   14eeb:	00 00                	add    %al,(%rax)
   14eed:	00 00                	add    %al,(%rax)
   14eef:	00 f8                	add    %bh,%al
   14ef1:	02 00                	add    (%rax),%al
   14ef3:	00 00                	add    %al,(%rax)
   14ef5:	00 00                	add    %al,(%rax)
   14ef7:	00 f8                	add    %bh,%al
   14ef9:	02 00                	add    (%rax),%al
   14efb:	00 00                	add    %al,(%rax)
   14efd:	00 00                	add    %al,(%rax)
   14eff:	00 f8                	add    %bh,%al
   14f01:	02 00                	add    (%rax),%al
   14f03:	00 00                	add    %al,(%rax)
   14f05:	00 00                	add    %al,(%rax)
   14f07:	00 f8                	add    %bh,%al
   14f09:	02 00                	add    (%rax),%al
   14f0b:	00 00                	add    %al,(%rax)
   14f0d:	00 00                	add    %al,(%rax)
   14f0f:	00 f8                	add    %bh,%al
   14f11:	02 00                	add    (%rax),%al
   14f13:	00 00                	add    %al,(%rax)
   14f15:	00 00                	add    %al,(%rax)
   14f17:	00 f8                	add    %bh,%al
   14f19:	02 00                	add    (%rax),%al
   14f1b:	00 00                	add    %al,(%rax)
   14f1d:	00 00                	add    %al,(%rax)
   14f1f:	00 f8                	add    %bh,%al
   14f21:	02 00                	add    (%rax),%al
   14f23:	00 00                	add    %al,(%rax)
   14f25:	00 00                	add    %al,(%rax)
   14f27:	00 f8                	add    %bh,%al
   14f29:	02 00                	add    (%rax),%al
   14f2b:	00 00                	add    %al,(%rax)
   14f2d:	00 00                	add    %al,(%rax)
   14f2f:	00 f8                	add    %bh,%al
   14f31:	02 00                	add    (%rax),%al
   14f33:	00 00                	add    %al,(%rax)
   14f35:	00 00                	add    %al,(%rax)
   14f37:	00 f8                	add    %bh,%al
   14f39:	02 00                	add    (%rax),%al
   14f3b:	00 00                	add    %al,(%rax)
   14f3d:	00 00                	add    %al,(%rax)
   14f3f:	00 f8                	add    %bh,%al
   14f41:	02 00                	add    (%rax),%al
   14f43:	00 00                	add    %al,(%rax)
   14f45:	00 00                	add    %al,(%rax)
   14f47:	00 f8                	add    %bh,%al
   14f49:	02 00                	add    (%rax),%al
   14f4b:	00 00                	add    %al,(%rax)
   14f4d:	00 00                	add    %al,(%rax)
   14f4f:	00 f8                	add    %bh,%al
   14f51:	02 00                	add    (%rax),%al
   14f53:	00 00                	add    %al,(%rax)
   14f55:	00 00                	add    %al,(%rax)
   14f57:	00 f8                	add    %bh,%al
   14f59:	02 00                	add    (%rax),%al
   14f5b:	00 00                	add    %al,(%rax)
   14f5d:	00 00                	add    %al,(%rax)
   14f5f:	00 f8                	add    %bh,%al
   14f61:	02 00                	add    (%rax),%al
   14f63:	00 00                	add    %al,(%rax)
   14f65:	00 00                	add    %al,(%rax)
   14f67:	00 f8                	add    %bh,%al
   14f69:	02 00                	add    (%rax),%al
   14f6b:	00 00                	add    %al,(%rax)
   14f6d:	00 00                	add    %al,(%rax)
   14f6f:	00 f8                	add    %bh,%al
   14f71:	02 00                	add    (%rax),%al
   14f73:	00 00                	add    %al,(%rax)
   14f75:	00 00                	add    %al,(%rax)
   14f77:	00 f8                	add    %bh,%al
   14f79:	02 00                	add    (%rax),%al
   14f7b:	00 00                	add    %al,(%rax)
   14f7d:	00 00                	add    %al,(%rax)
   14f7f:	00 f8                	add    %bh,%al
   14f81:	02 00                	add    (%rax),%al
   14f83:	00 00                	add    %al,(%rax)
   14f85:	00 00                	add    %al,(%rax)
   14f87:	00 f8                	add    %bh,%al
   14f89:	02 00                	add    (%rax),%al
   14f8b:	00 00                	add    %al,(%rax)
   14f8d:	00 00                	add    %al,(%rax)
   14f8f:	00 f8                	add    %bh,%al
   14f91:	02 00                	add    (%rax),%al
   14f93:	00 00                	add    %al,(%rax)
   14f95:	00 00                	add    %al,(%rax)
   14f97:	00 f8                	add    %bh,%al
   14f99:	02 00                	add    (%rax),%al
   14f9b:	00 00                	add    %al,(%rax)
   14f9d:	00 00                	add    %al,(%rax)
   14f9f:	00 f8                	add    %bh,%al
   14fa1:	02 00                	add    (%rax),%al
   14fa3:	00 00                	add    %al,(%rax)
   14fa5:	00 00                	add    %al,(%rax)
   14fa7:	00 f8                	add    %bh,%al
   14fa9:	02 00                	add    (%rax),%al
   14fab:	00 00                	add    %al,(%rax)
   14fad:	00 00                	add    %al,(%rax)
   14faf:	00 f8                	add    %bh,%al
   14fb1:	02 00                	add    (%rax),%al
   14fb3:	00 00                	add    %al,(%rax)
   14fb5:	00 00                	add    %al,(%rax)
   14fb7:	00 f8                	add    %bh,%al
   14fb9:	02 00                	add    (%rax),%al
   14fbb:	00 00                	add    %al,(%rax)
   14fbd:	00 00                	add    %al,(%rax)
   14fbf:	00 f8                	add    %bh,%al
   14fc1:	02 00                	add    (%rax),%al
   14fc3:	00 00                	add    %al,(%rax)
   14fc5:	00 00                	add    %al,(%rax)
   14fc7:	00 f8                	add    %bh,%al
   14fc9:	02 00                	add    (%rax),%al
   14fcb:	00 00                	add    %al,(%rax)
   14fcd:	00 00                	add    %al,(%rax)
   14fcf:	00 f8                	add    %bh,%al
   14fd1:	02 00                	add    (%rax),%al
   14fd3:	00 00                	add    %al,(%rax)
   14fd5:	00 00                	add    %al,(%rax)
   14fd7:	00 f8                	add    %bh,%al
   14fd9:	02 00                	add    (%rax),%al
   14fdb:	00 00                	add    %al,(%rax)
   14fdd:	00 00                	add    %al,(%rax)
   14fdf:	00 f8                	add    %bh,%al
   14fe1:	02 00                	add    (%rax),%al
   14fe3:	00 00                	add    %al,(%rax)
   14fe5:	00 00                	add    %al,(%rax)
   14fe7:	00 f8                	add    %bh,%al
   14fe9:	02 00                	add    (%rax),%al
   14feb:	00 00                	add    %al,(%rax)
   14fed:	00 00                	add    %al,(%rax)
   14fef:	00 f8                	add    %bh,%al
   14ff1:	02 00                	add    (%rax),%al
   14ff3:	00 00                	add    %al,(%rax)
   14ff5:	00 00                	add    %al,(%rax)
   14ff7:	00 f8                	add    %bh,%al
   14ff9:	02 00                	add    (%rax),%al
   14ffb:	00 00                	add    %al,(%rax)
   14ffd:	00 00                	add    %al,(%rax)
   14fff:	00 ff                	add    %bh,%bh
   15001:	02 00                	add    (%rax),%al
   15003:	00 00                	add    %al,(%rax)
   15005:	00 00                	add    %al,(%rax)
   15007:	00 ff                	add    %bh,%bh
   15009:	02 00                	add    (%rax),%al
   1500b:	00 00                	add    %al,(%rax)
   1500d:	00 00                	add    %al,(%rax)
   1500f:	00 ff                	add    %bh,%bh
   15011:	02 00                	add    (%rax),%al
   15013:	00 00                	add    %al,(%rax)
   15015:	00 00                	add    %al,(%rax)
   15017:	00 ff                	add    %bh,%bh
   15019:	02 00                	add    (%rax),%al
   1501b:	00 00                	add    %al,(%rax)
   1501d:	00 00                	add    %al,(%rax)
   1501f:	00 ff                	add    %bh,%bh
   15021:	02 00                	add    (%rax),%al
   15023:	00 00                	add    %al,(%rax)
   15025:	00 00                	add    %al,(%rax)
   15027:	00 ff                	add    %bh,%bh
   15029:	02 00                	add    (%rax),%al
   1502b:	00 00                	add    %al,(%rax)
   1502d:	00 00                	add    %al,(%rax)
   1502f:	00 ff                	add    %bh,%bh
   15031:	02 00                	add    (%rax),%al
   15033:	00 00                	add    %al,(%rax)
   15035:	00 00                	add    %al,(%rax)
   15037:	00 ff                	add    %bh,%bh
   15039:	02 00                	add    (%rax),%al
   1503b:	00 00                	add    %al,(%rax)
   1503d:	00 00                	add    %al,(%rax)
   1503f:	00 ff                	add    %bh,%bh
   15041:	02 00                	add    (%rax),%al
   15043:	00 00                	add    %al,(%rax)
   15045:	00 00                	add    %al,(%rax)
   15047:	00 ff                	add    %bh,%bh
   15049:	02 00                	add    (%rax),%al
   1504b:	00 00                	add    %al,(%rax)
   1504d:	00 00                	add    %al,(%rax)
   1504f:	00 ff                	add    %bh,%bh
   15051:	02 00                	add    (%rax),%al
   15053:	00 00                	add    %al,(%rax)
   15055:	00 00                	add    %al,(%rax)
   15057:	00 ff                	add    %bh,%bh
   15059:	02 00                	add    (%rax),%al
   1505b:	00 00                	add    %al,(%rax)
   1505d:	00 00                	add    %al,(%rax)
   1505f:	00 ff                	add    %bh,%bh
   15061:	02 00                	add    (%rax),%al
   15063:	00 00                	add    %al,(%rax)
   15065:	00 00                	add    %al,(%rax)
   15067:	00 ff                	add    %bh,%bh
   15069:	02 00                	add    (%rax),%al
   1506b:	00 00                	add    %al,(%rax)
   1506d:	00 00                	add    %al,(%rax)
   1506f:	00 ff                	add    %bh,%bh
   15071:	02 00                	add    (%rax),%al
   15073:	00 00                	add    %al,(%rax)
   15075:	00 00                	add    %al,(%rax)
   15077:	00 ff                	add    %bh,%bh
   15079:	02 00                	add    (%rax),%al
   1507b:	00 00                	add    %al,(%rax)
   1507d:	00 00                	add    %al,(%rax)
   1507f:	00 ff                	add    %bh,%bh
   15081:	02 00                	add    (%rax),%al
   15083:	00 00                	add    %al,(%rax)
   15085:	00 00                	add    %al,(%rax)
   15087:	00 ff                	add    %bh,%bh
   15089:	02 00                	add    (%rax),%al
   1508b:	00 00                	add    %al,(%rax)
   1508d:	00 00                	add    %al,(%rax)
   1508f:	00 ff                	add    %bh,%bh
   15091:	02 00                	add    (%rax),%al
   15093:	00 00                	add    %al,(%rax)
   15095:	00 00                	add    %al,(%rax)
   15097:	00 ff                	add    %bh,%bh
   15099:	02 00                	add    (%rax),%al
   1509b:	00 00                	add    %al,(%rax)
   1509d:	00 00                	add    %al,(%rax)
   1509f:	00 ff                	add    %bh,%bh
   150a1:	02 00                	add    (%rax),%al
   150a3:	00 00                	add    %al,(%rax)
   150a5:	00 00                	add    %al,(%rax)
   150a7:	00 ff                	add    %bh,%bh
   150a9:	02 00                	add    (%rax),%al
   150ab:	00 00                	add    %al,(%rax)
   150ad:	00 00                	add    %al,(%rax)
   150af:	00 ff                	add    %bh,%bh
   150b1:	02 00                	add    (%rax),%al
   150b3:	00 00                	add    %al,(%rax)
   150b5:	00 00                	add    %al,(%rax)
   150b7:	00 ff                	add    %bh,%bh
   150b9:	02 00                	add    (%rax),%al
   150bb:	00 00                	add    %al,(%rax)
   150bd:	00 00                	add    %al,(%rax)
   150bf:	00 ff                	add    %bh,%bh
   150c1:	02 00                	add    (%rax),%al
   150c3:	00 00                	add    %al,(%rax)
   150c5:	00 00                	add    %al,(%rax)
   150c7:	00 ff                	add    %bh,%bh
   150c9:	02 00                	add    (%rax),%al
   150cb:	00 00                	add    %al,(%rax)
   150cd:	00 00                	add    %al,(%rax)
   150cf:	00 ff                	add    %bh,%bh
   150d1:	02 00                	add    (%rax),%al
   150d3:	00 00                	add    %al,(%rax)
   150d5:	00 00                	add    %al,(%rax)
   150d7:	00 ff                	add    %bh,%bh
   150d9:	02 00                	add    (%rax),%al
   150db:	00 00                	add    %al,(%rax)
   150dd:	00 00                	add    %al,(%rax)
   150df:	00 ff                	add    %bh,%bh
   150e1:	02 00                	add    (%rax),%al
   150e3:	00 00                	add    %al,(%rax)
   150e5:	00 00                	add    %al,(%rax)
   150e7:	00 ff                	add    %bh,%bh
   150e9:	02 00                	add    (%rax),%al
   150eb:	00 00                	add    %al,(%rax)
   150ed:	00 00                	add    %al,(%rax)
   150ef:	00 ff                	add    %bh,%bh
   150f1:	02 00                	add    (%rax),%al
   150f3:	00 00                	add    %al,(%rax)
   150f5:	00 00                	add    %al,(%rax)
   150f7:	00 ff                	add    %bh,%bh
   150f9:	02 00                	add    (%rax),%al
   150fb:	00 00                	add    %al,(%rax)
   150fd:	00 00                	add    %al,(%rax)
   150ff:	00 ff                	add    %bh,%bh
   15101:	02 00                	add    (%rax),%al
   15103:	00 00                	add    %al,(%rax)
   15105:	00 00                	add    %al,(%rax)
   15107:	00 ff                	add    %bh,%bh
   15109:	02 00                	add    (%rax),%al
   1510b:	00 00                	add    %al,(%rax)
   1510d:	00 00                	add    %al,(%rax)
   1510f:	00 ff                	add    %bh,%bh
   15111:	02 00                	add    (%rax),%al
   15113:	00 00                	add    %al,(%rax)
   15115:	00 00                	add    %al,(%rax)
   15117:	00 ff                	add    %bh,%bh
   15119:	02 00                	add    (%rax),%al
   1511b:	00 00                	add    %al,(%rax)
   1511d:	00 00                	add    %al,(%rax)
   1511f:	00 ff                	add    %bh,%bh
   15121:	02 00                	add    (%rax),%al
   15123:	00 00                	add    %al,(%rax)
   15125:	00 00                	add    %al,(%rax)
   15127:	00 ff                	add    %bh,%bh
   15129:	02 00                	add    (%rax),%al
   1512b:	00 00                	add    %al,(%rax)
   1512d:	00 00                	add    %al,(%rax)
   1512f:	00 ff                	add    %bh,%bh
   15131:	02 00                	add    (%rax),%al
   15133:	00 00                	add    %al,(%rax)
   15135:	00 00                	add    %al,(%rax)
   15137:	00 ff                	add    %bh,%bh
   15139:	02 00                	add    (%rax),%al
   1513b:	00 00                	add    %al,(%rax)
   1513d:	00 00                	add    %al,(%rax)
   1513f:	00 ff                	add    %bh,%bh
   15141:	02 00                	add    (%rax),%al
   15143:	00 00                	add    %al,(%rax)
   15145:	00 00                	add    %al,(%rax)
   15147:	00 ff                	add    %bh,%bh
   15149:	02 00                	add    (%rax),%al
   1514b:	00 00                	add    %al,(%rax)
   1514d:	00 00                	add    %al,(%rax)
   1514f:	00 ff                	add    %bh,%bh
   15151:	02 00                	add    (%rax),%al
   15153:	00 00                	add    %al,(%rax)
   15155:	00 00                	add    %al,(%rax)
   15157:	00 ff                	add    %bh,%bh
   15159:	02 00                	add    (%rax),%al
   1515b:	00 00                	add    %al,(%rax)
   1515d:	00 00                	add    %al,(%rax)
   1515f:	00 ff                	add    %bh,%bh
   15161:	02 00                	add    (%rax),%al
   15163:	00 00                	add    %al,(%rax)
   15165:	00 00                	add    %al,(%rax)
   15167:	00 ff                	add    %bh,%bh
   15169:	02 00                	add    (%rax),%al
   1516b:	00 00                	add    %al,(%rax)
   1516d:	00 00                	add    %al,(%rax)
   1516f:	00 ff                	add    %bh,%bh
   15171:	02 00                	add    (%rax),%al
   15173:	00 00                	add    %al,(%rax)
   15175:	00 00                	add    %al,(%rax)
   15177:	00 ff                	add    %bh,%bh
   15179:	02 00                	add    (%rax),%al
   1517b:	00 00                	add    %al,(%rax)
   1517d:	00 00                	add    %al,(%rax)
   1517f:	00 ff                	add    %bh,%bh
   15181:	02 00                	add    (%rax),%al
   15183:	00 00                	add    %al,(%rax)
   15185:	00 00                	add    %al,(%rax)
   15187:	00 ff                	add    %bh,%bh
   15189:	02 00                	add    (%rax),%al
   1518b:	00 00                	add    %al,(%rax)
   1518d:	00 00                	add    %al,(%rax)
   1518f:	00 ff                	add    %bh,%bh
   15191:	02 00                	add    (%rax),%al
   15193:	00 00                	add    %al,(%rax)
   15195:	00 00                	add    %al,(%rax)
   15197:	00 ff                	add    %bh,%bh
   15199:	02 00                	add    (%rax),%al
   1519b:	00 00                	add    %al,(%rax)
   1519d:	00 00                	add    %al,(%rax)
   1519f:	00 ff                	add    %bh,%bh
   151a1:	02 00                	add    (%rax),%al
   151a3:	00 00                	add    %al,(%rax)
   151a5:	00 00                	add    %al,(%rax)
   151a7:	00 ff                	add    %bh,%bh
   151a9:	02 00                	add    (%rax),%al
   151ab:	00 00                	add    %al,(%rax)
   151ad:	00 00                	add    %al,(%rax)
   151af:	00 ff                	add    %bh,%bh
   151b1:	02 00                	add    (%rax),%al
   151b3:	00 00                	add    %al,(%rax)
   151b5:	00 00                	add    %al,(%rax)
   151b7:	00 ff                	add    %bh,%bh
   151b9:	02 00                	add    (%rax),%al
   151bb:	00 00                	add    %al,(%rax)
   151bd:	00 00                	add    %al,(%rax)
   151bf:	00 ff                	add    %bh,%bh
   151c1:	02 00                	add    (%rax),%al
   151c3:	00 00                	add    %al,(%rax)
   151c5:	00 00                	add    %al,(%rax)
   151c7:	00 ff                	add    %bh,%bh
   151c9:	02 00                	add    (%rax),%al
   151cb:	00 00                	add    %al,(%rax)
   151cd:	00 00                	add    %al,(%rax)
   151cf:	00 ff                	add    %bh,%bh
   151d1:	02 00                	add    (%rax),%al
   151d3:	00 00                	add    %al,(%rax)
   151d5:	00 00                	add    %al,(%rax)
   151d7:	00 ff                	add    %bh,%bh
   151d9:	02 00                	add    (%rax),%al
   151db:	00 00                	add    %al,(%rax)
   151dd:	00 00                	add    %al,(%rax)
   151df:	00 ff                	add    %bh,%bh
   151e1:	02 00                	add    (%rax),%al
   151e3:	00 00                	add    %al,(%rax)
   151e5:	00 00                	add    %al,(%rax)
   151e7:	00 ff                	add    %bh,%bh
   151e9:	02 00                	add    (%rax),%al
   151eb:	00 00                	add    %al,(%rax)
   151ed:	00 00                	add    %al,(%rax)
   151ef:	00 ff                	add    %bh,%bh
   151f1:	02 00                	add    (%rax),%al
   151f3:	00 00                	add    %al,(%rax)
   151f5:	00 00                	add    %al,(%rax)
   151f7:	00 ff                	add    %bh,%bh
   151f9:	02 00                	add    (%rax),%al
   151fb:	00 00                	add    %al,(%rax)
   151fd:	00 00                	add    %al,(%rax)
   151ff:	00 06                	add    %al,(%rsi)
   15201:	03 00                	add    (%rax),%eax
   15203:	00 00                	add    %al,(%rax)
   15205:	00 00                	add    %al,(%rax)
   15207:	00 06                	add    %al,(%rsi)
   15209:	03 00                	add    (%rax),%eax
   1520b:	00 00                	add    %al,(%rax)
   1520d:	00 00                	add    %al,(%rax)
   1520f:	00 06                	add    %al,(%rsi)
   15211:	03 00                	add    (%rax),%eax
   15213:	00 00                	add    %al,(%rax)
   15215:	00 00                	add    %al,(%rax)
   15217:	00 06                	add    %al,(%rsi)
   15219:	03 00                	add    (%rax),%eax
   1521b:	00 00                	add    %al,(%rax)
   1521d:	00 00                	add    %al,(%rax)
   1521f:	00 06                	add    %al,(%rsi)
   15221:	03 00                	add    (%rax),%eax
   15223:	00 00                	add    %al,(%rax)
   15225:	00 00                	add    %al,(%rax)
   15227:	00 06                	add    %al,(%rsi)
   15229:	03 00                	add    (%rax),%eax
   1522b:	00 00                	add    %al,(%rax)
   1522d:	00 00                	add    %al,(%rax)
   1522f:	00 06                	add    %al,(%rsi)
   15231:	03 00                	add    (%rax),%eax
   15233:	00 00                	add    %al,(%rax)
   15235:	00 00                	add    %al,(%rax)
   15237:	00 06                	add    %al,(%rsi)
   15239:	03 00                	add    (%rax),%eax
   1523b:	00 00                	add    %al,(%rax)
   1523d:	00 00                	add    %al,(%rax)
   1523f:	00 06                	add    %al,(%rsi)
   15241:	03 00                	add    (%rax),%eax
   15243:	00 00                	add    %al,(%rax)
   15245:	00 00                	add    %al,(%rax)
   15247:	00 06                	add    %al,(%rsi)
   15249:	03 00                	add    (%rax),%eax
   1524b:	00 00                	add    %al,(%rax)
   1524d:	00 00                	add    %al,(%rax)
   1524f:	00 06                	add    %al,(%rsi)
   15251:	03 00                	add    (%rax),%eax
   15253:	00 00                	add    %al,(%rax)
   15255:	00 00                	add    %al,(%rax)
   15257:	00 06                	add    %al,(%rsi)
   15259:	03 00                	add    (%rax),%eax
   1525b:	00 00                	add    %al,(%rax)
   1525d:	00 00                	add    %al,(%rax)
   1525f:	00 06                	add    %al,(%rsi)
   15261:	03 00                	add    (%rax),%eax
   15263:	00 00                	add    %al,(%rax)
   15265:	00 00                	add    %al,(%rax)
   15267:	00 06                	add    %al,(%rsi)
   15269:	03 00                	add    (%rax),%eax
   1526b:	00 00                	add    %al,(%rax)
   1526d:	00 00                	add    %al,(%rax)
   1526f:	00 06                	add    %al,(%rsi)
   15271:	03 00                	add    (%rax),%eax
   15273:	00 00                	add    %al,(%rax)
   15275:	00 00                	add    %al,(%rax)
   15277:	00 06                	add    %al,(%rsi)
   15279:	03 00                	add    (%rax),%eax
   1527b:	00 00                	add    %al,(%rax)
   1527d:	00 00                	add    %al,(%rax)
   1527f:	00 06                	add    %al,(%rsi)
   15281:	03 00                	add    (%rax),%eax
   15283:	00 00                	add    %al,(%rax)
   15285:	00 00                	add    %al,(%rax)
   15287:	00 06                	add    %al,(%rsi)
   15289:	03 00                	add    (%rax),%eax
   1528b:	00 00                	add    %al,(%rax)
   1528d:	00 00                	add    %al,(%rax)
   1528f:	00 06                	add    %al,(%rsi)
   15291:	03 00                	add    (%rax),%eax
   15293:	00 00                	add    %al,(%rax)
   15295:	00 00                	add    %al,(%rax)
   15297:	00 06                	add    %al,(%rsi)
   15299:	03 00                	add    (%rax),%eax
   1529b:	00 00                	add    %al,(%rax)
   1529d:	00 00                	add    %al,(%rax)
   1529f:	00 06                	add    %al,(%rsi)
   152a1:	03 00                	add    (%rax),%eax
   152a3:	00 00                	add    %al,(%rax)
   152a5:	00 00                	add    %al,(%rax)
   152a7:	00 06                	add    %al,(%rsi)
   152a9:	03 00                	add    (%rax),%eax
   152ab:	00 00                	add    %al,(%rax)
   152ad:	00 00                	add    %al,(%rax)
   152af:	00 06                	add    %al,(%rsi)
   152b1:	03 00                	add    (%rax),%eax
   152b3:	00 00                	add    %al,(%rax)
   152b5:	00 00                	add    %al,(%rax)
   152b7:	00 06                	add    %al,(%rsi)
   152b9:	03 00                	add    (%rax),%eax
   152bb:	00 00                	add    %al,(%rax)
   152bd:	00 00                	add    %al,(%rax)
   152bf:	00 06                	add    %al,(%rsi)
   152c1:	03 00                	add    (%rax),%eax
   152c3:	00 00                	add    %al,(%rax)
   152c5:	00 00                	add    %al,(%rax)
   152c7:	00 06                	add    %al,(%rsi)
   152c9:	03 00                	add    (%rax),%eax
   152cb:	00 00                	add    %al,(%rax)
   152cd:	00 00                	add    %al,(%rax)
   152cf:	00 06                	add    %al,(%rsi)
   152d1:	03 00                	add    (%rax),%eax
   152d3:	00 00                	add    %al,(%rax)
   152d5:	00 00                	add    %al,(%rax)
   152d7:	00 06                	add    %al,(%rsi)
   152d9:	03 00                	add    (%rax),%eax
   152db:	00 00                	add    %al,(%rax)
   152dd:	00 00                	add    %al,(%rax)
   152df:	00 06                	add    %al,(%rsi)
   152e1:	03 00                	add    (%rax),%eax
   152e3:	00 00                	add    %al,(%rax)
   152e5:	00 00                	add    %al,(%rax)
   152e7:	00 06                	add    %al,(%rsi)
   152e9:	03 00                	add    (%rax),%eax
   152eb:	00 00                	add    %al,(%rax)
   152ed:	00 00                	add    %al,(%rax)
   152ef:	00 06                	add    %al,(%rsi)
   152f1:	03 00                	add    (%rax),%eax
   152f3:	00 00                	add    %al,(%rax)
   152f5:	00 00                	add    %al,(%rax)
   152f7:	00 06                	add    %al,(%rsi)
   152f9:	03 00                	add    (%rax),%eax
   152fb:	00 00                	add    %al,(%rax)
   152fd:	00 00                	add    %al,(%rax)
   152ff:	00 06                	add    %al,(%rsi)
   15301:	03 00                	add    (%rax),%eax
   15303:	00 00                	add    %al,(%rax)
   15305:	00 00                	add    %al,(%rax)
   15307:	00 06                	add    %al,(%rsi)
   15309:	03 00                	add    (%rax),%eax
   1530b:	00 00                	add    %al,(%rax)
   1530d:	00 00                	add    %al,(%rax)
   1530f:	00 06                	add    %al,(%rsi)
   15311:	03 00                	add    (%rax),%eax
   15313:	00 00                	add    %al,(%rax)
   15315:	00 00                	add    %al,(%rax)
   15317:	00 06                	add    %al,(%rsi)
   15319:	03 00                	add    (%rax),%eax
   1531b:	00 00                	add    %al,(%rax)
   1531d:	00 00                	add    %al,(%rax)
   1531f:	00 06                	add    %al,(%rsi)
   15321:	03 00                	add    (%rax),%eax
   15323:	00 00                	add    %al,(%rax)
   15325:	00 00                	add    %al,(%rax)
   15327:	00 06                	add    %al,(%rsi)
   15329:	03 00                	add    (%rax),%eax
   1532b:	00 00                	add    %al,(%rax)
   1532d:	00 00                	add    %al,(%rax)
   1532f:	00 06                	add    %al,(%rsi)
   15331:	03 00                	add    (%rax),%eax
   15333:	00 00                	add    %al,(%rax)
   15335:	00 00                	add    %al,(%rax)
   15337:	00 06                	add    %al,(%rsi)
   15339:	03 00                	add    (%rax),%eax
   1533b:	00 00                	add    %al,(%rax)
   1533d:	00 00                	add    %al,(%rax)
   1533f:	00 06                	add    %al,(%rsi)
   15341:	03 00                	add    (%rax),%eax
   15343:	00 00                	add    %al,(%rax)
   15345:	00 00                	add    %al,(%rax)
   15347:	00 06                	add    %al,(%rsi)
   15349:	03 00                	add    (%rax),%eax
   1534b:	00 00                	add    %al,(%rax)
   1534d:	00 00                	add    %al,(%rax)
   1534f:	00 06                	add    %al,(%rsi)
   15351:	03 00                	add    (%rax),%eax
   15353:	00 00                	add    %al,(%rax)
   15355:	00 00                	add    %al,(%rax)
   15357:	00 06                	add    %al,(%rsi)
   15359:	03 00                	add    (%rax),%eax
   1535b:	00 00                	add    %al,(%rax)
   1535d:	00 00                	add    %al,(%rax)
   1535f:	00 06                	add    %al,(%rsi)
   15361:	03 00                	add    (%rax),%eax
   15363:	00 00                	add    %al,(%rax)
   15365:	00 00                	add    %al,(%rax)
   15367:	00 06                	add    %al,(%rsi)
   15369:	03 00                	add    (%rax),%eax
   1536b:	00 00                	add    %al,(%rax)
   1536d:	00 00                	add    %al,(%rax)
   1536f:	00 06                	add    %al,(%rsi)
   15371:	03 00                	add    (%rax),%eax
   15373:	00 00                	add    %al,(%rax)
   15375:	00 00                	add    %al,(%rax)
   15377:	00 06                	add    %al,(%rsi)
   15379:	03 00                	add    (%rax),%eax
   1537b:	00 00                	add    %al,(%rax)
   1537d:	00 00                	add    %al,(%rax)
   1537f:	00 06                	add    %al,(%rsi)
   15381:	03 00                	add    (%rax),%eax
   15383:	00 00                	add    %al,(%rax)
   15385:	00 00                	add    %al,(%rax)
   15387:	00 06                	add    %al,(%rsi)
   15389:	03 00                	add    (%rax),%eax
   1538b:	00 00                	add    %al,(%rax)
   1538d:	00 00                	add    %al,(%rax)
   1538f:	00 06                	add    %al,(%rsi)
   15391:	03 00                	add    (%rax),%eax
   15393:	00 00                	add    %al,(%rax)
   15395:	00 00                	add    %al,(%rax)
   15397:	00 06                	add    %al,(%rsi)
   15399:	03 00                	add    (%rax),%eax
   1539b:	00 00                	add    %al,(%rax)
   1539d:	00 00                	add    %al,(%rax)
   1539f:	00 06                	add    %al,(%rsi)
   153a1:	03 00                	add    (%rax),%eax
   153a3:	00 00                	add    %al,(%rax)
   153a5:	00 00                	add    %al,(%rax)
   153a7:	00 06                	add    %al,(%rsi)
   153a9:	03 00                	add    (%rax),%eax
   153ab:	00 00                	add    %al,(%rax)
   153ad:	00 00                	add    %al,(%rax)
   153af:	00 06                	add    %al,(%rsi)
   153b1:	03 00                	add    (%rax),%eax
   153b3:	00 00                	add    %al,(%rax)
   153b5:	00 00                	add    %al,(%rax)
   153b7:	00 06                	add    %al,(%rsi)
   153b9:	03 00                	add    (%rax),%eax
   153bb:	00 00                	add    %al,(%rax)
   153bd:	00 00                	add    %al,(%rax)
   153bf:	00 06                	add    %al,(%rsi)
   153c1:	03 00                	add    (%rax),%eax
   153c3:	00 00                	add    %al,(%rax)
   153c5:	00 00                	add    %al,(%rax)
   153c7:	00 06                	add    %al,(%rsi)
   153c9:	03 00                	add    (%rax),%eax
   153cb:	00 00                	add    %al,(%rax)
   153cd:	00 00                	add    %al,(%rax)
   153cf:	00 06                	add    %al,(%rsi)
   153d1:	03 00                	add    (%rax),%eax
   153d3:	00 00                	add    %al,(%rax)
   153d5:	00 00                	add    %al,(%rax)
   153d7:	00 06                	add    %al,(%rsi)
   153d9:	03 00                	add    (%rax),%eax
   153db:	00 00                	add    %al,(%rax)
   153dd:	00 00                	add    %al,(%rax)
   153df:	00 06                	add    %al,(%rsi)
   153e1:	03 00                	add    (%rax),%eax
   153e3:	00 00                	add    %al,(%rax)
   153e5:	00 00                	add    %al,(%rax)
   153e7:	00 06                	add    %al,(%rsi)
   153e9:	03 00                	add    (%rax),%eax
   153eb:	00 00                	add    %al,(%rax)
   153ed:	00 00                	add    %al,(%rax)
   153ef:	00 06                	add    %al,(%rsi)
   153f1:	03 00                	add    (%rax),%eax
   153f3:	00 00                	add    %al,(%rax)
   153f5:	00 00                	add    %al,(%rax)
   153f7:	00 06                	add    %al,(%rsi)
   153f9:	03 00                	add    (%rax),%eax
   153fb:	00 00                	add    %al,(%rax)
   153fd:	00 00                	add    %al,(%rax)
   153ff:	00 b9 12 00 00 00    	add    %bh,0x12(%rcx)
   15405:	00 00                	add    %al,(%rax)
   15407:	00 c1                	add    %al,%cl
   15409:	12 00                	adc    (%rax),%al
   1540b:	00 00                	add    %al,(%rax)
   1540d:	00 00                	add    %al,(%rax)
   1540f:	00 b4 12 00 00 00 00 	add    %dh,0x0(%rdx,%rdx,1)
   15416:	00 00                	add    %al,(%rax)
   15418:	ab                   	stos   %eax,%es:(%rdi)
   15419:	12 00                	adc    (%rax),%al
   1541b:	00 00                	add    %al,(%rax)
   1541d:	00 00                	add    %al,(%rax)
   1541f:	00 9e 12 00 00 00    	add    %bl,0x12(%rsi)
   15425:	00 00                	add    %al,(%rax)
   15427:	00 96 12 00 00 00    	add    %dl,0x12(%rsi)
   1542d:	00 00                	add    %al,(%rax)
   1542f:	00 96 12 00 00 00    	add    %dl,0x12(%rsi)
   15435:	00 00                	add    %al,(%rax)
   15437:	00 96 12 00 00 00    	add    %dl,0x12(%rsi)
   1543d:	00 00                	add    %al,(%rax)
   1543f:	00 8a 12 00 00 00    	add    %cl,0x12(%rdx)
   15445:	00 00                	add    %al,(%rax)
   15447:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   1544d:	00 00                	add    %al,(%rax)
   1544f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   15455:	00 00                	add    %al,(%rax)
   15457:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   1545d:	00 00                	add    %al,(%rax)
   1545f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   15465:	00 00                	add    %al,(%rax)
   15467:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   1546d:	00 00                	add    %al,(%rax)
   1546f:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   15475:	00 00                	add    %al,(%rax)
   15477:	00 82 12 00 00 00    	add    %al,0x12(%rdx)
   1547d:	00 00                	add    %al,(%rax)
   1547f:	00 76 12             	add    %dh,0x12(%rsi)
   15482:	00 00                	add    %al,(%rax)
   15484:	00 00                	add    %al,(%rax)
   15486:	00 00                	add    %al,(%rax)
   15488:	6c                   	insb   (%dx),%es:(%rdi)
   15489:	12 00                	adc    (%rax),%al
   1548b:	00 00                	add    %al,(%rax)
   1548d:	00 00                	add    %al,(%rax)
   1548f:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   15493:	00 00                	add    %al,(%rax)
   15495:	00 00                	add    %al,(%rax)
   15497:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   1549b:	00 00                	add    %al,(%rax)
   1549d:	00 00                	add    %al,(%rax)
   1549f:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154a3:	00 00                	add    %al,(%rax)
   154a5:	00 00                	add    %al,(%rax)
   154a7:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154ab:	00 00                	add    %al,(%rax)
   154ad:	00 00                	add    %al,(%rax)
   154af:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154b3:	00 00                	add    %al,(%rax)
   154b5:	00 00                	add    %al,(%rax)
   154b7:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154bb:	00 00                	add    %al,(%rax)
   154bd:	00 00                	add    %al,(%rax)
   154bf:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154c3:	00 00                	add    %al,(%rax)
   154c5:	00 00                	add    %al,(%rax)
   154c7:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154cb:	00 00                	add    %al,(%rax)
   154cd:	00 00                	add    %al,(%rax)
   154cf:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154d3:	00 00                	add    %al,(%rax)
   154d5:	00 00                	add    %al,(%rax)
   154d7:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154db:	00 00                	add    %al,(%rax)
   154dd:	00 00                	add    %al,(%rax)
   154df:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154e3:	00 00                	add    %al,(%rax)
   154e5:	00 00                	add    %al,(%rax)
   154e7:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154eb:	00 00                	add    %al,(%rax)
   154ed:	00 00                	add    %al,(%rax)
   154ef:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154f3:	00 00                	add    %al,(%rax)
   154f5:	00 00                	add    %al,(%rax)
   154f7:	00 6c 12 00          	add    %ch,0x0(%rdx,%rdx,1)
   154fb:	00 00                	add    %al,(%rax)
   154fd:	00 00                	add    %al,(%rax)
   154ff:	00 5c 12 00          	add    %bl,0x0(%rdx,%rdx,1)
   15503:	00 00                	add    %al,(%rax)
   15505:	00 00                	add    %al,(%rax)
   15507:	00 52 12             	add    %dl,0x12(%rdx)
   1550a:	00 00                	add    %al,(%rax)
   1550c:	00 00                	add    %al,(%rax)
   1550e:	00 00                	add    %al,(%rax)
   15510:	52                   	push   %rdx
   15511:	12 00                	adc    (%rax),%al
   15513:	00 00                	add    %al,(%rax)
   15515:	00 00                	add    %al,(%rax)
   15517:	00 52 12             	add    %dl,0x12(%rdx)
   1551a:	00 00                	add    %al,(%rax)
   1551c:	00 00                	add    %al,(%rax)
   1551e:	00 00                	add    %al,(%rax)
   15520:	52                   	push   %rdx
   15521:	12 00                	adc    (%rax),%al
   15523:	00 00                	add    %al,(%rax)
   15525:	00 00                	add    %al,(%rax)
   15527:	00 52 12             	add    %dl,0x12(%rdx)
   1552a:	00 00                	add    %al,(%rax)
   1552c:	00 00                	add    %al,(%rax)
   1552e:	00 00                	add    %al,(%rax)
   15530:	52                   	push   %rdx
   15531:	12 00                	adc    (%rax),%al
   15533:	00 00                	add    %al,(%rax)
   15535:	00 00                	add    %al,(%rax)
   15537:	00 52 12             	add    %dl,0x12(%rdx)
   1553a:	00 00                	add    %al,(%rax)
   1553c:	00 00                	add    %al,(%rax)
   1553e:	00 00                	add    %al,(%rax)
   15540:	52                   	push   %rdx
   15541:	12 00                	adc    (%rax),%al
   15543:	00 00                	add    %al,(%rax)
   15545:	00 00                	add    %al,(%rax)
   15547:	00 52 12             	add    %dl,0x12(%rdx)
   1554a:	00 00                	add    %al,(%rax)
   1554c:	00 00                	add    %al,(%rax)
   1554e:	00 00                	add    %al,(%rax)
   15550:	52                   	push   %rdx
   15551:	12 00                	adc    (%rax),%al
   15553:	00 00                	add    %al,(%rax)
   15555:	00 00                	add    %al,(%rax)
   15557:	00 52 12             	add    %dl,0x12(%rdx)
   1555a:	00 00                	add    %al,(%rax)
   1555c:	00 00                	add    %al,(%rax)
   1555e:	00 00                	add    %al,(%rax)
   15560:	52                   	push   %rdx
   15561:	12 00                	adc    (%rax),%al
   15563:	00 00                	add    %al,(%rax)
   15565:	00 00                	add    %al,(%rax)
   15567:	00 52 12             	add    %dl,0x12(%rdx)
   1556a:	00 00                	add    %al,(%rax)
   1556c:	00 00                	add    %al,(%rax)
   1556e:	00 00                	add    %al,(%rax)
   15570:	52                   	push   %rdx
   15571:	12 00                	adc    (%rax),%al
   15573:	00 00                	add    %al,(%rax)
   15575:	00 00                	add    %al,(%rax)
   15577:	00 52 12             	add    %dl,0x12(%rdx)
   1557a:	00 00                	add    %al,(%rax)
   1557c:	00 00                	add    %al,(%rax)
   1557e:	00 00                	add    %al,(%rax)
   15580:	52                   	push   %rdx
   15581:	12 00                	adc    (%rax),%al
   15583:	00 00                	add    %al,(%rax)
   15585:	00 00                	add    %al,(%rax)
   15587:	00 52 12             	add    %dl,0x12(%rdx)
   1558a:	00 00                	add    %al,(%rax)
   1558c:	00 00                	add    %al,(%rax)
   1558e:	00 00                	add    %al,(%rax)
   15590:	52                   	push   %rdx
   15591:	12 00                	adc    (%rax),%al
   15593:	00 00                	add    %al,(%rax)
   15595:	00 00                	add    %al,(%rax)
   15597:	00 52 12             	add    %dl,0x12(%rdx)
   1559a:	00 00                	add    %al,(%rax)
   1559c:	00 00                	add    %al,(%rax)
   1559e:	00 00                	add    %al,(%rax)
   155a0:	52                   	push   %rdx
   155a1:	12 00                	adc    (%rax),%al
   155a3:	00 00                	add    %al,(%rax)
   155a5:	00 00                	add    %al,(%rax)
   155a7:	00 52 12             	add    %dl,0x12(%rdx)
   155aa:	00 00                	add    %al,(%rax)
   155ac:	00 00                	add    %al,(%rax)
   155ae:	00 00                	add    %al,(%rax)
   155b0:	52                   	push   %rdx
   155b1:	12 00                	adc    (%rax),%al
   155b3:	00 00                	add    %al,(%rax)
   155b5:	00 00                	add    %al,(%rax)
   155b7:	00 52 12             	add    %dl,0x12(%rdx)
   155ba:	00 00                	add    %al,(%rax)
   155bc:	00 00                	add    %al,(%rax)
   155be:	00 00                	add    %al,(%rax)
   155c0:	52                   	push   %rdx
   155c1:	12 00                	adc    (%rax),%al
   155c3:	00 00                	add    %al,(%rax)
   155c5:	00 00                	add    %al,(%rax)
   155c7:	00 52 12             	add    %dl,0x12(%rdx)
   155ca:	00 00                	add    %al,(%rax)
   155cc:	00 00                	add    %al,(%rax)
   155ce:	00 00                	add    %al,(%rax)
   155d0:	52                   	push   %rdx
   155d1:	12 00                	adc    (%rax),%al
   155d3:	00 00                	add    %al,(%rax)
   155d5:	00 00                	add    %al,(%rax)
   155d7:	00 52 12             	add    %dl,0x12(%rdx)
   155da:	00 00                	add    %al,(%rax)
   155dc:	00 00                	add    %al,(%rax)
   155de:	00 00                	add    %al,(%rax)
   155e0:	52                   	push   %rdx
   155e1:	12 00                	adc    (%rax),%al
   155e3:	00 00                	add    %al,(%rax)
   155e5:	00 00                	add    %al,(%rax)
   155e7:	00 52 12             	add    %dl,0x12(%rdx)
   155ea:	00 00                	add    %al,(%rax)
   155ec:	00 00                	add    %al,(%rax)
   155ee:	00 00                	add    %al,(%rax)
   155f0:	52                   	push   %rdx
   155f1:	12 00                	adc    (%rax),%al
   155f3:	00 00                	add    %al,(%rax)
   155f5:	00 00                	add    %al,(%rax)
   155f7:	00 52 12             	add    %dl,0x12(%rdx)
   155fa:	00 00                	add    %al,(%rax)
   155fc:	00 00                	add    %al,(%rax)
   155fe:	00 00                	add    %al,(%rax)
   15600:	42 12 00             	rex.X adc (%rax),%al
   15603:	00 00                	add    %al,(%rax)
   15605:	00 00                	add    %al,(%rax)
   15607:	00 37                	add    %dh,(%rdi)
   15609:	12 00                	adc    (%rax),%al
   1560b:	00 00                	add    %al,(%rax)
   1560d:	00 00                	add    %al,(%rax)
   1560f:	00 37                	add    %dh,(%rdi)
   15611:	12 00                	adc    (%rax),%al
   15613:	00 00                	add    %al,(%rax)
   15615:	00 00                	add    %al,(%rax)
   15617:	00 37                	add    %dh,(%rdi)
   15619:	12 00                	adc    (%rax),%al
   1561b:	00 00                	add    %al,(%rax)
   1561d:	00 00                	add    %al,(%rax)
   1561f:	00 37                	add    %dh,(%rdi)
   15621:	12 00                	adc    (%rax),%al
   15623:	00 00                	add    %al,(%rax)
   15625:	00 00                	add    %al,(%rax)
   15627:	00 37                	add    %dh,(%rdi)
   15629:	12 00                	adc    (%rax),%al
   1562b:	00 00                	add    %al,(%rax)
   1562d:	00 00                	add    %al,(%rax)
   1562f:	00 37                	add    %dh,(%rdi)
   15631:	12 00                	adc    (%rax),%al
   15633:	00 00                	add    %al,(%rax)
   15635:	00 00                	add    %al,(%rax)
   15637:	00 37                	add    %dh,(%rdi)
   15639:	12 00                	adc    (%rax),%al
   1563b:	00 00                	add    %al,(%rax)
   1563d:	00 00                	add    %al,(%rax)
   1563f:	00 37                	add    %dh,(%rdi)
   15641:	12 00                	adc    (%rax),%al
   15643:	00 00                	add    %al,(%rax)
   15645:	00 00                	add    %al,(%rax)
   15647:	00 37                	add    %dh,(%rdi)
   15649:	12 00                	adc    (%rax),%al
   1564b:	00 00                	add    %al,(%rax)
   1564d:	00 00                	add    %al,(%rax)
   1564f:	00 37                	add    %dh,(%rdi)
   15651:	12 00                	adc    (%rax),%al
   15653:	00 00                	add    %al,(%rax)
   15655:	00 00                	add    %al,(%rax)
   15657:	00 37                	add    %dh,(%rdi)
   15659:	12 00                	adc    (%rax),%al
   1565b:	00 00                	add    %al,(%rax)
   1565d:	00 00                	add    %al,(%rax)
   1565f:	00 37                	add    %dh,(%rdi)
   15661:	12 00                	adc    (%rax),%al
   15663:	00 00                	add    %al,(%rax)
   15665:	00 00                	add    %al,(%rax)
   15667:	00 37                	add    %dh,(%rdi)
   15669:	12 00                	adc    (%rax),%al
   1566b:	00 00                	add    %al,(%rax)
   1566d:	00 00                	add    %al,(%rax)
   1566f:	00 37                	add    %dh,(%rdi)
   15671:	12 00                	adc    (%rax),%al
   15673:	00 00                	add    %al,(%rax)
   15675:	00 00                	add    %al,(%rax)
   15677:	00 37                	add    %dh,(%rdi)
   15679:	12 00                	adc    (%rax),%al
   1567b:	00 00                	add    %al,(%rax)
   1567d:	00 00                	add    %al,(%rax)
   1567f:	00 37                	add    %dh,(%rdi)
   15681:	12 00                	adc    (%rax),%al
   15683:	00 00                	add    %al,(%rax)
   15685:	00 00                	add    %al,(%rax)
   15687:	00 37                	add    %dh,(%rdi)
   15689:	12 00                	adc    (%rax),%al
   1568b:	00 00                	add    %al,(%rax)
   1568d:	00 00                	add    %al,(%rax)
   1568f:	00 37                	add    %dh,(%rdi)
   15691:	12 00                	adc    (%rax),%al
   15693:	00 00                	add    %al,(%rax)
   15695:	00 00                	add    %al,(%rax)
   15697:	00 37                	add    %dh,(%rdi)
   15699:	12 00                	adc    (%rax),%al
   1569b:	00 00                	add    %al,(%rax)
   1569d:	00 00                	add    %al,(%rax)
   1569f:	00 37                	add    %dh,(%rdi)
   156a1:	12 00                	adc    (%rax),%al
   156a3:	00 00                	add    %al,(%rax)
   156a5:	00 00                	add    %al,(%rax)
   156a7:	00 37                	add    %dh,(%rdi)
   156a9:	12 00                	adc    (%rax),%al
   156ab:	00 00                	add    %al,(%rax)
   156ad:	00 00                	add    %al,(%rax)
   156af:	00 37                	add    %dh,(%rdi)
   156b1:	12 00                	adc    (%rax),%al
   156b3:	00 00                	add    %al,(%rax)
   156b5:	00 00                	add    %al,(%rax)
   156b7:	00 37                	add    %dh,(%rdi)
   156b9:	12 00                	adc    (%rax),%al
   156bb:	00 00                	add    %al,(%rax)
   156bd:	00 00                	add    %al,(%rax)
   156bf:	00 37                	add    %dh,(%rdi)
   156c1:	12 00                	adc    (%rax),%al
   156c3:	00 00                	add    %al,(%rax)
   156c5:	00 00                	add    %al,(%rax)
   156c7:	00 37                	add    %dh,(%rdi)
   156c9:	12 00                	adc    (%rax),%al
   156cb:	00 00                	add    %al,(%rax)
   156cd:	00 00                	add    %al,(%rax)
   156cf:	00 37                	add    %dh,(%rdi)
   156d1:	12 00                	adc    (%rax),%al
   156d3:	00 00                	add    %al,(%rax)
   156d5:	00 00                	add    %al,(%rax)
   156d7:	00 37                	add    %dh,(%rdi)
   156d9:	12 00                	adc    (%rax),%al
   156db:	00 00                	add    %al,(%rax)
   156dd:	00 00                	add    %al,(%rax)
   156df:	00 37                	add    %dh,(%rdi)
   156e1:	12 00                	adc    (%rax),%al
   156e3:	00 00                	add    %al,(%rax)
   156e5:	00 00                	add    %al,(%rax)
   156e7:	00 37                	add    %dh,(%rdi)
   156e9:	12 00                	adc    (%rax),%al
   156eb:	00 00                	add    %al,(%rax)
   156ed:	00 00                	add    %al,(%rax)
   156ef:	00 37                	add    %dh,(%rdi)
   156f1:	12 00                	adc    (%rax),%al
   156f3:	00 00                	add    %al,(%rax)
   156f5:	00 00                	add    %al,(%rax)
   156f7:	00 37                	add    %dh,(%rdi)
   156f9:	12 00                	adc    (%rax),%al
   156fb:	00 00                	add    %al,(%rax)
   156fd:	00 00                	add    %al,(%rax)
   156ff:	00 37                	add    %dh,(%rdi)
   15701:	12 00                	adc    (%rax),%al
   15703:	00 00                	add    %al,(%rax)
   15705:	00 00                	add    %al,(%rax)
   15707:	00 37                	add    %dh,(%rdi)
   15709:	12 00                	adc    (%rax),%al
   1570b:	00 00                	add    %al,(%rax)
   1570d:	00 00                	add    %al,(%rax)
   1570f:	00 37                	add    %dh,(%rdi)
   15711:	12 00                	adc    (%rax),%al
   15713:	00 00                	add    %al,(%rax)
   15715:	00 00                	add    %al,(%rax)
   15717:	00 37                	add    %dh,(%rdi)
   15719:	12 00                	adc    (%rax),%al
   1571b:	00 00                	add    %al,(%rax)
   1571d:	00 00                	add    %al,(%rax)
   1571f:	00 37                	add    %dh,(%rdi)
   15721:	12 00                	adc    (%rax),%al
   15723:	00 00                	add    %al,(%rax)
   15725:	00 00                	add    %al,(%rax)
   15727:	00 37                	add    %dh,(%rdi)
   15729:	12 00                	adc    (%rax),%al
   1572b:	00 00                	add    %al,(%rax)
   1572d:	00 00                	add    %al,(%rax)
   1572f:	00 37                	add    %dh,(%rdi)
   15731:	12 00                	adc    (%rax),%al
   15733:	00 00                	add    %al,(%rax)
   15735:	00 00                	add    %al,(%rax)
   15737:	00 37                	add    %dh,(%rdi)
   15739:	12 00                	adc    (%rax),%al
   1573b:	00 00                	add    %al,(%rax)
   1573d:	00 00                	add    %al,(%rax)
   1573f:	00 37                	add    %dh,(%rdi)
   15741:	12 00                	adc    (%rax),%al
   15743:	00 00                	add    %al,(%rax)
   15745:	00 00                	add    %al,(%rax)
   15747:	00 37                	add    %dh,(%rdi)
   15749:	12 00                	adc    (%rax),%al
   1574b:	00 00                	add    %al,(%rax)
   1574d:	00 00                	add    %al,(%rax)
   1574f:	00 37                	add    %dh,(%rdi)
   15751:	12 00                	adc    (%rax),%al
   15753:	00 00                	add    %al,(%rax)
   15755:	00 00                	add    %al,(%rax)
   15757:	00 37                	add    %dh,(%rdi)
   15759:	12 00                	adc    (%rax),%al
   1575b:	00 00                	add    %al,(%rax)
   1575d:	00 00                	add    %al,(%rax)
   1575f:	00 37                	add    %dh,(%rdi)
   15761:	12 00                	adc    (%rax),%al
   15763:	00 00                	add    %al,(%rax)
   15765:	00 00                	add    %al,(%rax)
   15767:	00 37                	add    %dh,(%rdi)
   15769:	12 00                	adc    (%rax),%al
   1576b:	00 00                	add    %al,(%rax)
   1576d:	00 00                	add    %al,(%rax)
   1576f:	00 37                	add    %dh,(%rdi)
   15771:	12 00                	adc    (%rax),%al
   15773:	00 00                	add    %al,(%rax)
   15775:	00 00                	add    %al,(%rax)
   15777:	00 37                	add    %dh,(%rdi)
   15779:	12 00                	adc    (%rax),%al
   1577b:	00 00                	add    %al,(%rax)
   1577d:	00 00                	add    %al,(%rax)
   1577f:	00 37                	add    %dh,(%rdi)
   15781:	12 00                	adc    (%rax),%al
   15783:	00 00                	add    %al,(%rax)
   15785:	00 00                	add    %al,(%rax)
   15787:	00 37                	add    %dh,(%rdi)
   15789:	12 00                	adc    (%rax),%al
   1578b:	00 00                	add    %al,(%rax)
   1578d:	00 00                	add    %al,(%rax)
   1578f:	00 37                	add    %dh,(%rdi)
   15791:	12 00                	adc    (%rax),%al
   15793:	00 00                	add    %al,(%rax)
   15795:	00 00                	add    %al,(%rax)
   15797:	00 37                	add    %dh,(%rdi)
   15799:	12 00                	adc    (%rax),%al
   1579b:	00 00                	add    %al,(%rax)
   1579d:	00 00                	add    %al,(%rax)
   1579f:	00 37                	add    %dh,(%rdi)
   157a1:	12 00                	adc    (%rax),%al
   157a3:	00 00                	add    %al,(%rax)
   157a5:	00 00                	add    %al,(%rax)
   157a7:	00 37                	add    %dh,(%rdi)
   157a9:	12 00                	adc    (%rax),%al
   157ab:	00 00                	add    %al,(%rax)
   157ad:	00 00                	add    %al,(%rax)
   157af:	00 37                	add    %dh,(%rdi)
   157b1:	12 00                	adc    (%rax),%al
   157b3:	00 00                	add    %al,(%rax)
   157b5:	00 00                	add    %al,(%rax)
   157b7:	00 37                	add    %dh,(%rdi)
   157b9:	12 00                	adc    (%rax),%al
   157bb:	00 00                	add    %al,(%rax)
   157bd:	00 00                	add    %al,(%rax)
   157bf:	00 37                	add    %dh,(%rdi)
   157c1:	12 00                	adc    (%rax),%al
   157c3:	00 00                	add    %al,(%rax)
   157c5:	00 00                	add    %al,(%rax)
   157c7:	00 37                	add    %dh,(%rdi)
   157c9:	12 00                	adc    (%rax),%al
   157cb:	00 00                	add    %al,(%rax)
   157cd:	00 00                	add    %al,(%rax)
   157cf:	00 37                	add    %dh,(%rdi)
   157d1:	12 00                	adc    (%rax),%al
   157d3:	00 00                	add    %al,(%rax)
   157d5:	00 00                	add    %al,(%rax)
   157d7:	00 37                	add    %dh,(%rdi)
   157d9:	12 00                	adc    (%rax),%al
   157db:	00 00                	add    %al,(%rax)
   157dd:	00 00                	add    %al,(%rax)
   157df:	00 37                	add    %dh,(%rdi)
   157e1:	12 00                	adc    (%rax),%al
   157e3:	00 00                	add    %al,(%rax)
   157e5:	00 00                	add    %al,(%rax)
   157e7:	00 37                	add    %dh,(%rdi)
   157e9:	12 00                	adc    (%rax),%al
   157eb:	00 00                	add    %al,(%rax)
   157ed:	00 00                	add    %al,(%rax)
   157ef:	00 37                	add    %dh,(%rdi)
   157f1:	12 00                	adc    (%rax),%al
   157f3:	00 00                	add    %al,(%rax)
   157f5:	00 00                	add    %al,(%rax)
   157f7:	00 37                	add    %dh,(%rdi)
   157f9:	12 00                	adc    (%rax),%al
   157fb:	00 00                	add    %al,(%rax)
   157fd:	00 00                	add    %al,(%rax)
   157ff:	00 c3                	add    %al,%bl
   15801:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   15808:	00 
   15809:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   15810:	90                   	nop
   15811:	90                   	nop
   15812:	90                   	nop
   15813:	90                   	nop
   15814:	90                   	nop
   15815:	90                   	nop
   15816:	90                   	nop
   15817:	90                   	nop
   15818:	90                   	nop
   15819:	90                   	nop
   1581a:	90                   	nop
   1581b:	90                   	nop
   1581c:	90                   	nop
   1581d:	90                   	nop
   1581e:	90                   	nop
   1581f:	90                   	nop
   15820:	90                   	nop
   15821:	90                   	nop
   15822:	90                   	nop
   15823:	90                   	nop
   15824:	90                   	nop
   15825:	90                   	nop
   15826:	90                   	nop
   15827:	90                   	nop
   15828:	90                   	nop
   15829:	90                   	nop
   1582a:	90                   	nop
   1582b:	90                   	nop
   1582c:	90                   	nop
   1582d:	90                   	nop
   1582e:	90                   	nop
   1582f:	90                   	nop
   15830:	90                   	nop
   15831:	90                   	nop
   15832:	90                   	nop
   15833:	90                   	nop
   15834:	90                   	nop
   15835:	90                   	nop
   15836:	90                   	nop
   15837:	90                   	nop
   15838:	90                   	nop
   15839:	90                   	nop
   1583a:	90                   	nop
   1583b:	90                   	nop
   1583c:	90                   	nop
   1583d:	90                   	nop
   1583e:	90                   	nop
   1583f:	90                   	nop

0000000000015840 <__intel_ssse3_memcpy>:
   15840:	48 89 f8             	mov    %rdi,%rax
   15843:	48 83 fa 4f          	cmp    $0x4f,%rdx
   15847:	4c 8d 1d b2 a9 01 00 	lea    0x1a9b2(%rip),%r11        # 30200 <__func__.2393+0x7>
   1584e:	77 20                	ja     15870 <__intel_ssse3_memcpy+0x30>
   15850:	4d 63 0c 93          	movslq (%r11,%rdx,4),%r9
   15854:	48 01 d6             	add    %rdx,%rsi
   15857:	48 01 d7             	add    %rdx,%rdi
   1585a:	4d 01 d9             	add    %r11,%r9
   1585d:	3e 41 ff e1          	notrack jmpq *%r9
   15861:	0f 0b                	ud2    
   15863:	0f 1f 00             	nopl   (%rax)
   15866:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1586d:	00 00 00 
   15870:	40 38 fe             	cmp    %dil,%sil
   15873:	7e 5b                	jle    158d0 <__intel_ssse3_memcpy+0x90>
   15875:	f3 0f 6f 06          	movdqu (%rsi),%xmm0
   15879:	48 89 f9             	mov    %rdi,%rcx
   1587c:	48 83 e7 f0          	and    $0xfffffffffffffff0,%rdi
   15880:	48 83 c7 10          	add    $0x10,%rdi
   15884:	49 89 c8             	mov    %rcx,%r8
   15887:	48 29 f9             	sub    %rdi,%rcx
   1588a:	48 01 ca             	add    %rcx,%rdx
   1588d:	48 29 ce             	sub    %rcx,%rsi
   15890:	8b 0d f2 ff 21 00    	mov    0x21fff2(%rip),%ecx        # 235888 <__libirc_largest_cache_size_half>
   15896:	48 39 ca             	cmp    %rcx,%rdx
   15899:	49 89 f1             	mov    %rsi,%r9
   1589c:	0f 87 ae 27 00 00    	ja     18050 <__intel_ssse3_memcpy+0x2810>
   158a2:	49 83 e1 0f          	and    $0xf,%r9
   158a6:	0f 84 84 00 00 00    	je     15930 <__intel_ssse3_memcpy+0xf0>
   158ac:	8b 0d de ff 21 00    	mov    0x21ffde(%rip),%ecx        # 235890 <__libirc_data_cache_size_half>
   158b2:	4c 8d 1d 87 aa 01 00 	lea    0x1aa87(%rip),%r11        # 30340 <__func__.2393+0x147>
   158b9:	4f 63 0c 8b          	movslq (%r11,%r9,4),%r9
   158bd:	4f 8d 0c 0b          	lea    (%r11,%r9,1),%r9
   158c1:	3e 41 ff e1          	notrack jmpq *%r9
   158c5:	0f 0b                	ud2    
   158c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   158ce:	00 00 
   158d0:	f3 0f 6f 44 16 f0    	movdqu -0x10(%rsi,%rdx,1),%xmm0
   158d6:	48 01 d6             	add    %rdx,%rsi
   158d9:	4c 8d 44 17 f0       	lea    -0x10(%rdi,%rdx,1),%r8
   158de:	48 01 d7             	add    %rdx,%rdi
   158e1:	48 89 f9             	mov    %rdi,%rcx
   158e4:	48 83 e1 0f          	and    $0xf,%rcx
   158e8:	48 31 cf             	xor    %rcx,%rdi
   158eb:	48 29 ca             	sub    %rcx,%rdx
   158ee:	48 29 ce             	sub    %rcx,%rsi
   158f1:	8b 0d 91 ff 21 00    	mov    0x21ff91(%rip),%ecx        # 235888 <__libirc_largest_cache_size_half>
   158f7:	48 39 ca             	cmp    %rcx,%rdx
   158fa:	49 89 f1             	mov    %rsi,%r9
   158fd:	0f 87 2d 28 00 00    	ja     18130 <__intel_ssse3_memcpy+0x28f0>
   15903:	49 83 e1 0f          	and    $0xf,%r9
   15907:	0f 84 53 02 00 00    	je     15b60 <__intel_ssse3_memcpy+0x320>
   1590d:	8b 0d 7d ff 21 00    	mov    0x21ff7d(%rip),%ecx        # 235890 <__libirc_data_cache_size_half>
   15913:	4c 8d 1d 66 aa 01 00 	lea    0x1aa66(%rip),%r11        # 30380 <__func__.2393+0x187>
   1591a:	4f 63 0c 8b          	movslq (%r11,%r9,4),%r9
   1591e:	4f 8d 0c 0b          	lea    (%r11,%r9,1),%r9
   15922:	3e 41 ff e1          	notrack jmpq *%r9
   15926:	0f 0b                	ud2    
   15928:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1592f:	00 
   15930:	48 83 ea 10          	sub    $0x10,%rdx
   15934:	66 0f 6f 0e          	movdqa (%rsi),%xmm1
   15938:	48 83 c6 10          	add    $0x10,%rsi
   1593c:	66 0f 7f 0f          	movdqa %xmm1,(%rdi)
   15940:	48 83 c7 10          	add    $0x10,%rdi
   15944:	48 81 fa 80 00 00 00 	cmp    $0x80,%rdx
   1594b:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   15950:	77 4e                	ja     159a0 <__intel_ssse3_memcpy+0x160>
   15952:	48 83 fa 40          	cmp    $0x40,%rdx
   15956:	72 2a                	jb     15982 <__intel_ssse3_memcpy+0x142>
   15958:	0f 28 26             	movaps (%rsi),%xmm4
   1595b:	0f 28 4e 10          	movaps 0x10(%rsi),%xmm1
   1595f:	0f 28 56 20          	movaps 0x20(%rsi),%xmm2
   15963:	0f 28 5e 30          	movaps 0x30(%rsi),%xmm3
   15967:	0f 29 27             	movaps %xmm4,(%rdi)
   1596a:	0f 29 4f 10          	movaps %xmm1,0x10(%rdi)
   1596e:	0f 29 57 20          	movaps %xmm2,0x20(%rdi)
   15972:	0f 29 5f 30          	movaps %xmm3,0x30(%rdi)
   15976:	48 83 ea 40          	sub    $0x40,%rdx
   1597a:	48 83 c6 40          	add    $0x40,%rsi
   1597e:	48 83 c7 40          	add    $0x40,%rdi
   15982:	48 01 d6             	add    %rdx,%rsi
   15985:	48 01 d7             	add    %rdx,%rdi
   15988:	4c 8d 1d 71 a8 01 00 	lea    0x1a871(%rip),%r11        # 30200 <__func__.2393+0x7>
   1598f:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   15993:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   15997:	3e ff e2             	notrack jmpq *%rdx
   1599a:	0f 0b                	ud2    
   1599c:	0f 1f 40 00          	nopl   0x0(%rax)
   159a0:	8b 0d ea fe 21 00    	mov    0x21feea(%rip),%ecx        # 235890 <__libirc_data_cache_size_half>
   159a6:	48 39 ca             	cmp    %rcx,%rdx
   159a9:	48 8d 52 80          	lea    -0x80(%rdx),%rdx
   159ad:	0f 83 bd 00 00 00    	jae    15a70 <__intel_ssse3_memcpy+0x230>
   159b3:	66 0f 6f 26          	movdqa (%rsi),%xmm4
   159b7:	0f 28 4e 10          	movaps 0x10(%rsi),%xmm1
   159bb:	0f 28 56 20          	movaps 0x20(%rsi),%xmm2
   159bf:	0f 28 5e 30          	movaps 0x30(%rsi),%xmm3
   159c3:	66 0f 7f 27          	movdqa %xmm4,(%rdi)
   159c7:	0f 29 4f 10          	movaps %xmm1,0x10(%rdi)
   159cb:	0f 29 57 20          	movaps %xmm2,0x20(%rdi)
   159cf:	0f 29 5f 30          	movaps %xmm3,0x30(%rdi)
   159d3:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   159da:	0f 28 66 40          	movaps 0x40(%rsi),%xmm4
   159de:	0f 28 6e 50          	movaps 0x50(%rsi),%xmm5
   159e2:	0f 28 76 60          	movaps 0x60(%rsi),%xmm6
   159e6:	0f 28 7e 70          	movaps 0x70(%rsi),%xmm7
   159ea:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   159f1:	0f 29 67 40          	movaps %xmm4,0x40(%rdi)
   159f5:	0f 29 6f 50          	movaps %xmm5,0x50(%rdi)
   159f9:	0f 29 77 60          	movaps %xmm6,0x60(%rdi)
   159fd:	0f 29 7f 70          	movaps %xmm7,0x70(%rdi)
   15a01:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   15a08:	73 a9                	jae    159b3 <__intel_ssse3_memcpy+0x173>
   15a0a:	48 83 fa c0          	cmp    $0xffffffffffffffc0,%rdx
   15a0e:	48 8d 92 80 00 00 00 	lea    0x80(%rdx),%rdx
   15a15:	7c 32                	jl     15a49 <__intel_ssse3_memcpy+0x209>
   15a17:	66 0f 6f 26          	movdqa (%rsi),%xmm4
   15a1b:	48 83 ea 40          	sub    $0x40,%rdx
   15a1f:	66 0f 6f 4e 10       	movdqa 0x10(%rsi),%xmm1
   15a24:	66 0f 7f 27          	movdqa %xmm4,(%rdi)
   15a28:	66 0f 7f 4f 10       	movdqa %xmm1,0x10(%rdi)
   15a2d:	66 0f 6f 66 20       	movdqa 0x20(%rsi),%xmm4
   15a32:	66 0f 6f 4e 30       	movdqa 0x30(%rsi),%xmm1
   15a37:	48 83 c6 40          	add    $0x40,%rsi
   15a3b:	66 0f 7f 67 20       	movdqa %xmm4,0x20(%rdi)
   15a40:	66 0f 7f 4f 30       	movdqa %xmm1,0x30(%rdi)
   15a45:	48 83 c7 40          	add    $0x40,%rdi
   15a49:	48 01 d6             	add    %rdx,%rsi
   15a4c:	48 01 d7             	add    %rdx,%rdi
   15a4f:	4c 8d 1d aa a7 01 00 	lea    0x1a7aa(%rip),%r11        # 30200 <__func__.2393+0x7>
   15a56:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   15a5a:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   15a5e:	3e ff e2             	notrack jmpq *%rdx
   15a61:	0f 0b                	ud2    
   15a63:	0f 1f 00             	nopl   (%rax)
   15a66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   15a6d:	00 00 00 
   15a70:	0f 18 8e c0 01 00 00 	prefetcht0 0x1c0(%rsi)
   15a77:	0f 18 8e 80 02 00 00 	prefetcht0 0x280(%rsi)
   15a7e:	66 0f 6f 06          	movdqa (%rsi),%xmm0
   15a82:	66 0f 6f 4e 10       	movdqa 0x10(%rsi),%xmm1
   15a87:	66 0f 6f 56 20       	movdqa 0x20(%rsi),%xmm2
   15a8c:	66 0f 6f 5e 30       	movdqa 0x30(%rsi),%xmm3
   15a91:	66 0f 6f 66 40       	movdqa 0x40(%rsi),%xmm4
   15a96:	66 0f 6f 6e 50       	movdqa 0x50(%rsi),%xmm5
   15a9b:	66 0f 6f 76 60       	movdqa 0x60(%rsi),%xmm6
   15aa0:	66 0f 6f 7e 70       	movdqa 0x70(%rsi),%xmm7
   15aa5:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   15aac:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   15ab3:	66 0f 7f 07          	movdqa %xmm0,(%rdi)
   15ab7:	66 0f 7f 4f 10       	movdqa %xmm1,0x10(%rdi)
   15abc:	66 0f 7f 57 20       	movdqa %xmm2,0x20(%rdi)
   15ac1:	66 0f 7f 5f 30       	movdqa %xmm3,0x30(%rdi)
   15ac6:	66 0f 7f 67 40       	movdqa %xmm4,0x40(%rdi)
   15acb:	66 0f 7f 6f 50       	movdqa %xmm5,0x50(%rdi)
   15ad0:	66 0f 7f 77 60       	movdqa %xmm6,0x60(%rdi)
   15ad5:	66 0f 7f 7f 70       	movdqa %xmm7,0x70(%rdi)
   15ada:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   15ae1:	73 8d                	jae    15a70 <__intel_ssse3_memcpy+0x230>
   15ae3:	48 83 fa c0          	cmp    $0xffffffffffffffc0,%rdx
   15ae7:	48 8d 92 80 00 00 00 	lea    0x80(%rdx),%rdx
   15aee:	7c 32                	jl     15b22 <__intel_ssse3_memcpy+0x2e2>
   15af0:	66 0f 6f 06          	movdqa (%rsi),%xmm0
   15af4:	48 83 ea 40          	sub    $0x40,%rdx
   15af8:	66 0f 6f 4e 10       	movdqa 0x10(%rsi),%xmm1
   15afd:	66 0f 7f 07          	movdqa %xmm0,(%rdi)
   15b01:	66 0f 7f 4f 10       	movdqa %xmm1,0x10(%rdi)
   15b06:	66 0f 6f 46 20       	movdqa 0x20(%rsi),%xmm0
   15b0b:	66 0f 6f 4e 30       	movdqa 0x30(%rsi),%xmm1
   15b10:	48 83 c6 40          	add    $0x40,%rsi
   15b14:	66 0f 7f 47 20       	movdqa %xmm0,0x20(%rdi)
   15b19:	66 0f 7f 4f 30       	movdqa %xmm1,0x30(%rdi)
   15b1e:	48 83 c7 40          	add    $0x40,%rdi
   15b22:	48 83 fa 20          	cmp    $0x20,%rdx
   15b26:	72 1e                	jb     15b46 <__intel_ssse3_memcpy+0x306>
   15b28:	66 0f 6f 06          	movdqa (%rsi),%xmm0
   15b2c:	48 83 ea 20          	sub    $0x20,%rdx
   15b30:	66 0f 6f 4e 10       	movdqa 0x10(%rsi),%xmm1
   15b35:	48 83 c6 20          	add    $0x20,%rsi
   15b39:	66 0f 7f 07          	movdqa %xmm0,(%rdi)
   15b3d:	66 0f 7f 4f 10       	movdqa %xmm1,0x10(%rdi)
   15b42:	48 83 c7 20          	add    $0x20,%rdi
   15b46:	48 01 d7             	add    %rdx,%rdi
   15b49:	48 01 d6             	add    %rdx,%rsi
   15b4c:	4c 8d 1d ad a6 01 00 	lea    0x1a6ad(%rip),%r11        # 30200 <__func__.2393+0x7>
   15b53:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   15b57:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   15b5b:	3e ff e2             	notrack jmpq *%rdx
   15b5e:	0f 0b                	ud2    
   15b60:	48 83 ea 10          	sub    $0x10,%rdx
   15b64:	66 0f 6f 4e f0       	movdqa -0x10(%rsi),%xmm1
   15b69:	48 83 ee 10          	sub    $0x10,%rsi
   15b6d:	66 0f 7f 4f f0       	movdqa %xmm1,-0x10(%rdi)
   15b72:	48 83 ef 10          	sub    $0x10,%rdi
   15b76:	48 81 fa 80 00 00 00 	cmp    $0x80,%rdx
   15b7d:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   15b82:	77 4c                	ja     15bd0 <__intel_ssse3_memcpy+0x390>
   15b84:	48 83 fa 40          	cmp    $0x40,%rdx
   15b88:	72 2c                	jb     15bb6 <__intel_ssse3_memcpy+0x376>
   15b8a:	0f 28 46 f0          	movaps -0x10(%rsi),%xmm0
   15b8e:	0f 28 4e e0          	movaps -0x20(%rsi),%xmm1
   15b92:	0f 28 56 d0          	movaps -0x30(%rsi),%xmm2
   15b96:	0f 28 5e c0          	movaps -0x40(%rsi),%xmm3
   15b9a:	0f 29 47 f0          	movaps %xmm0,-0x10(%rdi)
   15b9e:	0f 29 4f e0          	movaps %xmm1,-0x20(%rdi)
   15ba2:	0f 29 57 d0          	movaps %xmm2,-0x30(%rdi)
   15ba6:	0f 29 5f c0          	movaps %xmm3,-0x40(%rdi)
   15baa:	48 83 ea 40          	sub    $0x40,%rdx
   15bae:	48 83 ee 40          	sub    $0x40,%rsi
   15bb2:	48 83 ef 40          	sub    $0x40,%rdi
   15bb6:	4c 8d 1d 43 a6 01 00 	lea    0x1a643(%rip),%r11        # 30200 <__func__.2393+0x7>
   15bbd:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   15bc1:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   15bc5:	3e ff e2             	notrack jmpq *%rdx
   15bc8:	0f 0b                	ud2    
   15bca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   15bd0:	8b 0d ba fc 21 00    	mov    0x21fcba(%rip),%ecx        # 235890 <__libirc_data_cache_size_half>
   15bd6:	48 39 ca             	cmp    %rcx,%rdx
   15bd9:	48 8d 52 80          	lea    -0x80(%rdx),%rdx
   15bdd:	0f 83 ad 00 00 00    	jae    15c90 <__intel_ssse3_memcpy+0x450>
   15be3:	66 0f 6f 46 f0       	movdqa -0x10(%rsi),%xmm0
   15be8:	0f 28 4e e0          	movaps -0x20(%rsi),%xmm1
   15bec:	0f 28 56 d0          	movaps -0x30(%rsi),%xmm2
   15bf0:	0f 28 5e c0          	movaps -0x40(%rsi),%xmm3
   15bf4:	66 0f 7f 47 f0       	movdqa %xmm0,-0x10(%rdi)
   15bf9:	0f 29 4f e0          	movaps %xmm1,-0x20(%rdi)
   15bfd:	0f 29 57 d0          	movaps %xmm2,-0x30(%rdi)
   15c01:	0f 29 5f c0          	movaps %xmm3,-0x40(%rdi)
   15c05:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   15c0c:	0f 28 66 b0          	movaps -0x50(%rsi),%xmm4
   15c10:	0f 28 6e a0          	movaps -0x60(%rsi),%xmm5
   15c14:	0f 28 76 90          	movaps -0x70(%rsi),%xmm6
   15c18:	0f 28 7e 80          	movaps -0x80(%rsi),%xmm7
   15c1c:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   15c20:	0f 29 67 b0          	movaps %xmm4,-0x50(%rdi)
   15c24:	0f 29 6f a0          	movaps %xmm5,-0x60(%rdi)
   15c28:	0f 29 77 90          	movaps %xmm6,-0x70(%rdi)
   15c2c:	0f 29 7f 80          	movaps %xmm7,-0x80(%rdi)
   15c30:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   15c34:	73 ad                	jae    15be3 <__intel_ssse3_memcpy+0x3a3>
   15c36:	48 83 fa c0          	cmp    $0xffffffffffffffc0,%rdx
   15c3a:	48 8d 92 80 00 00 00 	lea    0x80(%rdx),%rdx
   15c41:	7c 34                	jl     15c77 <__intel_ssse3_memcpy+0x437>
   15c43:	66 0f 6f 46 f0       	movdqa -0x10(%rsi),%xmm0
   15c48:	48 83 ea 40          	sub    $0x40,%rdx
   15c4c:	66 0f 6f 4e e0       	movdqa -0x20(%rsi),%xmm1
   15c51:	66 0f 7f 47 f0       	movdqa %xmm0,-0x10(%rdi)
   15c56:	66 0f 7f 4f e0       	movdqa %xmm1,-0x20(%rdi)
   15c5b:	66 0f 6f 46 d0       	movdqa -0x30(%rsi),%xmm0
   15c60:	66 0f 6f 4e c0       	movdqa -0x40(%rsi),%xmm1
   15c65:	48 83 ee 40          	sub    $0x40,%rsi
   15c69:	66 0f 7f 47 d0       	movdqa %xmm0,-0x30(%rdi)
   15c6e:	66 0f 7f 4f c0       	movdqa %xmm1,-0x40(%rdi)
   15c73:	48 83 ef 40          	sub    $0x40,%rdi
   15c77:	4c 8d 1d 82 a5 01 00 	lea    0x1a582(%rip),%r11        # 30200 <__func__.2393+0x7>
   15c7e:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   15c82:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   15c86:	3e ff e2             	notrack jmpq *%rdx
   15c89:	0f 0b                	ud2    
   15c8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   15c90:	0f 18 8e 40 fe ff ff 	prefetcht0 -0x1c0(%rsi)
   15c97:	0f 18 8e 80 fd ff ff 	prefetcht0 -0x280(%rsi)
   15c9e:	66 0f 6f 46 f0       	movdqa -0x10(%rsi),%xmm0
   15ca3:	66 0f 6f 4e e0       	movdqa -0x20(%rsi),%xmm1
   15ca8:	66 0f 6f 56 d0       	movdqa -0x30(%rsi),%xmm2
   15cad:	66 0f 6f 5e c0       	movdqa -0x40(%rsi),%xmm3
   15cb2:	66 0f 6f 66 b0       	movdqa -0x50(%rsi),%xmm4
   15cb7:	66 0f 6f 6e a0       	movdqa -0x60(%rsi),%xmm5
   15cbc:	66 0f 6f 76 90       	movdqa -0x70(%rsi),%xmm6
   15cc1:	66 0f 6f 7e 80       	movdqa -0x80(%rsi),%xmm7
   15cc6:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   15cca:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   15cd1:	66 0f 7f 47 f0       	movdqa %xmm0,-0x10(%rdi)
   15cd6:	66 0f 7f 4f e0       	movdqa %xmm1,-0x20(%rdi)
   15cdb:	66 0f 7f 57 d0       	movdqa %xmm2,-0x30(%rdi)
   15ce0:	66 0f 7f 5f c0       	movdqa %xmm3,-0x40(%rdi)
   15ce5:	66 0f 7f 67 b0       	movdqa %xmm4,-0x50(%rdi)
   15cea:	66 0f 7f 6f a0       	movdqa %xmm5,-0x60(%rdi)
   15cef:	66 0f 7f 77 90       	movdqa %xmm6,-0x70(%rdi)
   15cf4:	66 0f 7f 7f 80       	movdqa %xmm7,-0x80(%rdi)
   15cf9:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   15cfd:	73 91                	jae    15c90 <__intel_ssse3_memcpy+0x450>
   15cff:	48 83 fa c0          	cmp    $0xffffffffffffffc0,%rdx
   15d03:	48 8d 92 80 00 00 00 	lea    0x80(%rdx),%rdx
   15d0a:	7c 34                	jl     15d40 <__intel_ssse3_memcpy+0x500>
   15d0c:	66 0f 6f 46 f0       	movdqa -0x10(%rsi),%xmm0
   15d11:	48 83 ea 40          	sub    $0x40,%rdx
   15d15:	66 0f 6f 4e e0       	movdqa -0x20(%rsi),%xmm1
   15d1a:	66 0f 7f 47 f0       	movdqa %xmm0,-0x10(%rdi)
   15d1f:	66 0f 7f 4f e0       	movdqa %xmm1,-0x20(%rdi)
   15d24:	66 0f 6f 46 d0       	movdqa -0x30(%rsi),%xmm0
   15d29:	66 0f 6f 4e c0       	movdqa -0x40(%rsi),%xmm1
   15d2e:	48 83 ee 40          	sub    $0x40,%rsi
   15d32:	66 0f 7f 47 d0       	movdqa %xmm0,-0x30(%rdi)
   15d37:	66 0f 7f 4f c0       	movdqa %xmm1,-0x40(%rdi)
   15d3c:	48 83 ef 40          	sub    $0x40,%rdi
   15d40:	48 83 fa 20          	cmp    $0x20,%rdx
   15d44:	72 20                	jb     15d66 <__intel_ssse3_memcpy+0x526>
   15d46:	66 0f 6f 46 f0       	movdqa -0x10(%rsi),%xmm0
   15d4b:	48 83 ea 20          	sub    $0x20,%rdx
   15d4f:	66 0f 6f 4e e0       	movdqa -0x20(%rsi),%xmm1
   15d54:	48 83 ee 20          	sub    $0x20,%rsi
   15d58:	66 0f 7f 47 f0       	movdqa %xmm0,-0x10(%rdi)
   15d5d:	66 0f 7f 4f e0       	movdqa %xmm1,-0x20(%rdi)
   15d62:	48 83 ef 20          	sub    $0x20,%rdi
   15d66:	4c 8d 1d 93 a4 01 00 	lea    0x1a493(%rip),%r11        # 30200 <__func__.2393+0x7>
   15d6d:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   15d71:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   15d75:	3e ff e2             	notrack jmpq *%rdx
   15d78:	0f 0b                	ud2    
   15d7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   15d80:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   15d87:	48 39 ca             	cmp    %rcx,%rdx
   15d8a:	0f 28 4e ff          	movaps -0x1(%rsi),%xmm1
   15d8e:	72 07                	jb     15d97 <__intel_ssse3_memcpy+0x557>
   15d90:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   15d97:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   15d9b:	3e 41 ff e1          	notrack jmpq *%r9
   15d9f:	0f 0b                	ud2    
   15da1:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   15da8:	48 83 ea 40          	sub    $0x40,%rdx
   15dac:	0f 28 56 0f          	movaps 0xf(%rsi),%xmm2
   15db0:	0f 28 5e 1f          	movaps 0x1f(%rsi),%xmm3
   15db4:	0f 28 66 2f          	movaps 0x2f(%rsi),%xmm4
   15db8:	0f 28 6e 3f          	movaps 0x3f(%rsi),%xmm5
   15dbc:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   15dc0:	66 0f 3a 0f ec 01    	palignr $0x1,%xmm4,%xmm5
   15dc6:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   15dca:	66 0f 3a 0f e3 01    	palignr $0x1,%xmm3,%xmm4
   15dd0:	66 0f 3a 0f da 01    	palignr $0x1,%xmm2,%xmm3
   15dd6:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   15dda:	66 0f 3a 0f d1 01    	palignr $0x1,%xmm1,%xmm2
   15de0:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   15de4:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   15de9:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   15ded:	72 0e                	jb     15dfd <__intel_ssse3_memcpy+0x5bd>
   15def:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   15df3:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   15df7:	3e 41 ff e1          	notrack jmpq *%r9
   15dfb:	0f 0b                	ud2    
   15dfd:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   15e01:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   15e05:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   15e09:	48 01 d7             	add    %rdx,%rdi
   15e0c:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   15e11:	48 01 d6             	add    %rdx,%rsi
   15e14:	4c 8d 1d e5 a3 01 00 	lea    0x1a3e5(%rip),%r11        # 30200 <__func__.2393+0x7>
   15e1b:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   15e1f:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   15e23:	3e ff e2             	notrack jmpq *%rdx
   15e26:	0f 0b                	ud2    
   15e28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   15e2f:	00 
   15e30:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   15e37:	48 39 ca             	cmp    %rcx,%rdx
   15e3a:	0f 28 4e ff          	movaps -0x1(%rsi),%xmm1
   15e3e:	72 07                	jb     15e47 <__intel_ssse3_memcpy+0x607>
   15e40:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   15e47:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   15e4b:	3e 41 ff e1          	notrack jmpq *%r9
   15e4f:	0f 0b                	ud2    
   15e51:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   15e58:	0f 28 56 ef          	movaps -0x11(%rsi),%xmm2
   15e5c:	48 83 ea 40          	sub    $0x40,%rdx
   15e60:	0f 28 5e df          	movaps -0x21(%rsi),%xmm3
   15e64:	0f 28 66 cf          	movaps -0x31(%rsi),%xmm4
   15e68:	0f 28 6e bf          	movaps -0x41(%rsi),%xmm5
   15e6c:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   15e70:	66 0f 3a 0f ca 01    	palignr $0x1,%xmm2,%xmm1
   15e76:	66 0f 3a 0f d3 01    	palignr $0x1,%xmm3,%xmm2
   15e7c:	66 0f 3a 0f dc 01    	palignr $0x1,%xmm4,%xmm3
   15e82:	66 0f 3a 0f e5 01    	palignr $0x1,%xmm5,%xmm4
   15e88:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   15e8c:	0f 28 cd             	movaps %xmm5,%xmm1
   15e8f:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   15e93:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   15e97:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   15e9b:	72 09                	jb     15ea6 <__intel_ssse3_memcpy+0x666>
   15e9d:	0f 29 27             	movaps %xmm4,(%rdi)
   15ea0:	3e 41 ff e1          	notrack jmpq *%r9
   15ea4:	0f 0b                	ud2    
   15ea6:	0f 29 27             	movaps %xmm4,(%rdi)
   15ea9:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   15ead:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   15eb2:	4c 8d 1d 47 a3 01 00 	lea    0x1a347(%rip),%r11        # 30200 <__func__.2393+0x7>
   15eb9:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   15ebd:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   15ec1:	3e ff e2             	notrack jmpq *%rdx
   15ec4:	0f 0b                	ud2    
   15ec6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   15ecd:	00 00 00 
   15ed0:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   15ed7:	48 39 ca             	cmp    %rcx,%rdx
   15eda:	0f 28 4e fe          	movaps -0x2(%rsi),%xmm1
   15ede:	72 07                	jb     15ee7 <__intel_ssse3_memcpy+0x6a7>
   15ee0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   15ee7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   15eeb:	3e 41 ff e1          	notrack jmpq *%r9
   15eef:	0f 0b                	ud2    
   15ef1:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   15ef8:	48 83 ea 40          	sub    $0x40,%rdx
   15efc:	0f 28 56 0e          	movaps 0xe(%rsi),%xmm2
   15f00:	0f 28 5e 1e          	movaps 0x1e(%rsi),%xmm3
   15f04:	0f 28 66 2e          	movaps 0x2e(%rsi),%xmm4
   15f08:	0f 28 6e 3e          	movaps 0x3e(%rsi),%xmm5
   15f0c:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   15f10:	66 0f 3a 0f ec 02    	palignr $0x2,%xmm4,%xmm5
   15f16:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   15f1a:	66 0f 3a 0f e3 02    	palignr $0x2,%xmm3,%xmm4
   15f20:	66 0f 3a 0f da 02    	palignr $0x2,%xmm2,%xmm3
   15f26:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   15f2a:	66 0f 3a 0f d1 02    	palignr $0x2,%xmm1,%xmm2
   15f30:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   15f34:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   15f39:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   15f3d:	72 0e                	jb     15f4d <__intel_ssse3_memcpy+0x70d>
   15f3f:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   15f43:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   15f47:	3e 41 ff e1          	notrack jmpq *%r9
   15f4b:	0f 0b                	ud2    
   15f4d:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   15f51:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   15f55:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   15f59:	48 01 d7             	add    %rdx,%rdi
   15f5c:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   15f61:	48 01 d6             	add    %rdx,%rsi
   15f64:	4c 8d 1d 95 a2 01 00 	lea    0x1a295(%rip),%r11        # 30200 <__func__.2393+0x7>
   15f6b:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   15f6f:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   15f73:	3e ff e2             	notrack jmpq *%rdx
   15f76:	0f 0b                	ud2    
   15f78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   15f7f:	00 
   15f80:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   15f87:	48 39 ca             	cmp    %rcx,%rdx
   15f8a:	0f 28 4e fe          	movaps -0x2(%rsi),%xmm1
   15f8e:	72 07                	jb     15f97 <__intel_ssse3_memcpy+0x757>
   15f90:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   15f97:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   15f9b:	3e 41 ff e1          	notrack jmpq *%r9
   15f9f:	0f 0b                	ud2    
   15fa1:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   15fa8:	0f 28 56 ee          	movaps -0x12(%rsi),%xmm2
   15fac:	48 83 ea 40          	sub    $0x40,%rdx
   15fb0:	0f 28 5e de          	movaps -0x22(%rsi),%xmm3
   15fb4:	0f 28 66 ce          	movaps -0x32(%rsi),%xmm4
   15fb8:	0f 28 6e be          	movaps -0x42(%rsi),%xmm5
   15fbc:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   15fc0:	66 0f 3a 0f ca 02    	palignr $0x2,%xmm2,%xmm1
   15fc6:	66 0f 3a 0f d3 02    	palignr $0x2,%xmm3,%xmm2
   15fcc:	66 0f 3a 0f dc 02    	palignr $0x2,%xmm4,%xmm3
   15fd2:	66 0f 3a 0f e5 02    	palignr $0x2,%xmm5,%xmm4
   15fd8:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   15fdc:	0f 28 cd             	movaps %xmm5,%xmm1
   15fdf:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   15fe3:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   15fe7:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   15feb:	72 09                	jb     15ff6 <__intel_ssse3_memcpy+0x7b6>
   15fed:	0f 29 27             	movaps %xmm4,(%rdi)
   15ff0:	3e 41 ff e1          	notrack jmpq *%r9
   15ff4:	0f 0b                	ud2    
   15ff6:	0f 29 27             	movaps %xmm4,(%rdi)
   15ff9:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   15ffd:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16002:	4c 8d 1d f7 a1 01 00 	lea    0x1a1f7(%rip),%r11        # 30200 <__func__.2393+0x7>
   16009:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1600d:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16011:	3e ff e2             	notrack jmpq *%rdx
   16014:	0f 0b                	ud2    
   16016:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1601d:	00 00 00 
   16020:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16027:	48 39 ca             	cmp    %rcx,%rdx
   1602a:	0f 28 4e fd          	movaps -0x3(%rsi),%xmm1
   1602e:	72 07                	jb     16037 <__intel_ssse3_memcpy+0x7f7>
   16030:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16037:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   1603b:	3e 41 ff e1          	notrack jmpq *%r9
   1603f:	0f 0b                	ud2    
   16041:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   16048:	48 83 ea 40          	sub    $0x40,%rdx
   1604c:	0f 28 56 0d          	movaps 0xd(%rsi),%xmm2
   16050:	0f 28 5e 1d          	movaps 0x1d(%rsi),%xmm3
   16054:	0f 28 66 2d          	movaps 0x2d(%rsi),%xmm4
   16058:	0f 28 6e 3d          	movaps 0x3d(%rsi),%xmm5
   1605c:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   16060:	66 0f 3a 0f ec 03    	palignr $0x3,%xmm4,%xmm5
   16066:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   1606a:	66 0f 3a 0f e3 03    	palignr $0x3,%xmm3,%xmm4
   16070:	66 0f 3a 0f da 03    	palignr $0x3,%xmm2,%xmm3
   16076:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   1607a:	66 0f 3a 0f d1 03    	palignr $0x3,%xmm1,%xmm2
   16080:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   16084:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   16089:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1608d:	72 0e                	jb     1609d <__intel_ssse3_memcpy+0x85d>
   1608f:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16093:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16097:	3e 41 ff e1          	notrack jmpq *%r9
   1609b:	0f 0b                	ud2    
   1609d:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   160a1:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   160a5:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   160a9:	48 01 d7             	add    %rdx,%rdi
   160ac:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   160b1:	48 01 d6             	add    %rdx,%rsi
   160b4:	4c 8d 1d 45 a1 01 00 	lea    0x1a145(%rip),%r11        # 30200 <__func__.2393+0x7>
   160bb:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   160bf:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   160c3:	3e ff e2             	notrack jmpq *%rdx
   160c6:	0f 0b                	ud2    
   160c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   160cf:	00 
   160d0:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   160d7:	48 39 ca             	cmp    %rcx,%rdx
   160da:	0f 28 4e fd          	movaps -0x3(%rsi),%xmm1
   160de:	72 07                	jb     160e7 <__intel_ssse3_memcpy+0x8a7>
   160e0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   160e7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   160eb:	3e 41 ff e1          	notrack jmpq *%r9
   160ef:	0f 0b                	ud2    
   160f1:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   160f8:	0f 28 56 ed          	movaps -0x13(%rsi),%xmm2
   160fc:	48 83 ea 40          	sub    $0x40,%rdx
   16100:	0f 28 5e dd          	movaps -0x23(%rsi),%xmm3
   16104:	0f 28 66 cd          	movaps -0x33(%rsi),%xmm4
   16108:	0f 28 6e bd          	movaps -0x43(%rsi),%xmm5
   1610c:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   16110:	66 0f 3a 0f ca 03    	palignr $0x3,%xmm2,%xmm1
   16116:	66 0f 3a 0f d3 03    	palignr $0x3,%xmm3,%xmm2
   1611c:	66 0f 3a 0f dc 03    	palignr $0x3,%xmm4,%xmm3
   16122:	66 0f 3a 0f e5 03    	palignr $0x3,%xmm5,%xmm4
   16128:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   1612c:	0f 28 cd             	movaps %xmm5,%xmm1
   1612f:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   16133:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   16137:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   1613b:	72 09                	jb     16146 <__intel_ssse3_memcpy+0x906>
   1613d:	0f 29 27             	movaps %xmm4,(%rdi)
   16140:	3e 41 ff e1          	notrack jmpq *%r9
   16144:	0f 0b                	ud2    
   16146:	0f 29 27             	movaps %xmm4,(%rdi)
   16149:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1614d:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16152:	4c 8d 1d a7 a0 01 00 	lea    0x1a0a7(%rip),%r11        # 30200 <__func__.2393+0x7>
   16159:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1615d:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16161:	3e ff e2             	notrack jmpq *%rdx
   16164:	0f 0b                	ud2    
   16166:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1616d:	00 00 00 
   16170:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16177:	48 39 ca             	cmp    %rcx,%rdx
   1617a:	0f 28 4e fc          	movaps -0x4(%rsi),%xmm1
   1617e:	72 07                	jb     16187 <__intel_ssse3_memcpy+0x947>
   16180:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16187:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   1618b:	3e 41 ff e1          	notrack jmpq *%r9
   1618f:	0f 0b                	ud2    
   16191:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   16198:	48 83 ea 40          	sub    $0x40,%rdx
   1619c:	0f 28 56 0c          	movaps 0xc(%rsi),%xmm2
   161a0:	0f 28 5e 1c          	movaps 0x1c(%rsi),%xmm3
   161a4:	0f 28 66 2c          	movaps 0x2c(%rsi),%xmm4
   161a8:	0f 28 6e 3c          	movaps 0x3c(%rsi),%xmm5
   161ac:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   161b0:	66 0f 3a 0f ec 04    	palignr $0x4,%xmm4,%xmm5
   161b6:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   161ba:	66 0f 3a 0f e3 04    	palignr $0x4,%xmm3,%xmm4
   161c0:	66 0f 3a 0f da 04    	palignr $0x4,%xmm2,%xmm3
   161c6:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   161ca:	66 0f 3a 0f d1 04    	palignr $0x4,%xmm1,%xmm2
   161d0:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   161d4:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   161d9:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   161dd:	72 0e                	jb     161ed <__intel_ssse3_memcpy+0x9ad>
   161df:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   161e3:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   161e7:	3e 41 ff e1          	notrack jmpq *%r9
   161eb:	0f 0b                	ud2    
   161ed:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   161f1:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   161f5:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   161f9:	48 01 d7             	add    %rdx,%rdi
   161fc:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16201:	48 01 d6             	add    %rdx,%rsi
   16204:	4c 8d 1d f5 9f 01 00 	lea    0x19ff5(%rip),%r11        # 30200 <__func__.2393+0x7>
   1620b:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1620f:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16213:	3e ff e2             	notrack jmpq *%rdx
   16216:	0f 0b                	ud2    
   16218:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1621f:	00 
   16220:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16227:	48 39 ca             	cmp    %rcx,%rdx
   1622a:	0f 28 4e fc          	movaps -0x4(%rsi),%xmm1
   1622e:	72 07                	jb     16237 <__intel_ssse3_memcpy+0x9f7>
   16230:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16237:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   1623b:	3e 41 ff e1          	notrack jmpq *%r9
   1623f:	0f 0b                	ud2    
   16241:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   16248:	0f 28 56 ec          	movaps -0x14(%rsi),%xmm2
   1624c:	48 83 ea 40          	sub    $0x40,%rdx
   16250:	0f 28 5e dc          	movaps -0x24(%rsi),%xmm3
   16254:	0f 28 66 cc          	movaps -0x34(%rsi),%xmm4
   16258:	0f 28 6e bc          	movaps -0x44(%rsi),%xmm5
   1625c:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   16260:	66 0f 3a 0f ca 04    	palignr $0x4,%xmm2,%xmm1
   16266:	66 0f 3a 0f d3 04    	palignr $0x4,%xmm3,%xmm2
   1626c:	66 0f 3a 0f dc 04    	palignr $0x4,%xmm4,%xmm3
   16272:	66 0f 3a 0f e5 04    	palignr $0x4,%xmm5,%xmm4
   16278:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   1627c:	0f 28 cd             	movaps %xmm5,%xmm1
   1627f:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   16283:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   16287:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   1628b:	72 09                	jb     16296 <__intel_ssse3_memcpy+0xa56>
   1628d:	0f 29 27             	movaps %xmm4,(%rdi)
   16290:	3e 41 ff e1          	notrack jmpq *%r9
   16294:	0f 0b                	ud2    
   16296:	0f 29 27             	movaps %xmm4,(%rdi)
   16299:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1629d:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   162a2:	4c 8d 1d 57 9f 01 00 	lea    0x19f57(%rip),%r11        # 30200 <__func__.2393+0x7>
   162a9:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   162ad:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   162b1:	3e ff e2             	notrack jmpq *%rdx
   162b4:	0f 0b                	ud2    
   162b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   162bd:	00 00 00 
   162c0:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   162c7:	48 39 ca             	cmp    %rcx,%rdx
   162ca:	0f 28 4e fb          	movaps -0x5(%rsi),%xmm1
   162ce:	72 07                	jb     162d7 <__intel_ssse3_memcpy+0xa97>
   162d0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   162d7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   162db:	3e 41 ff e1          	notrack jmpq *%r9
   162df:	0f 0b                	ud2    
   162e1:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   162e8:	48 83 ea 40          	sub    $0x40,%rdx
   162ec:	0f 28 56 0b          	movaps 0xb(%rsi),%xmm2
   162f0:	0f 28 5e 1b          	movaps 0x1b(%rsi),%xmm3
   162f4:	0f 28 66 2b          	movaps 0x2b(%rsi),%xmm4
   162f8:	0f 28 6e 3b          	movaps 0x3b(%rsi),%xmm5
   162fc:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   16300:	66 0f 3a 0f ec 05    	palignr $0x5,%xmm4,%xmm5
   16306:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   1630a:	66 0f 3a 0f e3 05    	palignr $0x5,%xmm3,%xmm4
   16310:	66 0f 3a 0f da 05    	palignr $0x5,%xmm2,%xmm3
   16316:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   1631a:	66 0f 3a 0f d1 05    	palignr $0x5,%xmm1,%xmm2
   16320:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   16324:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   16329:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1632d:	72 0e                	jb     1633d <__intel_ssse3_memcpy+0xafd>
   1632f:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16333:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16337:	3e 41 ff e1          	notrack jmpq *%r9
   1633b:	0f 0b                	ud2    
   1633d:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16341:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16345:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16349:	48 01 d7             	add    %rdx,%rdi
   1634c:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16351:	48 01 d6             	add    %rdx,%rsi
   16354:	4c 8d 1d a5 9e 01 00 	lea    0x19ea5(%rip),%r11        # 30200 <__func__.2393+0x7>
   1635b:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1635f:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16363:	3e ff e2             	notrack jmpq *%rdx
   16366:	0f 0b                	ud2    
   16368:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1636f:	00 
   16370:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16377:	48 39 ca             	cmp    %rcx,%rdx
   1637a:	0f 28 4e fb          	movaps -0x5(%rsi),%xmm1
   1637e:	72 07                	jb     16387 <__intel_ssse3_memcpy+0xb47>
   16380:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16387:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   1638b:	3e 41 ff e1          	notrack jmpq *%r9
   1638f:	0f 0b                	ud2    
   16391:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   16398:	0f 28 56 eb          	movaps -0x15(%rsi),%xmm2
   1639c:	48 83 ea 40          	sub    $0x40,%rdx
   163a0:	0f 28 5e db          	movaps -0x25(%rsi),%xmm3
   163a4:	0f 28 66 cb          	movaps -0x35(%rsi),%xmm4
   163a8:	0f 28 6e bb          	movaps -0x45(%rsi),%xmm5
   163ac:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   163b0:	66 0f 3a 0f ca 05    	palignr $0x5,%xmm2,%xmm1
   163b6:	66 0f 3a 0f d3 05    	palignr $0x5,%xmm3,%xmm2
   163bc:	66 0f 3a 0f dc 05    	palignr $0x5,%xmm4,%xmm3
   163c2:	66 0f 3a 0f e5 05    	palignr $0x5,%xmm5,%xmm4
   163c8:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   163cc:	0f 28 cd             	movaps %xmm5,%xmm1
   163cf:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   163d3:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   163d7:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   163db:	72 09                	jb     163e6 <__intel_ssse3_memcpy+0xba6>
   163dd:	0f 29 27             	movaps %xmm4,(%rdi)
   163e0:	3e 41 ff e1          	notrack jmpq *%r9
   163e4:	0f 0b                	ud2    
   163e6:	0f 29 27             	movaps %xmm4,(%rdi)
   163e9:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   163ed:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   163f2:	4c 8d 1d 07 9e 01 00 	lea    0x19e07(%rip),%r11        # 30200 <__func__.2393+0x7>
   163f9:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   163fd:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16401:	3e ff e2             	notrack jmpq *%rdx
   16404:	0f 0b                	ud2    
   16406:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1640d:	00 00 00 
   16410:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16417:	48 39 ca             	cmp    %rcx,%rdx
   1641a:	0f 28 4e fa          	movaps -0x6(%rsi),%xmm1
   1641e:	72 07                	jb     16427 <__intel_ssse3_memcpy+0xbe7>
   16420:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16427:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   1642b:	3e 41 ff e1          	notrack jmpq *%r9
   1642f:	0f 0b                	ud2    
   16431:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   16438:	48 83 ea 40          	sub    $0x40,%rdx
   1643c:	0f 28 56 0a          	movaps 0xa(%rsi),%xmm2
   16440:	0f 28 5e 1a          	movaps 0x1a(%rsi),%xmm3
   16444:	0f 28 66 2a          	movaps 0x2a(%rsi),%xmm4
   16448:	0f 28 6e 3a          	movaps 0x3a(%rsi),%xmm5
   1644c:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   16450:	66 0f 3a 0f ec 06    	palignr $0x6,%xmm4,%xmm5
   16456:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   1645a:	66 0f 3a 0f e3 06    	palignr $0x6,%xmm3,%xmm4
   16460:	66 0f 3a 0f da 06    	palignr $0x6,%xmm2,%xmm3
   16466:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   1646a:	66 0f 3a 0f d1 06    	palignr $0x6,%xmm1,%xmm2
   16470:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   16474:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   16479:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1647d:	72 0e                	jb     1648d <__intel_ssse3_memcpy+0xc4d>
   1647f:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16483:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16487:	3e 41 ff e1          	notrack jmpq *%r9
   1648b:	0f 0b                	ud2    
   1648d:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16491:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16495:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16499:	48 01 d7             	add    %rdx,%rdi
   1649c:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   164a1:	48 01 d6             	add    %rdx,%rsi
   164a4:	4c 8d 1d 55 9d 01 00 	lea    0x19d55(%rip),%r11        # 30200 <__func__.2393+0x7>
   164ab:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   164af:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   164b3:	3e ff e2             	notrack jmpq *%rdx
   164b6:	0f 0b                	ud2    
   164b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   164bf:	00 
   164c0:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   164c7:	48 39 ca             	cmp    %rcx,%rdx
   164ca:	0f 28 4e fa          	movaps -0x6(%rsi),%xmm1
   164ce:	72 07                	jb     164d7 <__intel_ssse3_memcpy+0xc97>
   164d0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   164d7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   164db:	3e 41 ff e1          	notrack jmpq *%r9
   164df:	0f 0b                	ud2    
   164e1:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   164e8:	0f 28 56 ea          	movaps -0x16(%rsi),%xmm2
   164ec:	48 83 ea 40          	sub    $0x40,%rdx
   164f0:	0f 28 5e da          	movaps -0x26(%rsi),%xmm3
   164f4:	0f 28 66 ca          	movaps -0x36(%rsi),%xmm4
   164f8:	0f 28 6e ba          	movaps -0x46(%rsi),%xmm5
   164fc:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   16500:	66 0f 3a 0f ca 06    	palignr $0x6,%xmm2,%xmm1
   16506:	66 0f 3a 0f d3 06    	palignr $0x6,%xmm3,%xmm2
   1650c:	66 0f 3a 0f dc 06    	palignr $0x6,%xmm4,%xmm3
   16512:	66 0f 3a 0f e5 06    	palignr $0x6,%xmm5,%xmm4
   16518:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   1651c:	0f 28 cd             	movaps %xmm5,%xmm1
   1651f:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   16523:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   16527:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   1652b:	72 09                	jb     16536 <__intel_ssse3_memcpy+0xcf6>
   1652d:	0f 29 27             	movaps %xmm4,(%rdi)
   16530:	3e 41 ff e1          	notrack jmpq *%r9
   16534:	0f 0b                	ud2    
   16536:	0f 29 27             	movaps %xmm4,(%rdi)
   16539:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1653d:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16542:	4c 8d 1d b7 9c 01 00 	lea    0x19cb7(%rip),%r11        # 30200 <__func__.2393+0x7>
   16549:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1654d:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16551:	3e ff e2             	notrack jmpq *%rdx
   16554:	0f 0b                	ud2    
   16556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1655d:	00 00 00 
   16560:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16567:	48 39 ca             	cmp    %rcx,%rdx
   1656a:	0f 28 4e f9          	movaps -0x7(%rsi),%xmm1
   1656e:	72 07                	jb     16577 <__intel_ssse3_memcpy+0xd37>
   16570:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16577:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   1657b:	3e 41 ff e1          	notrack jmpq *%r9
   1657f:	0f 0b                	ud2    
   16581:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   16588:	48 83 ea 40          	sub    $0x40,%rdx
   1658c:	0f 28 56 09          	movaps 0x9(%rsi),%xmm2
   16590:	0f 28 5e 19          	movaps 0x19(%rsi),%xmm3
   16594:	0f 28 66 29          	movaps 0x29(%rsi),%xmm4
   16598:	0f 28 6e 39          	movaps 0x39(%rsi),%xmm5
   1659c:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   165a0:	66 0f 3a 0f ec 07    	palignr $0x7,%xmm4,%xmm5
   165a6:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   165aa:	66 0f 3a 0f e3 07    	palignr $0x7,%xmm3,%xmm4
   165b0:	66 0f 3a 0f da 07    	palignr $0x7,%xmm2,%xmm3
   165b6:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   165ba:	66 0f 3a 0f d1 07    	palignr $0x7,%xmm1,%xmm2
   165c0:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   165c4:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   165c9:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   165cd:	72 0e                	jb     165dd <__intel_ssse3_memcpy+0xd9d>
   165cf:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   165d3:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   165d7:	3e 41 ff e1          	notrack jmpq *%r9
   165db:	0f 0b                	ud2    
   165dd:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   165e1:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   165e5:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   165e9:	48 01 d7             	add    %rdx,%rdi
   165ec:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   165f1:	48 01 d6             	add    %rdx,%rsi
   165f4:	4c 8d 1d 05 9c 01 00 	lea    0x19c05(%rip),%r11        # 30200 <__func__.2393+0x7>
   165fb:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   165ff:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16603:	3e ff e2             	notrack jmpq *%rdx
   16606:	0f 0b                	ud2    
   16608:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1660f:	00 
   16610:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16617:	48 39 ca             	cmp    %rcx,%rdx
   1661a:	0f 28 4e f9          	movaps -0x7(%rsi),%xmm1
   1661e:	72 07                	jb     16627 <__intel_ssse3_memcpy+0xde7>
   16620:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16627:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   1662b:	3e 41 ff e1          	notrack jmpq *%r9
   1662f:	0f 0b                	ud2    
   16631:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   16638:	0f 28 56 e9          	movaps -0x17(%rsi),%xmm2
   1663c:	48 83 ea 40          	sub    $0x40,%rdx
   16640:	0f 28 5e d9          	movaps -0x27(%rsi),%xmm3
   16644:	0f 28 66 c9          	movaps -0x37(%rsi),%xmm4
   16648:	0f 28 6e b9          	movaps -0x47(%rsi),%xmm5
   1664c:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   16650:	66 0f 3a 0f ca 07    	palignr $0x7,%xmm2,%xmm1
   16656:	66 0f 3a 0f d3 07    	palignr $0x7,%xmm3,%xmm2
   1665c:	66 0f 3a 0f dc 07    	palignr $0x7,%xmm4,%xmm3
   16662:	66 0f 3a 0f e5 07    	palignr $0x7,%xmm5,%xmm4
   16668:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   1666c:	0f 28 cd             	movaps %xmm5,%xmm1
   1666f:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   16673:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   16677:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   1667b:	72 09                	jb     16686 <__intel_ssse3_memcpy+0xe46>
   1667d:	0f 29 27             	movaps %xmm4,(%rdi)
   16680:	3e 41 ff e1          	notrack jmpq *%r9
   16684:	0f 0b                	ud2    
   16686:	0f 29 27             	movaps %xmm4,(%rdi)
   16689:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1668d:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16692:	4c 8d 1d 67 9b 01 00 	lea    0x19b67(%rip),%r11        # 30200 <__func__.2393+0x7>
   16699:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1669d:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   166a1:	3e ff e2             	notrack jmpq *%rdx
   166a4:	0f 0b                	ud2    
   166a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   166ad:	00 00 00 
   166b0:	4d 8d 89 26 00 00 00 	lea    0x26(%r9),%r9
   166b7:	48 39 ca             	cmp    %rcx,%rdx
   166ba:	0f 28 4e f8          	movaps -0x8(%rsi),%xmm1
   166be:	72 07                	jb     166c7 <__intel_ssse3_memcpy+0xe87>
   166c0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   166c7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   166cb:	3e 41 ff e1          	notrack jmpq *%r9
   166cf:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   166d6:	48 83 ea 40          	sub    $0x40,%rdx
   166da:	0f 28 56 08          	movaps 0x8(%rsi),%xmm2
   166de:	0f 28 5e 18          	movaps 0x18(%rsi),%xmm3
   166e2:	0f 28 66 28          	movaps 0x28(%rsi),%xmm4
   166e6:	0f 28 6e 38          	movaps 0x38(%rsi),%xmm5
   166ea:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   166ee:	66 0f 3a 0f ec 08    	palignr $0x8,%xmm4,%xmm5
   166f4:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   166f8:	66 0f 3a 0f e3 08    	palignr $0x8,%xmm3,%xmm4
   166fe:	66 0f 3a 0f da 08    	palignr $0x8,%xmm2,%xmm3
   16704:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   16708:	66 0f 3a 0f d1 08    	palignr $0x8,%xmm1,%xmm2
   1670e:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   16712:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   16717:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1671b:	72 13                	jb     16730 <__intel_ssse3_memcpy+0xef0>
   1671d:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16721:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16725:	3e 41 ff e1          	notrack jmpq *%r9
   16729:	0f 0b                	ud2    
   1672b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   16730:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16734:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16738:	48 01 d6             	add    %rdx,%rsi
   1673b:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   1673f:	48 01 d7             	add    %rdx,%rdi
   16742:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16747:	4c 8d 1d b2 9a 01 00 	lea    0x19ab2(%rip),%r11        # 30200 <__func__.2393+0x7>
   1674e:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   16752:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16756:	3e ff e2             	notrack jmpq *%rdx
   16759:	0f 0b                	ud2    
   1675b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   16760:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16767:	48 39 ca             	cmp    %rcx,%rdx
   1676a:	0f 28 4e f8          	movaps -0x8(%rsi),%xmm1
   1676e:	72 07                	jb     16777 <__intel_ssse3_memcpy+0xf37>
   16770:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16777:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   1677b:	3e 41 ff e1          	notrack jmpq *%r9
   1677f:	0f 0b                	ud2    
   16781:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   16788:	0f 28 56 e8          	movaps -0x18(%rsi),%xmm2
   1678c:	48 83 ea 40          	sub    $0x40,%rdx
   16790:	0f 28 5e d8          	movaps -0x28(%rsi),%xmm3
   16794:	0f 28 66 c8          	movaps -0x38(%rsi),%xmm4
   16798:	0f 28 6e b8          	movaps -0x48(%rsi),%xmm5
   1679c:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   167a0:	66 0f 3a 0f ca 08    	palignr $0x8,%xmm2,%xmm1
   167a6:	66 0f 3a 0f d3 08    	palignr $0x8,%xmm3,%xmm2
   167ac:	66 0f 3a 0f dc 08    	palignr $0x8,%xmm4,%xmm3
   167b2:	66 0f 3a 0f e5 08    	palignr $0x8,%xmm5,%xmm4
   167b8:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   167bc:	0f 28 cd             	movaps %xmm5,%xmm1
   167bf:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   167c3:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   167c7:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   167cb:	72 09                	jb     167d6 <__intel_ssse3_memcpy+0xf96>
   167cd:	0f 29 27             	movaps %xmm4,(%rdi)
   167d0:	3e 41 ff e1          	notrack jmpq *%r9
   167d4:	0f 0b                	ud2    
   167d6:	0f 29 27             	movaps %xmm4,(%rdi)
   167d9:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   167dd:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   167e2:	4c 8d 1d 17 9a 01 00 	lea    0x19a17(%rip),%r11        # 30200 <__func__.2393+0x7>
   167e9:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   167ed:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   167f1:	3e ff e2             	notrack jmpq *%rdx
   167f4:	0f 0b                	ud2    
   167f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   167fd:	00 00 00 
   16800:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16807:	48 39 ca             	cmp    %rcx,%rdx
   1680a:	0f 28 4e f7          	movaps -0x9(%rsi),%xmm1
   1680e:	72 07                	jb     16817 <__intel_ssse3_memcpy+0xfd7>
   16810:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16817:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   1681b:	3e 41 ff e1          	notrack jmpq *%r9
   1681f:	0f 0b                	ud2    
   16821:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   16828:	48 83 ea 40          	sub    $0x40,%rdx
   1682c:	0f 28 56 07          	movaps 0x7(%rsi),%xmm2
   16830:	0f 28 5e 17          	movaps 0x17(%rsi),%xmm3
   16834:	0f 28 66 27          	movaps 0x27(%rsi),%xmm4
   16838:	0f 28 6e 37          	movaps 0x37(%rsi),%xmm5
   1683c:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   16840:	66 0f 3a 0f ec 09    	palignr $0x9,%xmm4,%xmm5
   16846:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   1684a:	66 0f 3a 0f e3 09    	palignr $0x9,%xmm3,%xmm4
   16850:	66 0f 3a 0f da 09    	palignr $0x9,%xmm2,%xmm3
   16856:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   1685a:	66 0f 3a 0f d1 09    	palignr $0x9,%xmm1,%xmm2
   16860:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   16864:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   16869:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1686d:	72 0e                	jb     1687d <__intel_ssse3_memcpy+0x103d>
   1686f:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16873:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16877:	3e 41 ff e1          	notrack jmpq *%r9
   1687b:	0f 0b                	ud2    
   1687d:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16881:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16885:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16889:	48 01 d7             	add    %rdx,%rdi
   1688c:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16891:	48 01 d6             	add    %rdx,%rsi
   16894:	4c 8d 1d 65 99 01 00 	lea    0x19965(%rip),%r11        # 30200 <__func__.2393+0x7>
   1689b:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1689f:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   168a3:	3e ff e2             	notrack jmpq *%rdx
   168a6:	0f 0b                	ud2    
   168a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   168af:	00 
   168b0:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   168b7:	48 39 ca             	cmp    %rcx,%rdx
   168ba:	0f 28 4e f7          	movaps -0x9(%rsi),%xmm1
   168be:	72 07                	jb     168c7 <__intel_ssse3_memcpy+0x1087>
   168c0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   168c7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   168cb:	3e 41 ff e1          	notrack jmpq *%r9
   168cf:	0f 0b                	ud2    
   168d1:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   168d8:	0f 28 56 e7          	movaps -0x19(%rsi),%xmm2
   168dc:	48 83 ea 40          	sub    $0x40,%rdx
   168e0:	0f 28 5e d7          	movaps -0x29(%rsi),%xmm3
   168e4:	0f 28 66 c7          	movaps -0x39(%rsi),%xmm4
   168e8:	0f 28 6e b7          	movaps -0x49(%rsi),%xmm5
   168ec:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   168f0:	66 0f 3a 0f ca 09    	palignr $0x9,%xmm2,%xmm1
   168f6:	66 0f 3a 0f d3 09    	palignr $0x9,%xmm3,%xmm2
   168fc:	66 0f 3a 0f dc 09    	palignr $0x9,%xmm4,%xmm3
   16902:	66 0f 3a 0f e5 09    	palignr $0x9,%xmm5,%xmm4
   16908:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   1690c:	0f 28 cd             	movaps %xmm5,%xmm1
   1690f:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   16913:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   16917:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   1691b:	72 09                	jb     16926 <__intel_ssse3_memcpy+0x10e6>
   1691d:	0f 29 27             	movaps %xmm4,(%rdi)
   16920:	3e 41 ff e1          	notrack jmpq *%r9
   16924:	0f 0b                	ud2    
   16926:	0f 29 27             	movaps %xmm4,(%rdi)
   16929:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1692d:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16932:	4c 8d 1d c7 98 01 00 	lea    0x198c7(%rip),%r11        # 30200 <__func__.2393+0x7>
   16939:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1693d:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16941:	3e ff e2             	notrack jmpq *%rdx
   16944:	0f 0b                	ud2    
   16946:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1694d:	00 00 00 
   16950:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16957:	48 39 ca             	cmp    %rcx,%rdx
   1695a:	0f 28 4e f6          	movaps -0xa(%rsi),%xmm1
   1695e:	72 07                	jb     16967 <__intel_ssse3_memcpy+0x1127>
   16960:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16967:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   1696b:	3e 41 ff e1          	notrack jmpq *%r9
   1696f:	0f 0b                	ud2    
   16971:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   16978:	48 83 ea 40          	sub    $0x40,%rdx
   1697c:	0f 28 56 06          	movaps 0x6(%rsi),%xmm2
   16980:	0f 28 5e 16          	movaps 0x16(%rsi),%xmm3
   16984:	0f 28 66 26          	movaps 0x26(%rsi),%xmm4
   16988:	0f 28 6e 36          	movaps 0x36(%rsi),%xmm5
   1698c:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   16990:	66 0f 3a 0f ec 0a    	palignr $0xa,%xmm4,%xmm5
   16996:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   1699a:	66 0f 3a 0f e3 0a    	palignr $0xa,%xmm3,%xmm4
   169a0:	66 0f 3a 0f da 0a    	palignr $0xa,%xmm2,%xmm3
   169a6:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   169aa:	66 0f 3a 0f d1 0a    	palignr $0xa,%xmm1,%xmm2
   169b0:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   169b4:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   169b9:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   169bd:	72 0e                	jb     169cd <__intel_ssse3_memcpy+0x118d>
   169bf:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   169c3:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   169c7:	3e 41 ff e1          	notrack jmpq *%r9
   169cb:	0f 0b                	ud2    
   169cd:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   169d1:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   169d5:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   169d9:	48 01 d7             	add    %rdx,%rdi
   169dc:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   169e1:	48 01 d6             	add    %rdx,%rsi
   169e4:	4c 8d 1d 15 98 01 00 	lea    0x19815(%rip),%r11        # 30200 <__func__.2393+0x7>
   169eb:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   169ef:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   169f3:	3e ff e2             	notrack jmpq *%rdx
   169f6:	0f 0b                	ud2    
   169f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   169ff:	00 
   16a00:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16a07:	48 39 ca             	cmp    %rcx,%rdx
   16a0a:	0f 28 4e f6          	movaps -0xa(%rsi),%xmm1
   16a0e:	72 07                	jb     16a17 <__intel_ssse3_memcpy+0x11d7>
   16a10:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16a17:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   16a1b:	3e 41 ff e1          	notrack jmpq *%r9
   16a1f:	0f 0b                	ud2    
   16a21:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   16a28:	0f 28 56 e6          	movaps -0x1a(%rsi),%xmm2
   16a2c:	48 83 ea 40          	sub    $0x40,%rdx
   16a30:	0f 28 5e d6          	movaps -0x2a(%rsi),%xmm3
   16a34:	0f 28 66 c6          	movaps -0x3a(%rsi),%xmm4
   16a38:	0f 28 6e b6          	movaps -0x4a(%rsi),%xmm5
   16a3c:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   16a40:	66 0f 3a 0f ca 0a    	palignr $0xa,%xmm2,%xmm1
   16a46:	66 0f 3a 0f d3 0a    	palignr $0xa,%xmm3,%xmm2
   16a4c:	66 0f 3a 0f dc 0a    	palignr $0xa,%xmm4,%xmm3
   16a52:	66 0f 3a 0f e5 0a    	palignr $0xa,%xmm5,%xmm4
   16a58:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   16a5c:	0f 28 cd             	movaps %xmm5,%xmm1
   16a5f:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   16a63:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   16a67:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   16a6b:	72 09                	jb     16a76 <__intel_ssse3_memcpy+0x1236>
   16a6d:	0f 29 27             	movaps %xmm4,(%rdi)
   16a70:	3e 41 ff e1          	notrack jmpq *%r9
   16a74:	0f 0b                	ud2    
   16a76:	0f 29 27             	movaps %xmm4,(%rdi)
   16a79:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16a7d:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16a82:	4c 8d 1d 77 97 01 00 	lea    0x19777(%rip),%r11        # 30200 <__func__.2393+0x7>
   16a89:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   16a8d:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16a91:	3e ff e2             	notrack jmpq *%rdx
   16a94:	0f 0b                	ud2    
   16a96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   16a9d:	00 00 00 
   16aa0:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16aa7:	48 39 ca             	cmp    %rcx,%rdx
   16aaa:	0f 28 4e f5          	movaps -0xb(%rsi),%xmm1
   16aae:	72 07                	jb     16ab7 <__intel_ssse3_memcpy+0x1277>
   16ab0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16ab7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   16abb:	3e 41 ff e1          	notrack jmpq *%r9
   16abf:	0f 0b                	ud2    
   16ac1:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   16ac8:	48 83 ea 40          	sub    $0x40,%rdx
   16acc:	0f 28 56 05          	movaps 0x5(%rsi),%xmm2
   16ad0:	0f 28 5e 15          	movaps 0x15(%rsi),%xmm3
   16ad4:	0f 28 66 25          	movaps 0x25(%rsi),%xmm4
   16ad8:	0f 28 6e 35          	movaps 0x35(%rsi),%xmm5
   16adc:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   16ae0:	66 0f 3a 0f ec 0b    	palignr $0xb,%xmm4,%xmm5
   16ae6:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   16aea:	66 0f 3a 0f e3 0b    	palignr $0xb,%xmm3,%xmm4
   16af0:	66 0f 3a 0f da 0b    	palignr $0xb,%xmm2,%xmm3
   16af6:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   16afa:	66 0f 3a 0f d1 0b    	palignr $0xb,%xmm1,%xmm2
   16b00:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   16b04:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   16b09:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   16b0d:	72 0e                	jb     16b1d <__intel_ssse3_memcpy+0x12dd>
   16b0f:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16b13:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16b17:	3e 41 ff e1          	notrack jmpq *%r9
   16b1b:	0f 0b                	ud2    
   16b1d:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16b21:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16b25:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16b29:	48 01 d7             	add    %rdx,%rdi
   16b2c:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16b31:	48 01 d6             	add    %rdx,%rsi
   16b34:	4c 8d 1d c5 96 01 00 	lea    0x196c5(%rip),%r11        # 30200 <__func__.2393+0x7>
   16b3b:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   16b3f:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16b43:	3e ff e2             	notrack jmpq *%rdx
   16b46:	0f 0b                	ud2    
   16b48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   16b4f:	00 
   16b50:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16b57:	48 39 ca             	cmp    %rcx,%rdx
   16b5a:	0f 28 4e f5          	movaps -0xb(%rsi),%xmm1
   16b5e:	72 07                	jb     16b67 <__intel_ssse3_memcpy+0x1327>
   16b60:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16b67:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   16b6b:	3e 41 ff e1          	notrack jmpq *%r9
   16b6f:	0f 0b                	ud2    
   16b71:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   16b78:	0f 28 56 e5          	movaps -0x1b(%rsi),%xmm2
   16b7c:	48 83 ea 40          	sub    $0x40,%rdx
   16b80:	0f 28 5e d5          	movaps -0x2b(%rsi),%xmm3
   16b84:	0f 28 66 c5          	movaps -0x3b(%rsi),%xmm4
   16b88:	0f 28 6e b5          	movaps -0x4b(%rsi),%xmm5
   16b8c:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   16b90:	66 0f 3a 0f ca 0b    	palignr $0xb,%xmm2,%xmm1
   16b96:	66 0f 3a 0f d3 0b    	palignr $0xb,%xmm3,%xmm2
   16b9c:	66 0f 3a 0f dc 0b    	palignr $0xb,%xmm4,%xmm3
   16ba2:	66 0f 3a 0f e5 0b    	palignr $0xb,%xmm5,%xmm4
   16ba8:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   16bac:	0f 28 cd             	movaps %xmm5,%xmm1
   16baf:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   16bb3:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   16bb7:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   16bbb:	72 09                	jb     16bc6 <__intel_ssse3_memcpy+0x1386>
   16bbd:	0f 29 27             	movaps %xmm4,(%rdi)
   16bc0:	3e 41 ff e1          	notrack jmpq *%r9
   16bc4:	0f 0b                	ud2    
   16bc6:	0f 29 27             	movaps %xmm4,(%rdi)
   16bc9:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16bcd:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16bd2:	4c 8d 1d 27 96 01 00 	lea    0x19627(%rip),%r11        # 30200 <__func__.2393+0x7>
   16bd9:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   16bdd:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16be1:	3e ff e2             	notrack jmpq *%rdx
   16be4:	0f 0b                	ud2    
   16be6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   16bed:	00 00 00 
   16bf0:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16bf7:	48 39 ca             	cmp    %rcx,%rdx
   16bfa:	0f 28 4e f4          	movaps -0xc(%rsi),%xmm1
   16bfe:	72 07                	jb     16c07 <__intel_ssse3_memcpy+0x13c7>
   16c00:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16c07:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   16c0b:	3e 41 ff e1          	notrack jmpq *%r9
   16c0f:	0f 0b                	ud2    
   16c11:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   16c18:	48 83 ea 40          	sub    $0x40,%rdx
   16c1c:	0f 28 56 04          	movaps 0x4(%rsi),%xmm2
   16c20:	0f 28 5e 14          	movaps 0x14(%rsi),%xmm3
   16c24:	0f 28 66 24          	movaps 0x24(%rsi),%xmm4
   16c28:	0f 28 6e 34          	movaps 0x34(%rsi),%xmm5
   16c2c:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   16c30:	66 0f 3a 0f ec 0c    	palignr $0xc,%xmm4,%xmm5
   16c36:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   16c3a:	66 0f 3a 0f e3 0c    	palignr $0xc,%xmm3,%xmm4
   16c40:	66 0f 3a 0f da 0c    	palignr $0xc,%xmm2,%xmm3
   16c46:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   16c4a:	66 0f 3a 0f d1 0c    	palignr $0xc,%xmm1,%xmm2
   16c50:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   16c54:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   16c59:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   16c5d:	72 0e                	jb     16c6d <__intel_ssse3_memcpy+0x142d>
   16c5f:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16c63:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16c67:	3e 41 ff e1          	notrack jmpq *%r9
   16c6b:	0f 0b                	ud2    
   16c6d:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16c71:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16c75:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16c79:	48 01 d7             	add    %rdx,%rdi
   16c7c:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16c81:	48 01 d6             	add    %rdx,%rsi
   16c84:	4c 8d 1d 75 95 01 00 	lea    0x19575(%rip),%r11        # 30200 <__func__.2393+0x7>
   16c8b:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   16c8f:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16c93:	3e ff e2             	notrack jmpq *%rdx
   16c96:	0f 0b                	ud2    
   16c98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   16c9f:	00 
   16ca0:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16ca7:	48 39 ca             	cmp    %rcx,%rdx
   16caa:	0f 28 4e f4          	movaps -0xc(%rsi),%xmm1
   16cae:	72 07                	jb     16cb7 <__intel_ssse3_memcpy+0x1477>
   16cb0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16cb7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   16cbb:	3e 41 ff e1          	notrack jmpq *%r9
   16cbf:	0f 0b                	ud2    
   16cc1:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   16cc8:	0f 28 56 e4          	movaps -0x1c(%rsi),%xmm2
   16ccc:	48 83 ea 40          	sub    $0x40,%rdx
   16cd0:	0f 28 5e d4          	movaps -0x2c(%rsi),%xmm3
   16cd4:	0f 28 66 c4          	movaps -0x3c(%rsi),%xmm4
   16cd8:	0f 28 6e b4          	movaps -0x4c(%rsi),%xmm5
   16cdc:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   16ce0:	66 0f 3a 0f ca 0c    	palignr $0xc,%xmm2,%xmm1
   16ce6:	66 0f 3a 0f d3 0c    	palignr $0xc,%xmm3,%xmm2
   16cec:	66 0f 3a 0f dc 0c    	palignr $0xc,%xmm4,%xmm3
   16cf2:	66 0f 3a 0f e5 0c    	palignr $0xc,%xmm5,%xmm4
   16cf8:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   16cfc:	0f 28 cd             	movaps %xmm5,%xmm1
   16cff:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   16d03:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   16d07:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   16d0b:	72 09                	jb     16d16 <__intel_ssse3_memcpy+0x14d6>
   16d0d:	0f 29 27             	movaps %xmm4,(%rdi)
   16d10:	3e 41 ff e1          	notrack jmpq *%r9
   16d14:	0f 0b                	ud2    
   16d16:	0f 29 27             	movaps %xmm4,(%rdi)
   16d19:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16d1d:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16d22:	4c 8d 1d d7 94 01 00 	lea    0x194d7(%rip),%r11        # 30200 <__func__.2393+0x7>
   16d29:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   16d2d:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16d31:	3e ff e2             	notrack jmpq *%rdx
   16d34:	0f 0b                	ud2    
   16d36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   16d3d:	00 00 00 
   16d40:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16d47:	48 39 ca             	cmp    %rcx,%rdx
   16d4a:	0f 28 4e f3          	movaps -0xd(%rsi),%xmm1
   16d4e:	72 07                	jb     16d57 <__intel_ssse3_memcpy+0x1517>
   16d50:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16d57:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   16d5b:	3e 41 ff e1          	notrack jmpq *%r9
   16d5f:	0f 0b                	ud2    
   16d61:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   16d68:	48 83 ea 40          	sub    $0x40,%rdx
   16d6c:	0f 28 56 03          	movaps 0x3(%rsi),%xmm2
   16d70:	0f 28 5e 13          	movaps 0x13(%rsi),%xmm3
   16d74:	0f 28 66 23          	movaps 0x23(%rsi),%xmm4
   16d78:	0f 28 6e 33          	movaps 0x33(%rsi),%xmm5
   16d7c:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   16d80:	66 0f 3a 0f ec 0d    	palignr $0xd,%xmm4,%xmm5
   16d86:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   16d8a:	66 0f 3a 0f e3 0d    	palignr $0xd,%xmm3,%xmm4
   16d90:	66 0f 3a 0f da 0d    	palignr $0xd,%xmm2,%xmm3
   16d96:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   16d9a:	66 0f 3a 0f d1 0d    	palignr $0xd,%xmm1,%xmm2
   16da0:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   16da4:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   16da9:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   16dad:	72 0e                	jb     16dbd <__intel_ssse3_memcpy+0x157d>
   16daf:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16db3:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16db7:	3e 41 ff e1          	notrack jmpq *%r9
   16dbb:	0f 0b                	ud2    
   16dbd:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16dc1:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16dc5:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16dc9:	48 01 d7             	add    %rdx,%rdi
   16dcc:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16dd1:	48 01 d6             	add    %rdx,%rsi
   16dd4:	4c 8d 1d 25 94 01 00 	lea    0x19425(%rip),%r11        # 30200 <__func__.2393+0x7>
   16ddb:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   16ddf:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16de3:	3e ff e2             	notrack jmpq *%rdx
   16de6:	0f 0b                	ud2    
   16de8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   16def:	00 
   16df0:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16df7:	48 39 ca             	cmp    %rcx,%rdx
   16dfa:	0f 28 4e f3          	movaps -0xd(%rsi),%xmm1
   16dfe:	72 07                	jb     16e07 <__intel_ssse3_memcpy+0x15c7>
   16e00:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16e07:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   16e0b:	3e 41 ff e1          	notrack jmpq *%r9
   16e0f:	0f 0b                	ud2    
   16e11:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   16e18:	0f 28 56 e3          	movaps -0x1d(%rsi),%xmm2
   16e1c:	48 83 ea 40          	sub    $0x40,%rdx
   16e20:	0f 28 5e d3          	movaps -0x2d(%rsi),%xmm3
   16e24:	0f 28 66 c3          	movaps -0x3d(%rsi),%xmm4
   16e28:	0f 28 6e b3          	movaps -0x4d(%rsi),%xmm5
   16e2c:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   16e30:	66 0f 3a 0f ca 0d    	palignr $0xd,%xmm2,%xmm1
   16e36:	66 0f 3a 0f d3 0d    	palignr $0xd,%xmm3,%xmm2
   16e3c:	66 0f 3a 0f dc 0d    	palignr $0xd,%xmm4,%xmm3
   16e42:	66 0f 3a 0f e5 0d    	palignr $0xd,%xmm5,%xmm4
   16e48:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   16e4c:	0f 28 cd             	movaps %xmm5,%xmm1
   16e4f:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   16e53:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   16e57:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   16e5b:	72 09                	jb     16e66 <__intel_ssse3_memcpy+0x1626>
   16e5d:	0f 29 27             	movaps %xmm4,(%rdi)
   16e60:	3e 41 ff e1          	notrack jmpq *%r9
   16e64:	0f 0b                	ud2    
   16e66:	0f 29 27             	movaps %xmm4,(%rdi)
   16e69:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16e6d:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16e72:	4c 8d 1d 87 93 01 00 	lea    0x19387(%rip),%r11        # 30200 <__func__.2393+0x7>
   16e79:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   16e7d:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16e81:	3e ff e2             	notrack jmpq *%rdx
   16e84:	0f 0b                	ud2    
   16e86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   16e8d:	00 00 00 
   16e90:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16e97:	48 39 ca             	cmp    %rcx,%rdx
   16e9a:	0f 28 4e f2          	movaps -0xe(%rsi),%xmm1
   16e9e:	72 07                	jb     16ea7 <__intel_ssse3_memcpy+0x1667>
   16ea0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16ea7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   16eab:	3e 41 ff e1          	notrack jmpq *%r9
   16eaf:	0f 0b                	ud2    
   16eb1:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   16eb8:	48 83 ea 40          	sub    $0x40,%rdx
   16ebc:	0f 28 56 02          	movaps 0x2(%rsi),%xmm2
   16ec0:	0f 28 5e 12          	movaps 0x12(%rsi),%xmm3
   16ec4:	0f 28 66 22          	movaps 0x22(%rsi),%xmm4
   16ec8:	0f 28 6e 32          	movaps 0x32(%rsi),%xmm5
   16ecc:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   16ed0:	66 0f 3a 0f ec 0e    	palignr $0xe,%xmm4,%xmm5
   16ed6:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   16eda:	66 0f 3a 0f e3 0e    	palignr $0xe,%xmm3,%xmm4
   16ee0:	66 0f 3a 0f da 0e    	palignr $0xe,%xmm2,%xmm3
   16ee6:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   16eea:	66 0f 3a 0f d1 0e    	palignr $0xe,%xmm1,%xmm2
   16ef0:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   16ef4:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   16ef9:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   16efd:	72 0e                	jb     16f0d <__intel_ssse3_memcpy+0x16cd>
   16eff:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16f03:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16f07:	3e 41 ff e1          	notrack jmpq *%r9
   16f0b:	0f 0b                	ud2    
   16f0d:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   16f11:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16f15:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   16f19:	48 01 d7             	add    %rdx,%rdi
   16f1c:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16f21:	48 01 d6             	add    %rdx,%rsi
   16f24:	4c 8d 1d d5 92 01 00 	lea    0x192d5(%rip),%r11        # 30200 <__func__.2393+0x7>
   16f2b:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   16f2f:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16f33:	3e ff e2             	notrack jmpq *%rdx
   16f36:	0f 0b                	ud2    
   16f38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   16f3f:	00 
   16f40:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16f47:	48 39 ca             	cmp    %rcx,%rdx
   16f4a:	0f 28 4e f2          	movaps -0xe(%rsi),%xmm1
   16f4e:	72 07                	jb     16f57 <__intel_ssse3_memcpy+0x1717>
   16f50:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16f57:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   16f5b:	3e 41 ff e1          	notrack jmpq *%r9
   16f5f:	0f 0b                	ud2    
   16f61:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   16f68:	0f 28 56 e2          	movaps -0x1e(%rsi),%xmm2
   16f6c:	48 83 ea 40          	sub    $0x40,%rdx
   16f70:	0f 28 5e d2          	movaps -0x2e(%rsi),%xmm3
   16f74:	0f 28 66 c2          	movaps -0x3e(%rsi),%xmm4
   16f78:	0f 28 6e b2          	movaps -0x4e(%rsi),%xmm5
   16f7c:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   16f80:	66 0f 3a 0f ca 0e    	palignr $0xe,%xmm2,%xmm1
   16f86:	66 0f 3a 0f d3 0e    	palignr $0xe,%xmm3,%xmm2
   16f8c:	66 0f 3a 0f dc 0e    	palignr $0xe,%xmm4,%xmm3
   16f92:	66 0f 3a 0f e5 0e    	palignr $0xe,%xmm5,%xmm4
   16f98:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   16f9c:	0f 28 cd             	movaps %xmm5,%xmm1
   16f9f:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   16fa3:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   16fa7:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   16fab:	72 09                	jb     16fb6 <__intel_ssse3_memcpy+0x1776>
   16fad:	0f 29 27             	movaps %xmm4,(%rdi)
   16fb0:	3e 41 ff e1          	notrack jmpq *%r9
   16fb4:	0f 0b                	ud2    
   16fb6:	0f 29 27             	movaps %xmm4,(%rdi)
   16fb9:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   16fbd:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   16fc2:	4c 8d 1d 37 92 01 00 	lea    0x19237(%rip),%r11        # 30200 <__func__.2393+0x7>
   16fc9:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   16fcd:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   16fd1:	3e ff e2             	notrack jmpq *%rdx
   16fd4:	0f 0b                	ud2    
   16fd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   16fdd:	00 00 00 
   16fe0:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   16fe7:	48 39 ca             	cmp    %rcx,%rdx
   16fea:	0f 28 4e f1          	movaps -0xf(%rsi),%xmm1
   16fee:	72 07                	jb     16ff7 <__intel_ssse3_memcpy+0x17b7>
   16ff0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   16ff7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   16ffb:	3e 41 ff e1          	notrack jmpq *%r9
   16fff:	0f 0b                	ud2    
   17001:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   17008:	48 83 ea 40          	sub    $0x40,%rdx
   1700c:	0f 28 56 01          	movaps 0x1(%rsi),%xmm2
   17010:	0f 28 5e 11          	movaps 0x11(%rsi),%xmm3
   17014:	0f 28 66 21          	movaps 0x21(%rsi),%xmm4
   17018:	0f 28 6e 31          	movaps 0x31(%rsi),%xmm5
   1701c:	66 0f 6f f5          	movdqa %xmm5,%xmm6
   17020:	66 0f 3a 0f ec 0f    	palignr $0xf,%xmm4,%xmm5
   17026:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   1702a:	66 0f 3a 0f e3 0f    	palignr $0xf,%xmm3,%xmm4
   17030:	66 0f 3a 0f da 0f    	palignr $0xf,%xmm2,%xmm3
   17036:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   1703a:	66 0f 3a 0f d1 0f    	palignr $0xf,%xmm1,%xmm2
   17040:	66 0f 6f ce          	movdqa %xmm6,%xmm1
   17044:	66 0f 7f 57 c0       	movdqa %xmm2,-0x40(%rdi)
   17049:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1704d:	72 0e                	jb     1705d <__intel_ssse3_memcpy+0x181d>
   1704f:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   17053:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   17057:	3e 41 ff e1          	notrack jmpq *%r9
   1705b:	0f 0b                	ud2    
   1705d:	0f 29 67 e0          	movaps %xmm4,-0x20(%rdi)
   17061:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   17065:	0f 29 6f f0          	movaps %xmm5,-0x10(%rdi)
   17069:	48 01 d7             	add    %rdx,%rdi
   1706c:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   17071:	48 01 d6             	add    %rdx,%rsi
   17074:	4c 8d 1d 85 91 01 00 	lea    0x19185(%rip),%r11        # 30200 <__func__.2393+0x7>
   1707b:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1707f:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   17083:	3e ff e2             	notrack jmpq *%rdx
   17086:	0f 0b                	ud2    
   17088:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1708f:	00 
   17090:	4d 8d 89 28 00 00 00 	lea    0x28(%r9),%r9
   17097:	48 39 ca             	cmp    %rcx,%rdx
   1709a:	0f 28 4e f1          	movaps -0xf(%rsi),%xmm1
   1709e:	72 07                	jb     170a7 <__intel_ssse3_memcpy+0x1867>
   170a0:	4d 8d 89 f9 ff ff ff 	lea    -0x7(%r9),%r9
   170a7:	48 8d 52 c0          	lea    -0x40(%rdx),%rdx
   170ab:	3e 41 ff e1          	notrack jmpq *%r9
   170af:	0f 0b                	ud2    
   170b1:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   170b8:	0f 28 56 e1          	movaps -0x1f(%rsi),%xmm2
   170bc:	48 83 ea 40          	sub    $0x40,%rdx
   170c0:	0f 28 5e d1          	movaps -0x2f(%rsi),%xmm3
   170c4:	0f 28 66 c1          	movaps -0x3f(%rsi),%xmm4
   170c8:	0f 28 6e b1          	movaps -0x4f(%rsi),%xmm5
   170cc:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   170d0:	66 0f 3a 0f ca 0f    	palignr $0xf,%xmm2,%xmm1
   170d6:	66 0f 3a 0f d3 0f    	palignr $0xf,%xmm3,%xmm2
   170dc:	66 0f 3a 0f dc 0f    	palignr $0xf,%xmm4,%xmm3
   170e2:	66 0f 3a 0f e5 0f    	palignr $0xf,%xmm5,%xmm4
   170e8:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   170ec:	0f 28 cd             	movaps %xmm5,%xmm1
   170ef:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   170f3:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   170f7:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   170fb:	72 09                	jb     17106 <__intel_ssse3_memcpy+0x18c6>
   170fd:	0f 29 27             	movaps %xmm4,(%rdi)
   17100:	3e 41 ff e1          	notrack jmpq *%r9
   17104:	0f 0b                	ud2    
   17106:	0f 29 27             	movaps %xmm4,(%rdi)
   17109:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1710d:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   17112:	4c 8d 1d e7 90 01 00 	lea    0x190e7(%rip),%r11        # 30200 <__func__.2393+0x7>
   17119:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1711d:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   17121:	3e ff e2             	notrack jmpq *%rdx
   17124:	0f 0b                	ud2    
   17126:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1712d:	00 00 00 
   17130:	f3 0f 6f 46 b8       	movdqu -0x48(%rsi),%xmm0
   17135:	f3 0f 6f 4e c8       	movdqu -0x38(%rsi),%xmm1
   1713a:	4c 8b 46 d8          	mov    -0x28(%rsi),%r8
   1713e:	4c 8b 4e e0          	mov    -0x20(%rsi),%r9
   17142:	4c 8b 56 e8          	mov    -0x18(%rsi),%r10
   17146:	4c 8b 5e f0          	mov    -0x10(%rsi),%r11
   1714a:	48 8b 4e f8          	mov    -0x8(%rsi),%rcx
   1714e:	f3 0f 7f 47 b8       	movdqu %xmm0,-0x48(%rdi)
   17153:	f3 0f 7f 4f c8       	movdqu %xmm1,-0x38(%rdi)
   17158:	4c 89 47 d8          	mov    %r8,-0x28(%rdi)
   1715c:	4c 89 4f e0          	mov    %r9,-0x20(%rdi)
   17160:	4c 89 57 e8          	mov    %r10,-0x18(%rdi)
   17164:	4c 89 5f f0          	mov    %r11,-0x10(%rdi)
   17168:	48 89 4f f8          	mov    %rcx,-0x8(%rdi)
   1716c:	c3                   	retq   
   1716d:	0f 1f 00             	nopl   (%rax)
   17170:	f3 0f 6f 46 c0       	movdqu -0x40(%rsi),%xmm0
   17175:	48 8b 4e d0          	mov    -0x30(%rsi),%rcx
   17179:	4c 8b 46 d8          	mov    -0x28(%rsi),%r8
   1717d:	4c 8b 4e e0          	mov    -0x20(%rsi),%r9
   17181:	4c 8b 56 e8          	mov    -0x18(%rsi),%r10
   17185:	4c 8b 5e f0          	mov    -0x10(%rsi),%r11
   17189:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   1718d:	f3 0f 7f 47 c0       	movdqu %xmm0,-0x40(%rdi)
   17192:	48 89 4f d0          	mov    %rcx,-0x30(%rdi)
   17196:	4c 89 47 d8          	mov    %r8,-0x28(%rdi)
   1719a:	4c 89 4f e0          	mov    %r9,-0x20(%rdi)
   1719e:	4c 89 57 e8          	mov    %r10,-0x18(%rdi)
   171a2:	4c 89 5f f0          	mov    %r11,-0x10(%rdi)
   171a6:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   171aa:	c3                   	retq   
   171ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   171b0:	f3 0f 6f 46 c8       	movdqu -0x38(%rsi),%xmm0
   171b5:	4c 8b 46 d8          	mov    -0x28(%rsi),%r8
   171b9:	4c 8b 4e e0          	mov    -0x20(%rsi),%r9
   171bd:	4c 8b 56 e8          	mov    -0x18(%rsi),%r10
   171c1:	4c 8b 5e f0          	mov    -0x10(%rsi),%r11
   171c5:	48 8b 4e f8          	mov    -0x8(%rsi),%rcx
   171c9:	f3 0f 7f 47 c8       	movdqu %xmm0,-0x38(%rdi)
   171ce:	4c 89 47 d8          	mov    %r8,-0x28(%rdi)
   171d2:	4c 89 4f e0          	mov    %r9,-0x20(%rdi)
   171d6:	4c 89 57 e8          	mov    %r10,-0x18(%rdi)
   171da:	4c 89 5f f0          	mov    %r11,-0x10(%rdi)
   171de:	48 89 4f f8          	mov    %rcx,-0x8(%rdi)
   171e2:	c3                   	retq   
   171e3:	0f 1f 00             	nopl   (%rax)
   171e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   171ed:	00 00 00 
   171f0:	48 8b 4e d0          	mov    -0x30(%rsi),%rcx
   171f4:	4c 8b 46 d8          	mov    -0x28(%rsi),%r8
   171f8:	4c 8b 4e e0          	mov    -0x20(%rsi),%r9
   171fc:	4c 8b 56 e8          	mov    -0x18(%rsi),%r10
   17200:	4c 8b 5e f0          	mov    -0x10(%rsi),%r11
   17204:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17208:	48 89 4f d0          	mov    %rcx,-0x30(%rdi)
   1720c:	4c 89 47 d8          	mov    %r8,-0x28(%rdi)
   17210:	4c 89 4f e0          	mov    %r9,-0x20(%rdi)
   17214:	4c 89 57 e8          	mov    %r10,-0x18(%rdi)
   17218:	4c 89 5f f0          	mov    %r11,-0x10(%rdi)
   1721c:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17220:	c3                   	retq   
   17221:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17226:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1722d:	00 00 00 
   17230:	4c 8b 46 d8          	mov    -0x28(%rsi),%r8
   17234:	4c 8b 4e e0          	mov    -0x20(%rsi),%r9
   17238:	4c 8b 56 e8          	mov    -0x18(%rsi),%r10
   1723c:	4c 8b 5e f0          	mov    -0x10(%rsi),%r11
   17240:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17244:	4c 89 47 d8          	mov    %r8,-0x28(%rdi)
   17248:	4c 89 4f e0          	mov    %r9,-0x20(%rdi)
   1724c:	4c 89 57 e8          	mov    %r10,-0x18(%rdi)
   17250:	4c 89 5f f0          	mov    %r11,-0x10(%rdi)
   17254:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17258:	c3                   	retq   
   17259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   17260:	4c 8b 4e e0          	mov    -0x20(%rsi),%r9
   17264:	4c 8b 56 e8          	mov    -0x18(%rsi),%r10
   17268:	4c 8b 5e f0          	mov    -0x10(%rsi),%r11
   1726c:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17270:	4c 89 4f e0          	mov    %r9,-0x20(%rdi)
   17274:	4c 89 57 e8          	mov    %r10,-0x18(%rdi)
   17278:	4c 89 5f f0          	mov    %r11,-0x10(%rdi)
   1727c:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17280:	c3                   	retq   
   17281:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1728d:	00 00 00 
   17290:	4c 8b 56 e8          	mov    -0x18(%rsi),%r10
   17294:	4c 8b 5e f0          	mov    -0x10(%rsi),%r11
   17298:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   1729c:	4c 89 57 e8          	mov    %r10,-0x18(%rdi)
   172a0:	4c 89 5f f0          	mov    %r11,-0x10(%rdi)
   172a4:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   172a8:	c3                   	retq   
   172a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   172b0:	4c 8b 5e f0          	mov    -0x10(%rsi),%r11
   172b4:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   172b8:	4c 89 5f f0          	mov    %r11,-0x10(%rdi)
   172bc:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   172c0:	c3                   	retq   
   172c1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   172c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   172cd:	00 00 00 
   172d0:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   172d4:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   172d8:	c3                   	retq   
   172d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   172e0:	f3 0f 6f 46 b7       	movdqu -0x49(%rsi),%xmm0
   172e5:	f3 0f 6f 4e c7       	movdqu -0x39(%rsi),%xmm1
   172ea:	48 8b 4e d7          	mov    -0x29(%rsi),%rcx
   172ee:	4c 8b 4e df          	mov    -0x21(%rsi),%r9
   172f2:	4c 8b 56 e7          	mov    -0x19(%rsi),%r10
   172f6:	4c 8b 5e ef          	mov    -0x11(%rsi),%r11
   172fa:	4c 8b 46 f7          	mov    -0x9(%rsi),%r8
   172fe:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17301:	f3 0f 7f 47 b7       	movdqu %xmm0,-0x49(%rdi)
   17306:	f3 0f 7f 4f c7       	movdqu %xmm1,-0x39(%rdi)
   1730b:	48 89 4f d7          	mov    %rcx,-0x29(%rdi)
   1730f:	4c 89 4f df          	mov    %r9,-0x21(%rdi)
   17313:	4c 89 57 e7          	mov    %r10,-0x19(%rdi)
   17317:	4c 89 5f ef          	mov    %r11,-0x11(%rdi)
   1731b:	4c 89 47 f7          	mov    %r8,-0x9(%rdi)
   1731f:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17322:	c3                   	retq   
   17323:	0f 1f 00             	nopl   (%rax)
   17326:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1732d:	00 00 00 
   17330:	f3 0f 6f 46 bf       	movdqu -0x41(%rsi),%xmm0
   17335:	f3 0f 6f 4e cf       	movdqu -0x31(%rsi),%xmm1
   1733a:	4c 8b 4e df          	mov    -0x21(%rsi),%r9
   1733e:	4c 8b 56 e7          	mov    -0x19(%rsi),%r10
   17342:	4c 8b 5e ef          	mov    -0x11(%rsi),%r11
   17346:	48 8b 4e f7          	mov    -0x9(%rsi),%rcx
   1734a:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1734d:	f3 0f 7f 47 bf       	movdqu %xmm0,-0x41(%rdi)
   17352:	f3 0f 7f 4f cf       	movdqu %xmm1,-0x31(%rdi)
   17357:	4c 89 4f df          	mov    %r9,-0x21(%rdi)
   1735b:	4c 89 57 e7          	mov    %r10,-0x19(%rdi)
   1735f:	4c 89 5f ef          	mov    %r11,-0x11(%rdi)
   17363:	48 89 4f f7          	mov    %rcx,-0x9(%rdi)
   17367:	89 57 fc             	mov    %edx,-0x4(%rdi)
   1736a:	c3                   	retq   
   1736b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17370:	f3 0f 6f 46 c7       	movdqu -0x39(%rsi),%xmm0
   17375:	4c 8b 46 d7          	mov    -0x29(%rsi),%r8
   17379:	4c 8b 4e df          	mov    -0x21(%rsi),%r9
   1737d:	4c 8b 56 e7          	mov    -0x19(%rsi),%r10
   17381:	4c 8b 5e ef          	mov    -0x11(%rsi),%r11
   17385:	48 8b 4e f7          	mov    -0x9(%rsi),%rcx
   17389:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1738c:	f3 0f 7f 47 c7       	movdqu %xmm0,-0x39(%rdi)
   17391:	4c 89 47 d7          	mov    %r8,-0x29(%rdi)
   17395:	4c 89 4f df          	mov    %r9,-0x21(%rdi)
   17399:	4c 89 57 e7          	mov    %r10,-0x19(%rdi)
   1739d:	4c 89 5f ef          	mov    %r11,-0x11(%rdi)
   173a1:	48 89 4f f7          	mov    %rcx,-0x9(%rdi)
   173a5:	89 57 fc             	mov    %edx,-0x4(%rdi)
   173a8:	c3                   	retq   
   173a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   173b0:	f3 0f 6f 46 cf       	movdqu -0x31(%rsi),%xmm0
   173b5:	4c 8b 4e df          	mov    -0x21(%rsi),%r9
   173b9:	4c 8b 56 e7          	mov    -0x19(%rsi),%r10
   173bd:	4c 8b 5e ef          	mov    -0x11(%rsi),%r11
   173c1:	48 8b 4e f7          	mov    -0x9(%rsi),%rcx
   173c5:	8b 56 fc             	mov    -0x4(%rsi),%edx
   173c8:	f3 0f 7f 47 cf       	movdqu %xmm0,-0x31(%rdi)
   173cd:	4c 89 4f df          	mov    %r9,-0x21(%rdi)
   173d1:	4c 89 57 e7          	mov    %r10,-0x19(%rdi)
   173d5:	4c 89 5f ef          	mov    %r11,-0x11(%rdi)
   173d9:	48 89 4f f7          	mov    %rcx,-0x9(%rdi)
   173dd:	89 57 fc             	mov    %edx,-0x4(%rdi)
   173e0:	c3                   	retq   
   173e1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   173e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   173ed:	00 00 00 
   173f0:	4c 8b 46 d7          	mov    -0x29(%rsi),%r8
   173f4:	4c 8b 4e df          	mov    -0x21(%rsi),%r9
   173f8:	4c 8b 56 e7          	mov    -0x19(%rsi),%r10
   173fc:	4c 8b 5e ef          	mov    -0x11(%rsi),%r11
   17400:	48 8b 4e f7          	mov    -0x9(%rsi),%rcx
   17404:	8a 56 ff             	mov    -0x1(%rsi),%dl
   17407:	4c 89 47 d7          	mov    %r8,-0x29(%rdi)
   1740b:	4c 89 4f df          	mov    %r9,-0x21(%rdi)
   1740f:	4c 89 57 e7          	mov    %r10,-0x19(%rdi)
   17413:	4c 89 5f ef          	mov    %r11,-0x11(%rdi)
   17417:	48 89 4f f7          	mov    %rcx,-0x9(%rdi)
   1741b:	88 57 ff             	mov    %dl,-0x1(%rdi)
   1741e:	c3                   	retq   
   1741f:	90                   	nop
   17420:	4c 8b 4e df          	mov    -0x21(%rsi),%r9
   17424:	4c 8b 56 e7          	mov    -0x19(%rsi),%r10
   17428:	4c 8b 5e ef          	mov    -0x11(%rsi),%r11
   1742c:	48 8b 4e f7          	mov    -0x9(%rsi),%rcx
   17430:	8a 56 ff             	mov    -0x1(%rsi),%dl
   17433:	4c 89 4f df          	mov    %r9,-0x21(%rdi)
   17437:	4c 89 57 e7          	mov    %r10,-0x19(%rdi)
   1743b:	4c 89 5f ef          	mov    %r11,-0x11(%rdi)
   1743f:	48 89 4f f7          	mov    %rcx,-0x9(%rdi)
   17443:	88 57 ff             	mov    %dl,-0x1(%rdi)
   17446:	c3                   	retq   
   17447:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1744e:	00 00 
   17450:	4c 8b 56 e7          	mov    -0x19(%rsi),%r10
   17454:	4c 8b 5e ef          	mov    -0x11(%rsi),%r11
   17458:	48 8b 4e f7          	mov    -0x9(%rsi),%rcx
   1745c:	8a 56 ff             	mov    -0x1(%rsi),%dl
   1745f:	4c 89 57 e7          	mov    %r10,-0x19(%rdi)
   17463:	4c 89 5f ef          	mov    %r11,-0x11(%rdi)
   17467:	48 89 4f f7          	mov    %rcx,-0x9(%rdi)
   1746b:	88 57 ff             	mov    %dl,-0x1(%rdi)
   1746e:	c3                   	retq   
   1746f:	90                   	nop
   17470:	4c 8b 5e ef          	mov    -0x11(%rsi),%r11
   17474:	48 8b 4e f7          	mov    -0x9(%rsi),%rcx
   17478:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1747b:	4c 89 5f ef          	mov    %r11,-0x11(%rdi)
   1747f:	48 89 4f f7          	mov    %rcx,-0x9(%rdi)
   17483:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17486:	c3                   	retq   
   17487:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1748e:	00 00 
   17490:	48 8b 4e f7          	mov    -0x9(%rsi),%rcx
   17494:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17497:	48 89 4f f7          	mov    %rcx,-0x9(%rdi)
   1749b:	89 57 fc             	mov    %edx,-0x4(%rdi)
   1749e:	c3                   	retq   
   1749f:	90                   	nop
   174a0:	8a 56 ff             	mov    -0x1(%rsi),%dl
   174a3:	88 57 ff             	mov    %dl,-0x1(%rdi)
   174a6:	c3                   	retq   
   174a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   174ae:	00 00 
   174b0:	f3 0f 6f 46 b6       	movdqu -0x4a(%rsi),%xmm0
   174b5:	f3 0f 6f 4e c6       	movdqu -0x3a(%rsi),%xmm1
   174ba:	4c 8b 46 d6          	mov    -0x2a(%rsi),%r8
   174be:	4c 8b 4e de          	mov    -0x22(%rsi),%r9
   174c2:	4c 8b 56 e6          	mov    -0x1a(%rsi),%r10
   174c6:	4c 8b 5e ee          	mov    -0x12(%rsi),%r11
   174ca:	48 8b 4e f6          	mov    -0xa(%rsi),%rcx
   174ce:	8b 56 fc             	mov    -0x4(%rsi),%edx
   174d1:	f3 0f 7f 47 b6       	movdqu %xmm0,-0x4a(%rdi)
   174d6:	f3 0f 7f 4f c6       	movdqu %xmm1,-0x3a(%rdi)
   174db:	4c 89 47 d6          	mov    %r8,-0x2a(%rdi)
   174df:	4c 89 4f de          	mov    %r9,-0x22(%rdi)
   174e3:	4c 89 57 e6          	mov    %r10,-0x1a(%rdi)
   174e7:	4c 89 5f ee          	mov    %r11,-0x12(%rdi)
   174eb:	48 89 4f f6          	mov    %rcx,-0xa(%rdi)
   174ef:	89 57 fc             	mov    %edx,-0x4(%rdi)
   174f2:	c3                   	retq   
   174f3:	0f 1f 00             	nopl   (%rax)
   174f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   174fd:	00 00 00 
   17500:	f3 0f 6f 46 be       	movdqu -0x42(%rsi),%xmm0
   17505:	f3 0f 6f 4e ce       	movdqu -0x32(%rsi),%xmm1
   1750a:	4c 8b 46 d6          	mov    -0x2a(%rsi),%r8
   1750e:	4c 8b 4e de          	mov    -0x22(%rsi),%r9
   17512:	4c 8b 56 e6          	mov    -0x1a(%rsi),%r10
   17516:	4c 8b 5e ee          	mov    -0x12(%rsi),%r11
   1751a:	48 8b 4e f6          	mov    -0xa(%rsi),%rcx
   1751e:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17521:	f3 0f 7f 47 be       	movdqu %xmm0,-0x42(%rdi)
   17526:	f3 0f 7f 4f ce       	movdqu %xmm1,-0x32(%rdi)
   1752b:	4c 89 47 d6          	mov    %r8,-0x2a(%rdi)
   1752f:	4c 89 4f de          	mov    %r9,-0x22(%rdi)
   17533:	4c 89 57 e6          	mov    %r10,-0x1a(%rdi)
   17537:	4c 89 5f ee          	mov    %r11,-0x12(%rdi)
   1753b:	48 89 4f f6          	mov    %rcx,-0xa(%rdi)
   1753f:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17542:	c3                   	retq   
   17543:	0f 1f 00             	nopl   (%rax)
   17546:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1754d:	00 00 00 
   17550:	f3 0f 6f 4e c6       	movdqu -0x3a(%rsi),%xmm1
   17555:	4c 8b 46 d6          	mov    -0x2a(%rsi),%r8
   17559:	4c 8b 4e de          	mov    -0x22(%rsi),%r9
   1755d:	4c 8b 56 e6          	mov    -0x1a(%rsi),%r10
   17561:	4c 8b 5e ee          	mov    -0x12(%rsi),%r11
   17565:	48 8b 4e f6          	mov    -0xa(%rsi),%rcx
   17569:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1756c:	f3 0f 7f 4f c6       	movdqu %xmm1,-0x3a(%rdi)
   17571:	4c 89 47 d6          	mov    %r8,-0x2a(%rdi)
   17575:	4c 89 4f de          	mov    %r9,-0x22(%rdi)
   17579:	4c 89 57 e6          	mov    %r10,-0x1a(%rdi)
   1757d:	4c 89 5f ee          	mov    %r11,-0x12(%rdi)
   17581:	48 89 4f f6          	mov    %rcx,-0xa(%rdi)
   17585:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17588:	c3                   	retq   
   17589:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   17590:	f3 0f 6f 46 ce       	movdqu -0x32(%rsi),%xmm0
   17595:	4c 8b 4e de          	mov    -0x22(%rsi),%r9
   17599:	4c 8b 56 e6          	mov    -0x1a(%rsi),%r10
   1759d:	4c 8b 5e ee          	mov    -0x12(%rsi),%r11
   175a1:	48 8b 4e f6          	mov    -0xa(%rsi),%rcx
   175a5:	8b 56 fc             	mov    -0x4(%rsi),%edx
   175a8:	f3 0f 7f 47 ce       	movdqu %xmm0,-0x32(%rdi)
   175ad:	4c 89 4f de          	mov    %r9,-0x22(%rdi)
   175b1:	4c 89 57 e6          	mov    %r10,-0x1a(%rdi)
   175b5:	4c 89 5f ee          	mov    %r11,-0x12(%rdi)
   175b9:	48 89 4f f6          	mov    %rcx,-0xa(%rdi)
   175bd:	89 57 fc             	mov    %edx,-0x4(%rdi)
   175c0:	c3                   	retq   
   175c1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   175c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   175cd:	00 00 00 
   175d0:	4c 8b 46 d6          	mov    -0x2a(%rsi),%r8
   175d4:	4c 8b 4e de          	mov    -0x22(%rsi),%r9
   175d8:	4c 8b 56 e6          	mov    -0x1a(%rsi),%r10
   175dc:	4c 8b 5e ee          	mov    -0x12(%rsi),%r11
   175e0:	48 8b 4e f6          	mov    -0xa(%rsi),%rcx
   175e4:	8b 56 fc             	mov    -0x4(%rsi),%edx
   175e7:	4c 89 47 d6          	mov    %r8,-0x2a(%rdi)
   175eb:	4c 89 4f de          	mov    %r9,-0x22(%rdi)
   175ef:	4c 89 57 e6          	mov    %r10,-0x1a(%rdi)
   175f3:	4c 89 5f ee          	mov    %r11,-0x12(%rdi)
   175f7:	48 89 4f f6          	mov    %rcx,-0xa(%rdi)
   175fb:	89 57 fc             	mov    %edx,-0x4(%rdi)
   175fe:	c3                   	retq   
   175ff:	90                   	nop
   17600:	4c 8b 4e de          	mov    -0x22(%rsi),%r9
   17604:	4c 8b 56 e6          	mov    -0x1a(%rsi),%r10
   17608:	4c 8b 5e ee          	mov    -0x12(%rsi),%r11
   1760c:	48 8b 4e f6          	mov    -0xa(%rsi),%rcx
   17610:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17613:	4c 89 4f de          	mov    %r9,-0x22(%rdi)
   17617:	4c 89 57 e6          	mov    %r10,-0x1a(%rdi)
   1761b:	4c 89 5f ee          	mov    %r11,-0x12(%rdi)
   1761f:	48 89 4f f6          	mov    %rcx,-0xa(%rdi)
   17623:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17626:	c3                   	retq   
   17627:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1762e:	00 00 
   17630:	4c 8b 56 e6          	mov    -0x1a(%rsi),%r10
   17634:	4c 8b 5e ee          	mov    -0x12(%rsi),%r11
   17638:	48 8b 4e f6          	mov    -0xa(%rsi),%rcx
   1763c:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1763f:	4c 89 57 e6          	mov    %r10,-0x1a(%rdi)
   17643:	4c 89 5f ee          	mov    %r11,-0x12(%rdi)
   17647:	48 89 4f f6          	mov    %rcx,-0xa(%rdi)
   1764b:	89 57 fc             	mov    %edx,-0x4(%rdi)
   1764e:	c3                   	retq   
   1764f:	90                   	nop
   17650:	4c 8b 5e ee          	mov    -0x12(%rsi),%r11
   17654:	48 8b 4e f6          	mov    -0xa(%rsi),%rcx
   17658:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1765b:	4c 89 5f ee          	mov    %r11,-0x12(%rdi)
   1765f:	48 89 4f f6          	mov    %rcx,-0xa(%rdi)
   17663:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17666:	c3                   	retq   
   17667:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1766e:	00 00 
   17670:	48 8b 4e f6          	mov    -0xa(%rsi),%rcx
   17674:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17677:	48 89 4f f6          	mov    %rcx,-0xa(%rdi)
   1767b:	89 57 fc             	mov    %edx,-0x4(%rdi)
   1767e:	c3                   	retq   
   1767f:	90                   	nop
   17680:	66 8b 56 fe          	mov    -0x2(%rsi),%dx
   17684:	66 89 57 fe          	mov    %dx,-0x2(%rdi)
   17688:	c3                   	retq   
   17689:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   17690:	f3 0f 6f 46 b5       	movdqu -0x4b(%rsi),%xmm0
   17695:	f3 0f 6f 4e c5       	movdqu -0x3b(%rsi),%xmm1
   1769a:	4c 8b 46 d5          	mov    -0x2b(%rsi),%r8
   1769e:	4c 8b 4e dd          	mov    -0x23(%rsi),%r9
   176a2:	4c 8b 56 e5          	mov    -0x1b(%rsi),%r10
   176a6:	4c 8b 5e ed          	mov    -0x13(%rsi),%r11
   176aa:	48 8b 4e f5          	mov    -0xb(%rsi),%rcx
   176ae:	8b 56 fc             	mov    -0x4(%rsi),%edx
   176b1:	f3 0f 7f 47 b5       	movdqu %xmm0,-0x4b(%rdi)
   176b6:	f3 0f 7f 4f c5       	movdqu %xmm1,-0x3b(%rdi)
   176bb:	4c 89 47 d5          	mov    %r8,-0x2b(%rdi)
   176bf:	4c 89 4f dd          	mov    %r9,-0x23(%rdi)
   176c3:	4c 89 57 e5          	mov    %r10,-0x1b(%rdi)
   176c7:	4c 89 5f ed          	mov    %r11,-0x13(%rdi)
   176cb:	48 89 4f f5          	mov    %rcx,-0xb(%rdi)
   176cf:	89 57 fc             	mov    %edx,-0x4(%rdi)
   176d2:	c3                   	retq   
   176d3:	0f 1f 00             	nopl   (%rax)
   176d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   176dd:	00 00 00 
   176e0:	f3 0f 6f 46 bd       	movdqu -0x43(%rsi),%xmm0
   176e5:	f3 0f 6f 4e c5       	movdqu -0x3b(%rsi),%xmm1
   176ea:	4c 8b 46 d5          	mov    -0x2b(%rsi),%r8
   176ee:	4c 8b 4e dd          	mov    -0x23(%rsi),%r9
   176f2:	4c 8b 56 e5          	mov    -0x1b(%rsi),%r10
   176f6:	4c 8b 5e ed          	mov    -0x13(%rsi),%r11
   176fa:	48 8b 4e f5          	mov    -0xb(%rsi),%rcx
   176fe:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17701:	f3 0f 7f 47 bd       	movdqu %xmm0,-0x43(%rdi)
   17706:	f3 0f 7f 4f c5       	movdqu %xmm1,-0x3b(%rdi)
   1770b:	4c 89 47 d5          	mov    %r8,-0x2b(%rdi)
   1770f:	4c 89 4f dd          	mov    %r9,-0x23(%rdi)
   17713:	4c 89 57 e5          	mov    %r10,-0x1b(%rdi)
   17717:	4c 89 5f ed          	mov    %r11,-0x13(%rdi)
   1771b:	48 89 4f f5          	mov    %rcx,-0xb(%rdi)
   1771f:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17722:	c3                   	retq   
   17723:	0f 1f 00             	nopl   (%rax)
   17726:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1772d:	00 00 00 
   17730:	f3 0f 6f 46 c5       	movdqu -0x3b(%rsi),%xmm0
   17735:	4c 8b 46 d5          	mov    -0x2b(%rsi),%r8
   17739:	4c 8b 4e dd          	mov    -0x23(%rsi),%r9
   1773d:	4c 8b 56 e5          	mov    -0x1b(%rsi),%r10
   17741:	4c 8b 5e ed          	mov    -0x13(%rsi),%r11
   17745:	48 8b 4e f5          	mov    -0xb(%rsi),%rcx
   17749:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1774c:	f3 0f 7f 47 c5       	movdqu %xmm0,-0x3b(%rdi)
   17751:	4c 89 47 d5          	mov    %r8,-0x2b(%rdi)
   17755:	4c 89 4f dd          	mov    %r9,-0x23(%rdi)
   17759:	4c 89 57 e5          	mov    %r10,-0x1b(%rdi)
   1775d:	4c 89 5f ed          	mov    %r11,-0x13(%rdi)
   17761:	48 89 4f f5          	mov    %rcx,-0xb(%rdi)
   17765:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17768:	c3                   	retq   
   17769:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   17770:	f3 0f 6f 46 cd       	movdqu -0x33(%rsi),%xmm0
   17775:	4c 8b 4e dd          	mov    -0x23(%rsi),%r9
   17779:	4c 8b 56 e5          	mov    -0x1b(%rsi),%r10
   1777d:	4c 8b 5e ed          	mov    -0x13(%rsi),%r11
   17781:	48 8b 4e f5          	mov    -0xb(%rsi),%rcx
   17785:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17788:	f3 0f 7f 47 cd       	movdqu %xmm0,-0x33(%rdi)
   1778d:	4c 89 4f dd          	mov    %r9,-0x23(%rdi)
   17791:	4c 89 57 e5          	mov    %r10,-0x1b(%rdi)
   17795:	4c 89 5f ed          	mov    %r11,-0x13(%rdi)
   17799:	48 89 4f f5          	mov    %rcx,-0xb(%rdi)
   1779d:	89 57 fc             	mov    %edx,-0x4(%rdi)
   177a0:	c3                   	retq   
   177a1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   177a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   177ad:	00 00 00 
   177b0:	4c 8b 46 d5          	mov    -0x2b(%rsi),%r8
   177b4:	4c 8b 4e dd          	mov    -0x23(%rsi),%r9
   177b8:	4c 8b 56 e5          	mov    -0x1b(%rsi),%r10
   177bc:	4c 8b 5e ed          	mov    -0x13(%rsi),%r11
   177c0:	48 8b 4e f5          	mov    -0xb(%rsi),%rcx
   177c4:	8b 56 fc             	mov    -0x4(%rsi),%edx
   177c7:	4c 89 47 d5          	mov    %r8,-0x2b(%rdi)
   177cb:	4c 89 4f dd          	mov    %r9,-0x23(%rdi)
   177cf:	4c 89 57 e5          	mov    %r10,-0x1b(%rdi)
   177d3:	4c 89 5f ed          	mov    %r11,-0x13(%rdi)
   177d7:	48 89 4f f5          	mov    %rcx,-0xb(%rdi)
   177db:	89 57 fc             	mov    %edx,-0x4(%rdi)
   177de:	c3                   	retq   
   177df:	90                   	nop
   177e0:	4c 8b 4e dd          	mov    -0x23(%rsi),%r9
   177e4:	4c 8b 56 e5          	mov    -0x1b(%rsi),%r10
   177e8:	4c 8b 5e ed          	mov    -0x13(%rsi),%r11
   177ec:	48 8b 4e f5          	mov    -0xb(%rsi),%rcx
   177f0:	8b 56 fc             	mov    -0x4(%rsi),%edx
   177f3:	4c 89 4f dd          	mov    %r9,-0x23(%rdi)
   177f7:	4c 89 57 e5          	mov    %r10,-0x1b(%rdi)
   177fb:	4c 89 5f ed          	mov    %r11,-0x13(%rdi)
   177ff:	48 89 4f f5          	mov    %rcx,-0xb(%rdi)
   17803:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17806:	c3                   	retq   
   17807:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1780e:	00 00 
   17810:	4c 8b 56 e5          	mov    -0x1b(%rsi),%r10
   17814:	4c 8b 5e ed          	mov    -0x13(%rsi),%r11
   17818:	48 8b 4e f5          	mov    -0xb(%rsi),%rcx
   1781c:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1781f:	4c 89 57 e5          	mov    %r10,-0x1b(%rdi)
   17823:	4c 89 5f ed          	mov    %r11,-0x13(%rdi)
   17827:	48 89 4f f5          	mov    %rcx,-0xb(%rdi)
   1782b:	89 57 fc             	mov    %edx,-0x4(%rdi)
   1782e:	c3                   	retq   
   1782f:	90                   	nop
   17830:	4c 8b 5e ed          	mov    -0x13(%rsi),%r11
   17834:	48 8b 4e f5          	mov    -0xb(%rsi),%rcx
   17838:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1783b:	4c 89 5f ed          	mov    %r11,-0x13(%rdi)
   1783f:	48 89 4f f5          	mov    %rcx,-0xb(%rdi)
   17843:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17846:	c3                   	retq   
   17847:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1784e:	00 00 
   17850:	48 8b 4e f5          	mov    -0xb(%rsi),%rcx
   17854:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17857:	48 89 4f f5          	mov    %rcx,-0xb(%rdi)
   1785b:	89 57 fc             	mov    %edx,-0x4(%rdi)
   1785e:	c3                   	retq   
   1785f:	90                   	nop
   17860:	66 8b 56 fd          	mov    -0x3(%rsi),%dx
   17864:	66 8b 4e fe          	mov    -0x2(%rsi),%cx
   17868:	66 89 57 fd          	mov    %dx,-0x3(%rdi)
   1786c:	66 89 4f fe          	mov    %cx,-0x2(%rdi)
   17870:	c3                   	retq   
   17871:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1787d:	00 00 00 
   17880:	f3 0f 6f 46 b4       	movdqu -0x4c(%rsi),%xmm0
   17885:	f3 0f 6f 4e c4       	movdqu -0x3c(%rsi),%xmm1
   1788a:	4c 8b 46 d4          	mov    -0x2c(%rsi),%r8
   1788e:	4c 8b 4e dc          	mov    -0x24(%rsi),%r9
   17892:	4c 8b 56 e4          	mov    -0x1c(%rsi),%r10
   17896:	4c 8b 5e ec          	mov    -0x14(%rsi),%r11
   1789a:	48 8b 4e f4          	mov    -0xc(%rsi),%rcx
   1789e:	8b 56 fc             	mov    -0x4(%rsi),%edx
   178a1:	f3 0f 7f 47 b4       	movdqu %xmm0,-0x4c(%rdi)
   178a6:	f3 0f 7f 4f c4       	movdqu %xmm1,-0x3c(%rdi)
   178ab:	4c 89 47 d4          	mov    %r8,-0x2c(%rdi)
   178af:	4c 89 4f dc          	mov    %r9,-0x24(%rdi)
   178b3:	4c 89 57 e4          	mov    %r10,-0x1c(%rdi)
   178b7:	4c 89 5f ec          	mov    %r11,-0x14(%rdi)
   178bb:	48 89 4f f4          	mov    %rcx,-0xc(%rdi)
   178bf:	89 57 fc             	mov    %edx,-0x4(%rdi)
   178c2:	c3                   	retq   
   178c3:	0f 1f 00             	nopl   (%rax)
   178c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   178cd:	00 00 00 
   178d0:	f3 0f 6f 46 bc       	movdqu -0x44(%rsi),%xmm0
   178d5:	f3 0f 6f 4e cc       	movdqu -0x34(%rsi),%xmm1
   178da:	4c 8b 4e dc          	mov    -0x24(%rsi),%r9
   178de:	4c 8b 56 e4          	mov    -0x1c(%rsi),%r10
   178e2:	4c 8b 5e ec          	mov    -0x14(%rsi),%r11
   178e6:	48 8b 4e f4          	mov    -0xc(%rsi),%rcx
   178ea:	8b 56 fc             	mov    -0x4(%rsi),%edx
   178ed:	f3 0f 7f 47 bc       	movdqu %xmm0,-0x44(%rdi)
   178f2:	f3 0f 7f 4f cc       	movdqu %xmm1,-0x34(%rdi)
   178f7:	4c 89 4f dc          	mov    %r9,-0x24(%rdi)
   178fb:	4c 89 57 e4          	mov    %r10,-0x1c(%rdi)
   178ff:	4c 89 5f ec          	mov    %r11,-0x14(%rdi)
   17903:	48 89 4f f4          	mov    %rcx,-0xc(%rdi)
   17907:	89 57 fc             	mov    %edx,-0x4(%rdi)
   1790a:	c3                   	retq   
   1790b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17910:	f3 0f 6f 46 c4       	movdqu -0x3c(%rsi),%xmm0
   17915:	4c 8b 46 d4          	mov    -0x2c(%rsi),%r8
   17919:	4c 8b 4e dc          	mov    -0x24(%rsi),%r9
   1791d:	4c 8b 56 e4          	mov    -0x1c(%rsi),%r10
   17921:	4c 8b 5e ec          	mov    -0x14(%rsi),%r11
   17925:	48 8b 4e f4          	mov    -0xc(%rsi),%rcx
   17929:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1792c:	f3 0f 7f 47 c4       	movdqu %xmm0,-0x3c(%rdi)
   17931:	4c 89 47 d4          	mov    %r8,-0x2c(%rdi)
   17935:	4c 89 4f dc          	mov    %r9,-0x24(%rdi)
   17939:	4c 89 57 e4          	mov    %r10,-0x1c(%rdi)
   1793d:	4c 89 5f ec          	mov    %r11,-0x14(%rdi)
   17941:	48 89 4f f4          	mov    %rcx,-0xc(%rdi)
   17945:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17948:	c3                   	retq   
   17949:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   17950:	f3 0f 6f 46 cc       	movdqu -0x34(%rsi),%xmm0
   17955:	4c 8b 4e dc          	mov    -0x24(%rsi),%r9
   17959:	4c 8b 56 e4          	mov    -0x1c(%rsi),%r10
   1795d:	4c 8b 5e ec          	mov    -0x14(%rsi),%r11
   17961:	48 8b 4e f4          	mov    -0xc(%rsi),%rcx
   17965:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17968:	f3 0f 7f 47 cc       	movdqu %xmm0,-0x34(%rdi)
   1796d:	4c 89 4f dc          	mov    %r9,-0x24(%rdi)
   17971:	4c 89 57 e4          	mov    %r10,-0x1c(%rdi)
   17975:	4c 89 5f ec          	mov    %r11,-0x14(%rdi)
   17979:	48 89 4f f4          	mov    %rcx,-0xc(%rdi)
   1797d:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17980:	c3                   	retq   
   17981:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17986:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1798d:	00 00 00 
   17990:	4c 8b 46 d4          	mov    -0x2c(%rsi),%r8
   17994:	4c 8b 4e dc          	mov    -0x24(%rsi),%r9
   17998:	4c 8b 56 e4          	mov    -0x1c(%rsi),%r10
   1799c:	4c 8b 5e ec          	mov    -0x14(%rsi),%r11
   179a0:	48 8b 4e f4          	mov    -0xc(%rsi),%rcx
   179a4:	8b 56 fc             	mov    -0x4(%rsi),%edx
   179a7:	4c 89 47 d4          	mov    %r8,-0x2c(%rdi)
   179ab:	4c 89 4f dc          	mov    %r9,-0x24(%rdi)
   179af:	4c 89 57 e4          	mov    %r10,-0x1c(%rdi)
   179b3:	4c 89 5f ec          	mov    %r11,-0x14(%rdi)
   179b7:	48 89 4f f4          	mov    %rcx,-0xc(%rdi)
   179bb:	89 57 fc             	mov    %edx,-0x4(%rdi)
   179be:	c3                   	retq   
   179bf:	90                   	nop
   179c0:	4c 8b 4e dc          	mov    -0x24(%rsi),%r9
   179c4:	4c 8b 56 e4          	mov    -0x1c(%rsi),%r10
   179c8:	4c 8b 5e ec          	mov    -0x14(%rsi),%r11
   179cc:	48 8b 4e f4          	mov    -0xc(%rsi),%rcx
   179d0:	8b 56 fc             	mov    -0x4(%rsi),%edx
   179d3:	4c 89 4f dc          	mov    %r9,-0x24(%rdi)
   179d7:	4c 89 57 e4          	mov    %r10,-0x1c(%rdi)
   179db:	4c 89 5f ec          	mov    %r11,-0x14(%rdi)
   179df:	48 89 4f f4          	mov    %rcx,-0xc(%rdi)
   179e3:	89 57 fc             	mov    %edx,-0x4(%rdi)
   179e6:	c3                   	retq   
   179e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   179ee:	00 00 
   179f0:	4c 8b 56 e4          	mov    -0x1c(%rsi),%r10
   179f4:	4c 8b 5e ec          	mov    -0x14(%rsi),%r11
   179f8:	48 8b 4e f4          	mov    -0xc(%rsi),%rcx
   179fc:	8b 56 fc             	mov    -0x4(%rsi),%edx
   179ff:	4c 89 57 e4          	mov    %r10,-0x1c(%rdi)
   17a03:	4c 89 5f ec          	mov    %r11,-0x14(%rdi)
   17a07:	48 89 4f f4          	mov    %rcx,-0xc(%rdi)
   17a0b:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17a0e:	c3                   	retq   
   17a0f:	90                   	nop
   17a10:	4c 8b 5e ec          	mov    -0x14(%rsi),%r11
   17a14:	48 8b 4e f4          	mov    -0xc(%rsi),%rcx
   17a18:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17a1b:	4c 89 5f ec          	mov    %r11,-0x14(%rdi)
   17a1f:	48 89 4f f4          	mov    %rcx,-0xc(%rdi)
   17a23:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17a26:	c3                   	retq   
   17a27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   17a2e:	00 00 
   17a30:	48 8b 4e f4          	mov    -0xc(%rsi),%rcx
   17a34:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17a37:	48 89 4f f4          	mov    %rcx,-0xc(%rdi)
   17a3b:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17a3e:	c3                   	retq   
   17a3f:	90                   	nop
   17a40:	8b 56 fc             	mov    -0x4(%rsi),%edx
   17a43:	89 57 fc             	mov    %edx,-0x4(%rdi)
   17a46:	c3                   	retq   
   17a47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   17a4e:	00 00 
   17a50:	f3 0f 6f 46 b3       	movdqu -0x4d(%rsi),%xmm0
   17a55:	f3 0f 6f 4e c3       	movdqu -0x3d(%rsi),%xmm1
   17a5a:	4c 8b 46 d3          	mov    -0x2d(%rsi),%r8
   17a5e:	4c 8b 4e db          	mov    -0x25(%rsi),%r9
   17a62:	4c 8b 56 e3          	mov    -0x1d(%rsi),%r10
   17a66:	4c 8b 5e eb          	mov    -0x15(%rsi),%r11
   17a6a:	48 8b 4e f3          	mov    -0xd(%rsi),%rcx
   17a6e:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17a72:	f3 0f 7f 47 b3       	movdqu %xmm0,-0x4d(%rdi)
   17a77:	f3 0f 7f 4f c3       	movdqu %xmm1,-0x3d(%rdi)
   17a7c:	4c 89 47 d3          	mov    %r8,-0x2d(%rdi)
   17a80:	4c 89 4f db          	mov    %r9,-0x25(%rdi)
   17a84:	4c 89 57 e3          	mov    %r10,-0x1d(%rdi)
   17a88:	4c 89 5f eb          	mov    %r11,-0x15(%rdi)
   17a8c:	48 89 4f f3          	mov    %rcx,-0xd(%rdi)
   17a90:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17a94:	c3                   	retq   
   17a95:	90                   	nop
   17a96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17a9d:	00 00 00 
   17aa0:	f3 0f 6f 46 bb       	movdqu -0x45(%rsi),%xmm0
   17aa5:	f3 0f 6f 4e cb       	movdqu -0x35(%rsi),%xmm1
   17aaa:	4c 8b 4e db          	mov    -0x25(%rsi),%r9
   17aae:	4c 8b 56 e3          	mov    -0x1d(%rsi),%r10
   17ab2:	4c 8b 5e eb          	mov    -0x15(%rsi),%r11
   17ab6:	48 8b 4e f3          	mov    -0xd(%rsi),%rcx
   17aba:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17abe:	f3 0f 7f 47 bb       	movdqu %xmm0,-0x45(%rdi)
   17ac3:	f3 0f 7f 4f cb       	movdqu %xmm1,-0x35(%rdi)
   17ac8:	4c 89 4f db          	mov    %r9,-0x25(%rdi)
   17acc:	4c 89 57 e3          	mov    %r10,-0x1d(%rdi)
   17ad0:	4c 89 5f eb          	mov    %r11,-0x15(%rdi)
   17ad4:	48 89 4f f3          	mov    %rcx,-0xd(%rdi)
   17ad8:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17adc:	c3                   	retq   
   17add:	0f 1f 00             	nopl   (%rax)
   17ae0:	f3 0f 6f 46 c3       	movdqu -0x3d(%rsi),%xmm0
   17ae5:	4c 8b 46 d3          	mov    -0x2d(%rsi),%r8
   17ae9:	4c 8b 4e db          	mov    -0x25(%rsi),%r9
   17aed:	4c 8b 56 e3          	mov    -0x1d(%rsi),%r10
   17af1:	4c 8b 5e eb          	mov    -0x15(%rsi),%r11
   17af5:	48 8b 4e f3          	mov    -0xd(%rsi),%rcx
   17af9:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17afd:	f3 0f 7f 47 c3       	movdqu %xmm0,-0x3d(%rdi)
   17b02:	4c 89 47 d3          	mov    %r8,-0x2d(%rdi)
   17b06:	4c 89 4f db          	mov    %r9,-0x25(%rdi)
   17b0a:	4c 89 57 e3          	mov    %r10,-0x1d(%rdi)
   17b0e:	4c 89 5f eb          	mov    %r11,-0x15(%rdi)
   17b12:	48 89 4f f3          	mov    %rcx,-0xd(%rdi)
   17b16:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17b1a:	c3                   	retq   
   17b1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17b20:	f3 0f 6f 46 cb       	movdqu -0x35(%rsi),%xmm0
   17b25:	4c 8b 46 d3          	mov    -0x2d(%rsi),%r8
   17b29:	4c 8b 4e db          	mov    -0x25(%rsi),%r9
   17b2d:	4c 8b 56 e3          	mov    -0x1d(%rsi),%r10
   17b31:	4c 8b 5e eb          	mov    -0x15(%rsi),%r11
   17b35:	48 8b 4e f3          	mov    -0xd(%rsi),%rcx
   17b39:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17b3d:	f3 0f 7f 47 cb       	movdqu %xmm0,-0x35(%rdi)
   17b42:	4c 89 4f db          	mov    %r9,-0x25(%rdi)
   17b46:	4c 89 57 e3          	mov    %r10,-0x1d(%rdi)
   17b4a:	4c 89 5f eb          	mov    %r11,-0x15(%rdi)
   17b4e:	48 89 4f f3          	mov    %rcx,-0xd(%rdi)
   17b52:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17b56:	c3                   	retq   
   17b57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   17b5e:	00 00 
   17b60:	4c 8b 46 d3          	mov    -0x2d(%rsi),%r8
   17b64:	4c 8b 4e db          	mov    -0x25(%rsi),%r9
   17b68:	4c 8b 56 e3          	mov    -0x1d(%rsi),%r10
   17b6c:	4c 8b 5e eb          	mov    -0x15(%rsi),%r11
   17b70:	48 8b 4e f3          	mov    -0xd(%rsi),%rcx
   17b74:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17b78:	4c 89 47 d3          	mov    %r8,-0x2d(%rdi)
   17b7c:	4c 89 4f db          	mov    %r9,-0x25(%rdi)
   17b80:	4c 89 57 e3          	mov    %r10,-0x1d(%rdi)
   17b84:	4c 89 5f eb          	mov    %r11,-0x15(%rdi)
   17b88:	48 89 4f f3          	mov    %rcx,-0xd(%rdi)
   17b8c:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17b90:	c3                   	retq   
   17b91:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17b96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17b9d:	00 00 00 
   17ba0:	4c 8b 4e db          	mov    -0x25(%rsi),%r9
   17ba4:	4c 8b 56 e3          	mov    -0x1d(%rsi),%r10
   17ba8:	4c 8b 5e eb          	mov    -0x15(%rsi),%r11
   17bac:	48 8b 4e f3          	mov    -0xd(%rsi),%rcx
   17bb0:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17bb4:	4c 89 4f db          	mov    %r9,-0x25(%rdi)
   17bb8:	4c 89 57 e3          	mov    %r10,-0x1d(%rdi)
   17bbc:	4c 89 5f eb          	mov    %r11,-0x15(%rdi)
   17bc0:	48 89 4f f3          	mov    %rcx,-0xd(%rdi)
   17bc4:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17bc8:	c3                   	retq   
   17bc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   17bd0:	4c 8b 56 e3          	mov    -0x1d(%rsi),%r10
   17bd4:	4c 8b 5e eb          	mov    -0x15(%rsi),%r11
   17bd8:	48 8b 4e f3          	mov    -0xd(%rsi),%rcx
   17bdc:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17be0:	4c 89 57 e3          	mov    %r10,-0x1d(%rdi)
   17be4:	4c 89 5f eb          	mov    %r11,-0x15(%rdi)
   17be8:	48 89 4f f3          	mov    %rcx,-0xd(%rdi)
   17bec:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17bf0:	c3                   	retq   
   17bf1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17bf6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17bfd:	00 00 00 
   17c00:	4c 8b 5e eb          	mov    -0x15(%rsi),%r11
   17c04:	48 8b 4e f3          	mov    -0xd(%rsi),%rcx
   17c08:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17c0c:	4c 89 5f eb          	mov    %r11,-0x15(%rdi)
   17c10:	48 89 4f f3          	mov    %rcx,-0xd(%rdi)
   17c14:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17c18:	c3                   	retq   
   17c19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   17c20:	48 8b 4e f3          	mov    -0xd(%rsi),%rcx
   17c24:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17c28:	48 89 4f f3          	mov    %rcx,-0xd(%rdi)
   17c2c:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17c30:	c3                   	retq   
   17c31:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17c36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17c3d:	00 00 00 
   17c40:	8b 56 fb             	mov    -0x5(%rsi),%edx
   17c43:	8b 4e fc             	mov    -0x4(%rsi),%ecx
   17c46:	89 57 fb             	mov    %edx,-0x5(%rdi)
   17c49:	89 4f fc             	mov    %ecx,-0x4(%rdi)
   17c4c:	c3                   	retq   
   17c4d:	0f 1f 00             	nopl   (%rax)
   17c50:	f3 0f 6f 46 b2       	movdqu -0x4e(%rsi),%xmm0
   17c55:	f3 0f 6f 4e c2       	movdqu -0x3e(%rsi),%xmm1
   17c5a:	4c 8b 46 d2          	mov    -0x2e(%rsi),%r8
   17c5e:	4c 8b 4e da          	mov    -0x26(%rsi),%r9
   17c62:	4c 8b 56 e2          	mov    -0x1e(%rsi),%r10
   17c66:	4c 8b 5e ea          	mov    -0x16(%rsi),%r11
   17c6a:	48 8b 4e f2          	mov    -0xe(%rsi),%rcx
   17c6e:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17c72:	f3 0f 7f 47 b2       	movdqu %xmm0,-0x4e(%rdi)
   17c77:	f3 0f 7f 4f c2       	movdqu %xmm1,-0x3e(%rdi)
   17c7c:	4c 89 47 d2          	mov    %r8,-0x2e(%rdi)
   17c80:	4c 89 4f da          	mov    %r9,-0x26(%rdi)
   17c84:	4c 89 57 e2          	mov    %r10,-0x1e(%rdi)
   17c88:	4c 89 5f ea          	mov    %r11,-0x16(%rdi)
   17c8c:	48 89 4f f2          	mov    %rcx,-0xe(%rdi)
   17c90:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17c94:	c3                   	retq   
   17c95:	90                   	nop
   17c96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17c9d:	00 00 00 
   17ca0:	f3 0f 6f 46 ba       	movdqu -0x46(%rsi),%xmm0
   17ca5:	f3 0f 6f 4e ca       	movdqu -0x36(%rsi),%xmm1
   17caa:	4c 8b 4e da          	mov    -0x26(%rsi),%r9
   17cae:	4c 8b 56 e2          	mov    -0x1e(%rsi),%r10
   17cb2:	4c 8b 5e ea          	mov    -0x16(%rsi),%r11
   17cb6:	48 8b 4e f2          	mov    -0xe(%rsi),%rcx
   17cba:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17cbe:	f3 0f 7f 47 ba       	movdqu %xmm0,-0x46(%rdi)
   17cc3:	f3 0f 7f 4f ca       	movdqu %xmm1,-0x36(%rdi)
   17cc8:	4c 89 4f da          	mov    %r9,-0x26(%rdi)
   17ccc:	4c 89 57 e2          	mov    %r10,-0x1e(%rdi)
   17cd0:	4c 89 5f ea          	mov    %r11,-0x16(%rdi)
   17cd4:	48 89 4f f2          	mov    %rcx,-0xe(%rdi)
   17cd8:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17cdc:	c3                   	retq   
   17cdd:	0f 1f 00             	nopl   (%rax)
   17ce0:	f3 0f 6f 46 c2       	movdqu -0x3e(%rsi),%xmm0
   17ce5:	4c 8b 46 d2          	mov    -0x2e(%rsi),%r8
   17ce9:	4c 8b 4e da          	mov    -0x26(%rsi),%r9
   17ced:	4c 8b 56 e2          	mov    -0x1e(%rsi),%r10
   17cf1:	4c 8b 5e ea          	mov    -0x16(%rsi),%r11
   17cf5:	48 8b 4e f2          	mov    -0xe(%rsi),%rcx
   17cf9:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17cfd:	f3 0f 7f 47 c2       	movdqu %xmm0,-0x3e(%rdi)
   17d02:	4c 89 47 d2          	mov    %r8,-0x2e(%rdi)
   17d06:	4c 89 4f da          	mov    %r9,-0x26(%rdi)
   17d0a:	4c 89 57 e2          	mov    %r10,-0x1e(%rdi)
   17d0e:	4c 89 5f ea          	mov    %r11,-0x16(%rdi)
   17d12:	48 89 4f f2          	mov    %rcx,-0xe(%rdi)
   17d16:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17d1a:	c3                   	retq   
   17d1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17d20:	f3 0f 6f 46 ca       	movdqu -0x36(%rsi),%xmm0
   17d25:	4c 8b 4e da          	mov    -0x26(%rsi),%r9
   17d29:	4c 8b 56 e2          	mov    -0x1e(%rsi),%r10
   17d2d:	4c 8b 5e ea          	mov    -0x16(%rsi),%r11
   17d31:	48 8b 4e f2          	mov    -0xe(%rsi),%rcx
   17d35:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17d39:	f3 0f 7f 47 ca       	movdqu %xmm0,-0x36(%rdi)
   17d3e:	4c 89 4f da          	mov    %r9,-0x26(%rdi)
   17d42:	4c 89 57 e2          	mov    %r10,-0x1e(%rdi)
   17d46:	4c 89 5f ea          	mov    %r11,-0x16(%rdi)
   17d4a:	48 89 4f f2          	mov    %rcx,-0xe(%rdi)
   17d4e:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17d52:	c3                   	retq   
   17d53:	0f 1f 00             	nopl   (%rax)
   17d56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17d5d:	00 00 00 
   17d60:	4c 8b 46 d2          	mov    -0x2e(%rsi),%r8
   17d64:	4c 8b 4e da          	mov    -0x26(%rsi),%r9
   17d68:	4c 8b 56 e2          	mov    -0x1e(%rsi),%r10
   17d6c:	4c 8b 5e ea          	mov    -0x16(%rsi),%r11
   17d70:	48 8b 4e f2          	mov    -0xe(%rsi),%rcx
   17d74:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17d78:	4c 89 47 d2          	mov    %r8,-0x2e(%rdi)
   17d7c:	4c 89 4f da          	mov    %r9,-0x26(%rdi)
   17d80:	4c 89 57 e2          	mov    %r10,-0x1e(%rdi)
   17d84:	4c 89 5f ea          	mov    %r11,-0x16(%rdi)
   17d88:	48 89 4f f2          	mov    %rcx,-0xe(%rdi)
   17d8c:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17d90:	c3                   	retq   
   17d91:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17d96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17d9d:	00 00 00 
   17da0:	4c 8b 4e da          	mov    -0x26(%rsi),%r9
   17da4:	4c 8b 56 e2          	mov    -0x1e(%rsi),%r10
   17da8:	4c 8b 5e ea          	mov    -0x16(%rsi),%r11
   17dac:	48 8b 4e f2          	mov    -0xe(%rsi),%rcx
   17db0:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17db4:	4c 89 4f da          	mov    %r9,-0x26(%rdi)
   17db8:	4c 89 57 e2          	mov    %r10,-0x1e(%rdi)
   17dbc:	4c 89 5f ea          	mov    %r11,-0x16(%rdi)
   17dc0:	48 89 4f f2          	mov    %rcx,-0xe(%rdi)
   17dc4:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17dc8:	c3                   	retq   
   17dc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   17dd0:	4c 8b 56 e2          	mov    -0x1e(%rsi),%r10
   17dd4:	4c 8b 5e ea          	mov    -0x16(%rsi),%r11
   17dd8:	48 8b 4e f2          	mov    -0xe(%rsi),%rcx
   17ddc:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17de0:	4c 89 57 e2          	mov    %r10,-0x1e(%rdi)
   17de4:	4c 89 5f ea          	mov    %r11,-0x16(%rdi)
   17de8:	48 89 4f f2          	mov    %rcx,-0xe(%rdi)
   17dec:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17df0:	c3                   	retq   
   17df1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17df6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17dfd:	00 00 00 
   17e00:	4c 8b 5e ea          	mov    -0x16(%rsi),%r11
   17e04:	48 8b 4e f2          	mov    -0xe(%rsi),%rcx
   17e08:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17e0c:	4c 89 5f ea          	mov    %r11,-0x16(%rdi)
   17e10:	48 89 4f f2          	mov    %rcx,-0xe(%rdi)
   17e14:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17e18:	c3                   	retq   
   17e19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   17e20:	48 8b 4e f2          	mov    -0xe(%rsi),%rcx
   17e24:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17e28:	48 89 4f f2          	mov    %rcx,-0xe(%rdi)
   17e2c:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17e30:	c3                   	retq   
   17e31:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17e36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17e3d:	00 00 00 
   17e40:	8b 56 fa             	mov    -0x6(%rsi),%edx
   17e43:	8b 4e fc             	mov    -0x4(%rsi),%ecx
   17e46:	89 57 fa             	mov    %edx,-0x6(%rdi)
   17e49:	89 4f fc             	mov    %ecx,-0x4(%rdi)
   17e4c:	c3                   	retq   
   17e4d:	0f 1f 00             	nopl   (%rax)
   17e50:	f3 0f 6f 46 b1       	movdqu -0x4f(%rsi),%xmm0
   17e55:	f3 0f 6f 4e c1       	movdqu -0x3f(%rsi),%xmm1
   17e5a:	4c 8b 46 d1          	mov    -0x2f(%rsi),%r8
   17e5e:	4c 8b 4e d9          	mov    -0x27(%rsi),%r9
   17e62:	4c 8b 56 e1          	mov    -0x1f(%rsi),%r10
   17e66:	4c 8b 5e e9          	mov    -0x17(%rsi),%r11
   17e6a:	48 8b 4e f1          	mov    -0xf(%rsi),%rcx
   17e6e:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17e72:	f3 0f 7f 47 b1       	movdqu %xmm0,-0x4f(%rdi)
   17e77:	f3 0f 7f 4f c1       	movdqu %xmm1,-0x3f(%rdi)
   17e7c:	4c 89 47 d1          	mov    %r8,-0x2f(%rdi)
   17e80:	4c 89 4f d9          	mov    %r9,-0x27(%rdi)
   17e84:	4c 89 57 e1          	mov    %r10,-0x1f(%rdi)
   17e88:	4c 89 5f e9          	mov    %r11,-0x17(%rdi)
   17e8c:	48 89 4f f1          	mov    %rcx,-0xf(%rdi)
   17e90:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17e94:	c3                   	retq   
   17e95:	90                   	nop
   17e96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17e9d:	00 00 00 
   17ea0:	f3 0f 6f 46 b9       	movdqu -0x47(%rsi),%xmm0
   17ea5:	f3 0f 6f 4e c9       	movdqu -0x37(%rsi),%xmm1
   17eaa:	4c 8b 4e d9          	mov    -0x27(%rsi),%r9
   17eae:	4c 8b 56 e1          	mov    -0x1f(%rsi),%r10
   17eb2:	4c 8b 5e e9          	mov    -0x17(%rsi),%r11
   17eb6:	48 8b 4e f1          	mov    -0xf(%rsi),%rcx
   17eba:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17ebe:	f3 0f 7f 47 b9       	movdqu %xmm0,-0x47(%rdi)
   17ec3:	f3 0f 7f 4f c9       	movdqu %xmm1,-0x37(%rdi)
   17ec8:	4c 89 4f d9          	mov    %r9,-0x27(%rdi)
   17ecc:	4c 89 57 e1          	mov    %r10,-0x1f(%rdi)
   17ed0:	4c 89 5f e9          	mov    %r11,-0x17(%rdi)
   17ed4:	48 89 4f f1          	mov    %rcx,-0xf(%rdi)
   17ed8:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17edc:	c3                   	retq   
   17edd:	0f 1f 00             	nopl   (%rax)
   17ee0:	f3 0f 6f 46 c1       	movdqu -0x3f(%rsi),%xmm0
   17ee5:	4c 8b 46 d1          	mov    -0x2f(%rsi),%r8
   17ee9:	4c 8b 4e d9          	mov    -0x27(%rsi),%r9
   17eed:	4c 8b 56 e1          	mov    -0x1f(%rsi),%r10
   17ef1:	4c 8b 5e e9          	mov    -0x17(%rsi),%r11
   17ef5:	48 8b 4e f1          	mov    -0xf(%rsi),%rcx
   17ef9:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17efd:	f3 0f 7f 47 c1       	movdqu %xmm0,-0x3f(%rdi)
   17f02:	4c 89 47 d1          	mov    %r8,-0x2f(%rdi)
   17f06:	4c 89 4f d9          	mov    %r9,-0x27(%rdi)
   17f0a:	4c 89 57 e1          	mov    %r10,-0x1f(%rdi)
   17f0e:	4c 89 5f e9          	mov    %r11,-0x17(%rdi)
   17f12:	48 89 4f f1          	mov    %rcx,-0xf(%rdi)
   17f16:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17f1a:	c3                   	retq   
   17f1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17f20:	f3 0f 6f 46 c9       	movdqu -0x37(%rsi),%xmm0
   17f25:	4c 8b 4e d9          	mov    -0x27(%rsi),%r9
   17f29:	4c 8b 56 e1          	mov    -0x1f(%rsi),%r10
   17f2d:	4c 8b 5e e9          	mov    -0x17(%rsi),%r11
   17f31:	48 8b 4e f1          	mov    -0xf(%rsi),%rcx
   17f35:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17f39:	f3 0f 7f 47 c9       	movdqu %xmm0,-0x37(%rdi)
   17f3e:	4c 89 4f d9          	mov    %r9,-0x27(%rdi)
   17f42:	4c 89 57 e1          	mov    %r10,-0x1f(%rdi)
   17f46:	4c 89 5f e9          	mov    %r11,-0x17(%rdi)
   17f4a:	48 89 4f f1          	mov    %rcx,-0xf(%rdi)
   17f4e:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17f52:	c3                   	retq   
   17f53:	0f 1f 00             	nopl   (%rax)
   17f56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17f5d:	00 00 00 
   17f60:	4c 8b 46 d1          	mov    -0x2f(%rsi),%r8
   17f64:	4c 8b 4e d9          	mov    -0x27(%rsi),%r9
   17f68:	4c 8b 56 e1          	mov    -0x1f(%rsi),%r10
   17f6c:	4c 8b 5e e9          	mov    -0x17(%rsi),%r11
   17f70:	48 8b 4e f1          	mov    -0xf(%rsi),%rcx
   17f74:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17f78:	4c 89 47 d1          	mov    %r8,-0x2f(%rdi)
   17f7c:	4c 89 4f d9          	mov    %r9,-0x27(%rdi)
   17f80:	4c 89 57 e1          	mov    %r10,-0x1f(%rdi)
   17f84:	4c 89 5f e9          	mov    %r11,-0x17(%rdi)
   17f88:	48 89 4f f1          	mov    %rcx,-0xf(%rdi)
   17f8c:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17f90:	c3                   	retq   
   17f91:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17f96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17f9d:	00 00 00 
   17fa0:	4c 8b 4e d9          	mov    -0x27(%rsi),%r9
   17fa4:	4c 8b 56 e1          	mov    -0x1f(%rsi),%r10
   17fa8:	4c 8b 5e e9          	mov    -0x17(%rsi),%r11
   17fac:	48 8b 4e f1          	mov    -0xf(%rsi),%rcx
   17fb0:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17fb4:	4c 89 4f d9          	mov    %r9,-0x27(%rdi)
   17fb8:	4c 89 57 e1          	mov    %r10,-0x1f(%rdi)
   17fbc:	4c 89 5f e9          	mov    %r11,-0x17(%rdi)
   17fc0:	48 89 4f f1          	mov    %rcx,-0xf(%rdi)
   17fc4:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17fc8:	c3                   	retq   
   17fc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   17fd0:	4c 8b 56 e1          	mov    -0x1f(%rsi),%r10
   17fd4:	4c 8b 5e e9          	mov    -0x17(%rsi),%r11
   17fd8:	48 8b 4e f1          	mov    -0xf(%rsi),%rcx
   17fdc:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   17fe0:	4c 89 57 e1          	mov    %r10,-0x1f(%rdi)
   17fe4:	4c 89 5f e9          	mov    %r11,-0x17(%rdi)
   17fe8:	48 89 4f f1          	mov    %rcx,-0xf(%rdi)
   17fec:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   17ff0:	c3                   	retq   
   17ff1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   17ff6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   17ffd:	00 00 00 
   18000:	4c 8b 5e e9          	mov    -0x17(%rsi),%r11
   18004:	48 8b 4e f1          	mov    -0xf(%rsi),%rcx
   18008:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   1800c:	4c 89 5f e9          	mov    %r11,-0x17(%rdi)
   18010:	48 89 4f f1          	mov    %rcx,-0xf(%rdi)
   18014:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   18018:	c3                   	retq   
   18019:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   18020:	48 8b 4e f1          	mov    -0xf(%rsi),%rcx
   18024:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   18028:	48 89 4f f1          	mov    %rcx,-0xf(%rdi)
   1802c:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   18030:	c3                   	retq   
   18031:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   18036:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1803d:	00 00 00 
   18040:	8b 56 f9             	mov    -0x7(%rsi),%edx
   18043:	8b 4e fc             	mov    -0x4(%rsi),%ecx
   18046:	89 57 f9             	mov    %edx,-0x7(%rdi)
   18049:	89 4f fc             	mov    %ecx,-0x4(%rdi)
   1804c:	c3                   	retq   
   1804d:	0f 1f 00             	nopl   (%rax)
   18050:	f3 0f 6f 0e          	movdqu (%rsi),%xmm1
   18054:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   18058:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   1805d:	66 0f e7 0f          	movntdq %xmm1,(%rdi)
   18061:	48 8d 7f 10          	lea    0x10(%rdi),%rdi
   18065:	48 8d 92 70 ff ff ff 	lea    -0x90(%rdx),%rdx
   1806c:	f3 0f 6f 06          	movdqu (%rsi),%xmm0
   18070:	f3 0f 6f 4e 10       	movdqu 0x10(%rsi),%xmm1
   18075:	f3 0f 6f 56 20       	movdqu 0x20(%rsi),%xmm2
   1807a:	f3 0f 6f 5e 30       	movdqu 0x30(%rsi),%xmm3
   1807f:	f3 0f 6f 66 40       	movdqu 0x40(%rsi),%xmm4
   18084:	f3 0f 6f 6e 50       	movdqu 0x50(%rsi),%xmm5
   18089:	f3 0f 6f 76 60       	movdqu 0x60(%rsi),%xmm6
   1808e:	f3 0f 6f 7e 70       	movdqu 0x70(%rsi),%xmm7
   18093:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   1809a:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   180a1:	66 0f e7 07          	movntdq %xmm0,(%rdi)
   180a5:	66 0f e7 4f 10       	movntdq %xmm1,0x10(%rdi)
   180aa:	66 0f e7 57 20       	movntdq %xmm2,0x20(%rdi)
   180af:	66 0f e7 5f 30       	movntdq %xmm3,0x30(%rdi)
   180b4:	66 0f e7 67 40       	movntdq %xmm4,0x40(%rdi)
   180b9:	66 0f e7 6f 50       	movntdq %xmm5,0x50(%rdi)
   180be:	66 0f e7 77 60       	movntdq %xmm6,0x60(%rdi)
   180c3:	66 0f e7 7f 70       	movntdq %xmm7,0x70(%rdi)
   180c8:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   180cf:	73 9b                	jae    1806c <__intel_ssse3_memcpy+0x282c>
   180d1:	48 83 fa c0          	cmp    $0xffffffffffffffc0,%rdx
   180d5:	48 8d 92 80 00 00 00 	lea    0x80(%rdx),%rdx
   180dc:	7c 32                	jl     18110 <__intel_ssse3_memcpy+0x28d0>
   180de:	f3 0f 6f 06          	movdqu (%rsi),%xmm0
   180e2:	f3 0f 6f 4e 10       	movdqu 0x10(%rsi),%xmm1
   180e7:	f3 0f 6f 56 20       	movdqu 0x20(%rsi),%xmm2
   180ec:	f3 0f 6f 5e 30       	movdqu 0x30(%rsi),%xmm3
   180f1:	48 8d 76 40          	lea    0x40(%rsi),%rsi
   180f5:	66 0f e7 07          	movntdq %xmm0,(%rdi)
   180f9:	66 0f e7 4f 10       	movntdq %xmm1,0x10(%rdi)
   180fe:	66 0f e7 57 20       	movntdq %xmm2,0x20(%rdi)
   18103:	66 0f e7 5f 30       	movntdq %xmm3,0x30(%rdi)
   18108:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   1810c:	48 83 ea 40          	sub    $0x40,%rdx
   18110:	48 01 d6             	add    %rdx,%rsi
   18113:	48 01 d7             	add    %rdx,%rdi
   18116:	0f ae f8             	sfence 
   18119:	4c 8d 1d e0 80 01 00 	lea    0x180e0(%rip),%r11        # 30200 <__func__.2393+0x7>
   18120:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18124:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18128:	3e ff e2             	notrack jmpq *%rdx
   1812b:	0f 0b                	ud2    
   1812d:	0f 1f 00             	nopl   (%rax)
   18130:	f3 0f 6f 4e f0       	movdqu -0x10(%rsi),%xmm1
   18135:	48 8d 76 f0          	lea    -0x10(%rsi),%rsi
   18139:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   1813e:	66 0f 7f 4f f0       	movdqa %xmm1,-0x10(%rdi)
   18143:	48 8d 7f f0          	lea    -0x10(%rdi),%rdi
   18147:	48 8d 92 70 ff ff ff 	lea    -0x90(%rdx),%rdx
   1814e:	f3 0f 6f 46 f0       	movdqu -0x10(%rsi),%xmm0
   18153:	f3 0f 6f 4e e0       	movdqu -0x20(%rsi),%xmm1
   18158:	f3 0f 6f 56 d0       	movdqu -0x30(%rsi),%xmm2
   1815d:	f3 0f 6f 5e c0       	movdqu -0x40(%rsi),%xmm3
   18162:	f3 0f 6f 66 b0       	movdqu -0x50(%rsi),%xmm4
   18167:	f3 0f 6f 6e a0       	movdqu -0x60(%rsi),%xmm5
   1816c:	f3 0f 6f 76 90       	movdqu -0x70(%rsi),%xmm6
   18171:	f3 0f 6f 7e 80       	movdqu -0x80(%rsi),%xmm7
   18176:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   1817a:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18181:	66 0f e7 47 f0       	movntdq %xmm0,-0x10(%rdi)
   18186:	66 0f e7 4f e0       	movntdq %xmm1,-0x20(%rdi)
   1818b:	66 0f e7 57 d0       	movntdq %xmm2,-0x30(%rdi)
   18190:	66 0f e7 5f c0       	movntdq %xmm3,-0x40(%rdi)
   18195:	66 0f e7 67 b0       	movntdq %xmm4,-0x50(%rdi)
   1819a:	66 0f e7 6f a0       	movntdq %xmm5,-0x60(%rdi)
   1819f:	66 0f e7 77 90       	movntdq %xmm6,-0x70(%rdi)
   181a4:	66 0f e7 7f 80       	movntdq %xmm7,-0x80(%rdi)
   181a9:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   181ad:	73 9f                	jae    1814e <__intel_ssse3_memcpy+0x290e>
   181af:	48 83 fa c0          	cmp    $0xffffffffffffffc0,%rdx
   181b3:	48 8d 92 80 00 00 00 	lea    0x80(%rdx),%rdx
   181ba:	7c 34                	jl     181f0 <__intel_ssse3_memcpy+0x29b0>
   181bc:	f3 0f 6f 46 f0       	movdqu -0x10(%rsi),%xmm0
   181c1:	f3 0f 6f 4e e0       	movdqu -0x20(%rsi),%xmm1
   181c6:	f3 0f 6f 56 d0       	movdqu -0x30(%rsi),%xmm2
   181cb:	f3 0f 6f 5e c0       	movdqu -0x40(%rsi),%xmm3
   181d0:	48 8d 76 c0          	lea    -0x40(%rsi),%rsi
   181d4:	66 0f e7 47 f0       	movntdq %xmm0,-0x10(%rdi)
   181d9:	66 0f e7 4f e0       	movntdq %xmm1,-0x20(%rdi)
   181de:	66 0f e7 57 d0       	movntdq %xmm2,-0x30(%rdi)
   181e3:	66 0f e7 5f c0       	movntdq %xmm3,-0x40(%rdi)
   181e8:	48 8d 7f c0          	lea    -0x40(%rdi),%rdi
   181ec:	48 83 ea 40          	sub    $0x40,%rdx
   181f0:	0f ae f8             	sfence 
   181f3:	4c 8d 1d 06 80 01 00 	lea    0x18006(%rip),%r11        # 30200 <__func__.2393+0x7>
   181fa:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   181fe:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18202:	3e ff e2             	notrack jmpq *%rdx
   18205:	0f 0b                	ud2    
   18207:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1820e:	00 00 

0000000000018210 <__intel_ssse3_rep_memcpy>:
   18210:	48 89 f8             	mov    %rdi,%rax
   18213:	48 81 fa 90 00 00 00 	cmp    $0x90,%rdx
   1821a:	73 34                	jae    18250 <__intel_ssse3_rep_memcpy+0x40>
   1821c:	40 38 fe             	cmp    %dil,%sil
   1821f:	76 1a                	jbe    1823b <__intel_ssse3_rep_memcpy+0x2b>
   18221:	48 01 d6             	add    %rdx,%rsi
   18224:	48 01 d7             	add    %rdx,%rdi
   18227:	4c 8d 1d d2 83 01 00 	lea    0x183d2(%rip),%r11        # 30600 <__func__.2393+0x407>
   1822e:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18232:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18236:	3e ff e2             	notrack jmpq *%rdx
   18239:	0f 0b                	ud2    
   1823b:	4c 8d 1d 7e 81 01 00 	lea    0x1817e(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   18242:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18246:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   1824a:	3e ff e2             	notrack jmpq *%rdx
   1824d:	0f 0b                	ud2    
   1824f:	90                   	nop
   18250:	40 38 fe             	cmp    %dil,%sil
   18253:	7e 5b                	jle    182b0 <__intel_ssse3_rep_memcpy+0xa0>
   18255:	f3 0f 6f 06          	movdqu (%rsi),%xmm0
   18259:	49 89 f8             	mov    %rdi,%r8
   1825c:	48 83 e7 f0          	and    $0xfffffffffffffff0,%rdi
   18260:	48 83 c7 10          	add    $0x10,%rdi
   18264:	49 89 f9             	mov    %rdi,%r9
   18267:	4d 29 c1             	sub    %r8,%r9
   1826a:	4c 29 ca             	sub    %r9,%rdx
   1826d:	4c 01 ce             	add    %r9,%rsi
   18270:	49 89 f1             	mov    %rsi,%r9
   18273:	49 83 e1 0f          	and    $0xf,%r9
   18277:	0f 84 93 00 00 00    	je     18310 <__intel_ssse3_rep_memcpy+0x100>
   1827d:	8b 0d 09 d6 21 00    	mov    0x21d609(%rip),%ecx        # 23588c <__libirc_data_cache_size>
   18283:	48 39 ca             	cmp    %rcx,%rdx
   18286:	0f 83 24 18 00 00    	jae    19ab0 <__intel_ssse3_rep_memcpy+0x18a0>
   1828c:	4c 8d 1d ad 85 01 00 	lea    0x185ad(%rip),%r11        # 30840 <__func__.2393+0x647>
   18293:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   1829a:	4f 63 0c 8b          	movslq (%r11,%r9,4),%r9
   1829e:	4d 01 d9             	add    %r11,%r9
   182a1:	3e 41 ff e1          	notrack jmpq *%r9
   182a5:	0f 0b                	ud2    
   182a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   182ae:	00 00 
   182b0:	8b 0d d6 d5 21 00    	mov    0x21d5d6(%rip),%ecx        # 23588c <__libirc_data_cache_size>
   182b6:	48 d1 e1             	shl    %rcx
   182b9:	48 39 ca             	cmp    %rcx,%rdx
   182bc:	0f 87 7e 19 00 00    	ja     19c40 <__intel_ssse3_rep_memcpy+0x1a30>
   182c2:	48 01 d7             	add    %rdx,%rdi
   182c5:	48 01 d6             	add    %rdx,%rsi
   182c8:	f3 0f 6f 46 f0       	movdqu -0x10(%rsi),%xmm0
   182cd:	4c 8d 47 f0          	lea    -0x10(%rdi),%r8
   182d1:	49 89 f9             	mov    %rdi,%r9
   182d4:	49 83 e1 0f          	and    $0xf,%r9
   182d8:	4c 31 cf             	xor    %r9,%rdi
   182db:	4c 29 ce             	sub    %r9,%rsi
   182de:	4c 29 ca             	sub    %r9,%rdx
   182e1:	49 89 f1             	mov    %rsi,%r9
   182e4:	49 83 e1 0f          	and    $0xf,%r9
   182e8:	0f 84 c2 00 00 00    	je     183b0 <__intel_ssse3_rep_memcpy+0x1a0>
   182ee:	4c 8d 1d 8b 85 01 00 	lea    0x1858b(%rip),%r11        # 30880 <__func__.2393+0x687>
   182f5:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   182fc:	4f 63 0c 8b          	movslq (%r11,%r9,4),%r9
   18300:	4d 01 d9             	add    %r11,%r9
   18303:	3e 41 ff e1          	notrack jmpq *%r9
   18307:	0f 0b                	ud2    
   18309:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   18310:	49 89 d1             	mov    %rdx,%r9
   18313:	49 c1 e9 08          	shr    $0x8,%r9
   18317:	49 01 d1             	add    %rdx,%r9
   1831a:	8b 0d 70 d5 21 00    	mov    0x21d570(%rip),%ecx        # 235890 <__libirc_data_cache_size_half>
   18320:	49 39 c9             	cmp    %rcx,%r9
   18323:	0f 83 87 17 00 00    	jae    19ab0 <__intel_ssse3_rep_memcpy+0x18a0>
   18329:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18330:	66 0f 6f 0e          	movdqa (%rsi),%xmm1
   18334:	66 0f 7f 0f          	movdqa %xmm1,(%rdi)
   18338:	0f 28 56 10          	movaps 0x10(%rsi),%xmm2
   1833c:	0f 29 57 10          	movaps %xmm2,0x10(%rdi)
   18340:	0f 28 5e 20          	movaps 0x20(%rsi),%xmm3
   18344:	0f 29 5f 20          	movaps %xmm3,0x20(%rdi)
   18348:	0f 28 66 30          	movaps 0x30(%rsi),%xmm4
   1834c:	0f 29 67 30          	movaps %xmm4,0x30(%rdi)
   18350:	0f 28 4e 40          	movaps 0x40(%rsi),%xmm1
   18354:	0f 29 4f 40          	movaps %xmm1,0x40(%rdi)
   18358:	0f 28 56 50          	movaps 0x50(%rsi),%xmm2
   1835c:	0f 29 57 50          	movaps %xmm2,0x50(%rdi)
   18360:	0f 28 5e 60          	movaps 0x60(%rsi),%xmm3
   18364:	0f 29 5f 60          	movaps %xmm3,0x60(%rdi)
   18368:	0f 28 66 70          	movaps 0x70(%rsi),%xmm4
   1836c:	0f 29 67 70          	movaps %xmm4,0x70(%rdi)
   18370:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18377:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   1837e:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   18385:	73 a9                	jae    18330 <__intel_ssse3_rep_memcpy+0x120>
   18387:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   1838c:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18393:	48 01 d6             	add    %rdx,%rsi
   18396:	48 01 d7             	add    %rdx,%rdi
   18399:	4c 8d 1d 60 82 01 00 	lea    0x18260(%rip),%r11        # 30600 <__func__.2393+0x407>
   183a0:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   183a4:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   183a8:	3e ff e2             	notrack jmpq *%rdx
   183ab:	0f 0b                	ud2    
   183ad:	0f 1f 00             	nopl   (%rax)
   183b0:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   183b7:	0f 28 4e f0          	movaps -0x10(%rsi),%xmm1
   183bb:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   183bf:	0f 28 56 e0          	movaps -0x20(%rsi),%xmm2
   183c3:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   183c7:	0f 28 5e d0          	movaps -0x30(%rsi),%xmm3
   183cb:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   183cf:	0f 28 66 c0          	movaps -0x40(%rsi),%xmm4
   183d3:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   183d7:	0f 28 6e b0          	movaps -0x50(%rsi),%xmm5
   183db:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   183df:	0f 28 6e a0          	movaps -0x60(%rsi),%xmm5
   183e3:	0f 29 6f a0          	movaps %xmm5,-0x60(%rdi)
   183e7:	0f 28 6e 90          	movaps -0x70(%rsi),%xmm5
   183eb:	0f 29 6f 90          	movaps %xmm5,-0x70(%rdi)
   183ef:	0f 28 6e 80          	movaps -0x80(%rsi),%xmm5
   183f3:	0f 29 6f 80          	movaps %xmm5,-0x80(%rdi)
   183f7:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   183fe:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   18402:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   18406:	73 af                	jae    183b7 <__intel_ssse3_rep_memcpy+0x1a7>
   18408:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   1840d:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18414:	48 29 d7             	sub    %rdx,%rdi
   18417:	48 29 d6             	sub    %rdx,%rsi
   1841a:	4c 8d 1d 9f 7f 01 00 	lea    0x17f9f(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   18421:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18425:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18429:	3e ff e2             	notrack jmpq *%rdx
   1842c:	0f 0b                	ud2    
   1842e:	66 90                	xchg   %ax,%ax
   18430:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18437:	0f 28 4e ff          	movaps -0x1(%rsi),%xmm1
   1843b:	0f 28 56 0f          	movaps 0xf(%rsi),%xmm2
   1843f:	0f 28 5e 1f          	movaps 0x1f(%rsi),%xmm3
   18443:	0f 28 66 2f          	movaps 0x2f(%rsi),%xmm4
   18447:	0f 28 6e 3f          	movaps 0x3f(%rsi),%xmm5
   1844b:	0f 28 76 4f          	movaps 0x4f(%rsi),%xmm6
   1844f:	0f 28 7e 5f          	movaps 0x5f(%rsi),%xmm7
   18453:	44 0f 28 46 6f       	movaps 0x6f(%rsi),%xmm8
   18458:	44 0f 28 4e 7f       	movaps 0x7f(%rsi),%xmm9
   1845d:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   18464:	66 45 0f 3a 0f c8 01 	palignr $0x1,%xmm8,%xmm9
   1846b:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   18470:	66 44 0f 3a 0f c7 01 	palignr $0x1,%xmm7,%xmm8
   18477:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   1847c:	66 0f 3a 0f fe 01    	palignr $0x1,%xmm6,%xmm7
   18482:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   18486:	66 0f 3a 0f f5 01    	palignr $0x1,%xmm5,%xmm6
   1848c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   18490:	66 0f 3a 0f ec 01    	palignr $0x1,%xmm4,%xmm5
   18496:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1849a:	66 0f 3a 0f e3 01    	palignr $0x1,%xmm3,%xmm4
   184a0:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   184a4:	66 0f 3a 0f da 01    	palignr $0x1,%xmm2,%xmm3
   184aa:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   184ae:	66 0f 3a 0f d1 01    	palignr $0x1,%xmm1,%xmm2
   184b4:	0f 29 17             	movaps %xmm2,(%rdi)
   184b7:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   184be:	0f 83 6c ff ff ff    	jae    18430 <__intel_ssse3_rep_memcpy+0x220>
   184c4:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   184c9:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   184d0:	48 01 d7             	add    %rdx,%rdi
   184d3:	48 01 d6             	add    %rdx,%rsi
   184d6:	4c 8d 1d 23 81 01 00 	lea    0x18123(%rip),%r11        # 30600 <__func__.2393+0x407>
   184dd:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   184e1:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   184e5:	3e ff e2             	notrack jmpq *%rdx
   184e8:	0f 0b                	ud2    
   184ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   184f0:	0f 28 4e ff          	movaps -0x1(%rsi),%xmm1
   184f4:	0f 28 56 ef          	movaps -0x11(%rsi),%xmm2
   184f8:	66 0f 3a 0f ca 01    	palignr $0x1,%xmm2,%xmm1
   184fe:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   18502:	0f 28 5e df          	movaps -0x21(%rsi),%xmm3
   18506:	66 0f 3a 0f d3 01    	palignr $0x1,%xmm3,%xmm2
   1850c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   18510:	0f 28 66 cf          	movaps -0x31(%rsi),%xmm4
   18514:	66 0f 3a 0f dc 01    	palignr $0x1,%xmm4,%xmm3
   1851a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1851e:	0f 28 6e bf          	movaps -0x41(%rsi),%xmm5
   18522:	66 0f 3a 0f e5 01    	palignr $0x1,%xmm5,%xmm4
   18528:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   1852c:	0f 28 76 af          	movaps -0x51(%rsi),%xmm6
   18530:	66 0f 3a 0f ee 01    	palignr $0x1,%xmm6,%xmm5
   18536:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   1853a:	0f 28 7e 9f          	movaps -0x61(%rsi),%xmm7
   1853e:	66 0f 3a 0f f7 01    	palignr $0x1,%xmm7,%xmm6
   18544:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   18548:	44 0f 28 46 8f       	movaps -0x71(%rsi),%xmm8
   1854d:	66 41 0f 3a 0f f8 01 	palignr $0x1,%xmm8,%xmm7
   18554:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   18558:	44 0f 28 8e 7f ff ff 	movaps -0x81(%rsi),%xmm9
   1855f:	ff 
   18560:	66 45 0f 3a 0f c1 01 	palignr $0x1,%xmm9,%xmm8
   18567:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   1856c:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18573:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   18577:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   1857b:	0f 83 6f ff ff ff    	jae    184f0 <__intel_ssse3_rep_memcpy+0x2e0>
   18581:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18586:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   1858d:	48 29 d7             	sub    %rdx,%rdi
   18590:	48 29 d6             	sub    %rdx,%rsi
   18593:	4c 8d 1d 26 7e 01 00 	lea    0x17e26(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   1859a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1859e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   185a2:	3e ff e2             	notrack jmpq *%rdx
   185a5:	0f 0b                	ud2    
   185a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   185ae:	00 00 
   185b0:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   185b7:	0f 28 4e fe          	movaps -0x2(%rsi),%xmm1
   185bb:	0f 28 56 0e          	movaps 0xe(%rsi),%xmm2
   185bf:	0f 28 5e 1e          	movaps 0x1e(%rsi),%xmm3
   185c3:	0f 28 66 2e          	movaps 0x2e(%rsi),%xmm4
   185c7:	0f 28 6e 3e          	movaps 0x3e(%rsi),%xmm5
   185cb:	0f 28 76 4e          	movaps 0x4e(%rsi),%xmm6
   185cf:	0f 28 7e 5e          	movaps 0x5e(%rsi),%xmm7
   185d3:	44 0f 28 46 6e       	movaps 0x6e(%rsi),%xmm8
   185d8:	44 0f 28 4e 7e       	movaps 0x7e(%rsi),%xmm9
   185dd:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   185e4:	66 45 0f 3a 0f c8 02 	palignr $0x2,%xmm8,%xmm9
   185eb:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   185f0:	66 44 0f 3a 0f c7 02 	palignr $0x2,%xmm7,%xmm8
   185f7:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   185fc:	66 0f 3a 0f fe 02    	palignr $0x2,%xmm6,%xmm7
   18602:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   18606:	66 0f 3a 0f f5 02    	palignr $0x2,%xmm5,%xmm6
   1860c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   18610:	66 0f 3a 0f ec 02    	palignr $0x2,%xmm4,%xmm5
   18616:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1861a:	66 0f 3a 0f e3 02    	palignr $0x2,%xmm3,%xmm4
   18620:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   18624:	66 0f 3a 0f da 02    	palignr $0x2,%xmm2,%xmm3
   1862a:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   1862e:	66 0f 3a 0f d1 02    	palignr $0x2,%xmm1,%xmm2
   18634:	0f 29 17             	movaps %xmm2,(%rdi)
   18637:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   1863e:	0f 83 6c ff ff ff    	jae    185b0 <__intel_ssse3_rep_memcpy+0x3a0>
   18644:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18649:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18650:	48 01 d7             	add    %rdx,%rdi
   18653:	48 01 d6             	add    %rdx,%rsi
   18656:	4c 8d 1d a3 7f 01 00 	lea    0x17fa3(%rip),%r11        # 30600 <__func__.2393+0x407>
   1865d:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18661:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18665:	3e ff e2             	notrack jmpq *%rdx
   18668:	0f 0b                	ud2    
   1866a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   18670:	0f 28 4e fe          	movaps -0x2(%rsi),%xmm1
   18674:	0f 28 56 ee          	movaps -0x12(%rsi),%xmm2
   18678:	66 0f 3a 0f ca 02    	palignr $0x2,%xmm2,%xmm1
   1867e:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   18682:	0f 28 5e de          	movaps -0x22(%rsi),%xmm3
   18686:	66 0f 3a 0f d3 02    	palignr $0x2,%xmm3,%xmm2
   1868c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   18690:	0f 28 66 ce          	movaps -0x32(%rsi),%xmm4
   18694:	66 0f 3a 0f dc 02    	palignr $0x2,%xmm4,%xmm3
   1869a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1869e:	0f 28 6e be          	movaps -0x42(%rsi),%xmm5
   186a2:	66 0f 3a 0f e5 02    	palignr $0x2,%xmm5,%xmm4
   186a8:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   186ac:	0f 28 76 ae          	movaps -0x52(%rsi),%xmm6
   186b0:	66 0f 3a 0f ee 02    	palignr $0x2,%xmm6,%xmm5
   186b6:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   186ba:	0f 28 7e 9e          	movaps -0x62(%rsi),%xmm7
   186be:	66 0f 3a 0f f7 02    	palignr $0x2,%xmm7,%xmm6
   186c4:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   186c8:	44 0f 28 46 8e       	movaps -0x72(%rsi),%xmm8
   186cd:	66 41 0f 3a 0f f8 02 	palignr $0x2,%xmm8,%xmm7
   186d4:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   186d8:	44 0f 28 8e 7e ff ff 	movaps -0x82(%rsi),%xmm9
   186df:	ff 
   186e0:	66 45 0f 3a 0f c1 02 	palignr $0x2,%xmm9,%xmm8
   186e7:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   186ec:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   186f3:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   186f7:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   186fb:	0f 83 6f ff ff ff    	jae    18670 <__intel_ssse3_rep_memcpy+0x460>
   18701:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18706:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   1870d:	48 29 d7             	sub    %rdx,%rdi
   18710:	48 29 d6             	sub    %rdx,%rsi
   18713:	4c 8d 1d a6 7c 01 00 	lea    0x17ca6(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   1871a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1871e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18722:	3e ff e2             	notrack jmpq *%rdx
   18725:	0f 0b                	ud2    
   18727:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1872e:	00 00 
   18730:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18737:	0f 28 4e fd          	movaps -0x3(%rsi),%xmm1
   1873b:	0f 28 56 0d          	movaps 0xd(%rsi),%xmm2
   1873f:	0f 28 5e 1d          	movaps 0x1d(%rsi),%xmm3
   18743:	0f 28 66 2d          	movaps 0x2d(%rsi),%xmm4
   18747:	0f 28 6e 3d          	movaps 0x3d(%rsi),%xmm5
   1874b:	0f 28 76 4d          	movaps 0x4d(%rsi),%xmm6
   1874f:	0f 28 7e 5d          	movaps 0x5d(%rsi),%xmm7
   18753:	44 0f 28 46 6d       	movaps 0x6d(%rsi),%xmm8
   18758:	44 0f 28 4e 7d       	movaps 0x7d(%rsi),%xmm9
   1875d:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   18764:	66 45 0f 3a 0f c8 03 	palignr $0x3,%xmm8,%xmm9
   1876b:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   18770:	66 44 0f 3a 0f c7 03 	palignr $0x3,%xmm7,%xmm8
   18777:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   1877c:	66 0f 3a 0f fe 03    	palignr $0x3,%xmm6,%xmm7
   18782:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   18786:	66 0f 3a 0f f5 03    	palignr $0x3,%xmm5,%xmm6
   1878c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   18790:	66 0f 3a 0f ec 03    	palignr $0x3,%xmm4,%xmm5
   18796:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1879a:	66 0f 3a 0f e3 03    	palignr $0x3,%xmm3,%xmm4
   187a0:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   187a4:	66 0f 3a 0f da 03    	palignr $0x3,%xmm2,%xmm3
   187aa:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   187ae:	66 0f 3a 0f d1 03    	palignr $0x3,%xmm1,%xmm2
   187b4:	0f 29 17             	movaps %xmm2,(%rdi)
   187b7:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   187be:	0f 83 6c ff ff ff    	jae    18730 <__intel_ssse3_rep_memcpy+0x520>
   187c4:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   187c9:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   187d0:	48 01 d7             	add    %rdx,%rdi
   187d3:	48 01 d6             	add    %rdx,%rsi
   187d6:	4c 8d 1d 23 7e 01 00 	lea    0x17e23(%rip),%r11        # 30600 <__func__.2393+0x407>
   187dd:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   187e1:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   187e5:	3e ff e2             	notrack jmpq *%rdx
   187e8:	0f 0b                	ud2    
   187ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   187f0:	0f 28 4e fd          	movaps -0x3(%rsi),%xmm1
   187f4:	0f 28 56 ed          	movaps -0x13(%rsi),%xmm2
   187f8:	66 0f 3a 0f ca 03    	palignr $0x3,%xmm2,%xmm1
   187fe:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   18802:	0f 28 5e dd          	movaps -0x23(%rsi),%xmm3
   18806:	66 0f 3a 0f d3 03    	palignr $0x3,%xmm3,%xmm2
   1880c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   18810:	0f 28 66 cd          	movaps -0x33(%rsi),%xmm4
   18814:	66 0f 3a 0f dc 03    	palignr $0x3,%xmm4,%xmm3
   1881a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1881e:	0f 28 6e bd          	movaps -0x43(%rsi),%xmm5
   18822:	66 0f 3a 0f e5 03    	palignr $0x3,%xmm5,%xmm4
   18828:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   1882c:	0f 28 76 ad          	movaps -0x53(%rsi),%xmm6
   18830:	66 0f 3a 0f ee 03    	palignr $0x3,%xmm6,%xmm5
   18836:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   1883a:	0f 28 7e 9d          	movaps -0x63(%rsi),%xmm7
   1883e:	66 0f 3a 0f f7 03    	palignr $0x3,%xmm7,%xmm6
   18844:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   18848:	44 0f 28 46 8d       	movaps -0x73(%rsi),%xmm8
   1884d:	66 41 0f 3a 0f f8 03 	palignr $0x3,%xmm8,%xmm7
   18854:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   18858:	44 0f 28 8e 7d ff ff 	movaps -0x83(%rsi),%xmm9
   1885f:	ff 
   18860:	66 45 0f 3a 0f c1 03 	palignr $0x3,%xmm9,%xmm8
   18867:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   1886c:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18873:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   18877:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   1887b:	0f 83 6f ff ff ff    	jae    187f0 <__intel_ssse3_rep_memcpy+0x5e0>
   18881:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18886:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   1888d:	48 29 d7             	sub    %rdx,%rdi
   18890:	48 29 d6             	sub    %rdx,%rsi
   18893:	4c 8d 1d 26 7b 01 00 	lea    0x17b26(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   1889a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1889e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   188a2:	3e ff e2             	notrack jmpq *%rdx
   188a5:	0f 0b                	ud2    
   188a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   188ae:	00 00 
   188b0:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   188b7:	0f 28 4e fc          	movaps -0x4(%rsi),%xmm1
   188bb:	0f 28 56 0c          	movaps 0xc(%rsi),%xmm2
   188bf:	0f 28 5e 1c          	movaps 0x1c(%rsi),%xmm3
   188c3:	0f 28 66 2c          	movaps 0x2c(%rsi),%xmm4
   188c7:	0f 28 6e 3c          	movaps 0x3c(%rsi),%xmm5
   188cb:	0f 28 76 4c          	movaps 0x4c(%rsi),%xmm6
   188cf:	0f 28 7e 5c          	movaps 0x5c(%rsi),%xmm7
   188d3:	44 0f 28 46 6c       	movaps 0x6c(%rsi),%xmm8
   188d8:	44 0f 28 4e 7c       	movaps 0x7c(%rsi),%xmm9
   188dd:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   188e4:	66 45 0f 3a 0f c8 04 	palignr $0x4,%xmm8,%xmm9
   188eb:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   188f0:	66 44 0f 3a 0f c7 04 	palignr $0x4,%xmm7,%xmm8
   188f7:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   188fc:	66 0f 3a 0f fe 04    	palignr $0x4,%xmm6,%xmm7
   18902:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   18906:	66 0f 3a 0f f5 04    	palignr $0x4,%xmm5,%xmm6
   1890c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   18910:	66 0f 3a 0f ec 04    	palignr $0x4,%xmm4,%xmm5
   18916:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1891a:	66 0f 3a 0f e3 04    	palignr $0x4,%xmm3,%xmm4
   18920:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   18924:	66 0f 3a 0f da 04    	palignr $0x4,%xmm2,%xmm3
   1892a:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   1892e:	66 0f 3a 0f d1 04    	palignr $0x4,%xmm1,%xmm2
   18934:	0f 29 17             	movaps %xmm2,(%rdi)
   18937:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   1893e:	0f 83 6c ff ff ff    	jae    188b0 <__intel_ssse3_rep_memcpy+0x6a0>
   18944:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18949:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18950:	48 01 d7             	add    %rdx,%rdi
   18953:	48 01 d6             	add    %rdx,%rsi
   18956:	4c 8d 1d a3 7c 01 00 	lea    0x17ca3(%rip),%r11        # 30600 <__func__.2393+0x407>
   1895d:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18961:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18965:	3e ff e2             	notrack jmpq *%rdx
   18968:	0f 0b                	ud2    
   1896a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   18970:	0f 28 4e fc          	movaps -0x4(%rsi),%xmm1
   18974:	0f 28 56 ec          	movaps -0x14(%rsi),%xmm2
   18978:	66 0f 3a 0f ca 04    	palignr $0x4,%xmm2,%xmm1
   1897e:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   18982:	0f 28 5e dc          	movaps -0x24(%rsi),%xmm3
   18986:	66 0f 3a 0f d3 04    	palignr $0x4,%xmm3,%xmm2
   1898c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   18990:	0f 28 66 cc          	movaps -0x34(%rsi),%xmm4
   18994:	66 0f 3a 0f dc 04    	palignr $0x4,%xmm4,%xmm3
   1899a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1899e:	0f 28 6e bc          	movaps -0x44(%rsi),%xmm5
   189a2:	66 0f 3a 0f e5 04    	palignr $0x4,%xmm5,%xmm4
   189a8:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   189ac:	0f 28 76 ac          	movaps -0x54(%rsi),%xmm6
   189b0:	66 0f 3a 0f ee 04    	palignr $0x4,%xmm6,%xmm5
   189b6:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   189ba:	0f 28 7e 9c          	movaps -0x64(%rsi),%xmm7
   189be:	66 0f 3a 0f f7 04    	palignr $0x4,%xmm7,%xmm6
   189c4:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   189c8:	44 0f 28 46 8c       	movaps -0x74(%rsi),%xmm8
   189cd:	66 41 0f 3a 0f f8 04 	palignr $0x4,%xmm8,%xmm7
   189d4:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   189d8:	44 0f 28 8e 7c ff ff 	movaps -0x84(%rsi),%xmm9
   189df:	ff 
   189e0:	66 45 0f 3a 0f c1 04 	palignr $0x4,%xmm9,%xmm8
   189e7:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   189ec:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   189f3:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   189f7:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   189fb:	0f 83 6f ff ff ff    	jae    18970 <__intel_ssse3_rep_memcpy+0x760>
   18a01:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18a06:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18a0d:	48 29 d7             	sub    %rdx,%rdi
   18a10:	48 29 d6             	sub    %rdx,%rsi
   18a13:	4c 8d 1d a6 79 01 00 	lea    0x179a6(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   18a1a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18a1e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18a22:	3e ff e2             	notrack jmpq *%rdx
   18a25:	0f 0b                	ud2    
   18a27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   18a2e:	00 00 
   18a30:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18a37:	0f 28 4e fb          	movaps -0x5(%rsi),%xmm1
   18a3b:	0f 28 56 0b          	movaps 0xb(%rsi),%xmm2
   18a3f:	0f 28 5e 1b          	movaps 0x1b(%rsi),%xmm3
   18a43:	0f 28 66 2b          	movaps 0x2b(%rsi),%xmm4
   18a47:	0f 28 6e 3b          	movaps 0x3b(%rsi),%xmm5
   18a4b:	0f 28 76 4b          	movaps 0x4b(%rsi),%xmm6
   18a4f:	0f 28 7e 5b          	movaps 0x5b(%rsi),%xmm7
   18a53:	44 0f 28 46 6b       	movaps 0x6b(%rsi),%xmm8
   18a58:	44 0f 28 4e 7b       	movaps 0x7b(%rsi),%xmm9
   18a5d:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   18a64:	66 45 0f 3a 0f c8 05 	palignr $0x5,%xmm8,%xmm9
   18a6b:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   18a70:	66 44 0f 3a 0f c7 05 	palignr $0x5,%xmm7,%xmm8
   18a77:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   18a7c:	66 0f 3a 0f fe 05    	palignr $0x5,%xmm6,%xmm7
   18a82:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   18a86:	66 0f 3a 0f f5 05    	palignr $0x5,%xmm5,%xmm6
   18a8c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   18a90:	66 0f 3a 0f ec 05    	palignr $0x5,%xmm4,%xmm5
   18a96:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   18a9a:	66 0f 3a 0f e3 05    	palignr $0x5,%xmm3,%xmm4
   18aa0:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   18aa4:	66 0f 3a 0f da 05    	palignr $0x5,%xmm2,%xmm3
   18aaa:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   18aae:	66 0f 3a 0f d1 05    	palignr $0x5,%xmm1,%xmm2
   18ab4:	0f 29 17             	movaps %xmm2,(%rdi)
   18ab7:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   18abe:	0f 83 6c ff ff ff    	jae    18a30 <__intel_ssse3_rep_memcpy+0x820>
   18ac4:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18ac9:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18ad0:	48 01 d7             	add    %rdx,%rdi
   18ad3:	48 01 d6             	add    %rdx,%rsi
   18ad6:	4c 8d 1d 23 7b 01 00 	lea    0x17b23(%rip),%r11        # 30600 <__func__.2393+0x407>
   18add:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18ae1:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18ae5:	3e ff e2             	notrack jmpq *%rdx
   18ae8:	0f 0b                	ud2    
   18aea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   18af0:	0f 28 4e fb          	movaps -0x5(%rsi),%xmm1
   18af4:	0f 28 56 eb          	movaps -0x15(%rsi),%xmm2
   18af8:	66 0f 3a 0f ca 05    	palignr $0x5,%xmm2,%xmm1
   18afe:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   18b02:	0f 28 5e db          	movaps -0x25(%rsi),%xmm3
   18b06:	66 0f 3a 0f d3 05    	palignr $0x5,%xmm3,%xmm2
   18b0c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   18b10:	0f 28 66 cb          	movaps -0x35(%rsi),%xmm4
   18b14:	66 0f 3a 0f dc 05    	palignr $0x5,%xmm4,%xmm3
   18b1a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   18b1e:	0f 28 6e bb          	movaps -0x45(%rsi),%xmm5
   18b22:	66 0f 3a 0f e5 05    	palignr $0x5,%xmm5,%xmm4
   18b28:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   18b2c:	0f 28 76 ab          	movaps -0x55(%rsi),%xmm6
   18b30:	66 0f 3a 0f ee 05    	palignr $0x5,%xmm6,%xmm5
   18b36:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   18b3a:	0f 28 7e 9b          	movaps -0x65(%rsi),%xmm7
   18b3e:	66 0f 3a 0f f7 05    	palignr $0x5,%xmm7,%xmm6
   18b44:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   18b48:	44 0f 28 46 8b       	movaps -0x75(%rsi),%xmm8
   18b4d:	66 41 0f 3a 0f f8 05 	palignr $0x5,%xmm8,%xmm7
   18b54:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   18b58:	44 0f 28 8e 7b ff ff 	movaps -0x85(%rsi),%xmm9
   18b5f:	ff 
   18b60:	66 45 0f 3a 0f c1 05 	palignr $0x5,%xmm9,%xmm8
   18b67:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   18b6c:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18b73:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   18b77:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   18b7b:	0f 83 6f ff ff ff    	jae    18af0 <__intel_ssse3_rep_memcpy+0x8e0>
   18b81:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18b86:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18b8d:	48 29 d7             	sub    %rdx,%rdi
   18b90:	48 29 d6             	sub    %rdx,%rsi
   18b93:	4c 8d 1d 26 78 01 00 	lea    0x17826(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   18b9a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18b9e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18ba2:	3e ff e2             	notrack jmpq *%rdx
   18ba5:	0f 0b                	ud2    
   18ba7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   18bae:	00 00 
   18bb0:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18bb7:	0f 28 4e fa          	movaps -0x6(%rsi),%xmm1
   18bbb:	0f 28 56 0a          	movaps 0xa(%rsi),%xmm2
   18bbf:	0f 28 5e 1a          	movaps 0x1a(%rsi),%xmm3
   18bc3:	0f 28 66 2a          	movaps 0x2a(%rsi),%xmm4
   18bc7:	0f 28 6e 3a          	movaps 0x3a(%rsi),%xmm5
   18bcb:	0f 28 76 4a          	movaps 0x4a(%rsi),%xmm6
   18bcf:	0f 28 7e 5a          	movaps 0x5a(%rsi),%xmm7
   18bd3:	44 0f 28 46 6a       	movaps 0x6a(%rsi),%xmm8
   18bd8:	44 0f 28 4e 7a       	movaps 0x7a(%rsi),%xmm9
   18bdd:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   18be4:	66 45 0f 3a 0f c8 06 	palignr $0x6,%xmm8,%xmm9
   18beb:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   18bf0:	66 44 0f 3a 0f c7 06 	palignr $0x6,%xmm7,%xmm8
   18bf7:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   18bfc:	66 0f 3a 0f fe 06    	palignr $0x6,%xmm6,%xmm7
   18c02:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   18c06:	66 0f 3a 0f f5 06    	palignr $0x6,%xmm5,%xmm6
   18c0c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   18c10:	66 0f 3a 0f ec 06    	palignr $0x6,%xmm4,%xmm5
   18c16:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   18c1a:	66 0f 3a 0f e3 06    	palignr $0x6,%xmm3,%xmm4
   18c20:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   18c24:	66 0f 3a 0f da 06    	palignr $0x6,%xmm2,%xmm3
   18c2a:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   18c2e:	66 0f 3a 0f d1 06    	palignr $0x6,%xmm1,%xmm2
   18c34:	0f 29 17             	movaps %xmm2,(%rdi)
   18c37:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   18c3e:	0f 83 6c ff ff ff    	jae    18bb0 <__intel_ssse3_rep_memcpy+0x9a0>
   18c44:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18c49:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18c50:	48 01 d7             	add    %rdx,%rdi
   18c53:	48 01 d6             	add    %rdx,%rsi
   18c56:	4c 8d 1d a3 79 01 00 	lea    0x179a3(%rip),%r11        # 30600 <__func__.2393+0x407>
   18c5d:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18c61:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18c65:	3e ff e2             	notrack jmpq *%rdx
   18c68:	0f 0b                	ud2    
   18c6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   18c70:	0f 28 4e fa          	movaps -0x6(%rsi),%xmm1
   18c74:	0f 28 56 ea          	movaps -0x16(%rsi),%xmm2
   18c78:	66 0f 3a 0f ca 06    	palignr $0x6,%xmm2,%xmm1
   18c7e:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   18c82:	0f 28 5e da          	movaps -0x26(%rsi),%xmm3
   18c86:	66 0f 3a 0f d3 06    	palignr $0x6,%xmm3,%xmm2
   18c8c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   18c90:	0f 28 66 ca          	movaps -0x36(%rsi),%xmm4
   18c94:	66 0f 3a 0f dc 06    	palignr $0x6,%xmm4,%xmm3
   18c9a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   18c9e:	0f 28 6e ba          	movaps -0x46(%rsi),%xmm5
   18ca2:	66 0f 3a 0f e5 06    	palignr $0x6,%xmm5,%xmm4
   18ca8:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   18cac:	0f 28 76 aa          	movaps -0x56(%rsi),%xmm6
   18cb0:	66 0f 3a 0f ee 06    	palignr $0x6,%xmm6,%xmm5
   18cb6:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   18cba:	0f 28 7e 9a          	movaps -0x66(%rsi),%xmm7
   18cbe:	66 0f 3a 0f f7 06    	palignr $0x6,%xmm7,%xmm6
   18cc4:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   18cc8:	44 0f 28 46 8a       	movaps -0x76(%rsi),%xmm8
   18ccd:	66 41 0f 3a 0f f8 06 	palignr $0x6,%xmm8,%xmm7
   18cd4:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   18cd8:	44 0f 28 8e 7a ff ff 	movaps -0x86(%rsi),%xmm9
   18cdf:	ff 
   18ce0:	66 45 0f 3a 0f c1 06 	palignr $0x6,%xmm9,%xmm8
   18ce7:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   18cec:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18cf3:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   18cf7:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   18cfb:	0f 83 6f ff ff ff    	jae    18c70 <__intel_ssse3_rep_memcpy+0xa60>
   18d01:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18d06:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18d0d:	48 29 d7             	sub    %rdx,%rdi
   18d10:	48 29 d6             	sub    %rdx,%rsi
   18d13:	4c 8d 1d a6 76 01 00 	lea    0x176a6(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   18d1a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18d1e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18d22:	3e ff e2             	notrack jmpq *%rdx
   18d25:	0f 0b                	ud2    
   18d27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   18d2e:	00 00 
   18d30:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18d37:	0f 28 4e f9          	movaps -0x7(%rsi),%xmm1
   18d3b:	0f 28 56 09          	movaps 0x9(%rsi),%xmm2
   18d3f:	0f 28 5e 19          	movaps 0x19(%rsi),%xmm3
   18d43:	0f 28 66 29          	movaps 0x29(%rsi),%xmm4
   18d47:	0f 28 6e 39          	movaps 0x39(%rsi),%xmm5
   18d4b:	0f 28 76 49          	movaps 0x49(%rsi),%xmm6
   18d4f:	0f 28 7e 59          	movaps 0x59(%rsi),%xmm7
   18d53:	44 0f 28 46 69       	movaps 0x69(%rsi),%xmm8
   18d58:	44 0f 28 4e 79       	movaps 0x79(%rsi),%xmm9
   18d5d:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   18d64:	66 45 0f 3a 0f c8 07 	palignr $0x7,%xmm8,%xmm9
   18d6b:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   18d70:	66 44 0f 3a 0f c7 07 	palignr $0x7,%xmm7,%xmm8
   18d77:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   18d7c:	66 0f 3a 0f fe 07    	palignr $0x7,%xmm6,%xmm7
   18d82:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   18d86:	66 0f 3a 0f f5 07    	palignr $0x7,%xmm5,%xmm6
   18d8c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   18d90:	66 0f 3a 0f ec 07    	palignr $0x7,%xmm4,%xmm5
   18d96:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   18d9a:	66 0f 3a 0f e3 07    	palignr $0x7,%xmm3,%xmm4
   18da0:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   18da4:	66 0f 3a 0f da 07    	palignr $0x7,%xmm2,%xmm3
   18daa:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   18dae:	66 0f 3a 0f d1 07    	palignr $0x7,%xmm1,%xmm2
   18db4:	0f 29 17             	movaps %xmm2,(%rdi)
   18db7:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   18dbe:	0f 83 6c ff ff ff    	jae    18d30 <__intel_ssse3_rep_memcpy+0xb20>
   18dc4:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18dc9:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18dd0:	48 01 d7             	add    %rdx,%rdi
   18dd3:	48 01 d6             	add    %rdx,%rsi
   18dd6:	4c 8d 1d 23 78 01 00 	lea    0x17823(%rip),%r11        # 30600 <__func__.2393+0x407>
   18ddd:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18de1:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18de5:	3e ff e2             	notrack jmpq *%rdx
   18de8:	0f 0b                	ud2    
   18dea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   18df0:	0f 28 4e f9          	movaps -0x7(%rsi),%xmm1
   18df4:	0f 28 56 e9          	movaps -0x17(%rsi),%xmm2
   18df8:	66 0f 3a 0f ca 07    	palignr $0x7,%xmm2,%xmm1
   18dfe:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   18e02:	0f 28 5e d9          	movaps -0x27(%rsi),%xmm3
   18e06:	66 0f 3a 0f d3 07    	palignr $0x7,%xmm3,%xmm2
   18e0c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   18e10:	0f 28 66 c9          	movaps -0x37(%rsi),%xmm4
   18e14:	66 0f 3a 0f dc 07    	palignr $0x7,%xmm4,%xmm3
   18e1a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   18e1e:	0f 28 6e b9          	movaps -0x47(%rsi),%xmm5
   18e22:	66 0f 3a 0f e5 07    	palignr $0x7,%xmm5,%xmm4
   18e28:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   18e2c:	0f 28 76 a9          	movaps -0x57(%rsi),%xmm6
   18e30:	66 0f 3a 0f ee 07    	palignr $0x7,%xmm6,%xmm5
   18e36:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   18e3a:	0f 28 7e 99          	movaps -0x67(%rsi),%xmm7
   18e3e:	66 0f 3a 0f f7 07    	palignr $0x7,%xmm7,%xmm6
   18e44:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   18e48:	44 0f 28 46 89       	movaps -0x77(%rsi),%xmm8
   18e4d:	66 41 0f 3a 0f f8 07 	palignr $0x7,%xmm8,%xmm7
   18e54:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   18e58:	44 0f 28 8e 79 ff ff 	movaps -0x87(%rsi),%xmm9
   18e5f:	ff 
   18e60:	66 45 0f 3a 0f c1 07 	palignr $0x7,%xmm9,%xmm8
   18e67:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   18e6c:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18e73:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   18e77:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   18e7b:	0f 83 6f ff ff ff    	jae    18df0 <__intel_ssse3_rep_memcpy+0xbe0>
   18e81:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18e86:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18e8d:	48 29 d7             	sub    %rdx,%rdi
   18e90:	48 29 d6             	sub    %rdx,%rsi
   18e93:	4c 8d 1d 26 75 01 00 	lea    0x17526(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   18e9a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18e9e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18ea2:	3e ff e2             	notrack jmpq *%rdx
   18ea5:	0f 0b                	ud2    
   18ea7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   18eae:	00 00 
   18eb0:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18eb7:	0f 28 4e f8          	movaps -0x8(%rsi),%xmm1
   18ebb:	0f 28 56 08          	movaps 0x8(%rsi),%xmm2
   18ebf:	0f 28 5e 18          	movaps 0x18(%rsi),%xmm3
   18ec3:	0f 28 66 28          	movaps 0x28(%rsi),%xmm4
   18ec7:	0f 28 6e 38          	movaps 0x38(%rsi),%xmm5
   18ecb:	0f 28 76 48          	movaps 0x48(%rsi),%xmm6
   18ecf:	0f 28 7e 58          	movaps 0x58(%rsi),%xmm7
   18ed3:	44 0f 28 46 68       	movaps 0x68(%rsi),%xmm8
   18ed8:	44 0f 28 4e 78       	movaps 0x78(%rsi),%xmm9
   18edd:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   18ee4:	66 45 0f 3a 0f c8 08 	palignr $0x8,%xmm8,%xmm9
   18eeb:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   18ef0:	66 44 0f 3a 0f c7 08 	palignr $0x8,%xmm7,%xmm8
   18ef7:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   18efc:	66 0f 3a 0f fe 08    	palignr $0x8,%xmm6,%xmm7
   18f02:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   18f06:	66 0f 3a 0f f5 08    	palignr $0x8,%xmm5,%xmm6
   18f0c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   18f10:	66 0f 3a 0f ec 08    	palignr $0x8,%xmm4,%xmm5
   18f16:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   18f1a:	66 0f 3a 0f e3 08    	palignr $0x8,%xmm3,%xmm4
   18f20:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   18f24:	66 0f 3a 0f da 08    	palignr $0x8,%xmm2,%xmm3
   18f2a:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   18f2e:	66 0f 3a 0f d1 08    	palignr $0x8,%xmm1,%xmm2
   18f34:	0f 29 17             	movaps %xmm2,(%rdi)
   18f37:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   18f3e:	0f 83 6c ff ff ff    	jae    18eb0 <__intel_ssse3_rep_memcpy+0xca0>
   18f44:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   18f49:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   18f50:	48 01 d7             	add    %rdx,%rdi
   18f53:	48 01 d6             	add    %rdx,%rsi
   18f56:	4c 8d 1d a3 76 01 00 	lea    0x176a3(%rip),%r11        # 30600 <__func__.2393+0x407>
   18f5d:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   18f61:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   18f65:	3e ff e2             	notrack jmpq *%rdx
   18f68:	0f 0b                	ud2    
   18f6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   18f70:	0f 28 4e f8          	movaps -0x8(%rsi),%xmm1
   18f74:	0f 28 56 e8          	movaps -0x18(%rsi),%xmm2
   18f78:	66 0f 3a 0f ca 08    	palignr $0x8,%xmm2,%xmm1
   18f7e:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   18f82:	0f 28 5e d8          	movaps -0x28(%rsi),%xmm3
   18f86:	66 0f 3a 0f d3 08    	palignr $0x8,%xmm3,%xmm2
   18f8c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   18f90:	0f 28 66 c8          	movaps -0x38(%rsi),%xmm4
   18f94:	66 0f 3a 0f dc 08    	palignr $0x8,%xmm4,%xmm3
   18f9a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   18f9e:	0f 28 6e b8          	movaps -0x48(%rsi),%xmm5
   18fa2:	66 0f 3a 0f e5 08    	palignr $0x8,%xmm5,%xmm4
   18fa8:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   18fac:	0f 28 76 a8          	movaps -0x58(%rsi),%xmm6
   18fb0:	66 0f 3a 0f ee 08    	palignr $0x8,%xmm6,%xmm5
   18fb6:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   18fba:	0f 28 7e 98          	movaps -0x68(%rsi),%xmm7
   18fbe:	66 0f 3a 0f f7 08    	palignr $0x8,%xmm7,%xmm6
   18fc4:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   18fc8:	44 0f 28 46 88       	movaps -0x78(%rsi),%xmm8
   18fcd:	66 41 0f 3a 0f f8 08 	palignr $0x8,%xmm8,%xmm7
   18fd4:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   18fd8:	44 0f 28 8e 78 ff ff 	movaps -0x88(%rsi),%xmm9
   18fdf:	ff 
   18fe0:	66 45 0f 3a 0f c1 08 	palignr $0x8,%xmm9,%xmm8
   18fe7:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   18fec:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   18ff3:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   18ff7:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   18ffb:	0f 83 6f ff ff ff    	jae    18f70 <__intel_ssse3_rep_memcpy+0xd60>
   19001:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19006:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   1900d:	48 29 d7             	sub    %rdx,%rdi
   19010:	48 29 d6             	sub    %rdx,%rsi
   19013:	4c 8d 1d a6 73 01 00 	lea    0x173a6(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   1901a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1901e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   19022:	3e ff e2             	notrack jmpq *%rdx
   19025:	0f 0b                	ud2    
   19027:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1902e:	00 00 
   19030:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19037:	0f 28 4e f7          	movaps -0x9(%rsi),%xmm1
   1903b:	0f 28 56 07          	movaps 0x7(%rsi),%xmm2
   1903f:	0f 28 5e 17          	movaps 0x17(%rsi),%xmm3
   19043:	0f 28 66 27          	movaps 0x27(%rsi),%xmm4
   19047:	0f 28 6e 37          	movaps 0x37(%rsi),%xmm5
   1904b:	0f 28 76 47          	movaps 0x47(%rsi),%xmm6
   1904f:	0f 28 7e 57          	movaps 0x57(%rsi),%xmm7
   19053:	44 0f 28 46 67       	movaps 0x67(%rsi),%xmm8
   19058:	44 0f 28 4e 77       	movaps 0x77(%rsi),%xmm9
   1905d:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   19064:	66 45 0f 3a 0f c8 09 	palignr $0x9,%xmm8,%xmm9
   1906b:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   19070:	66 44 0f 3a 0f c7 09 	palignr $0x9,%xmm7,%xmm8
   19077:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   1907c:	66 0f 3a 0f fe 09    	palignr $0x9,%xmm6,%xmm7
   19082:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   19086:	66 0f 3a 0f f5 09    	palignr $0x9,%xmm5,%xmm6
   1908c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   19090:	66 0f 3a 0f ec 09    	palignr $0x9,%xmm4,%xmm5
   19096:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1909a:	66 0f 3a 0f e3 09    	palignr $0x9,%xmm3,%xmm4
   190a0:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   190a4:	66 0f 3a 0f da 09    	palignr $0x9,%xmm2,%xmm3
   190aa:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   190ae:	66 0f 3a 0f d1 09    	palignr $0x9,%xmm1,%xmm2
   190b4:	0f 29 17             	movaps %xmm2,(%rdi)
   190b7:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   190be:	0f 83 6c ff ff ff    	jae    19030 <__intel_ssse3_rep_memcpy+0xe20>
   190c4:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   190c9:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   190d0:	48 01 d7             	add    %rdx,%rdi
   190d3:	48 01 d6             	add    %rdx,%rsi
   190d6:	4c 8d 1d 23 75 01 00 	lea    0x17523(%rip),%r11        # 30600 <__func__.2393+0x407>
   190dd:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   190e1:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   190e5:	3e ff e2             	notrack jmpq *%rdx
   190e8:	0f 0b                	ud2    
   190ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   190f0:	0f 28 4e f7          	movaps -0x9(%rsi),%xmm1
   190f4:	0f 28 56 e7          	movaps -0x19(%rsi),%xmm2
   190f8:	66 0f 3a 0f ca 09    	palignr $0x9,%xmm2,%xmm1
   190fe:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   19102:	0f 28 5e d7          	movaps -0x29(%rsi),%xmm3
   19106:	66 0f 3a 0f d3 09    	palignr $0x9,%xmm3,%xmm2
   1910c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   19110:	0f 28 66 c7          	movaps -0x39(%rsi),%xmm4
   19114:	66 0f 3a 0f dc 09    	palignr $0x9,%xmm4,%xmm3
   1911a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1911e:	0f 28 6e b7          	movaps -0x49(%rsi),%xmm5
   19122:	66 0f 3a 0f e5 09    	palignr $0x9,%xmm5,%xmm4
   19128:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   1912c:	0f 28 76 a7          	movaps -0x59(%rsi),%xmm6
   19130:	66 0f 3a 0f ee 09    	palignr $0x9,%xmm6,%xmm5
   19136:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   1913a:	0f 28 7e 97          	movaps -0x69(%rsi),%xmm7
   1913e:	66 0f 3a 0f f7 09    	palignr $0x9,%xmm7,%xmm6
   19144:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   19148:	44 0f 28 46 87       	movaps -0x79(%rsi),%xmm8
   1914d:	66 41 0f 3a 0f f8 09 	palignr $0x9,%xmm8,%xmm7
   19154:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   19158:	44 0f 28 8e 77 ff ff 	movaps -0x89(%rsi),%xmm9
   1915f:	ff 
   19160:	66 45 0f 3a 0f c1 09 	palignr $0x9,%xmm9,%xmm8
   19167:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   1916c:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19173:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   19177:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   1917b:	0f 83 6f ff ff ff    	jae    190f0 <__intel_ssse3_rep_memcpy+0xee0>
   19181:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19186:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   1918d:	48 29 d7             	sub    %rdx,%rdi
   19190:	48 29 d6             	sub    %rdx,%rsi
   19193:	4c 8d 1d 26 72 01 00 	lea    0x17226(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   1919a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1919e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   191a2:	3e ff e2             	notrack jmpq *%rdx
   191a5:	0f 0b                	ud2    
   191a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   191ae:	00 00 
   191b0:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   191b7:	0f 28 4e f6          	movaps -0xa(%rsi),%xmm1
   191bb:	0f 28 56 06          	movaps 0x6(%rsi),%xmm2
   191bf:	0f 28 5e 16          	movaps 0x16(%rsi),%xmm3
   191c3:	0f 28 66 26          	movaps 0x26(%rsi),%xmm4
   191c7:	0f 28 6e 36          	movaps 0x36(%rsi),%xmm5
   191cb:	0f 28 76 46          	movaps 0x46(%rsi),%xmm6
   191cf:	0f 28 7e 56          	movaps 0x56(%rsi),%xmm7
   191d3:	44 0f 28 46 66       	movaps 0x66(%rsi),%xmm8
   191d8:	44 0f 28 4e 76       	movaps 0x76(%rsi),%xmm9
   191dd:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   191e4:	66 45 0f 3a 0f c8 0a 	palignr $0xa,%xmm8,%xmm9
   191eb:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   191f0:	66 44 0f 3a 0f c7 0a 	palignr $0xa,%xmm7,%xmm8
   191f7:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   191fc:	66 0f 3a 0f fe 0a    	palignr $0xa,%xmm6,%xmm7
   19202:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   19206:	66 0f 3a 0f f5 0a    	palignr $0xa,%xmm5,%xmm6
   1920c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   19210:	66 0f 3a 0f ec 0a    	palignr $0xa,%xmm4,%xmm5
   19216:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1921a:	66 0f 3a 0f e3 0a    	palignr $0xa,%xmm3,%xmm4
   19220:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   19224:	66 0f 3a 0f da 0a    	palignr $0xa,%xmm2,%xmm3
   1922a:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   1922e:	66 0f 3a 0f d1 0a    	palignr $0xa,%xmm1,%xmm2
   19234:	0f 29 17             	movaps %xmm2,(%rdi)
   19237:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   1923e:	0f 83 6c ff ff ff    	jae    191b0 <__intel_ssse3_rep_memcpy+0xfa0>
   19244:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19249:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   19250:	48 01 d7             	add    %rdx,%rdi
   19253:	48 01 d6             	add    %rdx,%rsi
   19256:	4c 8d 1d a3 73 01 00 	lea    0x173a3(%rip),%r11        # 30600 <__func__.2393+0x407>
   1925d:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   19261:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   19265:	3e ff e2             	notrack jmpq *%rdx
   19268:	0f 0b                	ud2    
   1926a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   19270:	0f 28 4e f6          	movaps -0xa(%rsi),%xmm1
   19274:	0f 28 56 e6          	movaps -0x1a(%rsi),%xmm2
   19278:	66 0f 3a 0f ca 0a    	palignr $0xa,%xmm2,%xmm1
   1927e:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   19282:	0f 28 5e d6          	movaps -0x2a(%rsi),%xmm3
   19286:	66 0f 3a 0f d3 0a    	palignr $0xa,%xmm3,%xmm2
   1928c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   19290:	0f 28 66 c6          	movaps -0x3a(%rsi),%xmm4
   19294:	66 0f 3a 0f dc 0a    	palignr $0xa,%xmm4,%xmm3
   1929a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1929e:	0f 28 6e b6          	movaps -0x4a(%rsi),%xmm5
   192a2:	66 0f 3a 0f e5 0a    	palignr $0xa,%xmm5,%xmm4
   192a8:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   192ac:	0f 28 76 a6          	movaps -0x5a(%rsi),%xmm6
   192b0:	66 0f 3a 0f ee 0a    	palignr $0xa,%xmm6,%xmm5
   192b6:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   192ba:	0f 28 7e 96          	movaps -0x6a(%rsi),%xmm7
   192be:	66 0f 3a 0f f7 0a    	palignr $0xa,%xmm7,%xmm6
   192c4:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   192c8:	44 0f 28 46 86       	movaps -0x7a(%rsi),%xmm8
   192cd:	66 41 0f 3a 0f f8 0a 	palignr $0xa,%xmm8,%xmm7
   192d4:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   192d8:	44 0f 28 8e 76 ff ff 	movaps -0x8a(%rsi),%xmm9
   192df:	ff 
   192e0:	66 45 0f 3a 0f c1 0a 	palignr $0xa,%xmm9,%xmm8
   192e7:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   192ec:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   192f3:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   192f7:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   192fb:	0f 83 6f ff ff ff    	jae    19270 <__intel_ssse3_rep_memcpy+0x1060>
   19301:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19306:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   1930d:	48 29 d7             	sub    %rdx,%rdi
   19310:	48 29 d6             	sub    %rdx,%rsi
   19313:	4c 8d 1d a6 70 01 00 	lea    0x170a6(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   1931a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1931e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   19322:	3e ff e2             	notrack jmpq *%rdx
   19325:	0f 0b                	ud2    
   19327:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1932e:	00 00 
   19330:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19337:	0f 28 4e f5          	movaps -0xb(%rsi),%xmm1
   1933b:	0f 28 56 05          	movaps 0x5(%rsi),%xmm2
   1933f:	0f 28 5e 15          	movaps 0x15(%rsi),%xmm3
   19343:	0f 28 66 25          	movaps 0x25(%rsi),%xmm4
   19347:	0f 28 6e 35          	movaps 0x35(%rsi),%xmm5
   1934b:	0f 28 76 45          	movaps 0x45(%rsi),%xmm6
   1934f:	0f 28 7e 55          	movaps 0x55(%rsi),%xmm7
   19353:	44 0f 28 46 65       	movaps 0x65(%rsi),%xmm8
   19358:	44 0f 28 4e 75       	movaps 0x75(%rsi),%xmm9
   1935d:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   19364:	66 45 0f 3a 0f c8 0b 	palignr $0xb,%xmm8,%xmm9
   1936b:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   19370:	66 44 0f 3a 0f c7 0b 	palignr $0xb,%xmm7,%xmm8
   19377:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   1937c:	66 0f 3a 0f fe 0b    	palignr $0xb,%xmm6,%xmm7
   19382:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   19386:	66 0f 3a 0f f5 0b    	palignr $0xb,%xmm5,%xmm6
   1938c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   19390:	66 0f 3a 0f ec 0b    	palignr $0xb,%xmm4,%xmm5
   19396:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1939a:	66 0f 3a 0f e3 0b    	palignr $0xb,%xmm3,%xmm4
   193a0:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   193a4:	66 0f 3a 0f da 0b    	palignr $0xb,%xmm2,%xmm3
   193aa:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   193ae:	66 0f 3a 0f d1 0b    	palignr $0xb,%xmm1,%xmm2
   193b4:	0f 29 17             	movaps %xmm2,(%rdi)
   193b7:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   193be:	0f 83 6c ff ff ff    	jae    19330 <__intel_ssse3_rep_memcpy+0x1120>
   193c4:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   193c9:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   193d0:	48 01 d7             	add    %rdx,%rdi
   193d3:	48 01 d6             	add    %rdx,%rsi
   193d6:	4c 8d 1d 23 72 01 00 	lea    0x17223(%rip),%r11        # 30600 <__func__.2393+0x407>
   193dd:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   193e1:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   193e5:	3e ff e2             	notrack jmpq *%rdx
   193e8:	0f 0b                	ud2    
   193ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   193f0:	0f 28 4e f5          	movaps -0xb(%rsi),%xmm1
   193f4:	0f 28 56 e5          	movaps -0x1b(%rsi),%xmm2
   193f8:	66 0f 3a 0f ca 0b    	palignr $0xb,%xmm2,%xmm1
   193fe:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   19402:	0f 28 5e d5          	movaps -0x2b(%rsi),%xmm3
   19406:	66 0f 3a 0f d3 0b    	palignr $0xb,%xmm3,%xmm2
   1940c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   19410:	0f 28 66 c5          	movaps -0x3b(%rsi),%xmm4
   19414:	66 0f 3a 0f dc 0b    	palignr $0xb,%xmm4,%xmm3
   1941a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1941e:	0f 28 6e b5          	movaps -0x4b(%rsi),%xmm5
   19422:	66 0f 3a 0f e5 0b    	palignr $0xb,%xmm5,%xmm4
   19428:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   1942c:	0f 28 76 a5          	movaps -0x5b(%rsi),%xmm6
   19430:	66 0f 3a 0f ee 0b    	palignr $0xb,%xmm6,%xmm5
   19436:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   1943a:	0f 28 7e 95          	movaps -0x6b(%rsi),%xmm7
   1943e:	66 0f 3a 0f f7 0b    	palignr $0xb,%xmm7,%xmm6
   19444:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   19448:	44 0f 28 46 85       	movaps -0x7b(%rsi),%xmm8
   1944d:	66 41 0f 3a 0f f8 0b 	palignr $0xb,%xmm8,%xmm7
   19454:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   19458:	44 0f 28 8e 75 ff ff 	movaps -0x8b(%rsi),%xmm9
   1945f:	ff 
   19460:	66 45 0f 3a 0f c1 0b 	palignr $0xb,%xmm9,%xmm8
   19467:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   1946c:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19473:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   19477:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   1947b:	0f 83 6f ff ff ff    	jae    193f0 <__intel_ssse3_rep_memcpy+0x11e0>
   19481:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19486:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   1948d:	48 29 d7             	sub    %rdx,%rdi
   19490:	48 29 d6             	sub    %rdx,%rsi
   19493:	4c 8d 1d 26 6f 01 00 	lea    0x16f26(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   1949a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1949e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   194a2:	3e ff e2             	notrack jmpq *%rdx
   194a5:	0f 0b                	ud2    
   194a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   194ae:	00 00 
   194b0:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   194b7:	66 0f 6f 4e f4       	movdqa -0xc(%rsi),%xmm1
   194bc:	0f 28 56 04          	movaps 0x4(%rsi),%xmm2
   194c0:	0f 28 5e 14          	movaps 0x14(%rsi),%xmm3
   194c4:	0f 28 66 24          	movaps 0x24(%rsi),%xmm4
   194c8:	0f 28 6e 34          	movaps 0x34(%rsi),%xmm5
   194cc:	0f 28 76 44          	movaps 0x44(%rsi),%xmm6
   194d0:	0f 28 7e 54          	movaps 0x54(%rsi),%xmm7
   194d4:	44 0f 28 46 64       	movaps 0x64(%rsi),%xmm8
   194d9:	44 0f 28 4e 74       	movaps 0x74(%rsi),%xmm9
   194de:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   194e5:	66 45 0f 3a 0f c8 0c 	palignr $0xc,%xmm8,%xmm9
   194ec:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   194f1:	66 44 0f 3a 0f c7 0c 	palignr $0xc,%xmm7,%xmm8
   194f8:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   194fd:	66 0f 3a 0f fe 0c    	palignr $0xc,%xmm6,%xmm7
   19503:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   19507:	66 0f 3a 0f f5 0c    	palignr $0xc,%xmm5,%xmm6
   1950d:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   19511:	66 0f 3a 0f ec 0c    	palignr $0xc,%xmm4,%xmm5
   19517:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1951b:	66 0f 3a 0f e3 0c    	palignr $0xc,%xmm3,%xmm4
   19521:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   19525:	66 0f 3a 0f da 0c    	palignr $0xc,%xmm2,%xmm3
   1952b:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   1952f:	66 0f 3a 0f d1 0c    	palignr $0xc,%xmm1,%xmm2
   19535:	0f 29 17             	movaps %xmm2,(%rdi)
   19538:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   1953f:	0f 83 6b ff ff ff    	jae    194b0 <__intel_ssse3_rep_memcpy+0x12a0>
   19545:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   1954a:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   19551:	48 01 d7             	add    %rdx,%rdi
   19554:	48 01 d6             	add    %rdx,%rsi
   19557:	4c 8d 1d a2 70 01 00 	lea    0x170a2(%rip),%r11        # 30600 <__func__.2393+0x407>
   1955e:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   19562:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   19566:	3e ff e2             	notrack jmpq *%rdx
   19569:	0f 0b                	ud2    
   1956b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   19570:	0f 28 4e f4          	movaps -0xc(%rsi),%xmm1
   19574:	0f 28 56 e4          	movaps -0x1c(%rsi),%xmm2
   19578:	66 0f 3a 0f ca 0c    	palignr $0xc,%xmm2,%xmm1
   1957e:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   19582:	0f 28 5e d4          	movaps -0x2c(%rsi),%xmm3
   19586:	66 0f 3a 0f d3 0c    	palignr $0xc,%xmm3,%xmm2
   1958c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   19590:	0f 28 66 c4          	movaps -0x3c(%rsi),%xmm4
   19594:	66 0f 3a 0f dc 0c    	palignr $0xc,%xmm4,%xmm3
   1959a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1959e:	0f 28 6e b4          	movaps -0x4c(%rsi),%xmm5
   195a2:	66 0f 3a 0f e5 0c    	palignr $0xc,%xmm5,%xmm4
   195a8:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   195ac:	0f 28 76 a4          	movaps -0x5c(%rsi),%xmm6
   195b0:	66 0f 3a 0f ee 0c    	palignr $0xc,%xmm6,%xmm5
   195b6:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   195ba:	0f 28 7e 94          	movaps -0x6c(%rsi),%xmm7
   195be:	66 0f 3a 0f f7 0c    	palignr $0xc,%xmm7,%xmm6
   195c4:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   195c8:	44 0f 28 46 84       	movaps -0x7c(%rsi),%xmm8
   195cd:	66 41 0f 3a 0f f8 0c 	palignr $0xc,%xmm8,%xmm7
   195d4:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   195d8:	44 0f 28 8e 74 ff ff 	movaps -0x8c(%rsi),%xmm9
   195df:	ff 
   195e0:	66 45 0f 3a 0f c1 0c 	palignr $0xc,%xmm9,%xmm8
   195e7:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   195ec:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   195f3:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   195f7:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   195fb:	0f 83 6f ff ff ff    	jae    19570 <__intel_ssse3_rep_memcpy+0x1360>
   19601:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19606:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   1960d:	48 29 d7             	sub    %rdx,%rdi
   19610:	48 29 d6             	sub    %rdx,%rsi
   19613:	4c 8d 1d a6 6d 01 00 	lea    0x16da6(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   1961a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1961e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   19622:	3e ff e2             	notrack jmpq *%rdx
   19625:	0f 0b                	ud2    
   19627:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1962e:	00 00 
   19630:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19637:	0f 28 4e f3          	movaps -0xd(%rsi),%xmm1
   1963b:	0f 28 56 03          	movaps 0x3(%rsi),%xmm2
   1963f:	0f 28 5e 13          	movaps 0x13(%rsi),%xmm3
   19643:	0f 28 66 23          	movaps 0x23(%rsi),%xmm4
   19647:	0f 28 6e 33          	movaps 0x33(%rsi),%xmm5
   1964b:	0f 28 76 43          	movaps 0x43(%rsi),%xmm6
   1964f:	0f 28 7e 53          	movaps 0x53(%rsi),%xmm7
   19653:	44 0f 28 46 63       	movaps 0x63(%rsi),%xmm8
   19658:	44 0f 28 4e 73       	movaps 0x73(%rsi),%xmm9
   1965d:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   19664:	66 45 0f 3a 0f c8 0d 	palignr $0xd,%xmm8,%xmm9
   1966b:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   19670:	66 44 0f 3a 0f c7 0d 	palignr $0xd,%xmm7,%xmm8
   19677:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   1967c:	66 0f 3a 0f fe 0d    	palignr $0xd,%xmm6,%xmm7
   19682:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   19686:	66 0f 3a 0f f5 0d    	palignr $0xd,%xmm5,%xmm6
   1968c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   19690:	66 0f 3a 0f ec 0d    	palignr $0xd,%xmm4,%xmm5
   19696:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1969a:	66 0f 3a 0f e3 0d    	palignr $0xd,%xmm3,%xmm4
   196a0:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   196a4:	66 0f 3a 0f da 0d    	palignr $0xd,%xmm2,%xmm3
   196aa:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   196ae:	66 0f 3a 0f d1 0d    	palignr $0xd,%xmm1,%xmm2
   196b4:	0f 29 17             	movaps %xmm2,(%rdi)
   196b7:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   196be:	0f 83 6c ff ff ff    	jae    19630 <__intel_ssse3_rep_memcpy+0x1420>
   196c4:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   196c9:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   196d0:	48 01 d7             	add    %rdx,%rdi
   196d3:	48 01 d6             	add    %rdx,%rsi
   196d6:	4c 8d 1d 23 6f 01 00 	lea    0x16f23(%rip),%r11        # 30600 <__func__.2393+0x407>
   196dd:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   196e1:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   196e5:	3e ff e2             	notrack jmpq *%rdx
   196e8:	0f 0b                	ud2    
   196ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   196f0:	0f 28 4e f3          	movaps -0xd(%rsi),%xmm1
   196f4:	0f 28 56 e3          	movaps -0x1d(%rsi),%xmm2
   196f8:	66 0f 3a 0f ca 0d    	palignr $0xd,%xmm2,%xmm1
   196fe:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   19702:	0f 28 5e d3          	movaps -0x2d(%rsi),%xmm3
   19706:	66 0f 3a 0f d3 0d    	palignr $0xd,%xmm3,%xmm2
   1970c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   19710:	0f 28 66 c3          	movaps -0x3d(%rsi),%xmm4
   19714:	66 0f 3a 0f dc 0d    	palignr $0xd,%xmm4,%xmm3
   1971a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1971e:	0f 28 6e b3          	movaps -0x4d(%rsi),%xmm5
   19722:	66 0f 3a 0f e5 0d    	palignr $0xd,%xmm5,%xmm4
   19728:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   1972c:	0f 28 76 a3          	movaps -0x5d(%rsi),%xmm6
   19730:	66 0f 3a 0f ee 0d    	palignr $0xd,%xmm6,%xmm5
   19736:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   1973a:	0f 28 7e 93          	movaps -0x6d(%rsi),%xmm7
   1973e:	66 0f 3a 0f f7 0d    	palignr $0xd,%xmm7,%xmm6
   19744:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   19748:	44 0f 28 46 83       	movaps -0x7d(%rsi),%xmm8
   1974d:	66 41 0f 3a 0f f8 0d 	palignr $0xd,%xmm8,%xmm7
   19754:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   19758:	44 0f 28 8e 73 ff ff 	movaps -0x8d(%rsi),%xmm9
   1975f:	ff 
   19760:	66 45 0f 3a 0f c1 0d 	palignr $0xd,%xmm9,%xmm8
   19767:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   1976c:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19773:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   19777:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   1977b:	0f 83 6f ff ff ff    	jae    196f0 <__intel_ssse3_rep_memcpy+0x14e0>
   19781:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19786:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   1978d:	48 29 d7             	sub    %rdx,%rdi
   19790:	48 29 d6             	sub    %rdx,%rsi
   19793:	4c 8d 1d 26 6c 01 00 	lea    0x16c26(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   1979a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1979e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   197a2:	3e ff e2             	notrack jmpq *%rdx
   197a5:	0f 0b                	ud2    
   197a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   197ae:	00 00 
   197b0:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   197b7:	0f 28 4e f2          	movaps -0xe(%rsi),%xmm1
   197bb:	0f 28 56 02          	movaps 0x2(%rsi),%xmm2
   197bf:	0f 28 5e 12          	movaps 0x12(%rsi),%xmm3
   197c3:	0f 28 66 22          	movaps 0x22(%rsi),%xmm4
   197c7:	0f 28 6e 32          	movaps 0x32(%rsi),%xmm5
   197cb:	0f 28 76 42          	movaps 0x42(%rsi),%xmm6
   197cf:	0f 28 7e 52          	movaps 0x52(%rsi),%xmm7
   197d3:	44 0f 28 46 62       	movaps 0x62(%rsi),%xmm8
   197d8:	44 0f 28 4e 72       	movaps 0x72(%rsi),%xmm9
   197dd:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   197e4:	66 45 0f 3a 0f c8 0e 	palignr $0xe,%xmm8,%xmm9
   197eb:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   197f0:	66 44 0f 3a 0f c7 0e 	palignr $0xe,%xmm7,%xmm8
   197f7:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   197fc:	66 0f 3a 0f fe 0e    	palignr $0xe,%xmm6,%xmm7
   19802:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   19806:	66 0f 3a 0f f5 0e    	palignr $0xe,%xmm5,%xmm6
   1980c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   19810:	66 0f 3a 0f ec 0e    	palignr $0xe,%xmm4,%xmm5
   19816:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1981a:	66 0f 3a 0f e3 0e    	palignr $0xe,%xmm3,%xmm4
   19820:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   19824:	66 0f 3a 0f da 0e    	palignr $0xe,%xmm2,%xmm3
   1982a:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   1982e:	66 0f 3a 0f d1 0e    	palignr $0xe,%xmm1,%xmm2
   19834:	0f 29 17             	movaps %xmm2,(%rdi)
   19837:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   1983e:	0f 83 6c ff ff ff    	jae    197b0 <__intel_ssse3_rep_memcpy+0x15a0>
   19844:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19849:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   19850:	48 01 d7             	add    %rdx,%rdi
   19853:	48 01 d6             	add    %rdx,%rsi
   19856:	4c 8d 1d a3 6d 01 00 	lea    0x16da3(%rip),%r11        # 30600 <__func__.2393+0x407>
   1985d:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   19861:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   19865:	3e ff e2             	notrack jmpq *%rdx
   19868:	0f 0b                	ud2    
   1986a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   19870:	0f 28 4e f2          	movaps -0xe(%rsi),%xmm1
   19874:	0f 28 56 e2          	movaps -0x1e(%rsi),%xmm2
   19878:	66 0f 3a 0f ca 0e    	palignr $0xe,%xmm2,%xmm1
   1987e:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   19882:	0f 28 5e d2          	movaps -0x2e(%rsi),%xmm3
   19886:	66 0f 3a 0f d3 0e    	palignr $0xe,%xmm3,%xmm2
   1988c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   19890:	0f 28 66 c2          	movaps -0x3e(%rsi),%xmm4
   19894:	66 0f 3a 0f dc 0e    	palignr $0xe,%xmm4,%xmm3
   1989a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   1989e:	0f 28 6e b2          	movaps -0x4e(%rsi),%xmm5
   198a2:	66 0f 3a 0f e5 0e    	palignr $0xe,%xmm5,%xmm4
   198a8:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   198ac:	0f 28 76 a2          	movaps -0x5e(%rsi),%xmm6
   198b0:	66 0f 3a 0f ee 0e    	palignr $0xe,%xmm6,%xmm5
   198b6:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   198ba:	0f 28 7e 92          	movaps -0x6e(%rsi),%xmm7
   198be:	66 0f 3a 0f f7 0e    	palignr $0xe,%xmm7,%xmm6
   198c4:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   198c8:	44 0f 28 46 82       	movaps -0x7e(%rsi),%xmm8
   198cd:	66 41 0f 3a 0f f8 0e 	palignr $0xe,%xmm8,%xmm7
   198d4:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   198d8:	44 0f 28 8e 72 ff ff 	movaps -0x8e(%rsi),%xmm9
   198df:	ff 
   198e0:	66 45 0f 3a 0f c1 0e 	palignr $0xe,%xmm9,%xmm8
   198e7:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   198ec:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   198f3:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   198f7:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   198fb:	0f 83 6f ff ff ff    	jae    19870 <__intel_ssse3_rep_memcpy+0x1660>
   19901:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19906:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   1990d:	48 29 d7             	sub    %rdx,%rdi
   19910:	48 29 d6             	sub    %rdx,%rsi
   19913:	4c 8d 1d a6 6a 01 00 	lea    0x16aa6(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   1991a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   1991e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   19922:	3e ff e2             	notrack jmpq *%rdx
   19925:	0f 0b                	ud2    
   19927:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1992e:	00 00 
   19930:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19937:	0f 28 4e f1          	movaps -0xf(%rsi),%xmm1
   1993b:	0f 28 56 01          	movaps 0x1(%rsi),%xmm2
   1993f:	0f 28 5e 11          	movaps 0x11(%rsi),%xmm3
   19943:	0f 28 66 21          	movaps 0x21(%rsi),%xmm4
   19947:	0f 28 6e 31          	movaps 0x31(%rsi),%xmm5
   1994b:	0f 28 76 41          	movaps 0x41(%rsi),%xmm6
   1994f:	0f 28 7e 51          	movaps 0x51(%rsi),%xmm7
   19953:	44 0f 28 46 61       	movaps 0x61(%rsi),%xmm8
   19958:	44 0f 28 4e 71       	movaps 0x71(%rsi),%xmm9
   1995d:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   19964:	66 45 0f 3a 0f c8 0f 	palignr $0xf,%xmm8,%xmm9
   1996b:	44 0f 29 4f 70       	movaps %xmm9,0x70(%rdi)
   19970:	66 44 0f 3a 0f c7 0f 	palignr $0xf,%xmm7,%xmm8
   19977:	44 0f 29 47 60       	movaps %xmm8,0x60(%rdi)
   1997c:	66 0f 3a 0f fe 0f    	palignr $0xf,%xmm6,%xmm7
   19982:	0f 29 7f 50          	movaps %xmm7,0x50(%rdi)
   19986:	66 0f 3a 0f f5 0f    	palignr $0xf,%xmm5,%xmm6
   1998c:	0f 29 77 40          	movaps %xmm6,0x40(%rdi)
   19990:	66 0f 3a 0f ec 0f    	palignr $0xf,%xmm4,%xmm5
   19996:	0f 29 6f 30          	movaps %xmm5,0x30(%rdi)
   1999a:	66 0f 3a 0f e3 0f    	palignr $0xf,%xmm3,%xmm4
   199a0:	0f 29 67 20          	movaps %xmm4,0x20(%rdi)
   199a4:	66 0f 3a 0f da 0f    	palignr $0xf,%xmm2,%xmm3
   199aa:	0f 29 5f 10          	movaps %xmm3,0x10(%rdi)
   199ae:	66 0f 3a 0f d1 0f    	palignr $0xf,%xmm1,%xmm2
   199b4:	0f 29 17             	movaps %xmm2,(%rdi)
   199b7:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   199be:	0f 83 6c ff ff ff    	jae    19930 <__intel_ssse3_rep_memcpy+0x1720>
   199c4:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   199c9:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   199d0:	48 01 d7             	add    %rdx,%rdi
   199d3:	48 01 d6             	add    %rdx,%rsi
   199d6:	4c 8d 1d 23 6c 01 00 	lea    0x16c23(%rip),%r11        # 30600 <__func__.2393+0x407>
   199dd:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   199e1:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   199e5:	3e ff e2             	notrack jmpq *%rdx
   199e8:	0f 0b                	ud2    
   199ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   199f0:	0f 28 4e f1          	movaps -0xf(%rsi),%xmm1
   199f4:	0f 28 56 e1          	movaps -0x1f(%rsi),%xmm2
   199f8:	66 0f 3a 0f ca 0f    	palignr $0xf,%xmm2,%xmm1
   199fe:	0f 29 4f f0          	movaps %xmm1,-0x10(%rdi)
   19a02:	0f 28 5e d1          	movaps -0x2f(%rsi),%xmm3
   19a06:	66 0f 3a 0f d3 0f    	palignr $0xf,%xmm3,%xmm2
   19a0c:	0f 29 57 e0          	movaps %xmm2,-0x20(%rdi)
   19a10:	0f 28 66 c1          	movaps -0x3f(%rsi),%xmm4
   19a14:	66 0f 3a 0f dc 0f    	palignr $0xf,%xmm4,%xmm3
   19a1a:	0f 29 5f d0          	movaps %xmm3,-0x30(%rdi)
   19a1e:	0f 28 6e b1          	movaps -0x4f(%rsi),%xmm5
   19a22:	66 0f 3a 0f e5 0f    	palignr $0xf,%xmm5,%xmm4
   19a28:	0f 29 67 c0          	movaps %xmm4,-0x40(%rdi)
   19a2c:	0f 28 76 a1          	movaps -0x5f(%rsi),%xmm6
   19a30:	66 0f 3a 0f ee 0f    	palignr $0xf,%xmm6,%xmm5
   19a36:	0f 29 6f b0          	movaps %xmm5,-0x50(%rdi)
   19a3a:	0f 28 7e 91          	movaps -0x6f(%rsi),%xmm7
   19a3e:	66 0f 3a 0f f7 0f    	palignr $0xf,%xmm7,%xmm6
   19a44:	0f 29 77 a0          	movaps %xmm6,-0x60(%rdi)
   19a48:	44 0f 28 46 81       	movaps -0x7f(%rsi),%xmm8
   19a4d:	66 41 0f 3a 0f f8 0f 	palignr $0xf,%xmm8,%xmm7
   19a54:	0f 29 7f 90          	movaps %xmm7,-0x70(%rdi)
   19a58:	44 0f 28 8e 71 ff ff 	movaps -0x8f(%rsi),%xmm9
   19a5f:	ff 
   19a60:	66 45 0f 3a 0f c1 0f 	palignr $0xf,%xmm9,%xmm8
   19a67:	44 0f 29 47 80       	movaps %xmm8,-0x80(%rdi)
   19a6c:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19a73:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   19a77:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   19a7b:	0f 83 6f ff ff ff    	jae    199f0 <__intel_ssse3_rep_memcpy+0x17e0>
   19a81:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19a86:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   19a8d:	48 29 d7             	sub    %rdx,%rdi
   19a90:	48 29 d6             	sub    %rdx,%rsi
   19a93:	4c 8d 1d 26 69 01 00 	lea    0x16926(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   19a9a:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   19a9e:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   19aa2:	3e ff e2             	notrack jmpq *%rdx
   19aa5:	0f 0b                	ud2    
   19aa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   19aae:	00 00 
   19ab0:	f3 0f 6f 0e          	movdqu (%rsi),%xmm1
   19ab4:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19ab9:	66 0f 7f 0f          	movdqa %xmm1,(%rdi)
   19abd:	48 83 ea 10          	sub    $0x10,%rdx
   19ac1:	48 83 c6 10          	add    $0x10,%rsi
   19ac5:	48 83 c7 10          	add    $0x10,%rdi
   19ac9:	8b 0d b9 bd 21 00    	mov    0x21bdb9(%rip),%ecx        # 235888 <__libirc_largest_cache_size_half>
   19acf:	48 39 ca             	cmp    %rcx,%rdx
   19ad2:	77 03                	ja     19ad7 <__intel_ssse3_rep_memcpy+0x18c7>
   19ad4:	48 89 d1             	mov    %rdx,%rcx
   19ad7:	48 29 ca             	sub    %rcx,%rdx
   19ada:	48 81 fa 00 10 00 00 	cmp    $0x1000,%rdx
   19ae1:	0f 86 a6 00 00 00    	jbe    19b8d <__intel_ssse3_rep_memcpy+0x197d>
   19ae7:	49 89 c9             	mov    %rcx,%r9
   19aea:	49 c1 e1 03          	shl    $0x3,%r9
   19aee:	4c 39 ca             	cmp    %r9,%rdx
   19af1:	76 06                	jbe    19af9 <__intel_ssse3_rep_memcpy+0x18e9>
   19af3:	48 01 ca             	add    %rcx,%rdx
   19af6:	48 31 c9             	xor    %rcx,%rcx
   19af9:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19b00:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19b07:	0f 18 8e 00 02 00 00 	prefetcht0 0x200(%rsi)
   19b0e:	0f 18 8e 00 03 00 00 	prefetcht0 0x300(%rsi)
   19b15:	f3 0f 6f 06          	movdqu (%rsi),%xmm0
   19b19:	f3 0f 6f 4e 10       	movdqu 0x10(%rsi),%xmm1
   19b1e:	f3 0f 6f 56 20       	movdqu 0x20(%rsi),%xmm2
   19b23:	f3 0f 6f 5e 30       	movdqu 0x30(%rsi),%xmm3
   19b28:	f3 0f 6f 66 40       	movdqu 0x40(%rsi),%xmm4
   19b2d:	f3 0f 6f 6e 50       	movdqu 0x50(%rsi),%xmm5
   19b32:	f3 0f 6f 76 60       	movdqu 0x60(%rsi),%xmm6
   19b37:	f3 0f 6f 7e 70       	movdqu 0x70(%rsi),%xmm7
   19b3c:	0f ae e8             	lfence 
   19b3f:	66 0f e7 07          	movntdq %xmm0,(%rdi)
   19b43:	66 0f e7 4f 10       	movntdq %xmm1,0x10(%rdi)
   19b48:	66 0f e7 57 20       	movntdq %xmm2,0x20(%rdi)
   19b4d:	66 0f e7 5f 30       	movntdq %xmm3,0x30(%rdi)
   19b52:	66 0f e7 67 40       	movntdq %xmm4,0x40(%rdi)
   19b57:	66 0f e7 6f 50       	movntdq %xmm5,0x50(%rdi)
   19b5c:	66 0f e7 77 60       	movntdq %xmm6,0x60(%rdi)
   19b61:	66 0f e7 7f 70       	movntdq %xmm7,0x70(%rdi)
   19b66:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   19b6d:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   19b74:	73 8a                	jae    19b00 <__intel_ssse3_rep_memcpy+0x18f0>
   19b76:	0f ae f8             	sfence 
   19b79:	48 81 f9 80 00 00 00 	cmp    $0x80,%rcx
   19b80:	0f 82 96 00 00 00    	jb     19c1c <__intel_ssse3_rep_memcpy+0x1a0c>
   19b86:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   19b8d:	48 01 ca             	add    %rcx,%rdx
   19b90:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19b97:	0f 18 86 c0 01 00 00 	prefetchnta 0x1c0(%rsi)
   19b9e:	0f 18 86 80 02 00 00 	prefetchnta 0x280(%rsi)
   19ba5:	0f 18 87 c0 01 00 00 	prefetchnta 0x1c0(%rdi)
   19bac:	0f 18 87 80 02 00 00 	prefetchnta 0x280(%rdi)
   19bb3:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19bba:	f3 0f 6f 06          	movdqu (%rsi),%xmm0
   19bbe:	f3 0f 6f 4e 10       	movdqu 0x10(%rsi),%xmm1
   19bc3:	f3 0f 6f 56 20       	movdqu 0x20(%rsi),%xmm2
   19bc8:	f3 0f 6f 5e 30       	movdqu 0x30(%rsi),%xmm3
   19bcd:	f3 0f 6f 66 40       	movdqu 0x40(%rsi),%xmm4
   19bd2:	f3 0f 6f 6e 50       	movdqu 0x50(%rsi),%xmm5
   19bd7:	f3 0f 6f 76 60       	movdqu 0x60(%rsi),%xmm6
   19bdc:	f3 0f 6f 7e 70       	movdqu 0x70(%rsi),%xmm7
   19be1:	66 0f 7f 07          	movdqa %xmm0,(%rdi)
   19be5:	66 0f 7f 4f 10       	movdqa %xmm1,0x10(%rdi)
   19bea:	66 0f 7f 57 20       	movdqa %xmm2,0x20(%rdi)
   19bef:	66 0f 7f 5f 30       	movdqa %xmm3,0x30(%rdi)
   19bf4:	66 0f 7f 67 40       	movdqa %xmm4,0x40(%rdi)
   19bf9:	66 0f 7f 6f 50       	movdqa %xmm5,0x50(%rdi)
   19bfe:	66 0f 7f 77 60       	movdqa %xmm6,0x60(%rdi)
   19c03:	66 0f 7f 7f 70       	movdqa %xmm7,0x70(%rdi)
   19c08:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
   19c0f:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   19c16:	0f 83 7b ff ff ff    	jae    19b97 <__intel_ssse3_rep_memcpy+0x1987>
   19c1c:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   19c23:	48 01 d6             	add    %rdx,%rsi
   19c26:	48 01 d7             	add    %rdx,%rdi
   19c29:	4c 8d 1d d0 69 01 00 	lea    0x169d0(%rip),%r11        # 30600 <__func__.2393+0x407>
   19c30:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   19c34:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   19c38:	3e ff e2             	notrack jmpq *%rdx
   19c3b:	0f 0b                	ud2    
   19c3d:	0f 1f 00             	nopl   (%rax)
   19c40:	48 01 d6             	add    %rdx,%rsi
   19c43:	48 01 d7             	add    %rdx,%rdi
   19c46:	f3 0f 6f 46 f0       	movdqu -0x10(%rsi),%xmm0
   19c4b:	4c 8d 47 f0          	lea    -0x10(%rdi),%r8
   19c4f:	49 89 f9             	mov    %rdi,%r9
   19c52:	48 83 e7 f0          	and    $0xfffffffffffffff0,%rdi
   19c56:	49 29 f9             	sub    %rdi,%r9
   19c59:	4c 29 ce             	sub    %r9,%rsi
   19c5c:	4c 29 ca             	sub    %r9,%rdx
   19c5f:	8b 0d 23 bc 21 00    	mov    0x21bc23(%rip),%ecx        # 235888 <__libirc_largest_cache_size_half>
   19c65:	48 39 ca             	cmp    %rcx,%rdx
   19c68:	77 03                	ja     19c6d <__intel_ssse3_rep_memcpy+0x1a5d>
   19c6a:	48 89 d1             	mov    %rdx,%rcx
   19c6d:	48 29 ca             	sub    %rcx,%rdx
   19c70:	48 81 fa 00 10 00 00 	cmp    $0x1000,%rdx
   19c77:	0f 86 a4 00 00 00    	jbe    19d21 <__intel_ssse3_rep_memcpy+0x1b11>
   19c7d:	49 89 c9             	mov    %rcx,%r9
   19c80:	49 c1 e1 03          	shl    $0x3,%r9
   19c84:	4c 39 ca             	cmp    %r9,%rdx
   19c87:	76 06                	jbe    19c8f <__intel_ssse3_rep_memcpy+0x1a7f>
   19c89:	48 01 ca             	add    %rcx,%rdx
   19c8c:	48 31 c9             	xor    %rcx,%rcx
   19c8f:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19c96:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19c9d:	0f 18 8e 00 fe ff ff 	prefetcht0 -0x200(%rsi)
   19ca4:	0f 18 8e 00 fd ff ff 	prefetcht0 -0x300(%rsi)
   19cab:	f3 0f 6f 4e f0       	movdqu -0x10(%rsi),%xmm1
   19cb0:	f3 0f 6f 56 e0       	movdqu -0x20(%rsi),%xmm2
   19cb5:	f3 0f 6f 5e d0       	movdqu -0x30(%rsi),%xmm3
   19cba:	f3 0f 6f 66 c0       	movdqu -0x40(%rsi),%xmm4
   19cbf:	f3 0f 6f 6e b0       	movdqu -0x50(%rsi),%xmm5
   19cc4:	f3 0f 6f 76 a0       	movdqu -0x60(%rsi),%xmm6
   19cc9:	f3 0f 6f 7e 90       	movdqu -0x70(%rsi),%xmm7
   19cce:	f3 44 0f 6f 46 80    	movdqu -0x80(%rsi),%xmm8
   19cd4:	0f ae e8             	lfence 
   19cd7:	66 0f e7 4f f0       	movntdq %xmm1,-0x10(%rdi)
   19cdc:	66 0f e7 57 e0       	movntdq %xmm2,-0x20(%rdi)
   19ce1:	66 0f e7 5f d0       	movntdq %xmm3,-0x30(%rdi)
   19ce6:	66 0f e7 67 c0       	movntdq %xmm4,-0x40(%rdi)
   19ceb:	66 0f e7 6f b0       	movntdq %xmm5,-0x50(%rdi)
   19cf0:	66 0f e7 77 a0       	movntdq %xmm6,-0x60(%rdi)
   19cf5:	66 0f e7 7f 90       	movntdq %xmm7,-0x70(%rdi)
   19cfa:	66 44 0f e7 47 80    	movntdq %xmm8,-0x80(%rdi)
   19d00:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   19d04:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   19d08:	73 8c                	jae    19c96 <__intel_ssse3_rep_memcpy+0x1a86>
   19d0a:	0f ae f8             	sfence 
   19d0d:	48 81 f9 80 00 00 00 	cmp    $0x80,%rcx
   19d14:	0f 82 90 00 00 00    	jb     19daa <__intel_ssse3_rep_memcpy+0x1b9a>
   19d1a:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   19d21:	48 01 ca             	add    %rcx,%rdx
   19d24:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19d2b:	0f 18 86 40 fe ff ff 	prefetchnta -0x1c0(%rsi)
   19d32:	0f 18 86 80 fd ff ff 	prefetchnta -0x280(%rsi)
   19d39:	0f 18 87 40 fe ff ff 	prefetchnta -0x1c0(%rdi)
   19d40:	0f 18 87 80 fd ff ff 	prefetchnta -0x280(%rdi)
   19d47:	48 81 ea 80 00 00 00 	sub    $0x80,%rdx
   19d4e:	f3 0f 6f 4e f0       	movdqu -0x10(%rsi),%xmm1
   19d53:	f3 0f 6f 56 e0       	movdqu -0x20(%rsi),%xmm2
   19d58:	f3 0f 6f 5e d0       	movdqu -0x30(%rsi),%xmm3
   19d5d:	f3 0f 6f 66 c0       	movdqu -0x40(%rsi),%xmm4
   19d62:	f3 0f 6f 6e b0       	movdqu -0x50(%rsi),%xmm5
   19d67:	f3 0f 6f 76 a0       	movdqu -0x60(%rsi),%xmm6
   19d6c:	f3 0f 6f 7e 90       	movdqu -0x70(%rsi),%xmm7
   19d71:	f3 44 0f 6f 46 80    	movdqu -0x80(%rsi),%xmm8
   19d77:	66 0f 7f 4f f0       	movdqa %xmm1,-0x10(%rdi)
   19d7c:	66 0f 7f 57 e0       	movdqa %xmm2,-0x20(%rdi)
   19d81:	66 0f 7f 5f d0       	movdqa %xmm3,-0x30(%rdi)
   19d86:	66 0f 7f 67 c0       	movdqa %xmm4,-0x40(%rdi)
   19d8b:	66 0f 7f 6f b0       	movdqa %xmm5,-0x50(%rdi)
   19d90:	66 0f 7f 77 a0       	movdqa %xmm6,-0x60(%rdi)
   19d95:	66 0f 7f 7f 90       	movdqa %xmm7,-0x70(%rdi)
   19d9a:	66 44 0f 7f 47 80    	movdqa %xmm8,-0x80(%rdi)
   19da0:	48 8d 76 80          	lea    -0x80(%rsi),%rsi
   19da4:	48 8d 7f 80          	lea    -0x80(%rdi),%rdi
   19da8:	73 81                	jae    19d2b <__intel_ssse3_rep_memcpy+0x1b1b>
   19daa:	f3 41 0f 7f 00       	movdqu %xmm0,(%r8)
   19daf:	48 81 c2 80 00 00 00 	add    $0x80,%rdx
   19db6:	48 29 d6             	sub    %rdx,%rsi
   19db9:	48 29 d7             	sub    %rdx,%rdi
   19dbc:	4c 8d 1d fd 65 01 00 	lea    0x165fd(%rip),%r11        # 303c0 <__func__.2393+0x1c7>
   19dc3:	49 63 14 93          	movslq (%r11,%rdx,4),%rdx
   19dc7:	49 8d 14 13          	lea    (%r11,%rdx,1),%rdx
   19dcb:	3e ff e2             	notrack jmpq *%rdx
   19dce:	0f 0b                	ud2    
   19dd0:	f2 0f f0 46 80       	lddqu  -0x80(%rsi),%xmm0
   19dd5:	f3 0f 7f 47 80       	movdqu %xmm0,-0x80(%rdi)
   19dda:	f2 0f f0 46 90       	lddqu  -0x70(%rsi),%xmm0
   19ddf:	f3 0f 7f 47 90       	movdqu %xmm0,-0x70(%rdi)
   19de4:	f2 0f f0 46 a0       	lddqu  -0x60(%rsi),%xmm0
   19de9:	f3 0f 7f 47 a0       	movdqu %xmm0,-0x60(%rdi)
   19dee:	f2 0f f0 46 b0       	lddqu  -0x50(%rsi),%xmm0
   19df3:	f3 0f 7f 47 b0       	movdqu %xmm0,-0x50(%rdi)
   19df8:	f2 0f f0 46 c0       	lddqu  -0x40(%rsi),%xmm0
   19dfd:	f3 0f 7f 47 c0       	movdqu %xmm0,-0x40(%rdi)
   19e02:	f2 0f f0 46 d0       	lddqu  -0x30(%rsi),%xmm0
   19e07:	f3 0f 7f 47 d0       	movdqu %xmm0,-0x30(%rdi)
   19e0c:	f2 0f f0 46 e0       	lddqu  -0x20(%rsi),%xmm0
   19e11:	f3 0f 7f 47 e0       	movdqu %xmm0,-0x20(%rdi)
   19e16:	f2 0f f0 46 f0       	lddqu  -0x10(%rsi),%xmm0
   19e1b:	f3 0f 7f 47 f0       	movdqu %xmm0,-0x10(%rdi)
   19e20:	c3                   	retq   
   19e21:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   19e26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   19e2d:	00 00 00 
   19e30:	f2 0f f0 86 71 ff ff 	lddqu  -0x8f(%rsi),%xmm0
   19e37:	ff 
   19e38:	f3 0f 7f 87 71 ff ff 	movdqu %xmm0,-0x8f(%rdi)
   19e3f:	ff 
   19e40:	f2 0f f0 46 81       	lddqu  -0x7f(%rsi),%xmm0
   19e45:	f3 0f 7f 47 81       	movdqu %xmm0,-0x7f(%rdi)
   19e4a:	f2 0f f0 46 91       	lddqu  -0x6f(%rsi),%xmm0
   19e4f:	f3 0f 7f 47 91       	movdqu %xmm0,-0x6f(%rdi)
   19e54:	f2 0f f0 46 a1       	lddqu  -0x5f(%rsi),%xmm0
   19e59:	f3 0f 7f 47 a1       	movdqu %xmm0,-0x5f(%rdi)
   19e5e:	f2 0f f0 46 b1       	lddqu  -0x4f(%rsi),%xmm0
   19e63:	f3 0f 7f 47 b1       	movdqu %xmm0,-0x4f(%rdi)
   19e68:	f2 0f f0 46 c1       	lddqu  -0x3f(%rsi),%xmm0
   19e6d:	f3 0f 7f 47 c1       	movdqu %xmm0,-0x3f(%rdi)
   19e72:	f2 0f f0 46 d1       	lddqu  -0x2f(%rsi),%xmm0
   19e77:	f3 0f 7f 47 d1       	movdqu %xmm0,-0x2f(%rdi)
   19e7c:	f2 0f f0 46 e1       	lddqu  -0x1f(%rsi),%xmm0
   19e81:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   19e86:	f3 0f 7f 47 e1       	movdqu %xmm0,-0x1f(%rdi)
   19e8b:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   19e90:	c3                   	retq   
   19e91:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   19e96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   19e9d:	00 00 00 
   19ea0:	48 8b 56 f1          	mov    -0xf(%rsi),%rdx
   19ea4:	48 8b 4e f8          	mov    -0x8(%rsi),%rcx
   19ea8:	48 89 57 f1          	mov    %rdx,-0xf(%rdi)
   19eac:	48 89 4f f8          	mov    %rcx,-0x8(%rdi)
   19eb0:	c3                   	retq   
   19eb1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   19eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   19ebd:	00 00 00 
   19ec0:	f2 0f f0 86 72 ff ff 	lddqu  -0x8e(%rsi),%xmm0
   19ec7:	ff 
   19ec8:	f3 0f 7f 87 72 ff ff 	movdqu %xmm0,-0x8e(%rdi)
   19ecf:	ff 
   19ed0:	f2 0f f0 46 82       	lddqu  -0x7e(%rsi),%xmm0
   19ed5:	f3 0f 7f 47 82       	movdqu %xmm0,-0x7e(%rdi)
   19eda:	f2 0f f0 46 92       	lddqu  -0x6e(%rsi),%xmm0
   19edf:	f3 0f 7f 47 92       	movdqu %xmm0,-0x6e(%rdi)
   19ee4:	f2 0f f0 46 a2       	lddqu  -0x5e(%rsi),%xmm0
   19ee9:	f3 0f 7f 47 a2       	movdqu %xmm0,-0x5e(%rdi)
   19eee:	f2 0f f0 46 b2       	lddqu  -0x4e(%rsi),%xmm0
   19ef3:	f3 0f 7f 47 b2       	movdqu %xmm0,-0x4e(%rdi)
   19ef8:	f2 0f f0 46 c2       	lddqu  -0x3e(%rsi),%xmm0
   19efd:	f3 0f 7f 47 c2       	movdqu %xmm0,-0x3e(%rdi)
   19f02:	f2 0f f0 46 d2       	lddqu  -0x2e(%rsi),%xmm0
   19f07:	f3 0f 7f 47 d2       	movdqu %xmm0,-0x2e(%rdi)
   19f0c:	f2 0f f0 46 e2       	lddqu  -0x1e(%rsi),%xmm0
   19f11:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   19f16:	f3 0f 7f 47 e2       	movdqu %xmm0,-0x1e(%rdi)
   19f1b:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   19f20:	c3                   	retq   
   19f21:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   19f26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   19f2d:	00 00 00 
   19f30:	48 8b 56 f2          	mov    -0xe(%rsi),%rdx
   19f34:	48 8b 4e f8          	mov    -0x8(%rsi),%rcx
   19f38:	48 89 57 f2          	mov    %rdx,-0xe(%rdi)
   19f3c:	48 89 4f f8          	mov    %rcx,-0x8(%rdi)
   19f40:	c3                   	retq   
   19f41:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   19f46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   19f4d:	00 00 00 
   19f50:	f2 0f f0 86 73 ff ff 	lddqu  -0x8d(%rsi),%xmm0
   19f57:	ff 
   19f58:	f3 0f 7f 87 73 ff ff 	movdqu %xmm0,-0x8d(%rdi)
   19f5f:	ff 
   19f60:	f2 0f f0 46 83       	lddqu  -0x7d(%rsi),%xmm0
   19f65:	f3 0f 7f 47 83       	movdqu %xmm0,-0x7d(%rdi)
   19f6a:	f2 0f f0 46 93       	lddqu  -0x6d(%rsi),%xmm0
   19f6f:	f3 0f 7f 47 93       	movdqu %xmm0,-0x6d(%rdi)
   19f74:	f2 0f f0 46 a3       	lddqu  -0x5d(%rsi),%xmm0
   19f79:	f3 0f 7f 47 a3       	movdqu %xmm0,-0x5d(%rdi)
   19f7e:	f2 0f f0 46 b3       	lddqu  -0x4d(%rsi),%xmm0
   19f83:	f3 0f 7f 47 b3       	movdqu %xmm0,-0x4d(%rdi)
   19f88:	f2 0f f0 46 c3       	lddqu  -0x3d(%rsi),%xmm0
   19f8d:	f3 0f 7f 47 c3       	movdqu %xmm0,-0x3d(%rdi)
   19f92:	f2 0f f0 46 d3       	lddqu  -0x2d(%rsi),%xmm0
   19f97:	f3 0f 7f 47 d3       	movdqu %xmm0,-0x2d(%rdi)
   19f9c:	f2 0f f0 46 e3       	lddqu  -0x1d(%rsi),%xmm0
   19fa1:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   19fa6:	f3 0f 7f 47 e3       	movdqu %xmm0,-0x1d(%rdi)
   19fab:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   19fb0:	c3                   	retq   
   19fb1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   19fb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   19fbd:	00 00 00 
   19fc0:	48 8b 56 f3          	mov    -0xd(%rsi),%rdx
   19fc4:	48 8b 4e f8          	mov    -0x8(%rsi),%rcx
   19fc8:	48 89 57 f3          	mov    %rdx,-0xd(%rdi)
   19fcc:	48 89 4f f8          	mov    %rcx,-0x8(%rdi)
   19fd0:	c3                   	retq   
   19fd1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   19fd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   19fdd:	00 00 00 
   19fe0:	f2 0f f0 86 74 ff ff 	lddqu  -0x8c(%rsi),%xmm0
   19fe7:	ff 
   19fe8:	f3 0f 7f 87 74 ff ff 	movdqu %xmm0,-0x8c(%rdi)
   19fef:	ff 
   19ff0:	f2 0f f0 46 84       	lddqu  -0x7c(%rsi),%xmm0
   19ff5:	f3 0f 7f 47 84       	movdqu %xmm0,-0x7c(%rdi)
   19ffa:	f2 0f f0 46 94       	lddqu  -0x6c(%rsi),%xmm0
   19fff:	f3 0f 7f 47 94       	movdqu %xmm0,-0x6c(%rdi)
   1a004:	f2 0f f0 46 a4       	lddqu  -0x5c(%rsi),%xmm0
   1a009:	f3 0f 7f 47 a4       	movdqu %xmm0,-0x5c(%rdi)
   1a00e:	f2 0f f0 46 b4       	lddqu  -0x4c(%rsi),%xmm0
   1a013:	f3 0f 7f 47 b4       	movdqu %xmm0,-0x4c(%rdi)
   1a018:	f2 0f f0 46 c4       	lddqu  -0x3c(%rsi),%xmm0
   1a01d:	f3 0f 7f 47 c4       	movdqu %xmm0,-0x3c(%rdi)
   1a022:	f2 0f f0 46 d4       	lddqu  -0x2c(%rsi),%xmm0
   1a027:	f3 0f 7f 47 d4       	movdqu %xmm0,-0x2c(%rdi)
   1a02c:	f2 0f f0 46 e4       	lddqu  -0x1c(%rsi),%xmm0
   1a031:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a036:	f3 0f 7f 47 e4       	movdqu %xmm0,-0x1c(%rdi)
   1a03b:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a040:	c3                   	retq   
   1a041:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a046:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a04d:	00 00 00 
   1a050:	48 8b 56 f4          	mov    -0xc(%rsi),%rdx
   1a054:	8b 4e fc             	mov    -0x4(%rsi),%ecx
   1a057:	48 89 57 f4          	mov    %rdx,-0xc(%rdi)
   1a05b:	89 4f fc             	mov    %ecx,-0x4(%rdi)
   1a05e:	c3                   	retq   
   1a05f:	90                   	nop
   1a060:	f2 0f f0 86 75 ff ff 	lddqu  -0x8b(%rsi),%xmm0
   1a067:	ff 
   1a068:	f3 0f 7f 87 75 ff ff 	movdqu %xmm0,-0x8b(%rdi)
   1a06f:	ff 
   1a070:	f2 0f f0 46 85       	lddqu  -0x7b(%rsi),%xmm0
   1a075:	f3 0f 7f 47 85       	movdqu %xmm0,-0x7b(%rdi)
   1a07a:	f2 0f f0 46 95       	lddqu  -0x6b(%rsi),%xmm0
   1a07f:	f3 0f 7f 47 95       	movdqu %xmm0,-0x6b(%rdi)
   1a084:	f2 0f f0 46 a5       	lddqu  -0x5b(%rsi),%xmm0
   1a089:	f3 0f 7f 47 a5       	movdqu %xmm0,-0x5b(%rdi)
   1a08e:	f2 0f f0 46 b5       	lddqu  -0x4b(%rsi),%xmm0
   1a093:	f3 0f 7f 47 b5       	movdqu %xmm0,-0x4b(%rdi)
   1a098:	f2 0f f0 46 c5       	lddqu  -0x3b(%rsi),%xmm0
   1a09d:	f3 0f 7f 47 c5       	movdqu %xmm0,-0x3b(%rdi)
   1a0a2:	f2 0f f0 46 d5       	lddqu  -0x2b(%rsi),%xmm0
   1a0a7:	f3 0f 7f 47 d5       	movdqu %xmm0,-0x2b(%rdi)
   1a0ac:	f2 0f f0 46 e5       	lddqu  -0x1b(%rsi),%xmm0
   1a0b1:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a0b6:	f3 0f 7f 47 e5       	movdqu %xmm0,-0x1b(%rdi)
   1a0bb:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a0c0:	c3                   	retq   
   1a0c1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a0c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a0cd:	00 00 00 
   1a0d0:	48 8b 56 f5          	mov    -0xb(%rsi),%rdx
   1a0d4:	8b 4e fc             	mov    -0x4(%rsi),%ecx
   1a0d7:	48 89 57 f5          	mov    %rdx,-0xb(%rdi)
   1a0db:	89 4f fc             	mov    %ecx,-0x4(%rdi)
   1a0de:	c3                   	retq   
   1a0df:	90                   	nop
   1a0e0:	f2 0f f0 86 76 ff ff 	lddqu  -0x8a(%rsi),%xmm0
   1a0e7:	ff 
   1a0e8:	f3 0f 7f 87 76 ff ff 	movdqu %xmm0,-0x8a(%rdi)
   1a0ef:	ff 
   1a0f0:	f2 0f f0 46 86       	lddqu  -0x7a(%rsi),%xmm0
   1a0f5:	f3 0f 7f 47 86       	movdqu %xmm0,-0x7a(%rdi)
   1a0fa:	f2 0f f0 46 96       	lddqu  -0x6a(%rsi),%xmm0
   1a0ff:	f3 0f 7f 47 96       	movdqu %xmm0,-0x6a(%rdi)
   1a104:	f2 0f f0 46 a6       	lddqu  -0x5a(%rsi),%xmm0
   1a109:	f3 0f 7f 47 a6       	movdqu %xmm0,-0x5a(%rdi)
   1a10e:	f2 0f f0 46 b6       	lddqu  -0x4a(%rsi),%xmm0
   1a113:	f3 0f 7f 47 b6       	movdqu %xmm0,-0x4a(%rdi)
   1a118:	f2 0f f0 46 c6       	lddqu  -0x3a(%rsi),%xmm0
   1a11d:	f3 0f 7f 47 c6       	movdqu %xmm0,-0x3a(%rdi)
   1a122:	f2 0f f0 46 d6       	lddqu  -0x2a(%rsi),%xmm0
   1a127:	f3 0f 7f 47 d6       	movdqu %xmm0,-0x2a(%rdi)
   1a12c:	f2 0f f0 46 e6       	lddqu  -0x1a(%rsi),%xmm0
   1a131:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a136:	f3 0f 7f 47 e6       	movdqu %xmm0,-0x1a(%rdi)
   1a13b:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a140:	c3                   	retq   
   1a141:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a146:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a14d:	00 00 00 
   1a150:	48 8b 56 f6          	mov    -0xa(%rsi),%rdx
   1a154:	8b 4e fc             	mov    -0x4(%rsi),%ecx
   1a157:	48 89 57 f6          	mov    %rdx,-0xa(%rdi)
   1a15b:	89 4f fc             	mov    %ecx,-0x4(%rdi)
   1a15e:	c3                   	retq   
   1a15f:	90                   	nop
   1a160:	f2 0f f0 86 77 ff ff 	lddqu  -0x89(%rsi),%xmm0
   1a167:	ff 
   1a168:	f3 0f 7f 87 77 ff ff 	movdqu %xmm0,-0x89(%rdi)
   1a16f:	ff 
   1a170:	f2 0f f0 46 87       	lddqu  -0x79(%rsi),%xmm0
   1a175:	f3 0f 7f 47 87       	movdqu %xmm0,-0x79(%rdi)
   1a17a:	f2 0f f0 46 97       	lddqu  -0x69(%rsi),%xmm0
   1a17f:	f3 0f 7f 47 97       	movdqu %xmm0,-0x69(%rdi)
   1a184:	f2 0f f0 46 a7       	lddqu  -0x59(%rsi),%xmm0
   1a189:	f3 0f 7f 47 a7       	movdqu %xmm0,-0x59(%rdi)
   1a18e:	f2 0f f0 46 b7       	lddqu  -0x49(%rsi),%xmm0
   1a193:	f3 0f 7f 47 b7       	movdqu %xmm0,-0x49(%rdi)
   1a198:	f2 0f f0 46 c7       	lddqu  -0x39(%rsi),%xmm0
   1a19d:	f3 0f 7f 47 c7       	movdqu %xmm0,-0x39(%rdi)
   1a1a2:	f2 0f f0 46 d7       	lddqu  -0x29(%rsi),%xmm0
   1a1a7:	f3 0f 7f 47 d7       	movdqu %xmm0,-0x29(%rdi)
   1a1ac:	f2 0f f0 46 e7       	lddqu  -0x19(%rsi),%xmm0
   1a1b1:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a1b6:	f3 0f 7f 47 e7       	movdqu %xmm0,-0x19(%rdi)
   1a1bb:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a1c0:	c3                   	retq   
   1a1c1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a1c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a1cd:	00 00 00 
   1a1d0:	48 8b 56 f7          	mov    -0x9(%rsi),%rdx
   1a1d4:	8b 4e fc             	mov    -0x4(%rsi),%ecx
   1a1d7:	48 89 57 f7          	mov    %rdx,-0x9(%rdi)
   1a1db:	89 4f fc             	mov    %ecx,-0x4(%rdi)
   1a1de:	c3                   	retq   
   1a1df:	90                   	nop
   1a1e0:	f2 0f f0 86 78 ff ff 	lddqu  -0x88(%rsi),%xmm0
   1a1e7:	ff 
   1a1e8:	f3 0f 7f 87 78 ff ff 	movdqu %xmm0,-0x88(%rdi)
   1a1ef:	ff 
   1a1f0:	f2 0f f0 46 88       	lddqu  -0x78(%rsi),%xmm0
   1a1f5:	f3 0f 7f 47 88       	movdqu %xmm0,-0x78(%rdi)
   1a1fa:	f2 0f f0 46 98       	lddqu  -0x68(%rsi),%xmm0
   1a1ff:	f3 0f 7f 47 98       	movdqu %xmm0,-0x68(%rdi)
   1a204:	f2 0f f0 46 a8       	lddqu  -0x58(%rsi),%xmm0
   1a209:	f3 0f 7f 47 a8       	movdqu %xmm0,-0x58(%rdi)
   1a20e:	f2 0f f0 46 b8       	lddqu  -0x48(%rsi),%xmm0
   1a213:	f3 0f 7f 47 b8       	movdqu %xmm0,-0x48(%rdi)
   1a218:	f2 0f f0 46 c8       	lddqu  -0x38(%rsi),%xmm0
   1a21d:	f3 0f 7f 47 c8       	movdqu %xmm0,-0x38(%rdi)
   1a222:	f2 0f f0 46 d8       	lddqu  -0x28(%rsi),%xmm0
   1a227:	f3 0f 7f 47 d8       	movdqu %xmm0,-0x28(%rdi)
   1a22c:	f2 0f f0 46 e8       	lddqu  -0x18(%rsi),%xmm0
   1a231:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a236:	f3 0f 7f 47 e8       	movdqu %xmm0,-0x18(%rdi)
   1a23b:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a240:	c3                   	retq   
   1a241:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a246:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a24d:	00 00 00 
   1a250:	48 8b 56 f8          	mov    -0x8(%rsi),%rdx
   1a254:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   1a258:	c3                   	retq   
   1a259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a260:	f2 0f f0 86 79 ff ff 	lddqu  -0x87(%rsi),%xmm0
   1a267:	ff 
   1a268:	f3 0f 7f 87 79 ff ff 	movdqu %xmm0,-0x87(%rdi)
   1a26f:	ff 
   1a270:	f2 0f f0 46 89       	lddqu  -0x77(%rsi),%xmm0
   1a275:	f3 0f 7f 47 89       	movdqu %xmm0,-0x77(%rdi)
   1a27a:	f2 0f f0 46 99       	lddqu  -0x67(%rsi),%xmm0
   1a27f:	f3 0f 7f 47 99       	movdqu %xmm0,-0x67(%rdi)
   1a284:	f2 0f f0 46 a9       	lddqu  -0x57(%rsi),%xmm0
   1a289:	f3 0f 7f 47 a9       	movdqu %xmm0,-0x57(%rdi)
   1a28e:	f2 0f f0 46 b9       	lddqu  -0x47(%rsi),%xmm0
   1a293:	f3 0f 7f 47 b9       	movdqu %xmm0,-0x47(%rdi)
   1a298:	f2 0f f0 46 c9       	lddqu  -0x37(%rsi),%xmm0
   1a29d:	f3 0f 7f 47 c9       	movdqu %xmm0,-0x37(%rdi)
   1a2a2:	f2 0f f0 46 d9       	lddqu  -0x27(%rsi),%xmm0
   1a2a7:	f3 0f 7f 47 d9       	movdqu %xmm0,-0x27(%rdi)
   1a2ac:	f2 0f f0 46 e9       	lddqu  -0x17(%rsi),%xmm0
   1a2b1:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a2b6:	f3 0f 7f 47 e9       	movdqu %xmm0,-0x17(%rdi)
   1a2bb:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a2c0:	c3                   	retq   
   1a2c1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a2c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a2cd:	00 00 00 
   1a2d0:	8b 56 f9             	mov    -0x7(%rsi),%edx
   1a2d3:	8b 4e fc             	mov    -0x4(%rsi),%ecx
   1a2d6:	89 57 f9             	mov    %edx,-0x7(%rdi)
   1a2d9:	89 4f fc             	mov    %ecx,-0x4(%rdi)
   1a2dc:	c3                   	retq   
   1a2dd:	0f 1f 00             	nopl   (%rax)
   1a2e0:	f2 0f f0 86 7a ff ff 	lddqu  -0x86(%rsi),%xmm0
   1a2e7:	ff 
   1a2e8:	f3 0f 7f 87 7a ff ff 	movdqu %xmm0,-0x86(%rdi)
   1a2ef:	ff 
   1a2f0:	f2 0f f0 46 8a       	lddqu  -0x76(%rsi),%xmm0
   1a2f5:	f3 0f 7f 47 8a       	movdqu %xmm0,-0x76(%rdi)
   1a2fa:	f2 0f f0 46 9a       	lddqu  -0x66(%rsi),%xmm0
   1a2ff:	f3 0f 7f 47 9a       	movdqu %xmm0,-0x66(%rdi)
   1a304:	f2 0f f0 46 aa       	lddqu  -0x56(%rsi),%xmm0
   1a309:	f3 0f 7f 47 aa       	movdqu %xmm0,-0x56(%rdi)
   1a30e:	f2 0f f0 46 ba       	lddqu  -0x46(%rsi),%xmm0
   1a313:	f3 0f 7f 47 ba       	movdqu %xmm0,-0x46(%rdi)
   1a318:	f2 0f f0 46 ca       	lddqu  -0x36(%rsi),%xmm0
   1a31d:	f3 0f 7f 47 ca       	movdqu %xmm0,-0x36(%rdi)
   1a322:	f2 0f f0 46 da       	lddqu  -0x26(%rsi),%xmm0
   1a327:	f3 0f 7f 47 da       	movdqu %xmm0,-0x26(%rdi)
   1a32c:	f2 0f f0 46 ea       	lddqu  -0x16(%rsi),%xmm0
   1a331:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a336:	f3 0f 7f 47 ea       	movdqu %xmm0,-0x16(%rdi)
   1a33b:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a340:	c3                   	retq   
   1a341:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a346:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a34d:	00 00 00 
   1a350:	8b 56 fa             	mov    -0x6(%rsi),%edx
   1a353:	8b 4e fc             	mov    -0x4(%rsi),%ecx
   1a356:	89 57 fa             	mov    %edx,-0x6(%rdi)
   1a359:	89 4f fc             	mov    %ecx,-0x4(%rdi)
   1a35c:	c3                   	retq   
   1a35d:	0f 1f 00             	nopl   (%rax)
   1a360:	f2 0f f0 86 7b ff ff 	lddqu  -0x85(%rsi),%xmm0
   1a367:	ff 
   1a368:	f3 0f 7f 87 7b ff ff 	movdqu %xmm0,-0x85(%rdi)
   1a36f:	ff 
   1a370:	f2 0f f0 46 8b       	lddqu  -0x75(%rsi),%xmm0
   1a375:	f3 0f 7f 47 8b       	movdqu %xmm0,-0x75(%rdi)
   1a37a:	f2 0f f0 46 9b       	lddqu  -0x65(%rsi),%xmm0
   1a37f:	f3 0f 7f 47 9b       	movdqu %xmm0,-0x65(%rdi)
   1a384:	f2 0f f0 46 ab       	lddqu  -0x55(%rsi),%xmm0
   1a389:	f3 0f 7f 47 ab       	movdqu %xmm0,-0x55(%rdi)
   1a38e:	f2 0f f0 46 bb       	lddqu  -0x45(%rsi),%xmm0
   1a393:	f3 0f 7f 47 bb       	movdqu %xmm0,-0x45(%rdi)
   1a398:	f2 0f f0 46 cb       	lddqu  -0x35(%rsi),%xmm0
   1a39d:	f3 0f 7f 47 cb       	movdqu %xmm0,-0x35(%rdi)
   1a3a2:	f2 0f f0 46 db       	lddqu  -0x25(%rsi),%xmm0
   1a3a7:	f3 0f 7f 47 db       	movdqu %xmm0,-0x25(%rdi)
   1a3ac:	f2 0f f0 46 eb       	lddqu  -0x15(%rsi),%xmm0
   1a3b1:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a3b6:	f3 0f 7f 47 eb       	movdqu %xmm0,-0x15(%rdi)
   1a3bb:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a3c0:	c3                   	retq   
   1a3c1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a3c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a3cd:	00 00 00 
   1a3d0:	8b 56 fb             	mov    -0x5(%rsi),%edx
   1a3d3:	8b 4e fc             	mov    -0x4(%rsi),%ecx
   1a3d6:	89 57 fb             	mov    %edx,-0x5(%rdi)
   1a3d9:	89 4f fc             	mov    %ecx,-0x4(%rdi)
   1a3dc:	c3                   	retq   
   1a3dd:	0f 1f 00             	nopl   (%rax)
   1a3e0:	f2 0f f0 86 7c ff ff 	lddqu  -0x84(%rsi),%xmm0
   1a3e7:	ff 
   1a3e8:	f3 0f 7f 87 7c ff ff 	movdqu %xmm0,-0x84(%rdi)
   1a3ef:	ff 
   1a3f0:	f2 0f f0 46 8c       	lddqu  -0x74(%rsi),%xmm0
   1a3f5:	f3 0f 7f 47 8c       	movdqu %xmm0,-0x74(%rdi)
   1a3fa:	f2 0f f0 46 9c       	lddqu  -0x64(%rsi),%xmm0
   1a3ff:	f3 0f 7f 47 9c       	movdqu %xmm0,-0x64(%rdi)
   1a404:	f2 0f f0 46 ac       	lddqu  -0x54(%rsi),%xmm0
   1a409:	f3 0f 7f 47 ac       	movdqu %xmm0,-0x54(%rdi)
   1a40e:	f2 0f f0 46 bc       	lddqu  -0x44(%rsi),%xmm0
   1a413:	f3 0f 7f 47 bc       	movdqu %xmm0,-0x44(%rdi)
   1a418:	f2 0f f0 46 cc       	lddqu  -0x34(%rsi),%xmm0
   1a41d:	f3 0f 7f 47 cc       	movdqu %xmm0,-0x34(%rdi)
   1a422:	f2 0f f0 46 dc       	lddqu  -0x24(%rsi),%xmm0
   1a427:	f3 0f 7f 47 dc       	movdqu %xmm0,-0x24(%rdi)
   1a42c:	f2 0f f0 46 ec       	lddqu  -0x14(%rsi),%xmm0
   1a431:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a436:	f3 0f 7f 47 ec       	movdqu %xmm0,-0x14(%rdi)
   1a43b:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a440:	c3                   	retq   
   1a441:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a446:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a44d:	00 00 00 
   1a450:	8b 56 fc             	mov    -0x4(%rsi),%edx
   1a453:	89 57 fc             	mov    %edx,-0x4(%rdi)
   1a456:	c3                   	retq   
   1a457:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1a45e:	00 00 
   1a460:	f2 0f f0 86 7d ff ff 	lddqu  -0x83(%rsi),%xmm0
   1a467:	ff 
   1a468:	f3 0f 7f 87 7d ff ff 	movdqu %xmm0,-0x83(%rdi)
   1a46f:	ff 
   1a470:	f2 0f f0 46 8d       	lddqu  -0x73(%rsi),%xmm0
   1a475:	f3 0f 7f 47 8d       	movdqu %xmm0,-0x73(%rdi)
   1a47a:	f2 0f f0 46 9d       	lddqu  -0x63(%rsi),%xmm0
   1a47f:	f3 0f 7f 47 9d       	movdqu %xmm0,-0x63(%rdi)
   1a484:	f2 0f f0 46 ad       	lddqu  -0x53(%rsi),%xmm0
   1a489:	f3 0f 7f 47 ad       	movdqu %xmm0,-0x53(%rdi)
   1a48e:	f2 0f f0 46 bd       	lddqu  -0x43(%rsi),%xmm0
   1a493:	f3 0f 7f 47 bd       	movdqu %xmm0,-0x43(%rdi)
   1a498:	f2 0f f0 46 cd       	lddqu  -0x33(%rsi),%xmm0
   1a49d:	f3 0f 7f 47 cd       	movdqu %xmm0,-0x33(%rdi)
   1a4a2:	f2 0f f0 46 dd       	lddqu  -0x23(%rsi),%xmm0
   1a4a7:	f3 0f 7f 47 dd       	movdqu %xmm0,-0x23(%rdi)
   1a4ac:	f2 0f f0 46 ed       	lddqu  -0x13(%rsi),%xmm0
   1a4b1:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a4b6:	f3 0f 7f 47 ed       	movdqu %xmm0,-0x13(%rdi)
   1a4bb:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a4c0:	c3                   	retq   
   1a4c1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a4c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a4cd:	00 00 00 
   1a4d0:	66 8b 56 fd          	mov    -0x3(%rsi),%dx
   1a4d4:	66 8b 4e fe          	mov    -0x2(%rsi),%cx
   1a4d8:	66 89 57 fd          	mov    %dx,-0x3(%rdi)
   1a4dc:	66 89 4f fe          	mov    %cx,-0x2(%rdi)
   1a4e0:	c3                   	retq   
   1a4e1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a4e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a4ed:	00 00 00 
   1a4f0:	f2 0f f0 86 7e ff ff 	lddqu  -0x82(%rsi),%xmm0
   1a4f7:	ff 
   1a4f8:	f3 0f 7f 87 7e ff ff 	movdqu %xmm0,-0x82(%rdi)
   1a4ff:	ff 
   1a500:	f2 0f f0 46 8e       	lddqu  -0x72(%rsi),%xmm0
   1a505:	f3 0f 7f 47 8e       	movdqu %xmm0,-0x72(%rdi)
   1a50a:	f2 0f f0 46 9e       	lddqu  -0x62(%rsi),%xmm0
   1a50f:	f3 0f 7f 47 9e       	movdqu %xmm0,-0x62(%rdi)
   1a514:	f2 0f f0 46 ae       	lddqu  -0x52(%rsi),%xmm0
   1a519:	f3 0f 7f 47 ae       	movdqu %xmm0,-0x52(%rdi)
   1a51e:	f2 0f f0 46 be       	lddqu  -0x42(%rsi),%xmm0
   1a523:	f3 0f 7f 47 be       	movdqu %xmm0,-0x42(%rdi)
   1a528:	f2 0f f0 46 ce       	lddqu  -0x32(%rsi),%xmm0
   1a52d:	f3 0f 7f 47 ce       	movdqu %xmm0,-0x32(%rdi)
   1a532:	f2 0f f0 46 de       	lddqu  -0x22(%rsi),%xmm0
   1a537:	f3 0f 7f 47 de       	movdqu %xmm0,-0x22(%rdi)
   1a53c:	f2 0f f0 46 ee       	lddqu  -0x12(%rsi),%xmm0
   1a541:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a546:	f3 0f 7f 47 ee       	movdqu %xmm0,-0x12(%rdi)
   1a54b:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a550:	c3                   	retq   
   1a551:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a55d:	00 00 00 
   1a560:	0f b7 56 fe          	movzwl -0x2(%rsi),%edx
   1a564:	66 89 57 fe          	mov    %dx,-0x2(%rdi)
   1a568:	c3                   	retq   
   1a569:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a570:	f2 0f f0 86 7f ff ff 	lddqu  -0x81(%rsi),%xmm0
   1a577:	ff 
   1a578:	f3 0f 7f 87 7f ff ff 	movdqu %xmm0,-0x81(%rdi)
   1a57f:	ff 
   1a580:	f2 0f f0 46 8f       	lddqu  -0x71(%rsi),%xmm0
   1a585:	f3 0f 7f 47 8f       	movdqu %xmm0,-0x71(%rdi)
   1a58a:	f2 0f f0 46 9f       	lddqu  -0x61(%rsi),%xmm0
   1a58f:	f3 0f 7f 47 9f       	movdqu %xmm0,-0x61(%rdi)
   1a594:	f2 0f f0 46 af       	lddqu  -0x51(%rsi),%xmm0
   1a599:	f3 0f 7f 47 af       	movdqu %xmm0,-0x51(%rdi)
   1a59e:	f2 0f f0 46 bf       	lddqu  -0x41(%rsi),%xmm0
   1a5a3:	f3 0f 7f 47 bf       	movdqu %xmm0,-0x41(%rdi)
   1a5a8:	f2 0f f0 46 cf       	lddqu  -0x31(%rsi),%xmm0
   1a5ad:	f3 0f 7f 47 cf       	movdqu %xmm0,-0x31(%rdi)
   1a5b2:	f2 0f f0 46 df       	lddqu  -0x21(%rsi),%xmm0
   1a5b7:	f3 0f 7f 47 df       	movdqu %xmm0,-0x21(%rdi)
   1a5bc:	f2 0f f0 46 ef       	lddqu  -0x11(%rsi),%xmm0
   1a5c1:	f2 0f f0 4e f0       	lddqu  -0x10(%rsi),%xmm1
   1a5c6:	f3 0f 7f 47 ef       	movdqu %xmm0,-0x11(%rdi)
   1a5cb:	f3 0f 7f 4f f0       	movdqu %xmm1,-0x10(%rdi)
   1a5d0:	c3                   	retq   
   1a5d1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1a5d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1a5dd:	00 00 00 
   1a5e0:	0f b6 56 ff          	movzbl -0x1(%rsi),%edx
   1a5e4:	88 57 ff             	mov    %dl,-0x1(%rdi)
   1a5e7:	c3                   	retq   
   1a5e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1a5ef:	00 
   1a5f0:	f2 0f f0 46 70       	lddqu  0x70(%rsi),%xmm0
   1a5f5:	f3 0f 7f 47 70       	movdqu %xmm0,0x70(%rdi)
   1a5fa:	f2 0f f0 46 60       	lddqu  0x60(%rsi),%xmm0
   1a5ff:	f3 0f 7f 47 60       	movdqu %xmm0,0x60(%rdi)
   1a604:	f2 0f f0 46 50       	lddqu  0x50(%rsi),%xmm0
   1a609:	f3 0f 7f 47 50       	movdqu %xmm0,0x50(%rdi)
   1a60e:	f2 0f f0 46 40       	lddqu  0x40(%rsi),%xmm0
   1a613:	f3 0f 7f 47 40       	movdqu %xmm0,0x40(%rdi)
   1a618:	f2 0f f0 46 30       	lddqu  0x30(%rsi),%xmm0
   1a61d:	f3 0f 7f 47 30       	movdqu %xmm0,0x30(%rdi)
   1a622:	f2 0f f0 46 20       	lddqu  0x20(%rsi),%xmm0
   1a627:	f3 0f 7f 47 20       	movdqu %xmm0,0x20(%rdi)
   1a62c:	f2 0f f0 46 10       	lddqu  0x10(%rsi),%xmm0
   1a631:	f3 0f 7f 47 10       	movdqu %xmm0,0x10(%rdi)
   1a636:	f2 0f f0 06          	lddqu  (%rsi),%xmm0
   1a63a:	f3 0f 7f 07          	movdqu %xmm0,(%rdi)
   1a63e:	c3                   	retq   
   1a63f:	90                   	nop
   1a640:	f2 0f f0 46 7f       	lddqu  0x7f(%rsi),%xmm0
   1a645:	f3 0f 7f 47 7f       	movdqu %xmm0,0x7f(%rdi)
   1a64a:	f2 0f f0 46 6f       	lddqu  0x6f(%rsi),%xmm0
   1a64f:	f3 0f 7f 47 6f       	movdqu %xmm0,0x6f(%rdi)
   1a654:	f2 0f f0 46 5f       	lddqu  0x5f(%rsi),%xmm0
   1a659:	f3 0f 7f 47 5f       	movdqu %xmm0,0x5f(%rdi)
   1a65e:	f2 0f f0 46 4f       	lddqu  0x4f(%rsi),%xmm0
   1a663:	f3 0f 7f 47 4f       	movdqu %xmm0,0x4f(%rdi)
   1a668:	f2 0f f0 46 3f       	lddqu  0x3f(%rsi),%xmm0
   1a66d:	f3 0f 7f 47 3f       	movdqu %xmm0,0x3f(%rdi)
   1a672:	f2 0f f0 46 2f       	lddqu  0x2f(%rsi),%xmm0
   1a677:	f3 0f 7f 47 2f       	movdqu %xmm0,0x2f(%rdi)
   1a67c:	f2 0f f0 46 1f       	lddqu  0x1f(%rsi),%xmm0
   1a681:	f3 0f 7f 47 1f       	movdqu %xmm0,0x1f(%rdi)
   1a686:	f2 0f f0 46 0f       	lddqu  0xf(%rsi),%xmm0
   1a68b:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1a68f:	f3 0f 7f 47 0f       	movdqu %xmm0,0xf(%rdi)
   1a694:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1a698:	c3                   	retq   
   1a699:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a6a0:	48 8b 56 07          	mov    0x7(%rsi),%rdx
   1a6a4:	48 8b 0e             	mov    (%rsi),%rcx
   1a6a7:	48 89 57 07          	mov    %rdx,0x7(%rdi)
   1a6ab:	48 89 0f             	mov    %rcx,(%rdi)
   1a6ae:	c3                   	retq   
   1a6af:	90                   	nop
   1a6b0:	f2 0f f0 46 7e       	lddqu  0x7e(%rsi),%xmm0
   1a6b5:	f3 0f 7f 47 7e       	movdqu %xmm0,0x7e(%rdi)
   1a6ba:	f2 0f f0 46 6e       	lddqu  0x6e(%rsi),%xmm0
   1a6bf:	f3 0f 7f 47 6e       	movdqu %xmm0,0x6e(%rdi)
   1a6c4:	f2 0f f0 46 5e       	lddqu  0x5e(%rsi),%xmm0
   1a6c9:	f3 0f 7f 47 5e       	movdqu %xmm0,0x5e(%rdi)
   1a6ce:	f2 0f f0 46 4e       	lddqu  0x4e(%rsi),%xmm0
   1a6d3:	f3 0f 7f 47 4e       	movdqu %xmm0,0x4e(%rdi)
   1a6d8:	f2 0f f0 46 3e       	lddqu  0x3e(%rsi),%xmm0
   1a6dd:	f3 0f 7f 47 3e       	movdqu %xmm0,0x3e(%rdi)
   1a6e2:	f2 0f f0 46 2e       	lddqu  0x2e(%rsi),%xmm0
   1a6e7:	f3 0f 7f 47 2e       	movdqu %xmm0,0x2e(%rdi)
   1a6ec:	f2 0f f0 46 1e       	lddqu  0x1e(%rsi),%xmm0
   1a6f1:	f3 0f 7f 47 1e       	movdqu %xmm0,0x1e(%rdi)
   1a6f6:	f2 0f f0 46 0e       	lddqu  0xe(%rsi),%xmm0
   1a6fb:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1a6ff:	f3 0f 7f 47 0e       	movdqu %xmm0,0xe(%rdi)
   1a704:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1a708:	c3                   	retq   
   1a709:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a710:	48 8b 56 06          	mov    0x6(%rsi),%rdx
   1a714:	48 8b 0e             	mov    (%rsi),%rcx
   1a717:	48 89 57 06          	mov    %rdx,0x6(%rdi)
   1a71b:	48 89 0f             	mov    %rcx,(%rdi)
   1a71e:	c3                   	retq   
   1a71f:	90                   	nop
   1a720:	f2 0f f0 46 7d       	lddqu  0x7d(%rsi),%xmm0
   1a725:	f3 0f 7f 47 7d       	movdqu %xmm0,0x7d(%rdi)
   1a72a:	f2 0f f0 46 6d       	lddqu  0x6d(%rsi),%xmm0
   1a72f:	f3 0f 7f 47 6d       	movdqu %xmm0,0x6d(%rdi)
   1a734:	f2 0f f0 46 5d       	lddqu  0x5d(%rsi),%xmm0
   1a739:	f3 0f 7f 47 5d       	movdqu %xmm0,0x5d(%rdi)
   1a73e:	f2 0f f0 46 4d       	lddqu  0x4d(%rsi),%xmm0
   1a743:	f3 0f 7f 47 4d       	movdqu %xmm0,0x4d(%rdi)
   1a748:	f2 0f f0 46 3d       	lddqu  0x3d(%rsi),%xmm0
   1a74d:	f3 0f 7f 47 3d       	movdqu %xmm0,0x3d(%rdi)
   1a752:	f2 0f f0 46 2d       	lddqu  0x2d(%rsi),%xmm0
   1a757:	f3 0f 7f 47 2d       	movdqu %xmm0,0x2d(%rdi)
   1a75c:	f2 0f f0 46 1d       	lddqu  0x1d(%rsi),%xmm0
   1a761:	f3 0f 7f 47 1d       	movdqu %xmm0,0x1d(%rdi)
   1a766:	f2 0f f0 46 0d       	lddqu  0xd(%rsi),%xmm0
   1a76b:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1a76f:	f3 0f 7f 47 0d       	movdqu %xmm0,0xd(%rdi)
   1a774:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1a778:	c3                   	retq   
   1a779:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a780:	48 8b 56 05          	mov    0x5(%rsi),%rdx
   1a784:	48 8b 0e             	mov    (%rsi),%rcx
   1a787:	48 89 57 05          	mov    %rdx,0x5(%rdi)
   1a78b:	48 89 0f             	mov    %rcx,(%rdi)
   1a78e:	c3                   	retq   
   1a78f:	90                   	nop
   1a790:	f2 0f f0 46 7c       	lddqu  0x7c(%rsi),%xmm0
   1a795:	f3 0f 7f 47 7c       	movdqu %xmm0,0x7c(%rdi)
   1a79a:	f2 0f f0 46 6c       	lddqu  0x6c(%rsi),%xmm0
   1a79f:	f3 0f 7f 47 6c       	movdqu %xmm0,0x6c(%rdi)
   1a7a4:	f2 0f f0 46 5c       	lddqu  0x5c(%rsi),%xmm0
   1a7a9:	f3 0f 7f 47 5c       	movdqu %xmm0,0x5c(%rdi)
   1a7ae:	f2 0f f0 46 4c       	lddqu  0x4c(%rsi),%xmm0
   1a7b3:	f3 0f 7f 47 4c       	movdqu %xmm0,0x4c(%rdi)
   1a7b8:	f2 0f f0 46 3c       	lddqu  0x3c(%rsi),%xmm0
   1a7bd:	f3 0f 7f 47 3c       	movdqu %xmm0,0x3c(%rdi)
   1a7c2:	f2 0f f0 46 2c       	lddqu  0x2c(%rsi),%xmm0
   1a7c7:	f3 0f 7f 47 2c       	movdqu %xmm0,0x2c(%rdi)
   1a7cc:	f2 0f f0 46 1c       	lddqu  0x1c(%rsi),%xmm0
   1a7d1:	f3 0f 7f 47 1c       	movdqu %xmm0,0x1c(%rdi)
   1a7d6:	f2 0f f0 46 0c       	lddqu  0xc(%rsi),%xmm0
   1a7db:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1a7df:	f3 0f 7f 47 0c       	movdqu %xmm0,0xc(%rdi)
   1a7e4:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1a7e8:	c3                   	retq   
   1a7e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a7f0:	48 8b 56 04          	mov    0x4(%rsi),%rdx
   1a7f4:	48 8b 0e             	mov    (%rsi),%rcx
   1a7f7:	48 89 57 04          	mov    %rdx,0x4(%rdi)
   1a7fb:	48 89 0f             	mov    %rcx,(%rdi)
   1a7fe:	c3                   	retq   
   1a7ff:	90                   	nop
   1a800:	f2 0f f0 46 7b       	lddqu  0x7b(%rsi),%xmm0
   1a805:	f3 0f 7f 47 7b       	movdqu %xmm0,0x7b(%rdi)
   1a80a:	f2 0f f0 46 6b       	lddqu  0x6b(%rsi),%xmm0
   1a80f:	f3 0f 7f 47 6b       	movdqu %xmm0,0x6b(%rdi)
   1a814:	f2 0f f0 46 5b       	lddqu  0x5b(%rsi),%xmm0
   1a819:	f3 0f 7f 47 5b       	movdqu %xmm0,0x5b(%rdi)
   1a81e:	f2 0f f0 46 4b       	lddqu  0x4b(%rsi),%xmm0
   1a823:	f3 0f 7f 47 4b       	movdqu %xmm0,0x4b(%rdi)
   1a828:	f2 0f f0 46 3b       	lddqu  0x3b(%rsi),%xmm0
   1a82d:	f3 0f 7f 47 3b       	movdqu %xmm0,0x3b(%rdi)
   1a832:	f2 0f f0 46 2b       	lddqu  0x2b(%rsi),%xmm0
   1a837:	f3 0f 7f 47 2b       	movdqu %xmm0,0x2b(%rdi)
   1a83c:	f2 0f f0 46 1b       	lddqu  0x1b(%rsi),%xmm0
   1a841:	f3 0f 7f 47 1b       	movdqu %xmm0,0x1b(%rdi)
   1a846:	f2 0f f0 46 0b       	lddqu  0xb(%rsi),%xmm0
   1a84b:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1a84f:	f3 0f 7f 47 0b       	movdqu %xmm0,0xb(%rdi)
   1a854:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1a858:	c3                   	retq   
   1a859:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a860:	48 8b 56 03          	mov    0x3(%rsi),%rdx
   1a864:	48 8b 0e             	mov    (%rsi),%rcx
   1a867:	48 89 57 03          	mov    %rdx,0x3(%rdi)
   1a86b:	48 89 0f             	mov    %rcx,(%rdi)
   1a86e:	c3                   	retq   
   1a86f:	90                   	nop
   1a870:	f2 0f f0 46 7a       	lddqu  0x7a(%rsi),%xmm0
   1a875:	f3 0f 7f 47 7a       	movdqu %xmm0,0x7a(%rdi)
   1a87a:	f2 0f f0 46 6a       	lddqu  0x6a(%rsi),%xmm0
   1a87f:	f3 0f 7f 47 6a       	movdqu %xmm0,0x6a(%rdi)
   1a884:	f2 0f f0 46 5a       	lddqu  0x5a(%rsi),%xmm0
   1a889:	f3 0f 7f 47 5a       	movdqu %xmm0,0x5a(%rdi)
   1a88e:	f2 0f f0 46 4a       	lddqu  0x4a(%rsi),%xmm0
   1a893:	f3 0f 7f 47 4a       	movdqu %xmm0,0x4a(%rdi)
   1a898:	f2 0f f0 46 3a       	lddqu  0x3a(%rsi),%xmm0
   1a89d:	f3 0f 7f 47 3a       	movdqu %xmm0,0x3a(%rdi)
   1a8a2:	f2 0f f0 46 2a       	lddqu  0x2a(%rsi),%xmm0
   1a8a7:	f3 0f 7f 47 2a       	movdqu %xmm0,0x2a(%rdi)
   1a8ac:	f2 0f f0 46 1a       	lddqu  0x1a(%rsi),%xmm0
   1a8b1:	f3 0f 7f 47 1a       	movdqu %xmm0,0x1a(%rdi)
   1a8b6:	f2 0f f0 46 0a       	lddqu  0xa(%rsi),%xmm0
   1a8bb:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1a8bf:	f3 0f 7f 47 0a       	movdqu %xmm0,0xa(%rdi)
   1a8c4:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1a8c8:	c3                   	retq   
   1a8c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a8d0:	48 8b 56 02          	mov    0x2(%rsi),%rdx
   1a8d4:	48 8b 0e             	mov    (%rsi),%rcx
   1a8d7:	48 89 57 02          	mov    %rdx,0x2(%rdi)
   1a8db:	48 89 0f             	mov    %rcx,(%rdi)
   1a8de:	c3                   	retq   
   1a8df:	90                   	nop
   1a8e0:	f2 0f f0 46 79       	lddqu  0x79(%rsi),%xmm0
   1a8e5:	f3 0f 7f 47 79       	movdqu %xmm0,0x79(%rdi)
   1a8ea:	f2 0f f0 46 69       	lddqu  0x69(%rsi),%xmm0
   1a8ef:	f3 0f 7f 47 69       	movdqu %xmm0,0x69(%rdi)
   1a8f4:	f2 0f f0 46 59       	lddqu  0x59(%rsi),%xmm0
   1a8f9:	f3 0f 7f 47 59       	movdqu %xmm0,0x59(%rdi)
   1a8fe:	f2 0f f0 46 49       	lddqu  0x49(%rsi),%xmm0
   1a903:	f3 0f 7f 47 49       	movdqu %xmm0,0x49(%rdi)
   1a908:	f2 0f f0 46 39       	lddqu  0x39(%rsi),%xmm0
   1a90d:	f3 0f 7f 47 39       	movdqu %xmm0,0x39(%rdi)
   1a912:	f2 0f f0 46 29       	lddqu  0x29(%rsi),%xmm0
   1a917:	f3 0f 7f 47 29       	movdqu %xmm0,0x29(%rdi)
   1a91c:	f2 0f f0 46 19       	lddqu  0x19(%rsi),%xmm0
   1a921:	f3 0f 7f 47 19       	movdqu %xmm0,0x19(%rdi)
   1a926:	f2 0f f0 46 09       	lddqu  0x9(%rsi),%xmm0
   1a92b:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1a92f:	f3 0f 7f 47 09       	movdqu %xmm0,0x9(%rdi)
   1a934:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1a938:	c3                   	retq   
   1a939:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a940:	48 8b 56 01          	mov    0x1(%rsi),%rdx
   1a944:	48 8b 0e             	mov    (%rsi),%rcx
   1a947:	48 89 57 01          	mov    %rdx,0x1(%rdi)
   1a94b:	48 89 0f             	mov    %rcx,(%rdi)
   1a94e:	c3                   	retq   
   1a94f:	90                   	nop
   1a950:	f2 0f f0 46 78       	lddqu  0x78(%rsi),%xmm0
   1a955:	f3 0f 7f 47 78       	movdqu %xmm0,0x78(%rdi)
   1a95a:	f2 0f f0 46 68       	lddqu  0x68(%rsi),%xmm0
   1a95f:	f3 0f 7f 47 68       	movdqu %xmm0,0x68(%rdi)
   1a964:	f2 0f f0 46 58       	lddqu  0x58(%rsi),%xmm0
   1a969:	f3 0f 7f 47 58       	movdqu %xmm0,0x58(%rdi)
   1a96e:	f2 0f f0 46 48       	lddqu  0x48(%rsi),%xmm0
   1a973:	f3 0f 7f 47 48       	movdqu %xmm0,0x48(%rdi)
   1a978:	f2 0f f0 46 38       	lddqu  0x38(%rsi),%xmm0
   1a97d:	f3 0f 7f 47 38       	movdqu %xmm0,0x38(%rdi)
   1a982:	f2 0f f0 46 28       	lddqu  0x28(%rsi),%xmm0
   1a987:	f3 0f 7f 47 28       	movdqu %xmm0,0x28(%rdi)
   1a98c:	f2 0f f0 46 18       	lddqu  0x18(%rsi),%xmm0
   1a991:	f3 0f 7f 47 18       	movdqu %xmm0,0x18(%rdi)
   1a996:	f2 0f f0 46 08       	lddqu  0x8(%rsi),%xmm0
   1a99b:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1a99f:	f3 0f 7f 47 08       	movdqu %xmm0,0x8(%rdi)
   1a9a4:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1a9a8:	c3                   	retq   
   1a9a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1a9b0:	48 8b 16             	mov    (%rsi),%rdx
   1a9b3:	48 89 17             	mov    %rdx,(%rdi)
   1a9b6:	c3                   	retq   
   1a9b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1a9be:	00 00 
   1a9c0:	f2 0f f0 46 77       	lddqu  0x77(%rsi),%xmm0
   1a9c5:	f3 0f 7f 47 77       	movdqu %xmm0,0x77(%rdi)
   1a9ca:	f2 0f f0 46 67       	lddqu  0x67(%rsi),%xmm0
   1a9cf:	f3 0f 7f 47 67       	movdqu %xmm0,0x67(%rdi)
   1a9d4:	f2 0f f0 46 57       	lddqu  0x57(%rsi),%xmm0
   1a9d9:	f3 0f 7f 47 57       	movdqu %xmm0,0x57(%rdi)
   1a9de:	f2 0f f0 46 47       	lddqu  0x47(%rsi),%xmm0
   1a9e3:	f3 0f 7f 47 47       	movdqu %xmm0,0x47(%rdi)
   1a9e8:	f2 0f f0 46 37       	lddqu  0x37(%rsi),%xmm0
   1a9ed:	f3 0f 7f 47 37       	movdqu %xmm0,0x37(%rdi)
   1a9f2:	f2 0f f0 46 27       	lddqu  0x27(%rsi),%xmm0
   1a9f7:	f3 0f 7f 47 27       	movdqu %xmm0,0x27(%rdi)
   1a9fc:	f2 0f f0 46 17       	lddqu  0x17(%rsi),%xmm0
   1aa01:	f3 0f 7f 47 17       	movdqu %xmm0,0x17(%rdi)
   1aa06:	f2 0f f0 46 07       	lddqu  0x7(%rsi),%xmm0
   1aa0b:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1aa0f:	f3 0f 7f 47 07       	movdqu %xmm0,0x7(%rdi)
   1aa14:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1aa18:	c3                   	retq   
   1aa19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1aa20:	8b 56 03             	mov    0x3(%rsi),%edx
   1aa23:	8b 0e                	mov    (%rsi),%ecx
   1aa25:	89 57 03             	mov    %edx,0x3(%rdi)
   1aa28:	89 0f                	mov    %ecx,(%rdi)
   1aa2a:	c3                   	retq   
   1aa2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1aa30:	f2 0f f0 46 76       	lddqu  0x76(%rsi),%xmm0
   1aa35:	f3 0f 7f 47 76       	movdqu %xmm0,0x76(%rdi)
   1aa3a:	f2 0f f0 46 66       	lddqu  0x66(%rsi),%xmm0
   1aa3f:	f3 0f 7f 47 66       	movdqu %xmm0,0x66(%rdi)
   1aa44:	f2 0f f0 46 56       	lddqu  0x56(%rsi),%xmm0
   1aa49:	f3 0f 7f 47 56       	movdqu %xmm0,0x56(%rdi)
   1aa4e:	f2 0f f0 46 46       	lddqu  0x46(%rsi),%xmm0
   1aa53:	f3 0f 7f 47 46       	movdqu %xmm0,0x46(%rdi)
   1aa58:	f2 0f f0 46 36       	lddqu  0x36(%rsi),%xmm0
   1aa5d:	f3 0f 7f 47 36       	movdqu %xmm0,0x36(%rdi)
   1aa62:	f2 0f f0 46 26       	lddqu  0x26(%rsi),%xmm0
   1aa67:	f3 0f 7f 47 26       	movdqu %xmm0,0x26(%rdi)
   1aa6c:	f2 0f f0 46 16       	lddqu  0x16(%rsi),%xmm0
   1aa71:	f3 0f 7f 47 16       	movdqu %xmm0,0x16(%rdi)
   1aa76:	f2 0f f0 46 06       	lddqu  0x6(%rsi),%xmm0
   1aa7b:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1aa7f:	f3 0f 7f 47 06       	movdqu %xmm0,0x6(%rdi)
   1aa84:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1aa88:	c3                   	retq   
   1aa89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1aa90:	8b 56 02             	mov    0x2(%rsi),%edx
   1aa93:	8b 0e                	mov    (%rsi),%ecx
   1aa95:	89 57 02             	mov    %edx,0x2(%rdi)
   1aa98:	89 0f                	mov    %ecx,(%rdi)
   1aa9a:	c3                   	retq   
   1aa9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1aaa0:	f2 0f f0 46 75       	lddqu  0x75(%rsi),%xmm0
   1aaa5:	f3 0f 7f 47 75       	movdqu %xmm0,0x75(%rdi)
   1aaaa:	f2 0f f0 46 65       	lddqu  0x65(%rsi),%xmm0
   1aaaf:	f3 0f 7f 47 65       	movdqu %xmm0,0x65(%rdi)
   1aab4:	f2 0f f0 46 55       	lddqu  0x55(%rsi),%xmm0
   1aab9:	f3 0f 7f 47 55       	movdqu %xmm0,0x55(%rdi)
   1aabe:	f2 0f f0 46 45       	lddqu  0x45(%rsi),%xmm0
   1aac3:	f3 0f 7f 47 45       	movdqu %xmm0,0x45(%rdi)
   1aac8:	f2 0f f0 46 35       	lddqu  0x35(%rsi),%xmm0
   1aacd:	f3 0f 7f 47 35       	movdqu %xmm0,0x35(%rdi)
   1aad2:	f2 0f f0 46 25       	lddqu  0x25(%rsi),%xmm0
   1aad7:	f3 0f 7f 47 25       	movdqu %xmm0,0x25(%rdi)
   1aadc:	f2 0f f0 46 15       	lddqu  0x15(%rsi),%xmm0
   1aae1:	f3 0f 7f 47 15       	movdqu %xmm0,0x15(%rdi)
   1aae6:	f2 0f f0 46 05       	lddqu  0x5(%rsi),%xmm0
   1aaeb:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1aaef:	f3 0f 7f 47 05       	movdqu %xmm0,0x5(%rdi)
   1aaf4:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1aaf8:	c3                   	retq   
   1aaf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1ab00:	8b 56 01             	mov    0x1(%rsi),%edx
   1ab03:	8b 0e                	mov    (%rsi),%ecx
   1ab05:	89 57 01             	mov    %edx,0x1(%rdi)
   1ab08:	89 0f                	mov    %ecx,(%rdi)
   1ab0a:	c3                   	retq   
   1ab0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1ab10:	f2 0f f0 46 74       	lddqu  0x74(%rsi),%xmm0
   1ab15:	f3 0f 7f 47 74       	movdqu %xmm0,0x74(%rdi)
   1ab1a:	f2 0f f0 46 64       	lddqu  0x64(%rsi),%xmm0
   1ab1f:	f3 0f 7f 47 64       	movdqu %xmm0,0x64(%rdi)
   1ab24:	f2 0f f0 46 54       	lddqu  0x54(%rsi),%xmm0
   1ab29:	f3 0f 7f 47 54       	movdqu %xmm0,0x54(%rdi)
   1ab2e:	f2 0f f0 46 44       	lddqu  0x44(%rsi),%xmm0
   1ab33:	f3 0f 7f 47 44       	movdqu %xmm0,0x44(%rdi)
   1ab38:	f2 0f f0 46 34       	lddqu  0x34(%rsi),%xmm0
   1ab3d:	f3 0f 7f 47 34       	movdqu %xmm0,0x34(%rdi)
   1ab42:	f2 0f f0 46 24       	lddqu  0x24(%rsi),%xmm0
   1ab47:	f3 0f 7f 47 24       	movdqu %xmm0,0x24(%rdi)
   1ab4c:	f2 0f f0 46 14       	lddqu  0x14(%rsi),%xmm0
   1ab51:	f3 0f 7f 47 14       	movdqu %xmm0,0x14(%rdi)
   1ab56:	f2 0f f0 46 04       	lddqu  0x4(%rsi),%xmm0
   1ab5b:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1ab5f:	f3 0f 7f 47 04       	movdqu %xmm0,0x4(%rdi)
   1ab64:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1ab68:	c3                   	retq   
   1ab69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1ab70:	8b 16                	mov    (%rsi),%edx
   1ab72:	89 17                	mov    %edx,(%rdi)
   1ab74:	c3                   	retq   
   1ab75:	90                   	nop
   1ab76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1ab7d:	00 00 00 
   1ab80:	f2 0f f0 46 73       	lddqu  0x73(%rsi),%xmm0
   1ab85:	f3 0f 7f 47 73       	movdqu %xmm0,0x73(%rdi)
   1ab8a:	f2 0f f0 46 63       	lddqu  0x63(%rsi),%xmm0
   1ab8f:	f3 0f 7f 47 63       	movdqu %xmm0,0x63(%rdi)
   1ab94:	f2 0f f0 46 53       	lddqu  0x53(%rsi),%xmm0
   1ab99:	f3 0f 7f 47 53       	movdqu %xmm0,0x53(%rdi)
   1ab9e:	f2 0f f0 46 43       	lddqu  0x43(%rsi),%xmm0
   1aba3:	f3 0f 7f 47 43       	movdqu %xmm0,0x43(%rdi)
   1aba8:	f2 0f f0 46 33       	lddqu  0x33(%rsi),%xmm0
   1abad:	f3 0f 7f 47 33       	movdqu %xmm0,0x33(%rdi)
   1abb2:	f2 0f f0 46 23       	lddqu  0x23(%rsi),%xmm0
   1abb7:	f3 0f 7f 47 23       	movdqu %xmm0,0x23(%rdi)
   1abbc:	f2 0f f0 46 13       	lddqu  0x13(%rsi),%xmm0
   1abc1:	f3 0f 7f 47 13       	movdqu %xmm0,0x13(%rdi)
   1abc6:	f2 0f f0 46 03       	lddqu  0x3(%rsi),%xmm0
   1abcb:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1abcf:	f3 0f 7f 47 03       	movdqu %xmm0,0x3(%rdi)
   1abd4:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1abd8:	c3                   	retq   
   1abd9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1abe0:	66 8b 56 01          	mov    0x1(%rsi),%dx
   1abe4:	66 8b 0e             	mov    (%rsi),%cx
   1abe7:	66 89 57 01          	mov    %dx,0x1(%rdi)
   1abeb:	66 89 0f             	mov    %cx,(%rdi)
   1abee:	c3                   	retq   
   1abef:	90                   	nop
   1abf0:	f2 0f f0 46 72       	lddqu  0x72(%rsi),%xmm0
   1abf5:	f3 0f 7f 47 72       	movdqu %xmm0,0x72(%rdi)
   1abfa:	f2 0f f0 46 62       	lddqu  0x62(%rsi),%xmm0
   1abff:	f3 0f 7f 47 62       	movdqu %xmm0,0x62(%rdi)
   1ac04:	f2 0f f0 46 52       	lddqu  0x52(%rsi),%xmm0
   1ac09:	f3 0f 7f 47 52       	movdqu %xmm0,0x52(%rdi)
   1ac0e:	f2 0f f0 46 42       	lddqu  0x42(%rsi),%xmm0
   1ac13:	f3 0f 7f 47 42       	movdqu %xmm0,0x42(%rdi)
   1ac18:	f2 0f f0 46 32       	lddqu  0x32(%rsi),%xmm0
   1ac1d:	f3 0f 7f 47 32       	movdqu %xmm0,0x32(%rdi)
   1ac22:	f2 0f f0 46 22       	lddqu  0x22(%rsi),%xmm0
   1ac27:	f3 0f 7f 47 22       	movdqu %xmm0,0x22(%rdi)
   1ac2c:	f2 0f f0 46 12       	lddqu  0x12(%rsi),%xmm0
   1ac31:	f3 0f 7f 47 12       	movdqu %xmm0,0x12(%rdi)
   1ac36:	f2 0f f0 46 02       	lddqu  0x2(%rsi),%xmm0
   1ac3b:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1ac3f:	f3 0f 7f 47 02       	movdqu %xmm0,0x2(%rdi)
   1ac44:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1ac48:	c3                   	retq   
   1ac49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1ac50:	0f b7 16             	movzwl (%rsi),%edx
   1ac53:	66 89 17             	mov    %dx,(%rdi)
   1ac56:	c3                   	retq   
   1ac57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1ac5e:	00 00 
   1ac60:	f2 0f f0 46 71       	lddqu  0x71(%rsi),%xmm0
   1ac65:	f3 0f 7f 47 71       	movdqu %xmm0,0x71(%rdi)
   1ac6a:	f2 0f f0 46 61       	lddqu  0x61(%rsi),%xmm0
   1ac6f:	f3 0f 7f 47 61       	movdqu %xmm0,0x61(%rdi)
   1ac74:	f2 0f f0 46 51       	lddqu  0x51(%rsi),%xmm0
   1ac79:	f3 0f 7f 47 51       	movdqu %xmm0,0x51(%rdi)
   1ac7e:	f2 0f f0 46 41       	lddqu  0x41(%rsi),%xmm0
   1ac83:	f3 0f 7f 47 41       	movdqu %xmm0,0x41(%rdi)
   1ac88:	f2 0f f0 46 31       	lddqu  0x31(%rsi),%xmm0
   1ac8d:	f3 0f 7f 47 31       	movdqu %xmm0,0x31(%rdi)
   1ac92:	f2 0f f0 46 21       	lddqu  0x21(%rsi),%xmm0
   1ac97:	f3 0f 7f 47 21       	movdqu %xmm0,0x21(%rdi)
   1ac9c:	f2 0f f0 46 11       	lddqu  0x11(%rsi),%xmm0
   1aca1:	f3 0f 7f 47 11       	movdqu %xmm0,0x11(%rdi)
   1aca6:	f2 0f f0 46 01       	lddqu  0x1(%rsi),%xmm0
   1acab:	f2 0f f0 0e          	lddqu  (%rsi),%xmm1
   1acaf:	f3 0f 7f 47 01       	movdqu %xmm0,0x1(%rdi)
   1acb4:	f3 0f 7f 0f          	movdqu %xmm1,(%rdi)
   1acb8:	c3                   	retq   
   1acb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1acc0:	0f b6 16             	movzbl (%rsi),%edx
   1acc3:	88 17                	mov    %dl,(%rdi)
   1acc5:	c3                   	retq   
   1acc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   1accd:	00 00 00 

000000000001acd0 <_intel_fast_strchr>:
   1acd0:	f3 0f 1e fa          	endbr64 
   1acd4:	56                   	push   %rsi
   1acd5:	48 89 f8             	mov    %rdi,%rax
   1acd8:	41 89 f3             	mov    %esi,%r11d
   1acdb:	48 89 c1             	mov    %rax,%rcx
   1acde:	83 e1 0f             	and    $0xf,%ecx
   1ace1:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
   1ace5:	66 0f ef d2          	pxor   %xmm2,%xmm2
   1ace9:	66 41 0f 6e cb       	movd   %r11d,%xmm1
   1acee:	66 0f 38 00 ca       	pshufb %xmm2,%xmm1
   1acf3:	66 0f 6f 00          	movdqa (%rax),%xmm0
   1acf7:	66 0f 74 d0          	pcmpeqb %xmm0,%xmm2
   1acfb:	66 0f 74 c1          	pcmpeqb %xmm1,%xmm0
   1acff:	66 44 0f d7 d8       	pmovmskb %xmm0,%r11d
   1ad04:	66 44 0f d7 d2       	pmovmskb %xmm2,%r10d
   1ad09:	41 d3 eb             	shr    %cl,%r11d
   1ad0c:	41 d3 ea             	shr    %cl,%r10d
   1ad0f:	45 85 db             	test   %r11d,%r11d
   1ad12:	75 07                	jne    1ad1b <_intel_fast_strchr+0x4b>
   1ad14:	45 85 d2             	test   %r10d,%r10d
   1ad17:	74 1d                	je     1ad36 <_intel_fast_strchr+0x66>
   1ad19:	eb 17                	jmp    1ad32 <_intel_fast_strchr+0x62>
   1ad1b:	45 0f bc db          	bsf    %r11d,%r11d
   1ad1f:	45 0f bc d2          	bsf    %r10d,%r10d
   1ad23:	74 05                	je     1ad2a <_intel_fast_strchr+0x5a>
   1ad25:	45 3b da             	cmp    %r10d,%r11d
   1ad28:	7f 08                	jg     1ad32 <_intel_fast_strchr+0x62>
   1ad2a:	48 03 c1             	add    %rcx,%rax
   1ad2d:	49 03 c3             	add    %r11,%rax
   1ad30:	eb 0a                	jmp    1ad3c <_intel_fast_strchr+0x6c>
   1ad32:	33 c0                	xor    %eax,%eax
   1ad34:	eb 06                	jmp    1ad3c <_intel_fast_strchr+0x6c>
   1ad36:	ff 15 64 a2 21 00    	callq  *0x21a264(%rip)        # 234fa0 <_GLOBAL_OFFSET_TABLE_+0x30>
   1ad3c:	59                   	pop    %rcx
   1ad3d:	c3                   	retq   
   1ad3e:	66 90                	xchg   %ax,%ax

000000000001ad40 <_intel_fast_strcmp>:
   1ad40:	f3 0f 1e fa          	endbr64 
   1ad44:	8a 17                	mov    (%rdi),%dl
   1ad46:	3a 16                	cmp    (%rsi),%dl
   1ad48:	75 1c                	jne    1ad66 <_intel_fast_strcmp+0x26>
   1ad4a:	84 d2                	test   %dl,%dl
   1ad4c:	74 14                	je     1ad62 <_intel_fast_strcmp+0x22>
   1ad4e:	8a 57 01             	mov    0x1(%rdi),%dl
   1ad51:	3a 56 01             	cmp    0x1(%rsi),%dl
   1ad54:	75 10                	jne    1ad66 <_intel_fast_strcmp+0x26>
   1ad56:	48 83 c7 02          	add    $0x2,%rdi
   1ad5a:	48 83 c6 02          	add    $0x2,%rsi
   1ad5e:	84 d2                	test   %dl,%dl
   1ad60:	75 e2                	jne    1ad44 <_intel_fast_strcmp+0x4>
   1ad62:	33 c0                	xor    %eax,%eax
   1ad64:	eb 05                	jmp    1ad6b <_intel_fast_strcmp+0x2b>
   1ad66:	1b c0                	sbb    %eax,%eax
   1ad68:	83 c8 01             	or     $0x1,%eax
   1ad6b:	c3                   	retq   
   1ad6c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000001ad70 <_intel_fast_strcspn>:
   1ad70:	f3 0f 1e fa          	endbr64 
   1ad74:	56                   	push   %rsi
   1ad75:	48 89 f9             	mov    %rdi,%rcx
   1ad78:	48 89 f2             	mov    %rsi,%rdx
   1ad7b:	ff 15 3f a2 21 00    	callq  *0x21a23f(%rip)        # 234fc0 <_GLOBAL_OFFSET_TABLE_+0x50>
   1ad81:	59                   	pop    %rcx
   1ad82:	c3                   	retq   
   1ad83:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1ad88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1ad8f:	00 

000000000001ad90 <_intel_fast_strlen>:
   1ad90:	f3 0f 1e fa          	endbr64 
   1ad94:	56                   	push   %rsi
   1ad95:	48 89 fa             	mov    %rdi,%rdx
   1ad98:	48 89 d1             	mov    %rdx,%rcx
   1ad9b:	48 83 e2 f0          	and    $0xfffffffffffffff0,%rdx
   1ad9f:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1ada3:	66 0f 74 02          	pcmpeqb (%rdx),%xmm0
   1ada7:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1adab:	83 e1 0f             	and    $0xf,%ecx
   1adae:	d3 e8                	shr    %cl,%eax
   1adb0:	0f bc c0             	bsf    %eax,%eax
   1adb3:	75 0c                	jne    1adc1 <_intel_fast_strlen+0x31>
   1adb5:	48 89 d0             	mov    %rdx,%rax
   1adb8:	48 03 d1             	add    %rcx,%rdx
   1adbb:	ff 15 c7 a1 21 00    	callq  *0x21a1c7(%rip)        # 234f88 <_GLOBAL_OFFSET_TABLE_+0x18>
   1adc1:	59                   	pop    %rcx
   1adc2:	c3                   	retq   
   1adc3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1adc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1adcf:	00 

000000000001add0 <_intel_fast_strncat>:
   1add0:	f3 0f 1e fa          	endbr64 
   1add4:	56                   	push   %rsi
   1add5:	49 89 d0             	mov    %rdx,%r8
   1add8:	48 89 f8             	mov    %rdi,%rax
   1addb:	48 89 f2             	mov    %rsi,%rdx
   1adde:	ff 15 f4 a1 21 00    	callq  *0x21a1f4(%rip)        # 234fd8 <_GLOBAL_OFFSET_TABLE_+0x68>
   1ade4:	59                   	pop    %rcx
   1ade5:	c3                   	retq   
   1ade6:	0f 1f 00             	nopl   (%rax)
   1ade9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001adf0 <_intel_fast_strncmp>:
   1adf0:	f3 0f 1e fa          	endbr64 
   1adf4:	56                   	push   %rsi
   1adf5:	48 89 f8             	mov    %rdi,%rax
   1adf8:	48 89 f1             	mov    %rsi,%rcx
   1adfb:	ff 15 df a1 21 00    	callq  *0x21a1df(%rip)        # 234fe0 <_GLOBAL_OFFSET_TABLE_+0x70>
   1ae01:	59                   	pop    %rcx
   1ae02:	c3                   	retq   
   1ae03:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1ae08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1ae0f:	00 

000000000001ae10 <_intel_fast_strncpy>:
   1ae10:	f3 0f 1e fa          	endbr64 
   1ae14:	56                   	push   %rsi
   1ae15:	49 89 d0             	mov    %rdx,%r8
   1ae18:	ff 15 9a a1 21 00    	callq  *0x21a19a(%rip)        # 234fb8 <_GLOBAL_OFFSET_TABLE_+0x48>
   1ae1e:	59                   	pop    %rcx
   1ae1f:	c3                   	retq   

000000000001ae20 <_intel_fast_strpbrk>:
   1ae20:	f3 0f 1e fa          	endbr64 
   1ae24:	56                   	push   %rsi
   1ae25:	48 89 f8             	mov    %rdi,%rax
   1ae28:	48 89 f2             	mov    %rsi,%rdx
   1ae2b:	ff 15 77 a1 21 00    	callq  *0x21a177(%rip)        # 234fa8 <_GLOBAL_OFFSET_TABLE_+0x38>
   1ae31:	59                   	pop    %rcx
   1ae32:	c3                   	retq   
   1ae33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1ae38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1ae3f:	00 

000000000001ae40 <_intel_fast_strrchr>:
   1ae40:	f3 0f 1e fa          	endbr64 
   1ae44:	56                   	push   %rsi
   1ae45:	48 89 fa             	mov    %rdi,%rdx
   1ae48:	89 f0                	mov    %esi,%eax
   1ae4a:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1ae4e:	48 89 d1             	mov    %rdx,%rcx
   1ae51:	66 0f 6e c8          	movd   %eax,%xmm1
   1ae55:	48 83 e2 f0          	and    $0xfffffffffffffff0,%rdx
   1ae59:	66 0f 38 00 c8       	pshufb %xmm0,%xmm1
   1ae5e:	83 e1 0f             	and    $0xf,%ecx
   1ae61:	66 0f 6f 12          	movdqa (%rdx),%xmm2
   1ae65:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1ae69:	66 44 0f d7 d0       	pmovmskb %xmm0,%r10d
   1ae6e:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1ae72:	41 d3 ea             	shr    %cl,%r10d
   1ae75:	49 8d 42 ff          	lea    -0x1(%r10),%rax
   1ae79:	44 33 d0             	xor    %eax,%r10d
   1ae7c:	66 0f d7 c2          	pmovmskb %xmm2,%eax
   1ae80:	d3 e8                	shr    %cl,%eax
   1ae82:	41 23 c2             	and    %r10d,%eax
   1ae85:	74 0a                	je     1ae91 <_intel_fast_strrchr+0x51>
   1ae87:	48 0f bd c0          	bsr    %rax,%rax
   1ae8b:	48 03 c1             	add    %rcx,%rax
   1ae8e:	48 03 c2             	add    %rdx,%rax
   1ae91:	45 0b d2             	or     %r10d,%r10d
   1ae94:	7f 06                	jg     1ae9c <_intel_fast_strrchr+0x5c>
   1ae96:	ff 15 fc a0 21 00    	callq  *0x21a0fc(%rip)        # 234f98 <_GLOBAL_OFFSET_TABLE_+0x28>
   1ae9c:	59                   	pop    %rcx
   1ae9d:	c3                   	retq   
   1ae9e:	66 90                	xchg   %ax,%ax

000000000001aea0 <_intel_fast_strspn>:
   1aea0:	f3 0f 1e fa          	endbr64 
   1aea4:	56                   	push   %rsi
   1aea5:	48 89 f9             	mov    %rdi,%rcx
   1aea8:	48 89 f2             	mov    %rsi,%rdx
   1aeab:	ff 15 17 a1 21 00    	callq  *0x21a117(%rip)        # 234fc8 <_GLOBAL_OFFSET_TABLE_+0x58>
   1aeb1:	59                   	pop    %rcx
   1aeb2:	c3                   	retq   
   1aeb3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1aeb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1aebf:	00 

000000000001aec0 <_intel_fast_strtok>:
   1aec0:	f3 0f 1e fa          	endbr64 
   1aec4:	56                   	push   %rsi
   1aec5:	48 89 f9             	mov    %rdi,%rcx
   1aec8:	48 89 f2             	mov    %rsi,%rdx
   1aecb:	ff 15 ff a0 21 00    	callq  *0x21a0ff(%rip)        # 234fd0 <_GLOBAL_OFFSET_TABLE_+0x60>
   1aed1:	59                   	pop    %rcx
   1aed2:	c3                   	retq   
   1aed3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1aed8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1aedf:	00 

000000000001aee0 <__intel_sse2_strchr>:
   1aee0:	f3 0f 1e fa          	endbr64 
   1aee4:	48 83 c0 10          	add    $0x10,%rax
   1aee8:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1aeec:	f3 0f 6f 10          	movdqu (%rax),%xmm2
   1aef0:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1aef4:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1aef8:	66 0f d7 ca          	pmovmskb %xmm2,%ecx
   1aefc:	85 c9                	test   %ecx,%ecx
   1aefe:	75 0b                	jne    1af0b <__intel_sse2_strchr+0x2b>
   1af00:	66 0f d7 c8          	pmovmskb %xmm0,%ecx
   1af04:	85 c9                	test   %ecx,%ecx
   1af06:	74 dc                	je     1aee4 <__intel_sse2_strchr+0x4>
   1af08:	33 c0                	xor    %eax,%eax
   1af0a:	c3                   	retq   
   1af0b:	44 0f bc d1          	bsf    %ecx,%r10d
   1af0f:	66 0f d7 c8          	pmovmskb %xmm0,%ecx
   1af13:	85 c9                	test   %ecx,%ecx
   1af15:	74 08                	je     1af1f <__intel_sse2_strchr+0x3f>
   1af17:	0f bc c9             	bsf    %ecx,%ecx
   1af1a:	41 3b ca             	cmp    %r10d,%ecx
   1af1d:	72 e9                	jb     1af08 <__intel_sse2_strchr+0x28>
   1af1f:	49 03 c2             	add    %r10,%rax
   1af22:	c3                   	retq   
   1af23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1af28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1af2f:	00 

000000000001af30 <__intel_sse2_strcspn>:
   1af30:	f3 0f 1e fa          	endbr64 
   1af34:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
   1af3b:	48 89 d6             	mov    %rdx,%rsi
   1af3e:	48 89 cf             	mov    %rcx,%rdi
   1af41:	89 f1                	mov    %esi,%ecx
   1af43:	83 e1 0f             	and    $0xf,%ecx
   1af46:	49 89 f0             	mov    %rsi,%r8
   1af49:	4c 2b c1             	sub    %rcx,%r8
   1af4c:	45 33 d2             	xor    %r10d,%r10d
   1af4f:	44 0f 11 7c 24 30    	movups %xmm15,0x30(%rsp)
   1af55:	44 0f 11 b4 24 80 00 	movups %xmm14,0x80(%rsp)
   1af5c:	00 00 
   1af5e:	44 0f 11 6c 24 10    	movups %xmm13,0x10(%rsp)
   1af64:	44 0f 11 64 24 20    	movups %xmm12,0x20(%rsp)
   1af6a:	44 0f 11 5c 24 40    	movups %xmm11,0x40(%rsp)
   1af70:	44 0f 11 54 24 50    	movups %xmm10,0x50(%rsp)
   1af76:	44 0f 11 4c 24 60    	movups %xmm9,0x60(%rsp)
   1af7c:	44 0f 11 44 24 70    	movups %xmm8,0x70(%rsp)
   1af82:	0f 11 3c 24          	movups %xmm7,(%rsp)
   1af86:	f3 41 0f 6f 00       	movdqu (%r8),%xmm0
   1af8b:	48 8d 15 2e 59 01 00 	lea    0x1592e(%rip),%rdx        # 308c0 <__func__.2393+0x6c7>
   1af92:	0f b6 14 0a          	movzbl (%rdx,%rcx,1),%edx
   1af96:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1afa3 <__intel_sse2_strcspn+0x73>
   1af9d:	48 03 c2             	add    %rdx,%rax
   1afa0:	3e ff e0             	notrack jmpq *%rax
   1afa3:	f3 0f 1e fa          	endbr64 
   1afa7:	66 0f 73 d8 0f       	psrldq $0xf,%xmm0
   1afac:	e9 9e 00 00 00       	jmpq   1b04f <__intel_sse2_strcspn+0x11f>
   1afb1:	f3 0f 1e fa          	endbr64 
   1afb5:	66 0f 73 d8 0e       	psrldq $0xe,%xmm0
   1afba:	e9 90 00 00 00       	jmpq   1b04f <__intel_sse2_strcspn+0x11f>
   1afbf:	f3 0f 1e fa          	endbr64 
   1afc3:	66 0f 73 d8 0d       	psrldq $0xd,%xmm0
   1afc8:	e9 82 00 00 00       	jmpq   1b04f <__intel_sse2_strcspn+0x11f>
   1afcd:	f3 0f 1e fa          	endbr64 
   1afd1:	66 0f 73 d8 0c       	psrldq $0xc,%xmm0
   1afd6:	eb 77                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1afd8:	f3 0f 1e fa          	endbr64 
   1afdc:	66 0f 73 d8 0b       	psrldq $0xb,%xmm0
   1afe1:	eb 6c                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1afe3:	f3 0f 1e fa          	endbr64 
   1afe7:	66 0f 73 d8 0a       	psrldq $0xa,%xmm0
   1afec:	eb 61                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1afee:	f3 0f 1e fa          	endbr64 
   1aff2:	66 0f 73 d8 09       	psrldq $0x9,%xmm0
   1aff7:	eb 56                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1aff9:	f3 0f 1e fa          	endbr64 
   1affd:	66 0f 73 d8 08       	psrldq $0x8,%xmm0
   1b002:	eb 4b                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1b004:	f3 0f 1e fa          	endbr64 
   1b008:	66 0f 73 d8 07       	psrldq $0x7,%xmm0
   1b00d:	eb 40                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1b00f:	f3 0f 1e fa          	endbr64 
   1b013:	66 0f 73 d8 06       	psrldq $0x6,%xmm0
   1b018:	eb 35                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1b01a:	f3 0f 1e fa          	endbr64 
   1b01e:	66 0f 73 d8 05       	psrldq $0x5,%xmm0
   1b023:	eb 2a                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1b025:	f3 0f 1e fa          	endbr64 
   1b029:	66 0f 73 d8 04       	psrldq $0x4,%xmm0
   1b02e:	eb 1f                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1b030:	f3 0f 1e fa          	endbr64 
   1b034:	66 0f 73 d8 03       	psrldq $0x3,%xmm0
   1b039:	eb 14                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1b03b:	f3 0f 1e fa          	endbr64 
   1b03f:	66 0f 73 d8 02       	psrldq $0x2,%xmm0
   1b044:	eb 09                	jmp    1b04f <__intel_sse2_strcspn+0x11f>
   1b046:	f3 0f 1e fa          	endbr64 
   1b04a:	66 0f 73 d8 01       	psrldq $0x1,%xmm0
   1b04f:	f3 0f 1e fa          	endbr64 
   1b053:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   1b057:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1b05b:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1b05f:	66 0f d7 c2          	pmovmskb %xmm2,%eax
   1b063:	85 c0                	test   %eax,%eax
   1b065:	75 0b                	jne    1b072 <__intel_sse2_strcspn+0x142>
   1b067:	41 b9 10 00 00 00    	mov    $0x10,%r9d
   1b06d:	e9 eb 00 00 00       	jmpq   1b15d <__intel_sse2_strcspn+0x22d>
   1b072:	44 0f bc c8          	bsf    %eax,%r9d
   1b076:	41 83 f9 0f          	cmp    $0xf,%r9d
   1b07a:	0f 87 dd 00 00 00    	ja     1b15d <__intel_sse2_strcspn+0x22d>
   1b080:	48 8d 15 49 58 01 00 	lea    0x15849(%rip),%rdx        # 308d0 <__func__.2393+0x6d7>
   1b087:	42 0f b6 14 0a       	movzbl (%rdx,%r9,1),%edx
   1b08c:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1b099 <__intel_sse2_strcspn+0x169>
   1b093:	48 03 c2             	add    %rdx,%rax
   1b096:	3e ff e0             	notrack jmpq *%rax
   1b099:	66 0f 73 f8 01       	pslldq $0x1,%xmm0
   1b09e:	66 0f 73 d8 01       	psrldq $0x1,%xmm0
   1b0a3:	e9 b5 00 00 00       	jmpq   1b15d <__intel_sse2_strcspn+0x22d>
   1b0a8:	66 0f 73 f8 02       	pslldq $0x2,%xmm0
   1b0ad:	66 0f 73 d8 02       	psrldq $0x2,%xmm0
   1b0b2:	e9 a6 00 00 00       	jmpq   1b15d <__intel_sse2_strcspn+0x22d>
   1b0b7:	66 0f 73 f8 03       	pslldq $0x3,%xmm0
   1b0bc:	66 0f 73 d8 03       	psrldq $0x3,%xmm0
   1b0c1:	e9 97 00 00 00       	jmpq   1b15d <__intel_sse2_strcspn+0x22d>
   1b0c6:	66 0f 73 f8 04       	pslldq $0x4,%xmm0
   1b0cb:	66 0f 73 d8 04       	psrldq $0x4,%xmm0
   1b0d0:	e9 88 00 00 00       	jmpq   1b15d <__intel_sse2_strcspn+0x22d>
   1b0d5:	66 0f 73 f8 05       	pslldq $0x5,%xmm0
   1b0da:	66 0f 73 d8 05       	psrldq $0x5,%xmm0
   1b0df:	eb 7c                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b0e1:	66 0f 73 f8 06       	pslldq $0x6,%xmm0
   1b0e6:	66 0f 73 d8 06       	psrldq $0x6,%xmm0
   1b0eb:	eb 70                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b0ed:	66 0f 73 f8 07       	pslldq $0x7,%xmm0
   1b0f2:	66 0f 73 d8 07       	psrldq $0x7,%xmm0
   1b0f7:	eb 64                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b0f9:	66 0f 73 f8 08       	pslldq $0x8,%xmm0
   1b0fe:	66 0f 73 d8 08       	psrldq $0x8,%xmm0
   1b103:	eb 58                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b105:	66 0f 73 f8 09       	pslldq $0x9,%xmm0
   1b10a:	66 0f 73 d8 09       	psrldq $0x9,%xmm0
   1b10f:	eb 4c                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b111:	66 0f 73 f8 0a       	pslldq $0xa,%xmm0
   1b116:	66 0f 73 d8 0a       	psrldq $0xa,%xmm0
   1b11b:	eb 40                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b11d:	66 0f 73 f8 0b       	pslldq $0xb,%xmm0
   1b122:	66 0f 73 d8 0b       	psrldq $0xb,%xmm0
   1b127:	eb 34                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b129:	66 0f 73 f8 0c       	pslldq $0xc,%xmm0
   1b12e:	66 0f 73 d8 0c       	psrldq $0xc,%xmm0
   1b133:	eb 28                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b135:	66 0f 73 f8 0d       	pslldq $0xd,%xmm0
   1b13a:	66 0f 73 d8 0d       	psrldq $0xd,%xmm0
   1b13f:	eb 1c                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b141:	66 0f 73 f8 0e       	pslldq $0xe,%xmm0
   1b146:	66 0f 73 d8 0e       	psrldq $0xe,%xmm0
   1b14b:	eb 10                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b14d:	66 0f 73 f8 0f       	pslldq $0xf,%xmm0
   1b152:	66 0f 73 d8 0f       	psrldq $0xf,%xmm0
   1b157:	eb 04                	jmp    1b15d <__intel_sse2_strcspn+0x22d>
   1b159:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1b15d:	f7 d9                	neg    %ecx
   1b15f:	83 c1 10             	add    $0x10,%ecx
   1b162:	44 3b c9             	cmp    %ecx,%r9d
   1b165:	73 08                	jae    1b16f <__intel_sse2_strcspn+0x23f>
   1b167:	45 33 c9             	xor    %r9d,%r9d
   1b16a:	e9 9a 00 00 00       	jmpq   1b209 <__intel_sse2_strcspn+0x2d9>
   1b16f:	4c 89 c0             	mov    %r8,%rax
   1b172:	49 8d 48 10          	lea    0x10(%r8),%rcx
   1b176:	48 83 e1 0f          	and    $0xf,%rcx
   1b17a:	48 2b c1             	sub    %rcx,%rax
   1b17d:	48 83 c0 10          	add    $0x10,%rax
   1b181:	f3 0f 6f 10          	movdqu (%rax),%xmm2
   1b185:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1b189:	66 0f d7 d2          	pmovmskb %xmm2,%edx
   1b18d:	d3 ea                	shr    %cl,%edx
   1b18f:	85 d2                	test   %edx,%edx
   1b191:	0f 85 24 02 00 00    	jne    1b3bb <__intel_sse2_strcspn+0x48b>
   1b197:	48 83 c0 10          	add    $0x10,%rax
   1b19b:	f3 0f 6f 10          	movdqu (%rax),%xmm2
   1b19f:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1b1a3:	66 0f d7 d2          	pmovmskb %xmm2,%edx
   1b1a7:	85 d2                	test   %edx,%edx
   1b1a9:	74 ec                	je     1b197 <__intel_sse2_strcspn+0x267>
   1b1ab:	0f bc d2             	bsf    %edx,%edx
   1b1ae:	48 63 d2             	movslq %edx,%rdx
   1b1b1:	49 2b d0             	sub    %r8,%rdx
   1b1b4:	4c 8d 4c 10 f0       	lea    -0x10(%rax,%rdx,1),%r9
   1b1b9:	41 83 f9 10          	cmp    $0x10,%r9d
   1b1bd:	76 44                	jbe    1b203 <__intel_sse2_strcspn+0x2d3>
   1b1bf:	e8 07 45 00 00       	callq  1f6cb <__strcspn>
   1b1c4:	0f 10 3c 24          	movups (%rsp),%xmm7
   1b1c8:	44 0f 10 44 24 70    	movups 0x70(%rsp),%xmm8
   1b1ce:	44 0f 10 4c 24 60    	movups 0x60(%rsp),%xmm9
   1b1d4:	44 0f 10 54 24 50    	movups 0x50(%rsp),%xmm10
   1b1da:	44 0f 10 5c 24 40    	movups 0x40(%rsp),%xmm11
   1b1e0:	44 0f 10 64 24 20    	movups 0x20(%rsp),%xmm12
   1b1e6:	44 0f 10 6c 24 10    	movups 0x10(%rsp),%xmm13
   1b1ec:	44 0f 10 b4 24 80 00 	movups 0x80(%rsp),%xmm14
   1b1f3:	00 00 
   1b1f5:	44 0f 10 7c 24 30    	movups 0x30(%rsp),%xmm15
   1b1fb:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
   1b202:	c3                   	retq   
   1b203:	41 ba 01 00 00 00    	mov    $0x1,%r10d
   1b209:	0f be 17             	movsbl (%rdi),%edx
   1b20c:	48 89 f9             	mov    %rdi,%rcx
   1b20f:	85 d2                	test   %edx,%edx
   1b211:	74 50                	je     1b263 <__intel_sse2_strcspn+0x333>
   1b213:	66 0f 6e d2          	movd   %edx,%xmm2
   1b217:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   1b21b:	66 0f 60 d2          	punpcklbw %xmm2,%xmm2
   1b21f:	33 f6                	xor    %esi,%esi
   1b221:	66 0f 60 d2          	punpcklbw %xmm2,%xmm2
   1b225:	33 d2                	xor    %edx,%edx
   1b227:	66 0f 70 d2 00       	pshufd $0x0,%xmm2,%xmm2
   1b22c:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1b230:	66 44 0f d7 db       	pmovmskb %xmm3,%r11d
   1b235:	45 85 db             	test   %r11d,%r11d
   1b238:	75 29                	jne    1b263 <__intel_sse2_strcspn+0x333>
   1b23a:	4d 85 d2             	test   %r10,%r10
   1b23d:	0f 84 65 01 00 00    	je     1b3a8 <__intel_sse2_strcspn+0x478>
   1b243:	48 ff c6             	inc    %rsi
   1b246:	48 83 c2 10          	add    $0x10,%rdx
   1b24a:	49 3b f2             	cmp    %r10,%rsi
   1b24d:	74 59                	je     1b2a8 <__intel_sse2_strcspn+0x378>
   1b24f:	f3 42 0f 6f 1c 02    	movdqu (%rdx,%r8,1),%xmm3
   1b255:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1b259:	66 44 0f d7 db       	pmovmskb %xmm3,%r11d
   1b25e:	45 85 db             	test   %r11d,%r11d
   1b261:	74 d7                	je     1b23a <__intel_sse2_strcspn+0x30a>
   1b263:	0f 10 3c 24          	movups (%rsp),%xmm7
   1b267:	48 2b cf             	sub    %rdi,%rcx
   1b26a:	44 0f 10 44 24 70    	movups 0x70(%rsp),%xmm8
   1b270:	48 89 c8             	mov    %rcx,%rax
   1b273:	44 0f 10 4c 24 60    	movups 0x60(%rsp),%xmm9
   1b279:	44 0f 10 54 24 50    	movups 0x50(%rsp),%xmm10
   1b27f:	44 0f 10 5c 24 40    	movups 0x40(%rsp),%xmm11
   1b285:	44 0f 10 64 24 20    	movups 0x20(%rsp),%xmm12
   1b28b:	44 0f 10 6c 24 10    	movups 0x10(%rsp),%xmm13
   1b291:	44 0f 10 b4 24 80 00 	movups 0x80(%rsp),%xmm14
   1b298:	00 00 
   1b29a:	44 0f 10 7c 24 30    	movups 0x30(%rsp),%xmm15
   1b2a0:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
   1b2a7:	c3                   	retq   
   1b2a8:	f3 42 0f 6f 1c 02    	movdqu (%rdx,%r8,1),%xmm3
   1b2ae:	41 83 f9 0f          	cmp    $0xf,%r9d
   1b2b2:	0f 87 e0 00 00 00    	ja     1b398 <__intel_sse2_strcspn+0x468>
   1b2b8:	45 89 c9             	mov    %r9d,%r9d
   1b2bb:	48 8d 15 1e 56 01 00 	lea    0x1561e(%rip),%rdx        # 308e0 <__func__.2393+0x6e7>
   1b2c2:	42 0f b6 14 0a       	movzbl (%rdx,%r9,1),%edx
   1b2c7:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1b2d4 <__intel_sse2_strcspn+0x3a4>
   1b2ce:	48 03 c2             	add    %rdx,%rax
   1b2d1:	3e ff e0             	notrack jmpq *%rax
   1b2d4:	66 0f 73 fb 01       	pslldq $0x1,%xmm3
   1b2d9:	66 0f 73 db 01       	psrldq $0x1,%xmm3
   1b2de:	e9 b5 00 00 00       	jmpq   1b398 <__intel_sse2_strcspn+0x468>
   1b2e3:	66 0f 73 fb 02       	pslldq $0x2,%xmm3
   1b2e8:	66 0f 73 db 02       	psrldq $0x2,%xmm3
   1b2ed:	e9 a6 00 00 00       	jmpq   1b398 <__intel_sse2_strcspn+0x468>
   1b2f2:	66 0f 73 fb 03       	pslldq $0x3,%xmm3
   1b2f7:	66 0f 73 db 03       	psrldq $0x3,%xmm3
   1b2fc:	e9 97 00 00 00       	jmpq   1b398 <__intel_sse2_strcspn+0x468>
   1b301:	66 0f 73 fb 04       	pslldq $0x4,%xmm3
   1b306:	66 0f 73 db 04       	psrldq $0x4,%xmm3
   1b30b:	e9 88 00 00 00       	jmpq   1b398 <__intel_sse2_strcspn+0x468>
   1b310:	66 0f 73 fb 05       	pslldq $0x5,%xmm3
   1b315:	66 0f 73 db 05       	psrldq $0x5,%xmm3
   1b31a:	eb 7c                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b31c:	66 0f 73 fb 06       	pslldq $0x6,%xmm3
   1b321:	66 0f 73 db 06       	psrldq $0x6,%xmm3
   1b326:	eb 70                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b328:	66 0f 73 fb 07       	pslldq $0x7,%xmm3
   1b32d:	66 0f 73 db 07       	psrldq $0x7,%xmm3
   1b332:	eb 64                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b334:	66 0f 73 fb 08       	pslldq $0x8,%xmm3
   1b339:	66 0f 73 db 08       	psrldq $0x8,%xmm3
   1b33e:	eb 58                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b340:	66 0f 73 fb 09       	pslldq $0x9,%xmm3
   1b345:	66 0f 73 db 09       	psrldq $0x9,%xmm3
   1b34a:	eb 4c                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b34c:	66 0f 73 fb 0a       	pslldq $0xa,%xmm3
   1b351:	66 0f 73 db 0a       	psrldq $0xa,%xmm3
   1b356:	eb 40                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b358:	66 0f 73 fb 0b       	pslldq $0xb,%xmm3
   1b35d:	66 0f 73 db 0b       	psrldq $0xb,%xmm3
   1b362:	eb 34                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b364:	66 0f 73 fb 0c       	pslldq $0xc,%xmm3
   1b369:	66 0f 73 db 0c       	psrldq $0xc,%xmm3
   1b36e:	eb 28                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b370:	66 0f 73 fb 0d       	pslldq $0xd,%xmm3
   1b375:	66 0f 73 db 0d       	psrldq $0xd,%xmm3
   1b37a:	eb 1c                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b37c:	66 0f 73 fb 0e       	pslldq $0xe,%xmm3
   1b381:	66 0f 73 db 0e       	psrldq $0xe,%xmm3
   1b386:	eb 10                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b388:	66 0f 73 fb 0f       	pslldq $0xf,%xmm3
   1b38d:	66 0f 73 db 0f       	psrldq $0xf,%xmm3
   1b392:	eb 04                	jmp    1b398 <__intel_sse2_strcspn+0x468>
   1b394:	66 0f 6f d9          	movdqa %xmm1,%xmm3
   1b398:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1b39c:	66 0f d7 d3          	pmovmskb %xmm3,%edx
   1b3a0:	85 d2                	test   %edx,%edx
   1b3a2:	0f 85 bb fe ff ff    	jne    1b263 <__intel_sse2_strcspn+0x333>
   1b3a8:	48 ff c1             	inc    %rcx
   1b3ab:	0f be 11             	movsbl (%rcx),%edx
   1b3ae:	85 d2                	test   %edx,%edx
   1b3b0:	0f 85 5d fe ff ff    	jne    1b213 <__intel_sse2_strcspn+0x2e3>
   1b3b6:	e9 a8 fe ff ff       	jmpq   1b263 <__intel_sse2_strcspn+0x333>
   1b3bb:	44 0f bc ca          	bsf    %edx,%r9d
   1b3bf:	4d 63 c9             	movslq %r9d,%r9
   1b3c2:	e9 f2 fd ff ff       	jmpq   1b1b9 <__intel_sse2_strcspn+0x289>
   1b3c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1b3ce:	00 00 

000000000001b3d0 <__intel_sse2_strlen>:
   1b3d0:	f3 0f 1e fa          	endbr64 
   1b3d4:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1b3d8:	48 83 c0 10          	add    $0x10,%rax
   1b3dc:	f3 0f 6f 08          	movdqu (%rax),%xmm1
   1b3e0:	66 0f 74 c8          	pcmpeqb %xmm0,%xmm1
   1b3e4:	66 0f d7 c9          	pmovmskb %xmm1,%ecx
   1b3e8:	85 c9                	test   %ecx,%ecx
   1b3ea:	74 ec                	je     1b3d8 <__intel_sse2_strlen+0x8>
   1b3ec:	0f bc c9             	bsf    %ecx,%ecx
   1b3ef:	48 2b ca             	sub    %rdx,%rcx
   1b3f2:	48 03 c1             	add    %rcx,%rax
   1b3f5:	c3                   	retq   
   1b3f6:	0f 1f 00             	nopl   (%rax)
   1b3f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001b400 <__intel_sse2_strncat>:
   1b400:	f3 0f 1e fa          	endbr64 
   1b404:	49 89 d2             	mov    %rdx,%r10
   1b407:	4d 85 c0             	test   %r8,%r8
   1b40a:	0f 84 ca 01 00 00    	je     1b5da <__intel_sse2_strncat+0x1da>
   1b410:	48 89 c1             	mov    %rax,%rcx
   1b413:	48 89 c2             	mov    %rax,%rdx
   1b416:	48 83 e1 0f          	and    $0xf,%rcx
   1b41a:	48 2b d1             	sub    %rcx,%rdx
   1b41d:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1b421:	f3 0f 6f 02          	movdqu (%rdx),%xmm0
   1b425:	66 0f 74 c1          	pcmpeqb %xmm1,%xmm0
   1b429:	66 44 0f d7 d8       	pmovmskb %xmm0,%r11d
   1b42e:	41 d3 eb             	shr    %cl,%r11d
   1b431:	45 85 db             	test   %r11d,%r11d
   1b434:	0f 85 d4 01 00 00    	jne    1b60e <__intel_sse2_strncat+0x20e>
   1b43a:	48 83 c2 10          	add    $0x10,%rdx
   1b43e:	f3 0f 6f 02          	movdqu (%rdx),%xmm0
   1b442:	66 0f 74 c1          	pcmpeqb %xmm1,%xmm0
   1b446:	66 0f d7 c8          	pmovmskb %xmm0,%ecx
   1b44a:	85 c9                	test   %ecx,%ecx
   1b44c:	74 ec                	je     1b43a <__intel_sse2_strncat+0x3a>
   1b44e:	0f bc c9             	bsf    %ecx,%ecx
   1b451:	48 63 c9             	movslq %ecx,%rcx
   1b454:	48 2b c8             	sub    %rax,%rcx
   1b457:	48 03 d1             	add    %rcx,%rdx
   1b45a:	48 03 d0             	add    %rax,%rdx
   1b45d:	49 f7 c2 03 00 00 00 	test   $0x3,%r10
   1b464:	74 28                	je     1b48e <__intel_sse2_strncat+0x8e>
   1b466:	41 8a 0a             	mov    (%r10),%cl
   1b469:	49 ff c8             	dec    %r8
   1b46c:	49 ff c2             	inc    %r10
   1b46f:	88 0a                	mov    %cl,(%rdx)
   1b471:	84 c9                	test   %cl,%cl
   1b473:	0f 84 61 01 00 00    	je     1b5da <__intel_sse2_strncat+0x1da>
   1b479:	48 ff c2             	inc    %rdx
   1b47c:	4d 85 c0             	test   %r8,%r8
   1b47f:	0f 84 bc 00 00 00    	je     1b541 <__intel_sse2_strncat+0x141>
   1b485:	49 f7 c2 03 00 00 00 	test   $0x3,%r10
   1b48c:	75 d8                	jne    1b466 <__intel_sse2_strncat+0x66>
   1b48e:	49 83 f8 04          	cmp    $0x4,%r8
   1b492:	0f 82 8e 00 00 00    	jb     1b526 <__intel_sse2_strncat+0x126>
   1b498:	0f 11 54 24 e8       	movups %xmm2,-0x18(%rsp)
   1b49d:	48 89 6c 24 f8       	mov    %rbp,-0x8(%rsp)
   1b4a2:	41 8b 0a             	mov    (%r10),%ecx
   1b4a5:	49 83 c2 04          	add    $0x4,%r10
   1b4a9:	41 89 cb             	mov    %ecx,%r11d
   1b4ac:	41 f7 d3             	not    %r11d
   1b4af:	8d a9 ff fe fe 7e    	lea    0x7efefeff(%rcx),%ebp
   1b4b5:	44 33 dd             	xor    %ebp,%r11d
   1b4b8:	41 f7 c3 00 01 01 81 	test   $0x81010100,%r11d
   1b4bf:	0f 85 1c 01 00 00    	jne    1b5e1 <__intel_sse2_strncat+0x1e1>
   1b4c5:	49 83 c0 fc          	add    $0xfffffffffffffffc,%r8
   1b4c9:	89 0a                	mov    %ecx,(%rdx)
   1b4cb:	48 83 c2 04          	add    $0x4,%rdx
   1b4cf:	49 83 f8 04          	cmp    $0x4,%r8
   1b4d3:	72 42                	jb     1b517 <__intel_sse2_strncat+0x117>
   1b4d5:	49 83 f8 10          	cmp    $0x10,%r8
   1b4d9:	72 09                	jb     1b4e4 <__intel_sse2_strncat+0xe4>
   1b4db:	49 f7 c2 0f 00 00 00 	test   $0xf,%r10
   1b4e2:	74 61                	je     1b545 <__intel_sse2_strncat+0x145>
   1b4e4:	41 8b 0a             	mov    (%r10),%ecx
   1b4e7:	49 83 c2 04          	add    $0x4,%r10
   1b4eb:	41 89 cb             	mov    %ecx,%r11d
   1b4ee:	41 f7 d3             	not    %r11d
   1b4f1:	8d a9 ff fe fe 7e    	lea    0x7efefeff(%rcx),%ebp
   1b4f7:	44 33 dd             	xor    %ebp,%r11d
   1b4fa:	41 f7 c3 00 01 01 81 	test   $0x81010100,%r11d
   1b501:	0f 85 da 00 00 00    	jne    1b5e1 <__intel_sse2_strncat+0x1e1>
   1b507:	49 83 c0 fc          	add    $0xfffffffffffffffc,%r8
   1b50b:	89 0a                	mov    %ecx,(%rdx)
   1b50d:	48 83 c2 04          	add    $0x4,%rdx
   1b511:	49 83 f8 04          	cmp    $0x4,%r8
   1b515:	73 be                	jae    1b4d5 <__intel_sse2_strncat+0xd5>
   1b517:	0f 10 54 24 e8       	movups -0x18(%rsp),%xmm2
   1b51c:	48 8b 6c 24 f8       	mov    -0x8(%rsp),%rbp
   1b521:	4d 85 c0             	test   %r8,%r8
   1b524:	74 1b                	je     1b541 <__intel_sse2_strncat+0x141>
   1b526:	41 8a 0a             	mov    (%r10),%cl
   1b529:	49 ff c8             	dec    %r8
   1b52c:	49 ff c2             	inc    %r10
   1b52f:	88 0a                	mov    %cl,(%rdx)
   1b531:	84 c9                	test   %cl,%cl
   1b533:	0f 84 a1 00 00 00    	je     1b5da <__intel_sse2_strncat+0x1da>
   1b539:	48 ff c2             	inc    %rdx
   1b53c:	4d 85 c0             	test   %r8,%r8
   1b53f:	75 e5                	jne    1b526 <__intel_sse2_strncat+0x126>
   1b541:	c6 02 00             	movb   $0x0,(%rdx)
   1b544:	c3                   	retq   
   1b545:	f3 41 0f 6f 02       	movdqu (%r10),%xmm0
   1b54a:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   1b54e:	66 0f 74 d0          	pcmpeqb %xmm0,%xmm2
   1b552:	66 0f d7 ca          	pmovmskb %xmm2,%ecx
   1b556:	85 c9                	test   %ecx,%ecx
   1b558:	75 5a                	jne    1b5b4 <__intel_sse2_strncat+0x1b4>
   1b55a:	49 83 c0 f0          	add    $0xfffffffffffffff0,%r8
   1b55e:	49 83 c2 10          	add    $0x10,%r10
   1b562:	f3 0f 7f 02          	movdqu %xmm0,(%rdx)
   1b566:	48 83 c2 10          	add    $0x10,%rdx
   1b56a:	49 83 f8 10          	cmp    $0x10,%r8
   1b56e:	72 2b                	jb     1b59b <__intel_sse2_strncat+0x19b>
   1b570:	f3 41 0f 6f 02       	movdqu (%r10),%xmm0
   1b575:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   1b579:	66 0f 74 d0          	pcmpeqb %xmm0,%xmm2
   1b57d:	66 0f d7 ca          	pmovmskb %xmm2,%ecx
   1b581:	85 c9                	test   %ecx,%ecx
   1b583:	75 2f                	jne    1b5b4 <__intel_sse2_strncat+0x1b4>
   1b585:	49 83 c0 f0          	add    $0xfffffffffffffff0,%r8
   1b589:	49 83 c2 10          	add    $0x10,%r10
   1b58d:	f3 0f 7f 02          	movdqu %xmm0,(%rdx)
   1b591:	48 83 c2 10          	add    $0x10,%rdx
   1b595:	49 83 f8 10          	cmp    $0x10,%r8
   1b599:	73 d5                	jae    1b570 <__intel_sse2_strncat+0x170>
   1b59b:	0f 1f 00             	nopl   (%rax)
   1b59e:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1b5a5:	49 83 f8 04          	cmp    $0x4,%r8
   1b5a9:	0f 83 f3 fe ff ff    	jae    1b4a2 <__intel_sse2_strncat+0xa2>
   1b5af:	e9 63 ff ff ff       	jmpq   1b517 <__intel_sse2_strncat+0x117>
   1b5b4:	0f 10 54 24 e8       	movups -0x18(%rsp),%xmm2
   1b5b9:	48 8b 6c 24 f8       	mov    -0x8(%rsp),%rbp
   1b5be:	0f bc c9             	bsf    %ecx,%ecx
   1b5c1:	ff c1                	inc    %ecx
   1b5c3:	f6 c1 0f             	test   $0xf,%cl
   1b5c6:	74 13                	je     1b5db <__intel_sse2_strncat+0x1db>
   1b5c8:	46 8b 44 11 fc       	mov    -0x4(%rcx,%r10,1),%r8d
   1b5cd:	48 83 c1 fc          	add    $0xfffffffffffffffc,%rcx
   1b5d1:	44 89 04 11          	mov    %r8d,(%rcx,%rdx,1)
   1b5d5:	48 85 c9             	test   %rcx,%rcx
   1b5d8:	7f ee                	jg     1b5c8 <__intel_sse2_strncat+0x1c8>
   1b5da:	c3                   	retq   
   1b5db:	f3 0f 7f 02          	movdqu %xmm0,(%rdx)
   1b5df:	eb f9                	jmp    1b5da <__intel_sse2_strncat+0x1da>
   1b5e1:	84 c9                	test   %cl,%cl
   1b5e3:	74 43                	je     1b628 <__intel_sse2_strncat+0x228>
   1b5e5:	f7 c1 00 ff 00 00    	test   $0xff00,%ecx
   1b5eb:	74 2d                	je     1b61a <__intel_sse2_strncat+0x21a>
   1b5ed:	f7 c1 00 00 ff 00    	test   $0xff0000,%ecx
   1b5f3:	74 40                	je     1b635 <__intel_sse2_strncat+0x235>
   1b5f5:	f7 c1 00 00 00 ff    	test   $0xff000000,%ecx
   1b5fb:	0f 85 c4 fe ff ff    	jne    1b4c5 <__intel_sse2_strncat+0xc5>
   1b601:	0f 10 54 24 e8       	movups -0x18(%rsp),%xmm2
   1b606:	48 8b 6c 24 f8       	mov    -0x8(%rsp),%rbp
   1b60b:	89 0a                	mov    %ecx,(%rdx)
   1b60d:	c3                   	retq   
   1b60e:	41 0f bc d3          	bsf    %r11d,%edx
   1b612:	48 63 d2             	movslq %edx,%rdx
   1b615:	e9 40 fe ff ff       	jmpq   1b45a <__intel_sse2_strncat+0x5a>
   1b61a:	0f 10 54 24 e8       	movups -0x18(%rsp),%xmm2
   1b61f:	48 8b 6c 24 f8       	mov    -0x8(%rsp),%rbp
   1b624:	66 89 0a             	mov    %cx,(%rdx)
   1b627:	c3                   	retq   
   1b628:	0f 10 54 24 e8       	movups -0x18(%rsp),%xmm2
   1b62d:	48 8b 6c 24 f8       	mov    -0x8(%rsp),%rbp
   1b632:	88 0a                	mov    %cl,(%rdx)
   1b634:	c3                   	retq   
   1b635:	0f 10 54 24 e8       	movups -0x18(%rsp),%xmm2
   1b63a:	48 8b 6c 24 f8       	mov    -0x8(%rsp),%rbp
   1b63f:	66 89 0a             	mov    %cx,(%rdx)
   1b642:	c6 42 02 00          	movb   $0x0,0x2(%rdx)
   1b646:	c3                   	retq   
   1b647:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1b64e:	00 00 

000000000001b650 <__intel_sse2_strncmp>:
   1b650:	f3 0f 1e fa          	endbr64 
   1b654:	41 51                	push   %r9
   1b656:	49 89 d1             	mov    %rdx,%r9
   1b659:	49 89 c8             	mov    %rcx,%r8
   1b65c:	48 89 c1             	mov    %rax,%rcx
   1b65f:	4d 85 c9             	test   %r9,%r9
   1b662:	0f 84 68 02 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b668:	f6 c1 01             	test   $0x1,%cl
   1b66b:	74 26                	je     1b693 <__intel_sse2_strncmp+0x43>
   1b66d:	0f b6 01             	movzbl (%rcx),%eax
   1b670:	41 0f b6 10          	movzbl (%r8),%edx
   1b674:	3b c2                	cmp    %edx,%eax
   1b676:	0f 85 0b 02 00 00    	jne    1b887 <__intel_sse2_strncmp+0x237>
   1b67c:	48 ff c1             	inc    %rcx
   1b67f:	49 ff c0             	inc    %r8
   1b682:	49 ff c9             	dec    %r9
   1b685:	0f 84 45 02 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b68b:	85 c0                	test   %eax,%eax
   1b68d:	0f 84 3d 02 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b693:	89 c8                	mov    %ecx,%eax
   1b695:	a8 02                	test   $0x2,%al
   1b697:	74 50                	je     1b6e9 <__intel_sse2_strncmp+0x99>
   1b699:	49 83 f9 02          	cmp    $0x2,%r9
   1b69d:	0f 82 f1 01 00 00    	jb     1b894 <__intel_sse2_strncmp+0x244>
   1b6a3:	0f b7 01             	movzwl (%rcx),%eax
   1b6a6:	0f b6 d0             	movzbl %al,%edx
   1b6a9:	45 0f b6 10          	movzbl (%r8),%r10d
   1b6ad:	41 3b d2             	cmp    %r10d,%edx
   1b6b0:	0f 85 d6 01 00 00    	jne    1b88c <__intel_sse2_strncmp+0x23c>
   1b6b6:	85 d2                	test   %edx,%edx
   1b6b8:	0f 84 12 02 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b6be:	41 0f b7 10          	movzwl (%r8),%edx
   1b6c2:	3b c2                	cmp    %edx,%eax
   1b6c4:	0f 85 bd 01 00 00    	jne    1b887 <__intel_sse2_strncmp+0x237>
   1b6ca:	a9 00 ff ff ff       	test   $0xffffff00,%eax
   1b6cf:	0f 84 fb 01 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b6d5:	48 83 c1 02          	add    $0x2,%rcx
   1b6d9:	49 83 c0 02          	add    $0x2,%r8
   1b6dd:	49 83 c1 fe          	add    $0xfffffffffffffffe,%r9
   1b6e1:	0f 84 e9 01 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b6e7:	89 c8                	mov    %ecx,%eax
   1b6e9:	a8 04                	test   $0x4,%al
   1b6eb:	74 5c                	je     1b749 <__intel_sse2_strncmp+0xf9>
   1b6ed:	49 83 f9 04          	cmp    $0x4,%r9
   1b6f1:	0f 82 9d 01 00 00    	jb     1b894 <__intel_sse2_strncmp+0x244>
   1b6f7:	ba 02 00 00 00       	mov    $0x2,%edx
   1b6fc:	0f b7 01             	movzwl (%rcx),%eax
   1b6ff:	44 0f b6 d0          	movzbl %al,%r10d
   1b703:	45 0f b6 18          	movzbl (%r8),%r11d
   1b707:	45 3b d3             	cmp    %r11d,%r10d
   1b70a:	0f 85 cb 01 00 00    	jne    1b8db <__intel_sse2_strncmp+0x28b>
   1b710:	45 85 d2             	test   %r10d,%r10d
   1b713:	0f 84 b7 01 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b719:	45 0f b7 10          	movzwl (%r8),%r10d
   1b71d:	41 3b c2             	cmp    %r10d,%eax
   1b720:	0f 85 af 01 00 00    	jne    1b8d5 <__intel_sse2_strncmp+0x285>
   1b726:	a9 00 ff ff ff       	test   $0xffffff00,%eax
   1b72b:	0f 84 9f 01 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b731:	48 83 c1 02          	add    $0x2,%rcx
   1b735:	49 83 c0 02          	add    $0x2,%r8
   1b739:	ff ca                	dec    %edx
   1b73b:	75 bf                	jne    1b6fc <__intel_sse2_strncmp+0xac>
   1b73d:	49 83 c1 fc          	add    $0xfffffffffffffffc,%r9
   1b741:	0f 84 89 01 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b747:	89 c8                	mov    %ecx,%eax
   1b749:	a8 08                	test   $0x8,%al
   1b74b:	74 5a                	je     1b7a7 <__intel_sse2_strncmp+0x157>
   1b74d:	49 83 f9 08          	cmp    $0x8,%r9
   1b751:	0f 82 3d 01 00 00    	jb     1b894 <__intel_sse2_strncmp+0x244>
   1b757:	ba 04 00 00 00       	mov    $0x4,%edx
   1b75c:	0f b7 01             	movzwl (%rcx),%eax
   1b75f:	44 0f b6 d0          	movzbl %al,%r10d
   1b763:	45 0f b6 18          	movzbl (%r8),%r11d
   1b767:	45 3b d3             	cmp    %r11d,%r10d
   1b76a:	0f 85 6b 01 00 00    	jne    1b8db <__intel_sse2_strncmp+0x28b>
   1b770:	45 85 d2             	test   %r10d,%r10d
   1b773:	0f 84 57 01 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b779:	45 0f b7 10          	movzwl (%r8),%r10d
   1b77d:	41 3b c2             	cmp    %r10d,%eax
   1b780:	0f 85 4f 01 00 00    	jne    1b8d5 <__intel_sse2_strncmp+0x285>
   1b786:	a9 00 ff ff ff       	test   $0xffffff00,%eax
   1b78b:	0f 84 3f 01 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b791:	48 83 c1 02          	add    $0x2,%rcx
   1b795:	49 83 c0 02          	add    $0x2,%r8
   1b799:	ff ca                	dec    %edx
   1b79b:	75 bf                	jne    1b75c <__intel_sse2_strncmp+0x10c>
   1b79d:	49 83 c1 f8          	add    $0xfffffffffffffff8,%r9
   1b7a1:	0f 84 29 01 00 00    	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b7a7:	33 d2                	xor    %edx,%edx
   1b7a9:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1b7ad:	45 89 c2             	mov    %r8d,%r10d
   1b7b0:	41 81 e2 ff 0f 00 00 	and    $0xfff,%r10d
   1b7b7:	41 f7 da             	neg    %r10d
   1b7ba:	41 81 c2 00 10 00 00 	add    $0x1000,%r10d
   1b7c1:	41 c1 ea 04          	shr    $0x4,%r10d
   1b7c5:	74 46                	je     1b80d <__intel_sse2_strncmp+0x1bd>
   1b7c7:	f3 41 0f 6f 00       	movdqu (%r8),%xmm0
   1b7cc:	f3 0f 6f 11          	movdqu (%rcx),%xmm2
   1b7d0:	66 0f 74 d0          	pcmpeqb %xmm0,%xmm2
   1b7d4:	66 0f 74 c1          	pcmpeqb %xmm1,%xmm0
   1b7d8:	66 0f d7 c2          	pmovmskb %xmm2,%eax
   1b7dc:	35 ff ff 00 00       	xor    $0xffff,%eax
   1b7e1:	0f 85 0e 01 00 00    	jne    1b8f5 <__intel_sse2_strncmp+0x2a5>
   1b7e7:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1b7eb:	85 c0                	test   %eax,%eax
   1b7ed:	0f 85 1b 01 00 00    	jne    1b90e <__intel_sse2_strncmp+0x2be>
   1b7f3:	49 83 c1 f0          	add    $0xfffffffffffffff0,%r9
   1b7f7:	48 83 c1 10          	add    $0x10,%rcx
   1b7fb:	49 83 c0 10          	add    $0x10,%r8
   1b7ff:	4d 85 c9             	test   %r9,%r9
   1b802:	0f 8e 06 01 00 00    	jle    1b90e <__intel_sse2_strncmp+0x2be>
   1b808:	41 ff ca             	dec    %r10d
   1b80b:	75 ba                	jne    1b7c7 <__intel_sse2_strncmp+0x177>
   1b80d:	4c 87 c1             	xchg   %r8,%rcx
   1b810:	81 f2 00 00 00 80    	xor    $0x80000000,%edx
   1b816:	f6 c1 01             	test   $0x1,%cl
   1b819:	74 25                	je     1b840 <__intel_sse2_strncmp+0x1f0>
   1b81b:	0f b6 01             	movzbl (%rcx),%eax
   1b81e:	45 0f b6 10          	movzbl (%r8),%r10d
   1b822:	41 3b c2             	cmp    %r10d,%eax
   1b825:	75 11                	jne    1b838 <__intel_sse2_strncmp+0x1e8>
   1b827:	85 c0                	test   %eax,%eax
   1b829:	74 57                	je     1b882 <__intel_sse2_strncmp+0x232>
   1b82b:	48 ff c1             	inc    %rcx
   1b82e:	49 ff c0             	inc    %r8
   1b831:	49 ff c9             	dec    %r9
   1b834:	74 4c                	je     1b882 <__intel_sse2_strncmp+0x232>
   1b836:	eb 08                	jmp    1b840 <__intel_sse2_strncmp+0x1f0>
   1b838:	41 2b c2             	sub    %r10d,%eax
   1b83b:	33 c2                	xor    %edx,%eax
   1b83d:	41 59                	pop    %r9
   1b83f:	c3                   	retq   
   1b840:	f6 c1 0f             	test   $0xf,%cl
   1b843:	0f 84 64 ff ff ff    	je     1b7ad <__intel_sse2_strncmp+0x15d>
   1b849:	45 8a 10             	mov    (%r8),%r10b
   1b84c:	0f b7 01             	movzwl (%rcx),%eax
   1b84f:	41 3a c2             	cmp    %r10b,%al
   1b852:	0f 85 8c 00 00 00    	jne    1b8e4 <__intel_sse2_strncmp+0x294>
   1b858:	84 c0                	test   %al,%al
   1b85a:	74 26                	je     1b882 <__intel_sse2_strncmp+0x232>
   1b85c:	4d 89 ca             	mov    %r9,%r10
   1b85f:	49 ff ca             	dec    %r10
   1b862:	74 1e                	je     1b882 <__intel_sse2_strncmp+0x232>
   1b864:	45 0f b7 10          	movzwl (%r8),%r10d
   1b868:	41 3b c2             	cmp    %r10d,%eax
   1b86b:	75 cb                	jne    1b838 <__intel_sse2_strncmp+0x1e8>
   1b86d:	a9 00 ff ff ff       	test   $0xffffff00,%eax
   1b872:	74 0e                	je     1b882 <__intel_sse2_strncmp+0x232>
   1b874:	48 83 c1 02          	add    $0x2,%rcx
   1b878:	49 83 c0 02          	add    $0x2,%r8
   1b87c:	49 83 c1 fe          	add    $0xfffffffffffffffe,%r9
   1b880:	75 be                	jne    1b840 <__intel_sse2_strncmp+0x1f0>
   1b882:	33 c0                	xor    %eax,%eax
   1b884:	41 59                	pop    %r9
   1b886:	c3                   	retq   
   1b887:	2b c2                	sub    %edx,%eax
   1b889:	41 59                	pop    %r9
   1b88b:	c3                   	retq   
   1b88c:	89 d0                	mov    %edx,%eax
   1b88e:	41 2b c2             	sub    %r10d,%eax
   1b891:	41 59                	pop    %r9
   1b893:	c3                   	retq   
   1b894:	33 d2                	xor    %edx,%edx
   1b896:	0f b6 04 0a          	movzbl (%rdx,%rcx,1),%eax
   1b89a:	46 0f b6 14 02       	movzbl (%rdx,%r8,1),%r10d
   1b89f:	41 3b c2             	cmp    %r10d,%eax
   1b8a2:	75 31                	jne    1b8d5 <__intel_sse2_strncmp+0x285>
   1b8a4:	85 c0                	test   %eax,%eax
   1b8a6:	74 28                	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b8a8:	4c 89 c8             	mov    %r9,%rax
   1b8ab:	48 ff c8             	dec    %rax
   1b8ae:	74 20                	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b8b0:	44 8d 52 01          	lea    0x1(%rdx),%r10d
   1b8b4:	41 0f b6 04 0a       	movzbl (%r10,%rcx,1),%eax
   1b8b9:	47 0f b6 14 02       	movzbl (%r10,%r8,1),%r10d
   1b8be:	41 3b c2             	cmp    %r10d,%eax
   1b8c1:	75 12                	jne    1b8d5 <__intel_sse2_strncmp+0x285>
   1b8c3:	85 c0                	test   %eax,%eax
   1b8c5:	74 09                	je     1b8d0 <__intel_sse2_strncmp+0x280>
   1b8c7:	83 c2 02             	add    $0x2,%edx
   1b8ca:	49 83 c1 fe          	add    $0xfffffffffffffffe,%r9
   1b8ce:	75 c6                	jne    1b896 <__intel_sse2_strncmp+0x246>
   1b8d0:	33 c0                	xor    %eax,%eax
   1b8d2:	41 59                	pop    %r9
   1b8d4:	c3                   	retq   
   1b8d5:	41 2b c2             	sub    %r10d,%eax
   1b8d8:	41 59                	pop    %r9
   1b8da:	c3                   	retq   
   1b8db:	44 89 d0             	mov    %r10d,%eax
   1b8de:	41 2b c3             	sub    %r11d,%eax
   1b8e1:	41 59                	pop    %r9
   1b8e3:	c3                   	retq   
   1b8e4:	f3 0f 1e fa          	endbr64 
   1b8e8:	0f b6 c0             	movzbl %al,%eax
   1b8eb:	41 0f b6 08          	movzbl (%r8),%ecx
   1b8ef:	2b c1                	sub    %ecx,%eax
   1b8f1:	33 c2                	xor    %edx,%eax
   1b8f3:	eb 8f                	jmp    1b884 <__intel_sse2_strncmp+0x234>
   1b8f5:	0f bc c0             	bsf    %eax,%eax
   1b8f8:	66 44 0f d7 d8       	pmovmskb %xmm0,%r11d
   1b8fd:	41 89 c2             	mov    %eax,%r10d
   1b900:	45 85 db             	test   %r11d,%r11d
   1b903:	74 0e                	je     1b913 <__intel_sse2_strncmp+0x2c3>
   1b905:	45 0f bc db          	bsf    %r11d,%r11d
   1b909:	44 3b d8             	cmp    %eax,%r11d
   1b90c:	73 05                	jae    1b913 <__intel_sse2_strncmp+0x2c3>
   1b90e:	33 c0                	xor    %eax,%eax
   1b910:	41 59                	pop    %r9
   1b912:	c3                   	retq   
   1b913:	4d 3b ca             	cmp    %r10,%r9
   1b916:	76 f6                	jbe    1b90e <__intel_sse2_strncmp+0x2be>
   1b918:	41 0f b6 04 0a       	movzbl (%r10,%rcx,1),%eax
   1b91d:	47 0f b6 04 02       	movzbl (%r10,%r8,1),%r8d
   1b922:	41 2b c0             	sub    %r8d,%eax
   1b925:	33 c2                	xor    %edx,%eax
   1b927:	41 59                	pop    %r9
   1b929:	c3                   	retq   
   1b92a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000001b930 <__intel_sse2_strpbrk>:
   1b930:	f3 0f 1e fa          	endbr64 
   1b934:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
   1b93b:	48 89 d6             	mov    %rdx,%rsi
   1b93e:	89 f1                	mov    %esi,%ecx
   1b940:	49 89 f0             	mov    %rsi,%r8
   1b943:	83 e1 0f             	and    $0xf,%ecx
   1b946:	48 89 c7             	mov    %rax,%rdi
   1b949:	4c 2b c1             	sub    %rcx,%r8
   1b94c:	45 33 c9             	xor    %r9d,%r9d
   1b94f:	44 0f 11 7c 24 30    	movups %xmm15,0x30(%rsp)
   1b955:	44 0f 11 b4 24 80 00 	movups %xmm14,0x80(%rsp)
   1b95c:	00 00 
   1b95e:	44 0f 11 6c 24 10    	movups %xmm13,0x10(%rsp)
   1b964:	44 0f 11 64 24 20    	movups %xmm12,0x20(%rsp)
   1b96a:	44 0f 11 5c 24 40    	movups %xmm11,0x40(%rsp)
   1b970:	44 0f 11 54 24 50    	movups %xmm10,0x50(%rsp)
   1b976:	44 0f 11 4c 24 60    	movups %xmm9,0x60(%rsp)
   1b97c:	44 0f 11 44 24 70    	movups %xmm8,0x70(%rsp)
   1b982:	0f 11 3c 24          	movups %xmm7,(%rsp)
   1b986:	f3 41 0f 6f 00       	movdqu (%r8),%xmm0
   1b98b:	48 8d 15 5e 4f 01 00 	lea    0x14f5e(%rip),%rdx        # 308f0 <__func__.2393+0x6f7>
   1b992:	0f b6 14 0a          	movzbl (%rdx,%rcx,1),%edx
   1b996:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1b9a3 <__intel_sse2_strpbrk+0x73>
   1b99d:	48 03 c2             	add    %rdx,%rax
   1b9a0:	3e ff e0             	notrack jmpq *%rax
   1b9a3:	f3 0f 1e fa          	endbr64 
   1b9a7:	66 0f 73 d8 0f       	psrldq $0xf,%xmm0
   1b9ac:	e9 9e 00 00 00       	jmpq   1ba4f <__intel_sse2_strpbrk+0x11f>
   1b9b1:	f3 0f 1e fa          	endbr64 
   1b9b5:	66 0f 73 d8 0e       	psrldq $0xe,%xmm0
   1b9ba:	e9 90 00 00 00       	jmpq   1ba4f <__intel_sse2_strpbrk+0x11f>
   1b9bf:	f3 0f 1e fa          	endbr64 
   1b9c3:	66 0f 73 d8 0d       	psrldq $0xd,%xmm0
   1b9c8:	e9 82 00 00 00       	jmpq   1ba4f <__intel_sse2_strpbrk+0x11f>
   1b9cd:	f3 0f 1e fa          	endbr64 
   1b9d1:	66 0f 73 d8 0c       	psrldq $0xc,%xmm0
   1b9d6:	eb 77                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1b9d8:	f3 0f 1e fa          	endbr64 
   1b9dc:	66 0f 73 d8 0b       	psrldq $0xb,%xmm0
   1b9e1:	eb 6c                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1b9e3:	f3 0f 1e fa          	endbr64 
   1b9e7:	66 0f 73 d8 0a       	psrldq $0xa,%xmm0
   1b9ec:	eb 61                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1b9ee:	f3 0f 1e fa          	endbr64 
   1b9f2:	66 0f 73 d8 09       	psrldq $0x9,%xmm0
   1b9f7:	eb 56                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1b9f9:	f3 0f 1e fa          	endbr64 
   1b9fd:	66 0f 73 d8 08       	psrldq $0x8,%xmm0
   1ba02:	eb 4b                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1ba04:	f3 0f 1e fa          	endbr64 
   1ba08:	66 0f 73 d8 07       	psrldq $0x7,%xmm0
   1ba0d:	eb 40                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1ba0f:	f3 0f 1e fa          	endbr64 
   1ba13:	66 0f 73 d8 06       	psrldq $0x6,%xmm0
   1ba18:	eb 35                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1ba1a:	f3 0f 1e fa          	endbr64 
   1ba1e:	66 0f 73 d8 05       	psrldq $0x5,%xmm0
   1ba23:	eb 2a                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1ba25:	f3 0f 1e fa          	endbr64 
   1ba29:	66 0f 73 d8 04       	psrldq $0x4,%xmm0
   1ba2e:	eb 1f                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1ba30:	f3 0f 1e fa          	endbr64 
   1ba34:	66 0f 73 d8 03       	psrldq $0x3,%xmm0
   1ba39:	eb 14                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1ba3b:	f3 0f 1e fa          	endbr64 
   1ba3f:	66 0f 73 d8 02       	psrldq $0x2,%xmm0
   1ba44:	eb 09                	jmp    1ba4f <__intel_sse2_strpbrk+0x11f>
   1ba46:	f3 0f 1e fa          	endbr64 
   1ba4a:	66 0f 73 d8 01       	psrldq $0x1,%xmm0
   1ba4f:	f3 0f 1e fa          	endbr64 
   1ba53:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   1ba57:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1ba5b:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1ba5f:	66 0f d7 d2          	pmovmskb %xmm2,%edx
   1ba63:	85 d2                	test   %edx,%edx
   1ba65:	75 0b                	jne    1ba72 <__intel_sse2_strpbrk+0x142>
   1ba67:	41 ba 10 00 00 00    	mov    $0x10,%r10d
   1ba6d:	e9 eb 00 00 00       	jmpq   1bb5d <__intel_sse2_strpbrk+0x22d>
   1ba72:	44 0f bc d2          	bsf    %edx,%r10d
   1ba76:	41 83 fa 0f          	cmp    $0xf,%r10d
   1ba7a:	0f 87 dd 00 00 00    	ja     1bb5d <__intel_sse2_strpbrk+0x22d>
   1ba80:	48 8d 15 79 4e 01 00 	lea    0x14e79(%rip),%rdx        # 30900 <__func__.2393+0x707>
   1ba87:	42 0f b6 14 12       	movzbl (%rdx,%r10,1),%edx
   1ba8c:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1ba99 <__intel_sse2_strpbrk+0x169>
   1ba93:	48 03 c2             	add    %rdx,%rax
   1ba96:	3e ff e0             	notrack jmpq *%rax
   1ba99:	66 0f 73 f8 01       	pslldq $0x1,%xmm0
   1ba9e:	66 0f 73 d8 01       	psrldq $0x1,%xmm0
   1baa3:	e9 b5 00 00 00       	jmpq   1bb5d <__intel_sse2_strpbrk+0x22d>
   1baa8:	66 0f 73 f8 02       	pslldq $0x2,%xmm0
   1baad:	66 0f 73 d8 02       	psrldq $0x2,%xmm0
   1bab2:	e9 a6 00 00 00       	jmpq   1bb5d <__intel_sse2_strpbrk+0x22d>
   1bab7:	66 0f 73 f8 03       	pslldq $0x3,%xmm0
   1babc:	66 0f 73 d8 03       	psrldq $0x3,%xmm0
   1bac1:	e9 97 00 00 00       	jmpq   1bb5d <__intel_sse2_strpbrk+0x22d>
   1bac6:	66 0f 73 f8 04       	pslldq $0x4,%xmm0
   1bacb:	66 0f 73 d8 04       	psrldq $0x4,%xmm0
   1bad0:	e9 88 00 00 00       	jmpq   1bb5d <__intel_sse2_strpbrk+0x22d>
   1bad5:	66 0f 73 f8 05       	pslldq $0x5,%xmm0
   1bada:	66 0f 73 d8 05       	psrldq $0x5,%xmm0
   1badf:	eb 7c                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1bae1:	66 0f 73 f8 06       	pslldq $0x6,%xmm0
   1bae6:	66 0f 73 d8 06       	psrldq $0x6,%xmm0
   1baeb:	eb 70                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1baed:	66 0f 73 f8 07       	pslldq $0x7,%xmm0
   1baf2:	66 0f 73 d8 07       	psrldq $0x7,%xmm0
   1baf7:	eb 64                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1baf9:	66 0f 73 f8 08       	pslldq $0x8,%xmm0
   1bafe:	66 0f 73 d8 08       	psrldq $0x8,%xmm0
   1bb03:	eb 58                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1bb05:	66 0f 73 f8 09       	pslldq $0x9,%xmm0
   1bb0a:	66 0f 73 d8 09       	psrldq $0x9,%xmm0
   1bb0f:	eb 4c                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1bb11:	66 0f 73 f8 0a       	pslldq $0xa,%xmm0
   1bb16:	66 0f 73 d8 0a       	psrldq $0xa,%xmm0
   1bb1b:	eb 40                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1bb1d:	66 0f 73 f8 0b       	pslldq $0xb,%xmm0
   1bb22:	66 0f 73 d8 0b       	psrldq $0xb,%xmm0
   1bb27:	eb 34                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1bb29:	66 0f 73 f8 0c       	pslldq $0xc,%xmm0
   1bb2e:	66 0f 73 d8 0c       	psrldq $0xc,%xmm0
   1bb33:	eb 28                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1bb35:	66 0f 73 f8 0d       	pslldq $0xd,%xmm0
   1bb3a:	66 0f 73 d8 0d       	psrldq $0xd,%xmm0
   1bb3f:	eb 1c                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1bb41:	66 0f 73 f8 0e       	pslldq $0xe,%xmm0
   1bb46:	66 0f 73 d8 0e       	psrldq $0xe,%xmm0
   1bb4b:	eb 10                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1bb4d:	66 0f 73 f8 0f       	pslldq $0xf,%xmm0
   1bb52:	66 0f 73 d8 0f       	psrldq $0xf,%xmm0
   1bb57:	eb 04                	jmp    1bb5d <__intel_sse2_strpbrk+0x22d>
   1bb59:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1bb5d:	f7 d9                	neg    %ecx
   1bb5f:	83 c1 10             	add    $0x10,%ecx
   1bb62:	44 3b d1             	cmp    %ecx,%r10d
   1bb65:	73 07                	jae    1bb6e <__intel_sse2_strpbrk+0x23e>
   1bb67:	33 c9                	xor    %ecx,%ecx
   1bb69:	e9 9c 00 00 00       	jmpq   1bc0a <__intel_sse2_strpbrk+0x2da>
   1bb6e:	4c 89 c2             	mov    %r8,%rdx
   1bb71:	49 8d 48 10          	lea    0x10(%r8),%rcx
   1bb75:	48 83 e1 0f          	and    $0xf,%rcx
   1bb79:	48 2b d1             	sub    %rcx,%rdx
   1bb7c:	48 83 c2 10          	add    $0x10,%rdx
   1bb80:	f3 0f 6f 12          	movdqu (%rdx),%xmm2
   1bb84:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1bb88:	66 44 0f d7 ca       	pmovmskb %xmm2,%r9d
   1bb8d:	41 d3 e9             	shr    %cl,%r9d
   1bb90:	45 85 c9             	test   %r9d,%r9d
   1bb93:	0f 85 23 02 00 00    	jne    1bdbc <__intel_sse2_strpbrk+0x48c>
   1bb99:	48 83 c2 10          	add    $0x10,%rdx
   1bb9d:	f3 0f 6f 12          	movdqu (%rdx),%xmm2
   1bba1:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1bba5:	66 0f d7 ca          	pmovmskb %xmm2,%ecx
   1bba9:	85 c9                	test   %ecx,%ecx
   1bbab:	74 ec                	je     1bb99 <__intel_sse2_strpbrk+0x269>
   1bbad:	0f bc c9             	bsf    %ecx,%ecx
   1bbb0:	48 63 c9             	movslq %ecx,%rcx
   1bbb3:	49 2b c8             	sub    %r8,%rcx
   1bbb6:	48 8d 4c 0a f0       	lea    -0x10(%rdx,%rcx,1),%rcx
   1bbbb:	83 f9 10             	cmp    $0x10,%ecx
   1bbbe:	76 44                	jbe    1bc04 <__intel_sse2_strpbrk+0x2d4>
   1bbc0:	e8 95 3b 00 00       	callq  1f75a <__strpbrk>
   1bbc5:	0f 10 3c 24          	movups (%rsp),%xmm7
   1bbc9:	44 0f 10 44 24 70    	movups 0x70(%rsp),%xmm8
   1bbcf:	44 0f 10 4c 24 60    	movups 0x60(%rsp),%xmm9
   1bbd5:	44 0f 10 54 24 50    	movups 0x50(%rsp),%xmm10
   1bbdb:	44 0f 10 5c 24 40    	movups 0x40(%rsp),%xmm11
   1bbe1:	44 0f 10 64 24 20    	movups 0x20(%rsp),%xmm12
   1bbe7:	44 0f 10 6c 24 10    	movups 0x10(%rsp),%xmm13
   1bbed:	44 0f 10 b4 24 80 00 	movups 0x80(%rsp),%xmm14
   1bbf4:	00 00 
   1bbf6:	44 0f 10 7c 24 30    	movups 0x30(%rsp),%xmm15
   1bbfc:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
   1bc03:	c3                   	retq   
   1bc04:	41 b9 01 00 00 00    	mov    $0x1,%r9d
   1bc0a:	0f be 17             	movsbl (%rdi),%edx
   1bc0d:	85 d2                	test   %edx,%edx
   1bc0f:	74 50                	je     1bc61 <__intel_sse2_strpbrk+0x331>
   1bc11:	66 0f 6e d2          	movd   %edx,%xmm2
   1bc15:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   1bc19:	66 0f 60 d2          	punpcklbw %xmm2,%xmm2
   1bc1d:	33 f6                	xor    %esi,%esi
   1bc1f:	66 0f 60 d2          	punpcklbw %xmm2,%xmm2
   1bc23:	33 d2                	xor    %edx,%edx
   1bc25:	66 0f 70 d2 00       	pshufd $0x0,%xmm2,%xmm2
   1bc2a:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1bc2e:	66 44 0f d7 d3       	pmovmskb %xmm3,%r10d
   1bc33:	45 85 d2             	test   %r10d,%r10d
   1bc36:	75 29                	jne    1bc61 <__intel_sse2_strpbrk+0x331>
   1bc38:	4d 85 c9             	test   %r9,%r9
   1bc3b:	0f 84 68 01 00 00    	je     1bda9 <__intel_sse2_strpbrk+0x479>
   1bc41:	48 ff c6             	inc    %rsi
   1bc44:	48 83 c2 10          	add    $0x10,%rdx
   1bc48:	49 3b f1             	cmp    %r9,%rsi
   1bc4b:	74 5f                	je     1bcac <__intel_sse2_strpbrk+0x37c>
   1bc4d:	f3 42 0f 6f 1c 02    	movdqu (%rdx,%r8,1),%xmm3
   1bc53:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1bc57:	66 44 0f d7 d3       	pmovmskb %xmm3,%r10d
   1bc5c:	45 85 d2             	test   %r10d,%r10d
   1bc5f:	74 d7                	je     1bc38 <__intel_sse2_strpbrk+0x308>
   1bc61:	33 d2                	xor    %edx,%edx
   1bc63:	80 3f 00             	cmpb   $0x0,(%rdi)
   1bc66:	0f 10 3c 24          	movups (%rsp),%xmm7
   1bc6a:	44 0f 10 44 24 70    	movups 0x70(%rsp),%xmm8
   1bc70:	48 0f 44 fa          	cmove  %rdx,%rdi
   1bc74:	44 0f 10 4c 24 60    	movups 0x60(%rsp),%xmm9
   1bc7a:	48 89 f8             	mov    %rdi,%rax
   1bc7d:	44 0f 10 54 24 50    	movups 0x50(%rsp),%xmm10
   1bc83:	44 0f 10 5c 24 40    	movups 0x40(%rsp),%xmm11
   1bc89:	44 0f 10 64 24 20    	movups 0x20(%rsp),%xmm12
   1bc8f:	44 0f 10 6c 24 10    	movups 0x10(%rsp),%xmm13
   1bc95:	44 0f 10 b4 24 80 00 	movups 0x80(%rsp),%xmm14
   1bc9c:	00 00 
   1bc9e:	44 0f 10 7c 24 30    	movups 0x30(%rsp),%xmm15
   1bca4:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
   1bcab:	c3                   	retq   
   1bcac:	f3 42 0f 6f 1c 02    	movdqu (%rdx,%r8,1),%xmm3
   1bcb2:	83 f9 0f             	cmp    $0xf,%ecx
   1bcb5:	0f 87 de 00 00 00    	ja     1bd99 <__intel_sse2_strpbrk+0x469>
   1bcbb:	89 c9                	mov    %ecx,%ecx
   1bcbd:	48 8d 15 4c 4c 01 00 	lea    0x14c4c(%rip),%rdx        # 30910 <__func__.2393+0x717>
   1bcc4:	0f b6 14 0a          	movzbl (%rdx,%rcx,1),%edx
   1bcc8:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1bcd5 <__intel_sse2_strpbrk+0x3a5>
   1bccf:	48 03 c2             	add    %rdx,%rax
   1bcd2:	3e ff e0             	notrack jmpq *%rax
   1bcd5:	66 0f 73 fb 01       	pslldq $0x1,%xmm3
   1bcda:	66 0f 73 db 01       	psrldq $0x1,%xmm3
   1bcdf:	e9 b5 00 00 00       	jmpq   1bd99 <__intel_sse2_strpbrk+0x469>
   1bce4:	66 0f 73 fb 02       	pslldq $0x2,%xmm3
   1bce9:	66 0f 73 db 02       	psrldq $0x2,%xmm3
   1bcee:	e9 a6 00 00 00       	jmpq   1bd99 <__intel_sse2_strpbrk+0x469>
   1bcf3:	66 0f 73 fb 03       	pslldq $0x3,%xmm3
   1bcf8:	66 0f 73 db 03       	psrldq $0x3,%xmm3
   1bcfd:	e9 97 00 00 00       	jmpq   1bd99 <__intel_sse2_strpbrk+0x469>
   1bd02:	66 0f 73 fb 04       	pslldq $0x4,%xmm3
   1bd07:	66 0f 73 db 04       	psrldq $0x4,%xmm3
   1bd0c:	e9 88 00 00 00       	jmpq   1bd99 <__intel_sse2_strpbrk+0x469>
   1bd11:	66 0f 73 fb 05       	pslldq $0x5,%xmm3
   1bd16:	66 0f 73 db 05       	psrldq $0x5,%xmm3
   1bd1b:	eb 7c                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd1d:	66 0f 73 fb 06       	pslldq $0x6,%xmm3
   1bd22:	66 0f 73 db 06       	psrldq $0x6,%xmm3
   1bd27:	eb 70                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd29:	66 0f 73 fb 07       	pslldq $0x7,%xmm3
   1bd2e:	66 0f 73 db 07       	psrldq $0x7,%xmm3
   1bd33:	eb 64                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd35:	66 0f 73 fb 08       	pslldq $0x8,%xmm3
   1bd3a:	66 0f 73 db 08       	psrldq $0x8,%xmm3
   1bd3f:	eb 58                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd41:	66 0f 73 fb 09       	pslldq $0x9,%xmm3
   1bd46:	66 0f 73 db 09       	psrldq $0x9,%xmm3
   1bd4b:	eb 4c                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd4d:	66 0f 73 fb 0a       	pslldq $0xa,%xmm3
   1bd52:	66 0f 73 db 0a       	psrldq $0xa,%xmm3
   1bd57:	eb 40                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd59:	66 0f 73 fb 0b       	pslldq $0xb,%xmm3
   1bd5e:	66 0f 73 db 0b       	psrldq $0xb,%xmm3
   1bd63:	eb 34                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd65:	66 0f 73 fb 0c       	pslldq $0xc,%xmm3
   1bd6a:	66 0f 73 db 0c       	psrldq $0xc,%xmm3
   1bd6f:	eb 28                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd71:	66 0f 73 fb 0d       	pslldq $0xd,%xmm3
   1bd76:	66 0f 73 db 0d       	psrldq $0xd,%xmm3
   1bd7b:	eb 1c                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd7d:	66 0f 73 fb 0e       	pslldq $0xe,%xmm3
   1bd82:	66 0f 73 db 0e       	psrldq $0xe,%xmm3
   1bd87:	eb 10                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd89:	66 0f 73 fb 0f       	pslldq $0xf,%xmm3
   1bd8e:	66 0f 73 db 0f       	psrldq $0xf,%xmm3
   1bd93:	eb 04                	jmp    1bd99 <__intel_sse2_strpbrk+0x469>
   1bd95:	66 0f 6f d9          	movdqa %xmm1,%xmm3
   1bd99:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1bd9d:	66 0f d7 d3          	pmovmskb %xmm3,%edx
   1bda1:	85 d2                	test   %edx,%edx
   1bda3:	0f 85 b8 fe ff ff    	jne    1bc61 <__intel_sse2_strpbrk+0x331>
   1bda9:	48 ff c7             	inc    %rdi
   1bdac:	0f be 17             	movsbl (%rdi),%edx
   1bdaf:	85 d2                	test   %edx,%edx
   1bdb1:	0f 85 5a fe ff ff    	jne    1bc11 <__intel_sse2_strpbrk+0x2e1>
   1bdb7:	e9 a5 fe ff ff       	jmpq   1bc61 <__intel_sse2_strpbrk+0x331>
   1bdbc:	41 0f bc c9          	bsf    %r9d,%ecx
   1bdc0:	48 63 c9             	movslq %ecx,%rcx
   1bdc3:	e9 f3 fd ff ff       	jmpq   1bbbb <__intel_sse2_strpbrk+0x28b>
   1bdc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1bdcf:	00 

000000000001bdd0 <__intel_sse2_strspn>:
   1bdd0:	f3 0f 1e fa          	endbr64 
   1bdd4:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
   1bddb:	48 89 d6             	mov    %rdx,%rsi
   1bdde:	48 89 cf             	mov    %rcx,%rdi
   1bde1:	89 f1                	mov    %esi,%ecx
   1bde3:	83 e1 0f             	and    $0xf,%ecx
   1bde6:	49 89 f0             	mov    %rsi,%r8
   1bde9:	4c 2b c1             	sub    %rcx,%r8
   1bdec:	45 33 d2             	xor    %r10d,%r10d
   1bdef:	44 0f 11 7c 24 30    	movups %xmm15,0x30(%rsp)
   1bdf5:	44 0f 11 b4 24 80 00 	movups %xmm14,0x80(%rsp)
   1bdfc:	00 00 
   1bdfe:	44 0f 11 6c 24 10    	movups %xmm13,0x10(%rsp)
   1be04:	44 0f 11 64 24 20    	movups %xmm12,0x20(%rsp)
   1be0a:	44 0f 11 5c 24 40    	movups %xmm11,0x40(%rsp)
   1be10:	44 0f 11 54 24 50    	movups %xmm10,0x50(%rsp)
   1be16:	44 0f 11 4c 24 60    	movups %xmm9,0x60(%rsp)
   1be1c:	44 0f 11 44 24 70    	movups %xmm8,0x70(%rsp)
   1be22:	0f 11 3c 24          	movups %xmm7,(%rsp)
   1be26:	f3 41 0f 6f 00       	movdqu (%r8),%xmm0
   1be2b:	48 8d 15 ee 4a 01 00 	lea    0x14aee(%rip),%rdx        # 30920 <__func__.2393+0x727>
   1be32:	0f b6 14 0a          	movzbl (%rdx,%rcx,1),%edx
   1be36:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1be43 <__intel_sse2_strspn+0x73>
   1be3d:	48 03 c2             	add    %rdx,%rax
   1be40:	3e ff e0             	notrack jmpq *%rax
   1be43:	f3 0f 1e fa          	endbr64 
   1be47:	66 0f 73 d8 0f       	psrldq $0xf,%xmm0
   1be4c:	e9 9e 00 00 00       	jmpq   1beef <__intel_sse2_strspn+0x11f>
   1be51:	f3 0f 1e fa          	endbr64 
   1be55:	66 0f 73 d8 0e       	psrldq $0xe,%xmm0
   1be5a:	e9 90 00 00 00       	jmpq   1beef <__intel_sse2_strspn+0x11f>
   1be5f:	f3 0f 1e fa          	endbr64 
   1be63:	66 0f 73 d8 0d       	psrldq $0xd,%xmm0
   1be68:	e9 82 00 00 00       	jmpq   1beef <__intel_sse2_strspn+0x11f>
   1be6d:	f3 0f 1e fa          	endbr64 
   1be71:	66 0f 73 d8 0c       	psrldq $0xc,%xmm0
   1be76:	eb 77                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1be78:	f3 0f 1e fa          	endbr64 
   1be7c:	66 0f 73 d8 0b       	psrldq $0xb,%xmm0
   1be81:	eb 6c                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1be83:	f3 0f 1e fa          	endbr64 
   1be87:	66 0f 73 d8 0a       	psrldq $0xa,%xmm0
   1be8c:	eb 61                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1be8e:	f3 0f 1e fa          	endbr64 
   1be92:	66 0f 73 d8 09       	psrldq $0x9,%xmm0
   1be97:	eb 56                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1be99:	f3 0f 1e fa          	endbr64 
   1be9d:	66 0f 73 d8 08       	psrldq $0x8,%xmm0
   1bea2:	eb 4b                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1bea4:	f3 0f 1e fa          	endbr64 
   1bea8:	66 0f 73 d8 07       	psrldq $0x7,%xmm0
   1bead:	eb 40                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1beaf:	f3 0f 1e fa          	endbr64 
   1beb3:	66 0f 73 d8 06       	psrldq $0x6,%xmm0
   1beb8:	eb 35                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1beba:	f3 0f 1e fa          	endbr64 
   1bebe:	66 0f 73 d8 05       	psrldq $0x5,%xmm0
   1bec3:	eb 2a                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1bec5:	f3 0f 1e fa          	endbr64 
   1bec9:	66 0f 73 d8 04       	psrldq $0x4,%xmm0
   1bece:	eb 1f                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1bed0:	f3 0f 1e fa          	endbr64 
   1bed4:	66 0f 73 d8 03       	psrldq $0x3,%xmm0
   1bed9:	eb 14                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1bedb:	f3 0f 1e fa          	endbr64 
   1bedf:	66 0f 73 d8 02       	psrldq $0x2,%xmm0
   1bee4:	eb 09                	jmp    1beef <__intel_sse2_strspn+0x11f>
   1bee6:	f3 0f 1e fa          	endbr64 
   1beea:	66 0f 73 d8 01       	psrldq $0x1,%xmm0
   1beef:	f3 0f 1e fa          	endbr64 
   1bef3:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   1bef7:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1befb:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1beff:	66 0f d7 c2          	pmovmskb %xmm2,%eax
   1bf03:	85 c0                	test   %eax,%eax
   1bf05:	75 0b                	jne    1bf12 <__intel_sse2_strspn+0x142>
   1bf07:	41 b9 10 00 00 00    	mov    $0x10,%r9d
   1bf0d:	e9 eb 00 00 00       	jmpq   1bffd <__intel_sse2_strspn+0x22d>
   1bf12:	44 0f bc c8          	bsf    %eax,%r9d
   1bf16:	41 83 f9 0f          	cmp    $0xf,%r9d
   1bf1a:	0f 87 dd 00 00 00    	ja     1bffd <__intel_sse2_strspn+0x22d>
   1bf20:	48 8d 15 09 4a 01 00 	lea    0x14a09(%rip),%rdx        # 30930 <__func__.2393+0x737>
   1bf27:	42 0f b6 14 0a       	movzbl (%rdx,%r9,1),%edx
   1bf2c:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1bf39 <__intel_sse2_strspn+0x169>
   1bf33:	48 03 c2             	add    %rdx,%rax
   1bf36:	3e ff e0             	notrack jmpq *%rax
   1bf39:	66 0f 73 f8 01       	pslldq $0x1,%xmm0
   1bf3e:	66 0f 73 d8 01       	psrldq $0x1,%xmm0
   1bf43:	e9 b5 00 00 00       	jmpq   1bffd <__intel_sse2_strspn+0x22d>
   1bf48:	66 0f 73 f8 02       	pslldq $0x2,%xmm0
   1bf4d:	66 0f 73 d8 02       	psrldq $0x2,%xmm0
   1bf52:	e9 a6 00 00 00       	jmpq   1bffd <__intel_sse2_strspn+0x22d>
   1bf57:	66 0f 73 f8 03       	pslldq $0x3,%xmm0
   1bf5c:	66 0f 73 d8 03       	psrldq $0x3,%xmm0
   1bf61:	e9 97 00 00 00       	jmpq   1bffd <__intel_sse2_strspn+0x22d>
   1bf66:	66 0f 73 f8 04       	pslldq $0x4,%xmm0
   1bf6b:	66 0f 73 d8 04       	psrldq $0x4,%xmm0
   1bf70:	e9 88 00 00 00       	jmpq   1bffd <__intel_sse2_strspn+0x22d>
   1bf75:	66 0f 73 f8 05       	pslldq $0x5,%xmm0
   1bf7a:	66 0f 73 d8 05       	psrldq $0x5,%xmm0
   1bf7f:	eb 7c                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bf81:	66 0f 73 f8 06       	pslldq $0x6,%xmm0
   1bf86:	66 0f 73 d8 06       	psrldq $0x6,%xmm0
   1bf8b:	eb 70                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bf8d:	66 0f 73 f8 07       	pslldq $0x7,%xmm0
   1bf92:	66 0f 73 d8 07       	psrldq $0x7,%xmm0
   1bf97:	eb 64                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bf99:	66 0f 73 f8 08       	pslldq $0x8,%xmm0
   1bf9e:	66 0f 73 d8 08       	psrldq $0x8,%xmm0
   1bfa3:	eb 58                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bfa5:	66 0f 73 f8 09       	pslldq $0x9,%xmm0
   1bfaa:	66 0f 73 d8 09       	psrldq $0x9,%xmm0
   1bfaf:	eb 4c                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bfb1:	66 0f 73 f8 0a       	pslldq $0xa,%xmm0
   1bfb6:	66 0f 73 d8 0a       	psrldq $0xa,%xmm0
   1bfbb:	eb 40                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bfbd:	66 0f 73 f8 0b       	pslldq $0xb,%xmm0
   1bfc2:	66 0f 73 d8 0b       	psrldq $0xb,%xmm0
   1bfc7:	eb 34                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bfc9:	66 0f 73 f8 0c       	pslldq $0xc,%xmm0
   1bfce:	66 0f 73 d8 0c       	psrldq $0xc,%xmm0
   1bfd3:	eb 28                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bfd5:	66 0f 73 f8 0d       	pslldq $0xd,%xmm0
   1bfda:	66 0f 73 d8 0d       	psrldq $0xd,%xmm0
   1bfdf:	eb 1c                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bfe1:	66 0f 73 f8 0e       	pslldq $0xe,%xmm0
   1bfe6:	66 0f 73 d8 0e       	psrldq $0xe,%xmm0
   1bfeb:	eb 10                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bfed:	66 0f 73 f8 0f       	pslldq $0xf,%xmm0
   1bff2:	66 0f 73 d8 0f       	psrldq $0xf,%xmm0
   1bff7:	eb 04                	jmp    1bffd <__intel_sse2_strspn+0x22d>
   1bff9:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1bffd:	f7 d9                	neg    %ecx
   1bfff:	83 c1 10             	add    $0x10,%ecx
   1c002:	44 3b c9             	cmp    %ecx,%r9d
   1c005:	73 08                	jae    1c00f <__intel_sse2_strspn+0x23f>
   1c007:	45 33 c9             	xor    %r9d,%r9d
   1c00a:	e9 9a 00 00 00       	jmpq   1c0a9 <__intel_sse2_strspn+0x2d9>
   1c00f:	4c 89 c0             	mov    %r8,%rax
   1c012:	49 8d 48 10          	lea    0x10(%r8),%rcx
   1c016:	48 83 e1 0f          	and    $0xf,%rcx
   1c01a:	48 2b c1             	sub    %rcx,%rax
   1c01d:	48 83 c0 10          	add    $0x10,%rax
   1c021:	f3 0f 6f 10          	movdqu (%rax),%xmm2
   1c025:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1c029:	66 0f d7 d2          	pmovmskb %xmm2,%edx
   1c02d:	d3 ea                	shr    %cl,%edx
   1c02f:	85 d2                	test   %edx,%edx
   1c031:	0f 85 22 02 00 00    	jne    1c259 <__intel_sse2_strspn+0x489>
   1c037:	48 83 c0 10          	add    $0x10,%rax
   1c03b:	f3 0f 6f 10          	movdqu (%rax),%xmm2
   1c03f:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1c043:	66 0f d7 d2          	pmovmskb %xmm2,%edx
   1c047:	85 d2                	test   %edx,%edx
   1c049:	74 ec                	je     1c037 <__intel_sse2_strspn+0x267>
   1c04b:	0f bc d2             	bsf    %edx,%edx
   1c04e:	48 63 d2             	movslq %edx,%rdx
   1c051:	49 2b d0             	sub    %r8,%rdx
   1c054:	4c 8d 4c 10 f0       	lea    -0x10(%rax,%rdx,1),%r9
   1c059:	41 83 f9 10          	cmp    $0x10,%r9d
   1c05d:	76 44                	jbe    1c0a3 <__intel_sse2_strspn+0x2d3>
   1c05f:	e8 82 37 00 00       	callq  1f7e6 <__strspn>
   1c064:	0f 10 3c 24          	movups (%rsp),%xmm7
   1c068:	44 0f 10 44 24 70    	movups 0x70(%rsp),%xmm8
   1c06e:	44 0f 10 4c 24 60    	movups 0x60(%rsp),%xmm9
   1c074:	44 0f 10 54 24 50    	movups 0x50(%rsp),%xmm10
   1c07a:	44 0f 10 5c 24 40    	movups 0x40(%rsp),%xmm11
   1c080:	44 0f 10 64 24 20    	movups 0x20(%rsp),%xmm12
   1c086:	44 0f 10 6c 24 10    	movups 0x10(%rsp),%xmm13
   1c08c:	44 0f 10 b4 24 80 00 	movups 0x80(%rsp),%xmm14
   1c093:	00 00 
   1c095:	44 0f 10 7c 24 30    	movups 0x30(%rsp),%xmm15
   1c09b:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
   1c0a2:	c3                   	retq   
   1c0a3:	41 ba 01 00 00 00    	mov    $0x1,%r10d
   1c0a9:	0f be 17             	movsbl (%rdi),%edx
   1c0ac:	48 89 f9             	mov    %rdi,%rcx
   1c0af:	85 d2                	test   %edx,%edx
   1c0b1:	74 5c                	je     1c10f <__intel_sse2_strspn+0x33f>
   1c0b3:	66 0f 6e d2          	movd   %edx,%xmm2
   1c0b7:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   1c0bb:	66 0f 60 d2          	punpcklbw %xmm2,%xmm2
   1c0bf:	33 f6                	xor    %esi,%esi
   1c0c1:	66 0f 60 d2          	punpcklbw %xmm2,%xmm2
   1c0c5:	33 d2                	xor    %edx,%edx
   1c0c7:	66 0f 70 d2 00       	pshufd $0x0,%xmm2,%xmm2
   1c0cc:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1c0d0:	66 44 0f d7 db       	pmovmskb %xmm3,%r11d
   1c0d5:	45 85 db             	test   %r11d,%r11d
   1c0d8:	75 25                	jne    1c0ff <__intel_sse2_strspn+0x32f>
   1c0da:	4d 85 d2             	test   %r10,%r10
   1c0dd:	74 30                	je     1c10f <__intel_sse2_strspn+0x33f>
   1c0df:	48 ff c6             	inc    %rsi
   1c0e2:	48 83 c2 10          	add    $0x10,%rdx
   1c0e6:	49 3b f2             	cmp    %r10,%rsi
   1c0e9:	74 69                	je     1c154 <__intel_sse2_strspn+0x384>
   1c0eb:	f3 42 0f 6f 1c 02    	movdqu (%rdx,%r8,1),%xmm3
   1c0f1:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1c0f5:	66 44 0f d7 db       	pmovmskb %xmm3,%r11d
   1c0fa:	45 85 db             	test   %r11d,%r11d
   1c0fd:	74 db                	je     1c0da <__intel_sse2_strspn+0x30a>
   1c0ff:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1c105:	48 ff c1             	inc    %rcx
   1c108:	0f be 11             	movsbl (%rcx),%edx
   1c10b:	85 d2                	test   %edx,%edx
   1c10d:	75 a4                	jne    1c0b3 <__intel_sse2_strspn+0x2e3>
   1c10f:	0f 10 3c 24          	movups (%rsp),%xmm7
   1c113:	48 2b cf             	sub    %rdi,%rcx
   1c116:	44 0f 10 44 24 70    	movups 0x70(%rsp),%xmm8
   1c11c:	48 89 c8             	mov    %rcx,%rax
   1c11f:	44 0f 10 4c 24 60    	movups 0x60(%rsp),%xmm9
   1c125:	44 0f 10 54 24 50    	movups 0x50(%rsp),%xmm10
   1c12b:	44 0f 10 5c 24 40    	movups 0x40(%rsp),%xmm11
   1c131:	44 0f 10 64 24 20    	movups 0x20(%rsp),%xmm12
   1c137:	44 0f 10 6c 24 10    	movups 0x10(%rsp),%xmm13
   1c13d:	44 0f 10 b4 24 80 00 	movups 0x80(%rsp),%xmm14
   1c144:	00 00 
   1c146:	44 0f 10 7c 24 30    	movups 0x30(%rsp),%xmm15
   1c14c:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
   1c153:	c3                   	retq   
   1c154:	f3 42 0f 6f 1c 02    	movdqu (%rdx,%r8,1),%xmm3
   1c15a:	41 83 f9 0f          	cmp    $0xf,%r9d
   1c15e:	0f 87 e0 00 00 00    	ja     1c244 <__intel_sse2_strspn+0x474>
   1c164:	45 89 c9             	mov    %r9d,%r9d
   1c167:	48 8d 15 d2 47 01 00 	lea    0x147d2(%rip),%rdx        # 30940 <__func__.2393+0x747>
   1c16e:	42 0f b6 14 0a       	movzbl (%rdx,%r9,1),%edx
   1c173:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1c180 <__intel_sse2_strspn+0x3b0>
   1c17a:	48 03 c2             	add    %rdx,%rax
   1c17d:	3e ff e0             	notrack jmpq *%rax
   1c180:	66 0f 73 fb 01       	pslldq $0x1,%xmm3
   1c185:	66 0f 73 db 01       	psrldq $0x1,%xmm3
   1c18a:	e9 b5 00 00 00       	jmpq   1c244 <__intel_sse2_strspn+0x474>
   1c18f:	66 0f 73 fb 02       	pslldq $0x2,%xmm3
   1c194:	66 0f 73 db 02       	psrldq $0x2,%xmm3
   1c199:	e9 a6 00 00 00       	jmpq   1c244 <__intel_sse2_strspn+0x474>
   1c19e:	66 0f 73 fb 03       	pslldq $0x3,%xmm3
   1c1a3:	66 0f 73 db 03       	psrldq $0x3,%xmm3
   1c1a8:	e9 97 00 00 00       	jmpq   1c244 <__intel_sse2_strspn+0x474>
   1c1ad:	66 0f 73 fb 04       	pslldq $0x4,%xmm3
   1c1b2:	66 0f 73 db 04       	psrldq $0x4,%xmm3
   1c1b7:	e9 88 00 00 00       	jmpq   1c244 <__intel_sse2_strspn+0x474>
   1c1bc:	66 0f 73 fb 05       	pslldq $0x5,%xmm3
   1c1c1:	66 0f 73 db 05       	psrldq $0x5,%xmm3
   1c1c6:	eb 7c                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c1c8:	66 0f 73 fb 06       	pslldq $0x6,%xmm3
   1c1cd:	66 0f 73 db 06       	psrldq $0x6,%xmm3
   1c1d2:	eb 70                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c1d4:	66 0f 73 fb 07       	pslldq $0x7,%xmm3
   1c1d9:	66 0f 73 db 07       	psrldq $0x7,%xmm3
   1c1de:	eb 64                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c1e0:	66 0f 73 fb 08       	pslldq $0x8,%xmm3
   1c1e5:	66 0f 73 db 08       	psrldq $0x8,%xmm3
   1c1ea:	eb 58                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c1ec:	66 0f 73 fb 09       	pslldq $0x9,%xmm3
   1c1f1:	66 0f 73 db 09       	psrldq $0x9,%xmm3
   1c1f6:	eb 4c                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c1f8:	66 0f 73 fb 0a       	pslldq $0xa,%xmm3
   1c1fd:	66 0f 73 db 0a       	psrldq $0xa,%xmm3
   1c202:	eb 40                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c204:	66 0f 73 fb 0b       	pslldq $0xb,%xmm3
   1c209:	66 0f 73 db 0b       	psrldq $0xb,%xmm3
   1c20e:	eb 34                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c210:	66 0f 73 fb 0c       	pslldq $0xc,%xmm3
   1c215:	66 0f 73 db 0c       	psrldq $0xc,%xmm3
   1c21a:	eb 28                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c21c:	66 0f 73 fb 0d       	pslldq $0xd,%xmm3
   1c221:	66 0f 73 db 0d       	psrldq $0xd,%xmm3
   1c226:	eb 1c                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c228:	66 0f 73 fb 0e       	pslldq $0xe,%xmm3
   1c22d:	66 0f 73 db 0e       	psrldq $0xe,%xmm3
   1c232:	eb 10                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c234:	66 0f 73 fb 0f       	pslldq $0xf,%xmm3
   1c239:	66 0f 73 db 0f       	psrldq $0xf,%xmm3
   1c23e:	eb 04                	jmp    1c244 <__intel_sse2_strspn+0x474>
   1c240:	66 0f 6f d9          	movdqa %xmm1,%xmm3
   1c244:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1c248:	66 0f d7 d3          	pmovmskb %xmm3,%edx
   1c24c:	85 d2                	test   %edx,%edx
   1c24e:	0f 84 bb fe ff ff    	je     1c10f <__intel_sse2_strspn+0x33f>
   1c254:	e9 a6 fe ff ff       	jmpq   1c0ff <__intel_sse2_strspn+0x32f>
   1c259:	44 0f bc ca          	bsf    %edx,%r9d
   1c25d:	4d 63 c9             	movslq %r9d,%r9
   1c260:	e9 f4 fd ff ff       	jmpq   1c059 <__intel_sse2_strspn+0x289>
   1c265:	0f 1f 40 00          	nopl   0x0(%rax)
   1c269:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001c270 <__intel_sse2_strtok>:
   1c270:	f3 0f 1e fa          	endbr64 
   1c274:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
   1c27b:	48 89 cf             	mov    %rcx,%rdi
   1c27e:	44 0f 11 7c 24 70    	movups %xmm15,0x70(%rsp)
   1c284:	48 89 d6             	mov    %rdx,%rsi
   1c287:	44 0f 11 b4 24 80 00 	movups %xmm14,0x80(%rsp)
   1c28e:	00 00 
   1c290:	44 0f 11 6c 24 10    	movups %xmm13,0x10(%rsp)
   1c296:	44 0f 11 24 24       	movups %xmm12,(%rsp)
   1c29b:	44 0f 11 5c 24 20    	movups %xmm11,0x20(%rsp)
   1c2a1:	44 0f 11 54 24 30    	movups %xmm10,0x30(%rsp)
   1c2a7:	44 0f 11 4c 24 40    	movups %xmm9,0x40(%rsp)
   1c2ad:	44 0f 11 44 24 50    	movups %xmm8,0x50(%rsp)
   1c2b3:	0f 11 7c 24 60       	movups %xmm7,0x60(%rsp)
   1c2b8:	0f 11 b4 24 90 00 00 	movups %xmm6,0x90(%rsp)
   1c2bf:	00 
   1c2c0:	48 85 ff             	test   %rdi,%rdi
   1c2c3:	0f 84 fe 05 00 00    	je     1c8c7 <__intel_sse2_strtok+0x657>
   1c2c9:	80 3f 00             	cmpb   $0x0,(%rdi)
   1c2cc:	75 11                	jne    1c2df <__intel_sse2_strtok+0x6f>
   1c2ce:	33 c0                	xor    %eax,%eax
   1c2d0:	48 89 3d d9 9a 21 00 	mov    %rdi,0x219ad9(%rip)        # 235db0 <g_last_token>
   1c2d7:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
   1c2de:	c3                   	retq   
   1c2df:	89 f1                	mov    %esi,%ecx
   1c2e1:	49 89 f0             	mov    %rsi,%r8
   1c2e4:	83 e1 0f             	and    $0xf,%ecx
   1c2e7:	45 33 d2             	xor    %r10d,%r10d
   1c2ea:	4c 2b c1             	sub    %rcx,%r8
   1c2ed:	f3 41 0f 6f 00       	movdqu (%r8),%xmm0
   1c2f2:	48 8d 15 57 46 01 00 	lea    0x14657(%rip),%rdx        # 30950 <__func__.2393+0x757>
   1c2f9:	0f b6 14 0a          	movzbl (%rdx,%rcx,1),%edx
   1c2fd:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1c30a <__intel_sse2_strtok+0x9a>
   1c304:	48 03 c2             	add    %rdx,%rax
   1c307:	3e ff e0             	notrack jmpq *%rax
   1c30a:	66 0f 73 d8 0f       	psrldq $0xf,%xmm0
   1c30f:	eb 60                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c311:	66 0f 73 d8 0e       	psrldq $0xe,%xmm0
   1c316:	eb 59                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c318:	66 0f 73 d8 0d       	psrldq $0xd,%xmm0
   1c31d:	eb 52                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c31f:	66 0f 73 d8 0c       	psrldq $0xc,%xmm0
   1c324:	eb 4b                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c326:	66 0f 73 d8 0b       	psrldq $0xb,%xmm0
   1c32b:	eb 44                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c32d:	66 0f 73 d8 0a       	psrldq $0xa,%xmm0
   1c332:	eb 3d                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c334:	66 0f 73 d8 09       	psrldq $0x9,%xmm0
   1c339:	eb 36                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c33b:	66 0f 73 d8 08       	psrldq $0x8,%xmm0
   1c340:	eb 2f                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c342:	66 0f 73 d8 07       	psrldq $0x7,%xmm0
   1c347:	eb 28                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c349:	66 0f 73 d8 06       	psrldq $0x6,%xmm0
   1c34e:	eb 21                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c350:	66 0f 73 d8 05       	psrldq $0x5,%xmm0
   1c355:	eb 1a                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c357:	66 0f 73 d8 04       	psrldq $0x4,%xmm0
   1c35c:	eb 13                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c35e:	66 0f 73 d8 03       	psrldq $0x3,%xmm0
   1c363:	eb 0c                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c365:	66 0f 73 d8 02       	psrldq $0x2,%xmm0
   1c36a:	eb 05                	jmp    1c371 <__intel_sse2_strtok+0x101>
   1c36c:	66 0f 73 d8 01       	psrldq $0x1,%xmm0
   1c371:	66 0f 6f d0          	movdqa %xmm0,%xmm2
   1c375:	66 0f ef c9          	pxor   %xmm1,%xmm1
   1c379:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1c37d:	66 0f d7 d2          	pmovmskb %xmm2,%edx
   1c381:	85 d2                	test   %edx,%edx
   1c383:	75 0b                	jne    1c390 <__intel_sse2_strtok+0x120>
   1c385:	41 b9 10 00 00 00    	mov    $0x10,%r9d
   1c38b:	e9 eb 00 00 00       	jmpq   1c47b <__intel_sse2_strtok+0x20b>
   1c390:	44 0f bc ca          	bsf    %edx,%r9d
   1c394:	41 83 f9 0f          	cmp    $0xf,%r9d
   1c398:	0f 87 dd 00 00 00    	ja     1c47b <__intel_sse2_strtok+0x20b>
   1c39e:	48 8d 15 bb 45 01 00 	lea    0x145bb(%rip),%rdx        # 30960 <__func__.2393+0x767>
   1c3a5:	42 0f b6 14 0a       	movzbl (%rdx,%r9,1),%edx
   1c3aa:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1c3b7 <__intel_sse2_strtok+0x147>
   1c3b1:	48 03 c2             	add    %rdx,%rax
   1c3b4:	3e ff e0             	notrack jmpq *%rax
   1c3b7:	66 0f 73 f8 01       	pslldq $0x1,%xmm0
   1c3bc:	66 0f 73 d8 01       	psrldq $0x1,%xmm0
   1c3c1:	e9 b5 00 00 00       	jmpq   1c47b <__intel_sse2_strtok+0x20b>
   1c3c6:	66 0f 73 f8 02       	pslldq $0x2,%xmm0
   1c3cb:	66 0f 73 d8 02       	psrldq $0x2,%xmm0
   1c3d0:	e9 a6 00 00 00       	jmpq   1c47b <__intel_sse2_strtok+0x20b>
   1c3d5:	66 0f 73 f8 03       	pslldq $0x3,%xmm0
   1c3da:	66 0f 73 d8 03       	psrldq $0x3,%xmm0
   1c3df:	e9 97 00 00 00       	jmpq   1c47b <__intel_sse2_strtok+0x20b>
   1c3e4:	66 0f 73 f8 04       	pslldq $0x4,%xmm0
   1c3e9:	66 0f 73 d8 04       	psrldq $0x4,%xmm0
   1c3ee:	e9 88 00 00 00       	jmpq   1c47b <__intel_sse2_strtok+0x20b>
   1c3f3:	66 0f 73 f8 05       	pslldq $0x5,%xmm0
   1c3f8:	66 0f 73 d8 05       	psrldq $0x5,%xmm0
   1c3fd:	eb 7c                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c3ff:	66 0f 73 f8 06       	pslldq $0x6,%xmm0
   1c404:	66 0f 73 d8 06       	psrldq $0x6,%xmm0
   1c409:	eb 70                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c40b:	66 0f 73 f8 07       	pslldq $0x7,%xmm0
   1c410:	66 0f 73 d8 07       	psrldq $0x7,%xmm0
   1c415:	eb 64                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c417:	66 0f 73 f8 08       	pslldq $0x8,%xmm0
   1c41c:	66 0f 73 d8 08       	psrldq $0x8,%xmm0
   1c421:	eb 58                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c423:	66 0f 73 f8 09       	pslldq $0x9,%xmm0
   1c428:	66 0f 73 d8 09       	psrldq $0x9,%xmm0
   1c42d:	eb 4c                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c42f:	66 0f 73 f8 0a       	pslldq $0xa,%xmm0
   1c434:	66 0f 73 d8 0a       	psrldq $0xa,%xmm0
   1c439:	eb 40                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c43b:	66 0f 73 f8 0b       	pslldq $0xb,%xmm0
   1c440:	66 0f 73 d8 0b       	psrldq $0xb,%xmm0
   1c445:	eb 34                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c447:	66 0f 73 f8 0c       	pslldq $0xc,%xmm0
   1c44c:	66 0f 73 d8 0c       	psrldq $0xc,%xmm0
   1c451:	eb 28                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c453:	66 0f 73 f8 0d       	pslldq $0xd,%xmm0
   1c458:	66 0f 73 d8 0d       	psrldq $0xd,%xmm0
   1c45d:	eb 1c                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c45f:	66 0f 73 f8 0e       	pslldq $0xe,%xmm0
   1c464:	66 0f 73 d8 0e       	psrldq $0xe,%xmm0
   1c469:	eb 10                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c46b:	66 0f 73 f8 0f       	pslldq $0xf,%xmm0
   1c470:	66 0f 73 d8 0f       	psrldq $0xf,%xmm0
   1c475:	eb 04                	jmp    1c47b <__intel_sse2_strtok+0x20b>
   1c477:	66 0f 6f c1          	movdqa %xmm1,%xmm0
   1c47b:	f7 d9                	neg    %ecx
   1c47d:	83 c1 10             	add    $0x10,%ecx
   1c480:	44 3b c9             	cmp    %ecx,%r9d
   1c483:	73 08                	jae    1c48d <__intel_sse2_strtok+0x21d>
   1c485:	45 33 c9             	xor    %r9d,%r9d
   1c488:	e9 b0 00 00 00       	jmpq   1c53d <__intel_sse2_strtok+0x2cd>
   1c48d:	4c 89 c2             	mov    %r8,%rdx
   1c490:	49 8d 48 10          	lea    0x10(%r8),%rcx
   1c494:	48 83 e1 0f          	and    $0xf,%rcx
   1c498:	48 2b d1             	sub    %rcx,%rdx
   1c49b:	48 83 c2 10          	add    $0x10,%rdx
   1c49f:	f3 0f 6f 12          	movdqu (%rdx),%xmm2
   1c4a3:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1c4a7:	66 44 0f d7 ca       	pmovmskb %xmm2,%r9d
   1c4ac:	41 d3 e9             	shr    %cl,%r9d
   1c4af:	45 85 c9             	test   %r9d,%r9d
   1c4b2:	0f 85 03 04 00 00    	jne    1c8bb <__intel_sse2_strtok+0x64b>
   1c4b8:	48 83 c2 10          	add    $0x10,%rdx
   1c4bc:	f3 0f 6f 12          	movdqu (%rdx),%xmm2
   1c4c0:	66 0f 74 d1          	pcmpeqb %xmm1,%xmm2
   1c4c4:	66 0f d7 ca          	pmovmskb %xmm2,%ecx
   1c4c8:	85 c9                	test   %ecx,%ecx
   1c4ca:	74 ec                	je     1c4b8 <__intel_sse2_strtok+0x248>
   1c4cc:	0f bc c9             	bsf    %ecx,%ecx
   1c4cf:	48 63 c9             	movslq %ecx,%rcx
   1c4d2:	49 2b c8             	sub    %r8,%rcx
   1c4d5:	4c 8d 4c 0a f0       	lea    -0x10(%rdx,%rcx,1),%r9
   1c4da:	41 83 f9 10          	cmp    $0x10,%r9d
   1c4de:	76 57                	jbe    1c537 <__intel_sse2_strtok+0x2c7>
   1c4e0:	48 c7 05 c5 98 21 00 	movq   $0x0,0x2198c5(%rip)        # 235db0 <g_last_token>
   1c4e7:	00 00 00 00 
   1c4eb:	e8 91 34 00 00       	callq  1f981 <strtok>
   1c4f0:	0f 10 b4 24 90 00 00 	movups 0x90(%rsp),%xmm6
   1c4f7:	00 
   1c4f8:	0f 10 7c 24 60       	movups 0x60(%rsp),%xmm7
   1c4fd:	44 0f 10 44 24 50    	movups 0x50(%rsp),%xmm8
   1c503:	44 0f 10 4c 24 40    	movups 0x40(%rsp),%xmm9
   1c509:	44 0f 10 54 24 30    	movups 0x30(%rsp),%xmm10
   1c50f:	44 0f 10 5c 24 20    	movups 0x20(%rsp),%xmm11
   1c515:	44 0f 10 24 24       	movups (%rsp),%xmm12
   1c51a:	44 0f 10 6c 24 10    	movups 0x10(%rsp),%xmm13
   1c520:	44 0f 10 b4 24 80 00 	movups 0x80(%rsp),%xmm14
   1c527:	00 00 
   1c529:	44 0f 10 7c 24 70    	movups 0x70(%rsp),%xmm15
   1c52f:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
   1c536:	c3                   	retq   
   1c537:	41 ba 01 00 00 00    	mov    $0x1,%r10d
   1c53d:	0f be 17             	movsbl (%rdi),%edx
   1c540:	66 0f 6e d2          	movd   %edx,%xmm2
   1c544:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   1c548:	66 0f 60 d2          	punpcklbw %xmm2,%xmm2
   1c54c:	33 c9                	xor    %ecx,%ecx
   1c54e:	66 0f 60 d2          	punpcklbw %xmm2,%xmm2
   1c552:	33 d2                	xor    %edx,%edx
   1c554:	66 0f 70 d2 00       	pshufd $0x0,%xmm2,%xmm2
   1c559:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1c55d:	66 0f d7 f3          	pmovmskb %xmm3,%esi
   1c561:	85 f6                	test   %esi,%esi
   1c563:	75 27                	jne    1c58c <__intel_sse2_strtok+0x31c>
   1c565:	4d 85 d2             	test   %r10,%r10
   1c568:	74 32                	je     1c59c <__intel_sse2_strtok+0x32c>
   1c56a:	48 ff c1             	inc    %rcx
   1c56d:	48 83 c2 10          	add    $0x10,%rdx
   1c571:	49 3b ca             	cmp    %r10,%rcx
   1c574:	0f 84 3c 02 00 00    	je     1c7b6 <__intel_sse2_strtok+0x546>
   1c57a:	f3 42 0f 6f 1c 02    	movdqu (%rdx,%r8,1),%xmm3
   1c580:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1c584:	66 0f d7 f3          	pmovmskb %xmm3,%esi
   1c588:	85 f6                	test   %esi,%esi
   1c58a:	74 d9                	je     1c565 <__intel_sse2_strtok+0x2f5>
   1c58c:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1c592:	48 ff c7             	inc    %rdi
   1c595:	0f be 17             	movsbl (%rdi),%edx
   1c598:	85 d2                	test   %edx,%edx
   1c59a:	75 a4                	jne    1c540 <__intel_sse2_strtok+0x2d0>
   1c59c:	80 3f 00             	cmpb   $0x0,(%rdi)
   1c59f:	75 50                	jne    1c5f1 <__intel_sse2_strtok+0x381>
   1c5a1:	0f 10 b4 24 90 00 00 	movups 0x90(%rsp),%xmm6
   1c5a8:	00 
   1c5a9:	33 c0                	xor    %eax,%eax
   1c5ab:	0f 10 7c 24 60       	movups 0x60(%rsp),%xmm7
   1c5b0:	44 0f 10 44 24 50    	movups 0x50(%rsp),%xmm8
   1c5b6:	44 0f 10 4c 24 40    	movups 0x40(%rsp),%xmm9
   1c5bc:	44 0f 10 54 24 30    	movups 0x30(%rsp),%xmm10
   1c5c2:	44 0f 10 5c 24 20    	movups 0x20(%rsp),%xmm11
   1c5c8:	44 0f 10 24 24       	movups (%rsp),%xmm12
   1c5cd:	44 0f 10 6c 24 10    	movups 0x10(%rsp),%xmm13
   1c5d3:	44 0f 10 b4 24 80 00 	movups 0x80(%rsp),%xmm14
   1c5da:	00 00 
   1c5dc:	44 0f 10 7c 24 70    	movups 0x70(%rsp),%xmm15
   1c5e2:	48 89 3d c7 97 21 00 	mov    %rdi,0x2197c7(%rip)        # 235db0 <g_last_token>
   1c5e9:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
   1c5f0:	c3                   	retq   
   1c5f1:	0f be 17             	movsbl (%rdi),%edx
   1c5f4:	48 89 f9             	mov    %rdi,%rcx
   1c5f7:	66 0f 6e d2          	movd   %edx,%xmm2
   1c5fb:	66 0f 6f d8          	movdqa %xmm0,%xmm3
   1c5ff:	66 0f 60 d2          	punpcklbw %xmm2,%xmm2
   1c603:	33 f6                	xor    %esi,%esi
   1c605:	66 0f 60 d2          	punpcklbw %xmm2,%xmm2
   1c609:	33 d2                	xor    %edx,%edx
   1c60b:	66 0f 70 d2 00       	pshufd $0x0,%xmm2,%xmm2
   1c610:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1c614:	66 44 0f d7 db       	pmovmskb %xmm3,%r11d
   1c619:	45 85 db             	test   %r11d,%r11d
   1c61c:	75 29                	jne    1c647 <__intel_sse2_strtok+0x3d7>
   1c61e:	4d 85 d2             	test   %r10,%r10
   1c621:	0f 84 7c 01 00 00    	je     1c7a3 <__intel_sse2_strtok+0x533>
   1c627:	48 ff c6             	inc    %rsi
   1c62a:	48 83 c2 10          	add    $0x10,%rdx
   1c62e:	49 3b f2             	cmp    %r10,%rsi
   1c631:	74 70                	je     1c6a3 <__intel_sse2_strtok+0x433>
   1c633:	f3 42 0f 6f 1c 02    	movdqu (%rdx,%r8,1),%xmm3
   1c639:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1c63d:	66 44 0f d7 db       	pmovmskb %xmm3,%r11d
   1c642:	45 85 db             	test   %r11d,%r11d
   1c645:	74 d7                	je     1c61e <__intel_sse2_strtok+0x3ae>
   1c647:	80 39 00             	cmpb   $0x0,(%rcx)
   1c64a:	74 06                	je     1c652 <__intel_sse2_strtok+0x3e2>
   1c64c:	c6 01 00             	movb   $0x0,(%rcx)
   1c64f:	48 ff c1             	inc    %rcx
   1c652:	0f 10 b4 24 90 00 00 	movups 0x90(%rsp),%xmm6
   1c659:	00 
   1c65a:	48 89 f8             	mov    %rdi,%rax
   1c65d:	0f 10 7c 24 60       	movups 0x60(%rsp),%xmm7
   1c662:	44 0f 10 44 24 50    	movups 0x50(%rsp),%xmm8
   1c668:	44 0f 10 4c 24 40    	movups 0x40(%rsp),%xmm9
   1c66e:	44 0f 10 54 24 30    	movups 0x30(%rsp),%xmm10
   1c674:	44 0f 10 5c 24 20    	movups 0x20(%rsp),%xmm11
   1c67a:	44 0f 10 24 24       	movups (%rsp),%xmm12
   1c67f:	44 0f 10 6c 24 10    	movups 0x10(%rsp),%xmm13
   1c685:	44 0f 10 b4 24 80 00 	movups 0x80(%rsp),%xmm14
   1c68c:	00 00 
   1c68e:	44 0f 10 7c 24 70    	movups 0x70(%rsp),%xmm15
   1c694:	48 89 0d 15 97 21 00 	mov    %rcx,0x219715(%rip)        # 235db0 <g_last_token>
   1c69b:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
   1c6a2:	c3                   	retq   
   1c6a3:	f3 42 0f 6f 1c 02    	movdqu (%rdx,%r8,1),%xmm3
   1c6a9:	41 83 f9 0f          	cmp    $0xf,%r9d
   1c6ad:	0f 87 e0 00 00 00    	ja     1c793 <__intel_sse2_strtok+0x523>
   1c6b3:	45 89 c9             	mov    %r9d,%r9d
   1c6b6:	48 8d 15 b3 42 01 00 	lea    0x142b3(%rip),%rdx        # 30970 <__func__.2393+0x777>
   1c6bd:	42 0f b6 14 0a       	movzbl (%rdx,%r9,1),%edx
   1c6c2:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1c6cf <__intel_sse2_strtok+0x45f>
   1c6c9:	48 03 c2             	add    %rdx,%rax
   1c6cc:	3e ff e0             	notrack jmpq *%rax
   1c6cf:	66 0f 73 fb 01       	pslldq $0x1,%xmm3
   1c6d4:	66 0f 73 db 01       	psrldq $0x1,%xmm3
   1c6d9:	e9 b5 00 00 00       	jmpq   1c793 <__intel_sse2_strtok+0x523>
   1c6de:	66 0f 73 fb 02       	pslldq $0x2,%xmm3
   1c6e3:	66 0f 73 db 02       	psrldq $0x2,%xmm3
   1c6e8:	e9 a6 00 00 00       	jmpq   1c793 <__intel_sse2_strtok+0x523>
   1c6ed:	66 0f 73 fb 03       	pslldq $0x3,%xmm3
   1c6f2:	66 0f 73 db 03       	psrldq $0x3,%xmm3
   1c6f7:	e9 97 00 00 00       	jmpq   1c793 <__intel_sse2_strtok+0x523>
   1c6fc:	66 0f 73 fb 04       	pslldq $0x4,%xmm3
   1c701:	66 0f 73 db 04       	psrldq $0x4,%xmm3
   1c706:	e9 88 00 00 00       	jmpq   1c793 <__intel_sse2_strtok+0x523>
   1c70b:	66 0f 73 fb 05       	pslldq $0x5,%xmm3
   1c710:	66 0f 73 db 05       	psrldq $0x5,%xmm3
   1c715:	eb 7c                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c717:	66 0f 73 fb 06       	pslldq $0x6,%xmm3
   1c71c:	66 0f 73 db 06       	psrldq $0x6,%xmm3
   1c721:	eb 70                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c723:	66 0f 73 fb 07       	pslldq $0x7,%xmm3
   1c728:	66 0f 73 db 07       	psrldq $0x7,%xmm3
   1c72d:	eb 64                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c72f:	66 0f 73 fb 08       	pslldq $0x8,%xmm3
   1c734:	66 0f 73 db 08       	psrldq $0x8,%xmm3
   1c739:	eb 58                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c73b:	66 0f 73 fb 09       	pslldq $0x9,%xmm3
   1c740:	66 0f 73 db 09       	psrldq $0x9,%xmm3
   1c745:	eb 4c                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c747:	66 0f 73 fb 0a       	pslldq $0xa,%xmm3
   1c74c:	66 0f 73 db 0a       	psrldq $0xa,%xmm3
   1c751:	eb 40                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c753:	66 0f 73 fb 0b       	pslldq $0xb,%xmm3
   1c758:	66 0f 73 db 0b       	psrldq $0xb,%xmm3
   1c75d:	eb 34                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c75f:	66 0f 73 fb 0c       	pslldq $0xc,%xmm3
   1c764:	66 0f 73 db 0c       	psrldq $0xc,%xmm3
   1c769:	eb 28                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c76b:	66 0f 73 fb 0d       	pslldq $0xd,%xmm3
   1c770:	66 0f 73 db 0d       	psrldq $0xd,%xmm3
   1c775:	eb 1c                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c777:	66 0f 73 fb 0e       	pslldq $0xe,%xmm3
   1c77c:	66 0f 73 db 0e       	psrldq $0xe,%xmm3
   1c781:	eb 10                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c783:	66 0f 73 fb 0f       	pslldq $0xf,%xmm3
   1c788:	66 0f 73 db 0f       	psrldq $0xf,%xmm3
   1c78d:	eb 04                	jmp    1c793 <__intel_sse2_strtok+0x523>
   1c78f:	66 0f 6f d9          	movdqa %xmm1,%xmm3
   1c793:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1c797:	66 0f d7 d3          	pmovmskb %xmm3,%edx
   1c79b:	85 d2                	test   %edx,%edx
   1c79d:	0f 85 a4 fe ff ff    	jne    1c647 <__intel_sse2_strtok+0x3d7>
   1c7a3:	48 ff c1             	inc    %rcx
   1c7a6:	0f be 11             	movsbl (%rcx),%edx
   1c7a9:	85 d2                	test   %edx,%edx
   1c7ab:	0f 85 46 fe ff ff    	jne    1c5f7 <__intel_sse2_strtok+0x387>
   1c7b1:	e9 91 fe ff ff       	jmpq   1c647 <__intel_sse2_strtok+0x3d7>
   1c7b6:	f3 42 0f 6f 1c 02    	movdqu (%rdx,%r8,1),%xmm3
   1c7bc:	41 83 f9 0f          	cmp    $0xf,%r9d
   1c7c0:	0f 87 e0 00 00 00    	ja     1c8a6 <__intel_sse2_strtok+0x636>
   1c7c6:	45 89 c9             	mov    %r9d,%r9d
   1c7c9:	48 8d 15 b0 41 01 00 	lea    0x141b0(%rip),%rdx        # 30980 <__func__.2393+0x787>
   1c7d0:	42 0f b6 14 0a       	movzbl (%rdx,%r9,1),%edx
   1c7d5:	48 8d 05 06 00 00 00 	lea    0x6(%rip),%rax        # 1c7e2 <__intel_sse2_strtok+0x572>
   1c7dc:	48 03 c2             	add    %rdx,%rax
   1c7df:	3e ff e0             	notrack jmpq *%rax
   1c7e2:	66 0f 73 fb 01       	pslldq $0x1,%xmm3
   1c7e7:	66 0f 73 db 01       	psrldq $0x1,%xmm3
   1c7ec:	e9 b5 00 00 00       	jmpq   1c8a6 <__intel_sse2_strtok+0x636>
   1c7f1:	66 0f 73 fb 02       	pslldq $0x2,%xmm3
   1c7f6:	66 0f 73 db 02       	psrldq $0x2,%xmm3
   1c7fb:	e9 a6 00 00 00       	jmpq   1c8a6 <__intel_sse2_strtok+0x636>
   1c800:	66 0f 73 fb 03       	pslldq $0x3,%xmm3
   1c805:	66 0f 73 db 03       	psrldq $0x3,%xmm3
   1c80a:	e9 97 00 00 00       	jmpq   1c8a6 <__intel_sse2_strtok+0x636>
   1c80f:	66 0f 73 fb 04       	pslldq $0x4,%xmm3
   1c814:	66 0f 73 db 04       	psrldq $0x4,%xmm3
   1c819:	e9 88 00 00 00       	jmpq   1c8a6 <__intel_sse2_strtok+0x636>
   1c81e:	66 0f 73 fb 05       	pslldq $0x5,%xmm3
   1c823:	66 0f 73 db 05       	psrldq $0x5,%xmm3
   1c828:	eb 7c                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c82a:	66 0f 73 fb 06       	pslldq $0x6,%xmm3
   1c82f:	66 0f 73 db 06       	psrldq $0x6,%xmm3
   1c834:	eb 70                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c836:	66 0f 73 fb 07       	pslldq $0x7,%xmm3
   1c83b:	66 0f 73 db 07       	psrldq $0x7,%xmm3
   1c840:	eb 64                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c842:	66 0f 73 fb 08       	pslldq $0x8,%xmm3
   1c847:	66 0f 73 db 08       	psrldq $0x8,%xmm3
   1c84c:	eb 58                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c84e:	66 0f 73 fb 09       	pslldq $0x9,%xmm3
   1c853:	66 0f 73 db 09       	psrldq $0x9,%xmm3
   1c858:	eb 4c                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c85a:	66 0f 73 fb 0a       	pslldq $0xa,%xmm3
   1c85f:	66 0f 73 db 0a       	psrldq $0xa,%xmm3
   1c864:	eb 40                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c866:	66 0f 73 fb 0b       	pslldq $0xb,%xmm3
   1c86b:	66 0f 73 db 0b       	psrldq $0xb,%xmm3
   1c870:	eb 34                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c872:	66 0f 73 fb 0c       	pslldq $0xc,%xmm3
   1c877:	66 0f 73 db 0c       	psrldq $0xc,%xmm3
   1c87c:	eb 28                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c87e:	66 0f 73 fb 0d       	pslldq $0xd,%xmm3
   1c883:	66 0f 73 db 0d       	psrldq $0xd,%xmm3
   1c888:	eb 1c                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c88a:	66 0f 73 fb 0e       	pslldq $0xe,%xmm3
   1c88f:	66 0f 73 db 0e       	psrldq $0xe,%xmm3
   1c894:	eb 10                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c896:	66 0f 73 fb 0f       	pslldq $0xf,%xmm3
   1c89b:	66 0f 73 db 0f       	psrldq $0xf,%xmm3
   1c8a0:	eb 04                	jmp    1c8a6 <__intel_sse2_strtok+0x636>
   1c8a2:	66 0f 6f d9          	movdqa %xmm1,%xmm3
   1c8a6:	66 0f 74 da          	pcmpeqb %xmm2,%xmm3
   1c8aa:	66 0f d7 d3          	pmovmskb %xmm3,%edx
   1c8ae:	85 d2                	test   %edx,%edx
   1c8b0:	0f 84 e6 fc ff ff    	je     1c59c <__intel_sse2_strtok+0x32c>
   1c8b6:	e9 d1 fc ff ff       	jmpq   1c58c <__intel_sse2_strtok+0x31c>
   1c8bb:	45 0f bc c9          	bsf    %r9d,%r9d
   1c8bf:	4d 63 c9             	movslq %r9d,%r9
   1c8c2:	e9 13 fc ff ff       	jmpq   1c4da <__intel_sse2_strtok+0x26a>
   1c8c7:	48 8b 3d e2 94 21 00 	mov    0x2194e2(%rip),%rdi        # 235db0 <g_last_token>
   1c8ce:	48 85 ff             	test   %rdi,%rdi
   1c8d1:	0f 85 f2 f9 ff ff    	jne    1c2c9 <__intel_sse2_strtok+0x59>
   1c8d7:	33 ff                	xor    %edi,%edi
   1c8d9:	e8 a3 30 00 00       	callq  1f981 <strtok>
   1c8de:	0f 10 b4 24 90 00 00 	movups 0x90(%rsp),%xmm6
   1c8e5:	00 
   1c8e6:	0f 10 7c 24 60       	movups 0x60(%rsp),%xmm7
   1c8eb:	44 0f 10 44 24 50    	movups 0x50(%rsp),%xmm8
   1c8f1:	44 0f 10 4c 24 40    	movups 0x40(%rsp),%xmm9
   1c8f7:	44 0f 10 54 24 30    	movups 0x30(%rsp),%xmm10
   1c8fd:	44 0f 10 5c 24 20    	movups 0x20(%rsp),%xmm11
   1c903:	44 0f 10 24 24       	movups (%rsp),%xmm12
   1c908:	44 0f 10 6c 24 10    	movups 0x10(%rsp),%xmm13
   1c90e:	44 0f 10 b4 24 80 00 	movups 0x80(%rsp),%xmm14
   1c915:	00 00 
   1c917:	44 0f 10 7c 24 70    	movups 0x70(%rsp),%xmm15
   1c91d:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
   1c924:	c3                   	retq   
   1c925:	0f 1f 40 00          	nopl   0x0(%rax)
   1c929:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001c930 <__intel_ssse3_strncpy>:
   1c930:	f3 0f 1e fa          	endbr64 
   1c934:	48 89 f1             	mov    %rsi,%rcx
   1c937:	48 89 fa             	mov    %rdi,%rdx
   1c93a:	4d 85 c0             	test   %r8,%r8
   1c93d:	0f 84 9d 21 00 00    	je     1eae0 <__intel_ssse3_strncpy+0x21b0>
   1c943:	49 83 f8 08          	cmp    $0x8,%r8
   1c947:	0f 86 33 22 00 00    	jbe    1eb80 <__intel_ssse3_strncpy+0x2250>
   1c94d:	80 39 00             	cmpb   $0x0,(%rcx)
   1c950:	0f 84 9a 1d 00 00    	je     1e6f0 <__intel_ssse3_strncpy+0x1dc0>
   1c956:	80 79 01 00          	cmpb   $0x0,0x1(%rcx)
   1c95a:	0f 84 b0 1d 00 00    	je     1e710 <__intel_ssse3_strncpy+0x1de0>
   1c960:	80 79 02 00          	cmpb   $0x0,0x2(%rcx)
   1c964:	0f 84 c6 1d 00 00    	je     1e730 <__intel_ssse3_strncpy+0x1e00>
   1c96a:	80 79 03 00          	cmpb   $0x0,0x3(%rcx)
   1c96e:	0f 84 dc 1d 00 00    	je     1e750 <__intel_ssse3_strncpy+0x1e20>
   1c974:	80 79 04 00          	cmpb   $0x0,0x4(%rcx)
   1c978:	0f 84 f2 1d 00 00    	je     1e770 <__intel_ssse3_strncpy+0x1e40>
   1c97e:	80 79 05 00          	cmpb   $0x0,0x5(%rcx)
   1c982:	0f 84 08 1e 00 00    	je     1e790 <__intel_ssse3_strncpy+0x1e60>
   1c988:	80 79 06 00          	cmpb   $0x0,0x6(%rcx)
   1c98c:	0f 84 1e 1e 00 00    	je     1e7b0 <__intel_ssse3_strncpy+0x1e80>
   1c992:	80 79 07 00          	cmpb   $0x0,0x7(%rcx)
   1c996:	0f 84 f4 1a 00 00    	je     1e490 <__intel_ssse3_strncpy+0x1b60>
   1c99c:	49 83 f8 10          	cmp    $0x10,%r8
   1c9a0:	0f 82 4a 21 00 00    	jb     1eaf0 <__intel_ssse3_strncpy+0x21c0>
   1c9a6:	80 79 08 00          	cmpb   $0x0,0x8(%rcx)
   1c9aa:	0f 84 20 1e 00 00    	je     1e7d0 <__intel_ssse3_strncpy+0x1ea0>
   1c9b0:	80 79 09 00          	cmpb   $0x0,0x9(%rcx)
   1c9b4:	0f 84 36 1e 00 00    	je     1e7f0 <__intel_ssse3_strncpy+0x1ec0>
   1c9ba:	80 79 0a 00          	cmpb   $0x0,0xa(%rcx)
   1c9be:	0f 84 4c 1e 00 00    	je     1e810 <__intel_ssse3_strncpy+0x1ee0>
   1c9c4:	80 79 0b 00          	cmpb   $0x0,0xb(%rcx)
   1c9c8:	0f 84 62 1e 00 00    	je     1e830 <__intel_ssse3_strncpy+0x1f00>
   1c9ce:	80 79 0c 00          	cmpb   $0x0,0xc(%rcx)
   1c9d2:	0f 84 78 1e 00 00    	je     1e850 <__intel_ssse3_strncpy+0x1f20>
   1c9d8:	80 79 0d 00          	cmpb   $0x0,0xd(%rcx)
   1c9dc:	0f 84 8e 1e 00 00    	je     1e870 <__intel_ssse3_strncpy+0x1f40>
   1c9e2:	80 79 0e 00          	cmpb   $0x0,0xe(%rcx)
   1c9e6:	0f 84 a4 1e 00 00    	je     1e890 <__intel_ssse3_strncpy+0x1f60>
   1c9ec:	49 83 f8 10          	cmp    $0x10,%r8
   1c9f0:	0f 84 fa 1a 00 00    	je     1e4f0 <__intel_ssse3_strncpy+0x1bc0>
   1c9f6:	80 79 0f 00          	cmpb   $0x0,0xf(%rcx)
   1c9fa:	0f 84 f0 1a 00 00    	je     1e4f0 <__intel_ssse3_strncpy+0x1bc0>
   1ca00:	48 89 ce             	mov    %rcx,%rsi
   1ca03:	48 83 e6 0f          	and    $0xf,%rsi
   1ca07:	4c 03 c6             	add    %rsi,%r8
   1ca0a:	48 8d 71 10          	lea    0x10(%rcx),%rsi
   1ca0e:	48 83 e6 f0          	and    $0xfffffffffffffff0,%rsi
   1ca12:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1ca16:	4c 8b 09             	mov    (%rcx),%r9
   1ca19:	4c 89 0a             	mov    %r9,(%rdx)
   1ca1c:	66 0f 74 06          	pcmpeqb (%rsi),%xmm0
   1ca20:	4c 8b 49 08          	mov    0x8(%rcx),%r9
   1ca24:	4c 89 4a 08          	mov    %r9,0x8(%rdx)
   1ca28:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1ca2c:	48 2b f1             	sub    %rcx,%rsi
   1ca2f:	49 83 e8 20          	sub    $0x20,%r8
   1ca33:	0f 86 11 1c 00 00    	jbe    1e64a <__intel_ssse3_strncpy+0x1d1a>
   1ca39:	48 85 c0             	test   %rax,%rax
   1ca3c:	0f 85 fe 19 00 00    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1ca42:	48 89 d0             	mov    %rdx,%rax
   1ca45:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1ca49:	48 83 e2 f0          	and    $0xfffffffffffffff0,%rdx
   1ca4d:	48 2b c2             	sub    %rdx,%rax
   1ca50:	48 03 f0             	add    %rax,%rsi
   1ca53:	48 8d 76 ff          	lea    -0x1(%rsi),%rsi
   1ca57:	81 e6 00 00 00 80    	and    $0x80000000,%esi
   1ca5d:	48 85 f6             	test   %rsi,%rsi
   1ca60:	75 04                	jne    1ca66 <__intel_ssse3_strncpy+0x136>
   1ca62:	4d 8d 40 10          	lea    0x10(%r8),%r8
   1ca66:	48 2b c8             	sub    %rax,%rcx
   1ca69:	48 89 c8             	mov    %rcx,%rax
   1ca6c:	48 83 e0 0f          	and    $0xf,%rax
   1ca70:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
   1ca77:	0f 84 8e 00 00 00    	je     1cb0b <__intel_ssse3_strncpy+0x1db>
   1ca7d:	48 83 f8 08          	cmp    $0x8,%rax
   1ca81:	73 41                	jae    1cac4 <__intel_ssse3_strncpy+0x194>
   1ca83:	48 83 f8 01          	cmp    $0x1,%rax
   1ca87:	0f 84 53 02 00 00    	je     1cce0 <__intel_ssse3_strncpy+0x3b0>
   1ca8d:	48 83 f8 02          	cmp    $0x2,%rax
   1ca91:	0f 84 d9 03 00 00    	je     1ce70 <__intel_ssse3_strncpy+0x540>
   1ca97:	48 83 f8 03          	cmp    $0x3,%rax
   1ca9b:	0f 84 5f 05 00 00    	je     1d000 <__intel_ssse3_strncpy+0x6d0>
   1caa1:	48 83 f8 04          	cmp    $0x4,%rax
   1caa5:	0f 84 e5 06 00 00    	je     1d190 <__intel_ssse3_strncpy+0x860>
   1caab:	48 83 f8 05          	cmp    $0x5,%rax
   1caaf:	0f 84 6b 08 00 00    	je     1d320 <__intel_ssse3_strncpy+0x9f0>
   1cab5:	48 83 f8 06          	cmp    $0x6,%rax
   1cab9:	0f 84 f1 09 00 00    	je     1d4b0 <__intel_ssse3_strncpy+0xb80>
   1cabf:	e9 7c 0b 00 00       	jmpq   1d640 <__intel_ssse3_strncpy+0xd10>
   1cac4:	0f 84 06 0d 00 00    	je     1d7d0 <__intel_ssse3_strncpy+0xea0>
   1caca:	48 83 f8 09          	cmp    $0x9,%rax
   1cace:	0f 84 8c 0e 00 00    	je     1d960 <__intel_ssse3_strncpy+0x1030>
   1cad4:	48 83 f8 0a          	cmp    $0xa,%rax
   1cad8:	0f 84 12 10 00 00    	je     1daf0 <__intel_ssse3_strncpy+0x11c0>
   1cade:	48 83 f8 0b          	cmp    $0xb,%rax
   1cae2:	0f 84 98 11 00 00    	je     1dc80 <__intel_ssse3_strncpy+0x1350>
   1cae8:	48 83 f8 0c          	cmp    $0xc,%rax
   1caec:	0f 84 1e 13 00 00    	je     1de10 <__intel_ssse3_strncpy+0x14e0>
   1caf2:	48 83 f8 0d          	cmp    $0xd,%rax
   1caf6:	0f 84 a4 14 00 00    	je     1dfa0 <__intel_ssse3_strncpy+0x1670>
   1cafc:	48 83 f8 0e          	cmp    $0xe,%rax
   1cb00:	0f 84 2a 16 00 00    	je     1e130 <__intel_ssse3_strncpy+0x1800>
   1cb06:	e9 b5 17 00 00       	jmpq   1e2c0 <__intel_ssse3_strncpy+0x1990>
   1cb0b:	0f 28 09             	movaps (%rcx),%xmm1
   1cb0e:	0f 28 51 10          	movaps 0x10(%rcx),%xmm2
   1cb12:	0f 29 0a             	movaps %xmm1,(%rdx)
   1cb15:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1cb19:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cb1d:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1cb21:	49 83 e8 10          	sub    $0x10,%r8
   1cb25:	0f 86 1f 1b 00 00    	jbe    1e64a <__intel_ssse3_strncpy+0x1d1a>
   1cb2b:	48 85 c0             	test   %rax,%rax
   1cb2e:	0f 85 0c 19 00 00    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1cb34:	0f 28 5c 31 10       	movaps 0x10(%rcx,%rsi,1),%xmm3
   1cb39:	0f 29 14 32          	movaps %xmm2,(%rdx,%rsi,1)
   1cb3d:	66 0f 74 c3          	pcmpeqb %xmm3,%xmm0
   1cb41:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cb45:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1cb49:	49 83 e8 10          	sub    $0x10,%r8
   1cb4d:	0f 86 f7 1a 00 00    	jbe    1e64a <__intel_ssse3_strncpy+0x1d1a>
   1cb53:	48 85 c0             	test   %rax,%rax
   1cb56:	0f 85 e4 18 00 00    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1cb5c:	0f 28 64 31 10       	movaps 0x10(%rcx,%rsi,1),%xmm4
   1cb61:	0f 29 1c 32          	movaps %xmm3,(%rdx,%rsi,1)
   1cb65:	66 0f 74 c4          	pcmpeqb %xmm4,%xmm0
   1cb69:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cb6d:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1cb71:	49 83 e8 10          	sub    $0x10,%r8
   1cb75:	0f 86 cf 1a 00 00    	jbe    1e64a <__intel_ssse3_strncpy+0x1d1a>
   1cb7b:	48 85 c0             	test   %rax,%rax
   1cb7e:	0f 85 bc 18 00 00    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1cb84:	0f 28 4c 31 10       	movaps 0x10(%rcx,%rsi,1),%xmm1
   1cb89:	0f 29 24 32          	movaps %xmm4,(%rdx,%rsi,1)
   1cb8d:	66 0f 74 c1          	pcmpeqb %xmm1,%xmm0
   1cb91:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cb95:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1cb99:	49 83 e8 10          	sub    $0x10,%r8
   1cb9d:	0f 86 a7 1a 00 00    	jbe    1e64a <__intel_ssse3_strncpy+0x1d1a>
   1cba3:	48 85 c0             	test   %rax,%rax
   1cba6:	0f 85 94 18 00 00    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1cbac:	0f 28 54 31 10       	movaps 0x10(%rcx,%rsi,1),%xmm2
   1cbb1:	0f 29 0c 32          	movaps %xmm1,(%rdx,%rsi,1)
   1cbb5:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1cbb9:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cbbd:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1cbc1:	49 83 e8 10          	sub    $0x10,%r8
   1cbc5:	0f 86 7f 1a 00 00    	jbe    1e64a <__intel_ssse3_strncpy+0x1d1a>
   1cbcb:	48 85 c0             	test   %rax,%rax
   1cbce:	0f 85 6c 18 00 00    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1cbd4:	0f 28 5c 31 10       	movaps 0x10(%rcx,%rsi,1),%xmm3
   1cbd9:	0f 29 14 32          	movaps %xmm2,(%rdx,%rsi,1)
   1cbdd:	66 0f 74 c3          	pcmpeqb %xmm3,%xmm0
   1cbe1:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cbe5:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1cbe9:	49 83 e8 10          	sub    $0x10,%r8
   1cbed:	0f 86 57 1a 00 00    	jbe    1e64a <__intel_ssse3_strncpy+0x1d1a>
   1cbf3:	48 85 c0             	test   %rax,%rax
   1cbf6:	0f 85 44 18 00 00    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1cbfc:	0f 29 1c 32          	movaps %xmm3,(%rdx,%rsi,1)
   1cc00:	48 89 c8             	mov    %rcx,%rax
   1cc03:	48 8d 4c 31 10       	lea    0x10(%rcx,%rsi,1),%rcx
   1cc08:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1cc0c:	48 2b c1             	sub    %rcx,%rax
   1cc0f:	48 2b d0             	sub    %rax,%rdx
   1cc12:	4d 8d 44 00 70       	lea    0x70(%r8,%rax,1),%r8
   1cc17:	48 be c0 ff ff ff ff 	movabs $0xffffffffffffffc0,%rsi
   1cc1e:	ff ff ff 
   1cc21:	0f 28 11             	movaps (%rcx),%xmm2
   1cc24:	0f 28 e2             	movaps %xmm2,%xmm4
   1cc27:	0f 28 69 10          	movaps 0x10(%rcx),%xmm5
   1cc2b:	0f 28 59 20          	movaps 0x20(%rcx),%xmm3
   1cc2f:	0f 28 f3             	movaps %xmm3,%xmm6
   1cc32:	0f 28 79 30          	movaps 0x30(%rcx),%xmm7
   1cc36:	66 0f da d5          	pminub %xmm5,%xmm2
   1cc3a:	66 0f da df          	pminub %xmm7,%xmm3
   1cc3e:	66 0f da da          	pminub %xmm2,%xmm3
   1cc42:	66 0f 74 d8          	pcmpeqb %xmm0,%xmm3
   1cc46:	66 0f d7 c3          	pmovmskb %xmm3,%eax
   1cc4a:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1cc4e:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1cc52:	49 83 e8 40          	sub    $0x40,%r8
   1cc56:	0f 86 b9 1f 00 00    	jbe    1ec15 <__intel_ssse3_strncpy+0x22e5>
   1cc5c:	48 85 c0             	test   %rax,%rax
   1cc5f:	75 12                	jne    1cc73 <__intel_ssse3_strncpy+0x343>
   1cc61:	0f 29 62 c0          	movaps %xmm4,-0x40(%rdx)
   1cc65:	0f 29 6a d0          	movaps %xmm5,-0x30(%rdx)
   1cc69:	0f 29 72 e0          	movaps %xmm6,-0x20(%rdx)
   1cc6d:	0f 29 7a f0          	movaps %xmm7,-0x10(%rdx)
   1cc71:	eb ae                	jmp    1cc21 <__intel_ssse3_strncpy+0x2f1>
   1cc73:	4d 8d 40 30          	lea    0x30(%r8),%r8
   1cc77:	66 0f 74 c4          	pcmpeqb %xmm4,%xmm0
   1cc7b:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cc7f:	48 85 c0             	test   %rax,%rax
   1cc82:	0f 85 b8 17 00 00    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1cc88:	66 0f 74 c5          	pcmpeqb %xmm5,%xmm0
   1cc8c:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1cc90:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cc94:	0f 29 62 c0          	movaps %xmm4,-0x40(%rdx)
   1cc98:	48 85 c0             	test   %rax,%rax
   1cc9b:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1cc9f:	0f 85 9b 17 00 00    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1cca5:	66 0f 74 c6          	pcmpeqb %xmm6,%xmm0
   1cca9:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1ccad:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1ccb1:	0f 29 6a d0          	movaps %xmm5,-0x30(%rdx)
   1ccb5:	48 85 c0             	test   %rax,%rax
   1ccb8:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ccbc:	0f 85 7e 17 00 00    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1ccc2:	0f 29 72 e0          	movaps %xmm6,-0x20(%rdx)
   1ccc6:	66 0f 74 c7          	pcmpeqb %xmm7,%xmm0
   1ccca:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1ccce:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1ccd2:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ccd6:	e9 65 17 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1ccdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1cce0:	0f 28 49 ff          	movaps -0x1(%rcx),%xmm1
   1cce4:	0f 28 51 0f          	movaps 0xf(%rcx),%xmm2
   1cce8:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1ccec:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1ccf0:	0f 28 da             	movaps %xmm2,%xmm3
   1ccf3:	49 83 e8 10          	sub    $0x10,%r8
   1ccf7:	0f 86 da 1f 00 00    	jbe    1ecd7 <__intel_ssse3_strncpy+0x23a7>
   1ccfd:	48 85 c0             	test   %rax,%rax
   1cd00:	0f 85 42 01 00 00    	jne    1ce48 <__intel_ssse3_strncpy+0x518>
   1cd06:	66 0f 3a 0f d1 01    	palignr $0x1,%xmm1,%xmm2
   1cd0c:	0f 28 cb             	movaps %xmm3,%xmm1
   1cd0f:	0f 29 12             	movaps %xmm2,(%rdx)
   1cd12:	0f 28 51 1f          	movaps 0x1f(%rcx),%xmm2
   1cd16:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1cd1a:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1cd1e:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cd22:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1cd26:	0f 28 da             	movaps %xmm2,%xmm3
   1cd29:	49 83 e8 10          	sub    $0x10,%r8
   1cd2d:	0f 86 a4 1f 00 00    	jbe    1ecd7 <__intel_ssse3_strncpy+0x23a7>
   1cd33:	48 85 c0             	test   %rax,%rax
   1cd36:	0f 85 0c 01 00 00    	jne    1ce48 <__intel_ssse3_strncpy+0x518>
   1cd3c:	66 0f 3a 0f d1 01    	palignr $0x1,%xmm1,%xmm2
   1cd42:	0f 29 12             	movaps %xmm2,(%rdx)
   1cd45:	0f 28 51 1f          	movaps 0x1f(%rcx),%xmm2
   1cd49:	0f 28 cb             	movaps %xmm3,%xmm1
   1cd4c:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1cd50:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1cd54:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cd58:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1cd5c:	0f 28 da             	movaps %xmm2,%xmm3
   1cd5f:	49 83 e8 10          	sub    $0x10,%r8
   1cd63:	0f 86 6e 1f 00 00    	jbe    1ecd7 <__intel_ssse3_strncpy+0x23a7>
   1cd69:	48 85 c0             	test   %rax,%rax
   1cd6c:	0f 85 d6 00 00 00    	jne    1ce48 <__intel_ssse3_strncpy+0x518>
   1cd72:	66 0f 3a 0f d1 01    	palignr $0x1,%xmm1,%xmm2
   1cd78:	0f 28 cb             	movaps %xmm3,%xmm1
   1cd7b:	0f 29 12             	movaps %xmm2,(%rdx)
   1cd7e:	0f 28 51 1f          	movaps 0x1f(%rcx),%xmm2
   1cd82:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1cd86:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1cd8a:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cd8e:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1cd92:	0f 28 da             	movaps %xmm2,%xmm3
   1cd95:	49 83 e8 10          	sub    $0x10,%r8
   1cd99:	0f 86 38 1f 00 00    	jbe    1ecd7 <__intel_ssse3_strncpy+0x23a7>
   1cd9f:	48 85 c0             	test   %rax,%rax
   1cda2:	0f 85 a0 00 00 00    	jne    1ce48 <__intel_ssse3_strncpy+0x518>
   1cda8:	66 0f 3a 0f d1 01    	palignr $0x1,%xmm1,%xmm2
   1cdae:	0f 28 cb             	movaps %xmm3,%xmm1
   1cdb1:	0f 29 12             	movaps %xmm2,(%rdx)
   1cdb4:	48 8d 49 1f          	lea    0x1f(%rcx),%rcx
   1cdb8:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1cdbc:	48 89 c8             	mov    %rcx,%rax
   1cdbf:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1cdc3:	48 2b c1             	sub    %rcx,%rax
   1cdc6:	48 8d 49 f1          	lea    -0xf(%rcx),%rcx
   1cdca:	48 2b d0             	sub    %rax,%rdx
   1cdcd:	4c 03 c0             	add    %rax,%r8
   1cdd0:	0f 28 49 ff          	movaps -0x1(%rcx),%xmm1
   1cdd4:	0f 28 51 0f          	movaps 0xf(%rcx),%xmm2
   1cdd8:	0f 28 59 1f          	movaps 0x1f(%rcx),%xmm3
   1cddc:	0f 28 f3             	movaps %xmm3,%xmm6
   1cddf:	0f 28 61 2f          	movaps 0x2f(%rcx),%xmm4
   1cde3:	0f 28 fc             	movaps %xmm4,%xmm7
   1cde6:	0f 28 69 3f          	movaps 0x3f(%rcx),%xmm5
   1cdea:	66 0f da f2          	pminub %xmm2,%xmm6
   1cdee:	66 0f da fd          	pminub %xmm5,%xmm7
   1cdf2:	66 0f da fe          	pminub %xmm6,%xmm7
   1cdf6:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1cdfa:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1cdfe:	0f 28 fd             	movaps %xmm5,%xmm7
   1ce01:	66 0f 3a 0f ec 01    	palignr $0x1,%xmm4,%xmm5
   1ce07:	48 85 c0             	test   %rax,%rax
   1ce0a:	66 0f 3a 0f e3 01    	palignr $0x1,%xmm3,%xmm4
   1ce10:	0f 85 d2 fe ff ff    	jne    1cce8 <__intel_ssse3_strncpy+0x3b8>
   1ce16:	49 83 e8 40          	sub    $0x40,%r8
   1ce1a:	0f 86 f1 20 00 00    	jbe    1ef11 <__intel_ssse3_strncpy+0x25e1>
   1ce20:	66 0f 3a 0f da 01    	palignr $0x1,%xmm2,%xmm3
   1ce26:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1ce2a:	66 0f 3a 0f d1 01    	palignr $0x1,%xmm1,%xmm2
   1ce30:	0f 28 cf             	movaps %xmm7,%xmm1
   1ce33:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1ce37:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1ce3b:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1ce3f:	0f 29 12             	movaps %xmm2,(%rdx)
   1ce42:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1ce46:	eb 8c                	jmp    1cdd4 <__intel_ssse3_strncpy+0x4a4>
   1ce48:	0f 28 32             	movaps (%rdx),%xmm6
   1ce4b:	66 0f 73 de 0f       	psrldq $0xf,%xmm6
   1ce50:	48 c7 c6 0f 00 00 00 	mov    $0xf,%rsi
   1ce57:	66 0f 3a 0f f1 01    	palignr $0x1,%xmm1,%xmm6
   1ce5d:	0f 29 32             	movaps %xmm6,(%rdx)
   1ce60:	e9 db 15 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1ce65:	0f 1f 40 00          	nopl   0x0(%rax)
   1ce69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1ce70:	0f 28 49 fe          	movaps -0x2(%rcx),%xmm1
   1ce74:	0f 28 51 0e          	movaps 0xe(%rcx),%xmm2
   1ce78:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1ce7c:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1ce80:	0f 28 da             	movaps %xmm2,%xmm3
   1ce83:	49 83 e8 10          	sub    $0x10,%r8
   1ce87:	0f 86 70 1e 00 00    	jbe    1ecfd <__intel_ssse3_strncpy+0x23cd>
   1ce8d:	48 85 c0             	test   %rax,%rax
   1ce90:	0f 85 42 01 00 00    	jne    1cfd8 <__intel_ssse3_strncpy+0x6a8>
   1ce96:	66 0f 3a 0f d1 02    	palignr $0x2,%xmm1,%xmm2
   1ce9c:	0f 28 cb             	movaps %xmm3,%xmm1
   1ce9f:	0f 29 12             	movaps %xmm2,(%rdx)
   1cea2:	0f 28 51 1e          	movaps 0x1e(%rcx),%xmm2
   1cea6:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1ceaa:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1ceae:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1ceb2:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1ceb6:	0f 28 da             	movaps %xmm2,%xmm3
   1ceb9:	49 83 e8 10          	sub    $0x10,%r8
   1cebd:	0f 86 3a 1e 00 00    	jbe    1ecfd <__intel_ssse3_strncpy+0x23cd>
   1cec3:	48 85 c0             	test   %rax,%rax
   1cec6:	0f 85 0c 01 00 00    	jne    1cfd8 <__intel_ssse3_strncpy+0x6a8>
   1cecc:	66 0f 3a 0f d1 02    	palignr $0x2,%xmm1,%xmm2
   1ced2:	0f 29 12             	movaps %xmm2,(%rdx)
   1ced5:	0f 28 51 1e          	movaps 0x1e(%rcx),%xmm2
   1ced9:	0f 28 cb             	movaps %xmm3,%xmm1
   1cedc:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1cee0:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1cee4:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cee8:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1ceec:	0f 28 da             	movaps %xmm2,%xmm3
   1ceef:	49 83 e8 10          	sub    $0x10,%r8
   1cef3:	0f 86 04 1e 00 00    	jbe    1ecfd <__intel_ssse3_strncpy+0x23cd>
   1cef9:	48 85 c0             	test   %rax,%rax
   1cefc:	0f 85 d6 00 00 00    	jne    1cfd8 <__intel_ssse3_strncpy+0x6a8>
   1cf02:	66 0f 3a 0f d1 02    	palignr $0x2,%xmm1,%xmm2
   1cf08:	0f 28 cb             	movaps %xmm3,%xmm1
   1cf0b:	0f 29 12             	movaps %xmm2,(%rdx)
   1cf0e:	0f 28 51 1e          	movaps 0x1e(%rcx),%xmm2
   1cf12:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1cf16:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1cf1a:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1cf1e:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1cf22:	0f 28 da             	movaps %xmm2,%xmm3
   1cf25:	49 83 e8 10          	sub    $0x10,%r8
   1cf29:	0f 86 ce 1d 00 00    	jbe    1ecfd <__intel_ssse3_strncpy+0x23cd>
   1cf2f:	48 85 c0             	test   %rax,%rax
   1cf32:	0f 85 a0 00 00 00    	jne    1cfd8 <__intel_ssse3_strncpy+0x6a8>
   1cf38:	66 0f 3a 0f d1 02    	palignr $0x2,%xmm1,%xmm2
   1cf3e:	0f 28 cb             	movaps %xmm3,%xmm1
   1cf41:	0f 29 12             	movaps %xmm2,(%rdx)
   1cf44:	48 8d 49 1e          	lea    0x1e(%rcx),%rcx
   1cf48:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1cf4c:	48 89 c8             	mov    %rcx,%rax
   1cf4f:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1cf53:	48 2b c1             	sub    %rcx,%rax
   1cf56:	48 8d 49 f2          	lea    -0xe(%rcx),%rcx
   1cf5a:	48 2b d0             	sub    %rax,%rdx
   1cf5d:	4c 03 c0             	add    %rax,%r8
   1cf60:	0f 28 49 fe          	movaps -0x2(%rcx),%xmm1
   1cf64:	0f 28 51 0e          	movaps 0xe(%rcx),%xmm2
   1cf68:	0f 28 59 1e          	movaps 0x1e(%rcx),%xmm3
   1cf6c:	0f 28 f3             	movaps %xmm3,%xmm6
   1cf6f:	0f 28 61 2e          	movaps 0x2e(%rcx),%xmm4
   1cf73:	0f 28 fc             	movaps %xmm4,%xmm7
   1cf76:	0f 28 69 3e          	movaps 0x3e(%rcx),%xmm5
   1cf7a:	66 0f da f2          	pminub %xmm2,%xmm6
   1cf7e:	66 0f da fd          	pminub %xmm5,%xmm7
   1cf82:	66 0f da fe          	pminub %xmm6,%xmm7
   1cf86:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1cf8a:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1cf8e:	0f 28 fd             	movaps %xmm5,%xmm7
   1cf91:	66 0f 3a 0f ec 02    	palignr $0x2,%xmm4,%xmm5
   1cf97:	48 85 c0             	test   %rax,%rax
   1cf9a:	66 0f 3a 0f e3 02    	palignr $0x2,%xmm3,%xmm4
   1cfa0:	0f 85 d2 fe ff ff    	jne    1ce78 <__intel_ssse3_strncpy+0x548>
   1cfa6:	49 83 e8 40          	sub    $0x40,%r8
   1cfaa:	0f 86 de 1f 00 00    	jbe    1ef8e <__intel_ssse3_strncpy+0x265e>
   1cfb0:	66 0f 3a 0f da 02    	palignr $0x2,%xmm2,%xmm3
   1cfb6:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1cfba:	66 0f 3a 0f d1 02    	palignr $0x2,%xmm1,%xmm2
   1cfc0:	0f 28 cf             	movaps %xmm7,%xmm1
   1cfc3:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1cfc7:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1cfcb:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1cfcf:	0f 29 12             	movaps %xmm2,(%rdx)
   1cfd2:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1cfd6:	eb 8c                	jmp    1cf64 <__intel_ssse3_strncpy+0x634>
   1cfd8:	0f 28 32             	movaps (%rdx),%xmm6
   1cfdb:	66 0f 73 de 0e       	psrldq $0xe,%xmm6
   1cfe0:	48 c7 c6 0e 00 00 00 	mov    $0xe,%rsi
   1cfe7:	66 0f 3a 0f f1 02    	palignr $0x2,%xmm1,%xmm6
   1cfed:	0f 29 32             	movaps %xmm6,(%rdx)
   1cff0:	e9 4b 14 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1cff5:	0f 1f 40 00          	nopl   0x0(%rax)
   1cff9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1d000:	0f 28 49 fd          	movaps -0x3(%rcx),%xmm1
   1d004:	0f 28 51 0d          	movaps 0xd(%rcx),%xmm2
   1d008:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d00c:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d010:	0f 28 da             	movaps %xmm2,%xmm3
   1d013:	49 83 e8 10          	sub    $0x10,%r8
   1d017:	0f 86 06 1d 00 00    	jbe    1ed23 <__intel_ssse3_strncpy+0x23f3>
   1d01d:	48 85 c0             	test   %rax,%rax
   1d020:	0f 85 42 01 00 00    	jne    1d168 <__intel_ssse3_strncpy+0x838>
   1d026:	66 0f 3a 0f d1 03    	palignr $0x3,%xmm1,%xmm2
   1d02c:	0f 28 cb             	movaps %xmm3,%xmm1
   1d02f:	0f 29 12             	movaps %xmm2,(%rdx)
   1d032:	0f 28 51 1d          	movaps 0x1d(%rcx),%xmm2
   1d036:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d03a:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d03e:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d042:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d046:	0f 28 da             	movaps %xmm2,%xmm3
   1d049:	49 83 e8 10          	sub    $0x10,%r8
   1d04d:	0f 86 d0 1c 00 00    	jbe    1ed23 <__intel_ssse3_strncpy+0x23f3>
   1d053:	48 85 c0             	test   %rax,%rax
   1d056:	0f 85 0c 01 00 00    	jne    1d168 <__intel_ssse3_strncpy+0x838>
   1d05c:	66 0f 3a 0f d1 03    	palignr $0x3,%xmm1,%xmm2
   1d062:	0f 29 12             	movaps %xmm2,(%rdx)
   1d065:	0f 28 51 1d          	movaps 0x1d(%rcx),%xmm2
   1d069:	0f 28 cb             	movaps %xmm3,%xmm1
   1d06c:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d070:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d074:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d078:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d07c:	0f 28 da             	movaps %xmm2,%xmm3
   1d07f:	49 83 e8 10          	sub    $0x10,%r8
   1d083:	0f 86 9a 1c 00 00    	jbe    1ed23 <__intel_ssse3_strncpy+0x23f3>
   1d089:	48 85 c0             	test   %rax,%rax
   1d08c:	0f 85 d6 00 00 00    	jne    1d168 <__intel_ssse3_strncpy+0x838>
   1d092:	66 0f 3a 0f d1 03    	palignr $0x3,%xmm1,%xmm2
   1d098:	0f 28 cb             	movaps %xmm3,%xmm1
   1d09b:	0f 29 12             	movaps %xmm2,(%rdx)
   1d09e:	0f 28 51 1d          	movaps 0x1d(%rcx),%xmm2
   1d0a2:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d0a6:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d0aa:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d0ae:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d0b2:	0f 28 da             	movaps %xmm2,%xmm3
   1d0b5:	49 83 e8 10          	sub    $0x10,%r8
   1d0b9:	0f 86 64 1c 00 00    	jbe    1ed23 <__intel_ssse3_strncpy+0x23f3>
   1d0bf:	48 85 c0             	test   %rax,%rax
   1d0c2:	0f 85 a0 00 00 00    	jne    1d168 <__intel_ssse3_strncpy+0x838>
   1d0c8:	66 0f 3a 0f d1 03    	palignr $0x3,%xmm1,%xmm2
   1d0ce:	0f 28 cb             	movaps %xmm3,%xmm1
   1d0d1:	0f 29 12             	movaps %xmm2,(%rdx)
   1d0d4:	48 8d 49 1d          	lea    0x1d(%rcx),%rcx
   1d0d8:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d0dc:	48 89 c8             	mov    %rcx,%rax
   1d0df:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1d0e3:	48 2b c1             	sub    %rcx,%rax
   1d0e6:	48 8d 49 f3          	lea    -0xd(%rcx),%rcx
   1d0ea:	48 2b d0             	sub    %rax,%rdx
   1d0ed:	4c 03 c0             	add    %rax,%r8
   1d0f0:	0f 28 49 fd          	movaps -0x3(%rcx),%xmm1
   1d0f4:	0f 28 51 0d          	movaps 0xd(%rcx),%xmm2
   1d0f8:	0f 28 59 1d          	movaps 0x1d(%rcx),%xmm3
   1d0fc:	0f 28 f3             	movaps %xmm3,%xmm6
   1d0ff:	0f 28 61 2d          	movaps 0x2d(%rcx),%xmm4
   1d103:	0f 28 fc             	movaps %xmm4,%xmm7
   1d106:	0f 28 69 3d          	movaps 0x3d(%rcx),%xmm5
   1d10a:	66 0f da f2          	pminub %xmm2,%xmm6
   1d10e:	66 0f da fd          	pminub %xmm5,%xmm7
   1d112:	66 0f da fe          	pminub %xmm6,%xmm7
   1d116:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1d11a:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1d11e:	0f 28 fd             	movaps %xmm5,%xmm7
   1d121:	66 0f 3a 0f ec 03    	palignr $0x3,%xmm4,%xmm5
   1d127:	48 85 c0             	test   %rax,%rax
   1d12a:	66 0f 3a 0f e3 03    	palignr $0x3,%xmm3,%xmm4
   1d130:	0f 85 d2 fe ff ff    	jne    1d008 <__intel_ssse3_strncpy+0x6d8>
   1d136:	49 83 e8 40          	sub    $0x40,%r8
   1d13a:	0f 86 cb 1e 00 00    	jbe    1f00b <__intel_ssse3_strncpy+0x26db>
   1d140:	66 0f 3a 0f da 03    	palignr $0x3,%xmm2,%xmm3
   1d146:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1d14a:	66 0f 3a 0f d1 03    	palignr $0x3,%xmm1,%xmm2
   1d150:	0f 28 cf             	movaps %xmm7,%xmm1
   1d153:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1d157:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1d15b:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1d15f:	0f 29 12             	movaps %xmm2,(%rdx)
   1d162:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1d166:	eb 8c                	jmp    1d0f4 <__intel_ssse3_strncpy+0x7c4>
   1d168:	0f 28 32             	movaps (%rdx),%xmm6
   1d16b:	66 0f 73 de 0d       	psrldq $0xd,%xmm6
   1d170:	48 c7 c6 0d 00 00 00 	mov    $0xd,%rsi
   1d177:	66 0f 3a 0f f1 03    	palignr $0x3,%xmm1,%xmm6
   1d17d:	0f 29 32             	movaps %xmm6,(%rdx)
   1d180:	e9 bb 12 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1d185:	0f 1f 40 00          	nopl   0x0(%rax)
   1d189:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1d190:	0f 28 49 fc          	movaps -0x4(%rcx),%xmm1
   1d194:	0f 28 51 0c          	movaps 0xc(%rcx),%xmm2
   1d198:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d19c:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d1a0:	0f 28 da             	movaps %xmm2,%xmm3
   1d1a3:	49 83 e8 10          	sub    $0x10,%r8
   1d1a7:	0f 86 9c 1b 00 00    	jbe    1ed49 <__intel_ssse3_strncpy+0x2419>
   1d1ad:	48 85 c0             	test   %rax,%rax
   1d1b0:	0f 85 42 01 00 00    	jne    1d2f8 <__intel_ssse3_strncpy+0x9c8>
   1d1b6:	66 0f 3a 0f d1 04    	palignr $0x4,%xmm1,%xmm2
   1d1bc:	0f 28 cb             	movaps %xmm3,%xmm1
   1d1bf:	0f 29 12             	movaps %xmm2,(%rdx)
   1d1c2:	0f 28 51 1c          	movaps 0x1c(%rcx),%xmm2
   1d1c6:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d1ca:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d1ce:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d1d2:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d1d6:	0f 28 da             	movaps %xmm2,%xmm3
   1d1d9:	49 83 e8 10          	sub    $0x10,%r8
   1d1dd:	0f 86 66 1b 00 00    	jbe    1ed49 <__intel_ssse3_strncpy+0x2419>
   1d1e3:	48 85 c0             	test   %rax,%rax
   1d1e6:	0f 85 0c 01 00 00    	jne    1d2f8 <__intel_ssse3_strncpy+0x9c8>
   1d1ec:	66 0f 3a 0f d1 04    	palignr $0x4,%xmm1,%xmm2
   1d1f2:	0f 29 12             	movaps %xmm2,(%rdx)
   1d1f5:	0f 28 51 1c          	movaps 0x1c(%rcx),%xmm2
   1d1f9:	0f 28 cb             	movaps %xmm3,%xmm1
   1d1fc:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d200:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d204:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d208:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d20c:	0f 28 da             	movaps %xmm2,%xmm3
   1d20f:	49 83 e8 10          	sub    $0x10,%r8
   1d213:	0f 86 30 1b 00 00    	jbe    1ed49 <__intel_ssse3_strncpy+0x2419>
   1d219:	48 85 c0             	test   %rax,%rax
   1d21c:	0f 85 d6 00 00 00    	jne    1d2f8 <__intel_ssse3_strncpy+0x9c8>
   1d222:	66 0f 3a 0f d1 04    	palignr $0x4,%xmm1,%xmm2
   1d228:	0f 28 cb             	movaps %xmm3,%xmm1
   1d22b:	0f 29 12             	movaps %xmm2,(%rdx)
   1d22e:	0f 28 51 1c          	movaps 0x1c(%rcx),%xmm2
   1d232:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d236:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d23a:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d23e:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d242:	0f 28 da             	movaps %xmm2,%xmm3
   1d245:	49 83 e8 10          	sub    $0x10,%r8
   1d249:	0f 86 fa 1a 00 00    	jbe    1ed49 <__intel_ssse3_strncpy+0x2419>
   1d24f:	48 85 c0             	test   %rax,%rax
   1d252:	0f 85 a0 00 00 00    	jne    1d2f8 <__intel_ssse3_strncpy+0x9c8>
   1d258:	66 0f 3a 0f d1 04    	palignr $0x4,%xmm1,%xmm2
   1d25e:	0f 28 cb             	movaps %xmm3,%xmm1
   1d261:	0f 29 12             	movaps %xmm2,(%rdx)
   1d264:	48 8d 49 1c          	lea    0x1c(%rcx),%rcx
   1d268:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d26c:	48 89 c8             	mov    %rcx,%rax
   1d26f:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1d273:	48 2b c1             	sub    %rcx,%rax
   1d276:	48 8d 49 f4          	lea    -0xc(%rcx),%rcx
   1d27a:	48 2b d0             	sub    %rax,%rdx
   1d27d:	4c 03 c0             	add    %rax,%r8
   1d280:	0f 28 49 fc          	movaps -0x4(%rcx),%xmm1
   1d284:	0f 28 51 0c          	movaps 0xc(%rcx),%xmm2
   1d288:	0f 28 59 1c          	movaps 0x1c(%rcx),%xmm3
   1d28c:	0f 28 f3             	movaps %xmm3,%xmm6
   1d28f:	0f 28 61 2c          	movaps 0x2c(%rcx),%xmm4
   1d293:	0f 28 fc             	movaps %xmm4,%xmm7
   1d296:	0f 28 69 3c          	movaps 0x3c(%rcx),%xmm5
   1d29a:	66 0f da f2          	pminub %xmm2,%xmm6
   1d29e:	66 0f da fd          	pminub %xmm5,%xmm7
   1d2a2:	66 0f da fe          	pminub %xmm6,%xmm7
   1d2a6:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1d2aa:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1d2ae:	0f 28 fd             	movaps %xmm5,%xmm7
   1d2b1:	66 0f 3a 0f ec 04    	palignr $0x4,%xmm4,%xmm5
   1d2b7:	48 85 c0             	test   %rax,%rax
   1d2ba:	66 0f 3a 0f e3 04    	palignr $0x4,%xmm3,%xmm4
   1d2c0:	0f 85 d2 fe ff ff    	jne    1d198 <__intel_ssse3_strncpy+0x868>
   1d2c6:	49 83 e8 40          	sub    $0x40,%r8
   1d2ca:	0f 86 b8 1d 00 00    	jbe    1f088 <__intel_ssse3_strncpy+0x2758>
   1d2d0:	66 0f 3a 0f da 04    	palignr $0x4,%xmm2,%xmm3
   1d2d6:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1d2da:	66 0f 3a 0f d1 04    	palignr $0x4,%xmm1,%xmm2
   1d2e0:	0f 28 cf             	movaps %xmm7,%xmm1
   1d2e3:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1d2e7:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1d2eb:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1d2ef:	0f 29 12             	movaps %xmm2,(%rdx)
   1d2f2:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1d2f6:	eb 8c                	jmp    1d284 <__intel_ssse3_strncpy+0x954>
   1d2f8:	0f 28 32             	movaps (%rdx),%xmm6
   1d2fb:	66 0f 73 de 0c       	psrldq $0xc,%xmm6
   1d300:	48 c7 c6 0c 00 00 00 	mov    $0xc,%rsi
   1d307:	66 0f 3a 0f f1 04    	palignr $0x4,%xmm1,%xmm6
   1d30d:	0f 29 32             	movaps %xmm6,(%rdx)
   1d310:	e9 2b 11 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1d315:	0f 1f 40 00          	nopl   0x0(%rax)
   1d319:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1d320:	0f 28 49 fb          	movaps -0x5(%rcx),%xmm1
   1d324:	0f 28 51 0b          	movaps 0xb(%rcx),%xmm2
   1d328:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d32c:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d330:	0f 28 da             	movaps %xmm2,%xmm3
   1d333:	49 83 e8 10          	sub    $0x10,%r8
   1d337:	0f 86 32 1a 00 00    	jbe    1ed6f <__intel_ssse3_strncpy+0x243f>
   1d33d:	48 85 c0             	test   %rax,%rax
   1d340:	0f 85 42 01 00 00    	jne    1d488 <__intel_ssse3_strncpy+0xb58>
   1d346:	66 0f 3a 0f d1 05    	palignr $0x5,%xmm1,%xmm2
   1d34c:	0f 28 cb             	movaps %xmm3,%xmm1
   1d34f:	0f 29 12             	movaps %xmm2,(%rdx)
   1d352:	0f 28 51 1b          	movaps 0x1b(%rcx),%xmm2
   1d356:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d35a:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d35e:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d362:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d366:	0f 28 da             	movaps %xmm2,%xmm3
   1d369:	49 83 e8 10          	sub    $0x10,%r8
   1d36d:	0f 86 fc 19 00 00    	jbe    1ed6f <__intel_ssse3_strncpy+0x243f>
   1d373:	48 85 c0             	test   %rax,%rax
   1d376:	0f 85 0c 01 00 00    	jne    1d488 <__intel_ssse3_strncpy+0xb58>
   1d37c:	66 0f 3a 0f d1 05    	palignr $0x5,%xmm1,%xmm2
   1d382:	0f 29 12             	movaps %xmm2,(%rdx)
   1d385:	0f 28 51 1b          	movaps 0x1b(%rcx),%xmm2
   1d389:	0f 28 cb             	movaps %xmm3,%xmm1
   1d38c:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d390:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d394:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d398:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d39c:	0f 28 da             	movaps %xmm2,%xmm3
   1d39f:	49 83 e8 10          	sub    $0x10,%r8
   1d3a3:	0f 86 c6 19 00 00    	jbe    1ed6f <__intel_ssse3_strncpy+0x243f>
   1d3a9:	48 85 c0             	test   %rax,%rax
   1d3ac:	0f 85 d6 00 00 00    	jne    1d488 <__intel_ssse3_strncpy+0xb58>
   1d3b2:	66 0f 3a 0f d1 05    	palignr $0x5,%xmm1,%xmm2
   1d3b8:	0f 28 cb             	movaps %xmm3,%xmm1
   1d3bb:	0f 29 12             	movaps %xmm2,(%rdx)
   1d3be:	0f 28 51 1b          	movaps 0x1b(%rcx),%xmm2
   1d3c2:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d3c6:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d3ca:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d3ce:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d3d2:	0f 28 da             	movaps %xmm2,%xmm3
   1d3d5:	49 83 e8 10          	sub    $0x10,%r8
   1d3d9:	0f 86 90 19 00 00    	jbe    1ed6f <__intel_ssse3_strncpy+0x243f>
   1d3df:	48 85 c0             	test   %rax,%rax
   1d3e2:	0f 85 a0 00 00 00    	jne    1d488 <__intel_ssse3_strncpy+0xb58>
   1d3e8:	66 0f 3a 0f d1 05    	palignr $0x5,%xmm1,%xmm2
   1d3ee:	0f 28 cb             	movaps %xmm3,%xmm1
   1d3f1:	0f 29 12             	movaps %xmm2,(%rdx)
   1d3f4:	48 8d 49 1b          	lea    0x1b(%rcx),%rcx
   1d3f8:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d3fc:	48 89 c8             	mov    %rcx,%rax
   1d3ff:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1d403:	48 2b c1             	sub    %rcx,%rax
   1d406:	48 8d 49 f5          	lea    -0xb(%rcx),%rcx
   1d40a:	48 2b d0             	sub    %rax,%rdx
   1d40d:	4c 03 c0             	add    %rax,%r8
   1d410:	0f 28 49 fb          	movaps -0x5(%rcx),%xmm1
   1d414:	0f 28 51 0b          	movaps 0xb(%rcx),%xmm2
   1d418:	0f 28 59 1b          	movaps 0x1b(%rcx),%xmm3
   1d41c:	0f 28 f3             	movaps %xmm3,%xmm6
   1d41f:	0f 28 61 2b          	movaps 0x2b(%rcx),%xmm4
   1d423:	0f 28 fc             	movaps %xmm4,%xmm7
   1d426:	0f 28 69 3b          	movaps 0x3b(%rcx),%xmm5
   1d42a:	66 0f da f2          	pminub %xmm2,%xmm6
   1d42e:	66 0f da fd          	pminub %xmm5,%xmm7
   1d432:	66 0f da fe          	pminub %xmm6,%xmm7
   1d436:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1d43a:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1d43e:	0f 28 fd             	movaps %xmm5,%xmm7
   1d441:	66 0f 3a 0f ec 05    	palignr $0x5,%xmm4,%xmm5
   1d447:	48 85 c0             	test   %rax,%rax
   1d44a:	66 0f 3a 0f e3 05    	palignr $0x5,%xmm3,%xmm4
   1d450:	0f 85 d2 fe ff ff    	jne    1d328 <__intel_ssse3_strncpy+0x9f8>
   1d456:	49 83 e8 40          	sub    $0x40,%r8
   1d45a:	0f 86 a5 1c 00 00    	jbe    1f105 <__intel_ssse3_strncpy+0x27d5>
   1d460:	66 0f 3a 0f da 05    	palignr $0x5,%xmm2,%xmm3
   1d466:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1d46a:	66 0f 3a 0f d1 05    	palignr $0x5,%xmm1,%xmm2
   1d470:	0f 28 cf             	movaps %xmm7,%xmm1
   1d473:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1d477:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1d47b:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1d47f:	0f 29 12             	movaps %xmm2,(%rdx)
   1d482:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1d486:	eb 8c                	jmp    1d414 <__intel_ssse3_strncpy+0xae4>
   1d488:	0f 28 32             	movaps (%rdx),%xmm6
   1d48b:	66 0f 73 de 0b       	psrldq $0xb,%xmm6
   1d490:	48 c7 c6 0b 00 00 00 	mov    $0xb,%rsi
   1d497:	66 0f 3a 0f f1 05    	palignr $0x5,%xmm1,%xmm6
   1d49d:	0f 29 32             	movaps %xmm6,(%rdx)
   1d4a0:	e9 9b 0f 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1d4a5:	0f 1f 40 00          	nopl   0x0(%rax)
   1d4a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1d4b0:	0f 28 49 fa          	movaps -0x6(%rcx),%xmm1
   1d4b4:	0f 28 51 0a          	movaps 0xa(%rcx),%xmm2
   1d4b8:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d4bc:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d4c0:	0f 28 da             	movaps %xmm2,%xmm3
   1d4c3:	49 83 e8 10          	sub    $0x10,%r8
   1d4c7:	0f 86 c8 18 00 00    	jbe    1ed95 <__intel_ssse3_strncpy+0x2465>
   1d4cd:	48 85 c0             	test   %rax,%rax
   1d4d0:	0f 85 42 01 00 00    	jne    1d618 <__intel_ssse3_strncpy+0xce8>
   1d4d6:	66 0f 3a 0f d1 06    	palignr $0x6,%xmm1,%xmm2
   1d4dc:	0f 28 cb             	movaps %xmm3,%xmm1
   1d4df:	0f 29 12             	movaps %xmm2,(%rdx)
   1d4e2:	0f 28 51 1a          	movaps 0x1a(%rcx),%xmm2
   1d4e6:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d4ea:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d4ee:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d4f2:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d4f6:	0f 28 da             	movaps %xmm2,%xmm3
   1d4f9:	49 83 e8 10          	sub    $0x10,%r8
   1d4fd:	0f 86 92 18 00 00    	jbe    1ed95 <__intel_ssse3_strncpy+0x2465>
   1d503:	48 85 c0             	test   %rax,%rax
   1d506:	0f 85 0c 01 00 00    	jne    1d618 <__intel_ssse3_strncpy+0xce8>
   1d50c:	66 0f 3a 0f d1 06    	palignr $0x6,%xmm1,%xmm2
   1d512:	0f 29 12             	movaps %xmm2,(%rdx)
   1d515:	0f 28 51 1a          	movaps 0x1a(%rcx),%xmm2
   1d519:	0f 28 cb             	movaps %xmm3,%xmm1
   1d51c:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d520:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d524:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d528:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d52c:	0f 28 da             	movaps %xmm2,%xmm3
   1d52f:	49 83 e8 10          	sub    $0x10,%r8
   1d533:	0f 86 5c 18 00 00    	jbe    1ed95 <__intel_ssse3_strncpy+0x2465>
   1d539:	48 85 c0             	test   %rax,%rax
   1d53c:	0f 85 d6 00 00 00    	jne    1d618 <__intel_ssse3_strncpy+0xce8>
   1d542:	66 0f 3a 0f d1 06    	palignr $0x6,%xmm1,%xmm2
   1d548:	0f 28 cb             	movaps %xmm3,%xmm1
   1d54b:	0f 29 12             	movaps %xmm2,(%rdx)
   1d54e:	0f 28 51 1a          	movaps 0x1a(%rcx),%xmm2
   1d552:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d556:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d55a:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d55e:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d562:	0f 28 da             	movaps %xmm2,%xmm3
   1d565:	49 83 e8 10          	sub    $0x10,%r8
   1d569:	0f 86 26 18 00 00    	jbe    1ed95 <__intel_ssse3_strncpy+0x2465>
   1d56f:	48 85 c0             	test   %rax,%rax
   1d572:	0f 85 a0 00 00 00    	jne    1d618 <__intel_ssse3_strncpy+0xce8>
   1d578:	66 0f 3a 0f d1 06    	palignr $0x6,%xmm1,%xmm2
   1d57e:	0f 28 cb             	movaps %xmm3,%xmm1
   1d581:	0f 29 12             	movaps %xmm2,(%rdx)
   1d584:	48 8d 49 1a          	lea    0x1a(%rcx),%rcx
   1d588:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d58c:	48 89 c8             	mov    %rcx,%rax
   1d58f:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1d593:	48 2b c1             	sub    %rcx,%rax
   1d596:	48 8d 49 f6          	lea    -0xa(%rcx),%rcx
   1d59a:	48 2b d0             	sub    %rax,%rdx
   1d59d:	4c 03 c0             	add    %rax,%r8
   1d5a0:	0f 28 49 fa          	movaps -0x6(%rcx),%xmm1
   1d5a4:	0f 28 51 0a          	movaps 0xa(%rcx),%xmm2
   1d5a8:	0f 28 59 1a          	movaps 0x1a(%rcx),%xmm3
   1d5ac:	0f 28 f3             	movaps %xmm3,%xmm6
   1d5af:	0f 28 61 2a          	movaps 0x2a(%rcx),%xmm4
   1d5b3:	0f 28 fc             	movaps %xmm4,%xmm7
   1d5b6:	0f 28 69 3a          	movaps 0x3a(%rcx),%xmm5
   1d5ba:	66 0f da f2          	pminub %xmm2,%xmm6
   1d5be:	66 0f da fd          	pminub %xmm5,%xmm7
   1d5c2:	66 0f da fe          	pminub %xmm6,%xmm7
   1d5c6:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1d5ca:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1d5ce:	0f 28 fd             	movaps %xmm5,%xmm7
   1d5d1:	66 0f 3a 0f ec 06    	palignr $0x6,%xmm4,%xmm5
   1d5d7:	48 85 c0             	test   %rax,%rax
   1d5da:	66 0f 3a 0f e3 06    	palignr $0x6,%xmm3,%xmm4
   1d5e0:	0f 85 d2 fe ff ff    	jne    1d4b8 <__intel_ssse3_strncpy+0xb88>
   1d5e6:	49 83 e8 40          	sub    $0x40,%r8
   1d5ea:	0f 86 92 1b 00 00    	jbe    1f182 <__intel_ssse3_strncpy+0x2852>
   1d5f0:	66 0f 3a 0f da 06    	palignr $0x6,%xmm2,%xmm3
   1d5f6:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1d5fa:	66 0f 3a 0f d1 06    	palignr $0x6,%xmm1,%xmm2
   1d600:	0f 28 cf             	movaps %xmm7,%xmm1
   1d603:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1d607:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1d60b:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1d60f:	0f 29 12             	movaps %xmm2,(%rdx)
   1d612:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1d616:	eb 8c                	jmp    1d5a4 <__intel_ssse3_strncpy+0xc74>
   1d618:	0f 28 32             	movaps (%rdx),%xmm6
   1d61b:	66 0f 73 de 0a       	psrldq $0xa,%xmm6
   1d620:	48 c7 c6 0a 00 00 00 	mov    $0xa,%rsi
   1d627:	66 0f 3a 0f f1 06    	palignr $0x6,%xmm1,%xmm6
   1d62d:	0f 29 32             	movaps %xmm6,(%rdx)
   1d630:	e9 0b 0e 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1d635:	0f 1f 40 00          	nopl   0x0(%rax)
   1d639:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1d640:	0f 28 49 f9          	movaps -0x7(%rcx),%xmm1
   1d644:	0f 28 51 09          	movaps 0x9(%rcx),%xmm2
   1d648:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d64c:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d650:	0f 28 da             	movaps %xmm2,%xmm3
   1d653:	49 83 e8 10          	sub    $0x10,%r8
   1d657:	0f 86 5e 17 00 00    	jbe    1edbb <__intel_ssse3_strncpy+0x248b>
   1d65d:	48 85 c0             	test   %rax,%rax
   1d660:	0f 85 42 01 00 00    	jne    1d7a8 <__intel_ssse3_strncpy+0xe78>
   1d666:	66 0f 3a 0f d1 07    	palignr $0x7,%xmm1,%xmm2
   1d66c:	0f 28 cb             	movaps %xmm3,%xmm1
   1d66f:	0f 29 12             	movaps %xmm2,(%rdx)
   1d672:	0f 28 51 19          	movaps 0x19(%rcx),%xmm2
   1d676:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d67a:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d67e:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d682:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d686:	0f 28 da             	movaps %xmm2,%xmm3
   1d689:	49 83 e8 10          	sub    $0x10,%r8
   1d68d:	0f 86 28 17 00 00    	jbe    1edbb <__intel_ssse3_strncpy+0x248b>
   1d693:	48 85 c0             	test   %rax,%rax
   1d696:	0f 85 0c 01 00 00    	jne    1d7a8 <__intel_ssse3_strncpy+0xe78>
   1d69c:	66 0f 3a 0f d1 07    	palignr $0x7,%xmm1,%xmm2
   1d6a2:	0f 29 12             	movaps %xmm2,(%rdx)
   1d6a5:	0f 28 51 19          	movaps 0x19(%rcx),%xmm2
   1d6a9:	0f 28 cb             	movaps %xmm3,%xmm1
   1d6ac:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d6b0:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d6b4:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d6b8:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d6bc:	0f 28 da             	movaps %xmm2,%xmm3
   1d6bf:	49 83 e8 10          	sub    $0x10,%r8
   1d6c3:	0f 86 f2 16 00 00    	jbe    1edbb <__intel_ssse3_strncpy+0x248b>
   1d6c9:	48 85 c0             	test   %rax,%rax
   1d6cc:	0f 85 d6 00 00 00    	jne    1d7a8 <__intel_ssse3_strncpy+0xe78>
   1d6d2:	66 0f 3a 0f d1 07    	palignr $0x7,%xmm1,%xmm2
   1d6d8:	0f 28 cb             	movaps %xmm3,%xmm1
   1d6db:	0f 29 12             	movaps %xmm2,(%rdx)
   1d6de:	0f 28 51 19          	movaps 0x19(%rcx),%xmm2
   1d6e2:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d6e6:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d6ea:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d6ee:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d6f2:	0f 28 da             	movaps %xmm2,%xmm3
   1d6f5:	49 83 e8 10          	sub    $0x10,%r8
   1d6f9:	0f 86 bc 16 00 00    	jbe    1edbb <__intel_ssse3_strncpy+0x248b>
   1d6ff:	48 85 c0             	test   %rax,%rax
   1d702:	0f 85 a0 00 00 00    	jne    1d7a8 <__intel_ssse3_strncpy+0xe78>
   1d708:	66 0f 3a 0f d1 07    	palignr $0x7,%xmm1,%xmm2
   1d70e:	0f 28 cb             	movaps %xmm3,%xmm1
   1d711:	0f 29 12             	movaps %xmm2,(%rdx)
   1d714:	48 8d 49 19          	lea    0x19(%rcx),%rcx
   1d718:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d71c:	48 89 c8             	mov    %rcx,%rax
   1d71f:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1d723:	48 2b c1             	sub    %rcx,%rax
   1d726:	48 8d 49 f7          	lea    -0x9(%rcx),%rcx
   1d72a:	48 2b d0             	sub    %rax,%rdx
   1d72d:	4c 03 c0             	add    %rax,%r8
   1d730:	0f 28 49 f9          	movaps -0x7(%rcx),%xmm1
   1d734:	0f 28 51 09          	movaps 0x9(%rcx),%xmm2
   1d738:	0f 28 59 19          	movaps 0x19(%rcx),%xmm3
   1d73c:	0f 28 f3             	movaps %xmm3,%xmm6
   1d73f:	0f 28 61 29          	movaps 0x29(%rcx),%xmm4
   1d743:	0f 28 fc             	movaps %xmm4,%xmm7
   1d746:	0f 28 69 39          	movaps 0x39(%rcx),%xmm5
   1d74a:	66 0f da f2          	pminub %xmm2,%xmm6
   1d74e:	66 0f da fd          	pminub %xmm5,%xmm7
   1d752:	66 0f da fe          	pminub %xmm6,%xmm7
   1d756:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1d75a:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1d75e:	0f 28 fd             	movaps %xmm5,%xmm7
   1d761:	66 0f 3a 0f ec 07    	palignr $0x7,%xmm4,%xmm5
   1d767:	48 85 c0             	test   %rax,%rax
   1d76a:	66 0f 3a 0f e3 07    	palignr $0x7,%xmm3,%xmm4
   1d770:	0f 85 d2 fe ff ff    	jne    1d648 <__intel_ssse3_strncpy+0xd18>
   1d776:	49 83 e8 40          	sub    $0x40,%r8
   1d77a:	0f 86 7f 1a 00 00    	jbe    1f1ff <__intel_ssse3_strncpy+0x28cf>
   1d780:	66 0f 3a 0f da 07    	palignr $0x7,%xmm2,%xmm3
   1d786:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1d78a:	66 0f 3a 0f d1 07    	palignr $0x7,%xmm1,%xmm2
   1d790:	0f 28 cf             	movaps %xmm7,%xmm1
   1d793:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1d797:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1d79b:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1d79f:	0f 29 12             	movaps %xmm2,(%rdx)
   1d7a2:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1d7a6:	eb 8c                	jmp    1d734 <__intel_ssse3_strncpy+0xe04>
   1d7a8:	0f 28 32             	movaps (%rdx),%xmm6
   1d7ab:	66 0f 73 de 09       	psrldq $0x9,%xmm6
   1d7b0:	48 c7 c6 09 00 00 00 	mov    $0x9,%rsi
   1d7b7:	66 0f 3a 0f f1 07    	palignr $0x7,%xmm1,%xmm6
   1d7bd:	0f 29 32             	movaps %xmm6,(%rdx)
   1d7c0:	e9 7b 0c 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1d7c5:	0f 1f 40 00          	nopl   0x0(%rax)
   1d7c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1d7d0:	0f 28 49 f8          	movaps -0x8(%rcx),%xmm1
   1d7d4:	0f 28 51 08          	movaps 0x8(%rcx),%xmm2
   1d7d8:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d7dc:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d7e0:	0f 28 da             	movaps %xmm2,%xmm3
   1d7e3:	49 83 e8 10          	sub    $0x10,%r8
   1d7e7:	0f 86 f4 15 00 00    	jbe    1ede1 <__intel_ssse3_strncpy+0x24b1>
   1d7ed:	48 85 c0             	test   %rax,%rax
   1d7f0:	0f 85 42 01 00 00    	jne    1d938 <__intel_ssse3_strncpy+0x1008>
   1d7f6:	66 0f 3a 0f d1 08    	palignr $0x8,%xmm1,%xmm2
   1d7fc:	0f 28 cb             	movaps %xmm3,%xmm1
   1d7ff:	0f 29 12             	movaps %xmm2,(%rdx)
   1d802:	0f 28 51 18          	movaps 0x18(%rcx),%xmm2
   1d806:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d80a:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d80e:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d812:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d816:	0f 28 da             	movaps %xmm2,%xmm3
   1d819:	49 83 e8 10          	sub    $0x10,%r8
   1d81d:	0f 86 be 15 00 00    	jbe    1ede1 <__intel_ssse3_strncpy+0x24b1>
   1d823:	48 85 c0             	test   %rax,%rax
   1d826:	0f 85 0c 01 00 00    	jne    1d938 <__intel_ssse3_strncpy+0x1008>
   1d82c:	66 0f 3a 0f d1 08    	palignr $0x8,%xmm1,%xmm2
   1d832:	0f 29 12             	movaps %xmm2,(%rdx)
   1d835:	0f 28 51 18          	movaps 0x18(%rcx),%xmm2
   1d839:	0f 28 cb             	movaps %xmm3,%xmm1
   1d83c:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d840:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d844:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d848:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d84c:	0f 28 da             	movaps %xmm2,%xmm3
   1d84f:	49 83 e8 10          	sub    $0x10,%r8
   1d853:	0f 86 88 15 00 00    	jbe    1ede1 <__intel_ssse3_strncpy+0x24b1>
   1d859:	48 85 c0             	test   %rax,%rax
   1d85c:	0f 85 d6 00 00 00    	jne    1d938 <__intel_ssse3_strncpy+0x1008>
   1d862:	66 0f 3a 0f d1 08    	palignr $0x8,%xmm1,%xmm2
   1d868:	0f 28 cb             	movaps %xmm3,%xmm1
   1d86b:	0f 29 12             	movaps %xmm2,(%rdx)
   1d86e:	0f 28 51 18          	movaps 0x18(%rcx),%xmm2
   1d872:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d876:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d87a:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d87e:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d882:	0f 28 da             	movaps %xmm2,%xmm3
   1d885:	49 83 e8 10          	sub    $0x10,%r8
   1d889:	0f 86 52 15 00 00    	jbe    1ede1 <__intel_ssse3_strncpy+0x24b1>
   1d88f:	48 85 c0             	test   %rax,%rax
   1d892:	0f 85 a0 00 00 00    	jne    1d938 <__intel_ssse3_strncpy+0x1008>
   1d898:	66 0f 3a 0f d1 08    	palignr $0x8,%xmm1,%xmm2
   1d89e:	0f 28 cb             	movaps %xmm3,%xmm1
   1d8a1:	0f 29 12             	movaps %xmm2,(%rdx)
   1d8a4:	48 8d 49 18          	lea    0x18(%rcx),%rcx
   1d8a8:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d8ac:	48 89 c8             	mov    %rcx,%rax
   1d8af:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1d8b3:	48 2b c1             	sub    %rcx,%rax
   1d8b6:	48 8d 49 f8          	lea    -0x8(%rcx),%rcx
   1d8ba:	48 2b d0             	sub    %rax,%rdx
   1d8bd:	4c 03 c0             	add    %rax,%r8
   1d8c0:	0f 28 49 f8          	movaps -0x8(%rcx),%xmm1
   1d8c4:	0f 28 51 08          	movaps 0x8(%rcx),%xmm2
   1d8c8:	0f 28 59 18          	movaps 0x18(%rcx),%xmm3
   1d8cc:	0f 28 f3             	movaps %xmm3,%xmm6
   1d8cf:	0f 28 61 28          	movaps 0x28(%rcx),%xmm4
   1d8d3:	0f 28 fc             	movaps %xmm4,%xmm7
   1d8d6:	0f 28 69 38          	movaps 0x38(%rcx),%xmm5
   1d8da:	66 0f da f2          	pminub %xmm2,%xmm6
   1d8de:	66 0f da fd          	pminub %xmm5,%xmm7
   1d8e2:	66 0f da fe          	pminub %xmm6,%xmm7
   1d8e6:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1d8ea:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1d8ee:	0f 28 fd             	movaps %xmm5,%xmm7
   1d8f1:	66 0f 3a 0f ec 08    	palignr $0x8,%xmm4,%xmm5
   1d8f7:	48 85 c0             	test   %rax,%rax
   1d8fa:	66 0f 3a 0f e3 08    	palignr $0x8,%xmm3,%xmm4
   1d900:	0f 85 d2 fe ff ff    	jne    1d7d8 <__intel_ssse3_strncpy+0xea8>
   1d906:	49 83 e8 40          	sub    $0x40,%r8
   1d90a:	0f 86 6c 19 00 00    	jbe    1f27c <__intel_ssse3_strncpy+0x294c>
   1d910:	66 0f 3a 0f da 08    	palignr $0x8,%xmm2,%xmm3
   1d916:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1d91a:	66 0f 3a 0f d1 08    	palignr $0x8,%xmm1,%xmm2
   1d920:	0f 28 cf             	movaps %xmm7,%xmm1
   1d923:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1d927:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1d92b:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1d92f:	0f 29 12             	movaps %xmm2,(%rdx)
   1d932:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1d936:	eb 8c                	jmp    1d8c4 <__intel_ssse3_strncpy+0xf94>
   1d938:	0f 28 32             	movaps (%rdx),%xmm6
   1d93b:	66 0f 73 de 08       	psrldq $0x8,%xmm6
   1d940:	48 c7 c6 08 00 00 00 	mov    $0x8,%rsi
   1d947:	66 0f 3a 0f f1 08    	palignr $0x8,%xmm1,%xmm6
   1d94d:	0f 29 32             	movaps %xmm6,(%rdx)
   1d950:	e9 eb 0a 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1d955:	0f 1f 40 00          	nopl   0x0(%rax)
   1d959:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1d960:	0f 28 49 f7          	movaps -0x9(%rcx),%xmm1
   1d964:	0f 28 51 07          	movaps 0x7(%rcx),%xmm2
   1d968:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d96c:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d970:	0f 28 da             	movaps %xmm2,%xmm3
   1d973:	49 83 e8 10          	sub    $0x10,%r8
   1d977:	0f 86 8a 14 00 00    	jbe    1ee07 <__intel_ssse3_strncpy+0x24d7>
   1d97d:	48 85 c0             	test   %rax,%rax
   1d980:	0f 85 42 01 00 00    	jne    1dac8 <__intel_ssse3_strncpy+0x1198>
   1d986:	66 0f 3a 0f d1 09    	palignr $0x9,%xmm1,%xmm2
   1d98c:	0f 28 cb             	movaps %xmm3,%xmm1
   1d98f:	0f 29 12             	movaps %xmm2,(%rdx)
   1d992:	0f 28 51 17          	movaps 0x17(%rcx),%xmm2
   1d996:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d99a:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d99e:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d9a2:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d9a6:	0f 28 da             	movaps %xmm2,%xmm3
   1d9a9:	49 83 e8 10          	sub    $0x10,%r8
   1d9ad:	0f 86 54 14 00 00    	jbe    1ee07 <__intel_ssse3_strncpy+0x24d7>
   1d9b3:	48 85 c0             	test   %rax,%rax
   1d9b6:	0f 85 0c 01 00 00    	jne    1dac8 <__intel_ssse3_strncpy+0x1198>
   1d9bc:	66 0f 3a 0f d1 09    	palignr $0x9,%xmm1,%xmm2
   1d9c2:	0f 29 12             	movaps %xmm2,(%rdx)
   1d9c5:	0f 28 51 17          	movaps 0x17(%rcx),%xmm2
   1d9c9:	0f 28 cb             	movaps %xmm3,%xmm1
   1d9cc:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1d9d0:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1d9d4:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1d9d8:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1d9dc:	0f 28 da             	movaps %xmm2,%xmm3
   1d9df:	49 83 e8 10          	sub    $0x10,%r8
   1d9e3:	0f 86 1e 14 00 00    	jbe    1ee07 <__intel_ssse3_strncpy+0x24d7>
   1d9e9:	48 85 c0             	test   %rax,%rax
   1d9ec:	0f 85 d6 00 00 00    	jne    1dac8 <__intel_ssse3_strncpy+0x1198>
   1d9f2:	66 0f 3a 0f d1 09    	palignr $0x9,%xmm1,%xmm2
   1d9f8:	0f 28 cb             	movaps %xmm3,%xmm1
   1d9fb:	0f 29 12             	movaps %xmm2,(%rdx)
   1d9fe:	0f 28 51 17          	movaps 0x17(%rcx),%xmm2
   1da02:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1da06:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1da0a:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1da0e:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1da12:	0f 28 da             	movaps %xmm2,%xmm3
   1da15:	49 83 e8 10          	sub    $0x10,%r8
   1da19:	0f 86 e8 13 00 00    	jbe    1ee07 <__intel_ssse3_strncpy+0x24d7>
   1da1f:	48 85 c0             	test   %rax,%rax
   1da22:	0f 85 a0 00 00 00    	jne    1dac8 <__intel_ssse3_strncpy+0x1198>
   1da28:	66 0f 3a 0f d1 09    	palignr $0x9,%xmm1,%xmm2
   1da2e:	0f 28 cb             	movaps %xmm3,%xmm1
   1da31:	0f 29 12             	movaps %xmm2,(%rdx)
   1da34:	48 8d 49 17          	lea    0x17(%rcx),%rcx
   1da38:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1da3c:	48 89 c8             	mov    %rcx,%rax
   1da3f:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1da43:	48 2b c1             	sub    %rcx,%rax
   1da46:	48 8d 49 f9          	lea    -0x7(%rcx),%rcx
   1da4a:	48 2b d0             	sub    %rax,%rdx
   1da4d:	4c 03 c0             	add    %rax,%r8
   1da50:	0f 28 49 f7          	movaps -0x9(%rcx),%xmm1
   1da54:	0f 28 51 07          	movaps 0x7(%rcx),%xmm2
   1da58:	0f 28 59 17          	movaps 0x17(%rcx),%xmm3
   1da5c:	0f 28 f3             	movaps %xmm3,%xmm6
   1da5f:	0f 28 61 27          	movaps 0x27(%rcx),%xmm4
   1da63:	0f 28 fc             	movaps %xmm4,%xmm7
   1da66:	0f 28 69 37          	movaps 0x37(%rcx),%xmm5
   1da6a:	66 0f da f2          	pminub %xmm2,%xmm6
   1da6e:	66 0f da fd          	pminub %xmm5,%xmm7
   1da72:	66 0f da fe          	pminub %xmm6,%xmm7
   1da76:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1da7a:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1da7e:	0f 28 fd             	movaps %xmm5,%xmm7
   1da81:	66 0f 3a 0f ec 09    	palignr $0x9,%xmm4,%xmm5
   1da87:	48 85 c0             	test   %rax,%rax
   1da8a:	66 0f 3a 0f e3 09    	palignr $0x9,%xmm3,%xmm4
   1da90:	0f 85 d2 fe ff ff    	jne    1d968 <__intel_ssse3_strncpy+0x1038>
   1da96:	49 83 e8 40          	sub    $0x40,%r8
   1da9a:	0f 86 59 18 00 00    	jbe    1f2f9 <__intel_ssse3_strncpy+0x29c9>
   1daa0:	66 0f 3a 0f da 09    	palignr $0x9,%xmm2,%xmm3
   1daa6:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1daaa:	66 0f 3a 0f d1 09    	palignr $0x9,%xmm1,%xmm2
   1dab0:	0f 28 cf             	movaps %xmm7,%xmm1
   1dab3:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1dab7:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1dabb:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1dabf:	0f 29 12             	movaps %xmm2,(%rdx)
   1dac2:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1dac6:	eb 8c                	jmp    1da54 <__intel_ssse3_strncpy+0x1124>
   1dac8:	0f 28 32             	movaps (%rdx),%xmm6
   1dacb:	66 0f 73 de 07       	psrldq $0x7,%xmm6
   1dad0:	48 c7 c6 07 00 00 00 	mov    $0x7,%rsi
   1dad7:	66 0f 3a 0f f1 09    	palignr $0x9,%xmm1,%xmm6
   1dadd:	0f 29 32             	movaps %xmm6,(%rdx)
   1dae0:	e9 5b 09 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1dae5:	0f 1f 40 00          	nopl   0x0(%rax)
   1dae9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1daf0:	0f 28 49 f6          	movaps -0xa(%rcx),%xmm1
   1daf4:	0f 28 51 06          	movaps 0x6(%rcx),%xmm2
   1daf8:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1dafc:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1db00:	0f 28 da             	movaps %xmm2,%xmm3
   1db03:	49 83 e8 10          	sub    $0x10,%r8
   1db07:	0f 86 20 13 00 00    	jbe    1ee2d <__intel_ssse3_strncpy+0x24fd>
   1db0d:	48 85 c0             	test   %rax,%rax
   1db10:	0f 85 42 01 00 00    	jne    1dc58 <__intel_ssse3_strncpy+0x1328>
   1db16:	66 0f 3a 0f d1 0a    	palignr $0xa,%xmm1,%xmm2
   1db1c:	0f 28 cb             	movaps %xmm3,%xmm1
   1db1f:	0f 29 12             	movaps %xmm2,(%rdx)
   1db22:	0f 28 51 16          	movaps 0x16(%rcx),%xmm2
   1db26:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1db2a:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1db2e:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1db32:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1db36:	0f 28 da             	movaps %xmm2,%xmm3
   1db39:	49 83 e8 10          	sub    $0x10,%r8
   1db3d:	0f 86 ea 12 00 00    	jbe    1ee2d <__intel_ssse3_strncpy+0x24fd>
   1db43:	48 85 c0             	test   %rax,%rax
   1db46:	0f 85 0c 01 00 00    	jne    1dc58 <__intel_ssse3_strncpy+0x1328>
   1db4c:	66 0f 3a 0f d1 0a    	palignr $0xa,%xmm1,%xmm2
   1db52:	0f 29 12             	movaps %xmm2,(%rdx)
   1db55:	0f 28 51 16          	movaps 0x16(%rcx),%xmm2
   1db59:	0f 28 cb             	movaps %xmm3,%xmm1
   1db5c:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1db60:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1db64:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1db68:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1db6c:	0f 28 da             	movaps %xmm2,%xmm3
   1db6f:	49 83 e8 10          	sub    $0x10,%r8
   1db73:	0f 86 b4 12 00 00    	jbe    1ee2d <__intel_ssse3_strncpy+0x24fd>
   1db79:	48 85 c0             	test   %rax,%rax
   1db7c:	0f 85 d6 00 00 00    	jne    1dc58 <__intel_ssse3_strncpy+0x1328>
   1db82:	66 0f 3a 0f d1 0a    	palignr $0xa,%xmm1,%xmm2
   1db88:	0f 28 cb             	movaps %xmm3,%xmm1
   1db8b:	0f 29 12             	movaps %xmm2,(%rdx)
   1db8e:	0f 28 51 16          	movaps 0x16(%rcx),%xmm2
   1db92:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1db96:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1db9a:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1db9e:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1dba2:	0f 28 da             	movaps %xmm2,%xmm3
   1dba5:	49 83 e8 10          	sub    $0x10,%r8
   1dba9:	0f 86 7e 12 00 00    	jbe    1ee2d <__intel_ssse3_strncpy+0x24fd>
   1dbaf:	48 85 c0             	test   %rax,%rax
   1dbb2:	0f 85 a0 00 00 00    	jne    1dc58 <__intel_ssse3_strncpy+0x1328>
   1dbb8:	66 0f 3a 0f d1 0a    	palignr $0xa,%xmm1,%xmm2
   1dbbe:	0f 28 cb             	movaps %xmm3,%xmm1
   1dbc1:	0f 29 12             	movaps %xmm2,(%rdx)
   1dbc4:	48 8d 49 16          	lea    0x16(%rcx),%rcx
   1dbc8:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1dbcc:	48 89 c8             	mov    %rcx,%rax
   1dbcf:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1dbd3:	48 2b c1             	sub    %rcx,%rax
   1dbd6:	48 8d 49 fa          	lea    -0x6(%rcx),%rcx
   1dbda:	48 2b d0             	sub    %rax,%rdx
   1dbdd:	4c 03 c0             	add    %rax,%r8
   1dbe0:	0f 28 49 f6          	movaps -0xa(%rcx),%xmm1
   1dbe4:	0f 28 51 06          	movaps 0x6(%rcx),%xmm2
   1dbe8:	0f 28 59 16          	movaps 0x16(%rcx),%xmm3
   1dbec:	0f 28 f3             	movaps %xmm3,%xmm6
   1dbef:	0f 28 61 26          	movaps 0x26(%rcx),%xmm4
   1dbf3:	0f 28 fc             	movaps %xmm4,%xmm7
   1dbf6:	0f 28 69 36          	movaps 0x36(%rcx),%xmm5
   1dbfa:	66 0f da f2          	pminub %xmm2,%xmm6
   1dbfe:	66 0f da fd          	pminub %xmm5,%xmm7
   1dc02:	66 0f da fe          	pminub %xmm6,%xmm7
   1dc06:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1dc0a:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1dc0e:	0f 28 fd             	movaps %xmm5,%xmm7
   1dc11:	66 0f 3a 0f ec 0a    	palignr $0xa,%xmm4,%xmm5
   1dc17:	48 85 c0             	test   %rax,%rax
   1dc1a:	66 0f 3a 0f e3 0a    	palignr $0xa,%xmm3,%xmm4
   1dc20:	0f 85 d2 fe ff ff    	jne    1daf8 <__intel_ssse3_strncpy+0x11c8>
   1dc26:	49 83 e8 40          	sub    $0x40,%r8
   1dc2a:	0f 86 46 17 00 00    	jbe    1f376 <__intel_ssse3_strncpy+0x2a46>
   1dc30:	66 0f 3a 0f da 0a    	palignr $0xa,%xmm2,%xmm3
   1dc36:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1dc3a:	66 0f 3a 0f d1 0a    	palignr $0xa,%xmm1,%xmm2
   1dc40:	0f 28 cf             	movaps %xmm7,%xmm1
   1dc43:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1dc47:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1dc4b:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1dc4f:	0f 29 12             	movaps %xmm2,(%rdx)
   1dc52:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1dc56:	eb 8c                	jmp    1dbe4 <__intel_ssse3_strncpy+0x12b4>
   1dc58:	0f 28 32             	movaps (%rdx),%xmm6
   1dc5b:	66 0f 73 de 06       	psrldq $0x6,%xmm6
   1dc60:	48 c7 c6 06 00 00 00 	mov    $0x6,%rsi
   1dc67:	66 0f 3a 0f f1 0a    	palignr $0xa,%xmm1,%xmm6
   1dc6d:	0f 29 32             	movaps %xmm6,(%rdx)
   1dc70:	e9 cb 07 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1dc75:	0f 1f 40 00          	nopl   0x0(%rax)
   1dc79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1dc80:	0f 28 49 f5          	movaps -0xb(%rcx),%xmm1
   1dc84:	0f 28 51 05          	movaps 0x5(%rcx),%xmm2
   1dc88:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1dc8c:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1dc90:	0f 28 da             	movaps %xmm2,%xmm3
   1dc93:	49 83 e8 10          	sub    $0x10,%r8
   1dc97:	0f 86 b6 11 00 00    	jbe    1ee53 <__intel_ssse3_strncpy+0x2523>
   1dc9d:	48 85 c0             	test   %rax,%rax
   1dca0:	0f 85 42 01 00 00    	jne    1dde8 <__intel_ssse3_strncpy+0x14b8>
   1dca6:	66 0f 3a 0f d1 0b    	palignr $0xb,%xmm1,%xmm2
   1dcac:	0f 28 cb             	movaps %xmm3,%xmm1
   1dcaf:	0f 29 12             	movaps %xmm2,(%rdx)
   1dcb2:	0f 28 51 15          	movaps 0x15(%rcx),%xmm2
   1dcb6:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1dcba:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1dcbe:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1dcc2:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1dcc6:	0f 28 da             	movaps %xmm2,%xmm3
   1dcc9:	49 83 e8 10          	sub    $0x10,%r8
   1dccd:	0f 86 80 11 00 00    	jbe    1ee53 <__intel_ssse3_strncpy+0x2523>
   1dcd3:	48 85 c0             	test   %rax,%rax
   1dcd6:	0f 85 0c 01 00 00    	jne    1dde8 <__intel_ssse3_strncpy+0x14b8>
   1dcdc:	66 0f 3a 0f d1 0b    	palignr $0xb,%xmm1,%xmm2
   1dce2:	0f 29 12             	movaps %xmm2,(%rdx)
   1dce5:	0f 28 51 15          	movaps 0x15(%rcx),%xmm2
   1dce9:	0f 28 cb             	movaps %xmm3,%xmm1
   1dcec:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1dcf0:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1dcf4:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1dcf8:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1dcfc:	0f 28 da             	movaps %xmm2,%xmm3
   1dcff:	49 83 e8 10          	sub    $0x10,%r8
   1dd03:	0f 86 4a 11 00 00    	jbe    1ee53 <__intel_ssse3_strncpy+0x2523>
   1dd09:	48 85 c0             	test   %rax,%rax
   1dd0c:	0f 85 d6 00 00 00    	jne    1dde8 <__intel_ssse3_strncpy+0x14b8>
   1dd12:	66 0f 3a 0f d1 0b    	palignr $0xb,%xmm1,%xmm2
   1dd18:	0f 28 cb             	movaps %xmm3,%xmm1
   1dd1b:	0f 29 12             	movaps %xmm2,(%rdx)
   1dd1e:	0f 28 51 15          	movaps 0x15(%rcx),%xmm2
   1dd22:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1dd26:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1dd2a:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1dd2e:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1dd32:	0f 28 da             	movaps %xmm2,%xmm3
   1dd35:	49 83 e8 10          	sub    $0x10,%r8
   1dd39:	0f 86 14 11 00 00    	jbe    1ee53 <__intel_ssse3_strncpy+0x2523>
   1dd3f:	48 85 c0             	test   %rax,%rax
   1dd42:	0f 85 a0 00 00 00    	jne    1dde8 <__intel_ssse3_strncpy+0x14b8>
   1dd48:	66 0f 3a 0f d1 0b    	palignr $0xb,%xmm1,%xmm2
   1dd4e:	0f 28 cb             	movaps %xmm3,%xmm1
   1dd51:	0f 29 12             	movaps %xmm2,(%rdx)
   1dd54:	48 8d 49 15          	lea    0x15(%rcx),%rcx
   1dd58:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1dd5c:	48 89 c8             	mov    %rcx,%rax
   1dd5f:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1dd63:	48 2b c1             	sub    %rcx,%rax
   1dd66:	48 8d 49 fb          	lea    -0x5(%rcx),%rcx
   1dd6a:	48 2b d0             	sub    %rax,%rdx
   1dd6d:	4c 03 c0             	add    %rax,%r8
   1dd70:	0f 28 49 f5          	movaps -0xb(%rcx),%xmm1
   1dd74:	0f 28 51 05          	movaps 0x5(%rcx),%xmm2
   1dd78:	0f 28 59 15          	movaps 0x15(%rcx),%xmm3
   1dd7c:	0f 28 f3             	movaps %xmm3,%xmm6
   1dd7f:	0f 28 61 25          	movaps 0x25(%rcx),%xmm4
   1dd83:	0f 28 fc             	movaps %xmm4,%xmm7
   1dd86:	0f 28 69 35          	movaps 0x35(%rcx),%xmm5
   1dd8a:	66 0f da f2          	pminub %xmm2,%xmm6
   1dd8e:	66 0f da fd          	pminub %xmm5,%xmm7
   1dd92:	66 0f da fe          	pminub %xmm6,%xmm7
   1dd96:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1dd9a:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1dd9e:	0f 28 fd             	movaps %xmm5,%xmm7
   1dda1:	66 0f 3a 0f ec 0b    	palignr $0xb,%xmm4,%xmm5
   1dda7:	48 85 c0             	test   %rax,%rax
   1ddaa:	66 0f 3a 0f e3 0b    	palignr $0xb,%xmm3,%xmm4
   1ddb0:	0f 85 d2 fe ff ff    	jne    1dc88 <__intel_ssse3_strncpy+0x1358>
   1ddb6:	49 83 e8 40          	sub    $0x40,%r8
   1ddba:	0f 86 33 16 00 00    	jbe    1f3f3 <__intel_ssse3_strncpy+0x2ac3>
   1ddc0:	66 0f 3a 0f da 0b    	palignr $0xb,%xmm2,%xmm3
   1ddc6:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1ddca:	66 0f 3a 0f d1 0b    	palignr $0xb,%xmm1,%xmm2
   1ddd0:	0f 28 cf             	movaps %xmm7,%xmm1
   1ddd3:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1ddd7:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1dddb:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1dddf:	0f 29 12             	movaps %xmm2,(%rdx)
   1dde2:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1dde6:	eb 8c                	jmp    1dd74 <__intel_ssse3_strncpy+0x1444>
   1dde8:	0f 28 32             	movaps (%rdx),%xmm6
   1ddeb:	66 0f 73 de 05       	psrldq $0x5,%xmm6
   1ddf0:	48 c7 c6 05 00 00 00 	mov    $0x5,%rsi
   1ddf7:	66 0f 3a 0f f1 0b    	palignr $0xb,%xmm1,%xmm6
   1ddfd:	0f 29 32             	movaps %xmm6,(%rdx)
   1de00:	e9 3b 06 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1de05:	0f 1f 40 00          	nopl   0x0(%rax)
   1de09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1de10:	0f 28 49 f4          	movaps -0xc(%rcx),%xmm1
   1de14:	0f 28 51 04          	movaps 0x4(%rcx),%xmm2
   1de18:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1de1c:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1de20:	0f 28 da             	movaps %xmm2,%xmm3
   1de23:	49 83 e8 10          	sub    $0x10,%r8
   1de27:	0f 86 4c 10 00 00    	jbe    1ee79 <__intel_ssse3_strncpy+0x2549>
   1de2d:	48 85 c0             	test   %rax,%rax
   1de30:	0f 85 42 01 00 00    	jne    1df78 <__intel_ssse3_strncpy+0x1648>
   1de36:	66 0f 3a 0f d1 0c    	palignr $0xc,%xmm1,%xmm2
   1de3c:	0f 28 cb             	movaps %xmm3,%xmm1
   1de3f:	0f 29 12             	movaps %xmm2,(%rdx)
   1de42:	0f 28 51 14          	movaps 0x14(%rcx),%xmm2
   1de46:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1de4a:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1de4e:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1de52:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1de56:	0f 28 da             	movaps %xmm2,%xmm3
   1de59:	49 83 e8 10          	sub    $0x10,%r8
   1de5d:	0f 86 16 10 00 00    	jbe    1ee79 <__intel_ssse3_strncpy+0x2549>
   1de63:	48 85 c0             	test   %rax,%rax
   1de66:	0f 85 0c 01 00 00    	jne    1df78 <__intel_ssse3_strncpy+0x1648>
   1de6c:	66 0f 3a 0f d1 0c    	palignr $0xc,%xmm1,%xmm2
   1de72:	0f 29 12             	movaps %xmm2,(%rdx)
   1de75:	0f 28 51 14          	movaps 0x14(%rcx),%xmm2
   1de79:	0f 28 cb             	movaps %xmm3,%xmm1
   1de7c:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1de80:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1de84:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1de88:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1de8c:	0f 28 da             	movaps %xmm2,%xmm3
   1de8f:	49 83 e8 10          	sub    $0x10,%r8
   1de93:	0f 86 e0 0f 00 00    	jbe    1ee79 <__intel_ssse3_strncpy+0x2549>
   1de99:	48 85 c0             	test   %rax,%rax
   1de9c:	0f 85 d6 00 00 00    	jne    1df78 <__intel_ssse3_strncpy+0x1648>
   1dea2:	66 0f 3a 0f d1 0c    	palignr $0xc,%xmm1,%xmm2
   1dea8:	0f 28 cb             	movaps %xmm3,%xmm1
   1deab:	0f 29 12             	movaps %xmm2,(%rdx)
   1deae:	0f 28 51 14          	movaps 0x14(%rcx),%xmm2
   1deb2:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1deb6:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1deba:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1debe:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1dec2:	0f 28 da             	movaps %xmm2,%xmm3
   1dec5:	49 83 e8 10          	sub    $0x10,%r8
   1dec9:	0f 86 aa 0f 00 00    	jbe    1ee79 <__intel_ssse3_strncpy+0x2549>
   1decf:	48 85 c0             	test   %rax,%rax
   1ded2:	0f 85 a0 00 00 00    	jne    1df78 <__intel_ssse3_strncpy+0x1648>
   1ded8:	66 0f 3a 0f d1 0c    	palignr $0xc,%xmm1,%xmm2
   1dede:	0f 28 cb             	movaps %xmm3,%xmm1
   1dee1:	0f 29 12             	movaps %xmm2,(%rdx)
   1dee4:	48 8d 49 14          	lea    0x14(%rcx),%rcx
   1dee8:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1deec:	48 89 c8             	mov    %rcx,%rax
   1deef:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1def3:	48 2b c1             	sub    %rcx,%rax
   1def6:	48 8d 49 fc          	lea    -0x4(%rcx),%rcx
   1defa:	48 2b d0             	sub    %rax,%rdx
   1defd:	4c 03 c0             	add    %rax,%r8
   1df00:	0f 28 49 f4          	movaps -0xc(%rcx),%xmm1
   1df04:	0f 28 51 04          	movaps 0x4(%rcx),%xmm2
   1df08:	0f 28 59 14          	movaps 0x14(%rcx),%xmm3
   1df0c:	0f 28 f3             	movaps %xmm3,%xmm6
   1df0f:	0f 28 61 24          	movaps 0x24(%rcx),%xmm4
   1df13:	0f 28 fc             	movaps %xmm4,%xmm7
   1df16:	0f 28 69 34          	movaps 0x34(%rcx),%xmm5
   1df1a:	66 0f da f2          	pminub %xmm2,%xmm6
   1df1e:	66 0f da fd          	pminub %xmm5,%xmm7
   1df22:	66 0f da fe          	pminub %xmm6,%xmm7
   1df26:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1df2a:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1df2e:	0f 28 fd             	movaps %xmm5,%xmm7
   1df31:	66 0f 3a 0f ec 0c    	palignr $0xc,%xmm4,%xmm5
   1df37:	48 85 c0             	test   %rax,%rax
   1df3a:	66 0f 3a 0f e3 0c    	palignr $0xc,%xmm3,%xmm4
   1df40:	0f 85 d2 fe ff ff    	jne    1de18 <__intel_ssse3_strncpy+0x14e8>
   1df46:	49 83 e8 40          	sub    $0x40,%r8
   1df4a:	0f 86 20 15 00 00    	jbe    1f470 <__intel_ssse3_strncpy+0x2b40>
   1df50:	66 0f 3a 0f da 0c    	palignr $0xc,%xmm2,%xmm3
   1df56:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1df5a:	66 0f 3a 0f d1 0c    	palignr $0xc,%xmm1,%xmm2
   1df60:	0f 28 cf             	movaps %xmm7,%xmm1
   1df63:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1df67:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1df6b:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1df6f:	0f 29 12             	movaps %xmm2,(%rdx)
   1df72:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1df76:	eb 8c                	jmp    1df04 <__intel_ssse3_strncpy+0x15d4>
   1df78:	0f 28 32             	movaps (%rdx),%xmm6
   1df7b:	66 0f 73 de 04       	psrldq $0x4,%xmm6
   1df80:	48 c7 c6 04 00 00 00 	mov    $0x4,%rsi
   1df87:	66 0f 3a 0f f1 0c    	palignr $0xc,%xmm1,%xmm6
   1df8d:	0f 29 32             	movaps %xmm6,(%rdx)
   1df90:	e9 ab 04 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1df95:	0f 1f 40 00          	nopl   0x0(%rax)
   1df99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1dfa0:	0f 28 49 f3          	movaps -0xd(%rcx),%xmm1
   1dfa4:	0f 28 51 03          	movaps 0x3(%rcx),%xmm2
   1dfa8:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1dfac:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1dfb0:	0f 28 da             	movaps %xmm2,%xmm3
   1dfb3:	49 83 e8 10          	sub    $0x10,%r8
   1dfb7:	0f 86 e2 0e 00 00    	jbe    1ee9f <__intel_ssse3_strncpy+0x256f>
   1dfbd:	48 85 c0             	test   %rax,%rax
   1dfc0:	0f 85 42 01 00 00    	jne    1e108 <__intel_ssse3_strncpy+0x17d8>
   1dfc6:	66 0f 3a 0f d1 0d    	palignr $0xd,%xmm1,%xmm2
   1dfcc:	0f 28 cb             	movaps %xmm3,%xmm1
   1dfcf:	0f 29 12             	movaps %xmm2,(%rdx)
   1dfd2:	0f 28 51 13          	movaps 0x13(%rcx),%xmm2
   1dfd6:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1dfda:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1dfde:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1dfe2:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1dfe6:	0f 28 da             	movaps %xmm2,%xmm3
   1dfe9:	49 83 e8 10          	sub    $0x10,%r8
   1dfed:	0f 86 ac 0e 00 00    	jbe    1ee9f <__intel_ssse3_strncpy+0x256f>
   1dff3:	48 85 c0             	test   %rax,%rax
   1dff6:	0f 85 0c 01 00 00    	jne    1e108 <__intel_ssse3_strncpy+0x17d8>
   1dffc:	66 0f 3a 0f d1 0d    	palignr $0xd,%xmm1,%xmm2
   1e002:	0f 29 12             	movaps %xmm2,(%rdx)
   1e005:	0f 28 51 13          	movaps 0x13(%rcx),%xmm2
   1e009:	0f 28 cb             	movaps %xmm3,%xmm1
   1e00c:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1e010:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e014:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1e018:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1e01c:	0f 28 da             	movaps %xmm2,%xmm3
   1e01f:	49 83 e8 10          	sub    $0x10,%r8
   1e023:	0f 86 76 0e 00 00    	jbe    1ee9f <__intel_ssse3_strncpy+0x256f>
   1e029:	48 85 c0             	test   %rax,%rax
   1e02c:	0f 85 d6 00 00 00    	jne    1e108 <__intel_ssse3_strncpy+0x17d8>
   1e032:	66 0f 3a 0f d1 0d    	palignr $0xd,%xmm1,%xmm2
   1e038:	0f 28 cb             	movaps %xmm3,%xmm1
   1e03b:	0f 29 12             	movaps %xmm2,(%rdx)
   1e03e:	0f 28 51 13          	movaps 0x13(%rcx),%xmm2
   1e042:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1e046:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e04a:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1e04e:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1e052:	0f 28 da             	movaps %xmm2,%xmm3
   1e055:	49 83 e8 10          	sub    $0x10,%r8
   1e059:	0f 86 40 0e 00 00    	jbe    1ee9f <__intel_ssse3_strncpy+0x256f>
   1e05f:	48 85 c0             	test   %rax,%rax
   1e062:	0f 85 a0 00 00 00    	jne    1e108 <__intel_ssse3_strncpy+0x17d8>
   1e068:	66 0f 3a 0f d1 0d    	palignr $0xd,%xmm1,%xmm2
   1e06e:	0f 28 cb             	movaps %xmm3,%xmm1
   1e071:	0f 29 12             	movaps %xmm2,(%rdx)
   1e074:	48 8d 49 13          	lea    0x13(%rcx),%rcx
   1e078:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e07c:	48 89 c8             	mov    %rcx,%rax
   1e07f:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1e083:	48 2b c1             	sub    %rcx,%rax
   1e086:	48 8d 49 fd          	lea    -0x3(%rcx),%rcx
   1e08a:	48 2b d0             	sub    %rax,%rdx
   1e08d:	4c 03 c0             	add    %rax,%r8
   1e090:	0f 28 49 f3          	movaps -0xd(%rcx),%xmm1
   1e094:	0f 28 51 03          	movaps 0x3(%rcx),%xmm2
   1e098:	0f 28 59 13          	movaps 0x13(%rcx),%xmm3
   1e09c:	0f 28 f3             	movaps %xmm3,%xmm6
   1e09f:	0f 28 61 23          	movaps 0x23(%rcx),%xmm4
   1e0a3:	0f 28 fc             	movaps %xmm4,%xmm7
   1e0a6:	0f 28 69 33          	movaps 0x33(%rcx),%xmm5
   1e0aa:	66 0f da f2          	pminub %xmm2,%xmm6
   1e0ae:	66 0f da fd          	pminub %xmm5,%xmm7
   1e0b2:	66 0f da fe          	pminub %xmm6,%xmm7
   1e0b6:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1e0ba:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1e0be:	0f 28 fd             	movaps %xmm5,%xmm7
   1e0c1:	66 0f 3a 0f ec 0d    	palignr $0xd,%xmm4,%xmm5
   1e0c7:	48 85 c0             	test   %rax,%rax
   1e0ca:	66 0f 3a 0f e3 0d    	palignr $0xd,%xmm3,%xmm4
   1e0d0:	0f 85 d2 fe ff ff    	jne    1dfa8 <__intel_ssse3_strncpy+0x1678>
   1e0d6:	49 83 e8 40          	sub    $0x40,%r8
   1e0da:	0f 86 0d 14 00 00    	jbe    1f4ed <__intel_ssse3_strncpy+0x2bbd>
   1e0e0:	66 0f 3a 0f da 0d    	palignr $0xd,%xmm2,%xmm3
   1e0e6:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1e0ea:	66 0f 3a 0f d1 0d    	palignr $0xd,%xmm1,%xmm2
   1e0f0:	0f 28 cf             	movaps %xmm7,%xmm1
   1e0f3:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1e0f7:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1e0fb:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1e0ff:	0f 29 12             	movaps %xmm2,(%rdx)
   1e102:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1e106:	eb 8c                	jmp    1e094 <__intel_ssse3_strncpy+0x1764>
   1e108:	0f 28 32             	movaps (%rdx),%xmm6
   1e10b:	66 0f 73 de 03       	psrldq $0x3,%xmm6
   1e110:	48 c7 c6 03 00 00 00 	mov    $0x3,%rsi
   1e117:	66 0f 3a 0f f1 0d    	palignr $0xd,%xmm1,%xmm6
   1e11d:	0f 29 32             	movaps %xmm6,(%rdx)
   1e120:	e9 1b 03 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1e125:	0f 1f 40 00          	nopl   0x0(%rax)
   1e129:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e130:	0f 28 49 f2          	movaps -0xe(%rcx),%xmm1
   1e134:	0f 28 51 02          	movaps 0x2(%rcx),%xmm2
   1e138:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1e13c:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1e140:	0f 28 da             	movaps %xmm2,%xmm3
   1e143:	49 83 e8 10          	sub    $0x10,%r8
   1e147:	0f 86 78 0d 00 00    	jbe    1eec5 <__intel_ssse3_strncpy+0x2595>
   1e14d:	48 85 c0             	test   %rax,%rax
   1e150:	0f 85 42 01 00 00    	jne    1e298 <__intel_ssse3_strncpy+0x1968>
   1e156:	66 0f 3a 0f d1 0e    	palignr $0xe,%xmm1,%xmm2
   1e15c:	0f 28 cb             	movaps %xmm3,%xmm1
   1e15f:	0f 29 12             	movaps %xmm2,(%rdx)
   1e162:	0f 28 51 12          	movaps 0x12(%rcx),%xmm2
   1e166:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1e16a:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e16e:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1e172:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1e176:	0f 28 da             	movaps %xmm2,%xmm3
   1e179:	49 83 e8 10          	sub    $0x10,%r8
   1e17d:	0f 86 42 0d 00 00    	jbe    1eec5 <__intel_ssse3_strncpy+0x2595>
   1e183:	48 85 c0             	test   %rax,%rax
   1e186:	0f 85 0c 01 00 00    	jne    1e298 <__intel_ssse3_strncpy+0x1968>
   1e18c:	66 0f 3a 0f d1 0e    	palignr $0xe,%xmm1,%xmm2
   1e192:	0f 29 12             	movaps %xmm2,(%rdx)
   1e195:	0f 28 51 12          	movaps 0x12(%rcx),%xmm2
   1e199:	0f 28 cb             	movaps %xmm3,%xmm1
   1e19c:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1e1a0:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e1a4:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1e1a8:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1e1ac:	0f 28 da             	movaps %xmm2,%xmm3
   1e1af:	49 83 e8 10          	sub    $0x10,%r8
   1e1b3:	0f 86 0c 0d 00 00    	jbe    1eec5 <__intel_ssse3_strncpy+0x2595>
   1e1b9:	48 85 c0             	test   %rax,%rax
   1e1bc:	0f 85 d6 00 00 00    	jne    1e298 <__intel_ssse3_strncpy+0x1968>
   1e1c2:	66 0f 3a 0f d1 0e    	palignr $0xe,%xmm1,%xmm2
   1e1c8:	0f 28 cb             	movaps %xmm3,%xmm1
   1e1cb:	0f 29 12             	movaps %xmm2,(%rdx)
   1e1ce:	0f 28 51 12          	movaps 0x12(%rcx),%xmm2
   1e1d2:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1e1d6:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e1da:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1e1de:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1e1e2:	0f 28 da             	movaps %xmm2,%xmm3
   1e1e5:	49 83 e8 10          	sub    $0x10,%r8
   1e1e9:	0f 86 d6 0c 00 00    	jbe    1eec5 <__intel_ssse3_strncpy+0x2595>
   1e1ef:	48 85 c0             	test   %rax,%rax
   1e1f2:	0f 85 a0 00 00 00    	jne    1e298 <__intel_ssse3_strncpy+0x1968>
   1e1f8:	66 0f 3a 0f d1 0e    	palignr $0xe,%xmm1,%xmm2
   1e1fe:	0f 28 cb             	movaps %xmm3,%xmm1
   1e201:	0f 29 12             	movaps %xmm2,(%rdx)
   1e204:	48 8d 49 12          	lea    0x12(%rcx),%rcx
   1e208:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e20c:	48 89 c8             	mov    %rcx,%rax
   1e20f:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1e213:	48 2b c1             	sub    %rcx,%rax
   1e216:	48 8d 49 fe          	lea    -0x2(%rcx),%rcx
   1e21a:	48 2b d0             	sub    %rax,%rdx
   1e21d:	4c 03 c0             	add    %rax,%r8
   1e220:	0f 28 49 f2          	movaps -0xe(%rcx),%xmm1
   1e224:	0f 28 51 02          	movaps 0x2(%rcx),%xmm2
   1e228:	0f 28 59 12          	movaps 0x12(%rcx),%xmm3
   1e22c:	0f 28 f3             	movaps %xmm3,%xmm6
   1e22f:	0f 28 61 22          	movaps 0x22(%rcx),%xmm4
   1e233:	0f 28 fc             	movaps %xmm4,%xmm7
   1e236:	0f 28 69 32          	movaps 0x32(%rcx),%xmm5
   1e23a:	66 0f da f2          	pminub %xmm2,%xmm6
   1e23e:	66 0f da fd          	pminub %xmm5,%xmm7
   1e242:	66 0f da fe          	pminub %xmm6,%xmm7
   1e246:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1e24a:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1e24e:	0f 28 fd             	movaps %xmm5,%xmm7
   1e251:	66 0f 3a 0f ec 0e    	palignr $0xe,%xmm4,%xmm5
   1e257:	48 85 c0             	test   %rax,%rax
   1e25a:	66 0f 3a 0f e3 0e    	palignr $0xe,%xmm3,%xmm4
   1e260:	0f 85 d2 fe ff ff    	jne    1e138 <__intel_ssse3_strncpy+0x1808>
   1e266:	49 83 e8 40          	sub    $0x40,%r8
   1e26a:	0f 86 fa 12 00 00    	jbe    1f56a <__intel_ssse3_strncpy+0x2c3a>
   1e270:	66 0f 3a 0f da 0e    	palignr $0xe,%xmm2,%xmm3
   1e276:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1e27a:	66 0f 3a 0f d1 0e    	palignr $0xe,%xmm1,%xmm2
   1e280:	0f 28 cf             	movaps %xmm7,%xmm1
   1e283:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1e287:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1e28b:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1e28f:	0f 29 12             	movaps %xmm2,(%rdx)
   1e292:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1e296:	eb 8c                	jmp    1e224 <__intel_ssse3_strncpy+0x18f4>
   1e298:	0f 28 32             	movaps (%rdx),%xmm6
   1e29b:	66 0f 73 de 02       	psrldq $0x2,%xmm6
   1e2a0:	48 c7 c6 02 00 00 00 	mov    $0x2,%rsi
   1e2a7:	66 0f 3a 0f f1 0e    	palignr $0xe,%xmm1,%xmm6
   1e2ad:	0f 29 32             	movaps %xmm6,(%rdx)
   1e2b0:	e9 8b 01 00 00       	jmpq   1e440 <__intel_ssse3_strncpy+0x1b10>
   1e2b5:	0f 1f 40 00          	nopl   0x0(%rax)
   1e2b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e2c0:	0f 28 49 f1          	movaps -0xf(%rcx),%xmm1
   1e2c4:	0f 28 51 01          	movaps 0x1(%rcx),%xmm2
   1e2c8:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1e2cc:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1e2d0:	0f 28 da             	movaps %xmm2,%xmm3
   1e2d3:	49 83 e8 10          	sub    $0x10,%r8
   1e2d7:	0f 86 0e 0c 00 00    	jbe    1eeeb <__intel_ssse3_strncpy+0x25bb>
   1e2dd:	48 85 c0             	test   %rax,%rax
   1e2e0:	0f 85 42 01 00 00    	jne    1e428 <__intel_ssse3_strncpy+0x1af8>
   1e2e6:	66 0f 3a 0f d1 0f    	palignr $0xf,%xmm1,%xmm2
   1e2ec:	0f 28 cb             	movaps %xmm3,%xmm1
   1e2ef:	0f 29 12             	movaps %xmm2,(%rdx)
   1e2f2:	0f 28 51 11          	movaps 0x11(%rcx),%xmm2
   1e2f6:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1e2fa:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e2fe:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1e302:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1e306:	0f 28 da             	movaps %xmm2,%xmm3
   1e309:	49 83 e8 10          	sub    $0x10,%r8
   1e30d:	0f 86 d8 0b 00 00    	jbe    1eeeb <__intel_ssse3_strncpy+0x25bb>
   1e313:	48 85 c0             	test   %rax,%rax
   1e316:	0f 85 0c 01 00 00    	jne    1e428 <__intel_ssse3_strncpy+0x1af8>
   1e31c:	66 0f 3a 0f d1 0f    	palignr $0xf,%xmm1,%xmm2
   1e322:	0f 29 12             	movaps %xmm2,(%rdx)
   1e325:	0f 28 51 11          	movaps 0x11(%rcx),%xmm2
   1e329:	0f 28 cb             	movaps %xmm3,%xmm1
   1e32c:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1e330:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e334:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1e338:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1e33c:	0f 28 da             	movaps %xmm2,%xmm3
   1e33f:	49 83 e8 10          	sub    $0x10,%r8
   1e343:	0f 86 a2 0b 00 00    	jbe    1eeeb <__intel_ssse3_strncpy+0x25bb>
   1e349:	48 85 c0             	test   %rax,%rax
   1e34c:	0f 85 d6 00 00 00    	jne    1e428 <__intel_ssse3_strncpy+0x1af8>
   1e352:	66 0f 3a 0f d1 0f    	palignr $0xf,%xmm1,%xmm2
   1e358:	0f 28 cb             	movaps %xmm3,%xmm1
   1e35b:	0f 29 12             	movaps %xmm2,(%rdx)
   1e35e:	0f 28 51 11          	movaps 0x11(%rcx),%xmm2
   1e362:	66 0f 74 c2          	pcmpeqb %xmm2,%xmm0
   1e366:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e36a:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1e36e:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1e372:	0f 28 da             	movaps %xmm2,%xmm3
   1e375:	49 83 e8 10          	sub    $0x10,%r8
   1e379:	0f 86 6c 0b 00 00    	jbe    1eeeb <__intel_ssse3_strncpy+0x25bb>
   1e37f:	48 85 c0             	test   %rax,%rax
   1e382:	0f 85 a0 00 00 00    	jne    1e428 <__intel_ssse3_strncpy+0x1af8>
   1e388:	66 0f 3a 0f d1 0f    	palignr $0xf,%xmm1,%xmm2
   1e38e:	0f 28 cb             	movaps %xmm3,%xmm1
   1e391:	0f 29 12             	movaps %xmm2,(%rdx)
   1e394:	48 8d 49 11          	lea    0x11(%rcx),%rcx
   1e398:	48 8d 52 10          	lea    0x10(%rdx),%rdx
   1e39c:	48 89 c8             	mov    %rcx,%rax
   1e39f:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
   1e3a3:	48 2b c1             	sub    %rcx,%rax
   1e3a6:	48 8d 49 ff          	lea    -0x1(%rcx),%rcx
   1e3aa:	48 2b d0             	sub    %rax,%rdx
   1e3ad:	4c 03 c0             	add    %rax,%r8
   1e3b0:	0f 28 49 f1          	movaps -0xf(%rcx),%xmm1
   1e3b4:	0f 28 51 01          	movaps 0x1(%rcx),%xmm2
   1e3b8:	0f 28 59 11          	movaps 0x11(%rcx),%xmm3
   1e3bc:	0f 28 f3             	movaps %xmm3,%xmm6
   1e3bf:	0f 28 61 21          	movaps 0x21(%rcx),%xmm4
   1e3c3:	0f 28 fc             	movaps %xmm4,%xmm7
   1e3c6:	0f 28 69 31          	movaps 0x31(%rcx),%xmm5
   1e3ca:	66 0f da f2          	pminub %xmm2,%xmm6
   1e3ce:	66 0f da fd          	pminub %xmm5,%xmm7
   1e3d2:	66 0f da fe          	pminub %xmm6,%xmm7
   1e3d6:	66 0f 74 f8          	pcmpeqb %xmm0,%xmm7
   1e3da:	66 0f d7 c7          	pmovmskb %xmm7,%eax
   1e3de:	0f 28 fd             	movaps %xmm5,%xmm7
   1e3e1:	66 0f 3a 0f ec 0f    	palignr $0xf,%xmm4,%xmm5
   1e3e7:	48 85 c0             	test   %rax,%rax
   1e3ea:	66 0f 3a 0f e3 0f    	palignr $0xf,%xmm3,%xmm4
   1e3f0:	0f 85 d2 fe ff ff    	jne    1e2c8 <__intel_ssse3_strncpy+0x1998>
   1e3f6:	49 83 e8 40          	sub    $0x40,%r8
   1e3fa:	0f 86 e7 11 00 00    	jbe    1f5e7 <__intel_ssse3_strncpy+0x2cb7>
   1e400:	66 0f 3a 0f da 0f    	palignr $0xf,%xmm2,%xmm3
   1e406:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1e40a:	66 0f 3a 0f d1 0f    	palignr $0xf,%xmm1,%xmm2
   1e410:	0f 28 cf             	movaps %xmm7,%xmm1
   1e413:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1e417:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1e41b:	0f 29 5a 10          	movaps %xmm3,0x10(%rdx)
   1e41f:	0f 29 12             	movaps %xmm2,(%rdx)
   1e422:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   1e426:	eb 8c                	jmp    1e3b4 <__intel_ssse3_strncpy+0x1a84>
   1e428:	0f 28 32             	movaps (%rdx),%xmm6
   1e42b:	66 0f 73 de 01       	psrldq $0x1,%xmm6
   1e430:	48 c7 c6 01 00 00 00 	mov    $0x1,%rsi
   1e437:	66 0f 3a 0f f1 0f    	palignr $0xf,%xmm1,%xmm6
   1e43d:	0f 29 32             	movaps %xmm6,(%rdx)
   1e440:	49 83 c0 10          	add    $0x10,%r8
   1e444:	48 03 d6             	add    %rsi,%rdx
   1e447:	48 03 ce             	add    %rsi,%rcx
   1e44a:	84 c0                	test   %al,%al
   1e44c:	74 62                	je     1e4b0 <__intel_ssse3_strncpy+0x1b80>
   1e44e:	a8 01                	test   $0x1,%al
   1e450:	0f 85 9a 02 00 00    	jne    1e6f0 <__intel_ssse3_strncpy+0x1dc0>
   1e456:	a8 02                	test   $0x2,%al
   1e458:	0f 85 b2 02 00 00    	jne    1e710 <__intel_ssse3_strncpy+0x1de0>
   1e45e:	a8 04                	test   $0x4,%al
   1e460:	0f 85 ca 02 00 00    	jne    1e730 <__intel_ssse3_strncpy+0x1e00>
   1e466:	a8 08                	test   $0x8,%al
   1e468:	0f 85 e2 02 00 00    	jne    1e750 <__intel_ssse3_strncpy+0x1e20>
   1e46e:	a8 10                	test   $0x10,%al
   1e470:	0f 85 fa 02 00 00    	jne    1e770 <__intel_ssse3_strncpy+0x1e40>
   1e476:	a8 20                	test   $0x20,%al
   1e478:	0f 85 12 03 00 00    	jne    1e790 <__intel_ssse3_strncpy+0x1e60>
   1e47e:	a8 40                	test   $0x40,%al
   1e480:	0f 85 2a 03 00 00    	jne    1e7b0 <__intel_ssse3_strncpy+0x1e80>
   1e486:	0f 1f 00             	nopl   (%rax)
   1e489:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e490:	48 8b 01             	mov    (%rcx),%rax
   1e493:	48 89 02             	mov    %rax,(%rdx)
   1e496:	48 89 f8             	mov    %rdi,%rax
   1e499:	49 83 e8 08          	sub    $0x8,%r8
   1e49d:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
   1e4a1:	0f 85 a9 05 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e4a7:	c3                   	retq   
   1e4a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e4af:	00 
   1e4b0:	f6 c4 01             	test   $0x1,%ah
   1e4b3:	0f 85 17 03 00 00    	jne    1e7d0 <__intel_ssse3_strncpy+0x1ea0>
   1e4b9:	f6 c4 02             	test   $0x2,%ah
   1e4bc:	0f 85 2e 03 00 00    	jne    1e7f0 <__intel_ssse3_strncpy+0x1ec0>
   1e4c2:	f6 c4 04             	test   $0x4,%ah
   1e4c5:	0f 85 45 03 00 00    	jne    1e810 <__intel_ssse3_strncpy+0x1ee0>
   1e4cb:	f6 c4 08             	test   $0x8,%ah
   1e4ce:	0f 85 5c 03 00 00    	jne    1e830 <__intel_ssse3_strncpy+0x1f00>
   1e4d4:	f6 c4 10             	test   $0x10,%ah
   1e4d7:	0f 85 73 03 00 00    	jne    1e850 <__intel_ssse3_strncpy+0x1f20>
   1e4dd:	f6 c4 20             	test   $0x20,%ah
   1e4e0:	0f 85 8a 03 00 00    	jne    1e870 <__intel_ssse3_strncpy+0x1f40>
   1e4e6:	f6 c4 40             	test   $0x40,%ah
   1e4e9:	0f 85 a1 03 00 00    	jne    1e890 <__intel_ssse3_strncpy+0x1f60>
   1e4ef:	90                   	nop
   1e4f0:	48 8b 01             	mov    (%rcx),%rax
   1e4f3:	48 89 02             	mov    %rax,(%rdx)
   1e4f6:	48 8b 41 08          	mov    0x8(%rcx),%rax
   1e4fa:	48 89 42 08          	mov    %rax,0x8(%rdx)
   1e4fe:	48 89 f8             	mov    %rdi,%rax
   1e501:	49 83 e8 10          	sub    $0x10,%r8
   1e505:	48 8d 4a 10          	lea    0x10(%rdx),%rcx
   1e509:	0f 85 41 05 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e50f:	c3                   	retq   
   1e510:	49 83 c0 10          	add    $0x10,%r8
   1e514:	48 03 ce             	add    %rsi,%rcx
   1e517:	48 8d 34 16          	lea    (%rsi,%rdx,1),%rsi
   1e51b:	49 8d 50 f7          	lea    -0x9(%r8),%rdx
   1e51f:	80 e6 80             	and    $0x80,%dh
   1e522:	0a f0                	or     %al,%dh
   1e524:	84 f6                	test   %dh,%dh
   1e526:	48 8d 16             	lea    (%rsi),%rdx
   1e529:	0f 84 91 00 00 00    	je     1e5c0 <__intel_ssse3_strncpy+0x1c90>
   1e52f:	49 83 f8 01          	cmp    $0x1,%r8
   1e533:	0f 84 b7 01 00 00    	je     1e6f0 <__intel_ssse3_strncpy+0x1dc0>
   1e539:	a8 01                	test   $0x1,%al
   1e53b:	0f 85 af 01 00 00    	jne    1e6f0 <__intel_ssse3_strncpy+0x1dc0>
   1e541:	49 83 f8 02          	cmp    $0x2,%r8
   1e545:	0f 84 c5 01 00 00    	je     1e710 <__intel_ssse3_strncpy+0x1de0>
   1e54b:	a8 02                	test   $0x2,%al
   1e54d:	0f 85 bd 01 00 00    	jne    1e710 <__intel_ssse3_strncpy+0x1de0>
   1e553:	49 83 f8 03          	cmp    $0x3,%r8
   1e557:	0f 84 d3 01 00 00    	je     1e730 <__intel_ssse3_strncpy+0x1e00>
   1e55d:	a8 04                	test   $0x4,%al
   1e55f:	0f 85 cb 01 00 00    	jne    1e730 <__intel_ssse3_strncpy+0x1e00>
   1e565:	49 83 f8 04          	cmp    $0x4,%r8
   1e569:	0f 84 e1 01 00 00    	je     1e750 <__intel_ssse3_strncpy+0x1e20>
   1e56f:	a8 08                	test   $0x8,%al
   1e571:	0f 85 d9 01 00 00    	jne    1e750 <__intel_ssse3_strncpy+0x1e20>
   1e577:	49 83 f8 05          	cmp    $0x5,%r8
   1e57b:	0f 84 ef 01 00 00    	je     1e770 <__intel_ssse3_strncpy+0x1e40>
   1e581:	a8 10                	test   $0x10,%al
   1e583:	0f 85 e7 01 00 00    	jne    1e770 <__intel_ssse3_strncpy+0x1e40>
   1e589:	49 83 f8 06          	cmp    $0x6,%r8
   1e58d:	0f 84 fd 01 00 00    	je     1e790 <__intel_ssse3_strncpy+0x1e60>
   1e593:	a8 20                	test   $0x20,%al
   1e595:	0f 85 f5 01 00 00    	jne    1e790 <__intel_ssse3_strncpy+0x1e60>
   1e59b:	49 83 f8 07          	cmp    $0x7,%r8
   1e59f:	0f 84 0b 02 00 00    	je     1e7b0 <__intel_ssse3_strncpy+0x1e80>
   1e5a5:	a8 40                	test   $0x40,%al
   1e5a7:	0f 85 03 02 00 00    	jne    1e7b0 <__intel_ssse3_strncpy+0x1e80>
   1e5ad:	e9 de fe ff ff       	jmpq   1e490 <__intel_ssse3_strncpy+0x1b60>
   1e5b2:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e5b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e5c0:	49 83 f8 09          	cmp    $0x9,%r8
   1e5c4:	0f 84 06 02 00 00    	je     1e7d0 <__intel_ssse3_strncpy+0x1ea0>
   1e5ca:	f6 c4 01             	test   $0x1,%ah
   1e5cd:	0f 85 fd 01 00 00    	jne    1e7d0 <__intel_ssse3_strncpy+0x1ea0>
   1e5d3:	49 83 f8 0a          	cmp    $0xa,%r8
   1e5d7:	0f 84 13 02 00 00    	je     1e7f0 <__intel_ssse3_strncpy+0x1ec0>
   1e5dd:	f6 c4 02             	test   $0x2,%ah
   1e5e0:	0f 85 0a 02 00 00    	jne    1e7f0 <__intel_ssse3_strncpy+0x1ec0>
   1e5e6:	49 83 f8 0b          	cmp    $0xb,%r8
   1e5ea:	0f 84 20 02 00 00    	je     1e810 <__intel_ssse3_strncpy+0x1ee0>
   1e5f0:	f6 c4 04             	test   $0x4,%ah
   1e5f3:	0f 85 17 02 00 00    	jne    1e810 <__intel_ssse3_strncpy+0x1ee0>
   1e5f9:	49 83 f8 0c          	cmp    $0xc,%r8
   1e5fd:	0f 84 2d 02 00 00    	je     1e830 <__intel_ssse3_strncpy+0x1f00>
   1e603:	f6 c4 08             	test   $0x8,%ah
   1e606:	0f 85 24 02 00 00    	jne    1e830 <__intel_ssse3_strncpy+0x1f00>
   1e60c:	49 83 f8 0d          	cmp    $0xd,%r8
   1e610:	0f 84 3a 02 00 00    	je     1e850 <__intel_ssse3_strncpy+0x1f20>
   1e616:	f6 c4 10             	test   $0x10,%ah
   1e619:	0f 85 31 02 00 00    	jne    1e850 <__intel_ssse3_strncpy+0x1f20>
   1e61f:	49 83 f8 0e          	cmp    $0xe,%r8
   1e623:	0f 84 47 02 00 00    	je     1e870 <__intel_ssse3_strncpy+0x1f40>
   1e629:	f6 c4 20             	test   $0x20,%ah
   1e62c:	0f 85 3e 02 00 00    	jne    1e870 <__intel_ssse3_strncpy+0x1f40>
   1e632:	49 83 f8 0f          	cmp    $0xf,%r8
   1e636:	0f 84 54 02 00 00    	je     1e890 <__intel_ssse3_strncpy+0x1f60>
   1e63c:	f6 c4 40             	test   $0x40,%ah
   1e63f:	0f 85 4b 02 00 00    	jne    1e890 <__intel_ssse3_strncpy+0x1f60>
   1e645:	e9 a6 fe ff ff       	jmpq   1e4f0 <__intel_ssse3_strncpy+0x1bc0>
   1e64a:	48 85 c0             	test   %rax,%rax
   1e64d:	0f 85 bd fe ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1e653:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1e658:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e65f:	00 
   1e660:	49 83 c0 10          	add    $0x10,%r8
   1e664:	48 03 d6             	add    %rsi,%rdx
   1e667:	48 03 ce             	add    %rsi,%rcx
   1e66a:	49 83 f8 10          	cmp    $0x10,%r8
   1e66e:	0f 84 7c fe ff ff    	je     1e4f0 <__intel_ssse3_strncpy+0x1bc0>
   1e674:	49 83 f8 08          	cmp    $0x8,%r8
   1e678:	0f 84 12 fe ff ff    	je     1e490 <__intel_ssse3_strncpy+0x1b60>
   1e67e:	7f 1e                	jg     1e69e <__intel_ssse3_strncpy+0x1d6e>
   1e680:	49 83 f8 04          	cmp    $0x4,%r8
   1e684:	0f 84 c6 00 00 00    	je     1e750 <__intel_ssse3_strncpy+0x1e20>
   1e68a:	7f 34                	jg     1e6c0 <__intel_ssse3_strncpy+0x1d90>
   1e68c:	49 83 f8 02          	cmp    $0x2,%r8
   1e690:	7c 5e                	jl     1e6f0 <__intel_ssse3_strncpy+0x1dc0>
   1e692:	0f 84 78 00 00 00    	je     1e710 <__intel_ssse3_strncpy+0x1de0>
   1e698:	0f 8f 92 00 00 00    	jg     1e730 <__intel_ssse3_strncpy+0x1e00>
   1e69e:	49 83 f8 0c          	cmp    $0xc,%r8
   1e6a2:	0f 84 88 01 00 00    	je     1e830 <__intel_ssse3_strncpy+0x1f00>
   1e6a8:	7c 2c                	jl     1e6d6 <__intel_ssse3_strncpy+0x1da6>
   1e6aa:	49 83 f8 0e          	cmp    $0xe,%r8
   1e6ae:	0f 8c 9c 01 00 00    	jl     1e850 <__intel_ssse3_strncpy+0x1f20>
   1e6b4:	0f 84 b6 01 00 00    	je     1e870 <__intel_ssse3_strncpy+0x1f40>
   1e6ba:	0f 8f d0 01 00 00    	jg     1e890 <__intel_ssse3_strncpy+0x1f60>
   1e6c0:	49 83 f8 06          	cmp    $0x6,%r8
   1e6c4:	0f 8c a6 00 00 00    	jl     1e770 <__intel_ssse3_strncpy+0x1e40>
   1e6ca:	0f 84 c0 00 00 00    	je     1e790 <__intel_ssse3_strncpy+0x1e60>
   1e6d0:	0f 8f da 00 00 00    	jg     1e7b0 <__intel_ssse3_strncpy+0x1e80>
   1e6d6:	49 83 f8 0a          	cmp    $0xa,%r8
   1e6da:	0f 8c f0 00 00 00    	jl     1e7d0 <__intel_ssse3_strncpy+0x1ea0>
   1e6e0:	0f 84 0a 01 00 00    	je     1e7f0 <__intel_ssse3_strncpy+0x1ec0>
   1e6e6:	0f 8f 24 01 00 00    	jg     1e810 <__intel_ssse3_strncpy+0x1ee0>
   1e6ec:	0f 1f 40 00          	nopl   0x0(%rax)
   1e6f0:	8a 01                	mov    (%rcx),%al
   1e6f2:	88 02                	mov    %al,(%rdx)
   1e6f4:	48 89 f8             	mov    %rdi,%rax
   1e6f7:	49 83 e8 01          	sub    $0x1,%r8
   1e6fb:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
   1e6ff:	0f 85 4b 03 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e705:	c3                   	retq   
   1e706:	0f 1f 00             	nopl   (%rax)
   1e709:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e710:	66 8b 01             	mov    (%rcx),%ax
   1e713:	66 89 02             	mov    %ax,(%rdx)
   1e716:	48 89 f8             	mov    %rdi,%rax
   1e719:	49 83 e8 02          	sub    $0x2,%r8
   1e71d:	48 8d 4a 02          	lea    0x2(%rdx),%rcx
   1e721:	0f 85 29 03 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e727:	c3                   	retq   
   1e728:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e72f:	00 
   1e730:	66 8b 01             	mov    (%rcx),%ax
   1e733:	66 89 02             	mov    %ax,(%rdx)
   1e736:	8a 41 02             	mov    0x2(%rcx),%al
   1e739:	88 42 02             	mov    %al,0x2(%rdx)
   1e73c:	48 89 f8             	mov    %rdi,%rax
   1e73f:	49 83 e8 03          	sub    $0x3,%r8
   1e743:	48 8d 4a 03          	lea    0x3(%rdx),%rcx
   1e747:	0f 85 03 03 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e74d:	c3                   	retq   
   1e74e:	66 90                	xchg   %ax,%ax
   1e750:	8b 01                	mov    (%rcx),%eax
   1e752:	89 02                	mov    %eax,(%rdx)
   1e754:	48 89 f8             	mov    %rdi,%rax
   1e757:	49 83 e8 04          	sub    $0x4,%r8
   1e75b:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
   1e75f:	0f 85 eb 02 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e765:	c3                   	retq   
   1e766:	0f 1f 00             	nopl   (%rax)
   1e769:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e770:	8b 01                	mov    (%rcx),%eax
   1e772:	89 02                	mov    %eax,(%rdx)
   1e774:	8a 41 04             	mov    0x4(%rcx),%al
   1e777:	88 42 04             	mov    %al,0x4(%rdx)
   1e77a:	48 89 f8             	mov    %rdi,%rax
   1e77d:	49 83 e8 05          	sub    $0x5,%r8
   1e781:	48 8d 4a 05          	lea    0x5(%rdx),%rcx
   1e785:	0f 85 c5 02 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e78b:	c3                   	retq   
   1e78c:	0f 1f 40 00          	nopl   0x0(%rax)
   1e790:	8b 01                	mov    (%rcx),%eax
   1e792:	89 02                	mov    %eax,(%rdx)
   1e794:	66 8b 41 04          	mov    0x4(%rcx),%ax
   1e798:	66 89 42 04          	mov    %ax,0x4(%rdx)
   1e79c:	48 89 f8             	mov    %rdi,%rax
   1e79f:	49 83 e8 06          	sub    $0x6,%r8
   1e7a3:	48 8d 4a 06          	lea    0x6(%rdx),%rcx
   1e7a7:	0f 85 a3 02 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e7ad:	c3                   	retq   
   1e7ae:	66 90                	xchg   %ax,%ax
   1e7b0:	8b 01                	mov    (%rcx),%eax
   1e7b2:	89 02                	mov    %eax,(%rdx)
   1e7b4:	8b 41 03             	mov    0x3(%rcx),%eax
   1e7b7:	89 42 03             	mov    %eax,0x3(%rdx)
   1e7ba:	48 89 f8             	mov    %rdi,%rax
   1e7bd:	49 83 e8 07          	sub    $0x7,%r8
   1e7c1:	48 8d 4a 07          	lea    0x7(%rdx),%rcx
   1e7c5:	0f 85 85 02 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e7cb:	c3                   	retq   
   1e7cc:	0f 1f 40 00          	nopl   0x0(%rax)
   1e7d0:	48 8b 01             	mov    (%rcx),%rax
   1e7d3:	48 89 02             	mov    %rax,(%rdx)
   1e7d6:	8b 41 05             	mov    0x5(%rcx),%eax
   1e7d9:	89 42 05             	mov    %eax,0x5(%rdx)
   1e7dc:	48 89 f8             	mov    %rdi,%rax
   1e7df:	49 83 e8 09          	sub    $0x9,%r8
   1e7e3:	48 8d 4a 09          	lea    0x9(%rdx),%rcx
   1e7e7:	0f 85 63 02 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e7ed:	c3                   	retq   
   1e7ee:	66 90                	xchg   %ax,%ax
   1e7f0:	48 8b 01             	mov    (%rcx),%rax
   1e7f3:	48 89 02             	mov    %rax,(%rdx)
   1e7f6:	8b 41 06             	mov    0x6(%rcx),%eax
   1e7f9:	89 42 06             	mov    %eax,0x6(%rdx)
   1e7fc:	48 89 f8             	mov    %rdi,%rax
   1e7ff:	49 83 e8 0a          	sub    $0xa,%r8
   1e803:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
   1e807:	0f 85 43 02 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e80d:	c3                   	retq   
   1e80e:	66 90                	xchg   %ax,%ax
   1e810:	48 8b 01             	mov    (%rcx),%rax
   1e813:	48 89 02             	mov    %rax,(%rdx)
   1e816:	8b 41 07             	mov    0x7(%rcx),%eax
   1e819:	89 42 07             	mov    %eax,0x7(%rdx)
   1e81c:	48 89 f8             	mov    %rdi,%rax
   1e81f:	49 83 e8 0b          	sub    $0xb,%r8
   1e823:	48 8d 4a 0b          	lea    0xb(%rdx),%rcx
   1e827:	0f 85 23 02 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e82d:	c3                   	retq   
   1e82e:	66 90                	xchg   %ax,%ax
   1e830:	48 8b 01             	mov    (%rcx),%rax
   1e833:	48 89 02             	mov    %rax,(%rdx)
   1e836:	8b 41 08             	mov    0x8(%rcx),%eax
   1e839:	89 42 08             	mov    %eax,0x8(%rdx)
   1e83c:	48 89 f8             	mov    %rdi,%rax
   1e83f:	49 83 e8 0c          	sub    $0xc,%r8
   1e843:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
   1e847:	0f 85 03 02 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e84d:	c3                   	retq   
   1e84e:	66 90                	xchg   %ax,%ax
   1e850:	48 8b 01             	mov    (%rcx),%rax
   1e853:	48 89 02             	mov    %rax,(%rdx)
   1e856:	48 8b 41 05          	mov    0x5(%rcx),%rax
   1e85a:	48 89 42 05          	mov    %rax,0x5(%rdx)
   1e85e:	48 89 f8             	mov    %rdi,%rax
   1e861:	49 83 e8 0d          	sub    $0xd,%r8
   1e865:	48 8d 4a 0d          	lea    0xd(%rdx),%rcx
   1e869:	0f 85 e1 01 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e86f:	c3                   	retq   
   1e870:	48 8b 01             	mov    (%rcx),%rax
   1e873:	48 89 02             	mov    %rax,(%rdx)
   1e876:	48 8b 41 06          	mov    0x6(%rcx),%rax
   1e87a:	48 89 42 06          	mov    %rax,0x6(%rdx)
   1e87e:	48 89 f8             	mov    %rdi,%rax
   1e881:	49 83 e8 0e          	sub    $0xe,%r8
   1e885:	48 8d 4a 0e          	lea    0xe(%rdx),%rcx
   1e889:	0f 85 c1 01 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e88f:	c3                   	retq   
   1e890:	48 8b 01             	mov    (%rcx),%rax
   1e893:	48 89 02             	mov    %rax,(%rdx)
   1e896:	48 8b 41 07          	mov    0x7(%rcx),%rax
   1e89a:	48 89 42 07          	mov    %rax,0x7(%rdx)
   1e89e:	48 89 f8             	mov    %rdi,%rax
   1e8a1:	49 83 e8 0f          	sub    $0xf,%r8
   1e8a5:	48 8d 4a 0f          	lea    0xf(%rdx),%rcx
   1e8a9:	0f 85 a1 01 00 00    	jne    1ea50 <__intel_ssse3_strncpy+0x2120>
   1e8af:	c3                   	retq   
   1e8b0:	c3                   	retq   
   1e8b1:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e8b8:	00 
   1e8b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e8c0:	88 11                	mov    %dl,(%rcx)
   1e8c2:	c3                   	retq   
   1e8c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1e8c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e8cf:	00 
   1e8d0:	66 89 11             	mov    %dx,(%rcx)
   1e8d3:	c3                   	retq   
   1e8d4:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1e8d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e8e0:	66 89 11             	mov    %dx,(%rcx)
   1e8e3:	88 51 02             	mov    %dl,0x2(%rcx)
   1e8e6:	c3                   	retq   
   1e8e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e8ee:	00 00 
   1e8f0:	89 11                	mov    %edx,(%rcx)
   1e8f2:	c3                   	retq   
   1e8f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1e8f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e8ff:	00 
   1e900:	89 11                	mov    %edx,(%rcx)
   1e902:	88 51 04             	mov    %dl,0x4(%rcx)
   1e905:	c3                   	retq   
   1e906:	0f 1f 00             	nopl   (%rax)
   1e909:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e910:	89 11                	mov    %edx,(%rcx)
   1e912:	66 89 51 04          	mov    %dx,0x4(%rcx)
   1e916:	c3                   	retq   
   1e917:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e91e:	00 00 
   1e920:	89 11                	mov    %edx,(%rcx)
   1e922:	89 51 03             	mov    %edx,0x3(%rcx)
   1e925:	c3                   	retq   
   1e926:	0f 1f 00             	nopl   (%rax)
   1e929:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e930:	48 89 11             	mov    %rdx,(%rcx)
   1e933:	c3                   	retq   
   1e934:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1e939:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1e940:	48 89 11             	mov    %rdx,(%rcx)
   1e943:	88 51 08             	mov    %dl,0x8(%rcx)
   1e946:	c3                   	retq   
   1e947:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e94e:	00 00 
   1e950:	48 89 11             	mov    %rdx,(%rcx)
   1e953:	66 89 51 08          	mov    %dx,0x8(%rcx)
   1e957:	c3                   	retq   
   1e958:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e95f:	00 
   1e960:	48 89 11             	mov    %rdx,(%rcx)
   1e963:	89 51 07             	mov    %edx,0x7(%rcx)
   1e966:	c3                   	retq   
   1e967:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e96e:	00 00 
   1e970:	48 89 11             	mov    %rdx,(%rcx)
   1e973:	89 51 08             	mov    %edx,0x8(%rcx)
   1e976:	c3                   	retq   
   1e977:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   1e97e:	00 00 
   1e980:	48 89 11             	mov    %rdx,(%rcx)
   1e983:	48 89 51 05          	mov    %rdx,0x5(%rcx)
   1e987:	c3                   	retq   
   1e988:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e98f:	00 
   1e990:	48 89 11             	mov    %rdx,(%rcx)
   1e993:	48 89 51 06          	mov    %rdx,0x6(%rcx)
   1e997:	c3                   	retq   
   1e998:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e99f:	00 
   1e9a0:	48 89 11             	mov    %rdx,(%rcx)
   1e9a3:	48 89 51 07          	mov    %rdx,0x7(%rcx)
   1e9a7:	c3                   	retq   
   1e9a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e9af:	00 
   1e9b0:	48 89 11             	mov    %rdx,(%rcx)
   1e9b3:	48 89 51 08          	mov    %rdx,0x8(%rcx)
   1e9b7:	c3                   	retq   
   1e9b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   1e9bf:	00 
   1e9c0:	4d 8d 40 10          	lea    0x10(%r8),%r8
   1e9c4:	4d 85 c0             	test   %r8,%r8
   1e9c7:	0f 84 e3 fe ff ff    	je     1e8b0 <__intel_ssse3_strncpy+0x1f80>
   1e9cd:	49 83 f8 10          	cmp    $0x10,%r8
   1e9d1:	74 dd                	je     1e9b0 <__intel_ssse3_strncpy+0x2080>
   1e9d3:	49 83 f8 08          	cmp    $0x8,%r8
   1e9d7:	0f 84 53 ff ff ff    	je     1e930 <__intel_ssse3_strncpy+0x2000>
   1e9dd:	7f 22                	jg     1ea01 <__intel_ssse3_strncpy+0x20d1>
   1e9df:	49 83 f8 04          	cmp    $0x4,%r8
   1e9e3:	0f 84 07 ff ff ff    	je     1e8f0 <__intel_ssse3_strncpy+0x1fc0>
   1e9e9:	7f 34                	jg     1ea1f <__intel_ssse3_strncpy+0x20ef>
   1e9eb:	49 83 f8 02          	cmp    $0x2,%r8
   1e9ef:	0f 8c cb fe ff ff    	jl     1e8c0 <__intel_ssse3_strncpy+0x1f90>
   1e9f5:	0f 84 d5 fe ff ff    	je     1e8d0 <__intel_ssse3_strncpy+0x1fa0>
   1e9fb:	0f 8f df fe ff ff    	jg     1e8e0 <__intel_ssse3_strncpy+0x1fb0>
   1ea01:	49 83 f8 0c          	cmp    $0xc,%r8
   1ea05:	0f 84 65 ff ff ff    	je     1e970 <__intel_ssse3_strncpy+0x2040>
   1ea0b:	7c 28                	jl     1ea35 <__intel_ssse3_strncpy+0x2105>
   1ea0d:	49 83 f8 0e          	cmp    $0xe,%r8
   1ea11:	0f 8c 69 ff ff ff    	jl     1e980 <__intel_ssse3_strncpy+0x2050>
   1ea17:	0f 84 73 ff ff ff    	je     1e990 <__intel_ssse3_strncpy+0x2060>
   1ea1d:	7f 81                	jg     1e9a0 <__intel_ssse3_strncpy+0x2070>
   1ea1f:	49 83 f8 06          	cmp    $0x6,%r8
   1ea23:	0f 8c d7 fe ff ff    	jl     1e900 <__intel_ssse3_strncpy+0x1fd0>
   1ea29:	0f 84 e1 fe ff ff    	je     1e910 <__intel_ssse3_strncpy+0x1fe0>
   1ea2f:	0f 8f eb fe ff ff    	jg     1e920 <__intel_ssse3_strncpy+0x1ff0>
   1ea35:	49 83 f8 0a          	cmp    $0xa,%r8
   1ea39:	0f 8c 01 ff ff ff    	jl     1e940 <__intel_ssse3_strncpy+0x2010>
   1ea3f:	0f 84 0b ff ff ff    	je     1e950 <__intel_ssse3_strncpy+0x2020>
   1ea45:	e9 16 ff ff ff       	jmpq   1e960 <__intel_ssse3_strncpy+0x2030>
   1ea4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1ea50:	48 33 d2             	xor    %rdx,%rdx
   1ea53:	49 83 e8 10          	sub    $0x10,%r8
   1ea57:	0f 86 63 ff ff ff    	jbe    1e9c0 <__intel_ssse3_strncpy+0x2090>
   1ea5d:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1ea61:	48 89 11             	mov    %rdx,(%rcx)
   1ea64:	48 89 51 08          	mov    %rdx,0x8(%rcx)
   1ea68:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1ea6c:	48 89 ca             	mov    %rcx,%rdx
   1ea6f:	48 83 e2 0f          	and    $0xf,%rdx
   1ea73:	48 2b ca             	sub    %rdx,%rcx
   1ea76:	4c 03 c2             	add    %rdx,%r8
   1ea79:	48 33 d2             	xor    %rdx,%rdx
   1ea7c:	49 83 e8 40          	sub    $0x40,%r8
   1ea80:	72 1d                	jb     1ea9f <__intel_ssse3_strncpy+0x216f>
   1ea82:	66 0f 7f 01          	movdqa %xmm0,(%rcx)
   1ea86:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   1ea8b:	66 0f 7f 41 20       	movdqa %xmm0,0x20(%rcx)
   1ea90:	66 0f 7f 41 30       	movdqa %xmm0,0x30(%rcx)
   1ea95:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   1ea99:	49 83 e8 40          	sub    $0x40,%r8
   1ea9d:	73 e3                	jae    1ea82 <__intel_ssse3_strncpy+0x2152>
   1ea9f:	49 83 c0 20          	add    $0x20,%r8
   1eaa3:	7c 24                	jl     1eac9 <__intel_ssse3_strncpy+0x2199>
   1eaa5:	66 0f 7f 01          	movdqa %xmm0,(%rcx)
   1eaa9:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   1eaae:	48 8d 49 20          	lea    0x20(%rcx),%rcx
   1eab2:	49 83 e8 10          	sub    $0x10,%r8
   1eab6:	0f 8c 04 ff ff ff    	jl     1e9c0 <__intel_ssse3_strncpy+0x2090>
   1eabc:	66 0f 7f 01          	movdqa %xmm0,(%rcx)
   1eac0:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1eac4:	e9 fb fe ff ff       	jmpq   1e9c4 <__intel_ssse3_strncpy+0x2094>
   1eac9:	49 83 c0 10          	add    $0x10,%r8
   1eacd:	0f 8c ed fe ff ff    	jl     1e9c0 <__intel_ssse3_strncpy+0x2090>
   1ead3:	66 0f 7f 01          	movdqa %xmm0,(%rcx)
   1ead7:	48 8d 49 10          	lea    0x10(%rcx),%rcx
   1eadb:	e9 e4 fe ff ff       	jmpq   1e9c4 <__intel_ssse3_strncpy+0x2094>
   1eae0:	48 89 d0             	mov    %rdx,%rax
   1eae3:	c3                   	retq   
   1eae4:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1eae9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
   1eaf0:	49 83 f8 09          	cmp    $0x9,%r8
   1eaf4:	0f 84 d6 fc ff ff    	je     1e7d0 <__intel_ssse3_strncpy+0x1ea0>
   1eafa:	80 79 08 00          	cmpb   $0x0,0x8(%rcx)
   1eafe:	0f 84 cc fc ff ff    	je     1e7d0 <__intel_ssse3_strncpy+0x1ea0>
   1eb04:	49 83 f8 0a          	cmp    $0xa,%r8
   1eb08:	0f 84 e2 fc ff ff    	je     1e7f0 <__intel_ssse3_strncpy+0x1ec0>
   1eb0e:	80 79 09 00          	cmpb   $0x0,0x9(%rcx)
   1eb12:	0f 84 d8 fc ff ff    	je     1e7f0 <__intel_ssse3_strncpy+0x1ec0>
   1eb18:	49 83 f8 0b          	cmp    $0xb,%r8
   1eb1c:	0f 84 ee fc ff ff    	je     1e810 <__intel_ssse3_strncpy+0x1ee0>
   1eb22:	80 79 0a 00          	cmpb   $0x0,0xa(%rcx)
   1eb26:	0f 84 e4 fc ff ff    	je     1e810 <__intel_ssse3_strncpy+0x1ee0>
   1eb2c:	49 83 f8 0c          	cmp    $0xc,%r8
   1eb30:	0f 84 fa fc ff ff    	je     1e830 <__intel_ssse3_strncpy+0x1f00>
   1eb36:	80 79 0b 00          	cmpb   $0x0,0xb(%rcx)
   1eb3a:	0f 84 f0 fc ff ff    	je     1e830 <__intel_ssse3_strncpy+0x1f00>
   1eb40:	49 83 f8 0d          	cmp    $0xd,%r8
   1eb44:	0f 84 06 fd ff ff    	je     1e850 <__intel_ssse3_strncpy+0x1f20>
   1eb4a:	80 79 0c 00          	cmpb   $0x0,0xc(%rcx)
   1eb4e:	0f 84 fc fc ff ff    	je     1e850 <__intel_ssse3_strncpy+0x1f20>
   1eb54:	49 83 f8 0e          	cmp    $0xe,%r8
   1eb58:	0f 84 12 fd ff ff    	je     1e870 <__intel_ssse3_strncpy+0x1f40>
   1eb5e:	80 79 0d 00          	cmpb   $0x0,0xd(%rcx)
   1eb62:	0f 84 08 fd ff ff    	je     1e870 <__intel_ssse3_strncpy+0x1f40>
   1eb68:	48 8b 01             	mov    (%rcx),%rax
   1eb6b:	48 89 02             	mov    %rax,(%rdx)
   1eb6e:	48 8b 41 07          	mov    0x7(%rcx),%rax
   1eb72:	48 89 42 07          	mov    %rax,0x7(%rdx)
   1eb76:	48 89 f8             	mov    %rdi,%rax
   1eb79:	c3                   	retq   
   1eb7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   1eb80:	49 83 f8 01          	cmp    $0x1,%r8
   1eb84:	0f 84 66 fb ff ff    	je     1e6f0 <__intel_ssse3_strncpy+0x1dc0>
   1eb8a:	80 39 00             	cmpb   $0x0,(%rcx)
   1eb8d:	0f 84 5d fb ff ff    	je     1e6f0 <__intel_ssse3_strncpy+0x1dc0>
   1eb93:	49 83 f8 02          	cmp    $0x2,%r8
   1eb97:	0f 84 73 fb ff ff    	je     1e710 <__intel_ssse3_strncpy+0x1de0>
   1eb9d:	80 79 01 00          	cmpb   $0x0,0x1(%rcx)
   1eba1:	0f 84 69 fb ff ff    	je     1e710 <__intel_ssse3_strncpy+0x1de0>
   1eba7:	49 83 f8 03          	cmp    $0x3,%r8
   1ebab:	0f 84 7f fb ff ff    	je     1e730 <__intel_ssse3_strncpy+0x1e00>
   1ebb1:	80 79 02 00          	cmpb   $0x0,0x2(%rcx)
   1ebb5:	0f 84 75 fb ff ff    	je     1e730 <__intel_ssse3_strncpy+0x1e00>
   1ebbb:	49 83 f8 04          	cmp    $0x4,%r8
   1ebbf:	0f 84 8b fb ff ff    	je     1e750 <__intel_ssse3_strncpy+0x1e20>
   1ebc5:	80 79 03 00          	cmpb   $0x0,0x3(%rcx)
   1ebc9:	0f 84 81 fb ff ff    	je     1e750 <__intel_ssse3_strncpy+0x1e20>
   1ebcf:	49 83 f8 05          	cmp    $0x5,%r8
   1ebd3:	0f 84 97 fb ff ff    	je     1e770 <__intel_ssse3_strncpy+0x1e40>
   1ebd9:	80 79 04 00          	cmpb   $0x0,0x4(%rcx)
   1ebdd:	0f 84 8d fb ff ff    	je     1e770 <__intel_ssse3_strncpy+0x1e40>
   1ebe3:	49 83 f8 06          	cmp    $0x6,%r8
   1ebe7:	0f 84 a3 fb ff ff    	je     1e790 <__intel_ssse3_strncpy+0x1e60>
   1ebed:	80 79 05 00          	cmpb   $0x0,0x5(%rcx)
   1ebf1:	0f 84 99 fb ff ff    	je     1e790 <__intel_ssse3_strncpy+0x1e60>
   1ebf7:	49 83 f8 07          	cmp    $0x7,%r8
   1ebfb:	0f 84 af fb ff ff    	je     1e7b0 <__intel_ssse3_strncpy+0x1e80>
   1ec01:	80 79 06 00          	cmpb   $0x0,0x6(%rcx)
   1ec05:	0f 84 a5 fb ff ff    	je     1e7b0 <__intel_ssse3_strncpy+0x1e80>
   1ec0b:	48 8b 01             	mov    (%rcx),%rax
   1ec0e:	48 89 02             	mov    %rax,(%rdx)
   1ec11:	48 89 f8             	mov    %rdi,%rax
   1ec14:	c3                   	retq   
   1ec15:	48 85 c0             	test   %rax,%rax
   1ec18:	75 43                	jne    1ec5d <__intel_ssse3_strncpy+0x232d>
   1ec1a:	4d 8d 40 40          	lea    0x40(%r8),%r8
   1ec1e:	49 83 e8 10          	sub    $0x10,%r8
   1ec22:	0f 86 38 fa ff ff    	jbe    1e660 <__intel_ssse3_strncpy+0x1d30>
   1ec28:	0f 29 62 c0          	movaps %xmm4,-0x40(%rdx)
   1ec2c:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ec30:	49 83 e8 10          	sub    $0x10,%r8
   1ec34:	0f 86 26 fa ff ff    	jbe    1e660 <__intel_ssse3_strncpy+0x1d30>
   1ec3a:	0f 29 6a d0          	movaps %xmm5,-0x30(%rdx)
   1ec3e:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ec42:	49 83 e8 10          	sub    $0x10,%r8
   1ec46:	0f 86 14 fa ff ff    	jbe    1e660 <__intel_ssse3_strncpy+0x1d30>
   1ec4c:	0f 29 72 e0          	movaps %xmm6,-0x20(%rdx)
   1ec50:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ec54:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1ec58:	e9 03 fa ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ec5d:	66 0f 74 c4          	pcmpeqb %xmm4,%xmm0
   1ec61:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1ec65:	49 83 c0 30          	add    $0x30,%r8
   1ec69:	0f 8e db f9 ff ff    	jle    1e64a <__intel_ssse3_strncpy+0x1d1a>
   1ec6f:	48 85 c0             	test   %rax,%rax
   1ec72:	0f 85 c8 f7 ff ff    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1ec78:	66 0f 74 c5          	pcmpeqb %xmm5,%xmm0
   1ec7c:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1ec80:	0f 29 62 c0          	movaps %xmm4,-0x40(%rdx)
   1ec84:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ec88:	49 83 e8 10          	sub    $0x10,%r8
   1ec8c:	0f 86 b8 f9 ff ff    	jbe    1e64a <__intel_ssse3_strncpy+0x1d1a>
   1ec92:	48 85 c0             	test   %rax,%rax
   1ec95:	0f 85 a5 f7 ff ff    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1ec9b:	66 0f 74 c6          	pcmpeqb %xmm6,%xmm0
   1ec9f:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1eca3:	0f 29 6a d0          	movaps %xmm5,-0x30(%rdx)
   1eca7:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ecab:	49 83 e8 10          	sub    $0x10,%r8
   1ecaf:	0f 86 95 f9 ff ff    	jbe    1e64a <__intel_ssse3_strncpy+0x1d1a>
   1ecb5:	48 85 c0             	test   %rax,%rax
   1ecb8:	0f 85 82 f7 ff ff    	jne    1e440 <__intel_ssse3_strncpy+0x1b10>
   1ecbe:	66 0f 74 c7          	pcmpeqb %xmm7,%xmm0
   1ecc2:	66 0f d7 c0          	pmovmskb %xmm0,%eax
   1ecc6:	0f 29 72 e0          	movaps %xmm6,-0x20(%rdx)
   1ecca:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ecce:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1ecd2:	e9 39 f8 ff ff       	jmpq   1e510 <__intel_ssse3_strncpy+0x1be0>
   1ecd7:	0f 28 32             	movaps (%rdx),%xmm6
   1ecda:	66 0f 73 de 0f       	psrldq $0xf,%xmm6
   1ecdf:	48 c7 c6 0f 00 00 00 	mov    $0xf,%rsi
   1ece6:	66 0f 3a 0f f1 01    	palignr $0x1,%xmm1,%xmm6
   1ecec:	0f 29 32             	movaps %xmm6,(%rdx)
   1ecef:	48 85 c0             	test   %rax,%rax
   1ecf2:	0f 85 18 f8 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ecf8:	e9 63 f9 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ecfd:	0f 28 32             	movaps (%rdx),%xmm6
   1ed00:	66 0f 73 de 0e       	psrldq $0xe,%xmm6
   1ed05:	48 c7 c6 0e 00 00 00 	mov    $0xe,%rsi
   1ed0c:	66 0f 3a 0f f1 02    	palignr $0x2,%xmm1,%xmm6
   1ed12:	0f 29 32             	movaps %xmm6,(%rdx)
   1ed15:	48 85 c0             	test   %rax,%rax
   1ed18:	0f 85 f2 f7 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ed1e:	e9 3d f9 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ed23:	0f 28 32             	movaps (%rdx),%xmm6
   1ed26:	66 0f 73 de 0d       	psrldq $0xd,%xmm6
   1ed2b:	48 c7 c6 0d 00 00 00 	mov    $0xd,%rsi
   1ed32:	66 0f 3a 0f f1 03    	palignr $0x3,%xmm1,%xmm6
   1ed38:	0f 29 32             	movaps %xmm6,(%rdx)
   1ed3b:	48 85 c0             	test   %rax,%rax
   1ed3e:	0f 85 cc f7 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ed44:	e9 17 f9 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ed49:	0f 28 32             	movaps (%rdx),%xmm6
   1ed4c:	66 0f 73 de 0c       	psrldq $0xc,%xmm6
   1ed51:	48 c7 c6 0c 00 00 00 	mov    $0xc,%rsi
   1ed58:	66 0f 3a 0f f1 04    	palignr $0x4,%xmm1,%xmm6
   1ed5e:	0f 29 32             	movaps %xmm6,(%rdx)
   1ed61:	48 85 c0             	test   %rax,%rax
   1ed64:	0f 85 a6 f7 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ed6a:	e9 f1 f8 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ed6f:	0f 28 32             	movaps (%rdx),%xmm6
   1ed72:	66 0f 73 de 0b       	psrldq $0xb,%xmm6
   1ed77:	48 c7 c6 0b 00 00 00 	mov    $0xb,%rsi
   1ed7e:	66 0f 3a 0f f1 05    	palignr $0x5,%xmm1,%xmm6
   1ed84:	0f 29 32             	movaps %xmm6,(%rdx)
   1ed87:	48 85 c0             	test   %rax,%rax
   1ed8a:	0f 85 80 f7 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ed90:	e9 cb f8 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ed95:	0f 28 32             	movaps (%rdx),%xmm6
   1ed98:	66 0f 73 de 0a       	psrldq $0xa,%xmm6
   1ed9d:	48 c7 c6 0a 00 00 00 	mov    $0xa,%rsi
   1eda4:	66 0f 3a 0f f1 06    	palignr $0x6,%xmm1,%xmm6
   1edaa:	0f 29 32             	movaps %xmm6,(%rdx)
   1edad:	48 85 c0             	test   %rax,%rax
   1edb0:	0f 85 5a f7 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1edb6:	e9 a5 f8 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1edbb:	0f 28 32             	movaps (%rdx),%xmm6
   1edbe:	66 0f 73 de 09       	psrldq $0x9,%xmm6
   1edc3:	48 c7 c6 09 00 00 00 	mov    $0x9,%rsi
   1edca:	66 0f 3a 0f f1 07    	palignr $0x7,%xmm1,%xmm6
   1edd0:	0f 29 32             	movaps %xmm6,(%rdx)
   1edd3:	48 85 c0             	test   %rax,%rax
   1edd6:	0f 85 34 f7 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1eddc:	e9 7f f8 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ede1:	0f 28 32             	movaps (%rdx),%xmm6
   1ede4:	66 0f 73 de 08       	psrldq $0x8,%xmm6
   1ede9:	48 c7 c6 08 00 00 00 	mov    $0x8,%rsi
   1edf0:	66 0f 3a 0f f1 08    	palignr $0x8,%xmm1,%xmm6
   1edf6:	0f 29 32             	movaps %xmm6,(%rdx)
   1edf9:	48 85 c0             	test   %rax,%rax
   1edfc:	0f 85 0e f7 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ee02:	e9 59 f8 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ee07:	0f 28 32             	movaps (%rdx),%xmm6
   1ee0a:	66 0f 73 de 07       	psrldq $0x7,%xmm6
   1ee0f:	48 c7 c6 07 00 00 00 	mov    $0x7,%rsi
   1ee16:	66 0f 3a 0f f1 09    	palignr $0x9,%xmm1,%xmm6
   1ee1c:	0f 29 32             	movaps %xmm6,(%rdx)
   1ee1f:	48 85 c0             	test   %rax,%rax
   1ee22:	0f 85 e8 f6 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ee28:	e9 33 f8 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ee2d:	0f 28 32             	movaps (%rdx),%xmm6
   1ee30:	66 0f 73 de 06       	psrldq $0x6,%xmm6
   1ee35:	48 c7 c6 06 00 00 00 	mov    $0x6,%rsi
   1ee3c:	66 0f 3a 0f f1 0a    	palignr $0xa,%xmm1,%xmm6
   1ee42:	0f 29 32             	movaps %xmm6,(%rdx)
   1ee45:	48 85 c0             	test   %rax,%rax
   1ee48:	0f 85 c2 f6 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ee4e:	e9 0d f8 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ee53:	0f 28 32             	movaps (%rdx),%xmm6
   1ee56:	66 0f 73 de 05       	psrldq $0x5,%xmm6
   1ee5b:	48 c7 c6 05 00 00 00 	mov    $0x5,%rsi
   1ee62:	66 0f 3a 0f f1 0b    	palignr $0xb,%xmm1,%xmm6
   1ee68:	0f 29 32             	movaps %xmm6,(%rdx)
   1ee6b:	48 85 c0             	test   %rax,%rax
   1ee6e:	0f 85 9c f6 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ee74:	e9 e7 f7 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ee79:	0f 28 32             	movaps (%rdx),%xmm6
   1ee7c:	66 0f 73 de 04       	psrldq $0x4,%xmm6
   1ee81:	48 c7 c6 04 00 00 00 	mov    $0x4,%rsi
   1ee88:	66 0f 3a 0f f1 0c    	palignr $0xc,%xmm1,%xmm6
   1ee8e:	0f 29 32             	movaps %xmm6,(%rdx)
   1ee91:	48 85 c0             	test   %rax,%rax
   1ee94:	0f 85 76 f6 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ee9a:	e9 c1 f7 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ee9f:	0f 28 32             	movaps (%rdx),%xmm6
   1eea2:	66 0f 73 de 03       	psrldq $0x3,%xmm6
   1eea7:	48 c7 c6 03 00 00 00 	mov    $0x3,%rsi
   1eeae:	66 0f 3a 0f f1 0d    	palignr $0xd,%xmm1,%xmm6
   1eeb4:	0f 29 32             	movaps %xmm6,(%rdx)
   1eeb7:	48 85 c0             	test   %rax,%rax
   1eeba:	0f 85 50 f6 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1eec0:	e9 9b f7 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1eec5:	0f 28 32             	movaps (%rdx),%xmm6
   1eec8:	66 0f 73 de 02       	psrldq $0x2,%xmm6
   1eecd:	48 c7 c6 02 00 00 00 	mov    $0x2,%rsi
   1eed4:	66 0f 3a 0f f1 0e    	palignr $0xe,%xmm1,%xmm6
   1eeda:	0f 29 32             	movaps %xmm6,(%rdx)
   1eedd:	48 85 c0             	test   %rax,%rax
   1eee0:	0f 85 2a f6 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1eee6:	e9 75 f7 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1eeeb:	0f 28 32             	movaps (%rdx),%xmm6
   1eeee:	66 0f 73 de 01       	psrldq $0x1,%xmm6
   1eef3:	48 c7 c6 01 00 00 00 	mov    $0x1,%rsi
   1eefa:	66 0f 3a 0f f1 0f    	palignr $0xf,%xmm1,%xmm6
   1ef00:	0f 29 32             	movaps %xmm6,(%rdx)
   1ef03:	48 85 c0             	test   %rax,%rax
   1ef06:	0f 85 04 f6 ff ff    	jne    1e510 <__intel_ssse3_strncpy+0x1be0>
   1ef0c:	e9 4f f7 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ef11:	0f 28 da             	movaps %xmm2,%xmm3
   1ef14:	49 83 c0 30          	add    $0x30,%r8
   1ef18:	7e 58                	jle    1ef72 <__intel_ssse3_strncpy+0x2642>
   1ef1a:	66 0f 3a 0f d1 01    	palignr $0x1,%xmm1,%xmm2
   1ef20:	0f 28 cb             	movaps %xmm3,%xmm1
   1ef23:	0f 29 12             	movaps %xmm2,(%rdx)
   1ef26:	0f 28 51 1f          	movaps 0x1f(%rcx),%xmm2
   1ef2a:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ef2e:	0f 28 da             	movaps %xmm2,%xmm3
   1ef31:	49 83 e8 10          	sub    $0x10,%r8
   1ef35:	76 3b                	jbe    1ef72 <__intel_ssse3_strncpy+0x2642>
   1ef37:	66 0f 3a 0f d1 01    	palignr $0x1,%xmm1,%xmm2
   1ef3d:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1ef41:	0f 28 51 2f          	movaps 0x2f(%rcx),%xmm2
   1ef45:	0f 28 cb             	movaps %xmm3,%xmm1
   1ef48:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ef4c:	49 83 e8 10          	sub    $0x10,%r8
   1ef50:	76 20                	jbe    1ef72 <__intel_ssse3_strncpy+0x2642>
   1ef52:	0f 28 ca             	movaps %xmm2,%xmm1
   1ef55:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1ef59:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ef5d:	49 83 e8 10          	sub    $0x10,%r8
   1ef61:	76 0f                	jbe    1ef72 <__intel_ssse3_strncpy+0x2642>
   1ef63:	0f 28 cf             	movaps %xmm7,%xmm1
   1ef66:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1ef6a:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1ef6e:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1ef72:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1ef76:	66 0f 73 de 0f       	psrldq $0xf,%xmm6
   1ef7b:	66 0f 3a 0f f1 01    	palignr $0x1,%xmm1,%xmm6
   1ef81:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1ef85:	48 8d 76 0f          	lea    0xf(%rsi),%rsi
   1ef89:	e9 d2 f6 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1ef8e:	0f 28 da             	movaps %xmm2,%xmm3
   1ef91:	49 83 c0 30          	add    $0x30,%r8
   1ef95:	7e 58                	jle    1efef <__intel_ssse3_strncpy+0x26bf>
   1ef97:	66 0f 3a 0f d1 02    	palignr $0x2,%xmm1,%xmm2
   1ef9d:	0f 28 cb             	movaps %xmm3,%xmm1
   1efa0:	0f 29 12             	movaps %xmm2,(%rdx)
   1efa3:	0f 28 51 1e          	movaps 0x1e(%rcx),%xmm2
   1efa7:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1efab:	0f 28 da             	movaps %xmm2,%xmm3
   1efae:	49 83 e8 10          	sub    $0x10,%r8
   1efb2:	76 3b                	jbe    1efef <__intel_ssse3_strncpy+0x26bf>
   1efb4:	66 0f 3a 0f d1 02    	palignr $0x2,%xmm1,%xmm2
   1efba:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1efbe:	0f 28 51 2e          	movaps 0x2e(%rcx),%xmm2
   1efc2:	0f 28 cb             	movaps %xmm3,%xmm1
   1efc5:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1efc9:	49 83 e8 10          	sub    $0x10,%r8
   1efcd:	76 20                	jbe    1efef <__intel_ssse3_strncpy+0x26bf>
   1efcf:	0f 28 ca             	movaps %xmm2,%xmm1
   1efd2:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1efd6:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1efda:	49 83 e8 10          	sub    $0x10,%r8
   1efde:	76 0f                	jbe    1efef <__intel_ssse3_strncpy+0x26bf>
   1efe0:	0f 28 cf             	movaps %xmm7,%xmm1
   1efe3:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1efe7:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1efeb:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1efef:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1eff3:	66 0f 73 de 0e       	psrldq $0xe,%xmm6
   1eff8:	66 0f 3a 0f f1 02    	palignr $0x2,%xmm1,%xmm6
   1effe:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f002:	48 8d 76 0e          	lea    0xe(%rsi),%rsi
   1f006:	e9 55 f6 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f00b:	0f 28 da             	movaps %xmm2,%xmm3
   1f00e:	49 83 c0 30          	add    $0x30,%r8
   1f012:	7e 58                	jle    1f06c <__intel_ssse3_strncpy+0x273c>
   1f014:	66 0f 3a 0f d1 03    	palignr $0x3,%xmm1,%xmm2
   1f01a:	0f 28 cb             	movaps %xmm3,%xmm1
   1f01d:	0f 29 12             	movaps %xmm2,(%rdx)
   1f020:	0f 28 51 1d          	movaps 0x1d(%rcx),%xmm2
   1f024:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f028:	0f 28 da             	movaps %xmm2,%xmm3
   1f02b:	49 83 e8 10          	sub    $0x10,%r8
   1f02f:	76 3b                	jbe    1f06c <__intel_ssse3_strncpy+0x273c>
   1f031:	66 0f 3a 0f d1 03    	palignr $0x3,%xmm1,%xmm2
   1f037:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f03b:	0f 28 51 2d          	movaps 0x2d(%rcx),%xmm2
   1f03f:	0f 28 cb             	movaps %xmm3,%xmm1
   1f042:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f046:	49 83 e8 10          	sub    $0x10,%r8
   1f04a:	76 20                	jbe    1f06c <__intel_ssse3_strncpy+0x273c>
   1f04c:	0f 28 ca             	movaps %xmm2,%xmm1
   1f04f:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f053:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f057:	49 83 e8 10          	sub    $0x10,%r8
   1f05b:	76 0f                	jbe    1f06c <__intel_ssse3_strncpy+0x273c>
   1f05d:	0f 28 cf             	movaps %xmm7,%xmm1
   1f060:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f064:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f068:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f06c:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f070:	66 0f 73 de 0d       	psrldq $0xd,%xmm6
   1f075:	66 0f 3a 0f f1 03    	palignr $0x3,%xmm1,%xmm6
   1f07b:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f07f:	48 8d 76 0d          	lea    0xd(%rsi),%rsi
   1f083:	e9 d8 f5 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f088:	0f 28 da             	movaps %xmm2,%xmm3
   1f08b:	49 83 c0 30          	add    $0x30,%r8
   1f08f:	7e 58                	jle    1f0e9 <__intel_ssse3_strncpy+0x27b9>
   1f091:	66 0f 3a 0f d1 04    	palignr $0x4,%xmm1,%xmm2
   1f097:	0f 28 cb             	movaps %xmm3,%xmm1
   1f09a:	0f 29 12             	movaps %xmm2,(%rdx)
   1f09d:	0f 28 51 1c          	movaps 0x1c(%rcx),%xmm2
   1f0a1:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f0a5:	0f 28 da             	movaps %xmm2,%xmm3
   1f0a8:	49 83 e8 10          	sub    $0x10,%r8
   1f0ac:	76 3b                	jbe    1f0e9 <__intel_ssse3_strncpy+0x27b9>
   1f0ae:	66 0f 3a 0f d1 04    	palignr $0x4,%xmm1,%xmm2
   1f0b4:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f0b8:	0f 28 51 2c          	movaps 0x2c(%rcx),%xmm2
   1f0bc:	0f 28 cb             	movaps %xmm3,%xmm1
   1f0bf:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f0c3:	49 83 e8 10          	sub    $0x10,%r8
   1f0c7:	76 20                	jbe    1f0e9 <__intel_ssse3_strncpy+0x27b9>
   1f0c9:	0f 28 ca             	movaps %xmm2,%xmm1
   1f0cc:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f0d0:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f0d4:	49 83 e8 10          	sub    $0x10,%r8
   1f0d8:	76 0f                	jbe    1f0e9 <__intel_ssse3_strncpy+0x27b9>
   1f0da:	0f 28 cf             	movaps %xmm7,%xmm1
   1f0dd:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f0e1:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f0e5:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f0e9:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f0ed:	66 0f 73 de 0c       	psrldq $0xc,%xmm6
   1f0f2:	66 0f 3a 0f f1 04    	palignr $0x4,%xmm1,%xmm6
   1f0f8:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f0fc:	48 8d 76 0c          	lea    0xc(%rsi),%rsi
   1f100:	e9 5b f5 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f105:	0f 28 da             	movaps %xmm2,%xmm3
   1f108:	49 83 c0 30          	add    $0x30,%r8
   1f10c:	7e 58                	jle    1f166 <__intel_ssse3_strncpy+0x2836>
   1f10e:	66 0f 3a 0f d1 05    	palignr $0x5,%xmm1,%xmm2
   1f114:	0f 28 cb             	movaps %xmm3,%xmm1
   1f117:	0f 29 12             	movaps %xmm2,(%rdx)
   1f11a:	0f 28 51 1b          	movaps 0x1b(%rcx),%xmm2
   1f11e:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f122:	0f 28 da             	movaps %xmm2,%xmm3
   1f125:	49 83 e8 10          	sub    $0x10,%r8
   1f129:	76 3b                	jbe    1f166 <__intel_ssse3_strncpy+0x2836>
   1f12b:	66 0f 3a 0f d1 05    	palignr $0x5,%xmm1,%xmm2
   1f131:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f135:	0f 28 51 2b          	movaps 0x2b(%rcx),%xmm2
   1f139:	0f 28 cb             	movaps %xmm3,%xmm1
   1f13c:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f140:	49 83 e8 10          	sub    $0x10,%r8
   1f144:	76 20                	jbe    1f166 <__intel_ssse3_strncpy+0x2836>
   1f146:	0f 28 ca             	movaps %xmm2,%xmm1
   1f149:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f14d:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f151:	49 83 e8 10          	sub    $0x10,%r8
   1f155:	76 0f                	jbe    1f166 <__intel_ssse3_strncpy+0x2836>
   1f157:	0f 28 cf             	movaps %xmm7,%xmm1
   1f15a:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f15e:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f162:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f166:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f16a:	66 0f 73 de 0b       	psrldq $0xb,%xmm6
   1f16f:	66 0f 3a 0f f1 05    	palignr $0x5,%xmm1,%xmm6
   1f175:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f179:	48 8d 76 0b          	lea    0xb(%rsi),%rsi
   1f17d:	e9 de f4 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f182:	0f 28 da             	movaps %xmm2,%xmm3
   1f185:	49 83 c0 30          	add    $0x30,%r8
   1f189:	7e 58                	jle    1f1e3 <__intel_ssse3_strncpy+0x28b3>
   1f18b:	66 0f 3a 0f d1 06    	palignr $0x6,%xmm1,%xmm2
   1f191:	0f 28 cb             	movaps %xmm3,%xmm1
   1f194:	0f 29 12             	movaps %xmm2,(%rdx)
   1f197:	0f 28 51 1a          	movaps 0x1a(%rcx),%xmm2
   1f19b:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f19f:	0f 28 da             	movaps %xmm2,%xmm3
   1f1a2:	49 83 e8 10          	sub    $0x10,%r8
   1f1a6:	76 3b                	jbe    1f1e3 <__intel_ssse3_strncpy+0x28b3>
   1f1a8:	66 0f 3a 0f d1 06    	palignr $0x6,%xmm1,%xmm2
   1f1ae:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f1b2:	0f 28 51 2a          	movaps 0x2a(%rcx),%xmm2
   1f1b6:	0f 28 cb             	movaps %xmm3,%xmm1
   1f1b9:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f1bd:	49 83 e8 10          	sub    $0x10,%r8
   1f1c1:	76 20                	jbe    1f1e3 <__intel_ssse3_strncpy+0x28b3>
   1f1c3:	0f 28 ca             	movaps %xmm2,%xmm1
   1f1c6:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f1ca:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f1ce:	49 83 e8 10          	sub    $0x10,%r8
   1f1d2:	76 0f                	jbe    1f1e3 <__intel_ssse3_strncpy+0x28b3>
   1f1d4:	0f 28 cf             	movaps %xmm7,%xmm1
   1f1d7:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f1db:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f1df:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f1e3:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f1e7:	66 0f 73 de 0a       	psrldq $0xa,%xmm6
   1f1ec:	66 0f 3a 0f f1 06    	palignr $0x6,%xmm1,%xmm6
   1f1f2:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f1f6:	48 8d 76 0a          	lea    0xa(%rsi),%rsi
   1f1fa:	e9 61 f4 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f1ff:	0f 28 da             	movaps %xmm2,%xmm3
   1f202:	49 83 c0 30          	add    $0x30,%r8
   1f206:	7e 58                	jle    1f260 <__intel_ssse3_strncpy+0x2930>
   1f208:	66 0f 3a 0f d1 07    	palignr $0x7,%xmm1,%xmm2
   1f20e:	0f 28 cb             	movaps %xmm3,%xmm1
   1f211:	0f 29 12             	movaps %xmm2,(%rdx)
   1f214:	0f 28 51 19          	movaps 0x19(%rcx),%xmm2
   1f218:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f21c:	0f 28 da             	movaps %xmm2,%xmm3
   1f21f:	49 83 e8 10          	sub    $0x10,%r8
   1f223:	76 3b                	jbe    1f260 <__intel_ssse3_strncpy+0x2930>
   1f225:	66 0f 3a 0f d1 07    	palignr $0x7,%xmm1,%xmm2
   1f22b:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f22f:	0f 28 51 29          	movaps 0x29(%rcx),%xmm2
   1f233:	0f 28 cb             	movaps %xmm3,%xmm1
   1f236:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f23a:	49 83 e8 10          	sub    $0x10,%r8
   1f23e:	76 20                	jbe    1f260 <__intel_ssse3_strncpy+0x2930>
   1f240:	0f 28 ca             	movaps %xmm2,%xmm1
   1f243:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f247:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f24b:	49 83 e8 10          	sub    $0x10,%r8
   1f24f:	76 0f                	jbe    1f260 <__intel_ssse3_strncpy+0x2930>
   1f251:	0f 28 cf             	movaps %xmm7,%xmm1
   1f254:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f258:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f25c:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f260:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f264:	66 0f 73 de 09       	psrldq $0x9,%xmm6
   1f269:	66 0f 3a 0f f1 07    	palignr $0x7,%xmm1,%xmm6
   1f26f:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f273:	48 8d 76 09          	lea    0x9(%rsi),%rsi
   1f277:	e9 e4 f3 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f27c:	0f 28 da             	movaps %xmm2,%xmm3
   1f27f:	49 83 c0 30          	add    $0x30,%r8
   1f283:	7e 58                	jle    1f2dd <__intel_ssse3_strncpy+0x29ad>
   1f285:	66 0f 3a 0f d1 08    	palignr $0x8,%xmm1,%xmm2
   1f28b:	0f 28 cb             	movaps %xmm3,%xmm1
   1f28e:	0f 29 12             	movaps %xmm2,(%rdx)
   1f291:	0f 28 51 18          	movaps 0x18(%rcx),%xmm2
   1f295:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f299:	0f 28 da             	movaps %xmm2,%xmm3
   1f29c:	49 83 e8 10          	sub    $0x10,%r8
   1f2a0:	76 3b                	jbe    1f2dd <__intel_ssse3_strncpy+0x29ad>
   1f2a2:	66 0f 3a 0f d1 08    	palignr $0x8,%xmm1,%xmm2
   1f2a8:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f2ac:	0f 28 51 28          	movaps 0x28(%rcx),%xmm2
   1f2b0:	0f 28 cb             	movaps %xmm3,%xmm1
   1f2b3:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f2b7:	49 83 e8 10          	sub    $0x10,%r8
   1f2bb:	76 20                	jbe    1f2dd <__intel_ssse3_strncpy+0x29ad>
   1f2bd:	0f 28 ca             	movaps %xmm2,%xmm1
   1f2c0:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f2c4:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f2c8:	49 83 e8 10          	sub    $0x10,%r8
   1f2cc:	76 0f                	jbe    1f2dd <__intel_ssse3_strncpy+0x29ad>
   1f2ce:	0f 28 cf             	movaps %xmm7,%xmm1
   1f2d1:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f2d5:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f2d9:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f2dd:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f2e1:	66 0f 73 de 08       	psrldq $0x8,%xmm6
   1f2e6:	66 0f 3a 0f f1 08    	palignr $0x8,%xmm1,%xmm6
   1f2ec:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f2f0:	48 8d 76 08          	lea    0x8(%rsi),%rsi
   1f2f4:	e9 67 f3 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f2f9:	0f 28 da             	movaps %xmm2,%xmm3
   1f2fc:	49 83 c0 30          	add    $0x30,%r8
   1f300:	7e 58                	jle    1f35a <__intel_ssse3_strncpy+0x2a2a>
   1f302:	66 0f 3a 0f d1 09    	palignr $0x9,%xmm1,%xmm2
   1f308:	0f 28 cb             	movaps %xmm3,%xmm1
   1f30b:	0f 29 12             	movaps %xmm2,(%rdx)
   1f30e:	0f 28 51 17          	movaps 0x17(%rcx),%xmm2
   1f312:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f316:	0f 28 da             	movaps %xmm2,%xmm3
   1f319:	49 83 e8 10          	sub    $0x10,%r8
   1f31d:	76 3b                	jbe    1f35a <__intel_ssse3_strncpy+0x2a2a>
   1f31f:	66 0f 3a 0f d1 09    	palignr $0x9,%xmm1,%xmm2
   1f325:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f329:	0f 28 51 27          	movaps 0x27(%rcx),%xmm2
   1f32d:	0f 28 cb             	movaps %xmm3,%xmm1
   1f330:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f334:	49 83 e8 10          	sub    $0x10,%r8
   1f338:	76 20                	jbe    1f35a <__intel_ssse3_strncpy+0x2a2a>
   1f33a:	0f 28 ca             	movaps %xmm2,%xmm1
   1f33d:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f341:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f345:	49 83 e8 10          	sub    $0x10,%r8
   1f349:	76 0f                	jbe    1f35a <__intel_ssse3_strncpy+0x2a2a>
   1f34b:	0f 28 cf             	movaps %xmm7,%xmm1
   1f34e:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f352:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f356:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f35a:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f35e:	66 0f 73 de 07       	psrldq $0x7,%xmm6
   1f363:	66 0f 3a 0f f1 09    	palignr $0x9,%xmm1,%xmm6
   1f369:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f36d:	48 8d 76 07          	lea    0x7(%rsi),%rsi
   1f371:	e9 ea f2 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f376:	0f 28 da             	movaps %xmm2,%xmm3
   1f379:	49 83 c0 30          	add    $0x30,%r8
   1f37d:	7e 58                	jle    1f3d7 <__intel_ssse3_strncpy+0x2aa7>
   1f37f:	66 0f 3a 0f d1 0a    	palignr $0xa,%xmm1,%xmm2
   1f385:	0f 28 cb             	movaps %xmm3,%xmm1
   1f388:	0f 29 12             	movaps %xmm2,(%rdx)
   1f38b:	0f 28 51 16          	movaps 0x16(%rcx),%xmm2
   1f38f:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f393:	0f 28 da             	movaps %xmm2,%xmm3
   1f396:	49 83 e8 10          	sub    $0x10,%r8
   1f39a:	76 3b                	jbe    1f3d7 <__intel_ssse3_strncpy+0x2aa7>
   1f39c:	66 0f 3a 0f d1 0a    	palignr $0xa,%xmm1,%xmm2
   1f3a2:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f3a6:	0f 28 51 26          	movaps 0x26(%rcx),%xmm2
   1f3aa:	0f 28 cb             	movaps %xmm3,%xmm1
   1f3ad:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f3b1:	49 83 e8 10          	sub    $0x10,%r8
   1f3b5:	76 20                	jbe    1f3d7 <__intel_ssse3_strncpy+0x2aa7>
   1f3b7:	0f 28 ca             	movaps %xmm2,%xmm1
   1f3ba:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f3be:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f3c2:	49 83 e8 10          	sub    $0x10,%r8
   1f3c6:	76 0f                	jbe    1f3d7 <__intel_ssse3_strncpy+0x2aa7>
   1f3c8:	0f 28 cf             	movaps %xmm7,%xmm1
   1f3cb:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f3cf:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f3d3:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f3d7:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f3db:	66 0f 73 de 06       	psrldq $0x6,%xmm6
   1f3e0:	66 0f 3a 0f f1 0a    	palignr $0xa,%xmm1,%xmm6
   1f3e6:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f3ea:	48 8d 76 06          	lea    0x6(%rsi),%rsi
   1f3ee:	e9 6d f2 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f3f3:	0f 28 da             	movaps %xmm2,%xmm3
   1f3f6:	49 83 c0 30          	add    $0x30,%r8
   1f3fa:	7e 58                	jle    1f454 <__intel_ssse3_strncpy+0x2b24>
   1f3fc:	66 0f 3a 0f d1 0b    	palignr $0xb,%xmm1,%xmm2
   1f402:	0f 28 cb             	movaps %xmm3,%xmm1
   1f405:	0f 29 12             	movaps %xmm2,(%rdx)
   1f408:	0f 28 51 15          	movaps 0x15(%rcx),%xmm2
   1f40c:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f410:	0f 28 da             	movaps %xmm2,%xmm3
   1f413:	49 83 e8 10          	sub    $0x10,%r8
   1f417:	76 3b                	jbe    1f454 <__intel_ssse3_strncpy+0x2b24>
   1f419:	66 0f 3a 0f d1 0b    	palignr $0xb,%xmm1,%xmm2
   1f41f:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f423:	0f 28 51 25          	movaps 0x25(%rcx),%xmm2
   1f427:	0f 28 cb             	movaps %xmm3,%xmm1
   1f42a:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f42e:	49 83 e8 10          	sub    $0x10,%r8
   1f432:	76 20                	jbe    1f454 <__intel_ssse3_strncpy+0x2b24>
   1f434:	0f 28 ca             	movaps %xmm2,%xmm1
   1f437:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f43b:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f43f:	49 83 e8 10          	sub    $0x10,%r8
   1f443:	76 0f                	jbe    1f454 <__intel_ssse3_strncpy+0x2b24>
   1f445:	0f 28 cf             	movaps %xmm7,%xmm1
   1f448:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f44c:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f450:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f454:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f458:	66 0f 73 de 05       	psrldq $0x5,%xmm6
   1f45d:	66 0f 3a 0f f1 0b    	palignr $0xb,%xmm1,%xmm6
   1f463:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f467:	48 8d 76 05          	lea    0x5(%rsi),%rsi
   1f46b:	e9 f0 f1 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f470:	0f 28 da             	movaps %xmm2,%xmm3
   1f473:	49 83 c0 30          	add    $0x30,%r8
   1f477:	7e 58                	jle    1f4d1 <__intel_ssse3_strncpy+0x2ba1>
   1f479:	66 0f 3a 0f d1 0c    	palignr $0xc,%xmm1,%xmm2
   1f47f:	0f 28 cb             	movaps %xmm3,%xmm1
   1f482:	0f 29 12             	movaps %xmm2,(%rdx)
   1f485:	0f 28 51 14          	movaps 0x14(%rcx),%xmm2
   1f489:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f48d:	0f 28 da             	movaps %xmm2,%xmm3
   1f490:	49 83 e8 10          	sub    $0x10,%r8
   1f494:	76 3b                	jbe    1f4d1 <__intel_ssse3_strncpy+0x2ba1>
   1f496:	66 0f 3a 0f d1 0c    	palignr $0xc,%xmm1,%xmm2
   1f49c:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f4a0:	0f 28 51 24          	movaps 0x24(%rcx),%xmm2
   1f4a4:	0f 28 cb             	movaps %xmm3,%xmm1
   1f4a7:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f4ab:	49 83 e8 10          	sub    $0x10,%r8
   1f4af:	76 20                	jbe    1f4d1 <__intel_ssse3_strncpy+0x2ba1>
   1f4b1:	0f 28 ca             	movaps %xmm2,%xmm1
   1f4b4:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f4b8:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f4bc:	49 83 e8 10          	sub    $0x10,%r8
   1f4c0:	76 0f                	jbe    1f4d1 <__intel_ssse3_strncpy+0x2ba1>
   1f4c2:	0f 28 cf             	movaps %xmm7,%xmm1
   1f4c5:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f4c9:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f4cd:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f4d1:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f4d5:	66 0f 73 de 04       	psrldq $0x4,%xmm6
   1f4da:	66 0f 3a 0f f1 0c    	palignr $0xc,%xmm1,%xmm6
   1f4e0:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f4e4:	48 8d 76 04          	lea    0x4(%rsi),%rsi
   1f4e8:	e9 73 f1 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f4ed:	0f 28 da             	movaps %xmm2,%xmm3
   1f4f0:	49 83 c0 30          	add    $0x30,%r8
   1f4f4:	7e 58                	jle    1f54e <__intel_ssse3_strncpy+0x2c1e>
   1f4f6:	66 0f 3a 0f d1 0d    	palignr $0xd,%xmm1,%xmm2
   1f4fc:	0f 28 cb             	movaps %xmm3,%xmm1
   1f4ff:	0f 29 12             	movaps %xmm2,(%rdx)
   1f502:	0f 28 51 13          	movaps 0x13(%rcx),%xmm2
   1f506:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f50a:	0f 28 da             	movaps %xmm2,%xmm3
   1f50d:	49 83 e8 10          	sub    $0x10,%r8
   1f511:	76 3b                	jbe    1f54e <__intel_ssse3_strncpy+0x2c1e>
   1f513:	66 0f 3a 0f d1 0d    	palignr $0xd,%xmm1,%xmm2
   1f519:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f51d:	0f 28 51 23          	movaps 0x23(%rcx),%xmm2
   1f521:	0f 28 cb             	movaps %xmm3,%xmm1
   1f524:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f528:	49 83 e8 10          	sub    $0x10,%r8
   1f52c:	76 20                	jbe    1f54e <__intel_ssse3_strncpy+0x2c1e>
   1f52e:	0f 28 ca             	movaps %xmm2,%xmm1
   1f531:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f535:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f539:	49 83 e8 10          	sub    $0x10,%r8
   1f53d:	76 0f                	jbe    1f54e <__intel_ssse3_strncpy+0x2c1e>
   1f53f:	0f 28 cf             	movaps %xmm7,%xmm1
   1f542:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f546:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f54a:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f54e:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f552:	66 0f 73 de 03       	psrldq $0x3,%xmm6
   1f557:	66 0f 3a 0f f1 0d    	palignr $0xd,%xmm1,%xmm6
   1f55d:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f561:	48 8d 76 03          	lea    0x3(%rsi),%rsi
   1f565:	e9 f6 f0 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f56a:	0f 28 da             	movaps %xmm2,%xmm3
   1f56d:	49 83 c0 30          	add    $0x30,%r8
   1f571:	7e 58                	jle    1f5cb <__intel_ssse3_strncpy+0x2c9b>
   1f573:	66 0f 3a 0f d1 0e    	palignr $0xe,%xmm1,%xmm2
   1f579:	0f 28 cb             	movaps %xmm3,%xmm1
   1f57c:	0f 29 12             	movaps %xmm2,(%rdx)
   1f57f:	0f 28 51 12          	movaps 0x12(%rcx),%xmm2
   1f583:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f587:	0f 28 da             	movaps %xmm2,%xmm3
   1f58a:	49 83 e8 10          	sub    $0x10,%r8
   1f58e:	76 3b                	jbe    1f5cb <__intel_ssse3_strncpy+0x2c9b>
   1f590:	66 0f 3a 0f d1 0e    	palignr $0xe,%xmm1,%xmm2
   1f596:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f59a:	0f 28 51 22          	movaps 0x22(%rcx),%xmm2
   1f59e:	0f 28 cb             	movaps %xmm3,%xmm1
   1f5a1:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f5a5:	49 83 e8 10          	sub    $0x10,%r8
   1f5a9:	76 20                	jbe    1f5cb <__intel_ssse3_strncpy+0x2c9b>
   1f5ab:	0f 28 ca             	movaps %xmm2,%xmm1
   1f5ae:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f5b2:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f5b6:	49 83 e8 10          	sub    $0x10,%r8
   1f5ba:	76 0f                	jbe    1f5cb <__intel_ssse3_strncpy+0x2c9b>
   1f5bc:	0f 28 cf             	movaps %xmm7,%xmm1
   1f5bf:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f5c3:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f5c7:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f5cb:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f5cf:	66 0f 73 de 02       	psrldq $0x2,%xmm6
   1f5d4:	66 0f 3a 0f f1 0e    	palignr $0xe,%xmm1,%xmm6
   1f5da:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f5de:	48 8d 76 02          	lea    0x2(%rsi),%rsi
   1f5e2:	e9 79 f0 ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f5e7:	0f 28 da             	movaps %xmm2,%xmm3
   1f5ea:	49 83 c0 30          	add    $0x30,%r8
   1f5ee:	7e 58                	jle    1f648 <__intel_ssse3_strncpy+0x2d18>
   1f5f0:	66 0f 3a 0f d1 0f    	palignr $0xf,%xmm1,%xmm2
   1f5f6:	0f 28 cb             	movaps %xmm3,%xmm1
   1f5f9:	0f 29 12             	movaps %xmm2,(%rdx)
   1f5fc:	0f 28 51 11          	movaps 0x11(%rcx),%xmm2
   1f600:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f604:	0f 28 da             	movaps %xmm2,%xmm3
   1f607:	49 83 e8 10          	sub    $0x10,%r8
   1f60b:	76 3b                	jbe    1f648 <__intel_ssse3_strncpy+0x2d18>
   1f60d:	66 0f 3a 0f d1 0f    	palignr $0xf,%xmm1,%xmm2
   1f613:	0f 29 52 10          	movaps %xmm2,0x10(%rdx)
   1f617:	0f 28 51 21          	movaps 0x21(%rcx),%xmm2
   1f61b:	0f 28 cb             	movaps %xmm3,%xmm1
   1f61e:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f622:	49 83 e8 10          	sub    $0x10,%r8
   1f626:	76 20                	jbe    1f648 <__intel_ssse3_strncpy+0x2d18>
   1f628:	0f 28 ca             	movaps %xmm2,%xmm1
   1f62b:	0f 29 62 20          	movaps %xmm4,0x20(%rdx)
   1f62f:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f633:	49 83 e8 10          	sub    $0x10,%r8
   1f637:	76 0f                	jbe    1f648 <__intel_ssse3_strncpy+0x2d18>
   1f639:	0f 28 cf             	movaps %xmm7,%xmm1
   1f63c:	0f 29 6a 30          	movaps %xmm5,0x30(%rdx)
   1f640:	48 8d 76 10          	lea    0x10(%rsi),%rsi
   1f644:	4d 8d 40 f0          	lea    -0x10(%r8),%r8
   1f648:	0f 28 34 32          	movaps (%rdx,%rsi,1),%xmm6
   1f64c:	66 0f 73 de 01       	psrldq $0x1,%xmm6
   1f651:	66 0f 3a 0f f1 0f    	palignr $0xf,%xmm1,%xmm6
   1f657:	0f 29 34 32          	movaps %xmm6,(%rdx,%rsi,1)
   1f65b:	48 8d 76 01          	lea    0x1(%rsi),%rsi
   1f65f:	e9 fc ef ff ff       	jmpq   1e660 <__intel_ssse3_strncpy+0x1d30>
   1f664:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   1f669:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000001f670 <__intel_ssse3_strrchr>:
   1f670:	f3 0f 1e fa          	endbr64 
   1f674:	66 0f ef c0          	pxor   %xmm0,%xmm0
   1f678:	48 83 c2 10          	add    $0x10,%rdx
   1f67c:	66 0f 6f d1          	movdqa %xmm1,%xmm2
   1f680:	f3 0f 6f 1a          	movdqu (%rdx),%xmm3
   1f684:	66 0f 74 d3          	pcmpeqb %xmm3,%xmm2
   1f688:	66 0f 74 d8          	pcmpeqb %xmm0,%xmm3
   1f68c:	66 44 0f d7 d3       	pmovmskb %xmm3,%r10d
   1f691:	66 0f d7 ca          	pmovmskb %xmm2,%ecx
   1f695:	45 85 d2             	test   %r10d,%r10d
   1f698:	75 0f                	jne    1f6a9 <__intel_ssse3_strrchr+0x39>
   1f69a:	85 c9                	test   %ecx,%ecx
   1f69c:	74 da                	je     1f678 <__intel_ssse3_strrchr+0x8>
   1f69e:	0f bd c1             	bsr    %ecx,%eax
   1f6a1:	48 63 c0             	movslq %eax,%rax
   1f6a4:	48 03 c2             	add    %rdx,%rax
   1f6a7:	eb cf                	jmp    1f678 <__intel_ssse3_strrchr+0x8>
   1f6a9:	45 8d 5a ff          	lea    -0x1(%r10),%r11d
   1f6ad:	45 33 d3             	xor    %r11d,%r10d
   1f6b0:	41 23 ca             	and    %r10d,%ecx
   1f6b3:	74 09                	je     1f6be <__intel_ssse3_strrchr+0x4e>
   1f6b5:	0f bd c1             	bsr    %ecx,%eax
   1f6b8:	48 63 c0             	movslq %eax,%rax
   1f6bb:	48 03 c2             	add    %rdx,%rax
   1f6be:	c3                   	retq   
   1f6bf:	90                   	nop

000000000001f6c0 <__errno>:
#include <errno.h>

extern int *get_errno_addr(void);

int *__errno(void)
{
   1f6c0:	55                   	push   %rbp
   1f6c1:	48 89 e5             	mov    %rsp,%rbp
/*
 * get errno's address from TD section.
 */
    return get_errno_addr();
   1f6c4:	e8 33 3e fe ff       	callq  34fc <get_errno_addr>
}
   1f6c9:	5d                   	pop    %rbp
   1f6ca:	c3                   	retq   

000000000001f6cb <__strcspn>:
/*
 * Span the complement of string s2.
 */
size_t
__strcspn(const char *s1, const char *s2)
{
   1f6cb:	55                   	push   %rbp
   1f6cc:	48 89 e5             	mov    %rsp,%rbp
   1f6cf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1f6d3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)

	/*
	 * Stop as soon as we find any character from s2.  Note that there
	 * must be a NUL in s2; it suffices to stop when we find that, too.
	 */
	for (p = s1;;) {
   1f6d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f6db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		c = *p++;
   1f6df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f6e3:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f6e7:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1f6eb:	0f b6 00             	movzbl (%rax),%eax
   1f6ee:	88 45 ee             	mov    %al,-0x12(%rbp)
		spanp = s2;
   1f6f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f6f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		do {
			if ((sc = *spanp++) == c)
   1f6f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f6fd:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f701:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1f705:	0f b6 00             	movzbl (%rax),%eax
   1f708:	88 45 ef             	mov    %al,-0x11(%rbp)
   1f70b:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
   1f70f:	3a 45 ee             	cmp    -0x12(%rbp),%al
   1f712:	75 17                	jne    1f72b <__strcspn+0x60>
				return (p - 1 - s1);
   1f714:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f718:	48 83 e8 01          	sub    $0x1,%rax
   1f71c:	48 89 c2             	mov    %rax,%rdx
   1f71f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f723:	48 29 c2             	sub    %rax,%rdx
   1f726:	48 89 d0             	mov    %rdx,%rax
   1f729:	eb 08                	jmp    1f733 <__strcspn+0x68>
		} while (sc != 0);
   1f72b:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   1f72f:	75 c8                	jne    1f6f9 <__strcspn+0x2e>
		c = *p++;
   1f731:	eb ac                	jmp    1f6df <__strcspn+0x14>
	}
	/* NOTREACHED */
}
   1f733:	5d                   	pop    %rbp
   1f734:	c3                   	retq   

000000000001f735 <strcspn>:

size_t
strcspn(const char *s1, const char *s2)
{
   1f735:	55                   	push   %rbp
   1f736:	48 89 e5             	mov    %rsp,%rbp
   1f739:	48 83 ec 10          	sub    $0x10,%rsp
   1f73d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f741:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
#ifdef _TLIBC_USE_INTEL_FAST_STRING_
	return _intel_fast_strcspn(s1, s2);
   1f745:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f749:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f74d:	48 89 d6             	mov    %rdx,%rsi
   1f750:	48 89 c7             	mov    %rax,%rdi
   1f753:	e8 18 b6 ff ff       	callq  1ad70 <_intel_fast_strcspn>
#else
	return __strcspn(s1, s2);
#endif
}
   1f758:	c9                   	leaveq 
   1f759:	c3                   	retq   

000000000001f75a <__strpbrk>:
/*
 * Find the first occurrence in s1 of a character in s2 (excluding NUL).
 */
char *
__strpbrk(const char *s1, const char *s2)
{
   1f75a:	55                   	push   %rbp
   1f75b:	48 89 e5             	mov    %rsp,%rbp
   1f75e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f762:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const char *scanp;
	int c, sc;

	while ((c = *s1++) != 0) {
   1f766:	eb 37                	jmp    1f79f <__strpbrk+0x45>
		for (scanp = s2; (sc = *scanp++) != 0;)
   1f768:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f76c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f770:	eb 12                	jmp    1f784 <__strpbrk+0x2a>
			if (sc == c)
   1f772:	8b 45 f4             	mov    -0xc(%rbp),%eax
   1f775:	3b 45 f0             	cmp    -0x10(%rbp),%eax
   1f778:	75 0a                	jne    1f784 <__strpbrk+0x2a>
				return ((char *)(s1 - 1));
   1f77a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f77e:	48 83 e8 01          	sub    $0x1,%rax
   1f782:	eb 3b                	jmp    1f7bf <__strpbrk+0x65>
		for (scanp = s2; (sc = *scanp++) != 0;)
   1f784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f788:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f78c:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1f790:	0f b6 00             	movzbl (%rax),%eax
   1f793:	0f be c0             	movsbl %al,%eax
   1f796:	89 45 f4             	mov    %eax,-0xc(%rbp)
   1f799:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   1f79d:	75 d3                	jne    1f772 <__strpbrk+0x18>
	while ((c = *s1++) != 0) {
   1f79f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f7a3:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f7a7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   1f7ab:	0f b6 00             	movzbl (%rax),%eax
   1f7ae:	0f be c0             	movsbl %al,%eax
   1f7b1:	89 45 f0             	mov    %eax,-0x10(%rbp)
   1f7b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
   1f7b8:	75 ae                	jne    1f768 <__strpbrk+0xe>
	}
	return (NULL);
   1f7ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1f7bf:	5d                   	pop    %rbp
   1f7c0:	c3                   	retq   

000000000001f7c1 <strpbrk>:
extern char *_intel_fast_strpbrk(const char *, const char *);
#endif

char *
strpbrk(const char *s1, const char *s2)
{
   1f7c1:	55                   	push   %rbp
   1f7c2:	48 89 e5             	mov    %rsp,%rbp
   1f7c5:	48 83 ec 10          	sub    $0x10,%rsp
   1f7c9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f7cd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
#ifdef _TLIBC_USE_INTEL_FAST_STRING_
	return _intel_fast_strpbrk(s1, s2);
   1f7d1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f7d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f7d9:	48 89 d6             	mov    %rdx,%rsi
   1f7dc:	48 89 c7             	mov    %rax,%rdi
   1f7df:	e8 3c b6 ff ff       	callq  1ae20 <_intel_fast_strpbrk>
#else
	return __strpbrk(s1, s2);
#endif
}
   1f7e4:	c9                   	leaveq 
   1f7e5:	c3                   	retq   

000000000001f7e6 <__strspn>:
/*
 * Span the string s2 (skip characters that are in s2).
 */
size_t
__strspn(const char *s1, const char *s2)
{
   1f7e6:	55                   	push   %rbp
   1f7e7:	48 89 e5             	mov    %rsp,%rbp
   1f7ea:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1f7ee:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	const char *p = s1, *spanp;
   1f7f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f7f6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/*
	 * Skip any characters in s2, excluding the terminating \0.
	 */
cont:
	c = *p++;
   1f7fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f7fe:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f802:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1f806:	0f b6 00             	movzbl (%rax),%eax
   1f809:	88 45 ee             	mov    %al,-0x12(%rbp)
	for (spanp = s2; (sc = *spanp++) != 0;)
   1f80c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f810:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1f814:	eb 0b                	jmp    1f821 <__strspn+0x3b>
		if (sc == c)
   1f816:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
   1f81a:	3a 45 ee             	cmp    -0x12(%rbp),%al
   1f81d:	75 02                	jne    1f821 <__strspn+0x3b>
			goto cont;
   1f81f:	eb d9                	jmp    1f7fa <__strspn+0x14>
	for (spanp = s2; (sc = *spanp++) != 0;)
   1f821:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f825:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f829:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   1f82d:	0f b6 00             	movzbl (%rax),%eax
   1f830:	88 45 ef             	mov    %al,-0x11(%rbp)
   1f833:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
   1f837:	75 dd                	jne    1f816 <__strspn+0x30>
	return (p - 1 - s1);
   1f839:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f83d:	48 83 e8 01          	sub    $0x1,%rax
   1f841:	48 89 c2             	mov    %rax,%rdx
   1f844:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f848:	48 29 c2             	sub    %rax,%rdx
   1f84b:	48 89 d0             	mov    %rdx,%rax
}
   1f84e:	5d                   	pop    %rbp
   1f84f:	c3                   	retq   

000000000001f850 <strspn>:


size_t
strspn(const char *s1, const char *s2)
{
   1f850:	55                   	push   %rbp
   1f851:	48 89 e5             	mov    %rsp,%rbp
   1f854:	48 83 ec 10          	sub    $0x10,%rsp
   1f858:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f85c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
#ifdef _TLIBC_USE_INTEL_FAST_STRING_
	return _intel_fast_strspn(s1, s2);
   1f860:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f864:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f868:	48 89 d6             	mov    %rdx,%rsi
   1f86b:	48 89 c7             	mov    %rax,%rdi
   1f86e:	e8 2d b6 ff ff       	callq  1aea0 <_intel_fast_strspn>
#else
	return __strspn(s1, s2);
#endif
}
   1f873:	c9                   	leaveq 
   1f874:	c3                   	retq   

000000000001f875 <strtok_r>:

#include <string.h>

char *
strtok_r(char *s, const char *delim, char **last)
{
   1f875:	55                   	push   %rbp
   1f876:	48 89 e5             	mov    %rsp,%rbp
   1f879:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   1f87d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   1f881:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	const char *spanp;
	int c, sc;
	char *tok;


	if (s == NULL && (s = *last) == NULL)
   1f885:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   1f88a:	75 1c                	jne    1f8a8 <strtok_r+0x33>
   1f88c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f890:	48 8b 00             	mov    (%rax),%rax
   1f893:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   1f897:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   1f89c:	75 0a                	jne    1f8a8 <strtok_r+0x33>
		return (NULL);
   1f89e:	b8 00 00 00 00       	mov    $0x0,%eax
   1f8a3:	e9 d7 00 00 00       	jmpq   1f97f <strtok_r+0x10a>

	/*
	 * Skip (span) leading delimiters (s += strspn(s, delim), sort of).
	 */
cont:
   1f8a8:	90                   	nop
	c = *s++;
   1f8a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f8ad:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f8b1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1f8b5:	0f b6 00             	movzbl (%rax),%eax
   1f8b8:	0f be c0             	movsbl %al,%eax
   1f8bb:	89 45 e8             	mov    %eax,-0x18(%rbp)
	for (spanp = delim; (sc = *spanp++) != 0;) {
   1f8be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f8c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   1f8c6:	eb 0a                	jmp    1f8d2 <strtok_r+0x5d>
		if (c == sc)
   1f8c8:	8b 45 e8             	mov    -0x18(%rbp),%eax
   1f8cb:	3b 45 ec             	cmp    -0x14(%rbp),%eax
   1f8ce:	75 02                	jne    1f8d2 <strtok_r+0x5d>
			goto cont;
   1f8d0:	eb d7                	jmp    1f8a9 <strtok_r+0x34>
	for (spanp = delim; (sc = *spanp++) != 0;) {
   1f8d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f8d6:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f8da:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1f8de:	0f b6 00             	movzbl (%rax),%eax
   1f8e1:	0f be c0             	movsbl %al,%eax
   1f8e4:	89 45 ec             	mov    %eax,-0x14(%rbp)
   1f8e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   1f8eb:	75 db                	jne    1f8c8 <strtok_r+0x53>
	}

	if (c == 0) {		/* no non-delimiter characters */
   1f8ed:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
   1f8f1:	75 12                	jne    1f905 <strtok_r+0x90>
		*last = NULL;
   1f8f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f8f7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return (NULL);
   1f8fe:	b8 00 00 00 00       	mov    $0x0,%eax
   1f903:	eb 7a                	jmp    1f97f <strtok_r+0x10a>
	}
	tok = s - 1;
   1f905:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f909:	48 83 e8 01          	sub    $0x1,%rax
   1f90d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	/*
	 * Scan token (scan for delimiters: s += strcspn(s, delim), sort of).
	 * Note that delim must have one NUL; we stop if we see that, too.
	 */
	for (;;) {
		c = *s++;
   1f911:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f915:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f919:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   1f91d:	0f b6 00             	movzbl (%rax),%eax
   1f920:	0f be c0             	movsbl %al,%eax
   1f923:	89 45 e8             	mov    %eax,-0x18(%rbp)
		spanp = delim;
   1f926:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1f92a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		do {
			if ((sc = *spanp++) == c) {
   1f92e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   1f932:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1f936:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   1f93a:	0f b6 00             	movzbl (%rax),%eax
   1f93d:	0f be c0             	movsbl %al,%eax
   1f940:	89 45 ec             	mov    %eax,-0x14(%rbp)
   1f943:	8b 45 ec             	mov    -0x14(%rbp),%eax
   1f946:	3b 45 e8             	cmp    -0x18(%rbp),%eax
   1f949:	75 2c                	jne    1f977 <strtok_r+0x102>
				if (c == 0)
   1f94b:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
   1f94f:	75 0a                	jne    1f95b <strtok_r+0xe6>
					s = NULL;
   1f951:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
   1f958:	00 
   1f959:	eb 0b                	jmp    1f966 <strtok_r+0xf1>
				else
					s[-1] = '\0';
   1f95b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1f95f:	48 83 e8 01          	sub    $0x1,%rax
   1f963:	c6 00 00             	movb   $0x0,(%rax)
				*last = s;
   1f966:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1f96a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   1f96e:	48 89 10             	mov    %rdx,(%rax)
				return (tok);
   1f971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f975:	eb 08                	jmp    1f97f <strtok_r+0x10a>
			}
		} while (sc != 0);
   1f977:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   1f97b:	75 b1                	jne    1f92e <strtok_r+0xb9>
		c = *s++;
   1f97d:	eb 92                	jmp    1f911 <strtok_r+0x9c>
	}
	/* NOTREACHED */
}
   1f97f:	5d                   	pop    %rbp
   1f980:	c3                   	retq   

000000000001f981 <strtok>:
extern char *_intel_fast_strtok(char *, const char *);
#endif

char *
strtok(char *s, const char *delim)
{
   1f981:	55                   	push   %rbp
   1f982:	48 89 e5             	mov    %rsp,%rbp
   1f985:	48 83 ec 10          	sub    $0x10,%rsp
   1f989:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   1f98d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
#ifdef _TLIBC_USE_INTEL_FAST_STRING_
	return _intel_fast_strtok(s, delim);
   1f991:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   1f995:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   1f999:	48 89 d6             	mov    %rdx,%rsi
   1f99c:	48 89 c7             	mov    %rax,%rdi
   1f99f:	e8 1c b5 ff ff       	callq  1aec0 <_intel_fast_strtok>
#else
	static _TLIBC_THREAD_ char *last = NULL;
	return strtok_r(s, delim, &last);
#endif
}
   1f9a4:	c9                   	leaveq 
   1f9a5:	c3                   	retq   

000000000001f9a6 <__sprint>:
 * Flush out all the vectors defined by the given uio,
 * then reset it so that it can be reused.
 */
static int
__sprint(FILE *fp, struct __suio *uio)
{
   1f9a6:	55                   	push   %rbp
   1f9a7:	48 89 e5             	mov    %rsp,%rbp
   1f9aa:	48 83 ec 20          	sub    $0x20,%rsp
   1f9ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   1f9b2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int err;

	if (uio->uio_resid == 0) {
   1f9b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f9ba:	8b 40 0c             	mov    0xc(%rax),%eax
   1f9bd:	85 c0                	test   %eax,%eax
   1f9bf:	75 12                	jne    1f9d3 <__sprint+0x2d>
		uio->uio_iovcnt = 0;
   1f9c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f9c5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
		return (0);
   1f9cc:	b8 00 00 00 00       	mov    $0x0,%eax
   1f9d1:	eb 2f                	jmp    1fa02 <__sprint+0x5c>
	}
	err = __sfvwrite(fp, uio);
   1f9d3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1f9d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   1f9db:	48 89 d6             	mov    %rdx,%rsi
   1f9de:	48 89 c7             	mov    %rax,%rdi
   1f9e1:	e8 30 af 00 00       	callq  2a916 <__sfvwrite>
   1f9e6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	uio->uio_resid = 0;
   1f9e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f9ed:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
	uio->uio_iovcnt = 0;
   1f9f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1f9f8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
	return (err);
   1f9ff:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
   1fa02:	c9                   	leaveq 
   1fa03:	c3                   	retq   

000000000001fa04 <__wcsconv>:
 * bytes to output, and also means that we can't assume that the wide char
 * string is null-terminated.
 */
static char *
__wcsconv(wchar_t *wcsarg, int prec)
{
   1fa04:	55                   	push   %rbp
   1fa05:	48 89 e5             	mov    %rsp,%rbp
   1fa08:	48 83 ec 50          	sub    $0x50,%rsp
   1fa0c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   1fa10:	89 75 b4             	mov    %esi,-0x4c(%rbp)
   1fa13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1fa1a:	00 00 
   1fa1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1fa20:	31 c0                	xor    %eax,%eax
	wchar_t *p;
	char *convbuf;
	size_t clen, nbytes;

	/* Allocate space for the maximum number of bytes we could output. */
	if (prec < 0) {
   1fa22:	83 7d b4 00          	cmpl   $0x0,-0x4c(%rbp)
   1fa26:	79 5f                	jns    1fa87 <__wcsconv+0x83>
		memset(&mbs, 0, sizeof(mbs));
   1fa28:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   1fa2c:	ba 08 00 00 00       	mov    $0x8,%edx
   1fa31:	be 00 00 00 00       	mov    $0x0,%esi
   1fa36:	48 89 c7             	mov    %rax,%rdi
   1fa39:	e8 1a ee fe ff       	callq  e858 <memset>
		p = wcsarg;
   1fa3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1fa42:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		nbytes = wcsrtombs(NULL, (const wchar_t **)&p, 0, &mbs);
   1fa46:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
   1fa4a:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
   1fa4e:	48 89 d1             	mov    %rdx,%rcx
   1fa51:	ba 00 00 00 00       	mov    $0x0,%edx
   1fa56:	48 89 c6             	mov    %rax,%rsi
   1fa59:	bf 00 00 00 00       	mov    $0x0,%edi
   1fa5e:	e8 2e d2 00 00       	callq  2cc91 <wcsrtombs>
   1fa63:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		if (nbytes == (size_t)-1) {
   1fa67:	48 83 7d d0 ff       	cmpq   $0xffffffffffffffff,-0x30(%rbp)
   1fa6c:	0f 85 bc 00 00 00    	jne    1fb2e <__wcsconv+0x12a>
			errno = EILSEQ;
   1fa72:	e8 49 fc ff ff       	callq  1f6c0 <__errno>
   1fa77:	c7 00 54 00 00 00    	movl   $0x54,(%rax)
			return (NULL);
   1fa7d:	b8 00 00 00 00       	mov    $0x0,%eax
   1fa82:	e9 3a 01 00 00       	jmpq   1fbc1 <__wcsconv+0x1bd>
		/*
		 * Optimisation: if the output precision is small enough,
		 * just allocate enough memory for the maximum instead of
		 * scanning the string.
		 */
		if (prec < 128)
   1fa87:	83 7d b4 7f          	cmpl   $0x7f,-0x4c(%rbp)
   1fa8b:	7f 0e                	jg     1fa9b <__wcsconv+0x97>
			nbytes = prec;
   1fa8d:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   1fa90:	48 98                	cltq   
   1fa92:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1fa96:	e9 93 00 00 00       	jmpq   1fb2e <__wcsconv+0x12a>
		else {
			nbytes = 0;
   1fa9b:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   1faa2:	00 
			p = wcsarg;
   1faa3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1faa7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			memset(&mbs, 0, sizeof(mbs));
   1faab:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   1faaf:	ba 08 00 00 00       	mov    $0x8,%edx
   1fab4:	be 00 00 00 00       	mov    $0x0,%esi
   1fab9:	48 89 c7             	mov    %rax,%rdi
   1fabc:	e8 97 ed fe ff       	callq  e858 <memset>
			for (;;) {
				clen = wcrtomb(buf, *p++, &mbs);
   1fac1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   1fac5:	48 8d 50 04          	lea    0x4(%rax),%rdx
   1fac9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   1facd:	8b 08                	mov    (%rax),%ecx
   1facf:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
   1fad3:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
   1fad7:	89 ce                	mov    %ecx,%esi
   1fad9:	48 89 c7             	mov    %rax,%rdi
   1fadc:	e8 50 d1 00 00       	callq  2cc31 <wcrtomb>
   1fae1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
				if (clen == 0 || clen == (size_t)-1 ||
   1fae5:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   1faea:	74 26                	je     1fb12 <__wcsconv+0x10e>
   1faec:	48 83 7d d8 ff       	cmpq   $0xffffffffffffffff,-0x28(%rbp)
   1faf1:	74 1f                	je     1fb12 <__wcsconv+0x10e>
				    nbytes + clen > (size_t)prec)
   1faf3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1faf7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fafb:	48 01 c2             	add    %rax,%rdx
   1fafe:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   1fb01:	48 98                	cltq   
				if (clen == 0 || clen == (size_t)-1 ||
   1fb03:	48 39 c2             	cmp    %rax,%rdx
   1fb06:	77 0a                	ja     1fb12 <__wcsconv+0x10e>
					break;
				nbytes += clen;
   1fb08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   1fb0c:	48 01 45 d0          	add    %rax,-0x30(%rbp)
				clen = wcrtomb(buf, *p++, &mbs);
   1fb10:	eb af                	jmp    1fac1 <__wcsconv+0xbd>
			}
			if (clen == (size_t)-1) {
   1fb12:	48 83 7d d8 ff       	cmpq   $0xffffffffffffffff,-0x28(%rbp)
   1fb17:	75 15                	jne    1fb2e <__wcsconv+0x12a>
				errno = EILSEQ;
   1fb19:	e8 a2 fb ff ff       	callq  1f6c0 <__errno>
   1fb1e:	c7 00 54 00 00 00    	movl   $0x54,(%rax)
				return (NULL);
   1fb24:	b8 00 00 00 00       	mov    $0x0,%eax
   1fb29:	e9 93 00 00 00       	jmpq   1fbc1 <__wcsconv+0x1bd>
			}
		}
	}
	if ((convbuf = (char *)malloc(nbytes + 1)) == NULL)
   1fb2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1fb32:	48 83 c0 01          	add    $0x1,%rax
   1fb36:	48 89 c7             	mov    %rax,%rdi
   1fb39:	e8 e7 b5 fe ff       	callq  b125 <dlmalloc>
   1fb3e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   1fb42:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   1fb47:	75 07                	jne    1fb50 <__wcsconv+0x14c>
		return (NULL);
   1fb49:	b8 00 00 00 00       	mov    $0x0,%eax
   1fb4e:	eb 71                	jmp    1fbc1 <__wcsconv+0x1bd>

	/* Fill the output buffer. */
	p = wcsarg;
   1fb50:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   1fb54:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	memset(&mbs, 0, sizeof(mbs));
   1fb58:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
   1fb5c:	ba 08 00 00 00       	mov    $0x8,%edx
   1fb61:	be 00 00 00 00       	mov    $0x0,%esi
   1fb66:	48 89 c7             	mov    %rax,%rdi
   1fb69:	e8 ea ec fe ff       	callq  e858 <memset>
	if ((nbytes = wcsrtombs(convbuf, (const wchar_t **)&p,
   1fb6e:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
   1fb72:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   1fb76:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
   1fb7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fb7e:	48 89 c7             	mov    %rax,%rdi
   1fb81:	e8 0b d1 00 00       	callq  2cc91 <wcsrtombs>
   1fb86:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   1fb8a:	48 83 7d d0 ff       	cmpq   $0xffffffffffffffff,-0x30(%rbp)
   1fb8f:	75 1e                	jne    1fbaf <__wcsconv+0x1ab>
	    nbytes, &mbs)) == (size_t)-1) {
		free(convbuf);
   1fb91:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   1fb95:	48 89 c7             	mov    %rax,%rdi
   1fb98:	e8 7f c0 fe ff       	callq  bc1c <dlfree>
		errno = EILSEQ;
   1fb9d:	e8 1e fb ff ff       	callq  1f6c0 <__errno>
   1fba2:	c7 00 54 00 00 00    	movl   $0x54,(%rax)
		return (NULL);
   1fba8:	b8 00 00 00 00       	mov    $0x0,%eax
   1fbad:	eb 12                	jmp    1fbc1 <__wcsconv+0x1bd>
	}
	convbuf[nbytes] = '\0';
   1fbaf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   1fbb3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   1fbb7:	48 01 d0             	add    %rdx,%rax
   1fbba:	c6 00 00             	movb   $0x0,(%rax)
	return (convbuf);
   1fbbd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
}
   1fbc1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   1fbc5:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   1fbcc:	00 00 
   1fbce:	74 05                	je     1fbd5 <__wcsconv+0x1d1>
   1fbd0:	e8 c3 53 fe ff       	callq  4f98 <__stack_chk_fail>
   1fbd5:	c9                   	leaveq 
   1fbd6:	c3                   	retq   

000000000001fbd7 <__vfprintf>:
#define CHARINT		0x0800		/* 8 bit integer */
#define MAXINT		0x1000		/* largest integer size (intmax_t) */

int
__vfprintf(FILE *fp, const char *fmt0, __va_list ap)
{
   1fbd7:	55                   	push   %rbp
   1fbd8:	48 89 e5             	mov    %rsp,%rbp
   1fbdb:	48 81 ec d0 02 00 00 	sub    $0x2d0,%rsp
   1fbe2:	48 89 bd 48 fd ff ff 	mov    %rdi,-0x2b8(%rbp)
   1fbe9:	48 89 b5 40 fd ff ff 	mov    %rsi,-0x2c0(%rbp)
   1fbf0:	48 89 95 38 fd ff ff 	mov    %rdx,-0x2c8(%rbp)
   1fbf7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   1fbfe:	00 00 
   1fc00:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   1fc04:	31 c0                	xor    %eax,%eax
	 * C:	cp points to the string MMMNNN.  Leading and trailing
	 *	zeros are not in the string and must be added.
	 * D:	expchar holds this character; '\0' if no exponent, e.g. %f
	 * F:	at least two digits for decimal, at least one digit for hex
	 */
	char *decimal_point = ".";
   1fc06:	48 8d 05 83 0d 01 00 	lea    0x10d83(%rip),%rax        # 30990 <__func__.2393+0x797>
   1fc0d:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
	char *dtoaend;		/* pointer to end of converted digits */
	int expsize;		/* character count for expstr */
	int lead;		/* sig figs before decimal or group sep */
	int ndig;		/* actual number of digits returned by dtoa */
	char expstr[MAXEXPDIG+2];	/* buffer for exponent string: e+ZZZ */
	char *dtoaresult = NULL;
   1fc14:	48 c7 85 d8 fd ff ff 	movq   $0x0,-0x228(%rbp)
   1fc1b:	00 00 00 00 
*/
#define GETARG(type) \
	((argtable != NULL) ? *((type*)(&argtable[nextarg++])) : \
		(nextarg++, va_arg(ap, type)))

	_SET_ORIENTATION(fp, -1);
   1fc1f:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   1fc26:	48 8b 40 30          	mov    0x30(%rax),%rax
   1fc2a:	48 85 c0             	test   %rax,%rax
   1fc2d:	74 11                	je     1fc40 <__vfprintf+0x69>
   1fc2f:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   1fc36:	48 8b 40 30          	mov    0x30(%rax),%rax
   1fc3a:	48 83 c0 10          	add    $0x10,%rax
   1fc3e:	eb 05                	jmp    1fc45 <__vfprintf+0x6e>
   1fc40:	b8 00 00 00 00       	mov    $0x0,%eax
   1fc45:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
   1fc4c:	48 83 bd 00 fe ff ff 	cmpq   $0x0,-0x200(%rbp)
   1fc53:	00 
   1fc54:	74 1c                	je     1fc72 <__vfprintf+0x9b>
   1fc56:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
   1fc5d:	8b 40 20             	mov    0x20(%rax),%eax
   1fc60:	85 c0                	test   %eax,%eax
   1fc62:	75 0e                	jne    1fc72 <__vfprintf+0x9b>
   1fc64:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
   1fc6b:	c7 40 20 ff ff ff ff 	movl   $0xffffffff,0x20(%rax)
		errno = EBADF;
		return (EOF);
	}

	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   1fc72:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   1fc79:	0f b7 40 10          	movzwl 0x10(%rax),%eax
   1fc7d:	98                   	cwtl   
   1fc7e:	83 e0 1a             	and    $0x1a,%eax
   1fc81:	83 f8 0a             	cmp    $0xa,%eax
   1fc84:	75 25                	jne    1fcab <__vfprintf+0xd4>
	    fp->_file >= 0) {
   1fc86:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   1fc8d:	0f b7 40 12          	movzwl 0x12(%rax),%eax
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   1fc91:	66 85 c0             	test   %ax,%ax
   1fc94:	78 15                	js     1fcab <__vfprintf+0xd4>
	    //return (__sbprintf(fp, fmt0, ap));
		errno = EBADF;
   1fc96:	e8 25 fa ff ff       	callq  1f6c0 <__errno>
   1fc9b:	c7 00 09 00 00 00    	movl   $0x9,(%rax)
		return (EOF);
   1fca1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1fca6:	e9 94 43 00 00       	jmpq   2403f <__vfprintf+0x4468>
	}

	fmt = (char *)fmt0;
   1fcab:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
   1fcb2:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
	argtable = NULL;
   1fcb9:	48 c7 85 b0 fd ff ff 	movq   $0x0,-0x250(%rbp)
   1fcc0:	00 00 00 00 
	nextarg = 1;
   1fcc4:	c7 85 9c fd ff ff 01 	movl   $0x1,-0x264(%rbp)
   1fccb:	00 00 00 
	va_copy(orgap, ap);
   1fcce:	48 8d 8d 68 fe ff ff 	lea    -0x198(%rbp),%rcx
   1fcd5:	48 8b b5 38 fd ff ff 	mov    -0x2c8(%rbp),%rsi
   1fcdc:	48 8b 06             	mov    (%rsi),%rax
   1fcdf:	48 8b 56 08          	mov    0x8(%rsi),%rdx
   1fce3:	48 89 01             	mov    %rax,(%rcx)
   1fce6:	48 89 51 08          	mov    %rdx,0x8(%rcx)
   1fcea:	48 8b 46 10          	mov    0x10(%rsi),%rax
   1fcee:	48 89 41 10          	mov    %rax,0x10(%rcx)
	uio.uio_iov = iovp = iov;
   1fcf2:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   1fcf9:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   1fd00:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   1fd07:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
	uio.uio_resid = 0;
   1fd0e:	c7 85 4c fe ff ff 00 	movl   $0x0,-0x1b4(%rbp)
   1fd15:	00 00 00 
	uio.uio_iovcnt = 0;
   1fd18:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
   1fd1f:	00 00 00 
	ret = 0;
   1fd22:	c7 85 74 fd ff ff 00 	movl   $0x0,-0x28c(%rbp)
   1fd29:	00 00 00 
#ifdef PRINTF_WIDE_CHAR
	convbuf = NULL;
   1fd2c:	48 c7 85 f0 fd ff ff 	movq   $0x0,-0x210(%rbp)
   1fd33:	00 00 00 00 
#endif

	memset(&ps, 0, sizeof(ps));
   1fd37:	48 8d 85 58 fe ff ff 	lea    -0x1a8(%rbp),%rax
   1fd3e:	ba 08 00 00 00       	mov    $0x8,%edx
   1fd43:	be 00 00 00 00       	mov    $0x0,%esi
   1fd48:	48 89 c7             	mov    %rax,%rdi
   1fd4b:	e8 08 eb fe ff       	callq  e858 <memset>
	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
		cp = fmt;
   1fd50:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
   1fd57:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
		while ((n = mbrtowc(&wc, fmt, MB_CUR_MAX, &ps)) > 0) {
   1fd5e:	eb 24                	jmp    1fd84 <__vfprintf+0x1ad>
			fmt += n;
   1fd60:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   1fd66:	48 98                	cltq   
   1fd68:	48 01 85 c0 fd ff ff 	add    %rax,-0x240(%rbp)
			if (wc == '%') {
   1fd6f:	8b 85 58 fd ff ff    	mov    -0x2a8(%rbp),%eax
   1fd75:	83 f8 25             	cmp    $0x25,%eax
   1fd78:	75 0a                	jne    1fd84 <__vfprintf+0x1ad>
				fmt--;
   1fd7a:	48 83 ad c0 fd ff ff 	subq   $0x1,-0x240(%rbp)
   1fd81:	01 
				break;
   1fd82:	eb 34                	jmp    1fdb8 <__vfprintf+0x1e1>
		while ((n = mbrtowc(&wc, fmt, MB_CUR_MAX, &ps)) > 0) {
   1fd84:	48 8d 95 58 fe ff ff 	lea    -0x1a8(%rbp),%rdx
   1fd8b:	48 8b b5 c0 fd ff ff 	mov    -0x240(%rbp),%rsi
   1fd92:	48 8d 85 58 fd ff ff 	lea    -0x2a8(%rbp),%rax
   1fd99:	48 89 d1             	mov    %rdx,%rcx
   1fd9c:	ba 01 00 00 00       	mov    $0x1,%edx
   1fda1:	48 89 c7             	mov    %rax,%rdi
   1fda4:	e8 34 cd 00 00       	callq  2cadd <mbrtowc>
   1fda9:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   1fdaf:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   1fdb6:	7f a8                	jg     1fd60 <__vfprintf+0x189>
			}
		}
		if (fmt != cp) {
   1fdb8:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
   1fdbf:	48 3b 85 c8 fd ff ff 	cmp    -0x238(%rbp),%rax
   1fdc6:	0f 84 e5 00 00 00    	je     1feb1 <__vfprintf+0x2da>
			ptrdiff_t m = fmt - cp;
   1fdcc:	48 8b 95 c0 fd ff ff 	mov    -0x240(%rbp),%rdx
   1fdd3:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   1fdda:	48 29 c2             	sub    %rax,%rdx
   1fddd:	48 89 d0             	mov    %rdx,%rax
   1fde0:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
			if (m < 0 || m > INT_MAX - ret)
   1fde7:	48 83 bd 08 fe ff ff 	cmpq   $0x0,-0x1f8(%rbp)
   1fdee:	00 
   1fdef:	0f 88 9f 41 00 00    	js     23f94 <__vfprintf+0x43bd>
   1fdf5:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   1fdfa:	2b 85 74 fd ff ff    	sub    -0x28c(%rbp),%eax
   1fe00:	48 98                	cltq   
   1fe02:	48 39 85 08 fe ff ff 	cmp    %rax,-0x1f8(%rbp)
   1fe09:	0f 8f 85 41 00 00    	jg     23f94 <__vfprintf+0x43bd>
				goto overflow;
			PRINT(cp, m);
   1fe0f:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   1fe16:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
   1fe1d:	48 89 10             	mov    %rdx,(%rax)
   1fe20:	48 8b 95 08 fe ff ff 	mov    -0x1f8(%rbp),%rdx
   1fe27:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   1fe2e:	48 89 50 08          	mov    %rdx,0x8(%rax)
   1fe32:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   1fe38:	89 c2                	mov    %eax,%edx
   1fe3a:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
   1fe41:	01 d0                	add    %edx,%eax
   1fe43:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   1fe49:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   1fe50:	10 
   1fe51:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   1fe57:	83 c0 01             	add    $0x1,%eax
   1fe5a:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   1fe60:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   1fe66:	83 f8 07             	cmp    $0x7,%eax
   1fe69:	7e 2f                	jle    1fe9a <__vfprintf+0x2c3>
   1fe6b:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   1fe72:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   1fe79:	48 89 d6             	mov    %rdx,%rsi
   1fe7c:	48 89 c7             	mov    %rax,%rdi
   1fe7f:	e8 22 fb ff ff       	callq  1f9a6 <__sprint>
   1fe84:	85 c0                	test   %eax,%eax
   1fe86:	0f 85 8e 40 00 00    	jne    23f1a <__vfprintf+0x4343>
   1fe8c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   1fe93:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
			ret += m;
   1fe9a:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
   1fea1:	89 c2                	mov    %eax,%edx
   1fea3:	8b 85 74 fd ff ff    	mov    -0x28c(%rbp),%eax
   1fea9:	01 d0                	add    %edx,%eax
   1feab:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%rbp)
		}
		if (n <= 0)
   1feb1:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   1feb8:	0f 8e 17 40 00 00    	jle    23ed5 <__vfprintf+0x42fe>
			goto done;
		fmt++;		/* skip over '%' */
   1febe:	48 83 85 c0 fd ff ff 	addq   $0x1,-0x240(%rbp)
   1fec5:	01 

		flags = 0;
   1fec6:	c7 85 70 fd ff ff 00 	movl   $0x0,-0x290(%rbp)
   1fecd:	00 00 00 
		dprec = 0;
   1fed0:	c7 85 90 fd ff ff 00 	movl   $0x0,-0x270(%rbp)
   1fed7:	00 00 00 
		width = 0;
   1feda:	c7 85 78 fd ff ff 00 	movl   $0x0,-0x288(%rbp)
   1fee1:	00 00 00 
		prec = -1;
   1fee4:	c7 85 7c fd ff ff ff 	movl   $0xffffffff,-0x284(%rbp)
   1feeb:	ff ff ff 
		sign = '\0';
   1feee:	c6 85 56 fd ff ff 00 	movb   $0x0,-0x2aa(%rbp)
		ox[1] = '\0';
   1fef5:	c6 45 87 00          	movb   $0x0,-0x79(%rbp)

rflag:		ch = *fmt++;
   1fef9:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
   1ff00:	48 8d 50 01          	lea    0x1(%rax),%rdx
   1ff04:	48 89 95 c0 fd ff ff 	mov    %rdx,-0x240(%rbp)
   1ff0b:	0f b6 00             	movzbl (%rax),%eax
   1ff0e:	0f be c0             	movsbl %al,%eax
   1ff11:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%rbp)
reswitch:	switch (ch) {
   1ff17:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   1ff1d:	83 e8 20             	sub    $0x20,%eax
   1ff20:	83 f8 5a             	cmp    $0x5a,%eax
   1ff23:	0f 87 93 2c 00 00    	ja     22bbc <__vfprintf+0x2fe5>
   1ff29:	89 c0                	mov    %eax,%eax
   1ff2b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   1ff32:	00 
   1ff33:	48 8d 05 8a 0a 01 00 	lea    0x10a8a(%rip),%rax        # 309c4 <__func__.2393+0x7cb>
   1ff3a:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   1ff3d:	48 63 d0             	movslq %eax,%rdx
   1ff40:	48 8d 05 7d 0a 01 00 	lea    0x10a7d(%rip),%rax        # 309c4 <__func__.2393+0x7cb>
   1ff47:	48 01 d0             	add    %rdx,%rax
   1ff4a:	ff e0                	jmpq   *%rax
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   1ff4c:	0f b6 85 56 fd ff ff 	movzbl -0x2aa(%rbp),%eax
   1ff53:	84 c0                	test   %al,%al
   1ff55:	75 a2                	jne    1fef9 <__vfprintf+0x322>
				sign = ' ';
   1ff57:	c6 85 56 fd ff ff 20 	movb   $0x20,-0x2aa(%rbp)
			goto rflag;
   1ff5e:	eb 99                	jmp    1fef9 <__vfprintf+0x322>
		case '#':
			flags |= ALT;
   1ff60:	83 8d 70 fd ff ff 01 	orl    $0x1,-0x290(%rbp)
			goto rflag;
   1ff67:	eb 90                	jmp    1fef9 <__vfprintf+0x322>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			GETASTER(width);
   1ff69:	c7 85 6c fd ff ff 00 	movl   $0x0,-0x294(%rbp)
   1ff70:	00 00 00 
   1ff73:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
   1ff7a:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   1ff81:	eb 68                	jmp    1ffeb <__vfprintf+0x414>
   1ff83:	81 bd 6c fd ff ff cc 	cmpl   $0xccccccc,-0x294(%rbp)
   1ff8a:	cc cc 0c 
   1ff8d:	0f 8f 04 40 00 00    	jg     23f97 <__vfprintf+0x43c0>
   1ff93:	8b 95 6c fd ff ff    	mov    -0x294(%rbp),%edx
   1ff99:	89 d0                	mov    %edx,%eax
   1ff9b:	c1 e0 02             	shl    $0x2,%eax
   1ff9e:	01 d0                	add    %edx,%eax
   1ffa0:	01 c0                	add    %eax,%eax
   1ffa2:	89 85 6c fd ff ff    	mov    %eax,-0x294(%rbp)
   1ffa8:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   1ffaf:	0f b6 00             	movzbl (%rax),%eax
   1ffb2:	0f be c0             	movsbl %al,%eax
   1ffb5:	83 e8 30             	sub    $0x30,%eax
   1ffb8:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
   1ffbd:	29 c2                	sub    %eax,%edx
   1ffbf:	89 d0                	mov    %edx,%eax
   1ffc1:	39 85 6c fd ff ff    	cmp    %eax,-0x294(%rbp)
   1ffc7:	0f 8f cd 3f 00 00    	jg     23f9a <__vfprintf+0x43c3>
   1ffcd:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   1ffd4:	0f b6 00             	movzbl (%rax),%eax
   1ffd7:	0f be c0             	movsbl %al,%eax
   1ffda:	83 e8 30             	sub    $0x30,%eax
   1ffdd:	01 85 6c fd ff ff    	add    %eax,-0x294(%rbp)
   1ffe3:	48 83 85 c8 fd ff ff 	addq   $0x1,-0x238(%rbp)
   1ffea:	01 
   1ffeb:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   1fff2:	0f b6 00             	movzbl (%rax),%eax
   1fff5:	0f be c0             	movsbl %al,%eax
   1fff8:	83 e8 30             	sub    $0x30,%eax
   1fffb:	83 f8 09             	cmp    $0x9,%eax
   1fffe:	76 83                	jbe    1ff83 <__vfprintf+0x3ac>
   20000:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   20007:	0f b6 00             	movzbl (%rax),%eax
   2000a:	3c 24                	cmp    $0x24,%al
   2000c:	0f 85 13 01 00 00    	jne    20125 <__vfprintf+0x54e>
   20012:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20018:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%rbp)
   2001e:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20025:	48 85 c0             	test   %rax,%rax
   20028:	75 32                	jne    2005c <__vfprintf+0x485>
   2002a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
   20031:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
   20038:	48 8d 8d b8 fd ff ff 	lea    -0x248(%rbp),%rcx
   2003f:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
   20046:	48 8d b5 68 fe ff ff 	lea    -0x198(%rbp),%rsi
   2004d:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
   20054:	48 89 c7             	mov    %rax,%rdi
   20057:	e8 f9 3f 00 00       	callq  24055 <__find_arguments>
   2005c:	8b 85 6c fd ff ff    	mov    -0x294(%rbp),%eax
   20062:	89 85 9c fd ff ff    	mov    %eax,-0x264(%rbp)
   20068:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   2006f:	48 85 c0             	test   %rax,%rax
   20072:	74 23                	je     20097 <__vfprintf+0x4c0>
   20074:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   2007b:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20081:	8d 50 01             	lea    0x1(%rax),%edx
   20084:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   2008a:	48 98                	cltq   
   2008c:	48 c1 e0 04          	shl    $0x4,%rax
   20090:	48 01 c8             	add    %rcx,%rax
   20093:	8b 00                	mov    (%rax),%eax
   20095:	eb 61                	jmp    200f8 <__vfprintf+0x521>
   20097:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   2009e:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   200a5:	8b 00                	mov    (%rax),%eax
   200a7:	83 f8 2f             	cmp    $0x2f,%eax
   200aa:	77 30                	ja     200dc <__vfprintf+0x505>
   200ac:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   200b3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   200b7:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   200be:	8b 00                	mov    (%rax),%eax
   200c0:	89 c0                	mov    %eax,%eax
   200c2:	48 01 d0             	add    %rdx,%rax
   200c5:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   200cc:	8b 12                	mov    (%rdx),%edx
   200ce:	8d 4a 08             	lea    0x8(%rdx),%ecx
   200d1:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   200d8:	89 0a                	mov    %ecx,(%rdx)
   200da:	eb 1a                	jmp    200f6 <__vfprintf+0x51f>
   200dc:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   200e3:	48 8b 40 08          	mov    0x8(%rax),%rax
   200e7:	48 8d 48 08          	lea    0x8(%rax),%rcx
   200eb:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   200f2:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   200f6:	8b 00                	mov    (%rax),%eax
   200f8:	89 85 78 fd ff ff    	mov    %eax,-0x288(%rbp)
   200fe:	8b 85 a4 fd ff ff    	mov    -0x25c(%rbp),%eax
   20104:	89 85 9c fd ff ff    	mov    %eax,-0x264(%rbp)
   2010a:	48 83 85 c8 fd ff ff 	addq   $0x1,-0x238(%rbp)
   20111:	01 
   20112:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   20119:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
   20120:	e9 96 00 00 00       	jmpq   201bb <__vfprintf+0x5e4>
   20125:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   2012c:	48 85 c0             	test   %rax,%rax
   2012f:	74 23                	je     20154 <__vfprintf+0x57d>
   20131:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20138:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   2013e:	8d 50 01             	lea    0x1(%rax),%edx
   20141:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20147:	48 98                	cltq   
   20149:	48 c1 e0 04          	shl    $0x4,%rax
   2014d:	48 01 c8             	add    %rcx,%rax
   20150:	8b 00                	mov    (%rax),%eax
   20152:	eb 61                	jmp    201b5 <__vfprintf+0x5de>
   20154:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   2015b:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20162:	8b 00                	mov    (%rax),%eax
   20164:	83 f8 2f             	cmp    $0x2f,%eax
   20167:	77 30                	ja     20199 <__vfprintf+0x5c2>
   20169:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20170:	48 8b 50 10          	mov    0x10(%rax),%rdx
   20174:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2017b:	8b 00                	mov    (%rax),%eax
   2017d:	89 c0                	mov    %eax,%eax
   2017f:	48 01 d0             	add    %rdx,%rax
   20182:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20189:	8b 12                	mov    (%rdx),%edx
   2018b:	8d 4a 08             	lea    0x8(%rdx),%ecx
   2018e:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20195:	89 0a                	mov    %ecx,(%rdx)
   20197:	eb 1a                	jmp    201b3 <__vfprintf+0x5dc>
   20199:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   201a0:	48 8b 40 08          	mov    0x8(%rax),%rax
   201a4:	48 8d 48 08          	lea    0x8(%rax),%rcx
   201a8:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   201af:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   201b3:	8b 00                	mov    (%rax),%eax
   201b5:	89 85 78 fd ff ff    	mov    %eax,-0x288(%rbp)
			if (width >= 0)
   201bb:	83 bd 78 fd ff ff 00 	cmpl   $0x0,-0x288(%rbp)
   201c2:	78 05                	js     201c9 <__vfprintf+0x5f2>
				goto rflag;
   201c4:	e9 30 fd ff ff       	jmpq   1fef9 <__vfprintf+0x322>
			if (width == INT_MIN)
   201c9:	81 bd 78 fd ff ff 00 	cmpl   $0x80000000,-0x288(%rbp)
   201d0:	00 00 80 
   201d3:	0f 84 c4 3d 00 00    	je     23f9d <__vfprintf+0x43c6>
				goto overflow;
			width = -width;
   201d9:	f7 9d 78 fd ff ff    	negl   -0x288(%rbp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   201df:	83 8d 70 fd ff ff 04 	orl    $0x4,-0x290(%rbp)
			goto rflag;
   201e6:	e9 0e fd ff ff       	jmpq   1fef9 <__vfprintf+0x322>
		case '+':
			sign = '+';
   201eb:	c6 85 56 fd ff ff 2b 	movb   $0x2b,-0x2aa(%rbp)
			goto rflag;
   201f2:	e9 02 fd ff ff       	jmpq   1fef9 <__vfprintf+0x322>
		case '.':
			if ((ch = *fmt++) == '*') {
   201f7:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
   201fe:	48 8d 50 01          	lea    0x1(%rax),%rdx
   20202:	48 89 95 c0 fd ff ff 	mov    %rdx,-0x240(%rbp)
   20209:	0f b6 00             	movzbl (%rax),%eax
   2020c:	0f be c0             	movsbl %al,%eax
   2020f:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%rbp)
   20215:	83 bd 64 fd ff ff 2a 	cmpl   $0x2a,-0x29c(%rbp)
   2021c:	0f 85 70 02 00 00    	jne    20492 <__vfprintf+0x8bb>
				GETASTER(n);
   20222:	c7 85 6c fd ff ff 00 	movl   $0x0,-0x294(%rbp)
   20229:	00 00 00 
   2022c:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
   20233:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   2023a:	eb 68                	jmp    202a4 <__vfprintf+0x6cd>
   2023c:	81 bd 6c fd ff ff cc 	cmpl   $0xccccccc,-0x294(%rbp)
   20243:	cc cc 0c 
   20246:	0f 8f 54 3d 00 00    	jg     23fa0 <__vfprintf+0x43c9>
   2024c:	8b 95 6c fd ff ff    	mov    -0x294(%rbp),%edx
   20252:	89 d0                	mov    %edx,%eax
   20254:	c1 e0 02             	shl    $0x2,%eax
   20257:	01 d0                	add    %edx,%eax
   20259:	01 c0                	add    %eax,%eax
   2025b:	89 85 6c fd ff ff    	mov    %eax,-0x294(%rbp)
   20261:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   20268:	0f b6 00             	movzbl (%rax),%eax
   2026b:	0f be c0             	movsbl %al,%eax
   2026e:	83 e8 30             	sub    $0x30,%eax
   20271:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
   20276:	29 c2                	sub    %eax,%edx
   20278:	89 d0                	mov    %edx,%eax
   2027a:	39 85 6c fd ff ff    	cmp    %eax,-0x294(%rbp)
   20280:	0f 8f 1d 3d 00 00    	jg     23fa3 <__vfprintf+0x43cc>
   20286:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   2028d:	0f b6 00             	movzbl (%rax),%eax
   20290:	0f be c0             	movsbl %al,%eax
   20293:	83 e8 30             	sub    $0x30,%eax
   20296:	01 85 6c fd ff ff    	add    %eax,-0x294(%rbp)
   2029c:	48 83 85 c8 fd ff ff 	addq   $0x1,-0x238(%rbp)
   202a3:	01 
   202a4:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   202ab:	0f b6 00             	movzbl (%rax),%eax
   202ae:	0f be c0             	movsbl %al,%eax
   202b1:	83 e8 30             	sub    $0x30,%eax
   202b4:	83 f8 09             	cmp    $0x9,%eax
   202b7:	76 83                	jbe    2023c <__vfprintf+0x665>
   202b9:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   202c0:	0f b6 00             	movzbl (%rax),%eax
   202c3:	3c 24                	cmp    $0x24,%al
   202c5:	0f 85 13 01 00 00    	jne    203de <__vfprintf+0x807>
   202cb:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   202d1:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%rbp)
   202d7:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   202de:	48 85 c0             	test   %rax,%rax
   202e1:	75 32                	jne    20315 <__vfprintf+0x73e>
   202e3:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
   202ea:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
   202f1:	48 8d 8d b8 fd ff ff 	lea    -0x248(%rbp),%rcx
   202f8:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
   202ff:	48 8d b5 68 fe ff ff 	lea    -0x198(%rbp),%rsi
   20306:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
   2030d:	48 89 c7             	mov    %rax,%rdi
   20310:	e8 40 3d 00 00       	callq  24055 <__find_arguments>
   20315:	8b 85 6c fd ff ff    	mov    -0x294(%rbp),%eax
   2031b:	89 85 9c fd ff ff    	mov    %eax,-0x264(%rbp)
   20321:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20328:	48 85 c0             	test   %rax,%rax
   2032b:	74 23                	je     20350 <__vfprintf+0x779>
   2032d:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20334:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   2033a:	8d 50 01             	lea    0x1(%rax),%edx
   2033d:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20343:	48 98                	cltq   
   20345:	48 c1 e0 04          	shl    $0x4,%rax
   20349:	48 01 c8             	add    %rcx,%rax
   2034c:	8b 00                	mov    (%rax),%eax
   2034e:	eb 61                	jmp    203b1 <__vfprintf+0x7da>
   20350:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20357:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2035e:	8b 00                	mov    (%rax),%eax
   20360:	83 f8 2f             	cmp    $0x2f,%eax
   20363:	77 30                	ja     20395 <__vfprintf+0x7be>
   20365:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2036c:	48 8b 50 10          	mov    0x10(%rax),%rdx
   20370:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20377:	8b 00                	mov    (%rax),%eax
   20379:	89 c0                	mov    %eax,%eax
   2037b:	48 01 d0             	add    %rdx,%rax
   2037e:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20385:	8b 12                	mov    (%rdx),%edx
   20387:	8d 4a 08             	lea    0x8(%rdx),%ecx
   2038a:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20391:	89 0a                	mov    %ecx,(%rdx)
   20393:	eb 1a                	jmp    203af <__vfprintf+0x7d8>
   20395:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2039c:	48 8b 40 08          	mov    0x8(%rax),%rax
   203a0:	48 8d 48 08          	lea    0x8(%rax),%rcx
   203a4:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   203ab:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   203af:	8b 00                	mov    (%rax),%eax
   203b1:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   203b7:	8b 85 a0 fd ff ff    	mov    -0x260(%rbp),%eax
   203bd:	89 85 9c fd ff ff    	mov    %eax,-0x264(%rbp)
   203c3:	48 83 85 c8 fd ff ff 	addq   $0x1,-0x238(%rbp)
   203ca:	01 
   203cb:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   203d2:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
   203d9:	e9 96 00 00 00       	jmpq   20474 <__vfprintf+0x89d>
   203de:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   203e5:	48 85 c0             	test   %rax,%rax
   203e8:	74 23                	je     2040d <__vfprintf+0x836>
   203ea:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   203f1:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   203f7:	8d 50 01             	lea    0x1(%rax),%edx
   203fa:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20400:	48 98                	cltq   
   20402:	48 c1 e0 04          	shl    $0x4,%rax
   20406:	48 01 c8             	add    %rcx,%rax
   20409:	8b 00                	mov    (%rax),%eax
   2040b:	eb 61                	jmp    2046e <__vfprintf+0x897>
   2040d:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20414:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2041b:	8b 00                	mov    (%rax),%eax
   2041d:	83 f8 2f             	cmp    $0x2f,%eax
   20420:	77 30                	ja     20452 <__vfprintf+0x87b>
   20422:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20429:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2042d:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20434:	8b 00                	mov    (%rax),%eax
   20436:	89 c0                	mov    %eax,%eax
   20438:	48 01 d0             	add    %rdx,%rax
   2043b:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20442:	8b 12                	mov    (%rdx),%edx
   20444:	8d 4a 08             	lea    0x8(%rdx),%ecx
   20447:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2044e:	89 0a                	mov    %ecx,(%rdx)
   20450:	eb 1a                	jmp    2046c <__vfprintf+0x895>
   20452:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20459:	48 8b 40 08          	mov    0x8(%rax),%rax
   2045d:	48 8d 48 08          	lea    0x8(%rax),%rcx
   20461:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20468:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2046c:	8b 00                	mov    (%rax),%eax
   2046e:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
				prec = n < 0 ? -1 : n;
   20474:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   20479:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   20480:	0f 49 85 68 fd ff ff 	cmovns -0x298(%rbp),%eax
   20487:	89 85 7c fd ff ff    	mov    %eax,-0x284(%rbp)
				goto rflag;
   2048d:	e9 67 fa ff ff       	jmpq   1fef9 <__vfprintf+0x322>
			}
			n = 0;
   20492:	c7 85 68 fd ff ff 00 	movl   $0x0,-0x298(%rbp)
   20499:	00 00 00 
			while (is_digit(ch)) {
   2049c:	eb 70                	jmp    2050e <__vfprintf+0x937>
				APPEND_DIGIT(n, ch);
   2049e:	81 bd 68 fd ff ff cc 	cmpl   $0xccccccc,-0x298(%rbp)
   204a5:	cc cc 0c 
   204a8:	0f 8f f8 3a 00 00    	jg     23fa6 <__vfprintf+0x43cf>
   204ae:	8b 95 68 fd ff ff    	mov    -0x298(%rbp),%edx
   204b4:	89 d0                	mov    %edx,%eax
   204b6:	c1 e0 02             	shl    $0x2,%eax
   204b9:	01 d0                	add    %edx,%eax
   204bb:	01 c0                	add    %eax,%eax
   204bd:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   204c3:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   204c9:	83 e8 30             	sub    $0x30,%eax
   204cc:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
   204d1:	29 c2                	sub    %eax,%edx
   204d3:	89 d0                	mov    %edx,%eax
   204d5:	39 85 68 fd ff ff    	cmp    %eax,-0x298(%rbp)
   204db:	0f 8f c8 3a 00 00    	jg     23fa9 <__vfprintf+0x43d2>
   204e1:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   204e7:	83 e8 30             	sub    $0x30,%eax
   204ea:	01 85 68 fd ff ff    	add    %eax,-0x298(%rbp)
				ch = *fmt++;
   204f0:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
   204f7:	48 8d 50 01          	lea    0x1(%rax),%rdx
   204fb:	48 89 95 c0 fd ff ff 	mov    %rdx,-0x240(%rbp)
   20502:	0f b6 00             	movzbl (%rax),%eax
   20505:	0f be c0             	movsbl %al,%eax
   20508:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%rbp)
			while (is_digit(ch)) {
   2050e:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   20514:	83 e8 30             	sub    $0x30,%eax
   20517:	83 f8 09             	cmp    $0x9,%eax
   2051a:	76 82                	jbe    2049e <__vfprintf+0x8c7>
			}
			if (ch == '$') {
   2051c:	83 bd 64 fd ff ff 24 	cmpl   $0x24,-0x29c(%rbp)
   20523:	75 53                	jne    20578 <__vfprintf+0x9a1>
				nextarg = n;
   20525:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   2052b:	89 85 9c fd ff ff    	mov    %eax,-0x264(%rbp)
				if (argtable == NULL) {
   20531:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20538:	48 85 c0             	test   %rax,%rax
   2053b:	0f 85 b8 f9 ff ff    	jne    1fef9 <__vfprintf+0x322>
					argtable = statargtable;
   20541:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
   20548:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
					__find_arguments(fmt0, orgap,
   2054f:	48 8d 8d b8 fd ff ff 	lea    -0x248(%rbp),%rcx
   20556:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
   2055d:	48 8d b5 68 fe ff ff 	lea    -0x198(%rbp),%rsi
   20564:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
   2056b:	48 89 c7             	mov    %rax,%rdi
   2056e:	e8 e2 3a 00 00       	callq  24055 <__find_arguments>
					    &argtable, &argtablesiz);
				}
				goto rflag;
   20573:	e9 81 f9 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
			}
			prec = n;
   20578:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   2057e:	89 85 7c fd ff ff    	mov    %eax,-0x284(%rbp)
			goto reswitch;
   20584:	e9 8e f9 ff ff       	jmpq   1ff17 <__vfprintf+0x340>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   20589:	81 8d 70 fd ff ff 80 	orl    $0x80,-0x290(%rbp)
   20590:	00 00 00 
			goto rflag;
   20593:	e9 61 f9 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   20598:	c7 85 68 fd ff ff 00 	movl   $0x0,-0x298(%rbp)
   2059f:	00 00 00 
			do {
				APPEND_DIGIT(n, ch);
   205a2:	81 bd 68 fd ff ff cc 	cmpl   $0xccccccc,-0x298(%rbp)
   205a9:	cc cc 0c 
   205ac:	0f 8f fa 39 00 00    	jg     23fac <__vfprintf+0x43d5>
   205b2:	8b 95 68 fd ff ff    	mov    -0x298(%rbp),%edx
   205b8:	89 d0                	mov    %edx,%eax
   205ba:	c1 e0 02             	shl    $0x2,%eax
   205bd:	01 d0                	add    %edx,%eax
   205bf:	01 c0                	add    %eax,%eax
   205c1:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   205c7:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   205cd:	83 e8 30             	sub    $0x30,%eax
   205d0:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
   205d5:	29 c2                	sub    %eax,%edx
   205d7:	89 d0                	mov    %edx,%eax
   205d9:	39 85 68 fd ff ff    	cmp    %eax,-0x298(%rbp)
   205df:	0f 8f ca 39 00 00    	jg     23faf <__vfprintf+0x43d8>
   205e5:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   205eb:	83 e8 30             	sub    $0x30,%eax
   205ee:	01 85 68 fd ff ff    	add    %eax,-0x298(%rbp)
				ch = *fmt++;
   205f4:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
   205fb:	48 8d 50 01          	lea    0x1(%rax),%rdx
   205ff:	48 89 95 c0 fd ff ff 	mov    %rdx,-0x240(%rbp)
   20606:	0f b6 00             	movzbl (%rax),%eax
   20609:	0f be c0             	movsbl %al,%eax
   2060c:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%rbp)
			} while (is_digit(ch));
   20612:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   20618:	83 e8 30             	sub    $0x30,%eax
   2061b:	83 f8 09             	cmp    $0x9,%eax
   2061e:	76 82                	jbe    205a2 <__vfprintf+0x9cb>
			if (ch == '$') {
   20620:	83 bd 64 fd ff ff 24 	cmpl   $0x24,-0x29c(%rbp)
   20627:	75 53                	jne    2067c <__vfprintf+0xaa5>
				nextarg = n;
   20629:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   2062f:	89 85 9c fd ff ff    	mov    %eax,-0x264(%rbp)
				if (argtable == NULL) {
   20635:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   2063c:	48 85 c0             	test   %rax,%rax
   2063f:	0f 85 b4 f8 ff ff    	jne    1fef9 <__vfprintf+0x322>
					argtable = statargtable;
   20645:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
   2064c:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
					__find_arguments(fmt0, orgap,
   20653:	48 8d 8d b8 fd ff ff 	lea    -0x248(%rbp),%rcx
   2065a:	48 8d 95 b0 fd ff ff 	lea    -0x250(%rbp),%rdx
   20661:	48 8d b5 68 fe ff ff 	lea    -0x198(%rbp),%rsi
   20668:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
   2066f:	48 89 c7             	mov    %rax,%rdi
   20672:	e8 de 39 00 00       	callq  24055 <__find_arguments>
					    &argtable, &argtablesiz);
				}
				goto rflag;
   20677:	e9 7d f8 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
			}
			width = n;
   2067c:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   20682:	89 85 78 fd ff ff    	mov    %eax,-0x288(%rbp)
			goto reswitch;
   20688:	e9 8a f8 ff ff       	jmpq   1ff17 <__vfprintf+0x340>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
   2068d:	83 8d 70 fd ff ff 08 	orl    $0x8,-0x290(%rbp)
			goto rflag;
   20694:	e9 60 f8 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
#endif
		case 'h':
			if (*fmt == 'h') {
   20699:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
   206a0:	0f b6 00             	movzbl (%rax),%eax
   206a3:	3c 68                	cmp    $0x68,%al
   206a5:	75 17                	jne    206be <__vfprintf+0xae7>
				fmt++;
   206a7:	48 83 85 c0 fd ff ff 	addq   $0x1,-0x240(%rbp)
   206ae:	01 
				flags |= CHARINT;
   206af:	81 8d 70 fd ff ff 00 	orl    $0x800,-0x290(%rbp)
   206b6:	08 00 00 
   206b9:	e9 3b f8 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
			} else {
				flags |= SHORTINT;
   206be:	83 8d 70 fd ff ff 40 	orl    $0x40,-0x290(%rbp)
			}
			goto rflag;
   206c5:	e9 2f f8 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
		case 'j':
			flags |= MAXINT;
   206ca:	81 8d 70 fd ff ff 00 	orl    $0x1000,-0x290(%rbp)
   206d1:	10 00 00 
			goto rflag;
   206d4:	e9 20 f8 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
		case 'l':
			if (*fmt == 'l') {
   206d9:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
   206e0:	0f b6 00             	movzbl (%rax),%eax
   206e3:	3c 6c                	cmp    $0x6c,%al
   206e5:	75 14                	jne    206fb <__vfprintf+0xb24>
				fmt++;
   206e7:	48 83 85 c0 fd ff ff 	addq   $0x1,-0x240(%rbp)
   206ee:	01 
				flags |= LLONGINT;
   206ef:	83 8d 70 fd ff ff 20 	orl    $0x20,-0x290(%rbp)
   206f6:	e9 fe f7 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
			} else {
				flags |= LONGINT;
   206fb:	83 8d 70 fd ff ff 10 	orl    $0x10,-0x290(%rbp)
			}
			goto rflag;
   20702:	e9 f2 f7 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
		case 'q':
			flags |= LLONGINT;
   20707:	83 8d 70 fd ff ff 20 	orl    $0x20,-0x290(%rbp)
			goto rflag;
   2070e:	e9 e6 f7 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
		case 't':
			flags |= PTRINT;
   20713:	81 8d 70 fd ff ff 00 	orl    $0x200,-0x290(%rbp)
   2071a:	02 00 00 
			goto rflag;
   2071d:	e9 d7 f7 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
		case 'z':
			flags |= SIZEINT;
   20722:	81 8d 70 fd ff ff 00 	orl    $0x400,-0x290(%rbp)
   20729:	04 00 00 
			goto rflag;
   2072c:	e9 c8 f7 ff ff       	jmpq   1fef9 <__vfprintf+0x322>
		case 'c':
#ifdef PRINTF_WIDE_CHAR
			if (flags & LONGINT) {
   20731:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   20737:	83 e0 10             	and    $0x10,%eax
   2073a:	85 c0                	test   %eax,%eax
   2073c:	0f 84 1b 01 00 00    	je     2085d <__vfprintf+0xc86>
				mbstate_t mbs;
				size_t mbseqlen;

				memset(&mbs, 0, sizeof(mbs));
   20742:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
   20749:	ba 08 00 00 00       	mov    $0x8,%edx
   2074e:	be 00 00 00 00       	mov    $0x0,%esi
   20753:	48 89 c7             	mov    %rax,%rdi
   20756:	e8 fd e0 fe ff       	callq  e858 <memset>
				mbseqlen = wcrtomb(buf,
				    (wchar_t)GETARG(wint_t), &mbs);
   2075b:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
				mbseqlen = wcrtomb(buf,
   20762:	48 85 c0             	test   %rax,%rax
   20765:	74 25                	je     2078c <__vfprintf+0xbb5>
				    (wchar_t)GETARG(wint_t), &mbs);
   20767:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   2076e:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20774:	8d 50 01             	lea    0x1(%rax),%edx
   20777:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   2077d:	48 98                	cltq   
   2077f:	48 c1 e0 04          	shl    $0x4,%rax
   20783:	48 01 c8             	add    %rcx,%rax
   20786:	8b 00                	mov    (%rax),%eax
				mbseqlen = wcrtomb(buf,
   20788:	89 c1                	mov    %eax,%ecx
   2078a:	eb 63                	jmp    207ef <__vfprintf+0xc18>
				    (wchar_t)GETARG(wint_t), &mbs);
   2078c:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20793:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2079a:	8b 00                	mov    (%rax),%eax
   2079c:	83 f8 2f             	cmp    $0x2f,%eax
   2079f:	77 30                	ja     207d1 <__vfprintf+0xbfa>
   207a1:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   207a8:	48 8b 50 10          	mov    0x10(%rax),%rdx
   207ac:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   207b3:	8b 00                	mov    (%rax),%eax
   207b5:	89 c0                	mov    %eax,%eax
   207b7:	48 01 d0             	add    %rdx,%rax
   207ba:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   207c1:	8b 12                	mov    (%rdx),%edx
   207c3:	8d 4a 08             	lea    0x8(%rdx),%ecx
   207c6:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   207cd:	89 0a                	mov    %ecx,(%rdx)
   207cf:	eb 1a                	jmp    207eb <__vfprintf+0xc14>
   207d1:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   207d8:	48 8b 40 08          	mov    0x8(%rax),%rax
   207dc:	48 8d 48 08          	lea    0x8(%rax),%rcx
   207e0:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   207e7:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   207eb:	8b 00                	mov    (%rax),%eax
				mbseqlen = wcrtomb(buf,
   207ed:	89 c1                	mov    %eax,%ecx
   207ef:	48 8d 95 60 fe ff ff 	lea    -0x1a0(%rbp),%rdx
   207f6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   207fa:	89 ce                	mov    %ecx,%esi
   207fc:	48 89 c7             	mov    %rax,%rdi
   207ff:	e8 2d c4 00 00       	callq  2cc31 <wcrtomb>
   20804:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
				if (mbseqlen == (size_t)-1) {
   2080b:	48 83 bd 28 fe ff ff 	cmpq   $0xffffffffffffffff,-0x1d8(%rbp)
   20812:	ff 
   20813:	75 2b                	jne    20840 <__vfprintf+0xc69>
					fp->_flags |= __SERR;
   20815:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   2081c:	0f b7 40 10          	movzwl 0x10(%rax),%eax
   20820:	83 c8 40             	or     $0x40,%eax
   20823:	89 c2                	mov    %eax,%edx
   20825:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   2082c:	66 89 50 10          	mov    %dx,0x10(%rax)
					errno = EILSEQ;
   20830:	e8 8b ee ff ff       	callq  1f6c0 <__errno>
   20835:	c7 00 54 00 00 00    	movl   $0x54,(%rax)
   2083b:	e9 35 37 00 00       	jmpq   23f75 <__vfprintf+0x439e>
					goto error;
				}
				cp = buf;
   20840:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   20844:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
				size = (int)mbseqlen;
   2084b:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
   20852:	89 85 98 fd ff ff    	mov    %eax,-0x268(%rbp)
   20858:	e9 b2 00 00 00       	jmpq   2090f <__vfprintf+0xd38>
			} else {
#endif
				*(cp = buf) = GETARG(int);
   2085d:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20864:	48 85 c0             	test   %rax,%rax
   20867:	74 25                	je     2088e <__vfprintf+0xcb7>
   20869:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20870:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20876:	8d 50 01             	lea    0x1(%rax),%edx
   20879:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   2087f:	48 98                	cltq   
   20881:	48 c1 e0 04          	shl    $0x4,%rax
   20885:	48 01 c8             	add    %rcx,%rax
   20888:	8b 00                	mov    (%rax),%eax
   2088a:	89 c2                	mov    %eax,%edx
   2088c:	eb 63                	jmp    208f1 <__vfprintf+0xd1a>
   2088e:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20895:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2089c:	8b 00                	mov    (%rax),%eax
   2089e:	83 f8 2f             	cmp    $0x2f,%eax
   208a1:	77 30                	ja     208d3 <__vfprintf+0xcfc>
   208a3:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   208aa:	48 8b 50 10          	mov    0x10(%rax),%rdx
   208ae:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   208b5:	8b 00                	mov    (%rax),%eax
   208b7:	89 c0                	mov    %eax,%eax
   208b9:	48 01 d0             	add    %rdx,%rax
   208bc:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   208c3:	8b 12                	mov    (%rdx),%edx
   208c5:	8d 4a 08             	lea    0x8(%rdx),%ecx
   208c8:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   208cf:	89 0a                	mov    %ecx,(%rdx)
   208d1:	eb 1a                	jmp    208ed <__vfprintf+0xd16>
   208d3:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   208da:	48 8b 40 08          	mov    0x8(%rax),%rax
   208de:	48 8d 48 08          	lea    0x8(%rax),%rcx
   208e2:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   208e9:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   208ed:	8b 00                	mov    (%rax),%eax
   208ef:	89 c2                	mov    %eax,%edx
   208f1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   208f5:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   208fc:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   20903:	88 10                	mov    %dl,(%rax)
				size = 1;
   20905:	c7 85 98 fd ff ff 01 	movl   $0x1,-0x268(%rbp)
   2090c:	00 00 00 
#ifdef PRINTF_WIDE_CHAR
			}
#endif
			sign = '\0';
   2090f:	c6 85 56 fd ff ff 00 	movb   $0x0,-0x2aa(%rbp)
			break;
   20916:	e9 de 22 00 00       	jmpq   22bf9 <__vfprintf+0x3022>
		case 'D':
			flags |= LONGINT;
   2091b:	83 8d 70 fd ff ff 10 	orl    $0x10,-0x290(%rbp)
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_umax = SARG();
   20922:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   20928:	25 00 10 00 00       	and    $0x1000,%eax
   2092d:	85 c0                	test   %eax,%eax
   2092f:	0f 84 9a 00 00 00    	je     209cf <__vfprintf+0xdf8>
   20935:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   2093c:	48 85 c0             	test   %rax,%rax
   2093f:	74 27                	je     20968 <__vfprintf+0xd91>
   20941:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20948:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   2094e:	8d 50 01             	lea    0x1(%rax),%edx
   20951:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20957:	48 98                	cltq   
   20959:	48 c1 e0 04          	shl    $0x4,%rax
   2095d:	48 01 c8             	add    %rcx,%rax
   20960:	48 8b 00             	mov    (%rax),%rax
   20963:	e9 0f 05 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20968:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   2096f:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20976:	8b 00                	mov    (%rax),%eax
   20978:	83 f8 2f             	cmp    $0x2f,%eax
   2097b:	77 30                	ja     209ad <__vfprintf+0xdd6>
   2097d:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20984:	48 8b 50 10          	mov    0x10(%rax),%rdx
   20988:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2098f:	8b 00                	mov    (%rax),%eax
   20991:	89 c0                	mov    %eax,%eax
   20993:	48 01 d0             	add    %rdx,%rax
   20996:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2099d:	8b 12                	mov    (%rdx),%edx
   2099f:	8d 4a 08             	lea    0x8(%rdx),%ecx
   209a2:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   209a9:	89 0a                	mov    %ecx,(%rdx)
   209ab:	eb 1a                	jmp    209c7 <__vfprintf+0xdf0>
   209ad:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   209b4:	48 8b 40 08          	mov    0x8(%rax),%rax
   209b8:	48 8d 48 08          	lea    0x8(%rax),%rcx
   209bc:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   209c3:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   209c7:	48 8b 00             	mov    (%rax),%rax
   209ca:	e9 a8 04 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   209cf:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   209d5:	83 e0 20             	and    $0x20,%eax
   209d8:	85 c0                	test   %eax,%eax
   209da:	0f 84 9a 00 00 00    	je     20a7a <__vfprintf+0xea3>
   209e0:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   209e7:	48 85 c0             	test   %rax,%rax
   209ea:	74 27                	je     20a13 <__vfprintf+0xe3c>
   209ec:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   209f3:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   209f9:	8d 50 01             	lea    0x1(%rax),%edx
   209fc:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20a02:	48 98                	cltq   
   20a04:	48 c1 e0 04          	shl    $0x4,%rax
   20a08:	48 01 c8             	add    %rcx,%rax
   20a0b:	48 8b 00             	mov    (%rax),%rax
   20a0e:	e9 64 04 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20a13:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20a1a:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20a21:	8b 00                	mov    (%rax),%eax
   20a23:	83 f8 2f             	cmp    $0x2f,%eax
   20a26:	77 30                	ja     20a58 <__vfprintf+0xe81>
   20a28:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20a2f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   20a33:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20a3a:	8b 00                	mov    (%rax),%eax
   20a3c:	89 c0                	mov    %eax,%eax
   20a3e:	48 01 d0             	add    %rdx,%rax
   20a41:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20a48:	8b 12                	mov    (%rdx),%edx
   20a4a:	8d 4a 08             	lea    0x8(%rdx),%ecx
   20a4d:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20a54:	89 0a                	mov    %ecx,(%rdx)
   20a56:	eb 1a                	jmp    20a72 <__vfprintf+0xe9b>
   20a58:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20a5f:	48 8b 40 08          	mov    0x8(%rax),%rax
   20a63:	48 8d 48 08          	lea    0x8(%rax),%rcx
   20a67:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20a6e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   20a72:	48 8b 00             	mov    (%rax),%rax
   20a75:	e9 fd 03 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20a7a:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   20a80:	83 e0 10             	and    $0x10,%eax
   20a83:	85 c0                	test   %eax,%eax
   20a85:	0f 84 9a 00 00 00    	je     20b25 <__vfprintf+0xf4e>
   20a8b:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20a92:	48 85 c0             	test   %rax,%rax
   20a95:	74 27                	je     20abe <__vfprintf+0xee7>
   20a97:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20a9e:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20aa4:	8d 50 01             	lea    0x1(%rax),%edx
   20aa7:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20aad:	48 98                	cltq   
   20aaf:	48 c1 e0 04          	shl    $0x4,%rax
   20ab3:	48 01 c8             	add    %rcx,%rax
   20ab6:	48 8b 00             	mov    (%rax),%rax
   20ab9:	e9 b9 03 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20abe:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20ac5:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20acc:	8b 00                	mov    (%rax),%eax
   20ace:	83 f8 2f             	cmp    $0x2f,%eax
   20ad1:	77 30                	ja     20b03 <__vfprintf+0xf2c>
   20ad3:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20ada:	48 8b 50 10          	mov    0x10(%rax),%rdx
   20ade:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20ae5:	8b 00                	mov    (%rax),%eax
   20ae7:	89 c0                	mov    %eax,%eax
   20ae9:	48 01 d0             	add    %rdx,%rax
   20aec:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20af3:	8b 12                	mov    (%rdx),%edx
   20af5:	8d 4a 08             	lea    0x8(%rdx),%ecx
   20af8:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20aff:	89 0a                	mov    %ecx,(%rdx)
   20b01:	eb 1a                	jmp    20b1d <__vfprintf+0xf46>
   20b03:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20b0a:	48 8b 40 08          	mov    0x8(%rax),%rax
   20b0e:	48 8d 48 08          	lea    0x8(%rax),%rcx
   20b12:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20b19:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   20b1d:	48 8b 00             	mov    (%rax),%rax
   20b20:	e9 52 03 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20b25:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   20b2b:	25 00 02 00 00       	and    $0x200,%eax
   20b30:	85 c0                	test   %eax,%eax
   20b32:	0f 84 9a 00 00 00    	je     20bd2 <__vfprintf+0xffb>
   20b38:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20b3f:	48 85 c0             	test   %rax,%rax
   20b42:	74 27                	je     20b6b <__vfprintf+0xf94>
   20b44:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20b4b:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20b51:	8d 50 01             	lea    0x1(%rax),%edx
   20b54:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20b5a:	48 98                	cltq   
   20b5c:	48 c1 e0 04          	shl    $0x4,%rax
   20b60:	48 01 c8             	add    %rcx,%rax
   20b63:	48 8b 00             	mov    (%rax),%rax
   20b66:	e9 0c 03 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20b6b:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20b72:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20b79:	8b 00                	mov    (%rax),%eax
   20b7b:	83 f8 2f             	cmp    $0x2f,%eax
   20b7e:	77 30                	ja     20bb0 <__vfprintf+0xfd9>
   20b80:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20b87:	48 8b 50 10          	mov    0x10(%rax),%rdx
   20b8b:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20b92:	8b 00                	mov    (%rax),%eax
   20b94:	89 c0                	mov    %eax,%eax
   20b96:	48 01 d0             	add    %rdx,%rax
   20b99:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20ba0:	8b 12                	mov    (%rdx),%edx
   20ba2:	8d 4a 08             	lea    0x8(%rdx),%ecx
   20ba5:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20bac:	89 0a                	mov    %ecx,(%rdx)
   20bae:	eb 1a                	jmp    20bca <__vfprintf+0xff3>
   20bb0:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20bb7:	48 8b 40 08          	mov    0x8(%rax),%rax
   20bbb:	48 8d 48 08          	lea    0x8(%rax),%rcx
   20bbf:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20bc6:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   20bca:	48 8b 00             	mov    (%rax),%rax
   20bcd:	e9 a5 02 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20bd2:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   20bd8:	25 00 04 00 00       	and    $0x400,%eax
   20bdd:	85 c0                	test   %eax,%eax
   20bdf:	0f 84 9a 00 00 00    	je     20c7f <__vfprintf+0x10a8>
   20be5:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20bec:	48 85 c0             	test   %rax,%rax
   20bef:	74 27                	je     20c18 <__vfprintf+0x1041>
   20bf1:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20bf8:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20bfe:	8d 50 01             	lea    0x1(%rax),%edx
   20c01:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20c07:	48 98                	cltq   
   20c09:	48 c1 e0 04          	shl    $0x4,%rax
   20c0d:	48 01 c8             	add    %rcx,%rax
   20c10:	48 8b 00             	mov    (%rax),%rax
   20c13:	e9 5f 02 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20c18:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20c1f:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20c26:	8b 00                	mov    (%rax),%eax
   20c28:	83 f8 2f             	cmp    $0x2f,%eax
   20c2b:	77 30                	ja     20c5d <__vfprintf+0x1086>
   20c2d:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20c34:	48 8b 50 10          	mov    0x10(%rax),%rdx
   20c38:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20c3f:	8b 00                	mov    (%rax),%eax
   20c41:	89 c0                	mov    %eax,%eax
   20c43:	48 01 d0             	add    %rdx,%rax
   20c46:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20c4d:	8b 12                	mov    (%rdx),%edx
   20c4f:	8d 4a 08             	lea    0x8(%rdx),%ecx
   20c52:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20c59:	89 0a                	mov    %ecx,(%rdx)
   20c5b:	eb 1a                	jmp    20c77 <__vfprintf+0x10a0>
   20c5d:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20c64:	48 8b 40 08          	mov    0x8(%rax),%rax
   20c68:	48 8d 48 08          	lea    0x8(%rax),%rcx
   20c6c:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20c73:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   20c77:	48 8b 00             	mov    (%rax),%rax
   20c7a:	e9 f8 01 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20c7f:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   20c85:	83 e0 40             	and    $0x40,%eax
   20c88:	85 c0                	test   %eax,%eax
   20c8a:	0f 84 a0 00 00 00    	je     20d30 <__vfprintf+0x1159>
   20c90:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20c97:	48 85 c0             	test   %rax,%rax
   20c9a:	74 2a                	je     20cc6 <__vfprintf+0x10ef>
   20c9c:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20ca3:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20ca9:	8d 50 01             	lea    0x1(%rax),%edx
   20cac:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20cb2:	48 98                	cltq   
   20cb4:	48 c1 e0 04          	shl    $0x4,%rax
   20cb8:	48 01 c8             	add    %rcx,%rax
   20cbb:	8b 00                	mov    (%rax),%eax
   20cbd:	48 0f bf c0          	movswq %ax,%rax
   20cc1:	e9 b1 01 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20cc6:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20ccd:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20cd4:	8b 00                	mov    (%rax),%eax
   20cd6:	83 f8 2f             	cmp    $0x2f,%eax
   20cd9:	77 30                	ja     20d0b <__vfprintf+0x1134>
   20cdb:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20ce2:	48 8b 50 10          	mov    0x10(%rax),%rdx
   20ce6:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20ced:	8b 00                	mov    (%rax),%eax
   20cef:	89 c0                	mov    %eax,%eax
   20cf1:	48 01 d0             	add    %rdx,%rax
   20cf4:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20cfb:	8b 12                	mov    (%rdx),%edx
   20cfd:	8d 4a 08             	lea    0x8(%rdx),%ecx
   20d00:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20d07:	89 0a                	mov    %ecx,(%rdx)
   20d09:	eb 1a                	jmp    20d25 <__vfprintf+0x114e>
   20d0b:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20d12:	48 8b 40 08          	mov    0x8(%rax),%rax
   20d16:	48 8d 48 08          	lea    0x8(%rax),%rcx
   20d1a:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20d21:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   20d25:	8b 00                	mov    (%rax),%eax
   20d27:	48 0f bf c0          	movswq %ax,%rax
   20d2b:	e9 47 01 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20d30:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   20d36:	25 00 08 00 00       	and    $0x800,%eax
   20d3b:	85 c0                	test   %eax,%eax
   20d3d:	0f 84 a0 00 00 00    	je     20de3 <__vfprintf+0x120c>
   20d43:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20d4a:	48 85 c0             	test   %rax,%rax
   20d4d:	74 2a                	je     20d79 <__vfprintf+0x11a2>
   20d4f:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20d56:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20d5c:	8d 50 01             	lea    0x1(%rax),%edx
   20d5f:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20d65:	48 98                	cltq   
   20d67:	48 c1 e0 04          	shl    $0x4,%rax
   20d6b:	48 01 c8             	add    %rcx,%rax
   20d6e:	8b 00                	mov    (%rax),%eax
   20d70:	48 0f be c0          	movsbq %al,%rax
   20d74:	e9 fe 00 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20d79:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20d80:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20d87:	8b 00                	mov    (%rax),%eax
   20d89:	83 f8 2f             	cmp    $0x2f,%eax
   20d8c:	77 30                	ja     20dbe <__vfprintf+0x11e7>
   20d8e:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20d95:	48 8b 50 10          	mov    0x10(%rax),%rdx
   20d99:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20da0:	8b 00                	mov    (%rax),%eax
   20da2:	89 c0                	mov    %eax,%eax
   20da4:	48 01 d0             	add    %rdx,%rax
   20da7:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20dae:	8b 12                	mov    (%rdx),%edx
   20db0:	8d 4a 08             	lea    0x8(%rdx),%ecx
   20db3:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20dba:	89 0a                	mov    %ecx,(%rdx)
   20dbc:	eb 1a                	jmp    20dd8 <__vfprintf+0x1201>
   20dbe:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20dc5:	48 8b 40 08          	mov    0x8(%rax),%rax
   20dc9:	48 8d 48 08          	lea    0x8(%rax),%rcx
   20dcd:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20dd4:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   20dd8:	8b 00                	mov    (%rax),%eax
   20dda:	48 0f be c0          	movsbq %al,%rax
   20dde:	e9 94 00 00 00       	jmpq   20e77 <__vfprintf+0x12a0>
   20de3:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20dea:	48 85 c0             	test   %rax,%rax
   20ded:	74 25                	je     20e14 <__vfprintf+0x123d>
   20def:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20df6:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20dfc:	8d 50 01             	lea    0x1(%rax),%edx
   20dff:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20e05:	48 98                	cltq   
   20e07:	48 c1 e0 04          	shl    $0x4,%rax
   20e0b:	48 01 c8             	add    %rcx,%rax
   20e0e:	8b 00                	mov    (%rax),%eax
   20e10:	48 98                	cltq   
   20e12:	eb 63                	jmp    20e77 <__vfprintf+0x12a0>
   20e14:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20e1b:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20e22:	8b 00                	mov    (%rax),%eax
   20e24:	83 f8 2f             	cmp    $0x2f,%eax
   20e27:	77 30                	ja     20e59 <__vfprintf+0x1282>
   20e29:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20e30:	48 8b 50 10          	mov    0x10(%rax),%rdx
   20e34:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20e3b:	8b 00                	mov    (%rax),%eax
   20e3d:	89 c0                	mov    %eax,%eax
   20e3f:	48 01 d0             	add    %rdx,%rax
   20e42:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20e49:	8b 12                	mov    (%rdx),%edx
   20e4b:	8d 4a 08             	lea    0x8(%rdx),%ecx
   20e4e:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20e55:	89 0a                	mov    %ecx,(%rdx)
   20e57:	eb 1a                	jmp    20e73 <__vfprintf+0x129c>
   20e59:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20e60:	48 8b 40 08          	mov    0x8(%rax),%rax
   20e64:	48 8d 48 08          	lea    0x8(%rax),%rcx
   20e68:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20e6f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   20e73:	8b 00                	mov    (%rax),%eax
   20e75:	48 98                	cltq   
   20e77:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
			if ((intmax_t)_umax < 0) {
   20e7e:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
   20e85:	48 85 c0             	test   %rax,%rax
   20e88:	79 0e                	jns    20e98 <__vfprintf+0x12c1>
				_umax = -_umax;
   20e8a:	48 f7 9d e0 fd ff ff 	negq   -0x220(%rbp)
				sign = '-';
   20e91:	c6 85 56 fd ff ff 2d 	movb   $0x2d,-0x2aa(%rbp)
			}
			base = DEC;
   20e98:	c7 85 8c fd ff ff 01 	movl   $0x1,-0x274(%rbp)
   20e9f:	00 00 00 
			goto number;
   20ea2:	e9 18 1b 00 00       	jmpq   229bf <__vfprintf+0x2de8>
#ifdef FLOATING_POINT
		case 'a':
		case 'A':
			if (ch == 'a') {
   20ea7:	83 bd 64 fd ff ff 61 	cmpl   $0x61,-0x29c(%rbp)
   20eae:	75 1b                	jne    20ecb <__vfprintf+0x12f4>
				ox[1] = 'x';
   20eb0:	c6 45 87 78          	movb   $0x78,-0x79(%rbp)
				xdigs = xdigs_lower;
   20eb4:	48 8d 05 55 fe 00 00 	lea    0xfe55(%rip),%rax        # 30d10 <xdigs_lower.3163>
   20ebb:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
				expchar = 'p';
   20ec2:	c6 85 57 fd ff ff 70 	movb   $0x70,-0x2a9(%rbp)
   20ec9:	eb 19                	jmp    20ee4 <__vfprintf+0x130d>
			} else {
				ox[1] = 'X';
   20ecb:	c6 45 87 58          	movb   $0x58,-0x79(%rbp)
				xdigs = xdigs_upper;
   20ecf:	48 8d 05 4a fe 00 00 	lea    0xfe4a(%rip),%rax        # 30d20 <xdigs_upper.3164>
   20ed6:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
				expchar = 'P';
   20edd:	c6 85 57 fd ff ff 50 	movb   $0x50,-0x2a9(%rbp)
			}
			if (prec >= 0)
   20ee4:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   20eeb:	78 07                	js     20ef4 <__vfprintf+0x131d>
				prec++;
   20eed:	83 85 7c fd ff ff 01 	addl   $0x1,-0x284(%rbp)
			if (dtoaresult)
   20ef4:	48 83 bd d8 fd ff ff 	cmpq   $0x0,-0x228(%rbp)
   20efb:	00 
   20efc:	74 0f                	je     20f0d <__vfprintf+0x1336>
				__freedtoa(dtoaresult);
   20efe:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
   20f05:	48 89 c7             	mov    %rax,%rdi
   20f08:	e8 0b 80 00 00       	callq  28f18 <__freedtoa>
			if (flags & LONGDBL) {
   20f0d:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   20f13:	83 e0 08             	and    $0x8,%eax
   20f16:	85 c0                	test   %eax,%eax
   20f18:	0f 84 d2 00 00 00    	je     20ff0 <__vfprintf+0x1419>
				fparg.ldbl = GETARG(long double);
   20f1e:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20f25:	48 85 c0             	test   %rax,%rax
   20f28:	74 23                	je     20f4d <__vfprintf+0x1376>
   20f2a:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   20f31:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   20f37:	8d 50 01             	lea    0x1(%rax),%edx
   20f3a:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   20f40:	48 98                	cltq   
   20f42:	48 c1 e0 04          	shl    $0x4,%rax
   20f46:	48 01 c8             	add    %rcx,%rax
   20f49:	db 28                	fldt   (%rax)
   20f4b:	eb 2b                	jmp    20f78 <__vfprintf+0x13a1>
   20f4d:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   20f54:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   20f5b:	48 8b 40 08          	mov    0x8(%rax),%rax
   20f5f:	48 83 c0 0f          	add    $0xf,%rax
   20f63:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
   20f67:	48 8d 48 10          	lea    0x10(%rax),%rcx
   20f6b:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   20f72:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   20f76:	db 28                	fldt   (%rax)
   20f78:	db bd 30 fe ff ff    	fstpt  -0x1d0(%rbp)
				dtoaresult = cp =
				    __hldtoa(fparg.ldbl, xdigs, prec,
   20f7e:	db ad 30 fe ff ff    	fldt   -0x1d0(%rbp)
				dtoaresult = cp =
   20f84:	48 8d bd a8 fd ff ff 	lea    -0x258(%rbp),%rdi
   20f8b:	48 8d 8d 5c fd ff ff 	lea    -0x2a4(%rbp),%rcx
   20f92:	48 8d 95 60 fd ff ff 	lea    -0x2a0(%rbp),%rdx
   20f99:	8b b5 7c fd ff ff    	mov    -0x284(%rbp),%esi
   20f9f:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
   20fa6:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
   20fab:	db 3c 24             	fstpt  (%rsp)
   20fae:	49 89 f8             	mov    %rdi,%r8
   20fb1:	48 89 c7             	mov    %rax,%rdi
   20fb4:	e8 0c a2 00 00       	callq  2b1c5 <__hldtoa>
   20fb9:	48 83 c4 10          	add    $0x10,%rsp
   20fbd:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   20fc4:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   20fcb:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
				    &expt, &signflag, &dtoaend);
				if (dtoaresult == NULL) {
   20fd2:	48 83 bd d8 fd ff ff 	cmpq   $0x0,-0x228(%rbp)
   20fd9:	00 
   20fda:	0f 85 1e 01 00 00    	jne    210fe <__vfprintf+0x1527>
					errno = ENOMEM;
   20fe0:	e8 db e6 ff ff       	callq  1f6c0 <__errno>
   20fe5:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
					goto error;
   20feb:	e9 85 2f 00 00       	jmpq   23f75 <__vfprintf+0x439e>
				}
			} else {
				fparg.dbl = GETARG(double);
   20ff0:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   20ff7:	48 85 c0             	test   %rax,%rax
   20ffa:	74 25                	je     21021 <__vfprintf+0x144a>
   20ffc:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   21003:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21009:	8d 50 01             	lea    0x1(%rax),%edx
   2100c:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   21012:	48 98                	cltq   
   21014:	48 c1 e0 04          	shl    $0x4,%rax
   21018:	48 01 c8             	add    %rcx,%rax
   2101b:	f2 0f 10 00          	movsd  (%rax),%xmm0
   2101f:	eb 69                	jmp    2108a <__vfprintf+0x14b3>
   21021:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   21028:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2102f:	8b 40 04             	mov    0x4(%rax),%eax
   21032:	3d af 00 00 00       	cmp    $0xaf,%eax
   21037:	77 33                	ja     2106c <__vfprintf+0x1495>
   21039:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21040:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21044:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2104b:	8b 40 04             	mov    0x4(%rax),%eax
   2104e:	89 c0                	mov    %eax,%eax
   21050:	48 01 d0             	add    %rdx,%rax
   21053:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2105a:	8b 52 04             	mov    0x4(%rdx),%edx
   2105d:	8d 4a 10             	lea    0x10(%rdx),%ecx
   21060:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21067:	89 4a 04             	mov    %ecx,0x4(%rdx)
   2106a:	eb 1a                	jmp    21086 <__vfprintf+0x14af>
   2106c:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21073:	48 8b 40 08          	mov    0x8(%rax),%rax
   21077:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2107b:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21082:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21086:	f2 0f 10 00          	movsd  (%rax),%xmm0
   2108a:	f2 0f 11 85 30 fe ff 	movsd  %xmm0,-0x1d0(%rbp)
   21091:	ff 
				dtoaresult = cp =
				    __hdtoa(fparg.dbl, xdigs, prec,
   21092:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
				dtoaresult = cp =
   21099:	4c 8d 85 a8 fd ff ff 	lea    -0x258(%rbp),%r8
   210a0:	48 8d 8d 5c fd ff ff 	lea    -0x2a4(%rbp),%rcx
   210a7:	48 8d 95 60 fd ff ff 	lea    -0x2a0(%rbp),%rdx
   210ae:	8b b5 7c fd ff ff    	mov    -0x284(%rbp),%esi
   210b4:	48 8b bd e8 fd ff ff 	mov    -0x218(%rbp),%rdi
   210bb:	48 89 85 30 fd ff ff 	mov    %rax,-0x2d0(%rbp)
   210c2:	f2 0f 10 85 30 fd ff 	movsd  -0x2d0(%rbp),%xmm0
   210c9:	ff 
   210ca:	e8 a4 9d 00 00       	callq  2ae73 <__hdtoa>
   210cf:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   210d6:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   210dd:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
				    &expt, &signflag, &dtoaend);
				if (dtoaresult == NULL) {
   210e4:	48 83 bd d8 fd ff ff 	cmpq   $0x0,-0x228(%rbp)
   210eb:	00 
   210ec:	75 10                	jne    210fe <__vfprintf+0x1527>
					errno = ENOMEM;
   210ee:	e8 cd e5 ff ff       	callq  1f6c0 <__errno>
   210f3:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
					goto error;
   210f9:	e9 77 2e 00 00       	jmpq   23f75 <__vfprintf+0x439e>
				}
			}
			if (prec < 0)
   210fe:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   21105:	79 1d                	jns    21124 <__vfprintf+0x154d>
				prec = dtoaend - cp;
   21107:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
   2110e:	48 89 c2             	mov    %rax,%rdx
   21111:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   21118:	48 29 c2             	sub    %rax,%rdx
   2111b:	48 89 d0             	mov    %rdx,%rax
   2111e:	89 85 7c fd ff ff    	mov    %eax,-0x284(%rbp)
			if (expt == INT_MAX)
   21124:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   2112a:	3d ff ff ff 7f       	cmp    $0x7fffffff,%eax
   2112f:	0f 85 b8 02 00 00    	jne    213ed <__vfprintf+0x1816>
				ox[1] = '\0';
   21135:	c6 45 87 00          	movb   $0x0,-0x79(%rbp)
			goto fp_common;
   21139:	e9 af 02 00 00       	jmpq   213ed <__vfprintf+0x1816>
		case 'e':
		case 'E':
			expchar = ch;
   2113e:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   21144:	88 85 57 fd ff ff    	mov    %al,-0x2a9(%rbp)
			if (prec < 0)	/* account for digit before decpt */
   2114a:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   21151:	79 0c                	jns    2115f <__vfprintf+0x1588>
				prec = DEFPREC + 1;
   21153:	c7 85 7c fd ff ff 07 	movl   $0x7,-0x284(%rbp)
   2115a:	00 00 00 
			else
				prec++;
			goto fp_begin;
   2115d:	eb 37                	jmp    21196 <__vfprintf+0x15bf>
				prec++;
   2115f:	83 85 7c fd ff ff 01 	addl   $0x1,-0x284(%rbp)
			goto fp_begin;
   21166:	eb 2e                	jmp    21196 <__vfprintf+0x15bf>
		case 'f':
		case 'F':
			expchar = '\0';
   21168:	c6 85 57 fd ff ff 00 	movb   $0x0,-0x2a9(%rbp)
			goto fp_begin;
   2116f:	eb 25                	jmp    21196 <__vfprintf+0x15bf>
		case 'g':
		case 'G':
			expchar = ch - ('g' - 'e');
   21171:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   21177:	83 e8 02             	sub    $0x2,%eax
   2117a:	88 85 57 fd ff ff    	mov    %al,-0x2a9(%rbp)
 			if (prec == 0)
   21180:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   21187:	75 0c                	jne    21195 <__vfprintf+0x15be>
 				prec = 1;
   21189:	c7 85 7c fd ff ff 01 	movl   $0x1,-0x284(%rbp)
   21190:	00 00 00 
   21193:	eb 01                	jmp    21196 <__vfprintf+0x15bf>
fp_begin:
   21195:	90                   	nop
			if (prec < 0)
   21196:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   2119d:	79 0a                	jns    211a9 <__vfprintf+0x15d2>
				prec = DEFPREC;
   2119f:	c7 85 7c fd ff ff 06 	movl   $0x6,-0x284(%rbp)
   211a6:	00 00 00 
			if (dtoaresult)
   211a9:	48 83 bd d8 fd ff ff 	cmpq   $0x0,-0x228(%rbp)
   211b0:	00 
   211b1:	74 0f                	je     211c2 <__vfprintf+0x15eb>
				__freedtoa(dtoaresult);
   211b3:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
   211ba:	48 89 c7             	mov    %rax,%rdi
   211bd:	e8 56 7d 00 00       	callq  28f18 <__freedtoa>
			if (flags & LONGDBL) {
   211c2:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   211c8:	83 e0 08             	and    $0x8,%eax
   211cb:	85 c0                	test   %eax,%eax
   211cd:	0f 84 dd 00 00 00    	je     212b0 <__vfprintf+0x16d9>
				fparg.ldbl = GETARG(long double);
   211d3:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   211da:	48 85 c0             	test   %rax,%rax
   211dd:	74 23                	je     21202 <__vfprintf+0x162b>
   211df:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   211e6:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   211ec:	8d 50 01             	lea    0x1(%rax),%edx
   211ef:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   211f5:	48 98                	cltq   
   211f7:	48 c1 e0 04          	shl    $0x4,%rax
   211fb:	48 01 c8             	add    %rcx,%rax
   211fe:	db 28                	fldt   (%rax)
   21200:	eb 2b                	jmp    2122d <__vfprintf+0x1656>
   21202:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   21209:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21210:	48 8b 40 08          	mov    0x8(%rax),%rax
   21214:	48 83 c0 0f          	add    $0xf,%rax
   21218:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
   2121c:	48 8d 48 10          	lea    0x10(%rax),%rcx
   21220:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21227:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2122b:	db 28                	fldt   (%rax)
   2122d:	db bd 30 fe ff ff    	fstpt  -0x1d0(%rbp)
				dtoaresult = cp =
				    __ldtoa(&fparg.ldbl, expchar ? 2 : 3, prec,
   21233:	80 bd 57 fd ff ff 00 	cmpb   $0x0,-0x2a9(%rbp)
   2123a:	74 08                	je     21244 <__vfprintf+0x166d>
   2123c:	41 ba 02 00 00 00    	mov    $0x2,%r10d
   21242:	eb 06                	jmp    2124a <__vfprintf+0x1673>
   21244:	41 ba 03 00 00 00    	mov    $0x3,%r10d
				dtoaresult = cp =
   2124a:	48 8d bd a8 fd ff ff 	lea    -0x258(%rbp),%rdi
   21251:	48 8d b5 5c fd ff ff 	lea    -0x2a4(%rbp),%rsi
   21258:	48 8d 8d 60 fd ff ff 	lea    -0x2a0(%rbp),%rcx
   2125f:	8b 95 7c fd ff ff    	mov    -0x284(%rbp),%edx
   21265:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
   2126c:	49 89 f9             	mov    %rdi,%r9
   2126f:	49 89 f0             	mov    %rsi,%r8
   21272:	44 89 d6             	mov    %r10d,%esi
   21275:	48 89 c7             	mov    %rax,%rdi
   21278:	e8 60 a2 00 00       	callq  2b4dd <__ldtoa>
   2127d:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   21284:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   2128b:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
				    &expt, &signflag, &dtoaend);
				if (dtoaresult == NULL) {
   21292:	48 83 bd d8 fd ff ff 	cmpq   $0x0,-0x228(%rbp)
   21299:	00 
   2129a:	0f 85 51 01 00 00    	jne    213f1 <__vfprintf+0x181a>
					errno = ENOMEM;
   212a0:	e8 1b e4 ff ff       	callq  1f6c0 <__errno>
   212a5:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
					goto error;
   212ab:	e9 c5 2c 00 00       	jmpq   23f75 <__vfprintf+0x439e>
				}
			} else {
				fparg.dbl = GETARG(double);
   212b0:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   212b7:	48 85 c0             	test   %rax,%rax
   212ba:	74 25                	je     212e1 <__vfprintf+0x170a>
   212bc:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   212c3:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   212c9:	8d 50 01             	lea    0x1(%rax),%edx
   212cc:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   212d2:	48 98                	cltq   
   212d4:	48 c1 e0 04          	shl    $0x4,%rax
   212d8:	48 01 c8             	add    %rcx,%rax
   212db:	f2 0f 10 00          	movsd  (%rax),%xmm0
   212df:	eb 69                	jmp    2134a <__vfprintf+0x1773>
   212e1:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   212e8:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   212ef:	8b 40 04             	mov    0x4(%rax),%eax
   212f2:	3d af 00 00 00       	cmp    $0xaf,%eax
   212f7:	77 33                	ja     2132c <__vfprintf+0x1755>
   212f9:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21300:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21304:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2130b:	8b 40 04             	mov    0x4(%rax),%eax
   2130e:	89 c0                	mov    %eax,%eax
   21310:	48 01 d0             	add    %rdx,%rax
   21313:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2131a:	8b 52 04             	mov    0x4(%rdx),%edx
   2131d:	8d 4a 10             	lea    0x10(%rdx),%ecx
   21320:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21327:	89 4a 04             	mov    %ecx,0x4(%rdx)
   2132a:	eb 1a                	jmp    21346 <__vfprintf+0x176f>
   2132c:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21333:	48 8b 40 08          	mov    0x8(%rax),%rax
   21337:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2133b:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21342:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21346:	f2 0f 10 00          	movsd  (%rax),%xmm0
   2134a:	f2 0f 11 85 30 fe ff 	movsd  %xmm0,-0x1d0(%rbp)
   21351:	ff 
				dtoaresult = cp =
				    __dtoa(fparg.dbl, expchar ? 2 : 3, prec,
   21352:	80 bd 57 fd ff ff 00 	cmpb   $0x0,-0x2a9(%rbp)
   21359:	74 08                	je     21363 <__vfprintf+0x178c>
   2135b:	41 b9 02 00 00 00    	mov    $0x2,%r9d
   21361:	eb 06                	jmp    21369 <__vfprintf+0x1792>
   21363:	41 b9 03 00 00 00    	mov    $0x3,%r9d
   21369:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
				dtoaresult = cp =
   21370:	48 8d bd a8 fd ff ff 	lea    -0x258(%rbp),%rdi
   21377:	48 8d 8d 5c fd ff ff 	lea    -0x2a4(%rbp),%rcx
   2137e:	48 8d 95 60 fd ff ff 	lea    -0x2a0(%rbp),%rdx
   21385:	8b b5 7c fd ff ff    	mov    -0x284(%rbp),%esi
   2138b:	49 89 f8             	mov    %rdi,%r8
   2138e:	44 89 cf             	mov    %r9d,%edi
   21391:	48 89 85 30 fd ff ff 	mov    %rax,-0x2d0(%rbp)
   21398:	f2 0f 10 85 30 fd ff 	movsd  -0x2d0(%rbp),%xmm0
   2139f:	ff 
   213a0:	e8 bb 7e 00 00       	callq  29260 <__dtoa>
   213a5:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   213ac:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   213b3:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
				    &expt, &signflag, &dtoaend);
				if (dtoaresult == NULL) {
   213ba:	48 83 bd d8 fd ff ff 	cmpq   $0x0,-0x228(%rbp)
   213c1:	00 
   213c2:	75 10                	jne    213d4 <__vfprintf+0x17fd>
					errno = ENOMEM;
   213c4:	e8 f7 e2 ff ff       	callq  1f6c0 <__errno>
   213c9:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
					goto error;
   213cf:	e9 a1 2b 00 00       	jmpq   23f75 <__vfprintf+0x439e>
				}
				if (expt == 9999)
   213d4:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   213da:	3d 0f 27 00 00       	cmp    $0x270f,%eax
   213df:	75 0f                	jne    213f0 <__vfprintf+0x1819>
					expt = INT_MAX;
   213e1:	c7 85 60 fd ff ff ff 	movl   $0x7fffffff,-0x2a0(%rbp)
   213e8:	ff ff 7f 
   213eb:	eb 04                	jmp    213f1 <__vfprintf+0x181a>
			goto fp_common;
   213ed:	90                   	nop
   213ee:	eb 01                	jmp    213f1 <__vfprintf+0x181a>
 			}
fp_common:
   213f0:	90                   	nop
			if (signflag)
   213f1:	8b 85 5c fd ff ff    	mov    -0x2a4(%rbp),%eax
   213f7:	85 c0                	test   %eax,%eax
   213f9:	74 07                	je     21402 <__vfprintf+0x182b>
				sign = '-';
   213fb:	c6 85 56 fd ff ff 2d 	movb   $0x2d,-0x2aa(%rbp)
			if (expt == INT_MAX) {	/* inf or nan */
   21402:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   21408:	3d ff ff ff 7f       	cmp    $0x7fffffff,%eax
   2140d:	75 70                	jne    2147f <__vfprintf+0x18a8>
				if (*cp == 'N') {
   2140f:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   21416:	0f b6 00             	movzbl (%rax),%eax
   21419:	3c 4e                	cmp    $0x4e,%al
   2141b:	75 29                	jne    21446 <__vfprintf+0x186f>
					cp = (ch >= 'a') ? "nan" : "NAN";
   2141d:	83 bd 64 fd ff ff 60 	cmpl   $0x60,-0x29c(%rbp)
   21424:	7e 09                	jle    2142f <__vfprintf+0x1858>
   21426:	48 8d 05 65 f5 00 00 	lea    0xf565(%rip),%rax        # 30992 <__func__.2393+0x799>
   2142d:	eb 07                	jmp    21436 <__vfprintf+0x185f>
   2142f:	48 8d 05 60 f5 00 00 	lea    0xf560(%rip),%rax        # 30996 <__func__.2393+0x79d>
   21436:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
					sign = '\0';
   2143d:	c6 85 56 fd ff ff 00 	movb   $0x0,-0x2aa(%rbp)
   21444:	eb 20                	jmp    21466 <__vfprintf+0x188f>
				} else
					cp = (ch >= 'a') ? "inf" : "INF";
   21446:	83 bd 64 fd ff ff 60 	cmpl   $0x60,-0x29c(%rbp)
   2144d:	7e 09                	jle    21458 <__vfprintf+0x1881>
   2144f:	48 8d 05 44 f5 00 00 	lea    0xf544(%rip),%rax        # 3099a <__func__.2393+0x7a1>
   21456:	eb 07                	jmp    2145f <__vfprintf+0x1888>
   21458:	48 8d 05 3f f5 00 00 	lea    0xf53f(%rip),%rax        # 3099e <__func__.2393+0x7a5>
   2145f:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
 				size = 3;
   21466:	c7 85 98 fd ff ff 03 	movl   $0x3,-0x268(%rbp)
   2146d:	00 00 00 
				flags &= ~ZEROPAD;
   21470:	81 a5 70 fd ff ff 7f 	andl   $0xffffff7f,-0x290(%rbp)
   21477:	ff ff ff 
 				break;
   2147a:	e9 7a 17 00 00       	jmpq   22bf9 <__vfprintf+0x3022>
 			}
			flags |= FPT;
   2147f:	81 8d 70 fd ff ff 00 	orl    $0x100,-0x290(%rbp)
   21486:	01 00 00 
			ndig = dtoaend - cp;
   21489:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
   21490:	48 89 c2             	mov    %rax,%rdx
   21493:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   2149a:	48 29 c2             	sub    %rax,%rdx
   2149d:	48 89 d0             	mov    %rdx,%rax
   214a0:	89 85 88 fd ff ff    	mov    %eax,-0x278(%rbp)
 			if (ch == 'g' || ch == 'G') {
   214a6:	83 bd 64 fd ff ff 67 	cmpl   $0x67,-0x29c(%rbp)
   214ad:	74 09                	je     214b8 <__vfprintf+0x18e1>
   214af:	83 bd 64 fd ff ff 47 	cmpl   $0x47,-0x29c(%rbp)
   214b6:	75 7f                	jne    21537 <__vfprintf+0x1960>
				if (expt > -4 && expt <= prec) {
   214b8:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   214be:	83 f8 fd             	cmp    $0xfffffffd,%eax
   214c1:	7c 5b                	jl     2151e <__vfprintf+0x1947>
   214c3:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   214c9:	39 85 7c fd ff ff    	cmp    %eax,-0x284(%rbp)
   214cf:	7c 4d                	jl     2151e <__vfprintf+0x1947>
					/* Make %[gG] smell like %[fF] */
					expchar = '\0';
   214d1:	c6 85 57 fd ff ff 00 	movb   $0x0,-0x2a9(%rbp)
					if (flags & ALT)
   214d8:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   214de:	83 e0 01             	and    $0x1,%eax
   214e1:	85 c0                	test   %eax,%eax
   214e3:	74 0e                	je     214f3 <__vfprintf+0x191c>
						prec -= expt;
   214e5:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   214eb:	29 85 7c fd ff ff    	sub    %eax,-0x284(%rbp)
   214f1:	eb 16                	jmp    21509 <__vfprintf+0x1932>
					else
						prec = ndig - expt;
   214f3:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   214f9:	8b 95 88 fd ff ff    	mov    -0x278(%rbp),%edx
   214ff:	29 c2                	sub    %eax,%edx
   21501:	89 d0                	mov    %edx,%eax
   21503:	89 85 7c fd ff ff    	mov    %eax,-0x284(%rbp)
					if (prec < 0)
   21509:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   21510:	79 25                	jns    21537 <__vfprintf+0x1960>
						prec = 0;
   21512:	c7 85 7c fd ff ff 00 	movl   $0x0,-0x284(%rbp)
   21519:	00 00 00 
					if (prec < 0)
   2151c:	eb 19                	jmp    21537 <__vfprintf+0x1960>
				} else {
					/*
					 * Make %[gG] smell like %[eE], but
					 * trim trailing zeroes if no # flag.
					 */
					if (!(flags & ALT))
   2151e:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   21524:	83 e0 01             	and    $0x1,%eax
   21527:	85 c0                	test   %eax,%eax
   21529:	75 0c                	jne    21537 <__vfprintf+0x1960>
						prec = ndig;
   2152b:	8b 85 88 fd ff ff    	mov    -0x278(%rbp),%eax
   21531:	89 85 7c fd ff ff    	mov    %eax,-0x284(%rbp)
				}
 			}
			if (expchar) {
   21537:	80 bd 57 fd ff ff 00 	cmpb   $0x0,-0x2a9(%rbp)
   2153e:	74 5e                	je     2159e <__vfprintf+0x19c7>
				expsize = exponent(expstr, expt - 1, expchar);
   21540:	0f be 95 57 fd ff ff 	movsbl -0x2a9(%rbp),%edx
   21547:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   2154d:	8d 48 ff             	lea    -0x1(%rax),%ecx
   21550:	48 8d 45 88          	lea    -0x78(%rbp),%rax
   21554:	89 ce                	mov    %ecx,%esi
   21556:	48 89 c7             	mov    %rax,%rdi
   21559:	e8 f2 48 00 00       	callq  25e50 <exponent>
   2155e:	89 85 80 fd ff ff    	mov    %eax,-0x280(%rbp)
				size = expsize + prec;
   21564:	8b 95 80 fd ff ff    	mov    -0x280(%rbp),%edx
   2156a:	8b 85 7c fd ff ff    	mov    -0x284(%rbp),%eax
   21570:	01 d0                	add    %edx,%eax
   21572:	89 85 98 fd ff ff    	mov    %eax,-0x268(%rbp)
				if (prec > 1 || flags & ALT)
   21578:	83 bd 7c fd ff ff 01 	cmpl   $0x1,-0x284(%rbp)
   2157f:	7f 11                	jg     21592 <__vfprintf+0x19bb>
   21581:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   21587:	83 e0 01             	and    $0x1,%eax
   2158a:	85 c0                	test   %eax,%eax
   2158c:	0f 84 66 16 00 00    	je     22bf8 <__vfprintf+0x3021>
 					++size;
   21592:	83 85 98 fd ff ff 01 	addl   $0x1,-0x268(%rbp)
				/* space for decimal pt and following digits */
				if (prec || flags & ALT)
					size += prec + 1;
				lead = expt;
			}
			break;
   21599:	e9 5a 16 00 00       	jmpq   22bf8 <__vfprintf+0x3021>
				if (expt > 0)
   2159e:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   215a4:	85 c0                	test   %eax,%eax
   215a6:	7e 0e                	jle    215b6 <__vfprintf+0x19df>
					size = expt;
   215a8:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   215ae:	89 85 98 fd ff ff    	mov    %eax,-0x268(%rbp)
   215b4:	eb 0a                	jmp    215c0 <__vfprintf+0x19e9>
					size = 1;
   215b6:	c7 85 98 fd ff ff 01 	movl   $0x1,-0x268(%rbp)
   215bd:	00 00 00 
				if (prec || flags & ALT)
   215c0:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   215c7:	75 0d                	jne    215d6 <__vfprintf+0x19ff>
   215c9:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   215cf:	83 e0 01             	and    $0x1,%eax
   215d2:	85 c0                	test   %eax,%eax
   215d4:	74 0f                	je     215e5 <__vfprintf+0x1a0e>
					size += prec + 1;
   215d6:	8b 85 7c fd ff ff    	mov    -0x284(%rbp),%eax
   215dc:	83 c0 01             	add    $0x1,%eax
   215df:	01 85 98 fd ff ff    	add    %eax,-0x268(%rbp)
				lead = expt;
   215e5:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   215eb:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%rbp)
			break;
   215f1:	e9 02 16 00 00       	jmpq   22bf8 <__vfprintf+0x3021>
#endif /* FLOATING_POINT */
		case 'n':
			abort();
   215f6:	e8 93 e9 00 00       	callq  2ff8e <abort>
			else
				*GETARG(int *) = ret;
			continue;	/* no output */
#endif
		case 'O':
			flags |= LONGINT;
   215fb:	83 8d 70 fd ff ff 10 	orl    $0x10,-0x290(%rbp)
			/*FALLTHROUGH*/
		case 'o':
			_umax = UARG();
   21602:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   21608:	25 00 10 00 00       	and    $0x1000,%eax
   2160d:	85 c0                	test   %eax,%eax
   2160f:	0f 84 9a 00 00 00    	je     216af <__vfprintf+0x1ad8>
   21615:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   2161c:	48 85 c0             	test   %rax,%rax
   2161f:	74 27                	je     21648 <__vfprintf+0x1a71>
   21621:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   21628:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   2162e:	8d 50 01             	lea    0x1(%rax),%edx
   21631:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   21637:	48 98                	cltq   
   21639:	48 c1 e0 04          	shl    $0x4,%rax
   2163d:	48 01 c8             	add    %rcx,%rax
   21640:	48 8b 00             	mov    (%rax),%rax
   21643:	e9 0b 05 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   21648:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   2164f:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21656:	8b 00                	mov    (%rax),%eax
   21658:	83 f8 2f             	cmp    $0x2f,%eax
   2165b:	77 30                	ja     2168d <__vfprintf+0x1ab6>
   2165d:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21664:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21668:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2166f:	8b 00                	mov    (%rax),%eax
   21671:	89 c0                	mov    %eax,%eax
   21673:	48 01 d0             	add    %rdx,%rax
   21676:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2167d:	8b 12                	mov    (%rdx),%edx
   2167f:	8d 4a 08             	lea    0x8(%rdx),%ecx
   21682:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21689:	89 0a                	mov    %ecx,(%rdx)
   2168b:	eb 1a                	jmp    216a7 <__vfprintf+0x1ad0>
   2168d:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21694:	48 8b 40 08          	mov    0x8(%rax),%rax
   21698:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2169c:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   216a3:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   216a7:	48 8b 00             	mov    (%rax),%rax
   216aa:	e9 a4 04 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   216af:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   216b5:	83 e0 20             	and    $0x20,%eax
   216b8:	85 c0                	test   %eax,%eax
   216ba:	0f 84 9a 00 00 00    	je     2175a <__vfprintf+0x1b83>
   216c0:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   216c7:	48 85 c0             	test   %rax,%rax
   216ca:	74 27                	je     216f3 <__vfprintf+0x1b1c>
   216cc:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   216d3:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   216d9:	8d 50 01             	lea    0x1(%rax),%edx
   216dc:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   216e2:	48 98                	cltq   
   216e4:	48 c1 e0 04          	shl    $0x4,%rax
   216e8:	48 01 c8             	add    %rcx,%rax
   216eb:	48 8b 00             	mov    (%rax),%rax
   216ee:	e9 60 04 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   216f3:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   216fa:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21701:	8b 00                	mov    (%rax),%eax
   21703:	83 f8 2f             	cmp    $0x2f,%eax
   21706:	77 30                	ja     21738 <__vfprintf+0x1b61>
   21708:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2170f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21713:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2171a:	8b 00                	mov    (%rax),%eax
   2171c:	89 c0                	mov    %eax,%eax
   2171e:	48 01 d0             	add    %rdx,%rax
   21721:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21728:	8b 12                	mov    (%rdx),%edx
   2172a:	8d 4a 08             	lea    0x8(%rdx),%ecx
   2172d:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21734:	89 0a                	mov    %ecx,(%rdx)
   21736:	eb 1a                	jmp    21752 <__vfprintf+0x1b7b>
   21738:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2173f:	48 8b 40 08          	mov    0x8(%rax),%rax
   21743:	48 8d 48 08          	lea    0x8(%rax),%rcx
   21747:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2174e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21752:	48 8b 00             	mov    (%rax),%rax
   21755:	e9 f9 03 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   2175a:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   21760:	83 e0 10             	and    $0x10,%eax
   21763:	85 c0                	test   %eax,%eax
   21765:	0f 84 9a 00 00 00    	je     21805 <__vfprintf+0x1c2e>
   2176b:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   21772:	48 85 c0             	test   %rax,%rax
   21775:	74 27                	je     2179e <__vfprintf+0x1bc7>
   21777:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   2177e:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21784:	8d 50 01             	lea    0x1(%rax),%edx
   21787:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   2178d:	48 98                	cltq   
   2178f:	48 c1 e0 04          	shl    $0x4,%rax
   21793:	48 01 c8             	add    %rcx,%rax
   21796:	48 8b 00             	mov    (%rax),%rax
   21799:	e9 b5 03 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   2179e:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   217a5:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   217ac:	8b 00                	mov    (%rax),%eax
   217ae:	83 f8 2f             	cmp    $0x2f,%eax
   217b1:	77 30                	ja     217e3 <__vfprintf+0x1c0c>
   217b3:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   217ba:	48 8b 50 10          	mov    0x10(%rax),%rdx
   217be:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   217c5:	8b 00                	mov    (%rax),%eax
   217c7:	89 c0                	mov    %eax,%eax
   217c9:	48 01 d0             	add    %rdx,%rax
   217cc:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   217d3:	8b 12                	mov    (%rdx),%edx
   217d5:	8d 4a 08             	lea    0x8(%rdx),%ecx
   217d8:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   217df:	89 0a                	mov    %ecx,(%rdx)
   217e1:	eb 1a                	jmp    217fd <__vfprintf+0x1c26>
   217e3:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   217ea:	48 8b 40 08          	mov    0x8(%rax),%rax
   217ee:	48 8d 48 08          	lea    0x8(%rax),%rcx
   217f2:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   217f9:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   217fd:	48 8b 00             	mov    (%rax),%rax
   21800:	e9 4e 03 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   21805:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   2180b:	25 00 02 00 00       	and    $0x200,%eax
   21810:	85 c0                	test   %eax,%eax
   21812:	0f 84 9a 00 00 00    	je     218b2 <__vfprintf+0x1cdb>
   21818:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   2181f:	48 85 c0             	test   %rax,%rax
   21822:	74 27                	je     2184b <__vfprintf+0x1c74>
   21824:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   2182b:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21831:	8d 50 01             	lea    0x1(%rax),%edx
   21834:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   2183a:	48 98                	cltq   
   2183c:	48 c1 e0 04          	shl    $0x4,%rax
   21840:	48 01 c8             	add    %rcx,%rax
   21843:	48 8b 00             	mov    (%rax),%rax
   21846:	e9 08 03 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   2184b:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   21852:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21859:	8b 00                	mov    (%rax),%eax
   2185b:	83 f8 2f             	cmp    $0x2f,%eax
   2185e:	77 30                	ja     21890 <__vfprintf+0x1cb9>
   21860:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21867:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2186b:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21872:	8b 00                	mov    (%rax),%eax
   21874:	89 c0                	mov    %eax,%eax
   21876:	48 01 d0             	add    %rdx,%rax
   21879:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21880:	8b 12                	mov    (%rdx),%edx
   21882:	8d 4a 08             	lea    0x8(%rdx),%ecx
   21885:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2188c:	89 0a                	mov    %ecx,(%rdx)
   2188e:	eb 1a                	jmp    218aa <__vfprintf+0x1cd3>
   21890:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21897:	48 8b 40 08          	mov    0x8(%rax),%rax
   2189b:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2189f:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   218a6:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   218aa:	48 8b 00             	mov    (%rax),%rax
   218ad:	e9 a1 02 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   218b2:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   218b8:	25 00 04 00 00       	and    $0x400,%eax
   218bd:	85 c0                	test   %eax,%eax
   218bf:	0f 84 9a 00 00 00    	je     2195f <__vfprintf+0x1d88>
   218c5:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   218cc:	48 85 c0             	test   %rax,%rax
   218cf:	74 27                	je     218f8 <__vfprintf+0x1d21>
   218d1:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   218d8:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   218de:	8d 50 01             	lea    0x1(%rax),%edx
   218e1:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   218e7:	48 98                	cltq   
   218e9:	48 c1 e0 04          	shl    $0x4,%rax
   218ed:	48 01 c8             	add    %rcx,%rax
   218f0:	48 8b 00             	mov    (%rax),%rax
   218f3:	e9 5b 02 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   218f8:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   218ff:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21906:	8b 00                	mov    (%rax),%eax
   21908:	83 f8 2f             	cmp    $0x2f,%eax
   2190b:	77 30                	ja     2193d <__vfprintf+0x1d66>
   2190d:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21914:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21918:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2191f:	8b 00                	mov    (%rax),%eax
   21921:	89 c0                	mov    %eax,%eax
   21923:	48 01 d0             	add    %rdx,%rax
   21926:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2192d:	8b 12                	mov    (%rdx),%edx
   2192f:	8d 4a 08             	lea    0x8(%rdx),%ecx
   21932:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21939:	89 0a                	mov    %ecx,(%rdx)
   2193b:	eb 1a                	jmp    21957 <__vfprintf+0x1d80>
   2193d:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21944:	48 8b 40 08          	mov    0x8(%rax),%rax
   21948:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2194c:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21953:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21957:	48 8b 00             	mov    (%rax),%rax
   2195a:	e9 f4 01 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   2195f:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   21965:	83 e0 40             	and    $0x40,%eax
   21968:	85 c0                	test   %eax,%eax
   2196a:	0f 84 9e 00 00 00    	je     21a0e <__vfprintf+0x1e37>
   21970:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   21977:	48 85 c0             	test   %rax,%rax
   2197a:	74 29                	je     219a5 <__vfprintf+0x1dce>
   2197c:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   21983:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21989:	8d 50 01             	lea    0x1(%rax),%edx
   2198c:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   21992:	48 98                	cltq   
   21994:	48 c1 e0 04          	shl    $0x4,%rax
   21998:	48 01 c8             	add    %rcx,%rax
   2199b:	8b 00                	mov    (%rax),%eax
   2199d:	0f b7 c0             	movzwl %ax,%eax
   219a0:	e9 ae 01 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   219a5:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   219ac:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   219b3:	8b 00                	mov    (%rax),%eax
   219b5:	83 f8 2f             	cmp    $0x2f,%eax
   219b8:	77 30                	ja     219ea <__vfprintf+0x1e13>
   219ba:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   219c1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   219c5:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   219cc:	8b 00                	mov    (%rax),%eax
   219ce:	89 c0                	mov    %eax,%eax
   219d0:	48 01 d0             	add    %rdx,%rax
   219d3:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   219da:	8b 12                	mov    (%rdx),%edx
   219dc:	8d 4a 08             	lea    0x8(%rdx),%ecx
   219df:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   219e6:	89 0a                	mov    %ecx,(%rdx)
   219e8:	eb 1a                	jmp    21a04 <__vfprintf+0x1e2d>
   219ea:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   219f1:	48 8b 40 08          	mov    0x8(%rax),%rax
   219f5:	48 8d 48 08          	lea    0x8(%rax),%rcx
   219f9:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21a00:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21a04:	8b 00                	mov    (%rax),%eax
   21a06:	0f b7 c0             	movzwl %ax,%eax
   21a09:	e9 45 01 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   21a0e:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   21a14:	25 00 08 00 00       	and    $0x800,%eax
   21a19:	85 c0                	test   %eax,%eax
   21a1b:	0f 84 9e 00 00 00    	je     21abf <__vfprintf+0x1ee8>
   21a21:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   21a28:	48 85 c0             	test   %rax,%rax
   21a2b:	74 29                	je     21a56 <__vfprintf+0x1e7f>
   21a2d:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   21a34:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21a3a:	8d 50 01             	lea    0x1(%rax),%edx
   21a3d:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   21a43:	48 98                	cltq   
   21a45:	48 c1 e0 04          	shl    $0x4,%rax
   21a49:	48 01 c8             	add    %rcx,%rax
   21a4c:	8b 00                	mov    (%rax),%eax
   21a4e:	0f b6 c0             	movzbl %al,%eax
   21a51:	e9 fd 00 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   21a56:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   21a5d:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21a64:	8b 00                	mov    (%rax),%eax
   21a66:	83 f8 2f             	cmp    $0x2f,%eax
   21a69:	77 30                	ja     21a9b <__vfprintf+0x1ec4>
   21a6b:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21a72:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21a76:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21a7d:	8b 00                	mov    (%rax),%eax
   21a7f:	89 c0                	mov    %eax,%eax
   21a81:	48 01 d0             	add    %rdx,%rax
   21a84:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21a8b:	8b 12                	mov    (%rdx),%edx
   21a8d:	8d 4a 08             	lea    0x8(%rdx),%ecx
   21a90:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21a97:	89 0a                	mov    %ecx,(%rdx)
   21a99:	eb 1a                	jmp    21ab5 <__vfprintf+0x1ede>
   21a9b:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21aa2:	48 8b 40 08          	mov    0x8(%rax),%rax
   21aa6:	48 8d 48 08          	lea    0x8(%rax),%rcx
   21aaa:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21ab1:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21ab5:	8b 00                	mov    (%rax),%eax
   21ab7:	0f b6 c0             	movzbl %al,%eax
   21aba:	e9 94 00 00 00       	jmpq   21b53 <__vfprintf+0x1f7c>
   21abf:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   21ac6:	48 85 c0             	test   %rax,%rax
   21ac9:	74 25                	je     21af0 <__vfprintf+0x1f19>
   21acb:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   21ad2:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21ad8:	8d 50 01             	lea    0x1(%rax),%edx
   21adb:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   21ae1:	48 98                	cltq   
   21ae3:	48 c1 e0 04          	shl    $0x4,%rax
   21ae7:	48 01 c8             	add    %rcx,%rax
   21aea:	8b 00                	mov    (%rax),%eax
   21aec:	89 c0                	mov    %eax,%eax
   21aee:	eb 63                	jmp    21b53 <__vfprintf+0x1f7c>
   21af0:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   21af7:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21afe:	8b 00                	mov    (%rax),%eax
   21b00:	83 f8 2f             	cmp    $0x2f,%eax
   21b03:	77 30                	ja     21b35 <__vfprintf+0x1f5e>
   21b05:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21b0c:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21b10:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21b17:	8b 00                	mov    (%rax),%eax
   21b19:	89 c0                	mov    %eax,%eax
   21b1b:	48 01 d0             	add    %rdx,%rax
   21b1e:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21b25:	8b 12                	mov    (%rdx),%edx
   21b27:	8d 4a 08             	lea    0x8(%rdx),%ecx
   21b2a:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21b31:	89 0a                	mov    %ecx,(%rdx)
   21b33:	eb 1a                	jmp    21b4f <__vfprintf+0x1f78>
   21b35:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21b3c:	48 8b 40 08          	mov    0x8(%rax),%rax
   21b40:	48 8d 48 08          	lea    0x8(%rax),%rcx
   21b44:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21b4b:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21b4f:	8b 00                	mov    (%rax),%eax
   21b51:	89 c0                	mov    %eax,%eax
   21b53:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
			base = OCT;
   21b5a:	c7 85 8c fd ff ff 00 	movl   $0x0,-0x274(%rbp)
   21b61:	00 00 00 
			goto nosign;
   21b64:	e9 4f 0e 00 00       	jmpq   229b8 <__vfprintf+0x2de1>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_umax = (size_t)GETARG(void *);
   21b69:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   21b70:	48 85 c0             	test   %rax,%rax
   21b73:	74 24                	je     21b99 <__vfprintf+0x1fc2>
   21b75:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   21b7c:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21b82:	8d 50 01             	lea    0x1(%rax),%edx
   21b85:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   21b8b:	48 98                	cltq   
   21b8d:	48 c1 e0 04          	shl    $0x4,%rax
   21b91:	48 01 c8             	add    %rcx,%rax
   21b94:	48 8b 00             	mov    (%rax),%rax
   21b97:	eb 62                	jmp    21bfb <__vfprintf+0x2024>
   21b99:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   21ba0:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21ba7:	8b 00                	mov    (%rax),%eax
   21ba9:	83 f8 2f             	cmp    $0x2f,%eax
   21bac:	77 30                	ja     21bde <__vfprintf+0x2007>
   21bae:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21bb5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21bb9:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21bc0:	8b 00                	mov    (%rax),%eax
   21bc2:	89 c0                	mov    %eax,%eax
   21bc4:	48 01 d0             	add    %rdx,%rax
   21bc7:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21bce:	8b 12                	mov    (%rdx),%edx
   21bd0:	8d 4a 08             	lea    0x8(%rdx),%ecx
   21bd3:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21bda:	89 0a                	mov    %ecx,(%rdx)
   21bdc:	eb 1a                	jmp    21bf8 <__vfprintf+0x2021>
   21bde:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21be5:	48 8b 40 08          	mov    0x8(%rax),%rax
   21be9:	48 8d 48 08          	lea    0x8(%rax),%rcx
   21bed:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21bf4:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21bf8:	48 8b 00             	mov    (%rax),%rax
   21bfb:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
			base = HEX;
   21c02:	c7 85 8c fd ff ff 02 	movl   $0x2,-0x274(%rbp)
   21c09:	00 00 00 
			xdigs = xdigs_lower;
   21c0c:	48 8d 05 fd f0 00 00 	lea    0xf0fd(%rip),%rax        # 30d10 <xdigs_lower.3163>
   21c13:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
			ox[1] = 'x';
   21c1a:	c6 45 87 78          	movb   $0x78,-0x79(%rbp)
			goto nosign;
   21c1e:	e9 95 0d 00 00       	jmpq   229b8 <__vfprintf+0x2de1>
		case 's':
#ifdef PRINTF_WIDE_CHAR
			if (flags & LONGINT) {
   21c23:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   21c29:	83 e0 10             	and    $0x10,%eax
   21c2c:	85 c0                	test   %eax,%eax
   21c2e:	0f 84 27 01 00 00    	je     21d5b <__vfprintf+0x2184>
				wchar_t *wcp;

				if (convbuf != NULL) {
   21c34:	48 83 bd f0 fd ff ff 	cmpq   $0x0,-0x210(%rbp)
   21c3b:	00 
   21c3c:	74 1a                	je     21c58 <__vfprintf+0x2081>
					free(convbuf);
   21c3e:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
   21c45:	48 89 c7             	mov    %rax,%rdi
   21c48:	e8 cf 9f fe ff       	callq  bc1c <dlfree>
					convbuf = NULL;
   21c4d:	48 c7 85 f0 fd ff ff 	movq   $0x0,-0x210(%rbp)
   21c54:	00 00 00 00 
				}
				if ((wcp = GETARG(wchar_t *)) == NULL) {
   21c58:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   21c5f:	48 85 c0             	test   %rax,%rax
   21c62:	74 24                	je     21c88 <__vfprintf+0x20b1>
   21c64:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   21c6b:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21c71:	8d 50 01             	lea    0x1(%rax),%edx
   21c74:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   21c7a:	48 98                	cltq   
   21c7c:	48 c1 e0 04          	shl    $0x4,%rax
   21c80:	48 01 c8             	add    %rcx,%rax
   21c83:	48 8b 00             	mov    (%rax),%rax
   21c86:	eb 62                	jmp    21cea <__vfprintf+0x2113>
   21c88:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   21c8f:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21c96:	8b 00                	mov    (%rax),%eax
   21c98:	83 f8 2f             	cmp    $0x2f,%eax
   21c9b:	77 30                	ja     21ccd <__vfprintf+0x20f6>
   21c9d:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21ca4:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21ca8:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21caf:	8b 00                	mov    (%rax),%eax
   21cb1:	89 c0                	mov    %eax,%eax
   21cb3:	48 01 d0             	add    %rdx,%rax
   21cb6:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21cbd:	8b 12                	mov    (%rdx),%edx
   21cbf:	8d 4a 08             	lea    0x8(%rdx),%ecx
   21cc2:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21cc9:	89 0a                	mov    %ecx,(%rdx)
   21ccb:	eb 1a                	jmp    21ce7 <__vfprintf+0x2110>
   21ccd:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21cd4:	48 8b 40 08          	mov    0x8(%rax),%rax
   21cd8:	48 8d 48 08          	lea    0x8(%rax),%rcx
   21cdc:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21ce3:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21ce7:	48 8b 00             	mov    (%rax),%rax
   21cea:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
   21cf1:	48 83 bd 10 fe ff ff 	cmpq   $0x0,-0x1f0(%rbp)
   21cf8:	00 
   21cf9:	75 13                	jne    21d0e <__vfprintf+0x2137>
					cp = "(null)";
   21cfb:	48 8d 05 a0 ec 00 00 	lea    0xeca0(%rip),%rax        # 309a2 <__func__.2393+0x7a9>
   21d02:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   21d09:	e9 fe 00 00 00       	jmpq   21e0c <__vfprintf+0x2235>
				} else {
					convbuf = __wcsconv(wcp, prec);
   21d0e:	8b 95 7c fd ff ff    	mov    -0x284(%rbp),%edx
   21d14:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
   21d1b:	89 d6                	mov    %edx,%esi
   21d1d:	48 89 c7             	mov    %rax,%rdi
   21d20:	e8 df dc ff ff       	callq  1fa04 <__wcsconv>
   21d25:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
					if (convbuf == NULL) {
   21d2c:	48 83 bd f0 fd ff ff 	cmpq   $0x0,-0x210(%rbp)
   21d33:	00 
   21d34:	75 12                	jne    21d48 <__vfprintf+0x2171>
						fp->_flags = __SERR;
   21d36:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   21d3d:	66 c7 40 10 40 00    	movw   $0x40,0x10(%rax)
						goto error;
   21d43:	e9 2d 22 00 00       	jmpq   23f75 <__vfprintf+0x439e>
					}
					cp = convbuf;
   21d48:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
   21d4f:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   21d56:	e9 b1 00 00 00       	jmpq   21e0c <__vfprintf+0x2235>
				}
			} else
#endif /* PRINTF_WIDE_CHAR */
			if ((cp = GETARG(char *)) == NULL)
   21d5b:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   21d62:	48 85 c0             	test   %rax,%rax
   21d65:	74 24                	je     21d8b <__vfprintf+0x21b4>
   21d67:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   21d6e:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21d74:	8d 50 01             	lea    0x1(%rax),%edx
   21d77:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   21d7d:	48 98                	cltq   
   21d7f:	48 c1 e0 04          	shl    $0x4,%rax
   21d83:	48 01 c8             	add    %rcx,%rax
   21d86:	48 8b 00             	mov    (%rax),%rax
   21d89:	eb 62                	jmp    21ded <__vfprintf+0x2216>
   21d8b:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   21d92:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21d99:	8b 00                	mov    (%rax),%eax
   21d9b:	83 f8 2f             	cmp    $0x2f,%eax
   21d9e:	77 30                	ja     21dd0 <__vfprintf+0x21f9>
   21da0:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21da7:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21dab:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21db2:	8b 00                	mov    (%rax),%eax
   21db4:	89 c0                	mov    %eax,%eax
   21db6:	48 01 d0             	add    %rdx,%rax
   21db9:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21dc0:	8b 12                	mov    (%rdx),%edx
   21dc2:	8d 4a 08             	lea    0x8(%rdx),%ecx
   21dc5:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21dcc:	89 0a                	mov    %ecx,(%rdx)
   21dce:	eb 1a                	jmp    21dea <__vfprintf+0x2213>
   21dd0:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21dd7:	48 8b 40 08          	mov    0x8(%rax),%rax
   21ddb:	48 8d 48 08          	lea    0x8(%rax),%rcx
   21ddf:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21de6:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21dea:	48 8b 00             	mov    (%rax),%rax
   21ded:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
   21df4:	48 83 bd c8 fd ff ff 	cmpq   $0x0,-0x238(%rbp)
   21dfb:	00 
   21dfc:	75 0e                	jne    21e0c <__vfprintf+0x2235>
				cp = "(null)";
   21dfe:	48 8d 05 9d eb 00 00 	lea    0xeb9d(%rip),%rax        # 309a2 <__func__.2393+0x7a9>
   21e05:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
			if (prec >= 0) {
   21e0c:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   21e13:	78 52                	js     21e67 <__vfprintf+0x2290>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen() will go further.
				 */
				char *p = (char *)memchr(cp, 0, prec);
   21e15:	8b 85 7c fd ff ff    	mov    -0x284(%rbp),%eax
   21e1b:	48 63 d0             	movslq %eax,%rdx
   21e1e:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   21e25:	be 00 00 00 00       	mov    $0x0,%esi
   21e2a:	48 89 c7             	mov    %rax,%rdi
   21e2d:	e8 40 98 00 00       	callq  2b672 <memchr>
   21e32:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)

				size = p ? (p - cp) : prec;
   21e39:	48 83 bd 20 fe ff ff 	cmpq   $0x0,-0x1e0(%rbp)
   21e40:	00 
   21e41:	74 16                	je     21e59 <__vfprintf+0x2282>
   21e43:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
   21e4a:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   21e51:	48 29 c2             	sub    %rax,%rdx
   21e54:	48 89 d0             	mov    %rdx,%rax
   21e57:	eb 06                	jmp    21e5f <__vfprintf+0x2288>
   21e59:	8b 85 7c fd ff ff    	mov    -0x284(%rbp),%eax
   21e5f:	89 85 98 fd ff ff    	mov    %eax,-0x268(%rbp)
   21e65:	eb 34                	jmp    21e9b <__vfprintf+0x22c4>
			} else {
				size_t len;

				if ((len = strlen(cp)) > INT_MAX)
   21e67:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   21e6e:	48 89 c7             	mov    %rax,%rdi
   21e71:	e8 c4 d0 fe ff       	callq  ef3a <strlen>
   21e76:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
   21e7d:	48 81 bd 18 fe ff ff 	cmpq   $0x7fffffff,-0x1e8(%rbp)
   21e84:	ff ff ff 7f 
   21e88:	0f 87 24 21 00 00    	ja     23fb2 <__vfprintf+0x43db>
					goto overflow;
				size = (int)len;
   21e8e:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
   21e95:	89 85 98 fd ff ff    	mov    %eax,-0x268(%rbp)
			}
			sign = '\0';
   21e9b:	c6 85 56 fd ff ff 00 	movb   $0x0,-0x2aa(%rbp)
			break;
   21ea2:	e9 52 0d 00 00       	jmpq   22bf9 <__vfprintf+0x3022>
		case 'U':
			flags |= LONGINT;
   21ea7:	83 8d 70 fd ff ff 10 	orl    $0x10,-0x290(%rbp)
			/*FALLTHROUGH*/
		case 'u':
			_umax = UARG();
   21eae:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   21eb4:	25 00 10 00 00       	and    $0x1000,%eax
   21eb9:	85 c0                	test   %eax,%eax
   21ebb:	0f 84 9a 00 00 00    	je     21f5b <__vfprintf+0x2384>
   21ec1:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   21ec8:	48 85 c0             	test   %rax,%rax
   21ecb:	74 27                	je     21ef4 <__vfprintf+0x231d>
   21ecd:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   21ed4:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21eda:	8d 50 01             	lea    0x1(%rax),%edx
   21edd:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   21ee3:	48 98                	cltq   
   21ee5:	48 c1 e0 04          	shl    $0x4,%rax
   21ee9:	48 01 c8             	add    %rcx,%rax
   21eec:	48 8b 00             	mov    (%rax),%rax
   21eef:	e9 0b 05 00 00       	jmpq   223ff <__vfprintf+0x2828>
   21ef4:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   21efb:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21f02:	8b 00                	mov    (%rax),%eax
   21f04:	83 f8 2f             	cmp    $0x2f,%eax
   21f07:	77 30                	ja     21f39 <__vfprintf+0x2362>
   21f09:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21f10:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21f14:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21f1b:	8b 00                	mov    (%rax),%eax
   21f1d:	89 c0                	mov    %eax,%eax
   21f1f:	48 01 d0             	add    %rdx,%rax
   21f22:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21f29:	8b 12                	mov    (%rdx),%edx
   21f2b:	8d 4a 08             	lea    0x8(%rdx),%ecx
   21f2e:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21f35:	89 0a                	mov    %ecx,(%rdx)
   21f37:	eb 1a                	jmp    21f53 <__vfprintf+0x237c>
   21f39:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21f40:	48 8b 40 08          	mov    0x8(%rax),%rax
   21f44:	48 8d 48 08          	lea    0x8(%rax),%rcx
   21f48:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21f4f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21f53:	48 8b 00             	mov    (%rax),%rax
   21f56:	e9 a4 04 00 00       	jmpq   223ff <__vfprintf+0x2828>
   21f5b:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   21f61:	83 e0 20             	and    $0x20,%eax
   21f64:	85 c0                	test   %eax,%eax
   21f66:	0f 84 9a 00 00 00    	je     22006 <__vfprintf+0x242f>
   21f6c:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   21f73:	48 85 c0             	test   %rax,%rax
   21f76:	74 27                	je     21f9f <__vfprintf+0x23c8>
   21f78:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   21f7f:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   21f85:	8d 50 01             	lea    0x1(%rax),%edx
   21f88:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   21f8e:	48 98                	cltq   
   21f90:	48 c1 e0 04          	shl    $0x4,%rax
   21f94:	48 01 c8             	add    %rcx,%rax
   21f97:	48 8b 00             	mov    (%rax),%rax
   21f9a:	e9 60 04 00 00       	jmpq   223ff <__vfprintf+0x2828>
   21f9f:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   21fa6:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21fad:	8b 00                	mov    (%rax),%eax
   21faf:	83 f8 2f             	cmp    $0x2f,%eax
   21fb2:	77 30                	ja     21fe4 <__vfprintf+0x240d>
   21fb4:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21fbb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   21fbf:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21fc6:	8b 00                	mov    (%rax),%eax
   21fc8:	89 c0                	mov    %eax,%eax
   21fca:	48 01 d0             	add    %rdx,%rax
   21fcd:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21fd4:	8b 12                	mov    (%rdx),%edx
   21fd6:	8d 4a 08             	lea    0x8(%rdx),%ecx
   21fd9:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21fe0:	89 0a                	mov    %ecx,(%rdx)
   21fe2:	eb 1a                	jmp    21ffe <__vfprintf+0x2427>
   21fe4:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   21feb:	48 8b 40 08          	mov    0x8(%rax),%rax
   21fef:	48 8d 48 08          	lea    0x8(%rax),%rcx
   21ff3:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   21ffa:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   21ffe:	48 8b 00             	mov    (%rax),%rax
   22001:	e9 f9 03 00 00       	jmpq   223ff <__vfprintf+0x2828>
   22006:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   2200c:	83 e0 10             	and    $0x10,%eax
   2200f:	85 c0                	test   %eax,%eax
   22011:	0f 84 9a 00 00 00    	je     220b1 <__vfprintf+0x24da>
   22017:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   2201e:	48 85 c0             	test   %rax,%rax
   22021:	74 27                	je     2204a <__vfprintf+0x2473>
   22023:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   2202a:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   22030:	8d 50 01             	lea    0x1(%rax),%edx
   22033:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   22039:	48 98                	cltq   
   2203b:	48 c1 e0 04          	shl    $0x4,%rax
   2203f:	48 01 c8             	add    %rcx,%rax
   22042:	48 8b 00             	mov    (%rax),%rax
   22045:	e9 b5 03 00 00       	jmpq   223ff <__vfprintf+0x2828>
   2204a:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   22051:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22058:	8b 00                	mov    (%rax),%eax
   2205a:	83 f8 2f             	cmp    $0x2f,%eax
   2205d:	77 30                	ja     2208f <__vfprintf+0x24b8>
   2205f:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22066:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2206a:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22071:	8b 00                	mov    (%rax),%eax
   22073:	89 c0                	mov    %eax,%eax
   22075:	48 01 d0             	add    %rdx,%rax
   22078:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2207f:	8b 12                	mov    (%rdx),%edx
   22081:	8d 4a 08             	lea    0x8(%rdx),%ecx
   22084:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2208b:	89 0a                	mov    %ecx,(%rdx)
   2208d:	eb 1a                	jmp    220a9 <__vfprintf+0x24d2>
   2208f:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22096:	48 8b 40 08          	mov    0x8(%rax),%rax
   2209a:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2209e:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   220a5:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   220a9:	48 8b 00             	mov    (%rax),%rax
   220ac:	e9 4e 03 00 00       	jmpq   223ff <__vfprintf+0x2828>
   220b1:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   220b7:	25 00 02 00 00       	and    $0x200,%eax
   220bc:	85 c0                	test   %eax,%eax
   220be:	0f 84 9a 00 00 00    	je     2215e <__vfprintf+0x2587>
   220c4:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   220cb:	48 85 c0             	test   %rax,%rax
   220ce:	74 27                	je     220f7 <__vfprintf+0x2520>
   220d0:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   220d7:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   220dd:	8d 50 01             	lea    0x1(%rax),%edx
   220e0:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   220e6:	48 98                	cltq   
   220e8:	48 c1 e0 04          	shl    $0x4,%rax
   220ec:	48 01 c8             	add    %rcx,%rax
   220ef:	48 8b 00             	mov    (%rax),%rax
   220f2:	e9 08 03 00 00       	jmpq   223ff <__vfprintf+0x2828>
   220f7:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   220fe:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22105:	8b 00                	mov    (%rax),%eax
   22107:	83 f8 2f             	cmp    $0x2f,%eax
   2210a:	77 30                	ja     2213c <__vfprintf+0x2565>
   2210c:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22113:	48 8b 50 10          	mov    0x10(%rax),%rdx
   22117:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2211e:	8b 00                	mov    (%rax),%eax
   22120:	89 c0                	mov    %eax,%eax
   22122:	48 01 d0             	add    %rdx,%rax
   22125:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2212c:	8b 12                	mov    (%rdx),%edx
   2212e:	8d 4a 08             	lea    0x8(%rdx),%ecx
   22131:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22138:	89 0a                	mov    %ecx,(%rdx)
   2213a:	eb 1a                	jmp    22156 <__vfprintf+0x257f>
   2213c:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22143:	48 8b 40 08          	mov    0x8(%rax),%rax
   22147:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2214b:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22152:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   22156:	48 8b 00             	mov    (%rax),%rax
   22159:	e9 a1 02 00 00       	jmpq   223ff <__vfprintf+0x2828>
   2215e:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   22164:	25 00 04 00 00       	and    $0x400,%eax
   22169:	85 c0                	test   %eax,%eax
   2216b:	0f 84 9a 00 00 00    	je     2220b <__vfprintf+0x2634>
   22171:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   22178:	48 85 c0             	test   %rax,%rax
   2217b:	74 27                	je     221a4 <__vfprintf+0x25cd>
   2217d:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   22184:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   2218a:	8d 50 01             	lea    0x1(%rax),%edx
   2218d:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   22193:	48 98                	cltq   
   22195:	48 c1 e0 04          	shl    $0x4,%rax
   22199:	48 01 c8             	add    %rcx,%rax
   2219c:	48 8b 00             	mov    (%rax),%rax
   2219f:	e9 5b 02 00 00       	jmpq   223ff <__vfprintf+0x2828>
   221a4:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   221ab:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   221b2:	8b 00                	mov    (%rax),%eax
   221b4:	83 f8 2f             	cmp    $0x2f,%eax
   221b7:	77 30                	ja     221e9 <__vfprintf+0x2612>
   221b9:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   221c0:	48 8b 50 10          	mov    0x10(%rax),%rdx
   221c4:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   221cb:	8b 00                	mov    (%rax),%eax
   221cd:	89 c0                	mov    %eax,%eax
   221cf:	48 01 d0             	add    %rdx,%rax
   221d2:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   221d9:	8b 12                	mov    (%rdx),%edx
   221db:	8d 4a 08             	lea    0x8(%rdx),%ecx
   221de:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   221e5:	89 0a                	mov    %ecx,(%rdx)
   221e7:	eb 1a                	jmp    22203 <__vfprintf+0x262c>
   221e9:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   221f0:	48 8b 40 08          	mov    0x8(%rax),%rax
   221f4:	48 8d 48 08          	lea    0x8(%rax),%rcx
   221f8:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   221ff:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   22203:	48 8b 00             	mov    (%rax),%rax
   22206:	e9 f4 01 00 00       	jmpq   223ff <__vfprintf+0x2828>
   2220b:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   22211:	83 e0 40             	and    $0x40,%eax
   22214:	85 c0                	test   %eax,%eax
   22216:	0f 84 9e 00 00 00    	je     222ba <__vfprintf+0x26e3>
   2221c:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   22223:	48 85 c0             	test   %rax,%rax
   22226:	74 29                	je     22251 <__vfprintf+0x267a>
   22228:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   2222f:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   22235:	8d 50 01             	lea    0x1(%rax),%edx
   22238:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   2223e:	48 98                	cltq   
   22240:	48 c1 e0 04          	shl    $0x4,%rax
   22244:	48 01 c8             	add    %rcx,%rax
   22247:	8b 00                	mov    (%rax),%eax
   22249:	0f b7 c0             	movzwl %ax,%eax
   2224c:	e9 ae 01 00 00       	jmpq   223ff <__vfprintf+0x2828>
   22251:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   22258:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2225f:	8b 00                	mov    (%rax),%eax
   22261:	83 f8 2f             	cmp    $0x2f,%eax
   22264:	77 30                	ja     22296 <__vfprintf+0x26bf>
   22266:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2226d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   22271:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22278:	8b 00                	mov    (%rax),%eax
   2227a:	89 c0                	mov    %eax,%eax
   2227c:	48 01 d0             	add    %rdx,%rax
   2227f:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22286:	8b 12                	mov    (%rdx),%edx
   22288:	8d 4a 08             	lea    0x8(%rdx),%ecx
   2228b:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22292:	89 0a                	mov    %ecx,(%rdx)
   22294:	eb 1a                	jmp    222b0 <__vfprintf+0x26d9>
   22296:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2229d:	48 8b 40 08          	mov    0x8(%rax),%rax
   222a1:	48 8d 48 08          	lea    0x8(%rax),%rcx
   222a5:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   222ac:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   222b0:	8b 00                	mov    (%rax),%eax
   222b2:	0f b7 c0             	movzwl %ax,%eax
   222b5:	e9 45 01 00 00       	jmpq   223ff <__vfprintf+0x2828>
   222ba:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   222c0:	25 00 08 00 00       	and    $0x800,%eax
   222c5:	85 c0                	test   %eax,%eax
   222c7:	0f 84 9e 00 00 00    	je     2236b <__vfprintf+0x2794>
   222cd:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   222d4:	48 85 c0             	test   %rax,%rax
   222d7:	74 29                	je     22302 <__vfprintf+0x272b>
   222d9:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   222e0:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   222e6:	8d 50 01             	lea    0x1(%rax),%edx
   222e9:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   222ef:	48 98                	cltq   
   222f1:	48 c1 e0 04          	shl    $0x4,%rax
   222f5:	48 01 c8             	add    %rcx,%rax
   222f8:	8b 00                	mov    (%rax),%eax
   222fa:	0f b6 c0             	movzbl %al,%eax
   222fd:	e9 fd 00 00 00       	jmpq   223ff <__vfprintf+0x2828>
   22302:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   22309:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22310:	8b 00                	mov    (%rax),%eax
   22312:	83 f8 2f             	cmp    $0x2f,%eax
   22315:	77 30                	ja     22347 <__vfprintf+0x2770>
   22317:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2231e:	48 8b 50 10          	mov    0x10(%rax),%rdx
   22322:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22329:	8b 00                	mov    (%rax),%eax
   2232b:	89 c0                	mov    %eax,%eax
   2232d:	48 01 d0             	add    %rdx,%rax
   22330:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22337:	8b 12                	mov    (%rdx),%edx
   22339:	8d 4a 08             	lea    0x8(%rdx),%ecx
   2233c:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22343:	89 0a                	mov    %ecx,(%rdx)
   22345:	eb 1a                	jmp    22361 <__vfprintf+0x278a>
   22347:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2234e:	48 8b 40 08          	mov    0x8(%rax),%rax
   22352:	48 8d 48 08          	lea    0x8(%rax),%rcx
   22356:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2235d:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   22361:	8b 00                	mov    (%rax),%eax
   22363:	0f b6 c0             	movzbl %al,%eax
   22366:	e9 94 00 00 00       	jmpq   223ff <__vfprintf+0x2828>
   2236b:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   22372:	48 85 c0             	test   %rax,%rax
   22375:	74 25                	je     2239c <__vfprintf+0x27c5>
   22377:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   2237e:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   22384:	8d 50 01             	lea    0x1(%rax),%edx
   22387:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   2238d:	48 98                	cltq   
   2238f:	48 c1 e0 04          	shl    $0x4,%rax
   22393:	48 01 c8             	add    %rcx,%rax
   22396:	8b 00                	mov    (%rax),%eax
   22398:	89 c0                	mov    %eax,%eax
   2239a:	eb 63                	jmp    223ff <__vfprintf+0x2828>
   2239c:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   223a3:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   223aa:	8b 00                	mov    (%rax),%eax
   223ac:	83 f8 2f             	cmp    $0x2f,%eax
   223af:	77 30                	ja     223e1 <__vfprintf+0x280a>
   223b1:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   223b8:	48 8b 50 10          	mov    0x10(%rax),%rdx
   223bc:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   223c3:	8b 00                	mov    (%rax),%eax
   223c5:	89 c0                	mov    %eax,%eax
   223c7:	48 01 d0             	add    %rdx,%rax
   223ca:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   223d1:	8b 12                	mov    (%rdx),%edx
   223d3:	8d 4a 08             	lea    0x8(%rdx),%ecx
   223d6:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   223dd:	89 0a                	mov    %ecx,(%rdx)
   223df:	eb 1a                	jmp    223fb <__vfprintf+0x2824>
   223e1:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   223e8:	48 8b 40 08          	mov    0x8(%rax),%rax
   223ec:	48 8d 48 08          	lea    0x8(%rax),%rcx
   223f0:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   223f7:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   223fb:	8b 00                	mov    (%rax),%eax
   223fd:	89 c0                	mov    %eax,%eax
   223ff:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
			base = DEC;
   22406:	c7 85 8c fd ff ff 01 	movl   $0x1,-0x274(%rbp)
   2240d:	00 00 00 
			goto nosign;
   22410:	e9 a3 05 00 00       	jmpq   229b8 <__vfprintf+0x2de1>
		case 'X':
			xdigs = xdigs_upper;
   22415:	48 8d 05 04 e9 00 00 	lea    0xe904(%rip),%rax        # 30d20 <xdigs_upper.3164>
   2241c:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
			goto hex;
   22423:	eb 0e                	jmp    22433 <__vfprintf+0x285c>
		case 'x':
			xdigs = xdigs_lower;
   22425:	48 8d 05 e4 e8 00 00 	lea    0xe8e4(%rip),%rax        # 30d10 <xdigs_lower.3163>
   2242c:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
hex:			_umax = UARG();
   22433:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   22439:	25 00 10 00 00       	and    $0x1000,%eax
   2243e:	85 c0                	test   %eax,%eax
   22440:	0f 84 9a 00 00 00    	je     224e0 <__vfprintf+0x2909>
   22446:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   2244d:	48 85 c0             	test   %rax,%rax
   22450:	74 27                	je     22479 <__vfprintf+0x28a2>
   22452:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   22459:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   2245f:	8d 50 01             	lea    0x1(%rax),%edx
   22462:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   22468:	48 98                	cltq   
   2246a:	48 c1 e0 04          	shl    $0x4,%rax
   2246e:	48 01 c8             	add    %rcx,%rax
   22471:	48 8b 00             	mov    (%rax),%rax
   22474:	e9 0b 05 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   22479:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   22480:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22487:	8b 00                	mov    (%rax),%eax
   22489:	83 f8 2f             	cmp    $0x2f,%eax
   2248c:	77 30                	ja     224be <__vfprintf+0x28e7>
   2248e:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22495:	48 8b 50 10          	mov    0x10(%rax),%rdx
   22499:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   224a0:	8b 00                	mov    (%rax),%eax
   224a2:	89 c0                	mov    %eax,%eax
   224a4:	48 01 d0             	add    %rdx,%rax
   224a7:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   224ae:	8b 12                	mov    (%rdx),%edx
   224b0:	8d 4a 08             	lea    0x8(%rdx),%ecx
   224b3:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   224ba:	89 0a                	mov    %ecx,(%rdx)
   224bc:	eb 1a                	jmp    224d8 <__vfprintf+0x2901>
   224be:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   224c5:	48 8b 40 08          	mov    0x8(%rax),%rax
   224c9:	48 8d 48 08          	lea    0x8(%rax),%rcx
   224cd:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   224d4:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   224d8:	48 8b 00             	mov    (%rax),%rax
   224db:	e9 a4 04 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   224e0:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   224e6:	83 e0 20             	and    $0x20,%eax
   224e9:	85 c0                	test   %eax,%eax
   224eb:	0f 84 9a 00 00 00    	je     2258b <__vfprintf+0x29b4>
   224f1:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   224f8:	48 85 c0             	test   %rax,%rax
   224fb:	74 27                	je     22524 <__vfprintf+0x294d>
   224fd:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   22504:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   2250a:	8d 50 01             	lea    0x1(%rax),%edx
   2250d:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   22513:	48 98                	cltq   
   22515:	48 c1 e0 04          	shl    $0x4,%rax
   22519:	48 01 c8             	add    %rcx,%rax
   2251c:	48 8b 00             	mov    (%rax),%rax
   2251f:	e9 60 04 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   22524:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   2252b:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22532:	8b 00                	mov    (%rax),%eax
   22534:	83 f8 2f             	cmp    $0x2f,%eax
   22537:	77 30                	ja     22569 <__vfprintf+0x2992>
   22539:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22540:	48 8b 50 10          	mov    0x10(%rax),%rdx
   22544:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2254b:	8b 00                	mov    (%rax),%eax
   2254d:	89 c0                	mov    %eax,%eax
   2254f:	48 01 d0             	add    %rdx,%rax
   22552:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22559:	8b 12                	mov    (%rdx),%edx
   2255b:	8d 4a 08             	lea    0x8(%rdx),%ecx
   2255e:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22565:	89 0a                	mov    %ecx,(%rdx)
   22567:	eb 1a                	jmp    22583 <__vfprintf+0x29ac>
   22569:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22570:	48 8b 40 08          	mov    0x8(%rax),%rax
   22574:	48 8d 48 08          	lea    0x8(%rax),%rcx
   22578:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2257f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   22583:	48 8b 00             	mov    (%rax),%rax
   22586:	e9 f9 03 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   2258b:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   22591:	83 e0 10             	and    $0x10,%eax
   22594:	85 c0                	test   %eax,%eax
   22596:	0f 84 9a 00 00 00    	je     22636 <__vfprintf+0x2a5f>
   2259c:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   225a3:	48 85 c0             	test   %rax,%rax
   225a6:	74 27                	je     225cf <__vfprintf+0x29f8>
   225a8:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   225af:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   225b5:	8d 50 01             	lea    0x1(%rax),%edx
   225b8:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   225be:	48 98                	cltq   
   225c0:	48 c1 e0 04          	shl    $0x4,%rax
   225c4:	48 01 c8             	add    %rcx,%rax
   225c7:	48 8b 00             	mov    (%rax),%rax
   225ca:	e9 b5 03 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   225cf:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   225d6:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   225dd:	8b 00                	mov    (%rax),%eax
   225df:	83 f8 2f             	cmp    $0x2f,%eax
   225e2:	77 30                	ja     22614 <__vfprintf+0x2a3d>
   225e4:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   225eb:	48 8b 50 10          	mov    0x10(%rax),%rdx
   225ef:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   225f6:	8b 00                	mov    (%rax),%eax
   225f8:	89 c0                	mov    %eax,%eax
   225fa:	48 01 d0             	add    %rdx,%rax
   225fd:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22604:	8b 12                	mov    (%rdx),%edx
   22606:	8d 4a 08             	lea    0x8(%rdx),%ecx
   22609:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22610:	89 0a                	mov    %ecx,(%rdx)
   22612:	eb 1a                	jmp    2262e <__vfprintf+0x2a57>
   22614:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2261b:	48 8b 40 08          	mov    0x8(%rax),%rax
   2261f:	48 8d 48 08          	lea    0x8(%rax),%rcx
   22623:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2262a:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2262e:	48 8b 00             	mov    (%rax),%rax
   22631:	e9 4e 03 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   22636:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   2263c:	25 00 02 00 00       	and    $0x200,%eax
   22641:	85 c0                	test   %eax,%eax
   22643:	0f 84 9a 00 00 00    	je     226e3 <__vfprintf+0x2b0c>
   22649:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   22650:	48 85 c0             	test   %rax,%rax
   22653:	74 27                	je     2267c <__vfprintf+0x2aa5>
   22655:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   2265c:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   22662:	8d 50 01             	lea    0x1(%rax),%edx
   22665:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   2266b:	48 98                	cltq   
   2266d:	48 c1 e0 04          	shl    $0x4,%rax
   22671:	48 01 c8             	add    %rcx,%rax
   22674:	48 8b 00             	mov    (%rax),%rax
   22677:	e9 08 03 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   2267c:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   22683:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2268a:	8b 00                	mov    (%rax),%eax
   2268c:	83 f8 2f             	cmp    $0x2f,%eax
   2268f:	77 30                	ja     226c1 <__vfprintf+0x2aea>
   22691:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22698:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2269c:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   226a3:	8b 00                	mov    (%rax),%eax
   226a5:	89 c0                	mov    %eax,%eax
   226a7:	48 01 d0             	add    %rdx,%rax
   226aa:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   226b1:	8b 12                	mov    (%rdx),%edx
   226b3:	8d 4a 08             	lea    0x8(%rdx),%ecx
   226b6:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   226bd:	89 0a                	mov    %ecx,(%rdx)
   226bf:	eb 1a                	jmp    226db <__vfprintf+0x2b04>
   226c1:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   226c8:	48 8b 40 08          	mov    0x8(%rax),%rax
   226cc:	48 8d 48 08          	lea    0x8(%rax),%rcx
   226d0:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   226d7:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   226db:	48 8b 00             	mov    (%rax),%rax
   226de:	e9 a1 02 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   226e3:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   226e9:	25 00 04 00 00       	and    $0x400,%eax
   226ee:	85 c0                	test   %eax,%eax
   226f0:	0f 84 9a 00 00 00    	je     22790 <__vfprintf+0x2bb9>
   226f6:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   226fd:	48 85 c0             	test   %rax,%rax
   22700:	74 27                	je     22729 <__vfprintf+0x2b52>
   22702:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   22709:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   2270f:	8d 50 01             	lea    0x1(%rax),%edx
   22712:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   22718:	48 98                	cltq   
   2271a:	48 c1 e0 04          	shl    $0x4,%rax
   2271e:	48 01 c8             	add    %rcx,%rax
   22721:	48 8b 00             	mov    (%rax),%rax
   22724:	e9 5b 02 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   22729:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   22730:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22737:	8b 00                	mov    (%rax),%eax
   22739:	83 f8 2f             	cmp    $0x2f,%eax
   2273c:	77 30                	ja     2276e <__vfprintf+0x2b97>
   2273e:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22745:	48 8b 50 10          	mov    0x10(%rax),%rdx
   22749:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22750:	8b 00                	mov    (%rax),%eax
   22752:	89 c0                	mov    %eax,%eax
   22754:	48 01 d0             	add    %rdx,%rax
   22757:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2275e:	8b 12                	mov    (%rdx),%edx
   22760:	8d 4a 08             	lea    0x8(%rdx),%ecx
   22763:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2276a:	89 0a                	mov    %ecx,(%rdx)
   2276c:	eb 1a                	jmp    22788 <__vfprintf+0x2bb1>
   2276e:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22775:	48 8b 40 08          	mov    0x8(%rax),%rax
   22779:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2277d:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22784:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   22788:	48 8b 00             	mov    (%rax),%rax
   2278b:	e9 f4 01 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   22790:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   22796:	83 e0 40             	and    $0x40,%eax
   22799:	85 c0                	test   %eax,%eax
   2279b:	0f 84 9e 00 00 00    	je     2283f <__vfprintf+0x2c68>
   227a1:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   227a8:	48 85 c0             	test   %rax,%rax
   227ab:	74 29                	je     227d6 <__vfprintf+0x2bff>
   227ad:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   227b4:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   227ba:	8d 50 01             	lea    0x1(%rax),%edx
   227bd:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   227c3:	48 98                	cltq   
   227c5:	48 c1 e0 04          	shl    $0x4,%rax
   227c9:	48 01 c8             	add    %rcx,%rax
   227cc:	8b 00                	mov    (%rax),%eax
   227ce:	0f b7 c0             	movzwl %ax,%eax
   227d1:	e9 ae 01 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   227d6:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   227dd:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   227e4:	8b 00                	mov    (%rax),%eax
   227e6:	83 f8 2f             	cmp    $0x2f,%eax
   227e9:	77 30                	ja     2281b <__vfprintf+0x2c44>
   227eb:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   227f2:	48 8b 50 10          	mov    0x10(%rax),%rdx
   227f6:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   227fd:	8b 00                	mov    (%rax),%eax
   227ff:	89 c0                	mov    %eax,%eax
   22801:	48 01 d0             	add    %rdx,%rax
   22804:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2280b:	8b 12                	mov    (%rdx),%edx
   2280d:	8d 4a 08             	lea    0x8(%rdx),%ecx
   22810:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22817:	89 0a                	mov    %ecx,(%rdx)
   22819:	eb 1a                	jmp    22835 <__vfprintf+0x2c5e>
   2281b:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22822:	48 8b 40 08          	mov    0x8(%rax),%rax
   22826:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2282a:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22831:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   22835:	8b 00                	mov    (%rax),%eax
   22837:	0f b7 c0             	movzwl %ax,%eax
   2283a:	e9 45 01 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   2283f:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   22845:	25 00 08 00 00       	and    $0x800,%eax
   2284a:	85 c0                	test   %eax,%eax
   2284c:	0f 84 9e 00 00 00    	je     228f0 <__vfprintf+0x2d19>
   22852:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   22859:	48 85 c0             	test   %rax,%rax
   2285c:	74 29                	je     22887 <__vfprintf+0x2cb0>
   2285e:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   22865:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   2286b:	8d 50 01             	lea    0x1(%rax),%edx
   2286e:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   22874:	48 98                	cltq   
   22876:	48 c1 e0 04          	shl    $0x4,%rax
   2287a:	48 01 c8             	add    %rcx,%rax
   2287d:	8b 00                	mov    (%rax),%eax
   2287f:	0f b6 c0             	movzbl %al,%eax
   22882:	e9 fd 00 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   22887:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   2288e:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22895:	8b 00                	mov    (%rax),%eax
   22897:	83 f8 2f             	cmp    $0x2f,%eax
   2289a:	77 30                	ja     228cc <__vfprintf+0x2cf5>
   2289c:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   228a3:	48 8b 50 10          	mov    0x10(%rax),%rdx
   228a7:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   228ae:	8b 00                	mov    (%rax),%eax
   228b0:	89 c0                	mov    %eax,%eax
   228b2:	48 01 d0             	add    %rdx,%rax
   228b5:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   228bc:	8b 12                	mov    (%rdx),%edx
   228be:	8d 4a 08             	lea    0x8(%rdx),%ecx
   228c1:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   228c8:	89 0a                	mov    %ecx,(%rdx)
   228ca:	eb 1a                	jmp    228e6 <__vfprintf+0x2d0f>
   228cc:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   228d3:	48 8b 40 08          	mov    0x8(%rax),%rax
   228d7:	48 8d 48 08          	lea    0x8(%rax),%rcx
   228db:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   228e2:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   228e6:	8b 00                	mov    (%rax),%eax
   228e8:	0f b6 c0             	movzbl %al,%eax
   228eb:	e9 94 00 00 00       	jmpq   22984 <__vfprintf+0x2dad>
   228f0:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   228f7:	48 85 c0             	test   %rax,%rax
   228fa:	74 25                	je     22921 <__vfprintf+0x2d4a>
   228fc:	48 8b 8d b0 fd ff ff 	mov    -0x250(%rbp),%rcx
   22903:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
   22909:	8d 50 01             	lea    0x1(%rax),%edx
   2290c:	89 95 9c fd ff ff    	mov    %edx,-0x264(%rbp)
   22912:	48 98                	cltq   
   22914:	48 c1 e0 04          	shl    $0x4,%rax
   22918:	48 01 c8             	add    %rcx,%rax
   2291b:	8b 00                	mov    (%rax),%eax
   2291d:	89 c0                	mov    %eax,%eax
   2291f:	eb 63                	jmp    22984 <__vfprintf+0x2dad>
   22921:	83 85 9c fd ff ff 01 	addl   $0x1,-0x264(%rbp)
   22928:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2292f:	8b 00                	mov    (%rax),%eax
   22931:	83 f8 2f             	cmp    $0x2f,%eax
   22934:	77 30                	ja     22966 <__vfprintf+0x2d8f>
   22936:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2293d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   22941:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   22948:	8b 00                	mov    (%rax),%eax
   2294a:	89 c0                	mov    %eax,%eax
   2294c:	48 01 d0             	add    %rdx,%rax
   2294f:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22956:	8b 12                	mov    (%rdx),%edx
   22958:	8d 4a 08             	lea    0x8(%rdx),%ecx
   2295b:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   22962:	89 0a                	mov    %ecx,(%rdx)
   22964:	eb 1a                	jmp    22980 <__vfprintf+0x2da9>
   22966:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
   2296d:	48 8b 40 08          	mov    0x8(%rax),%rax
   22971:	48 8d 48 08          	lea    0x8(%rax),%rcx
   22975:	48 8b 95 38 fd ff ff 	mov    -0x2c8(%rbp),%rdx
   2297c:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   22980:	8b 00                	mov    (%rax),%eax
   22982:	89 c0                	mov    %eax,%eax
   22984:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
			base = HEX;
   2298b:	c7 85 8c fd ff ff 02 	movl   $0x2,-0x274(%rbp)
   22992:	00 00 00 
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _umax != 0)
   22995:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   2299b:	83 e0 01             	and    $0x1,%eax
   2299e:	85 c0                	test   %eax,%eax
   229a0:	74 15                	je     229b7 <__vfprintf+0x2de0>
   229a2:	48 83 bd e0 fd ff ff 	cmpq   $0x0,-0x220(%rbp)
   229a9:	00 
   229aa:	74 0b                	je     229b7 <__vfprintf+0x2de0>
				ox[1] = ch;
   229ac:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   229b2:	88 45 87             	mov    %al,-0x79(%rbp)
   229b5:	eb 01                	jmp    229b8 <__vfprintf+0x2de1>

			/* unsigned conversions */
nosign:			sign = '\0';
   229b7:	90                   	nop
   229b8:	c6 85 56 fd ff ff 00 	movb   $0x0,-0x2aa(%rbp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   229bf:	8b 85 7c fd ff ff    	mov    -0x284(%rbp),%eax
   229c5:	89 85 90 fd ff ff    	mov    %eax,-0x270(%rbp)
   229cb:	83 bd 90 fd ff ff 00 	cmpl   $0x0,-0x270(%rbp)
   229d2:	78 0a                	js     229de <__vfprintf+0x2e07>
				flags &= ~ZEROPAD;
   229d4:	81 a5 70 fd ff ff 7f 	andl   $0xffffff7f,-0x290(%rbp)
   229db:	ff ff ff 
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   229de:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   229e2:	48 83 c0 64          	add    $0x64,%rax
   229e6:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
			if (_umax != 0 || prec != 0) {
   229ed:	48 83 bd e0 fd ff ff 	cmpq   $0x0,-0x220(%rbp)
   229f4:	00 
   229f5:	75 0d                	jne    22a04 <__vfprintf+0x2e2d>
   229f7:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   229fe:	0f 84 85 01 00 00    	je     22b89 <__vfprintf+0x2fb2>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   22a04:	8b 85 8c fd ff ff    	mov    -0x274(%rbp),%eax
   22a0a:	83 f8 01             	cmp    $0x1,%eax
   22a0d:	0f 84 e8 00 00 00    	je     22afb <__vfprintf+0x2f24>
   22a13:	83 f8 01             	cmp    $0x1,%eax
   22a16:	72 0f                	jb     22a27 <__vfprintf+0x2e50>
   22a18:	83 f8 02             	cmp    $0x2,%eax
   22a1b:	0f 84 04 01 00 00    	je     22b25 <__vfprintf+0x2f4e>
   22a21:	e9 3e 01 00 00       	jmpq   22b64 <__vfprintf+0x2f8d>
				case OCT:
   22a26:	90                   	nop
					do {
						*--cp = to_char(_umax & 7);
   22a27:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
   22a2e:	83 e0 07             	and    $0x7,%eax
   22a31:	83 c0 30             	add    $0x30,%eax
   22a34:	48 83 ad c8 fd ff ff 	subq   $0x1,-0x238(%rbp)
   22a3b:	01 
   22a3c:	89 c2                	mov    %eax,%edx
   22a3e:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   22a45:	88 10                	mov    %dl,(%rax)
						_umax >>= 3;
   22a47:	48 c1 ad e0 fd ff ff 	shrq   $0x3,-0x220(%rbp)
   22a4e:	03 
					} while (_umax);
   22a4f:	48 83 bd e0 fd ff ff 	cmpq   $0x0,-0x220(%rbp)
   22a56:	00 
   22a57:	75 cd                	jne    22a26 <__vfprintf+0x2e4f>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   22a59:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   22a5f:	83 e0 01             	and    $0x1,%eax
   22a62:	85 c0                	test   %eax,%eax
   22a64:	0f 84 22 01 00 00    	je     22b8c <__vfprintf+0x2fb5>
   22a6a:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   22a71:	0f b6 00             	movzbl (%rax),%eax
   22a74:	3c 30                	cmp    $0x30,%al
   22a76:	0f 84 10 01 00 00    	je     22b8c <__vfprintf+0x2fb5>
						*--cp = '0';
   22a7c:	48 83 ad c8 fd ff ff 	subq   $0x1,-0x238(%rbp)
   22a83:	01 
   22a84:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   22a8b:	c6 00 30             	movb   $0x30,(%rax)
					break;
   22a8e:	e9 f9 00 00 00       	jmpq   22b8c <__vfprintf+0x2fb5>

				case DEC:
					/* many numbers are 1 digit */
					while (_umax >= 10) {
						*--cp = to_char(_umax % 10);
   22a93:	48 8b 8d e0 fd ff ff 	mov    -0x220(%rbp),%rcx
   22a9a:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
   22aa1:	cc cc cc 
   22aa4:	48 89 c8             	mov    %rcx,%rax
   22aa7:	48 f7 e2             	mul    %rdx
   22aaa:	48 c1 ea 03          	shr    $0x3,%rdx
   22aae:	48 89 d0             	mov    %rdx,%rax
   22ab1:	48 c1 e0 02          	shl    $0x2,%rax
   22ab5:	48 01 d0             	add    %rdx,%rax
   22ab8:	48 01 c0             	add    %rax,%rax
   22abb:	48 29 c1             	sub    %rax,%rcx
   22abe:	48 89 ca             	mov    %rcx,%rdx
   22ac1:	89 d0                	mov    %edx,%eax
   22ac3:	83 c0 30             	add    $0x30,%eax
   22ac6:	48 83 ad c8 fd ff ff 	subq   $0x1,-0x238(%rbp)
   22acd:	01 
   22ace:	89 c2                	mov    %eax,%edx
   22ad0:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   22ad7:	88 10                	mov    %dl,(%rax)
						_umax /= 10;
   22ad9:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
   22ae0:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
   22ae7:	cc cc cc 
   22aea:	48 f7 e2             	mul    %rdx
   22aed:	48 89 d0             	mov    %rdx,%rax
   22af0:	48 c1 e8 03          	shr    $0x3,%rax
   22af4:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
					while (_umax >= 10) {
   22afb:	48 83 bd e0 fd ff ff 	cmpq   $0x9,-0x220(%rbp)
   22b02:	09 
   22b03:	77 8e                	ja     22a93 <__vfprintf+0x2ebc>
					}
					*--cp = to_char(_umax);
   22b05:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
   22b0c:	83 c0 30             	add    $0x30,%eax
   22b0f:	48 83 ad c8 fd ff ff 	subq   $0x1,-0x238(%rbp)
   22b16:	01 
   22b17:	89 c2                	mov    %eax,%edx
   22b19:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   22b20:	88 10                	mov    %dl,(%rax)
					break;
   22b22:	eb 69                	jmp    22b8d <__vfprintf+0x2fb6>

				case HEX:
   22b24:	90                   	nop
					do {
						*--cp = xdigs[_umax & 15];
   22b25:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
   22b2c:	83 e0 0f             	and    $0xf,%eax
   22b2f:	48 89 c2             	mov    %rax,%rdx
   22b32:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
   22b39:	48 01 d0             	add    %rdx,%rax
   22b3c:	48 83 ad c8 fd ff ff 	subq   $0x1,-0x238(%rbp)
   22b43:	01 
   22b44:	0f b6 10             	movzbl (%rax),%edx
   22b47:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   22b4e:	88 10                	mov    %dl,(%rax)
						_umax >>= 4;
   22b50:	48 c1 ad e0 fd ff ff 	shrq   $0x4,-0x220(%rbp)
   22b57:	04 
					} while (_umax);
   22b58:	48 83 bd e0 fd ff ff 	cmpq   $0x0,-0x220(%rbp)
   22b5f:	00 
   22b60:	75 c2                	jne    22b24 <__vfprintf+0x2f4d>
					break;
   22b62:	eb 29                	jmp    22b8d <__vfprintf+0x2fb6>

				default:
					cp = "bug in vfprintf: bad base";
   22b64:	48 8d 05 3e de 00 00 	lea    0xde3e(%rip),%rax        # 309a9 <__func__.2393+0x7b0>
   22b6b:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
					size = strlen(cp);
   22b72:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   22b79:	48 89 c7             	mov    %rax,%rdi
   22b7c:	e8 b9 c3 fe ff       	callq  ef3a <strlen>
   22b81:	89 85 98 fd ff ff    	mov    %eax,-0x268(%rbp)
					goto skipsize;
   22b87:	eb 31                	jmp    22bba <__vfprintf+0x2fe3>
				}
			}
   22b89:	90                   	nop
   22b8a:	eb 01                	jmp    22b8d <__vfprintf+0x2fb6>
					break;
   22b8c:	90                   	nop
			size = buf + BUF - cp;
   22b8d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   22b91:	48 83 c0 64          	add    $0x64,%rax
   22b95:	48 89 c2             	mov    %rax,%rdx
   22b98:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   22b9f:	48 29 c2             	sub    %rax,%rdx
   22ba2:	48 89 d0             	mov    %rdx,%rax
   22ba5:	89 85 98 fd ff ff    	mov    %eax,-0x268(%rbp)
			if (size > BUF)	/* should never happen */
   22bab:	83 bd 98 fd ff ff 64 	cmpl   $0x64,-0x268(%rbp)
   22bb2:	7e 05                	jle    22bb9 <__vfprintf+0x2fe2>
				abort();
   22bb4:	e8 d5 d3 00 00       	callq  2ff8e <abort>
		skipsize:
   22bb9:	90                   	nop
			break;
   22bba:	eb 3d                	jmp    22bf9 <__vfprintf+0x3022>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   22bbc:	83 bd 64 fd ff ff 00 	cmpl   $0x0,-0x29c(%rbp)
   22bc3:	0f 84 0f 13 00 00    	je     23ed8 <__vfprintf+0x4301>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   22bc9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
   22bcd:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
			*cp = ch;
   22bd4:	8b 85 64 fd ff ff    	mov    -0x29c(%rbp),%eax
   22bda:	89 c2                	mov    %eax,%edx
   22bdc:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   22be3:	88 10                	mov    %dl,(%rax)
			size = 1;
   22be5:	c7 85 98 fd ff ff 01 	movl   $0x1,-0x268(%rbp)
   22bec:	00 00 00 
			sign = '\0';
   22bef:	c6 85 56 fd ff ff 00 	movb   $0x0,-0x2aa(%rbp)
			break;
   22bf6:	eb 01                	jmp    22bf9 <__vfprintf+0x3022>
			break;
   22bf8:	90                   	nop
		 * floating precision; finally, if LADJUST, pad with blanks.
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   22bf9:	8b 85 90 fd ff ff    	mov    -0x270(%rbp),%eax
   22bff:	39 85 98 fd ff ff    	cmp    %eax,-0x268(%rbp)
   22c05:	0f 4d 85 98 fd ff ff 	cmovge -0x268(%rbp),%eax
   22c0c:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%rbp)
		if (sign)
   22c12:	0f b6 85 56 fd ff ff 	movzbl -0x2aa(%rbp),%eax
   22c19:	84 c0                	test   %al,%al
   22c1b:	74 07                	je     22c24 <__vfprintf+0x304d>
			realsz++;
   22c1d:	83 85 94 fd ff ff 01 	addl   $0x1,-0x26c(%rbp)
		if (ox[1])
   22c24:	0f b6 45 87          	movzbl -0x79(%rbp),%eax
   22c28:	84 c0                	test   %al,%al
   22c2a:	74 07                	je     22c33 <__vfprintf+0x305c>
			realsz+= 2;
   22c2c:	83 85 94 fd ff ff 02 	addl   $0x2,-0x26c(%rbp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   22c33:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   22c39:	25 84 00 00 00       	and    $0x84,%eax
   22c3e:	85 c0                	test   %eax,%eax
   22c40:	0f 85 42 01 00 00    	jne    22d88 <__vfprintf+0x31b1>
			PAD(width - realsz, blanks);
   22c46:	8b 85 78 fd ff ff    	mov    -0x288(%rbp),%eax
   22c4c:	2b 85 94 fd ff ff    	sub    -0x26c(%rbp),%eax
   22c52:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   22c58:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   22c5f:	0f 8e 23 01 00 00    	jle    22d88 <__vfprintf+0x31b1>
   22c65:	e9 87 00 00 00       	jmpq   22cf1 <__vfprintf+0x311a>
   22c6a:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22c71:	48 8d 15 e8 23 21 00 	lea    0x2123e8(%rip),%rdx        # 235060 <blanks.3161>
   22c78:	48 89 10             	mov    %rdx,(%rax)
   22c7b:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22c82:	48 c7 40 08 10 00 00 	movq   $0x10,0x8(%rax)
   22c89:	00 
   22c8a:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   22c90:	83 c0 10             	add    $0x10,%eax
   22c93:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   22c99:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   22ca0:	10 
   22ca1:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22ca7:	83 c0 01             	add    $0x1,%eax
   22caa:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   22cb0:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22cb6:	83 f8 07             	cmp    $0x7,%eax
   22cb9:	7e 2f                	jle    22cea <__vfprintf+0x3113>
   22cbb:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   22cc2:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   22cc9:	48 89 d6             	mov    %rdx,%rsi
   22ccc:	48 89 c7             	mov    %rax,%rdi
   22ccf:	e8 d2 cc ff ff       	callq  1f9a6 <__sprint>
   22cd4:	85 c0                	test   %eax,%eax
   22cd6:	0f 85 41 12 00 00    	jne    23f1d <__vfprintf+0x4346>
   22cdc:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   22ce3:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   22cea:	83 ad 68 fd ff ff 10 	subl   $0x10,-0x298(%rbp)
   22cf1:	83 bd 68 fd ff ff 10 	cmpl   $0x10,-0x298(%rbp)
   22cf8:	0f 8f 6c ff ff ff    	jg     22c6a <__vfprintf+0x3093>
   22cfe:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22d05:	48 8d 15 54 23 21 00 	lea    0x212354(%rip),%rdx        # 235060 <blanks.3161>
   22d0c:	48 89 10             	mov    %rdx,(%rax)
   22d0f:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   22d15:	48 63 d0             	movslq %eax,%rdx
   22d18:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22d1f:	48 89 50 08          	mov    %rdx,0x8(%rax)
   22d23:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   22d29:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   22d2f:	01 d0                	add    %edx,%eax
   22d31:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   22d37:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   22d3e:	10 
   22d3f:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22d45:	83 c0 01             	add    $0x1,%eax
   22d48:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   22d4e:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22d54:	83 f8 07             	cmp    $0x7,%eax
   22d57:	7e 2f                	jle    22d88 <__vfprintf+0x31b1>
   22d59:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   22d60:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   22d67:	48 89 d6             	mov    %rdx,%rsi
   22d6a:	48 89 c7             	mov    %rax,%rdi
   22d6d:	e8 34 cc ff ff       	callq  1f9a6 <__sprint>
   22d72:	85 c0                	test   %eax,%eax
   22d74:	0f 85 a6 11 00 00    	jne    23f20 <__vfprintf+0x4349>
   22d7a:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   22d81:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)

		/* prefix */
		if (sign)
   22d88:	0f b6 85 56 fd ff ff 	movzbl -0x2aa(%rbp),%eax
   22d8f:	84 c0                	test   %al,%al
   22d91:	0f 84 80 00 00 00    	je     22e17 <__vfprintf+0x3240>
			PRINT(&sign, 1);
   22d97:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22d9e:	48 8d 95 56 fd ff ff 	lea    -0x2aa(%rbp),%rdx
   22da5:	48 89 10             	mov    %rdx,(%rax)
   22da8:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22daf:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
   22db6:	00 
   22db7:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   22dbd:	83 c0 01             	add    $0x1,%eax
   22dc0:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   22dc6:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   22dcd:	10 
   22dce:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22dd4:	83 c0 01             	add    $0x1,%eax
   22dd7:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   22ddd:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22de3:	83 f8 07             	cmp    $0x7,%eax
   22de6:	7e 2f                	jle    22e17 <__vfprintf+0x3240>
   22de8:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   22def:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   22df6:	48 89 d6             	mov    %rdx,%rsi
   22df9:	48 89 c7             	mov    %rax,%rdi
   22dfc:	e8 a5 cb ff ff       	callq  1f9a6 <__sprint>
   22e01:	85 c0                	test   %eax,%eax
   22e03:	0f 85 1a 11 00 00    	jne    23f23 <__vfprintf+0x434c>
   22e09:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   22e10:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
		if (ox[1]) {	/* ox[1] is either x, X, or \0 */
   22e17:	0f b6 45 87          	movzbl -0x79(%rbp),%eax
   22e1b:	84 c0                	test   %al,%al
   22e1d:	0f 84 81 00 00 00    	je     22ea4 <__vfprintf+0x32cd>
			ox[0] = '0';
   22e23:	c6 45 86 30          	movb   $0x30,-0x7a(%rbp)
			PRINT(ox, 2);
   22e27:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22e2e:	48 8d 55 86          	lea    -0x7a(%rbp),%rdx
   22e32:	48 89 10             	mov    %rdx,(%rax)
   22e35:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22e3c:	48 c7 40 08 02 00 00 	movq   $0x2,0x8(%rax)
   22e43:	00 
   22e44:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   22e4a:	83 c0 02             	add    $0x2,%eax
   22e4d:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   22e53:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   22e5a:	10 
   22e5b:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22e61:	83 c0 01             	add    $0x1,%eax
   22e64:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   22e6a:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22e70:	83 f8 07             	cmp    $0x7,%eax
   22e73:	7e 2f                	jle    22ea4 <__vfprintf+0x32cd>
   22e75:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   22e7c:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   22e83:	48 89 d6             	mov    %rdx,%rsi
   22e86:	48 89 c7             	mov    %rax,%rdi
   22e89:	e8 18 cb ff ff       	callq  1f9a6 <__sprint>
   22e8e:	85 c0                	test   %eax,%eax
   22e90:	0f 85 90 10 00 00    	jne    23f26 <__vfprintf+0x434f>
   22e96:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   22e9d:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
		}

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   22ea4:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   22eaa:	25 84 00 00 00       	and    $0x84,%eax
   22eaf:	3d 80 00 00 00       	cmp    $0x80,%eax
   22eb4:	0f 85 42 01 00 00    	jne    22ffc <__vfprintf+0x3425>
			PAD(width - realsz, zeroes);
   22eba:	8b 85 78 fd ff ff    	mov    -0x288(%rbp),%eax
   22ec0:	2b 85 94 fd ff ff    	sub    -0x26c(%rbp),%eax
   22ec6:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   22ecc:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   22ed3:	0f 8e 23 01 00 00    	jle    22ffc <__vfprintf+0x3425>
   22ed9:	e9 87 00 00 00       	jmpq   22f65 <__vfprintf+0x338e>
   22ede:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22ee5:	48 8d 15 84 21 21 00 	lea    0x212184(%rip),%rdx        # 235070 <zeroes.3162>
   22eec:	48 89 10             	mov    %rdx,(%rax)
   22eef:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22ef6:	48 c7 40 08 10 00 00 	movq   $0x10,0x8(%rax)
   22efd:	00 
   22efe:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   22f04:	83 c0 10             	add    $0x10,%eax
   22f07:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   22f0d:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   22f14:	10 
   22f15:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22f1b:	83 c0 01             	add    $0x1,%eax
   22f1e:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   22f24:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22f2a:	83 f8 07             	cmp    $0x7,%eax
   22f2d:	7e 2f                	jle    22f5e <__vfprintf+0x3387>
   22f2f:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   22f36:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   22f3d:	48 89 d6             	mov    %rdx,%rsi
   22f40:	48 89 c7             	mov    %rax,%rdi
   22f43:	e8 5e ca ff ff       	callq  1f9a6 <__sprint>
   22f48:	85 c0                	test   %eax,%eax
   22f4a:	0f 85 d9 0f 00 00    	jne    23f29 <__vfprintf+0x4352>
   22f50:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   22f57:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   22f5e:	83 ad 68 fd ff ff 10 	subl   $0x10,-0x298(%rbp)
   22f65:	83 bd 68 fd ff ff 10 	cmpl   $0x10,-0x298(%rbp)
   22f6c:	0f 8f 6c ff ff ff    	jg     22ede <__vfprintf+0x3307>
   22f72:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22f79:	48 8d 15 f0 20 21 00 	lea    0x2120f0(%rip),%rdx        # 235070 <zeroes.3162>
   22f80:	48 89 10             	mov    %rdx,(%rax)
   22f83:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   22f89:	48 63 d0             	movslq %eax,%rdx
   22f8c:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   22f93:	48 89 50 08          	mov    %rdx,0x8(%rax)
   22f97:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   22f9d:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   22fa3:	01 d0                	add    %edx,%eax
   22fa5:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   22fab:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   22fb2:	10 
   22fb3:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22fb9:	83 c0 01             	add    $0x1,%eax
   22fbc:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   22fc2:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   22fc8:	83 f8 07             	cmp    $0x7,%eax
   22fcb:	7e 2f                	jle    22ffc <__vfprintf+0x3425>
   22fcd:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   22fd4:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   22fdb:	48 89 d6             	mov    %rdx,%rsi
   22fde:	48 89 c7             	mov    %rax,%rdi
   22fe1:	e8 c0 c9 ff ff       	callq  1f9a6 <__sprint>
   22fe6:	85 c0                	test   %eax,%eax
   22fe8:	0f 85 3e 0f 00 00    	jne    23f2c <__vfprintf+0x4355>
   22fee:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   22ff5:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)

		/* leading zeroes from decimal precision */
		PAD(dprec - size, zeroes);
   22ffc:	8b 85 90 fd ff ff    	mov    -0x270(%rbp),%eax
   23002:	2b 85 98 fd ff ff    	sub    -0x268(%rbp),%eax
   23008:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   2300e:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   23015:	0f 8e 23 01 00 00    	jle    2313e <__vfprintf+0x3567>
   2301b:	e9 87 00 00 00       	jmpq   230a7 <__vfprintf+0x34d0>
   23020:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23027:	48 8d 15 42 20 21 00 	lea    0x212042(%rip),%rdx        # 235070 <zeroes.3162>
   2302e:	48 89 10             	mov    %rdx,(%rax)
   23031:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23038:	48 c7 40 08 10 00 00 	movq   $0x10,0x8(%rax)
   2303f:	00 
   23040:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   23046:	83 c0 10             	add    $0x10,%eax
   23049:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   2304f:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23056:	10 
   23057:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   2305d:	83 c0 01             	add    $0x1,%eax
   23060:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23066:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   2306c:	83 f8 07             	cmp    $0x7,%eax
   2306f:	7e 2f                	jle    230a0 <__vfprintf+0x34c9>
   23071:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23078:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   2307f:	48 89 d6             	mov    %rdx,%rsi
   23082:	48 89 c7             	mov    %rax,%rdi
   23085:	e8 1c c9 ff ff       	callq  1f9a6 <__sprint>
   2308a:	85 c0                	test   %eax,%eax
   2308c:	0f 85 9d 0e 00 00    	jne    23f2f <__vfprintf+0x4358>
   23092:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23099:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   230a0:	83 ad 68 fd ff ff 10 	subl   $0x10,-0x298(%rbp)
   230a7:	83 bd 68 fd ff ff 10 	cmpl   $0x10,-0x298(%rbp)
   230ae:	0f 8f 6c ff ff ff    	jg     23020 <__vfprintf+0x3449>
   230b4:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   230bb:	48 8d 15 ae 1f 21 00 	lea    0x211fae(%rip),%rdx        # 235070 <zeroes.3162>
   230c2:	48 89 10             	mov    %rdx,(%rax)
   230c5:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   230cb:	48 63 d0             	movslq %eax,%rdx
   230ce:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   230d5:	48 89 50 08          	mov    %rdx,0x8(%rax)
   230d9:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   230df:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   230e5:	01 d0                	add    %edx,%eax
   230e7:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   230ed:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   230f4:	10 
   230f5:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   230fb:	83 c0 01             	add    $0x1,%eax
   230fe:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23104:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   2310a:	83 f8 07             	cmp    $0x7,%eax
   2310d:	7e 2f                	jle    2313e <__vfprintf+0x3567>
   2310f:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23116:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   2311d:	48 89 d6             	mov    %rdx,%rsi
   23120:	48 89 c7             	mov    %rax,%rdi
   23123:	e8 7e c8 ff ff       	callq  1f9a6 <__sprint>
   23128:	85 c0                	test   %eax,%eax
   2312a:	0f 85 02 0e 00 00    	jne    23f32 <__vfprintf+0x435b>
   23130:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23137:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
   2313e:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   23144:	25 00 01 00 00       	and    $0x100,%eax
   23149:	85 c0                	test   %eax,%eax
   2314b:	0f 85 93 00 00 00    	jne    231e4 <__vfprintf+0x360d>
			PRINT(cp, size);
   23151:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23158:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
   2315f:	48 89 10             	mov    %rdx,(%rax)
   23162:	8b 85 98 fd ff ff    	mov    -0x268(%rbp),%eax
   23168:	48 63 d0             	movslq %eax,%rdx
   2316b:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23172:	48 89 50 08          	mov    %rdx,0x8(%rax)
   23176:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   2317c:	8b 85 98 fd ff ff    	mov    -0x268(%rbp),%eax
   23182:	01 d0                	add    %edx,%eax
   23184:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   2318a:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23191:	10 
   23192:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23198:	83 c0 01             	add    $0x1,%eax
   2319b:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   231a1:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   231a7:	83 f8 07             	cmp    $0x7,%eax
   231aa:	0f 8e 4d 0b 00 00    	jle    23cfd <__vfprintf+0x4126>
   231b0:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   231b7:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   231be:	48 89 d6             	mov    %rdx,%rsi
   231c1:	48 89 c7             	mov    %rax,%rdi
   231c4:	e8 dd c7 ff ff       	callq  1f9a6 <__sprint>
   231c9:	85 c0                	test   %eax,%eax
   231cb:	0f 85 64 0d 00 00    	jne    23f35 <__vfprintf+0x435e>
   231d1:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   231d8:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   231df:	e9 19 0b 00 00       	jmpq   23cfd <__vfprintf+0x4126>
		} else {	/* glue together f_p fragments */
			if (!expchar) {	/* %[fF] or sufficiently short %[gG] */
   231e4:	80 bd 57 fd ff ff 00 	cmpb   $0x0,-0x2a9(%rbp)
   231eb:	0f 85 6b 07 00 00    	jne    2395c <__vfprintf+0x3d85>
				if (expt <= 0) {
   231f1:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   231f7:	85 c0                	test   %eax,%eax
   231f9:	0f 8f 69 02 00 00    	jg     23468 <__vfprintf+0x3891>
					PRINT(zeroes, 1);
   231ff:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23206:	48 8d 15 63 1e 21 00 	lea    0x211e63(%rip),%rdx        # 235070 <zeroes.3162>
   2320d:	48 89 10             	mov    %rdx,(%rax)
   23210:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23217:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
   2321e:	00 
   2321f:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   23225:	83 c0 01             	add    $0x1,%eax
   23228:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   2322e:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23235:	10 
   23236:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   2323c:	83 c0 01             	add    $0x1,%eax
   2323f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23245:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   2324b:	83 f8 07             	cmp    $0x7,%eax
   2324e:	7e 2f                	jle    2327f <__vfprintf+0x36a8>
   23250:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23257:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   2325e:	48 89 d6             	mov    %rdx,%rsi
   23261:	48 89 c7             	mov    %rax,%rdi
   23264:	e8 3d c7 ff ff       	callq  1f9a6 <__sprint>
   23269:	85 c0                	test   %eax,%eax
   2326b:	0f 85 c7 0c 00 00    	jne    23f38 <__vfprintf+0x4361>
   23271:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23278:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
					if (prec || flags & ALT)
   2327f:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   23286:	75 11                	jne    23299 <__vfprintf+0x36c2>
   23288:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   2328e:	83 e0 01             	and    $0x1,%eax
   23291:	85 c0                	test   %eax,%eax
   23293:	0f 84 80 00 00 00    	je     23319 <__vfprintf+0x3742>
						PRINT(decimal_point, 1);
   23299:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   232a0:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
   232a7:	48 89 10             	mov    %rdx,(%rax)
   232aa:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   232b1:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
   232b8:	00 
   232b9:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   232bf:	83 c0 01             	add    $0x1,%eax
   232c2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   232c8:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   232cf:	10 
   232d0:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   232d6:	83 c0 01             	add    $0x1,%eax
   232d9:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   232df:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   232e5:	83 f8 07             	cmp    $0x7,%eax
   232e8:	7e 2f                	jle    23319 <__vfprintf+0x3742>
   232ea:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   232f1:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   232f8:	48 89 d6             	mov    %rdx,%rsi
   232fb:	48 89 c7             	mov    %rax,%rdi
   232fe:	e8 a3 c6 ff ff       	callq  1f9a6 <__sprint>
   23303:	85 c0                	test   %eax,%eax
   23305:	0f 85 30 0c 00 00    	jne    23f3b <__vfprintf+0x4364>
   2330b:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23312:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
					PAD(-expt, zeroes);
   23319:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   2331f:	f7 d8                	neg    %eax
   23321:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   23327:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   2332e:	0f 8e 23 01 00 00    	jle    23457 <__vfprintf+0x3880>
   23334:	e9 87 00 00 00       	jmpq   233c0 <__vfprintf+0x37e9>
   23339:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23340:	48 8d 15 29 1d 21 00 	lea    0x211d29(%rip),%rdx        # 235070 <zeroes.3162>
   23347:	48 89 10             	mov    %rdx,(%rax)
   2334a:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23351:	48 c7 40 08 10 00 00 	movq   $0x10,0x8(%rax)
   23358:	00 
   23359:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   2335f:	83 c0 10             	add    $0x10,%eax
   23362:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23368:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   2336f:	10 
   23370:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23376:	83 c0 01             	add    $0x1,%eax
   23379:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   2337f:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23385:	83 f8 07             	cmp    $0x7,%eax
   23388:	7e 2f                	jle    233b9 <__vfprintf+0x37e2>
   2338a:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23391:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23398:	48 89 d6             	mov    %rdx,%rsi
   2339b:	48 89 c7             	mov    %rax,%rdi
   2339e:	e8 03 c6 ff ff       	callq  1f9a6 <__sprint>
   233a3:	85 c0                	test   %eax,%eax
   233a5:	0f 85 93 0b 00 00    	jne    23f3e <__vfprintf+0x4367>
   233ab:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   233b2:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   233b9:	83 ad 68 fd ff ff 10 	subl   $0x10,-0x298(%rbp)
   233c0:	83 bd 68 fd ff ff 10 	cmpl   $0x10,-0x298(%rbp)
   233c7:	0f 8f 6c ff ff ff    	jg     23339 <__vfprintf+0x3762>
   233cd:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   233d4:	48 8d 15 95 1c 21 00 	lea    0x211c95(%rip),%rdx        # 235070 <zeroes.3162>
   233db:	48 89 10             	mov    %rdx,(%rax)
   233de:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   233e4:	48 63 d0             	movslq %eax,%rdx
   233e7:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   233ee:	48 89 50 08          	mov    %rdx,0x8(%rax)
   233f2:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   233f8:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   233fe:	01 d0                	add    %edx,%eax
   23400:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23406:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   2340d:	10 
   2340e:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23414:	83 c0 01             	add    $0x1,%eax
   23417:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   2341d:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23423:	83 f8 07             	cmp    $0x7,%eax
   23426:	7e 2f                	jle    23457 <__vfprintf+0x3880>
   23428:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   2342f:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23436:	48 89 d6             	mov    %rdx,%rsi
   23439:	48 89 c7             	mov    %rax,%rdi
   2343c:	e8 65 c5 ff ff       	callq  1f9a6 <__sprint>
   23441:	85 c0                	test   %eax,%eax
   23443:	0f 85 f8 0a 00 00    	jne    23f41 <__vfprintf+0x436a>
   23449:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23450:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
					/* already handled initial 0's */
					prec += expt;
   23457:	8b 85 60 fd ff ff    	mov    -0x2a0(%rbp),%eax
   2345d:	01 85 7c fd ff ff    	add    %eax,-0x284(%rbp)
   23463:	e9 ca 02 00 00       	jmpq   23732 <__vfprintf+0x3b5b>
 				} else {
					PRINTANDPAD(cp, dtoaend, lead, zeroes);
   23468:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
   2346f:	48 89 c2             	mov    %rax,%rdx
   23472:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   23479:	48 29 c2             	sub    %rax,%rdx
   2347c:	48 89 d0             	mov    %rdx,%rax
   2347f:	89 85 6c fd ff ff    	mov    %eax,-0x294(%rbp)
   23485:	8b 85 6c fd ff ff    	mov    -0x294(%rbp),%eax
   2348b:	3b 85 84 fd ff ff    	cmp    -0x27c(%rbp),%eax
   23491:	7e 0c                	jle    2349f <__vfprintf+0x38c8>
   23493:	8b 85 84 fd ff ff    	mov    -0x27c(%rbp),%eax
   23499:	89 85 6c fd ff ff    	mov    %eax,-0x294(%rbp)
   2349f:	83 bd 6c fd ff ff 00 	cmpl   $0x0,-0x294(%rbp)
   234a6:	0f 8e 8a 00 00 00    	jle    23536 <__vfprintf+0x395f>
   234ac:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   234b3:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
   234ba:	48 89 10             	mov    %rdx,(%rax)
   234bd:	8b 85 6c fd ff ff    	mov    -0x294(%rbp),%eax
   234c3:	48 63 d0             	movslq %eax,%rdx
   234c6:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   234cd:	48 89 50 08          	mov    %rdx,0x8(%rax)
   234d1:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   234d7:	8b 85 6c fd ff ff    	mov    -0x294(%rbp),%eax
   234dd:	01 d0                	add    %edx,%eax
   234df:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   234e5:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   234ec:	10 
   234ed:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   234f3:	83 c0 01             	add    $0x1,%eax
   234f6:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   234fc:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23502:	83 f8 07             	cmp    $0x7,%eax
   23505:	7e 2f                	jle    23536 <__vfprintf+0x395f>
   23507:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   2350e:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23515:	48 89 d6             	mov    %rdx,%rsi
   23518:	48 89 c7             	mov    %rax,%rdi
   2351b:	e8 86 c4 ff ff       	callq  1f9a6 <__sprint>
   23520:	85 c0                	test   %eax,%eax
   23522:	0f 85 1c 0a 00 00    	jne    23f44 <__vfprintf+0x436d>
   23528:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   2352f:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   23536:	b8 00 00 00 00       	mov    $0x0,%eax
   2353b:	83 bd 6c fd ff ff 00 	cmpl   $0x0,-0x294(%rbp)
   23542:	0f 49 85 6c fd ff ff 	cmovns -0x294(%rbp),%eax
   23549:	8b 95 84 fd ff ff    	mov    -0x27c(%rbp),%edx
   2354f:	29 c2                	sub    %eax,%edx
   23551:	89 d0                	mov    %edx,%eax
   23553:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   23559:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   23560:	0f 8e 23 01 00 00    	jle    23689 <__vfprintf+0x3ab2>
   23566:	e9 87 00 00 00       	jmpq   235f2 <__vfprintf+0x3a1b>
   2356b:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23572:	48 8d 15 f7 1a 21 00 	lea    0x211af7(%rip),%rdx        # 235070 <zeroes.3162>
   23579:	48 89 10             	mov    %rdx,(%rax)
   2357c:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23583:	48 c7 40 08 10 00 00 	movq   $0x10,0x8(%rax)
   2358a:	00 
   2358b:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   23591:	83 c0 10             	add    $0x10,%eax
   23594:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   2359a:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   235a1:	10 
   235a2:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   235a8:	83 c0 01             	add    $0x1,%eax
   235ab:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   235b1:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   235b7:	83 f8 07             	cmp    $0x7,%eax
   235ba:	7e 2f                	jle    235eb <__vfprintf+0x3a14>
   235bc:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   235c3:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   235ca:	48 89 d6             	mov    %rdx,%rsi
   235cd:	48 89 c7             	mov    %rax,%rdi
   235d0:	e8 d1 c3 ff ff       	callq  1f9a6 <__sprint>
   235d5:	85 c0                	test   %eax,%eax
   235d7:	0f 85 6a 09 00 00    	jne    23f47 <__vfprintf+0x4370>
   235dd:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   235e4:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   235eb:	83 ad 68 fd ff ff 10 	subl   $0x10,-0x298(%rbp)
   235f2:	83 bd 68 fd ff ff 10 	cmpl   $0x10,-0x298(%rbp)
   235f9:	0f 8f 6c ff ff ff    	jg     2356b <__vfprintf+0x3994>
   235ff:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23606:	48 8d 15 63 1a 21 00 	lea    0x211a63(%rip),%rdx        # 235070 <zeroes.3162>
   2360d:	48 89 10             	mov    %rdx,(%rax)
   23610:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   23616:	48 63 d0             	movslq %eax,%rdx
   23619:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23620:	48 89 50 08          	mov    %rdx,0x8(%rax)
   23624:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   2362a:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   23630:	01 d0                	add    %edx,%eax
   23632:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23638:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   2363f:	10 
   23640:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23646:	83 c0 01             	add    $0x1,%eax
   23649:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   2364f:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23655:	83 f8 07             	cmp    $0x7,%eax
   23658:	7e 2f                	jle    23689 <__vfprintf+0x3ab2>
   2365a:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23661:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23668:	48 89 d6             	mov    %rdx,%rsi
   2366b:	48 89 c7             	mov    %rax,%rdi
   2366e:	e8 33 c3 ff ff       	callq  1f9a6 <__sprint>
   23673:	85 c0                	test   %eax,%eax
   23675:	0f 85 cf 08 00 00    	jne    23f4a <__vfprintf+0x4373>
   2367b:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23682:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
					cp += lead;
   23689:	8b 85 84 fd ff ff    	mov    -0x27c(%rbp),%eax
   2368f:	48 98                	cltq   
   23691:	48 01 85 c8 fd ff ff 	add    %rax,-0x238(%rbp)
					if (prec || flags & ALT)
   23698:	83 bd 7c fd ff ff 00 	cmpl   $0x0,-0x284(%rbp)
   2369f:	75 11                	jne    236b2 <__vfprintf+0x3adb>
   236a1:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   236a7:	83 e0 01             	and    $0x1,%eax
   236aa:	85 c0                	test   %eax,%eax
   236ac:	0f 84 80 00 00 00    	je     23732 <__vfprintf+0x3b5b>
						PRINT(decimal_point, 1);
   236b2:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   236b9:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
   236c0:	48 89 10             	mov    %rdx,(%rax)
   236c3:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   236ca:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
   236d1:	00 
   236d2:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   236d8:	83 c0 01             	add    $0x1,%eax
   236db:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   236e1:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   236e8:	10 
   236e9:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   236ef:	83 c0 01             	add    $0x1,%eax
   236f2:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   236f8:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   236fe:	83 f8 07             	cmp    $0x7,%eax
   23701:	7e 2f                	jle    23732 <__vfprintf+0x3b5b>
   23703:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   2370a:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23711:	48 89 d6             	mov    %rdx,%rsi
   23714:	48 89 c7             	mov    %rax,%rdi
   23717:	e8 8a c2 ff ff       	callq  1f9a6 <__sprint>
   2371c:	85 c0                	test   %eax,%eax
   2371e:	0f 85 29 08 00 00    	jne    23f4d <__vfprintf+0x4376>
   23724:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   2372b:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
				}
				PRINTANDPAD(cp, dtoaend, prec, zeroes);
   23732:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
   23739:	48 89 c2             	mov    %rax,%rdx
   2373c:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   23743:	48 29 c2             	sub    %rax,%rdx
   23746:	48 89 d0             	mov    %rdx,%rax
   23749:	89 85 6c fd ff ff    	mov    %eax,-0x294(%rbp)
   2374f:	8b 85 6c fd ff ff    	mov    -0x294(%rbp),%eax
   23755:	3b 85 7c fd ff ff    	cmp    -0x284(%rbp),%eax
   2375b:	7e 0c                	jle    23769 <__vfprintf+0x3b92>
   2375d:	8b 85 7c fd ff ff    	mov    -0x284(%rbp),%eax
   23763:	89 85 6c fd ff ff    	mov    %eax,-0x294(%rbp)
   23769:	83 bd 6c fd ff ff 00 	cmpl   $0x0,-0x294(%rbp)
   23770:	0f 8e 8a 00 00 00    	jle    23800 <__vfprintf+0x3c29>
   23776:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   2377d:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
   23784:	48 89 10             	mov    %rdx,(%rax)
   23787:	8b 85 6c fd ff ff    	mov    -0x294(%rbp),%eax
   2378d:	48 63 d0             	movslq %eax,%rdx
   23790:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23797:	48 89 50 08          	mov    %rdx,0x8(%rax)
   2379b:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   237a1:	8b 85 6c fd ff ff    	mov    -0x294(%rbp),%eax
   237a7:	01 d0                	add    %edx,%eax
   237a9:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   237af:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   237b6:	10 
   237b7:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   237bd:	83 c0 01             	add    $0x1,%eax
   237c0:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   237c6:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   237cc:	83 f8 07             	cmp    $0x7,%eax
   237cf:	7e 2f                	jle    23800 <__vfprintf+0x3c29>
   237d1:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   237d8:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   237df:	48 89 d6             	mov    %rdx,%rsi
   237e2:	48 89 c7             	mov    %rax,%rdi
   237e5:	e8 bc c1 ff ff       	callq  1f9a6 <__sprint>
   237ea:	85 c0                	test   %eax,%eax
   237ec:	0f 85 5e 07 00 00    	jne    23f50 <__vfprintf+0x4379>
   237f2:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   237f9:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   23800:	b8 00 00 00 00       	mov    $0x0,%eax
   23805:	83 bd 6c fd ff ff 00 	cmpl   $0x0,-0x294(%rbp)
   2380c:	0f 49 85 6c fd ff ff 	cmovns -0x294(%rbp),%eax
   23813:	8b 95 7c fd ff ff    	mov    -0x284(%rbp),%edx
   23819:	29 c2                	sub    %eax,%edx
   2381b:	89 d0                	mov    %edx,%eax
   2381d:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   23823:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   2382a:	0f 8e cd 04 00 00    	jle    23cfd <__vfprintf+0x4126>
   23830:	e9 87 00 00 00       	jmpq   238bc <__vfprintf+0x3ce5>
   23835:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   2383c:	48 8d 15 2d 18 21 00 	lea    0x21182d(%rip),%rdx        # 235070 <zeroes.3162>
   23843:	48 89 10             	mov    %rdx,(%rax)
   23846:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   2384d:	48 c7 40 08 10 00 00 	movq   $0x10,0x8(%rax)
   23854:	00 
   23855:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   2385b:	83 c0 10             	add    $0x10,%eax
   2385e:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23864:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   2386b:	10 
   2386c:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23872:	83 c0 01             	add    $0x1,%eax
   23875:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   2387b:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23881:	83 f8 07             	cmp    $0x7,%eax
   23884:	7e 2f                	jle    238b5 <__vfprintf+0x3cde>
   23886:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   2388d:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23894:	48 89 d6             	mov    %rdx,%rsi
   23897:	48 89 c7             	mov    %rax,%rdi
   2389a:	e8 07 c1 ff ff       	callq  1f9a6 <__sprint>
   2389f:	85 c0                	test   %eax,%eax
   238a1:	0f 85 ac 06 00 00    	jne    23f53 <__vfprintf+0x437c>
   238a7:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   238ae:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   238b5:	83 ad 68 fd ff ff 10 	subl   $0x10,-0x298(%rbp)
   238bc:	83 bd 68 fd ff ff 10 	cmpl   $0x10,-0x298(%rbp)
   238c3:	0f 8f 6c ff ff ff    	jg     23835 <__vfprintf+0x3c5e>
   238c9:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   238d0:	48 8d 15 99 17 21 00 	lea    0x211799(%rip),%rdx        # 235070 <zeroes.3162>
   238d7:	48 89 10             	mov    %rdx,(%rax)
   238da:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   238e0:	48 63 d0             	movslq %eax,%rdx
   238e3:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   238ea:	48 89 50 08          	mov    %rdx,0x8(%rax)
   238ee:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   238f4:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   238fa:	01 d0                	add    %edx,%eax
   238fc:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23902:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23909:	10 
   2390a:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23910:	83 c0 01             	add    $0x1,%eax
   23913:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23919:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   2391f:	83 f8 07             	cmp    $0x7,%eax
   23922:	0f 8e d5 03 00 00    	jle    23cfd <__vfprintf+0x4126>
   23928:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   2392f:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23936:	48 89 d6             	mov    %rdx,%rsi
   23939:	48 89 c7             	mov    %rax,%rdi
   2393c:	e8 65 c0 ff ff       	callq  1f9a6 <__sprint>
   23941:	85 c0                	test   %eax,%eax
   23943:	0f 85 0d 06 00 00    	jne    23f56 <__vfprintf+0x437f>
   23949:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23950:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   23957:	e9 a1 03 00 00       	jmpq   23cfd <__vfprintf+0x4126>
			} else {	/* %[eE] or sufficiently long %[gG] */
				if (prec > 1 || flags & ALT) {
   2395c:	83 bd 7c fd ff ff 01 	cmpl   $0x1,-0x284(%rbp)
   23963:	7f 11                	jg     23976 <__vfprintf+0x3d9f>
   23965:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   2396b:	83 e0 01             	and    $0x1,%eax
   2396e:	85 c0                	test   %eax,%eax
   23970:	0f 84 7d 02 00 00    	je     23bf3 <__vfprintf+0x401c>
					buf[0] = *cp++;
   23976:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
   2397d:	48 8d 50 01          	lea    0x1(%rax),%rdx
   23981:	48 89 95 c8 fd ff ff 	mov    %rdx,-0x238(%rbp)
   23988:	0f b6 00             	movzbl (%rax),%eax
   2398b:	88 45 90             	mov    %al,-0x70(%rbp)
					buf[1] = *decimal_point;
   2398e:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
   23995:	0f b6 00             	movzbl (%rax),%eax
   23998:	88 45 91             	mov    %al,-0x6f(%rbp)
					PRINT(buf, 2);
   2399b:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   239a2:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
   239a6:	48 89 10             	mov    %rdx,(%rax)
   239a9:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   239b0:	48 c7 40 08 02 00 00 	movq   $0x2,0x8(%rax)
   239b7:	00 
   239b8:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   239be:	83 c0 02             	add    $0x2,%eax
   239c1:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   239c7:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   239ce:	10 
   239cf:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   239d5:	83 c0 01             	add    $0x1,%eax
   239d8:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   239de:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   239e4:	83 f8 07             	cmp    $0x7,%eax
   239e7:	7e 2f                	jle    23a18 <__vfprintf+0x3e41>
   239e9:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   239f0:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   239f7:	48 89 d6             	mov    %rdx,%rsi
   239fa:	48 89 c7             	mov    %rax,%rdi
   239fd:	e8 a4 bf ff ff       	callq  1f9a6 <__sprint>
   23a02:	85 c0                	test   %eax,%eax
   23a04:	0f 85 4f 05 00 00    	jne    23f59 <__vfprintf+0x4382>
   23a0a:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23a11:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
					PRINT(cp, ndig-1);
   23a18:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23a1f:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
   23a26:	48 89 10             	mov    %rdx,(%rax)
   23a29:	8b 85 88 fd ff ff    	mov    -0x278(%rbp),%eax
   23a2f:	83 e8 01             	sub    $0x1,%eax
   23a32:	48 63 d0             	movslq %eax,%rdx
   23a35:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23a3c:	48 89 50 08          	mov    %rdx,0x8(%rax)
   23a40:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   23a46:	8b 95 88 fd ff ff    	mov    -0x278(%rbp),%edx
   23a4c:	83 ea 01             	sub    $0x1,%edx
   23a4f:	01 d0                	add    %edx,%eax
   23a51:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23a57:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23a5e:	10 
   23a5f:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23a65:	83 c0 01             	add    $0x1,%eax
   23a68:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23a6e:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23a74:	83 f8 07             	cmp    $0x7,%eax
   23a77:	7e 2f                	jle    23aa8 <__vfprintf+0x3ed1>
   23a79:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23a80:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23a87:	48 89 d6             	mov    %rdx,%rsi
   23a8a:	48 89 c7             	mov    %rax,%rdi
   23a8d:	e8 14 bf ff ff       	callq  1f9a6 <__sprint>
   23a92:	85 c0                	test   %eax,%eax
   23a94:	0f 85 c2 04 00 00    	jne    23f5c <__vfprintf+0x4385>
   23a9a:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23aa1:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
					PAD(prec - ndig, zeroes);
   23aa8:	8b 85 7c fd ff ff    	mov    -0x284(%rbp),%eax
   23aae:	2b 85 88 fd ff ff    	sub    -0x278(%rbp),%eax
   23ab4:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   23aba:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   23ac1:	0f 8e ae 01 00 00    	jle    23c75 <__vfprintf+0x409e>
   23ac7:	e9 87 00 00 00       	jmpq   23b53 <__vfprintf+0x3f7c>
   23acc:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23ad3:	48 8d 15 96 15 21 00 	lea    0x211596(%rip),%rdx        # 235070 <zeroes.3162>
   23ada:	48 89 10             	mov    %rdx,(%rax)
   23add:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23ae4:	48 c7 40 08 10 00 00 	movq   $0x10,0x8(%rax)
   23aeb:	00 
   23aec:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   23af2:	83 c0 10             	add    $0x10,%eax
   23af5:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23afb:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23b02:	10 
   23b03:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23b09:	83 c0 01             	add    $0x1,%eax
   23b0c:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23b12:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23b18:	83 f8 07             	cmp    $0x7,%eax
   23b1b:	7e 2f                	jle    23b4c <__vfprintf+0x3f75>
   23b1d:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23b24:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23b2b:	48 89 d6             	mov    %rdx,%rsi
   23b2e:	48 89 c7             	mov    %rax,%rdi
   23b31:	e8 70 be ff ff       	callq  1f9a6 <__sprint>
   23b36:	85 c0                	test   %eax,%eax
   23b38:	0f 85 21 04 00 00    	jne    23f5f <__vfprintf+0x4388>
   23b3e:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23b45:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   23b4c:	83 ad 68 fd ff ff 10 	subl   $0x10,-0x298(%rbp)
   23b53:	83 bd 68 fd ff ff 10 	cmpl   $0x10,-0x298(%rbp)
   23b5a:	0f 8f 6c ff ff ff    	jg     23acc <__vfprintf+0x3ef5>
   23b60:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23b67:	48 8d 15 02 15 21 00 	lea    0x211502(%rip),%rdx        # 235070 <zeroes.3162>
   23b6e:	48 89 10             	mov    %rdx,(%rax)
   23b71:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   23b77:	48 63 d0             	movslq %eax,%rdx
   23b7a:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23b81:	48 89 50 08          	mov    %rdx,0x8(%rax)
   23b85:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   23b8b:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   23b91:	01 d0                	add    %edx,%eax
   23b93:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23b99:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23ba0:	10 
   23ba1:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23ba7:	83 c0 01             	add    $0x1,%eax
   23baa:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23bb0:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23bb6:	83 f8 07             	cmp    $0x7,%eax
   23bb9:	0f 8e b6 00 00 00    	jle    23c75 <__vfprintf+0x409e>
   23bbf:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23bc6:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23bcd:	48 89 d6             	mov    %rdx,%rsi
   23bd0:	48 89 c7             	mov    %rax,%rdi
   23bd3:	e8 ce bd ff ff       	callq  1f9a6 <__sprint>
   23bd8:	85 c0                	test   %eax,%eax
   23bda:	0f 85 82 03 00 00    	jne    23f62 <__vfprintf+0x438b>
   23be0:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23be7:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   23bee:	e9 82 00 00 00       	jmpq   23c75 <__vfprintf+0x409e>
				} else { /* XeYYY */
					PRINT(cp, 1);
   23bf3:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23bfa:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
   23c01:	48 89 10             	mov    %rdx,(%rax)
   23c04:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23c0b:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
   23c12:	00 
   23c13:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   23c19:	83 c0 01             	add    $0x1,%eax
   23c1c:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23c22:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23c29:	10 
   23c2a:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23c30:	83 c0 01             	add    $0x1,%eax
   23c33:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23c39:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23c3f:	83 f8 07             	cmp    $0x7,%eax
   23c42:	7e 32                	jle    23c76 <__vfprintf+0x409f>
   23c44:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23c4b:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23c52:	48 89 d6             	mov    %rdx,%rsi
   23c55:	48 89 c7             	mov    %rax,%rdi
   23c58:	e8 49 bd ff ff       	callq  1f9a6 <__sprint>
   23c5d:	85 c0                	test   %eax,%eax
   23c5f:	0f 85 00 03 00 00    	jne    23f65 <__vfprintf+0x438e>
   23c65:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23c6c:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   23c73:	eb 01                	jmp    23c76 <__vfprintf+0x409f>
					PAD(prec - ndig, zeroes);
   23c75:	90                   	nop
				}
				PRINT(expstr, expsize);
   23c76:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23c7d:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
   23c81:	48 89 10             	mov    %rdx,(%rax)
   23c84:	8b 85 80 fd ff ff    	mov    -0x280(%rbp),%eax
   23c8a:	48 63 d0             	movslq %eax,%rdx
   23c8d:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23c94:	48 89 50 08          	mov    %rdx,0x8(%rax)
   23c98:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   23c9e:	8b 85 80 fd ff ff    	mov    -0x280(%rbp),%eax
   23ca4:	01 d0                	add    %edx,%eax
   23ca6:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23cac:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23cb3:	10 
   23cb4:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23cba:	83 c0 01             	add    $0x1,%eax
   23cbd:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23cc3:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23cc9:	83 f8 07             	cmp    $0x7,%eax
   23ccc:	7e 2f                	jle    23cfd <__vfprintf+0x4126>
   23cce:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23cd5:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23cdc:	48 89 d6             	mov    %rdx,%rsi
   23cdf:	48 89 c7             	mov    %rax,%rdi
   23ce2:	e8 bf bc ff ff       	callq  1f9a6 <__sprint>
   23ce7:	85 c0                	test   %eax,%eax
   23ce9:	0f 85 79 02 00 00    	jne    23f68 <__vfprintf+0x4391>
   23cef:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23cf6:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
		}
#else
		PRINT(cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   23cfd:	8b 85 70 fd ff ff    	mov    -0x290(%rbp),%eax
   23d03:	83 e0 04             	and    $0x4,%eax
   23d06:	85 c0                	test   %eax,%eax
   23d08:	0f 84 42 01 00 00    	je     23e50 <__vfprintf+0x4279>
			PAD(width - realsz, blanks);
   23d0e:	8b 85 78 fd ff ff    	mov    -0x288(%rbp),%eax
   23d14:	2b 85 94 fd ff ff    	sub    -0x26c(%rbp),%eax
   23d1a:	89 85 68 fd ff ff    	mov    %eax,-0x298(%rbp)
   23d20:	83 bd 68 fd ff ff 00 	cmpl   $0x0,-0x298(%rbp)
   23d27:	0f 8e 23 01 00 00    	jle    23e50 <__vfprintf+0x4279>
   23d2d:	e9 87 00 00 00       	jmpq   23db9 <__vfprintf+0x41e2>
   23d32:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23d39:	48 8d 15 20 13 21 00 	lea    0x211320(%rip),%rdx        # 235060 <blanks.3161>
   23d40:	48 89 10             	mov    %rdx,(%rax)
   23d43:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23d4a:	48 c7 40 08 10 00 00 	movq   $0x10,0x8(%rax)
   23d51:	00 
   23d52:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   23d58:	83 c0 10             	add    $0x10,%eax
   23d5b:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23d61:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23d68:	10 
   23d69:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23d6f:	83 c0 01             	add    $0x1,%eax
   23d72:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23d78:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23d7e:	83 f8 07             	cmp    $0x7,%eax
   23d81:	7e 2f                	jle    23db2 <__vfprintf+0x41db>
   23d83:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23d8a:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23d91:	48 89 d6             	mov    %rdx,%rsi
   23d94:	48 89 c7             	mov    %rax,%rdi
   23d97:	e8 0a bc ff ff       	callq  1f9a6 <__sprint>
   23d9c:	85 c0                	test   %eax,%eax
   23d9e:	0f 85 c7 01 00 00    	jne    23f6b <__vfprintf+0x4394>
   23da4:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23dab:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   23db2:	83 ad 68 fd ff ff 10 	subl   $0x10,-0x298(%rbp)
   23db9:	83 bd 68 fd ff ff 10 	cmpl   $0x10,-0x298(%rbp)
   23dc0:	0f 8f 6c ff ff ff    	jg     23d32 <__vfprintf+0x415b>
   23dc6:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23dcd:	48 8d 15 8c 12 21 00 	lea    0x21128c(%rip),%rdx        # 235060 <blanks.3161>
   23dd4:	48 89 10             	mov    %rdx,(%rax)
   23dd7:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   23ddd:	48 63 d0             	movslq %eax,%rdx
   23de0:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
   23de7:	48 89 50 08          	mov    %rdx,0x8(%rax)
   23deb:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
   23df1:	8b 85 68 fd ff ff    	mov    -0x298(%rbp),%eax
   23df7:	01 d0                	add    %edx,%eax
   23df9:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
   23dff:	48 83 85 d0 fd ff ff 	addq   $0x10,-0x230(%rbp)
   23e06:	10 
   23e07:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23e0d:	83 c0 01             	add    $0x1,%eax
   23e10:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
   23e16:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
   23e1c:	83 f8 07             	cmp    $0x7,%eax
   23e1f:	7e 2f                	jle    23e50 <__vfprintf+0x4279>
   23e21:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23e28:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23e2f:	48 89 d6             	mov    %rdx,%rsi
   23e32:	48 89 c7             	mov    %rax,%rdi
   23e35:	e8 6c bb ff ff       	callq  1f9a6 <__sprint>
   23e3a:	85 c0                	test   %eax,%eax
   23e3c:	0f 85 2c 01 00 00    	jne    23f6e <__vfprintf+0x4397>
   23e42:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23e49:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)

		/* finally, adjust ret */
		if (width < realsz)
   23e50:	8b 85 78 fd ff ff    	mov    -0x288(%rbp),%eax
   23e56:	3b 85 94 fd ff ff    	cmp    -0x26c(%rbp),%eax
   23e5c:	7d 0c                	jge    23e6a <__vfprintf+0x4293>
			width = realsz;
   23e5e:	8b 85 94 fd ff ff    	mov    -0x26c(%rbp),%eax
   23e64:	89 85 78 fd ff ff    	mov    %eax,-0x288(%rbp)
		if (width > INT_MAX - ret)
   23e6a:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
   23e6f:	2b 85 74 fd ff ff    	sub    -0x28c(%rbp),%eax
   23e75:	39 85 78 fd ff ff    	cmp    %eax,-0x288(%rbp)
   23e7b:	0f 8f 34 01 00 00    	jg     23fb5 <__vfprintf+0x43de>
			goto overflow;
		ret += width;
   23e81:	8b 85 78 fd ff ff    	mov    -0x288(%rbp),%eax
   23e87:	01 85 74 fd ff ff    	add    %eax,-0x28c(%rbp)

		FLUSH();	/* copy out the I/O vectors */
   23e8d:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   23e93:	85 c0                	test   %eax,%eax
   23e95:	74 21                	je     23eb8 <__vfprintf+0x42e1>
   23e97:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23e9e:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23ea5:	48 89 d6             	mov    %rdx,%rsi
   23ea8:	48 89 c7             	mov    %rax,%rdi
   23eab:	e8 f6 ba ff ff       	callq  1f9a6 <__sprint>
   23eb0:	85 c0                	test   %eax,%eax
   23eb2:	0f 85 b9 00 00 00    	jne    23f71 <__vfprintf+0x439a>
   23eb8:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
   23ebf:	00 00 00 
   23ec2:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23ec9:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
		cp = fmt;
   23ed0:	e9 7b be ff ff       	jmpq   1fd50 <__vfprintf+0x179>
			goto done;
   23ed5:	90                   	nop
   23ed6:	eb 01                	jmp    23ed9 <__vfprintf+0x4302>
				goto done;
   23ed8:	90                   	nop
	}
done:
	FLUSH();
   23ed9:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
   23edf:	85 c0                	test   %eax,%eax
   23ee1:	74 1d                	je     23f00 <__vfprintf+0x4329>
   23ee3:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
   23eea:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23ef1:	48 89 d6             	mov    %rdx,%rsi
   23ef4:	48 89 c7             	mov    %rax,%rdi
   23ef7:	e8 aa ba ff ff       	callq  1f9a6 <__sprint>
   23efc:	85 c0                	test   %eax,%eax
   23efe:	75 74                	jne    23f74 <__vfprintf+0x439d>
   23f00:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
   23f07:	00 00 00 
   23f0a:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
   23f11:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
   23f18:	eb 5b                	jmp    23f75 <__vfprintf+0x439e>
			PRINT(cp, m);
   23f1a:	90                   	nop
   23f1b:	eb 58                	jmp    23f75 <__vfprintf+0x439e>
			PAD(width - realsz, blanks);
   23f1d:	90                   	nop
   23f1e:	eb 55                	jmp    23f75 <__vfprintf+0x439e>
   23f20:	90                   	nop
   23f21:	eb 52                	jmp    23f75 <__vfprintf+0x439e>
			PRINT(&sign, 1);
   23f23:	90                   	nop
   23f24:	eb 4f                	jmp    23f75 <__vfprintf+0x439e>
			PRINT(ox, 2);
   23f26:	90                   	nop
   23f27:	eb 4c                	jmp    23f75 <__vfprintf+0x439e>
			PAD(width - realsz, zeroes);
   23f29:	90                   	nop
   23f2a:	eb 49                	jmp    23f75 <__vfprintf+0x439e>
   23f2c:	90                   	nop
   23f2d:	eb 46                	jmp    23f75 <__vfprintf+0x439e>
		PAD(dprec - size, zeroes);
   23f2f:	90                   	nop
   23f30:	eb 43                	jmp    23f75 <__vfprintf+0x439e>
   23f32:	90                   	nop
   23f33:	eb 40                	jmp    23f75 <__vfprintf+0x439e>
			PRINT(cp, size);
   23f35:	90                   	nop
   23f36:	eb 3d                	jmp    23f75 <__vfprintf+0x439e>
					PRINT(zeroes, 1);
   23f38:	90                   	nop
   23f39:	eb 3a                	jmp    23f75 <__vfprintf+0x439e>
						PRINT(decimal_point, 1);
   23f3b:	90                   	nop
   23f3c:	eb 37                	jmp    23f75 <__vfprintf+0x439e>
					PAD(-expt, zeroes);
   23f3e:	90                   	nop
   23f3f:	eb 34                	jmp    23f75 <__vfprintf+0x439e>
   23f41:	90                   	nop
   23f42:	eb 31                	jmp    23f75 <__vfprintf+0x439e>
					PRINTANDPAD(cp, dtoaend, lead, zeroes);
   23f44:	90                   	nop
   23f45:	eb 2e                	jmp    23f75 <__vfprintf+0x439e>
   23f47:	90                   	nop
   23f48:	eb 2b                	jmp    23f75 <__vfprintf+0x439e>
   23f4a:	90                   	nop
   23f4b:	eb 28                	jmp    23f75 <__vfprintf+0x439e>
						PRINT(decimal_point, 1);
   23f4d:	90                   	nop
   23f4e:	eb 25                	jmp    23f75 <__vfprintf+0x439e>
				PRINTANDPAD(cp, dtoaend, prec, zeroes);
   23f50:	90                   	nop
   23f51:	eb 22                	jmp    23f75 <__vfprintf+0x439e>
   23f53:	90                   	nop
   23f54:	eb 1f                	jmp    23f75 <__vfprintf+0x439e>
   23f56:	90                   	nop
   23f57:	eb 1c                	jmp    23f75 <__vfprintf+0x439e>
					PRINT(buf, 2);
   23f59:	90                   	nop
   23f5a:	eb 19                	jmp    23f75 <__vfprintf+0x439e>
					PRINT(cp, ndig-1);
   23f5c:	90                   	nop
   23f5d:	eb 16                	jmp    23f75 <__vfprintf+0x439e>
					PAD(prec - ndig, zeroes);
   23f5f:	90                   	nop
   23f60:	eb 13                	jmp    23f75 <__vfprintf+0x439e>
   23f62:	90                   	nop
   23f63:	eb 10                	jmp    23f75 <__vfprintf+0x439e>
					PRINT(cp, 1);
   23f65:	90                   	nop
   23f66:	eb 0d                	jmp    23f75 <__vfprintf+0x439e>
				PRINT(expstr, expsize);
   23f68:	90                   	nop
   23f69:	eb 0a                	jmp    23f75 <__vfprintf+0x439e>
			PAD(width - realsz, blanks);
   23f6b:	90                   	nop
   23f6c:	eb 07                	jmp    23f75 <__vfprintf+0x439e>
   23f6e:	90                   	nop
   23f6f:	eb 04                	jmp    23f75 <__vfprintf+0x439e>
		FLUSH();	/* copy out the I/O vectors */
   23f71:	90                   	nop
   23f72:	eb 01                	jmp    23f75 <__vfprintf+0x439e>
	FLUSH();
   23f74:	90                   	nop
error:
	va_end(orgap);
	if (__sferror(fp))
   23f75:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
   23f7c:	0f b7 40 10          	movzwl 0x10(%rax),%eax
   23f80:	98                   	cwtl   
   23f81:	83 e0 40             	and    $0x40,%eax
   23f84:	85 c0                	test   %eax,%eax
   23f86:	74 45                	je     23fcd <__vfprintf+0x43f6>
		ret = -1;
   23f88:	c7 85 74 fd ff ff ff 	movl   $0xffffffff,-0x28c(%rbp)
   23f8f:	ff ff ff 
	goto finish;
   23f92:	eb 39                	jmp    23fcd <__vfprintf+0x43f6>

overflow:
   23f94:	90                   	nop
   23f95:	eb 1f                	jmp    23fb6 <__vfprintf+0x43df>
			GETASTER(width);
   23f97:	90                   	nop
   23f98:	eb 1c                	jmp    23fb6 <__vfprintf+0x43df>
   23f9a:	90                   	nop
   23f9b:	eb 19                	jmp    23fb6 <__vfprintf+0x43df>
				goto overflow;
   23f9d:	90                   	nop
   23f9e:	eb 16                	jmp    23fb6 <__vfprintf+0x43df>
				GETASTER(n);
   23fa0:	90                   	nop
   23fa1:	eb 13                	jmp    23fb6 <__vfprintf+0x43df>
   23fa3:	90                   	nop
   23fa4:	eb 10                	jmp    23fb6 <__vfprintf+0x43df>
				APPEND_DIGIT(n, ch);
   23fa6:	90                   	nop
   23fa7:	eb 0d                	jmp    23fb6 <__vfprintf+0x43df>
   23fa9:	90                   	nop
   23faa:	eb 0a                	jmp    23fb6 <__vfprintf+0x43df>
				APPEND_DIGIT(n, ch);
   23fac:	90                   	nop
   23fad:	eb 07                	jmp    23fb6 <__vfprintf+0x43df>
   23faf:	90                   	nop
   23fb0:	eb 04                	jmp    23fb6 <__vfprintf+0x43df>
					goto overflow;
   23fb2:	90                   	nop
   23fb3:	eb 01                	jmp    23fb6 <__vfprintf+0x43df>
			goto overflow;
   23fb5:	90                   	nop
	errno = ENOMEM;
   23fb6:	e8 05 b7 ff ff       	callq  1f6c0 <__errno>
   23fbb:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
	ret = -1;
   23fc1:	c7 85 74 fd ff ff ff 	movl   $0xffffffff,-0x28c(%rbp)
   23fc8:	ff ff ff 
   23fcb:	eb 01                	jmp    23fce <__vfprintf+0x43f7>
	goto finish;
   23fcd:	90                   	nop

finish:
#ifdef PRINTF_WIDE_CHAR
	if (convbuf)
   23fce:	48 83 bd f0 fd ff ff 	cmpq   $0x0,-0x210(%rbp)
   23fd5:	00 
   23fd6:	74 0f                	je     23fe7 <__vfprintf+0x4410>
		free(convbuf);
   23fd8:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
   23fdf:	48 89 c7             	mov    %rax,%rdi
   23fe2:	e8 35 7c fe ff       	callq  bc1c <dlfree>
#endif
#ifdef FLOATING_POINT
	if (dtoaresult)
   23fe7:	48 83 bd d8 fd ff ff 	cmpq   $0x0,-0x228(%rbp)
   23fee:	00 
   23fef:	74 0f                	je     24000 <__vfprintf+0x4429>
		__freedtoa(dtoaresult);
   23ff1:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
   23ff8:	48 89 c7             	mov    %rax,%rdi
   23ffb:	e8 18 4f 00 00       	callq  28f18 <__freedtoa>
#endif
	if (argtable != NULL && argtable != statargtable) {
   24000:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   24007:	48 85 c0             	test   %rax,%rax
   2400a:	74 2d                	je     24039 <__vfprintf+0x4462>
   2400c:	48 8b 95 b0 fd ff ff 	mov    -0x250(%rbp),%rdx
   24013:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
   2401a:	48 39 c2             	cmp    %rax,%rdx
   2401d:	74 1a                	je     24039 <__vfprintf+0x4462>
		free(argtable);
   2401f:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
   24026:	48 89 c7             	mov    %rax,%rdi
   24029:	e8 ee 7b fe ff       	callq  bc1c <dlfree>
		argtable = NULL;
   2402e:	48 c7 85 b0 fd ff ff 	movq   $0x0,-0x250(%rbp)
   24035:	00 00 00 00 
	}
	return (ret);
   24039:	8b 85 74 fd ff ff    	mov    -0x28c(%rbp),%eax
}
   2403f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   24043:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
   2404a:	00 00 
   2404c:	74 05                	je     24053 <__vfprintf+0x447c>
   2404e:	e8 45 0f fe ff       	callq  4f98 <__stack_chk_fail>
   24053:	c9                   	leaveq 
   24054:	c3                   	retq   

0000000000024055 <__find_arguments>:
 * problematic since we have nested functions..)
 */
static int
__find_arguments(const char *fmt0, va_list ap, union arg **argtable,
    size_t *argtablesiz)
{
   24055:	55                   	push   %rbp
   24056:	48 89 e5             	mov    %rsp,%rbp
   24059:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
   2405d:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
   24061:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
   24065:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
   24069:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
   2406d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   24074:	00 00 
   24076:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2407a:	31 c0                	xor    %eax,%eax
	unsigned char *typetable; /* table of types */
	unsigned char stattypetable[STATIC_ARG_TBL_SIZE];
	int tablesize;		/* current size of type table */
	int tablemax;		/* largest used index in table */
	int nextarg;		/* 1-based argument index */
	int ret = 0;		/* return value */
   2407c:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
	int rc  = 0;		/* save return code from __grow_type_table */
   24083:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
		nextarg = hold; \
		fmt = ++cp; \
	} else { \
		ADDTYPE_CHECK(T_INT); \
	}
	fmt = (char *)fmt0;
   2408a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2408e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	typetable = stattypetable;
   24092:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   24096:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	tablesize = STATIC_ARG_TBL_SIZE;
   2409a:	c7 45 a0 08 00 00 00 	movl   $0x8,-0x60(%rbp)
	tablemax = 0;
   240a1:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
	nextarg = 1;
   240a8:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
	memset(typetable, T_UNUSED, STATIC_ARG_TBL_SIZE);
   240af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   240b3:	ba 08 00 00 00       	mov    $0x8,%edx
   240b8:	be 00 00 00 00       	mov    $0x0,%esi
   240bd:	48 89 c7             	mov    %rax,%rdi
   240c0:	e8 93 a7 fe ff       	callq  e858 <memset>
	memset(&ps, 0, sizeof(ps));
   240c5:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
   240c9:	ba 08 00 00 00       	mov    $0x8,%edx
   240ce:	be 00 00 00 00       	mov    $0x0,%esi
   240d3:	48 89 c7             	mov    %rax,%rdi
   240d6:	e8 7d a7 fe ff       	callq  e858 <memset>

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
		cp = fmt;
   240db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   240df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		while ((n = mbrtowc(&wc, fmt, MB_CUR_MAX, &ps)) > 0) {
   240e3:	eb 18                	jmp    240fd <__find_arguments+0xa8>
			fmt += n;
   240e5:	8b 45 ac             	mov    -0x54(%rbp),%eax
   240e8:	48 98                	cltq   
   240ea:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			if (wc == '%') {
   240ee:	8b 45 a4             	mov    -0x5c(%rbp),%eax
   240f1:	83 f8 25             	cmp    $0x25,%eax
   240f4:	75 07                	jne    240fd <__find_arguments+0xa8>
				fmt--;
   240f6:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
				break;
   240fb:	eb 25                	jmp    24122 <__find_arguments+0xcd>
		while ((n = mbrtowc(&wc, fmt, MB_CUR_MAX, &ps)) > 0) {
   240fd:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
   24101:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
   24105:	48 8d 45 a4          	lea    -0x5c(%rbp),%rax
   24109:	48 89 d1             	mov    %rdx,%rcx
   2410c:	ba 01 00 00 00       	mov    $0x1,%edx
   24111:	48 89 c7             	mov    %rax,%rdi
   24114:	e8 c4 89 00 00       	callq  2cadd <mbrtowc>
   24119:	89 45 ac             	mov    %eax,-0x54(%rbp)
   2411c:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
   24120:	7f c3                	jg     240e5 <__find_arguments+0x90>
			}
		}
		if (n <= 0)
   24122:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
   24126:	0f 8e ad 11 00 00    	jle    252d9 <__find_arguments+0x1284>
			goto done;
		fmt++;		/* skip over '%' */
   2412c:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)

		flags = 0;
   24131:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)

rflag:		ch = *fmt++;
   24138:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2413c:	48 8d 50 01          	lea    0x1(%rax),%rdx
   24140:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   24144:	0f b6 00             	movzbl (%rax),%eax
   24147:	0f be c0             	movsbl %al,%eax
   2414a:	89 45 a8             	mov    %eax,-0x58(%rbp)
reswitch:	switch (ch) {
   2414d:	8b 45 a8             	mov    -0x58(%rbp),%eax
   24150:	83 e8 20             	sub    $0x20,%eax
   24153:	83 f8 5a             	cmp    $0x5a,%eax
   24156:	0f 87 45 11 00 00    	ja     252a1 <__find_arguments+0x124c>
   2415c:	89 c0                	mov    %eax,%eax
   2415e:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   24165:	00 
   24166:	48 8d 05 c3 c9 00 00 	lea    0xc9c3(%rip),%rax        # 30b30 <__func__.2393+0x937>
   2416d:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   24170:	48 63 d0             	movslq %eax,%rdx
   24173:	48 8d 05 b6 c9 00 00 	lea    0xc9b6(%rip),%rax        # 30b30 <__func__.2393+0x937>
   2417a:	48 01 d0             	add    %rdx,%rax
   2417d:	ff e0                	jmpq   *%rax
		case ' ':
		case '#':
		case '\'':
			goto rflag;
		case '*':
			ADDASTER();
   2417f:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
   24186:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2418a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2418e:	eb 50                	jmp    241e0 <__find_arguments+0x18b>
   24190:	81 7d b0 cc cc cc 0c 	cmpl   $0xccccccc,-0x50(%rbp)
   24197:	0f 8f fb 1a 00 00    	jg     25c98 <__find_arguments+0x1c43>
   2419d:	8b 55 b0             	mov    -0x50(%rbp),%edx
   241a0:	89 d0                	mov    %edx,%eax
   241a2:	c1 e0 02             	shl    $0x2,%eax
   241a5:	01 d0                	add    %edx,%eax
   241a7:	01 c0                	add    %eax,%eax
   241a9:	89 45 b0             	mov    %eax,-0x50(%rbp)
   241ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   241b0:	0f b6 00             	movzbl (%rax),%eax
   241b3:	0f be c0             	movsbl %al,%eax
   241b6:	83 e8 30             	sub    $0x30,%eax
   241b9:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
   241be:	29 c2                	sub    %eax,%edx
   241c0:	89 d0                	mov    %edx,%eax
   241c2:	39 45 b0             	cmp    %eax,-0x50(%rbp)
   241c5:	0f 8f d0 1a 00 00    	jg     25c9b <__find_arguments+0x1c46>
   241cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   241cf:	0f b6 00             	movzbl (%rax),%eax
   241d2:	0f be c0             	movsbl %al,%eax
   241d5:	83 e8 30             	sub    $0x30,%eax
   241d8:	01 45 b0             	add    %eax,-0x50(%rbp)
   241db:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
   241e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   241e4:	0f b6 00             	movzbl (%rax),%eax
   241e7:	0f be c0             	movsbl %al,%eax
   241ea:	83 e8 30             	sub    $0x30,%eax
   241ed:	83 f8 09             	cmp    $0x9,%eax
   241f0:	76 9e                	jbe    24190 <__find_arguments+0x13b>
   241f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   241f6:	0f b6 00             	movzbl (%rax),%eax
   241f9:	3c 24                	cmp    $0x24,%al
   241fb:	75 75                	jne    24272 <__find_arguments+0x21d>
   241fd:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24200:	89 45 cc             	mov    %eax,-0x34(%rbp)
   24203:	8b 45 b0             	mov    -0x50(%rbp),%eax
   24206:	89 45 bc             	mov    %eax,-0x44(%rbp)
   24209:	8b 45 a0             	mov    -0x60(%rbp),%eax
   2420c:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   2420f:	7c 16                	jl     24227 <__find_arguments+0x1d2>
   24211:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24215:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24219:	48 89 d6             	mov    %rdx,%rsi
   2421c:	48 89 c7             	mov    %rax,%rdi
   2421f:	e8 03 1b 00 00       	callq  25d27 <__grow_type_table>
   24224:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24227:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2422a:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   2422d:	7e 06                	jle    24235 <__find_arguments+0x1e0>
   2422f:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24232:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24235:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24239:	74 15                	je     24250 <__find_arguments+0x1fb>
   2423b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2423f:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24242:	8d 50 01             	lea    0x1(%rax),%edx
   24245:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24248:	48 98                	cltq   
   2424a:	48 01 c8             	add    %rcx,%rax
   2424d:	c6 00 04             	movb   $0x4,(%rax)
   24250:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24254:	0f 84 44 1a 00 00    	je     25c9e <__find_arguments+0x1c49>
   2425a:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2425d:	89 45 bc             	mov    %eax,-0x44(%rbp)
   24260:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
   24265:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24269:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2426d:	e9 c6 fe ff ff       	jmpq   24138 <__find_arguments+0xe3>
   24272:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24275:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24278:	7c 16                	jl     24290 <__find_arguments+0x23b>
   2427a:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   2427e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24282:	48 89 d6             	mov    %rdx,%rsi
   24285:	48 89 c7             	mov    %rax,%rdi
   24288:	e8 9a 1a 00 00       	callq  25d27 <__grow_type_table>
   2428d:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24290:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24293:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24296:	7e 06                	jle    2429e <__find_arguments+0x249>
   24298:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2429b:	89 45 b8             	mov    %eax,-0x48(%rbp)
   2429e:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   242a2:	74 15                	je     242b9 <__find_arguments+0x264>
   242a4:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   242a8:	8b 45 bc             	mov    -0x44(%rbp),%eax
   242ab:	8d 50 01             	lea    0x1(%rax),%edx
   242ae:	89 55 bc             	mov    %edx,-0x44(%rbp)
   242b1:	48 98                	cltq   
   242b3:	48 01 c8             	add    %rcx,%rax
   242b6:	c6 00 04             	movb   $0x4,(%rax)
   242b9:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   242bd:	0f 84 de 19 00 00    	je     25ca1 <__find_arguments+0x1c4c>
			goto rflag;
   242c3:	e9 70 fe ff ff       	jmpq   24138 <__find_arguments+0xe3>
		case '-':
		case '+':
			goto rflag;
		case '.':
			if ((ch = *fmt++) == '*') {
   242c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   242cc:	48 8d 50 01          	lea    0x1(%rax),%rdx
   242d0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   242d4:	0f b6 00             	movzbl (%rax),%eax
   242d7:	0f be c0             	movsbl %al,%eax
   242da:	89 45 a8             	mov    %eax,-0x58(%rbp)
   242dd:	83 7d a8 2a          	cmpl   $0x2a,-0x58(%rbp)
   242e1:	0f 85 5e 01 00 00    	jne    24445 <__find_arguments+0x3f0>
				ADDASTER();
   242e7:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
   242ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   242f2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   242f6:	eb 50                	jmp    24348 <__find_arguments+0x2f3>
   242f8:	81 7d b0 cc cc cc 0c 	cmpl   $0xccccccc,-0x50(%rbp)
   242ff:	0f 8f 9f 19 00 00    	jg     25ca4 <__find_arguments+0x1c4f>
   24305:	8b 55 b0             	mov    -0x50(%rbp),%edx
   24308:	89 d0                	mov    %edx,%eax
   2430a:	c1 e0 02             	shl    $0x2,%eax
   2430d:	01 d0                	add    %edx,%eax
   2430f:	01 c0                	add    %eax,%eax
   24311:	89 45 b0             	mov    %eax,-0x50(%rbp)
   24314:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24318:	0f b6 00             	movzbl (%rax),%eax
   2431b:	0f be c0             	movsbl %al,%eax
   2431e:	83 e8 30             	sub    $0x30,%eax
   24321:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
   24326:	29 c2                	sub    %eax,%edx
   24328:	89 d0                	mov    %edx,%eax
   2432a:	39 45 b0             	cmp    %eax,-0x50(%rbp)
   2432d:	0f 8f 74 19 00 00    	jg     25ca7 <__find_arguments+0x1c52>
   24333:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   24337:	0f b6 00             	movzbl (%rax),%eax
   2433a:	0f be c0             	movsbl %al,%eax
   2433d:	83 e8 30             	sub    $0x30,%eax
   24340:	01 45 b0             	add    %eax,-0x50(%rbp)
   24343:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
   24348:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2434c:	0f b6 00             	movzbl (%rax),%eax
   2434f:	0f be c0             	movsbl %al,%eax
   24352:	83 e8 30             	sub    $0x30,%eax
   24355:	83 f8 09             	cmp    $0x9,%eax
   24358:	76 9e                	jbe    242f8 <__find_arguments+0x2a3>
   2435a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2435e:	0f b6 00             	movzbl (%rax),%eax
   24361:	3c 24                	cmp    $0x24,%al
   24363:	75 75                	jne    243da <__find_arguments+0x385>
   24365:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24368:	89 45 c8             	mov    %eax,-0x38(%rbp)
   2436b:	8b 45 b0             	mov    -0x50(%rbp),%eax
   2436e:	89 45 bc             	mov    %eax,-0x44(%rbp)
   24371:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24374:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24377:	7c 16                	jl     2438f <__find_arguments+0x33a>
   24379:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   2437d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24381:	48 89 d6             	mov    %rdx,%rsi
   24384:	48 89 c7             	mov    %rax,%rdi
   24387:	e8 9b 19 00 00       	callq  25d27 <__grow_type_table>
   2438c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   2438f:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24392:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24395:	7e 06                	jle    2439d <__find_arguments+0x348>
   24397:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2439a:	89 45 b8             	mov    %eax,-0x48(%rbp)
   2439d:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   243a1:	74 15                	je     243b8 <__find_arguments+0x363>
   243a3:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   243a7:	8b 45 bc             	mov    -0x44(%rbp),%eax
   243aa:	8d 50 01             	lea    0x1(%rax),%edx
   243ad:	89 55 bc             	mov    %edx,-0x44(%rbp)
   243b0:	48 98                	cltq   
   243b2:	48 01 c8             	add    %rcx,%rax
   243b5:	c6 00 04             	movb   $0x4,(%rax)
   243b8:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   243bc:	0f 84 e8 18 00 00    	je     25caa <__find_arguments+0x1c55>
   243c2:	8b 45 c8             	mov    -0x38(%rbp),%eax
   243c5:	89 45 bc             	mov    %eax,-0x44(%rbp)
   243c8:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
   243cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   243d1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   243d5:	e9 5e fd ff ff       	jmpq   24138 <__find_arguments+0xe3>
   243da:	8b 45 a0             	mov    -0x60(%rbp),%eax
   243dd:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   243e0:	7c 16                	jl     243f8 <__find_arguments+0x3a3>
   243e2:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   243e6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   243ea:	48 89 d6             	mov    %rdx,%rsi
   243ed:	48 89 c7             	mov    %rax,%rdi
   243f0:	e8 32 19 00 00       	callq  25d27 <__grow_type_table>
   243f5:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   243f8:	8b 45 bc             	mov    -0x44(%rbp),%eax
   243fb:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   243fe:	7e 06                	jle    24406 <__find_arguments+0x3b1>
   24400:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24403:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24406:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   2440a:	74 15                	je     24421 <__find_arguments+0x3cc>
   2440c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24410:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24413:	8d 50 01             	lea    0x1(%rax),%edx
   24416:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24419:	48 98                	cltq   
   2441b:	48 01 c8             	add    %rcx,%rax
   2441e:	c6 00 04             	movb   $0x4,(%rax)
   24421:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24425:	0f 84 82 18 00 00    	je     25cad <__find_arguments+0x1c58>
				goto rflag;
   2442b:	e9 08 fd ff ff       	jmpq   24138 <__find_arguments+0xe3>
			}
			while (is_digit(ch)) {
				ch = *fmt++;
   24430:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   24434:	48 8d 50 01          	lea    0x1(%rax),%rdx
   24438:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   2443c:	0f b6 00             	movzbl (%rax),%eax
   2443f:	0f be c0             	movsbl %al,%eax
   24442:	89 45 a8             	mov    %eax,-0x58(%rbp)
			while (is_digit(ch)) {
   24445:	8b 45 a8             	mov    -0x58(%rbp),%eax
   24448:	83 e8 30             	sub    $0x30,%eax
   2444b:	83 f8 09             	cmp    $0x9,%eax
   2444e:	76 e0                	jbe    24430 <__find_arguments+0x3db>
			}
			goto reswitch;
   24450:	e9 f8 fc ff ff       	jmpq   2414d <__find_arguments+0xf8>
		case '0':
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   24455:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
			do {
				APPEND_DIGIT(n ,ch);
   2445c:	81 7d ac cc cc cc 0c 	cmpl   $0xccccccc,-0x54(%rbp)
   24463:	0f 8f 47 18 00 00    	jg     25cb0 <__find_arguments+0x1c5b>
   24469:	8b 55 ac             	mov    -0x54(%rbp),%edx
   2446c:	89 d0                	mov    %edx,%eax
   2446e:	c1 e0 02             	shl    $0x2,%eax
   24471:	01 d0                	add    %edx,%eax
   24473:	01 c0                	add    %eax,%eax
   24475:	89 45 ac             	mov    %eax,-0x54(%rbp)
   24478:	8b 45 a8             	mov    -0x58(%rbp),%eax
   2447b:	83 e8 30             	sub    $0x30,%eax
   2447e:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
   24483:	29 c2                	sub    %eax,%edx
   24485:	89 d0                	mov    %edx,%eax
   24487:	39 45 ac             	cmp    %eax,-0x54(%rbp)
   2448a:	0f 8f 23 18 00 00    	jg     25cb3 <__find_arguments+0x1c5e>
   24490:	8b 45 a8             	mov    -0x58(%rbp),%eax
   24493:	83 e8 30             	sub    $0x30,%eax
   24496:	01 45 ac             	add    %eax,-0x54(%rbp)
				ch = *fmt++;
   24499:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2449d:	48 8d 50 01          	lea    0x1(%rax),%rdx
   244a1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   244a5:	0f b6 00             	movzbl (%rax),%eax
   244a8:	0f be c0             	movsbl %al,%eax
   244ab:	89 45 a8             	mov    %eax,-0x58(%rbp)
			} while (is_digit(ch));
   244ae:	8b 45 a8             	mov    -0x58(%rbp),%eax
   244b1:	83 e8 30             	sub    $0x30,%eax
   244b4:	83 f8 09             	cmp    $0x9,%eax
   244b7:	76 a3                	jbe    2445c <__find_arguments+0x407>
			if (ch == '$') {
   244b9:	83 7d a8 24          	cmpl   $0x24,-0x58(%rbp)
   244bd:	0f 85 8a fc ff ff    	jne    2414d <__find_arguments+0xf8>
				nextarg = n;
   244c3:	8b 45 ac             	mov    -0x54(%rbp),%eax
   244c6:	89 45 bc             	mov    %eax,-0x44(%rbp)
				goto rflag;
   244c9:	e9 6a fc ff ff       	jmpq   24138 <__find_arguments+0xe3>
			}
			goto reswitch;
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
   244ce:	83 4d b4 08          	orl    $0x8,-0x4c(%rbp)
			goto rflag;
   244d2:	e9 61 fc ff ff       	jmpq   24138 <__find_arguments+0xe3>
#endif
		case 'h':
			if (*fmt == 'h') {
   244d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   244db:	0f b6 00             	movzbl (%rax),%eax
   244de:	3c 68                	cmp    $0x68,%al
   244e0:	75 11                	jne    244f3 <__find_arguments+0x49e>
				fmt++;
   244e2:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
				flags |= CHARINT;
   244e7:	81 4d b4 00 08 00 00 	orl    $0x800,-0x4c(%rbp)
   244ee:	e9 45 fc ff ff       	jmpq   24138 <__find_arguments+0xe3>
			} else {
				flags |= SHORTINT;
   244f3:	83 4d b4 40          	orl    $0x40,-0x4c(%rbp)
			}
			goto rflag;
   244f7:	e9 3c fc ff ff       	jmpq   24138 <__find_arguments+0xe3>
		case 'j':
			flags |= MAXINT; 
   244fc:	81 4d b4 00 10 00 00 	orl    $0x1000,-0x4c(%rbp)
			goto rflag;
   24503:	e9 30 fc ff ff       	jmpq   24138 <__find_arguments+0xe3>
		case 'l':
			if (*fmt == 'l') {
   24508:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2450c:	0f b6 00             	movzbl (%rax),%eax
   2450f:	3c 6c                	cmp    $0x6c,%al
   24511:	75 0e                	jne    24521 <__find_arguments+0x4cc>
				fmt++;
   24513:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
				flags |= LLONGINT;
   24518:	83 4d b4 20          	orl    $0x20,-0x4c(%rbp)
   2451c:	e9 17 fc ff ff       	jmpq   24138 <__find_arguments+0xe3>
			} else {
				flags |= LONGINT;
   24521:	83 4d b4 10          	orl    $0x10,-0x4c(%rbp)
			}
			goto rflag;
   24525:	e9 0e fc ff ff       	jmpq   24138 <__find_arguments+0xe3>
		case 'q':
			flags |= LLONGINT;
   2452a:	83 4d b4 20          	orl    $0x20,-0x4c(%rbp)
			goto rflag;
   2452e:	e9 05 fc ff ff       	jmpq   24138 <__find_arguments+0xe3>
		case 't':
			flags |= PTRINT;
   24533:	81 4d b4 00 02 00 00 	orl    $0x200,-0x4c(%rbp)
			goto rflag;
   2453a:	e9 f9 fb ff ff       	jmpq   24138 <__find_arguments+0xe3>
		case 'z':
			flags |= SIZEINT;
   2453f:	81 4d b4 00 04 00 00 	orl    $0x400,-0x4c(%rbp)
			goto rflag;
   24546:	e9 ed fb ff ff       	jmpq   24138 <__find_arguments+0xe3>
		case 'c':
#ifdef PRINTF_WIDE_CHAR
			if (flags & LONGINT)
   2454b:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   2454e:	83 e0 10             	and    $0x10,%eax
   24551:	85 c0                	test   %eax,%eax
   24553:	74 47                	je     2459c <__find_arguments+0x547>
				ADDTYPE_CHECK(T_WINT);
   24555:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24558:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   2455b:	7c 16                	jl     24573 <__find_arguments+0x51e>
   2455d:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24561:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24565:	48 89 d6             	mov    %rdx,%rsi
   24568:	48 89 c7             	mov    %rax,%rdi
   2456b:	e8 b7 17 00 00       	callq  25d27 <__grow_type_table>
   24570:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24573:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24576:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24579:	7e 06                	jle    24581 <__find_arguments+0x52c>
   2457b:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2457e:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24581:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24585:	74 15                	je     2459c <__find_arguments+0x547>
   24587:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2458b:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2458e:	8d 50 01             	lea    0x1(%rax),%edx
   24591:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24594:	48 98                	cltq   
   24596:	48 01 c8             	add    %rcx,%rax
   24599:	c6 00 1b             	movb   $0x1b,(%rax)
   2459c:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   245a0:	0f 84 10 17 00 00    	je     25cb6 <__find_arguments+0x1c61>
			else
#endif
				ADDTYPE_CHECK(T_INT);
   245a6:	8b 45 a0             	mov    -0x60(%rbp),%eax
   245a9:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   245ac:	7c 16                	jl     245c4 <__find_arguments+0x56f>
   245ae:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   245b2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   245b6:	48 89 d6             	mov    %rdx,%rsi
   245b9:	48 89 c7             	mov    %rax,%rdi
   245bc:	e8 66 17 00 00       	callq  25d27 <__grow_type_table>
   245c1:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   245c4:	8b 45 bc             	mov    -0x44(%rbp),%eax
   245c7:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   245ca:	7e 06                	jle    245d2 <__find_arguments+0x57d>
   245cc:	8b 45 bc             	mov    -0x44(%rbp),%eax
   245cf:	89 45 b8             	mov    %eax,-0x48(%rbp)
   245d2:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   245d6:	74 15                	je     245ed <__find_arguments+0x598>
   245d8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   245dc:	8b 45 bc             	mov    -0x44(%rbp),%eax
   245df:	8d 50 01             	lea    0x1(%rax),%edx
   245e2:	89 55 bc             	mov    %edx,-0x44(%rbp)
   245e5:	48 98                	cltq   
   245e7:	48 01 c8             	add    %rcx,%rax
   245ea:	c6 00 04             	movb   $0x4,(%rax)
   245ed:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   245f1:	0f 85 b2 0c 00 00    	jne    252a9 <__find_arguments+0x1254>
   245f7:	e9 d6 16 00 00       	jmpq   25cd2 <__find_arguments+0x1c7d>
			break;
		case 'D':
			flags |= LONGINT;
   245fc:	83 4d b4 10          	orl    $0x10,-0x4c(%rbp)
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			ADDSARG();
   24600:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24603:	25 00 10 00 00       	and    $0x1000,%eax
   24608:	85 c0                	test   %eax,%eax
   2460a:	74 50                	je     2465c <__find_arguments+0x607>
   2460c:	8b 45 a0             	mov    -0x60(%rbp),%eax
   2460f:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24612:	7c 16                	jl     2462a <__find_arguments+0x5d5>
   24614:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24618:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   2461c:	48 89 d6             	mov    %rdx,%rsi
   2461f:	48 89 c7             	mov    %rax,%rdi
   24622:	e8 00 17 00 00       	callq  25d27 <__grow_type_table>
   24627:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   2462a:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2462d:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24630:	7e 06                	jle    24638 <__find_arguments+0x5e3>
   24632:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24635:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24638:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   2463c:	0f 84 7c 02 00 00    	je     248be <__find_arguments+0x869>
   24642:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24646:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24649:	8d 50 01             	lea    0x1(%rax),%edx
   2464c:	89 55 bc             	mov    %edx,-0x44(%rbp)
   2464f:	48 98                	cltq   
   24651:	48 01 c8             	add    %rcx,%rax
   24654:	c6 00 16             	movb   $0x16,(%rax)
   24657:	e9 62 02 00 00       	jmpq   248be <__find_arguments+0x869>
   2465c:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   2465f:	25 00 02 00 00       	and    $0x200,%eax
   24664:	85 c0                	test   %eax,%eax
   24666:	74 50                	je     246b8 <__find_arguments+0x663>
   24668:	8b 45 a0             	mov    -0x60(%rbp),%eax
   2466b:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   2466e:	7c 16                	jl     24686 <__find_arguments+0x631>
   24670:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24674:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24678:	48 89 d6             	mov    %rdx,%rsi
   2467b:	48 89 c7             	mov    %rax,%rdi
   2467e:	e8 a4 16 00 00       	callq  25d27 <__grow_type_table>
   24683:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24686:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24689:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   2468c:	7e 06                	jle    24694 <__find_arguments+0x63f>
   2468e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24691:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24694:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24698:	0f 84 20 02 00 00    	je     248be <__find_arguments+0x869>
   2469e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   246a2:	8b 45 bc             	mov    -0x44(%rbp),%eax
   246a5:	8d 50 01             	lea    0x1(%rax),%edx
   246a8:	89 55 bc             	mov    %edx,-0x44(%rbp)
   246ab:	48 98                	cltq   
   246ad:	48 01 c8             	add    %rcx,%rax
   246b0:	c6 00 11             	movb   $0x11,(%rax)
   246b3:	e9 06 02 00 00       	jmpq   248be <__find_arguments+0x869>
   246b8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   246bb:	25 00 04 00 00       	and    $0x400,%eax
   246c0:	85 c0                	test   %eax,%eax
   246c2:	74 50                	je     24714 <__find_arguments+0x6bf>
   246c4:	8b 45 a0             	mov    -0x60(%rbp),%eax
   246c7:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   246ca:	7c 16                	jl     246e2 <__find_arguments+0x68d>
   246cc:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   246d0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   246d4:	48 89 d6             	mov    %rdx,%rsi
   246d7:	48 89 c7             	mov    %rax,%rdi
   246da:	e8 48 16 00 00       	callq  25d27 <__grow_type_table>
   246df:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   246e2:	8b 45 bc             	mov    -0x44(%rbp),%eax
   246e5:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   246e8:	7e 06                	jle    246f0 <__find_arguments+0x69b>
   246ea:	8b 45 bc             	mov    -0x44(%rbp),%eax
   246ed:	89 45 b8             	mov    %eax,-0x48(%rbp)
   246f0:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   246f4:	0f 84 c4 01 00 00    	je     248be <__find_arguments+0x869>
   246fa:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   246fe:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24701:	8d 50 01             	lea    0x1(%rax),%edx
   24704:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24707:	48 98                	cltq   
   24709:	48 01 c8             	add    %rcx,%rax
   2470c:	c6 00 14             	movb   $0x14,(%rax)
   2470f:	e9 aa 01 00 00       	jmpq   248be <__find_arguments+0x869>
   24714:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24717:	83 e0 20             	and    $0x20,%eax
   2471a:	85 c0                	test   %eax,%eax
   2471c:	74 50                	je     2476e <__find_arguments+0x719>
   2471e:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24721:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24724:	7c 16                	jl     2473c <__find_arguments+0x6e7>
   24726:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   2472a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   2472e:	48 89 d6             	mov    %rdx,%rsi
   24731:	48 89 c7             	mov    %rax,%rdi
   24734:	e8 ee 15 00 00       	callq  25d27 <__grow_type_table>
   24739:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   2473c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2473f:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24742:	7e 06                	jle    2474a <__find_arguments+0x6f5>
   24744:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24747:	89 45 b8             	mov    %eax,-0x48(%rbp)
   2474a:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   2474e:	0f 84 6a 01 00 00    	je     248be <__find_arguments+0x869>
   24754:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24758:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2475b:	8d 50 01             	lea    0x1(%rax),%edx
   2475e:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24761:	48 98                	cltq   
   24763:	48 01 c8             	add    %rcx,%rax
   24766:	c6 00 0a             	movb   $0xa,(%rax)
   24769:	e9 50 01 00 00       	jmpq   248be <__find_arguments+0x869>
   2476e:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24771:	83 e0 10             	and    $0x10,%eax
   24774:	85 c0                	test   %eax,%eax
   24776:	74 50                	je     247c8 <__find_arguments+0x773>
   24778:	8b 45 a0             	mov    -0x60(%rbp),%eax
   2477b:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   2477e:	7c 16                	jl     24796 <__find_arguments+0x741>
   24780:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24784:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24788:	48 89 d6             	mov    %rdx,%rsi
   2478b:	48 89 c7             	mov    %rax,%rdi
   2478e:	e8 94 15 00 00       	callq  25d27 <__grow_type_table>
   24793:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24796:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24799:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   2479c:	7e 06                	jle    247a4 <__find_arguments+0x74f>
   2479e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   247a1:	89 45 b8             	mov    %eax,-0x48(%rbp)
   247a4:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   247a8:	0f 84 10 01 00 00    	je     248be <__find_arguments+0x869>
   247ae:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   247b2:	8b 45 bc             	mov    -0x44(%rbp),%eax
   247b5:	8d 50 01             	lea    0x1(%rax),%edx
   247b8:	89 55 bc             	mov    %edx,-0x44(%rbp)
   247bb:	48 98                	cltq   
   247bd:	48 01 c8             	add    %rcx,%rax
   247c0:	c6 00 07             	movb   $0x7,(%rax)
   247c3:	e9 f6 00 00 00       	jmpq   248be <__find_arguments+0x869>
   247c8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   247cb:	83 e0 40             	and    $0x40,%eax
   247ce:	85 c0                	test   %eax,%eax
   247d0:	74 50                	je     24822 <__find_arguments+0x7cd>
   247d2:	8b 45 a0             	mov    -0x60(%rbp),%eax
   247d5:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   247d8:	7c 16                	jl     247f0 <__find_arguments+0x79b>
   247da:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   247de:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   247e2:	48 89 d6             	mov    %rdx,%rsi
   247e5:	48 89 c7             	mov    %rax,%rdi
   247e8:	e8 3a 15 00 00       	callq  25d27 <__grow_type_table>
   247ed:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   247f0:	8b 45 bc             	mov    -0x44(%rbp),%eax
   247f3:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   247f6:	7e 06                	jle    247fe <__find_arguments+0x7a9>
   247f8:	8b 45 bc             	mov    -0x44(%rbp),%eax
   247fb:	89 45 b8             	mov    %eax,-0x48(%rbp)
   247fe:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24802:	0f 84 b6 00 00 00    	je     248be <__find_arguments+0x869>
   24808:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2480c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2480f:	8d 50 01             	lea    0x1(%rax),%edx
   24812:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24815:	48 98                	cltq   
   24817:	48 01 c8             	add    %rcx,%rax
   2481a:	c6 00 01             	movb   $0x1,(%rax)
   2481d:	e9 9c 00 00 00       	jmpq   248be <__find_arguments+0x869>
   24822:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24825:	25 00 08 00 00       	and    $0x800,%eax
   2482a:	85 c0                	test   %eax,%eax
   2482c:	74 49                	je     24877 <__find_arguments+0x822>
   2482e:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24831:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24834:	7c 16                	jl     2484c <__find_arguments+0x7f7>
   24836:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   2483a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   2483e:	48 89 d6             	mov    %rdx,%rsi
   24841:	48 89 c7             	mov    %rax,%rdi
   24844:	e8 de 14 00 00       	callq  25d27 <__grow_type_table>
   24849:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   2484c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2484f:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24852:	7e 06                	jle    2485a <__find_arguments+0x805>
   24854:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24857:	89 45 b8             	mov    %eax,-0x48(%rbp)
   2485a:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   2485e:	74 5e                	je     248be <__find_arguments+0x869>
   24860:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24864:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24867:	8d 50 01             	lea    0x1(%rax),%edx
   2486a:	89 55 bc             	mov    %edx,-0x44(%rbp)
   2486d:	48 98                	cltq   
   2486f:	48 01 c8             	add    %rcx,%rax
   24872:	c6 00 19             	movb   $0x19,(%rax)
   24875:	eb 47                	jmp    248be <__find_arguments+0x869>
   24877:	8b 45 a0             	mov    -0x60(%rbp),%eax
   2487a:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   2487d:	7c 16                	jl     24895 <__find_arguments+0x840>
   2487f:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24883:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24887:	48 89 d6             	mov    %rdx,%rsi
   2488a:	48 89 c7             	mov    %rax,%rdi
   2488d:	e8 95 14 00 00       	callq  25d27 <__grow_type_table>
   24892:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24895:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24898:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   2489b:	7e 06                	jle    248a3 <__find_arguments+0x84e>
   2489d:	8b 45 bc             	mov    -0x44(%rbp),%eax
   248a0:	89 45 b8             	mov    %eax,-0x48(%rbp)
   248a3:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   248a7:	74 15                	je     248be <__find_arguments+0x869>
   248a9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   248ad:	8b 45 bc             	mov    -0x44(%rbp),%eax
   248b0:	8d 50 01             	lea    0x1(%rax),%edx
   248b3:	89 55 bc             	mov    %edx,-0x44(%rbp)
   248b6:	48 98                	cltq   
   248b8:	48 01 c8             	add    %rcx,%rax
   248bb:	c6 00 04             	movb   $0x4,(%rax)
   248be:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   248c2:	0f 85 e7 09 00 00    	jne    252af <__find_arguments+0x125a>
   248c8:	e9 05 14 00 00       	jmpq   25cd2 <__find_arguments+0x1c7d>
		case 'E':
		case 'f':
		case 'F':
		case 'g':
		case 'G':
			if (flags & LONGDBL)
   248cd:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   248d0:	83 e0 08             	and    $0x8,%eax
   248d3:	85 c0                	test   %eax,%eax
   248d5:	74 47                	je     2491e <__find_arguments+0x8c9>
				ADDTYPE_CHECK(T_LONG_DOUBLE);
   248d7:	8b 45 a0             	mov    -0x60(%rbp),%eax
   248da:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   248dd:	7c 16                	jl     248f5 <__find_arguments+0x8a0>
   248df:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   248e3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   248e7:	48 89 d6             	mov    %rdx,%rsi
   248ea:	48 89 c7             	mov    %rax,%rdi
   248ed:	e8 35 14 00 00       	callq  25d27 <__grow_type_table>
   248f2:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   248f5:	8b 45 bc             	mov    -0x44(%rbp),%eax
   248f8:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   248fb:	7e 06                	jle    24903 <__find_arguments+0x8ae>
   248fd:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24900:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24903:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24907:	74 15                	je     2491e <__find_arguments+0x8c9>
   24909:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2490d:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24910:	8d 50 01             	lea    0x1(%rax),%edx
   24913:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24916:	48 98                	cltq   
   24918:	48 01 c8             	add    %rcx,%rax
   2491b:	c6 00 0e             	movb   $0xe,(%rax)
   2491e:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24922:	0f 84 91 13 00 00    	je     25cb9 <__find_arguments+0x1c64>
			else
				ADDTYPE_CHECK(T_DOUBLE);
   24928:	8b 45 a0             	mov    -0x60(%rbp),%eax
   2492b:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   2492e:	7c 16                	jl     24946 <__find_arguments+0x8f1>
   24930:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24934:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24938:	48 89 d6             	mov    %rdx,%rsi
   2493b:	48 89 c7             	mov    %rax,%rdi
   2493e:	e8 e4 13 00 00       	callq  25d27 <__grow_type_table>
   24943:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24946:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24949:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   2494c:	7e 06                	jle    24954 <__find_arguments+0x8ff>
   2494e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24951:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24954:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24958:	74 15                	je     2496f <__find_arguments+0x91a>
   2495a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2495e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24961:	8d 50 01             	lea    0x1(%rax),%edx
   24964:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24967:	48 98                	cltq   
   24969:	48 01 c8             	add    %rcx,%rax
   2496c:	c6 00 0d             	movb   $0xd,(%rax)
   2496f:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24973:	0f 85 3c 09 00 00    	jne    252b5 <__find_arguments+0x1260>
   24979:	e9 54 13 00 00       	jmpq   25cd2 <__find_arguments+0x1c7d>
			break;
#endif /* FLOATING_POINT */
		case 'n':
			if (flags & LLONGINT)
   2497e:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24981:	83 e0 20             	and    $0x20,%eax
   24984:	85 c0                	test   %eax,%eax
   24986:	74 47                	je     249cf <__find_arguments+0x97a>
				ADDTYPE_CHECK(TP_LLONG);
   24988:	8b 45 a0             	mov    -0x60(%rbp),%eax
   2498b:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   2498e:	7c 16                	jl     249a6 <__find_arguments+0x951>
   24990:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24994:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24998:	48 89 d6             	mov    %rdx,%rsi
   2499b:	48 89 c7             	mov    %rax,%rdi
   2499e:	e8 84 13 00 00       	callq  25d27 <__grow_type_table>
   249a3:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   249a6:	8b 45 bc             	mov    -0x44(%rbp),%eax
   249a9:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   249ac:	7e 06                	jle    249b4 <__find_arguments+0x95f>
   249ae:	8b 45 bc             	mov    -0x44(%rbp),%eax
   249b1:	89 45 b8             	mov    %eax,-0x48(%rbp)
   249b4:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   249b8:	74 15                	je     249cf <__find_arguments+0x97a>
   249ba:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   249be:	8b 45 bc             	mov    -0x44(%rbp),%eax
   249c1:	8d 50 01             	lea    0x1(%rax),%edx
   249c4:	89 55 bc             	mov    %edx,-0x44(%rbp)
   249c7:	48 98                	cltq   
   249c9:	48 01 c8             	add    %rcx,%rax
   249cc:	c6 00 0c             	movb   $0xc,(%rax)
   249cf:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   249d3:	0f 84 e3 12 00 00    	je     25cbc <__find_arguments+0x1c67>
			else if (flags & LONGINT)
   249d9:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   249dc:	83 e0 10             	and    $0x10,%eax
   249df:	85 c0                	test   %eax,%eax
   249e1:	74 47                	je     24a2a <__find_arguments+0x9d5>
				ADDTYPE_CHECK(TP_LONG);
   249e3:	8b 45 a0             	mov    -0x60(%rbp),%eax
   249e6:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   249e9:	7c 16                	jl     24a01 <__find_arguments+0x9ac>
   249eb:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   249ef:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   249f3:	48 89 d6             	mov    %rdx,%rsi
   249f6:	48 89 c7             	mov    %rax,%rdi
   249f9:	e8 29 13 00 00       	callq  25d27 <__grow_type_table>
   249fe:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24a01:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24a04:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24a07:	7e 06                	jle    24a0f <__find_arguments+0x9ba>
   24a09:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24a0c:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24a0f:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24a13:	74 15                	je     24a2a <__find_arguments+0x9d5>
   24a15:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24a19:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24a1c:	8d 50 01             	lea    0x1(%rax),%edx
   24a1f:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24a22:	48 98                	cltq   
   24a24:	48 01 c8             	add    %rcx,%rax
   24a27:	c6 00 09             	movb   $0x9,(%rax)
   24a2a:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24a2e:	0f 84 8b 12 00 00    	je     25cbf <__find_arguments+0x1c6a>
			else if (flags & SHORTINT)
   24a34:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24a37:	83 e0 40             	and    $0x40,%eax
   24a3a:	85 c0                	test   %eax,%eax
   24a3c:	74 47                	je     24a85 <__find_arguments+0xa30>
				ADDTYPE_CHECK(TP_SHORT);
   24a3e:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24a41:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24a44:	7c 16                	jl     24a5c <__find_arguments+0xa07>
   24a46:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24a4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24a4e:	48 89 d6             	mov    %rdx,%rsi
   24a51:	48 89 c7             	mov    %rax,%rdi
   24a54:	e8 ce 12 00 00       	callq  25d27 <__grow_type_table>
   24a59:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24a5c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24a5f:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24a62:	7e 06                	jle    24a6a <__find_arguments+0xa15>
   24a64:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24a67:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24a6a:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24a6e:	74 15                	je     24a85 <__find_arguments+0xa30>
   24a70:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24a74:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24a77:	8d 50 01             	lea    0x1(%rax),%edx
   24a7a:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24a7d:	48 98                	cltq   
   24a7f:	48 01 c8             	add    %rcx,%rax
   24a82:	c6 00 03             	movb   $0x3,(%rax)
   24a85:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24a89:	0f 84 33 12 00 00    	je     25cc2 <__find_arguments+0x1c6d>
			else if (flags & PTRINT)
   24a8f:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24a92:	25 00 02 00 00       	and    $0x200,%eax
   24a97:	85 c0                	test   %eax,%eax
   24a99:	74 47                	je     24ae2 <__find_arguments+0xa8d>
				ADDTYPE_CHECK(TP_PTRINT);
   24a9b:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24a9e:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24aa1:	7c 16                	jl     24ab9 <__find_arguments+0xa64>
   24aa3:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24aa7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24aab:	48 89 d6             	mov    %rdx,%rsi
   24aae:	48 89 c7             	mov    %rax,%rdi
   24ab1:	e8 71 12 00 00       	callq  25d27 <__grow_type_table>
   24ab6:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24ab9:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24abc:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24abf:	7e 06                	jle    24ac7 <__find_arguments+0xa72>
   24ac1:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24ac4:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24ac7:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24acb:	74 15                	je     24ae2 <__find_arguments+0xa8d>
   24acd:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24ad1:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24ad4:	8d 50 01             	lea    0x1(%rax),%edx
   24ad7:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24ada:	48 98                	cltq   
   24adc:	48 01 c8             	add    %rcx,%rax
   24adf:	c6 00 12             	movb   $0x12,(%rax)
   24ae2:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24ae6:	0f 84 d9 11 00 00    	je     25cc5 <__find_arguments+0x1c70>
			else if (flags & SIZEINT)
   24aec:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24aef:	25 00 04 00 00       	and    $0x400,%eax
   24af4:	85 c0                	test   %eax,%eax
   24af6:	74 47                	je     24b3f <__find_arguments+0xaea>
				ADDTYPE_CHECK(TP_SSIZEINT);
   24af8:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24afb:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24afe:	7c 16                	jl     24b16 <__find_arguments+0xac1>
   24b00:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24b04:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24b08:	48 89 d6             	mov    %rdx,%rsi
   24b0b:	48 89 c7             	mov    %rax,%rdi
   24b0e:	e8 14 12 00 00       	callq  25d27 <__grow_type_table>
   24b13:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24b16:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24b19:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24b1c:	7e 06                	jle    24b24 <__find_arguments+0xacf>
   24b1e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24b21:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24b24:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24b28:	74 15                	je     24b3f <__find_arguments+0xaea>
   24b2a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24b2e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24b31:	8d 50 01             	lea    0x1(%rax),%edx
   24b34:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24b37:	48 98                	cltq   
   24b39:	48 01 c8             	add    %rcx,%rax
   24b3c:	c6 00 15             	movb   $0x15,(%rax)
   24b3f:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24b43:	0f 84 7f 11 00 00    	je     25cc8 <__find_arguments+0x1c73>
			else if (flags & MAXINT)
   24b49:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24b4c:	25 00 10 00 00       	and    $0x1000,%eax
   24b51:	85 c0                	test   %eax,%eax
   24b53:	74 47                	je     24b9c <__find_arguments+0xb47>
				ADDTYPE_CHECK(TP_MAXINT);
   24b55:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24b58:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24b5b:	7c 16                	jl     24b73 <__find_arguments+0xb1e>
   24b5d:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24b61:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24b65:	48 89 d6             	mov    %rdx,%rsi
   24b68:	48 89 c7             	mov    %rax,%rdi
   24b6b:	e8 b7 11 00 00       	callq  25d27 <__grow_type_table>
   24b70:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24b73:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24b76:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24b79:	7e 06                	jle    24b81 <__find_arguments+0xb2c>
   24b7b:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24b7e:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24b81:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24b85:	74 15                	je     24b9c <__find_arguments+0xb47>
   24b87:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24b8b:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24b8e:	8d 50 01             	lea    0x1(%rax),%edx
   24b91:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24b94:	48 98                	cltq   
   24b96:	48 01 c8             	add    %rcx,%rax
   24b99:	c6 00 18             	movb   $0x18,(%rax)
   24b9c:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24ba0:	0f 84 25 11 00 00    	je     25ccb <__find_arguments+0x1c76>
			else
				ADDTYPE_CHECK(TP_INT);
   24ba6:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24ba9:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24bac:	7c 16                	jl     24bc4 <__find_arguments+0xb6f>
   24bae:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24bb2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24bb6:	48 89 d6             	mov    %rdx,%rsi
   24bb9:	48 89 c7             	mov    %rax,%rdi
   24bbc:	e8 66 11 00 00       	callq  25d27 <__grow_type_table>
   24bc1:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24bc4:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24bc7:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24bca:	7e 06                	jle    24bd2 <__find_arguments+0xb7d>
   24bcc:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24bcf:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24bd2:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24bd6:	74 15                	je     24bed <__find_arguments+0xb98>
   24bd8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24bdc:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24bdf:	8d 50 01             	lea    0x1(%rax),%edx
   24be2:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24be5:	48 98                	cltq   
   24be7:	48 01 c8             	add    %rcx,%rax
   24bea:	c6 00 06             	movb   $0x6,(%rax)
   24bed:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24bf1:	0f 85 c4 06 00 00    	jne    252bb <__find_arguments+0x1266>
   24bf7:	e9 d6 10 00 00       	jmpq   25cd2 <__find_arguments+0x1c7d>
			continue;	/* no output */
		case 'O':
			flags |= LONGINT;
   24bfc:	83 4d b4 10          	orl    $0x10,-0x4c(%rbp)
			/*FALLTHROUGH*/
		case 'o':
			ADDUARG();
   24c00:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24c03:	25 00 10 00 00       	and    $0x1000,%eax
   24c08:	85 c0                	test   %eax,%eax
   24c0a:	74 50                	je     24c5c <__find_arguments+0xc07>
   24c0c:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24c0f:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24c12:	7c 16                	jl     24c2a <__find_arguments+0xbd5>
   24c14:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24c18:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24c1c:	48 89 d6             	mov    %rdx,%rsi
   24c1f:	48 89 c7             	mov    %rax,%rdi
   24c22:	e8 00 11 00 00       	callq  25d27 <__grow_type_table>
   24c27:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24c2a:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24c2d:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24c30:	7e 06                	jle    24c38 <__find_arguments+0xbe3>
   24c32:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24c35:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24c38:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24c3c:	0f 84 7c 02 00 00    	je     24ebe <__find_arguments+0xe69>
   24c42:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24c46:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24c49:	8d 50 01             	lea    0x1(%rax),%edx
   24c4c:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24c4f:	48 98                	cltq   
   24c51:	48 01 c8             	add    %rcx,%rax
   24c54:	c6 00 17             	movb   $0x17,(%rax)
   24c57:	e9 62 02 00 00       	jmpq   24ebe <__find_arguments+0xe69>
   24c5c:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24c5f:	25 00 02 00 00       	and    $0x200,%eax
   24c64:	85 c0                	test   %eax,%eax
   24c66:	74 50                	je     24cb8 <__find_arguments+0xc63>
   24c68:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24c6b:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24c6e:	7c 16                	jl     24c86 <__find_arguments+0xc31>
   24c70:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24c74:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24c78:	48 89 d6             	mov    %rdx,%rsi
   24c7b:	48 89 c7             	mov    %rax,%rdi
   24c7e:	e8 a4 10 00 00       	callq  25d27 <__grow_type_table>
   24c83:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24c86:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24c89:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24c8c:	7e 06                	jle    24c94 <__find_arguments+0xc3f>
   24c8e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24c91:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24c94:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24c98:	0f 84 20 02 00 00    	je     24ebe <__find_arguments+0xe69>
   24c9e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24ca2:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24ca5:	8d 50 01             	lea    0x1(%rax),%edx
   24ca8:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24cab:	48 98                	cltq   
   24cad:	48 01 c8             	add    %rcx,%rax
   24cb0:	c6 00 11             	movb   $0x11,(%rax)
   24cb3:	e9 06 02 00 00       	jmpq   24ebe <__find_arguments+0xe69>
   24cb8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24cbb:	25 00 04 00 00       	and    $0x400,%eax
   24cc0:	85 c0                	test   %eax,%eax
   24cc2:	74 50                	je     24d14 <__find_arguments+0xcbf>
   24cc4:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24cc7:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24cca:	7c 16                	jl     24ce2 <__find_arguments+0xc8d>
   24ccc:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24cd0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24cd4:	48 89 d6             	mov    %rdx,%rsi
   24cd7:	48 89 c7             	mov    %rax,%rdi
   24cda:	e8 48 10 00 00       	callq  25d27 <__grow_type_table>
   24cdf:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24ce2:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24ce5:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24ce8:	7e 06                	jle    24cf0 <__find_arguments+0xc9b>
   24cea:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24ced:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24cf0:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24cf4:	0f 84 c4 01 00 00    	je     24ebe <__find_arguments+0xe69>
   24cfa:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24cfe:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24d01:	8d 50 01             	lea    0x1(%rax),%edx
   24d04:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24d07:	48 98                	cltq   
   24d09:	48 01 c8             	add    %rcx,%rax
   24d0c:	c6 00 13             	movb   $0x13,(%rax)
   24d0f:	e9 aa 01 00 00       	jmpq   24ebe <__find_arguments+0xe69>
   24d14:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24d17:	83 e0 20             	and    $0x20,%eax
   24d1a:	85 c0                	test   %eax,%eax
   24d1c:	74 50                	je     24d6e <__find_arguments+0xd19>
   24d1e:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24d21:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24d24:	7c 16                	jl     24d3c <__find_arguments+0xce7>
   24d26:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24d2a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24d2e:	48 89 d6             	mov    %rdx,%rsi
   24d31:	48 89 c7             	mov    %rax,%rdi
   24d34:	e8 ee 0f 00 00       	callq  25d27 <__grow_type_table>
   24d39:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24d3c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24d3f:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24d42:	7e 06                	jle    24d4a <__find_arguments+0xcf5>
   24d44:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24d47:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24d4a:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24d4e:	0f 84 6a 01 00 00    	je     24ebe <__find_arguments+0xe69>
   24d54:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24d58:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24d5b:	8d 50 01             	lea    0x1(%rax),%edx
   24d5e:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24d61:	48 98                	cltq   
   24d63:	48 01 c8             	add    %rcx,%rax
   24d66:	c6 00 0b             	movb   $0xb,(%rax)
   24d69:	e9 50 01 00 00       	jmpq   24ebe <__find_arguments+0xe69>
   24d6e:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24d71:	83 e0 10             	and    $0x10,%eax
   24d74:	85 c0                	test   %eax,%eax
   24d76:	74 50                	je     24dc8 <__find_arguments+0xd73>
   24d78:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24d7b:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24d7e:	7c 16                	jl     24d96 <__find_arguments+0xd41>
   24d80:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24d84:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24d88:	48 89 d6             	mov    %rdx,%rsi
   24d8b:	48 89 c7             	mov    %rax,%rdi
   24d8e:	e8 94 0f 00 00       	callq  25d27 <__grow_type_table>
   24d93:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24d96:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24d99:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24d9c:	7e 06                	jle    24da4 <__find_arguments+0xd4f>
   24d9e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24da1:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24da4:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24da8:	0f 84 10 01 00 00    	je     24ebe <__find_arguments+0xe69>
   24dae:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24db2:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24db5:	8d 50 01             	lea    0x1(%rax),%edx
   24db8:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24dbb:	48 98                	cltq   
   24dbd:	48 01 c8             	add    %rcx,%rax
   24dc0:	c6 00 08             	movb   $0x8,(%rax)
   24dc3:	e9 f6 00 00 00       	jmpq   24ebe <__find_arguments+0xe69>
   24dc8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24dcb:	83 e0 40             	and    $0x40,%eax
   24dce:	85 c0                	test   %eax,%eax
   24dd0:	74 50                	je     24e22 <__find_arguments+0xdcd>
   24dd2:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24dd5:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24dd8:	7c 16                	jl     24df0 <__find_arguments+0xd9b>
   24dda:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24dde:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24de2:	48 89 d6             	mov    %rdx,%rsi
   24de5:	48 89 c7             	mov    %rax,%rdi
   24de8:	e8 3a 0f 00 00       	callq  25d27 <__grow_type_table>
   24ded:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24df0:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24df3:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24df6:	7e 06                	jle    24dfe <__find_arguments+0xda9>
   24df8:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24dfb:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24dfe:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24e02:	0f 84 b6 00 00 00    	je     24ebe <__find_arguments+0xe69>
   24e08:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24e0c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24e0f:	8d 50 01             	lea    0x1(%rax),%edx
   24e12:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24e15:	48 98                	cltq   
   24e17:	48 01 c8             	add    %rcx,%rax
   24e1a:	c6 00 02             	movb   $0x2,(%rax)
   24e1d:	e9 9c 00 00 00       	jmpq   24ebe <__find_arguments+0xe69>
   24e22:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24e25:	25 00 08 00 00       	and    $0x800,%eax
   24e2a:	85 c0                	test   %eax,%eax
   24e2c:	74 49                	je     24e77 <__find_arguments+0xe22>
   24e2e:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24e31:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24e34:	7c 16                	jl     24e4c <__find_arguments+0xdf7>
   24e36:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24e3a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24e3e:	48 89 d6             	mov    %rdx,%rsi
   24e41:	48 89 c7             	mov    %rax,%rdi
   24e44:	e8 de 0e 00 00       	callq  25d27 <__grow_type_table>
   24e49:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24e4c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24e4f:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24e52:	7e 06                	jle    24e5a <__find_arguments+0xe05>
   24e54:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24e57:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24e5a:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24e5e:	74 5e                	je     24ebe <__find_arguments+0xe69>
   24e60:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24e64:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24e67:	8d 50 01             	lea    0x1(%rax),%edx
   24e6a:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24e6d:	48 98                	cltq   
   24e6f:	48 01 c8             	add    %rcx,%rax
   24e72:	c6 00 1a             	movb   $0x1a,(%rax)
   24e75:	eb 47                	jmp    24ebe <__find_arguments+0xe69>
   24e77:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24e7a:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24e7d:	7c 16                	jl     24e95 <__find_arguments+0xe40>
   24e7f:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24e83:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24e87:	48 89 d6             	mov    %rdx,%rsi
   24e8a:	48 89 c7             	mov    %rax,%rdi
   24e8d:	e8 95 0e 00 00       	callq  25d27 <__grow_type_table>
   24e92:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24e95:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24e98:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24e9b:	7e 06                	jle    24ea3 <__find_arguments+0xe4e>
   24e9d:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24ea0:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24ea3:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24ea7:	74 15                	je     24ebe <__find_arguments+0xe69>
   24ea9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24ead:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24eb0:	8d 50 01             	lea    0x1(%rax),%edx
   24eb3:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24eb6:	48 98                	cltq   
   24eb8:	48 01 c8             	add    %rcx,%rax
   24ebb:	c6 00 05             	movb   $0x5,(%rax)
   24ebe:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24ec2:	0f 85 f9 03 00 00    	jne    252c1 <__find_arguments+0x126c>
   24ec8:	e9 05 0e 00 00       	jmpq   25cd2 <__find_arguments+0x1c7d>
			break;
		case 'p':
			ADDTYPE_CHECK(TP_VOID);
   24ecd:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24ed0:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24ed3:	7c 16                	jl     24eeb <__find_arguments+0xe96>
   24ed5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24ed9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24edd:	48 89 d6             	mov    %rdx,%rsi
   24ee0:	48 89 c7             	mov    %rax,%rdi
   24ee3:	e8 3f 0e 00 00       	callq  25d27 <__grow_type_table>
   24ee8:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24eeb:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24eee:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24ef1:	7e 06                	jle    24ef9 <__find_arguments+0xea4>
   24ef3:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24ef6:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24ef9:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24efd:	74 15                	je     24f14 <__find_arguments+0xebf>
   24eff:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24f03:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24f06:	8d 50 01             	lea    0x1(%rax),%edx
   24f09:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24f0c:	48 98                	cltq   
   24f0e:	48 01 c8             	add    %rcx,%rax
   24f11:	c6 00 10             	movb   $0x10,(%rax)
   24f14:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24f18:	0f 85 a9 03 00 00    	jne    252c7 <__find_arguments+0x1272>
   24f1e:	e9 af 0d 00 00       	jmpq   25cd2 <__find_arguments+0x1c7d>
			break;
		case 's':
#ifdef PRINTF_WIDE_CHAR
			if (flags & LONGINT)
   24f23:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24f26:	83 e0 10             	and    $0x10,%eax
   24f29:	85 c0                	test   %eax,%eax
   24f2b:	74 47                	je     24f74 <__find_arguments+0xf1f>
				ADDTYPE_CHECK(TP_WCHAR);
   24f2d:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24f30:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24f33:	7c 16                	jl     24f4b <__find_arguments+0xef6>
   24f35:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24f39:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24f3d:	48 89 d6             	mov    %rdx,%rsi
   24f40:	48 89 c7             	mov    %rax,%rdi
   24f43:	e8 df 0d 00 00       	callq  25d27 <__grow_type_table>
   24f48:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24f4b:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24f4e:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24f51:	7e 06                	jle    24f59 <__find_arguments+0xf04>
   24f53:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24f56:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24f59:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24f5d:	74 15                	je     24f74 <__find_arguments+0xf1f>
   24f5f:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24f63:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24f66:	8d 50 01             	lea    0x1(%rax),%edx
   24f69:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24f6c:	48 98                	cltq   
   24f6e:	48 01 c8             	add    %rcx,%rax
   24f71:	c6 00 1c             	movb   $0x1c,(%rax)
   24f74:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24f78:	0f 84 50 0d 00 00    	je     25cce <__find_arguments+0x1c79>
			else
#endif
				ADDTYPE_CHECK(TP_CHAR);
   24f7e:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24f81:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24f84:	7c 16                	jl     24f9c <__find_arguments+0xf47>
   24f86:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24f8a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24f8e:	48 89 d6             	mov    %rdx,%rsi
   24f91:	48 89 c7             	mov    %rax,%rdi
   24f94:	e8 8e 0d 00 00       	callq  25d27 <__grow_type_table>
   24f99:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   24f9c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24f9f:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   24fa2:	7e 06                	jle    24faa <__find_arguments+0xf55>
   24fa4:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24fa7:	89 45 b8             	mov    %eax,-0x48(%rbp)
   24faa:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24fae:	74 15                	je     24fc5 <__find_arguments+0xf70>
   24fb0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   24fb4:	8b 45 bc             	mov    -0x44(%rbp),%eax
   24fb7:	8d 50 01             	lea    0x1(%rax),%edx
   24fba:	89 55 bc             	mov    %edx,-0x44(%rbp)
   24fbd:	48 98                	cltq   
   24fbf:	48 01 c8             	add    %rcx,%rax
   24fc2:	c6 00 0f             	movb   $0xf,(%rax)
   24fc5:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   24fc9:	0f 85 fe 02 00 00    	jne    252cd <__find_arguments+0x1278>
   24fcf:	e9 fe 0c 00 00       	jmpq   25cd2 <__find_arguments+0x1c7d>
			break;
		case 'U':
			flags |= LONGINT;
   24fd4:	83 4d b4 10          	orl    $0x10,-0x4c(%rbp)
			/*FALLTHROUGH*/
		case 'u':
		case 'X':
		case 'x':
			ADDUARG();
   24fd8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   24fdb:	25 00 10 00 00       	and    $0x1000,%eax
   24fe0:	85 c0                	test   %eax,%eax
   24fe2:	74 50                	je     25034 <__find_arguments+0xfdf>
   24fe4:	8b 45 a0             	mov    -0x60(%rbp),%eax
   24fe7:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   24fea:	7c 16                	jl     25002 <__find_arguments+0xfad>
   24fec:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   24ff0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   24ff4:	48 89 d6             	mov    %rdx,%rsi
   24ff7:	48 89 c7             	mov    %rax,%rdi
   24ffa:	e8 28 0d 00 00       	callq  25d27 <__grow_type_table>
   24fff:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   25002:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25005:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   25008:	7e 06                	jle    25010 <__find_arguments+0xfbb>
   2500a:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2500d:	89 45 b8             	mov    %eax,-0x48(%rbp)
   25010:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   25014:	0f 84 7c 02 00 00    	je     25296 <__find_arguments+0x1241>
   2501a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2501e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25021:	8d 50 01             	lea    0x1(%rax),%edx
   25024:	89 55 bc             	mov    %edx,-0x44(%rbp)
   25027:	48 98                	cltq   
   25029:	48 01 c8             	add    %rcx,%rax
   2502c:	c6 00 17             	movb   $0x17,(%rax)
   2502f:	e9 62 02 00 00       	jmpq   25296 <__find_arguments+0x1241>
   25034:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   25037:	25 00 02 00 00       	and    $0x200,%eax
   2503c:	85 c0                	test   %eax,%eax
   2503e:	74 50                	je     25090 <__find_arguments+0x103b>
   25040:	8b 45 a0             	mov    -0x60(%rbp),%eax
   25043:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   25046:	7c 16                	jl     2505e <__find_arguments+0x1009>
   25048:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   2504c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   25050:	48 89 d6             	mov    %rdx,%rsi
   25053:	48 89 c7             	mov    %rax,%rdi
   25056:	e8 cc 0c 00 00       	callq  25d27 <__grow_type_table>
   2505b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   2505e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25061:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   25064:	7e 06                	jle    2506c <__find_arguments+0x1017>
   25066:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25069:	89 45 b8             	mov    %eax,-0x48(%rbp)
   2506c:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   25070:	0f 84 20 02 00 00    	je     25296 <__find_arguments+0x1241>
   25076:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2507a:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2507d:	8d 50 01             	lea    0x1(%rax),%edx
   25080:	89 55 bc             	mov    %edx,-0x44(%rbp)
   25083:	48 98                	cltq   
   25085:	48 01 c8             	add    %rcx,%rax
   25088:	c6 00 11             	movb   $0x11,(%rax)
   2508b:	e9 06 02 00 00       	jmpq   25296 <__find_arguments+0x1241>
   25090:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   25093:	25 00 04 00 00       	and    $0x400,%eax
   25098:	85 c0                	test   %eax,%eax
   2509a:	74 50                	je     250ec <__find_arguments+0x1097>
   2509c:	8b 45 a0             	mov    -0x60(%rbp),%eax
   2509f:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   250a2:	7c 16                	jl     250ba <__find_arguments+0x1065>
   250a4:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   250a8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   250ac:	48 89 d6             	mov    %rdx,%rsi
   250af:	48 89 c7             	mov    %rax,%rdi
   250b2:	e8 70 0c 00 00       	callq  25d27 <__grow_type_table>
   250b7:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   250ba:	8b 45 bc             	mov    -0x44(%rbp),%eax
   250bd:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   250c0:	7e 06                	jle    250c8 <__find_arguments+0x1073>
   250c2:	8b 45 bc             	mov    -0x44(%rbp),%eax
   250c5:	89 45 b8             	mov    %eax,-0x48(%rbp)
   250c8:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   250cc:	0f 84 c4 01 00 00    	je     25296 <__find_arguments+0x1241>
   250d2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   250d6:	8b 45 bc             	mov    -0x44(%rbp),%eax
   250d9:	8d 50 01             	lea    0x1(%rax),%edx
   250dc:	89 55 bc             	mov    %edx,-0x44(%rbp)
   250df:	48 98                	cltq   
   250e1:	48 01 c8             	add    %rcx,%rax
   250e4:	c6 00 13             	movb   $0x13,(%rax)
   250e7:	e9 aa 01 00 00       	jmpq   25296 <__find_arguments+0x1241>
   250ec:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   250ef:	83 e0 20             	and    $0x20,%eax
   250f2:	85 c0                	test   %eax,%eax
   250f4:	74 50                	je     25146 <__find_arguments+0x10f1>
   250f6:	8b 45 a0             	mov    -0x60(%rbp),%eax
   250f9:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   250fc:	7c 16                	jl     25114 <__find_arguments+0x10bf>
   250fe:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   25102:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   25106:	48 89 d6             	mov    %rdx,%rsi
   25109:	48 89 c7             	mov    %rax,%rdi
   2510c:	e8 16 0c 00 00       	callq  25d27 <__grow_type_table>
   25111:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   25114:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25117:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   2511a:	7e 06                	jle    25122 <__find_arguments+0x10cd>
   2511c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2511f:	89 45 b8             	mov    %eax,-0x48(%rbp)
   25122:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   25126:	0f 84 6a 01 00 00    	je     25296 <__find_arguments+0x1241>
   2512c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   25130:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25133:	8d 50 01             	lea    0x1(%rax),%edx
   25136:	89 55 bc             	mov    %edx,-0x44(%rbp)
   25139:	48 98                	cltq   
   2513b:	48 01 c8             	add    %rcx,%rax
   2513e:	c6 00 0b             	movb   $0xb,(%rax)
   25141:	e9 50 01 00 00       	jmpq   25296 <__find_arguments+0x1241>
   25146:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   25149:	83 e0 10             	and    $0x10,%eax
   2514c:	85 c0                	test   %eax,%eax
   2514e:	74 50                	je     251a0 <__find_arguments+0x114b>
   25150:	8b 45 a0             	mov    -0x60(%rbp),%eax
   25153:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   25156:	7c 16                	jl     2516e <__find_arguments+0x1119>
   25158:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   2515c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   25160:	48 89 d6             	mov    %rdx,%rsi
   25163:	48 89 c7             	mov    %rax,%rdi
   25166:	e8 bc 0b 00 00       	callq  25d27 <__grow_type_table>
   2516b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   2516e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25171:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   25174:	7e 06                	jle    2517c <__find_arguments+0x1127>
   25176:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25179:	89 45 b8             	mov    %eax,-0x48(%rbp)
   2517c:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   25180:	0f 84 10 01 00 00    	je     25296 <__find_arguments+0x1241>
   25186:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2518a:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2518d:	8d 50 01             	lea    0x1(%rax),%edx
   25190:	89 55 bc             	mov    %edx,-0x44(%rbp)
   25193:	48 98                	cltq   
   25195:	48 01 c8             	add    %rcx,%rax
   25198:	c6 00 08             	movb   $0x8,(%rax)
   2519b:	e9 f6 00 00 00       	jmpq   25296 <__find_arguments+0x1241>
   251a0:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   251a3:	83 e0 40             	and    $0x40,%eax
   251a6:	85 c0                	test   %eax,%eax
   251a8:	74 50                	je     251fa <__find_arguments+0x11a5>
   251aa:	8b 45 a0             	mov    -0x60(%rbp),%eax
   251ad:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   251b0:	7c 16                	jl     251c8 <__find_arguments+0x1173>
   251b2:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   251b6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   251ba:	48 89 d6             	mov    %rdx,%rsi
   251bd:	48 89 c7             	mov    %rax,%rdi
   251c0:	e8 62 0b 00 00       	callq  25d27 <__grow_type_table>
   251c5:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   251c8:	8b 45 bc             	mov    -0x44(%rbp),%eax
   251cb:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   251ce:	7e 06                	jle    251d6 <__find_arguments+0x1181>
   251d0:	8b 45 bc             	mov    -0x44(%rbp),%eax
   251d3:	89 45 b8             	mov    %eax,-0x48(%rbp)
   251d6:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   251da:	0f 84 b6 00 00 00    	je     25296 <__find_arguments+0x1241>
   251e0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   251e4:	8b 45 bc             	mov    -0x44(%rbp),%eax
   251e7:	8d 50 01             	lea    0x1(%rax),%edx
   251ea:	89 55 bc             	mov    %edx,-0x44(%rbp)
   251ed:	48 98                	cltq   
   251ef:	48 01 c8             	add    %rcx,%rax
   251f2:	c6 00 02             	movb   $0x2,(%rax)
   251f5:	e9 9c 00 00 00       	jmpq   25296 <__find_arguments+0x1241>
   251fa:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   251fd:	25 00 08 00 00       	and    $0x800,%eax
   25202:	85 c0                	test   %eax,%eax
   25204:	74 49                	je     2524f <__find_arguments+0x11fa>
   25206:	8b 45 a0             	mov    -0x60(%rbp),%eax
   25209:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   2520c:	7c 16                	jl     25224 <__find_arguments+0x11cf>
   2520e:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   25212:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   25216:	48 89 d6             	mov    %rdx,%rsi
   25219:	48 89 c7             	mov    %rax,%rdi
   2521c:	e8 06 0b 00 00       	callq  25d27 <__grow_type_table>
   25221:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   25224:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25227:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   2522a:	7e 06                	jle    25232 <__find_arguments+0x11dd>
   2522c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2522f:	89 45 b8             	mov    %eax,-0x48(%rbp)
   25232:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   25236:	74 5e                	je     25296 <__find_arguments+0x1241>
   25238:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   2523c:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2523f:	8d 50 01             	lea    0x1(%rax),%edx
   25242:	89 55 bc             	mov    %edx,-0x44(%rbp)
   25245:	48 98                	cltq   
   25247:	48 01 c8             	add    %rcx,%rax
   2524a:	c6 00 1a             	movb   $0x1a,(%rax)
   2524d:	eb 47                	jmp    25296 <__find_arguments+0x1241>
   2524f:	8b 45 a0             	mov    -0x60(%rbp),%eax
   25252:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   25255:	7c 16                	jl     2526d <__find_arguments+0x1218>
   25257:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
   2525b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   2525f:	48 89 d6             	mov    %rdx,%rsi
   25262:	48 89 c7             	mov    %rax,%rdi
   25265:	e8 bd 0a 00 00       	callq  25d27 <__grow_type_table>
   2526a:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   2526d:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25270:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   25273:	7e 06                	jle    2527b <__find_arguments+0x1226>
   25275:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25278:	89 45 b8             	mov    %eax,-0x48(%rbp)
   2527b:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   2527f:	74 15                	je     25296 <__find_arguments+0x1241>
   25281:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
   25285:	8b 45 bc             	mov    -0x44(%rbp),%eax
   25288:	8d 50 01             	lea    0x1(%rax),%edx
   2528b:	89 55 bc             	mov    %edx,-0x44(%rbp)
   2528e:	48 98                	cltq   
   25290:	48 01 c8             	add    %rcx,%rax
   25293:	c6 00 05             	movb   $0x5,(%rax)
   25296:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
   2529a:	75 37                	jne    252d3 <__find_arguments+0x127e>
   2529c:	e9 31 0a 00 00       	jmpq   25cd2 <__find_arguments+0x1c7d>
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   252a1:	83 7d a8 00          	cmpl   $0x0,-0x58(%rbp)
   252a5:	74 35                	je     252dc <__find_arguments+0x1287>
				goto done;
			break;
   252a7:	eb 2b                	jmp    252d4 <__find_arguments+0x127f>
			break;
   252a9:	90                   	nop
   252aa:	e9 2c ee ff ff       	jmpq   240db <__find_arguments+0x86>
			break;
   252af:	90                   	nop
   252b0:	e9 26 ee ff ff       	jmpq   240db <__find_arguments+0x86>
			break;
   252b5:	90                   	nop
   252b6:	e9 20 ee ff ff       	jmpq   240db <__find_arguments+0x86>
			continue;	/* no output */
   252bb:	90                   	nop
   252bc:	e9 1a ee ff ff       	jmpq   240db <__find_arguments+0x86>
			break;
   252c1:	90                   	nop
   252c2:	e9 14 ee ff ff       	jmpq   240db <__find_arguments+0x86>
			break;
   252c7:	90                   	nop
   252c8:	e9 0e ee ff ff       	jmpq   240db <__find_arguments+0x86>
			break;
   252cd:	90                   	nop
   252ce:	e9 08 ee ff ff       	jmpq   240db <__find_arguments+0x86>
			break;
   252d3:	90                   	nop
		cp = fmt;
   252d4:	e9 02 ee ff ff       	jmpq   240db <__find_arguments+0x86>
			goto done;
   252d9:	90                   	nop
   252da:	eb 01                	jmp    252dd <__find_arguments+0x1288>
				goto done;
   252dc:	90                   	nop
	}
done:
	/*
	 * Build the argument table.
	 */
	if (tablemax >= STATIC_ARG_TBL_SIZE) {
   252dd:	83 7d b8 07          	cmpl   $0x7,-0x48(%rbp)
   252e1:	7e 3f                	jle    25322 <__find_arguments+0x12cd>
		*argtablesiz = sizeof(union arg) * (tablemax + 1);
   252e3:	8b 45 b8             	mov    -0x48(%rbp),%eax
   252e6:	83 c0 01             	add    $0x1,%eax
   252e9:	48 98                	cltq   
   252eb:	48 c1 e0 04          	shl    $0x4,%rax
   252ef:	48 89 c2             	mov    %rax,%rdx
   252f2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   252f6:	48 89 10             	mov    %rdx,(%rax)
		*argtable = (union arg *)malloc(*argtablesiz);
   252f9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
   252fd:	48 8b 00             	mov    (%rax),%rax
   25300:	48 89 c7             	mov    %rax,%rdi
   25303:	e8 1d 5e fe ff       	callq  b125 <dlmalloc>
   25308:	48 89 c2             	mov    %rax,%rdx
   2530b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   2530f:	48 89 10             	mov    %rdx,(%rax)
		if (*argtable == NULL)
   25312:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25316:	48 8b 00             	mov    (%rax),%rax
   25319:	48 85 c0             	test   %rax,%rax
   2531c:	0f 84 af 09 00 00    	je     25cd1 <__find_arguments+0x1c7c>

#if 0
	/* XXX is this required? */
	(*argtable)[0].intarg = 0;
#endif
	for (n = 1; n <= tablemax; n++) {
   25322:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%rbp)
   25329:	e9 5c 09 00 00       	jmpq   25c8a <__find_arguments+0x1c35>
		switch (typetable[n]) {
   2532e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   25332:	8b 45 ac             	mov    -0x54(%rbp),%eax
   25335:	48 98                	cltq   
   25337:	48 01 d0             	add    %rdx,%rax
   2533a:	0f b6 00             	movzbl (%rax),%eax
   2533d:	0f b6 c0             	movzbl %al,%eax
   25340:	83 f8 1c             	cmp    $0x1c,%eax
   25343:	0f 87 3d 09 00 00    	ja     25c86 <__find_arguments+0x1c31>
   25349:	89 c0                	mov    %eax,%eax
   2534b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   25352:	00 
   25353:	48 8d 05 42 b9 00 00 	lea    0xb942(%rip),%rax        # 30c9c <__func__.2393+0xaa3>
   2535a:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   2535d:	48 63 d0             	movslq %eax,%rdx
   25360:	48 8d 05 35 b9 00 00 	lea    0xb935(%rip),%rax        # 30c9c <__func__.2393+0xaa3>
   25367:	48 01 d0             	add    %rdx,%rax
   2536a:	ff e0                	jmpq   *%rax
		case T_CHAR:
		case T_U_CHAR:
		case T_SHORT:
		case T_U_SHORT:
		case T_INT:
			(*argtable)[n].intarg = va_arg(ap, int);
   2536c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25370:	48 8b 00             	mov    (%rax),%rax
   25373:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25376:	48 63 d2             	movslq %edx,%rdx
   25379:	48 c1 e2 04          	shl    $0x4,%rdx
   2537d:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25381:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25385:	8b 00                	mov    (%rax),%eax
   25387:	83 f8 2f             	cmp    $0x2f,%eax
   2538a:	77 24                	ja     253b0 <__find_arguments+0x135b>
   2538c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25390:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25394:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25398:	8b 00                	mov    (%rax),%eax
   2539a:	89 c0                	mov    %eax,%eax
   2539c:	48 01 d0             	add    %rdx,%rax
   2539f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   253a3:	8b 12                	mov    (%rdx),%edx
   253a5:	8d 4a 08             	lea    0x8(%rdx),%ecx
   253a8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   253ac:	89 0a                	mov    %ecx,(%rdx)
   253ae:	eb 14                	jmp    253c4 <__find_arguments+0x136f>
   253b0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   253b4:	48 8b 40 08          	mov    0x8(%rax),%rax
   253b8:	48 8d 48 08          	lea    0x8(%rax),%rcx
   253bc:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   253c0:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   253c4:	8b 00                	mov    (%rax),%eax
   253c6:	89 06                	mov    %eax,(%rsi)
			break;
   253c8:	e9 b9 08 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case TP_SHORT:
			(*argtable)[n].pshortarg = va_arg(ap, short *);
   253cd:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   253d1:	48 8b 00             	mov    (%rax),%rax
   253d4:	8b 55 ac             	mov    -0x54(%rbp),%edx
   253d7:	48 63 d2             	movslq %edx,%rdx
   253da:	48 c1 e2 04          	shl    $0x4,%rdx
   253de:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   253e2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   253e6:	8b 00                	mov    (%rax),%eax
   253e8:	83 f8 2f             	cmp    $0x2f,%eax
   253eb:	77 24                	ja     25411 <__find_arguments+0x13bc>
   253ed:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   253f1:	48 8b 50 10          	mov    0x10(%rax),%rdx
   253f5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   253f9:	8b 00                	mov    (%rax),%eax
   253fb:	89 c0                	mov    %eax,%eax
   253fd:	48 01 d0             	add    %rdx,%rax
   25400:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25404:	8b 12                	mov    (%rdx),%edx
   25406:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25409:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2540d:	89 0a                	mov    %ecx,(%rdx)
   2540f:	eb 14                	jmp    25425 <__find_arguments+0x13d0>
   25411:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25415:	48 8b 40 08          	mov    0x8(%rax),%rax
   25419:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2541d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25421:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25425:	48 8b 00             	mov    (%rax),%rax
   25428:	48 89 06             	mov    %rax,(%rsi)
			break;
   2542b:	e9 56 08 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_U_INT:
			(*argtable)[n].uintarg = va_arg(ap, unsigned int);
   25430:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25434:	48 8b 00             	mov    (%rax),%rax
   25437:	8b 55 ac             	mov    -0x54(%rbp),%edx
   2543a:	48 63 d2             	movslq %edx,%rdx
   2543d:	48 c1 e2 04          	shl    $0x4,%rdx
   25441:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25445:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25449:	8b 00                	mov    (%rax),%eax
   2544b:	83 f8 2f             	cmp    $0x2f,%eax
   2544e:	77 24                	ja     25474 <__find_arguments+0x141f>
   25450:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25454:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25458:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2545c:	8b 00                	mov    (%rax),%eax
   2545e:	89 c0                	mov    %eax,%eax
   25460:	48 01 d0             	add    %rdx,%rax
   25463:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25467:	8b 12                	mov    (%rdx),%edx
   25469:	8d 4a 08             	lea    0x8(%rdx),%ecx
   2546c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25470:	89 0a                	mov    %ecx,(%rdx)
   25472:	eb 14                	jmp    25488 <__find_arguments+0x1433>
   25474:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25478:	48 8b 40 08          	mov    0x8(%rax),%rax
   2547c:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25480:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25484:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25488:	8b 00                	mov    (%rax),%eax
   2548a:	89 06                	mov    %eax,(%rsi)
			break;
   2548c:	e9 f5 07 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case TP_INT:
			(*argtable)[n].pintarg = va_arg(ap, int *);
   25491:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25495:	48 8b 00             	mov    (%rax),%rax
   25498:	8b 55 ac             	mov    -0x54(%rbp),%edx
   2549b:	48 63 d2             	movslq %edx,%rdx
   2549e:	48 c1 e2 04          	shl    $0x4,%rdx
   254a2:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   254a6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   254aa:	8b 00                	mov    (%rax),%eax
   254ac:	83 f8 2f             	cmp    $0x2f,%eax
   254af:	77 24                	ja     254d5 <__find_arguments+0x1480>
   254b1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   254b5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   254b9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   254bd:	8b 00                	mov    (%rax),%eax
   254bf:	89 c0                	mov    %eax,%eax
   254c1:	48 01 d0             	add    %rdx,%rax
   254c4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   254c8:	8b 12                	mov    (%rdx),%edx
   254ca:	8d 4a 08             	lea    0x8(%rdx),%ecx
   254cd:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   254d1:	89 0a                	mov    %ecx,(%rdx)
   254d3:	eb 14                	jmp    254e9 <__find_arguments+0x1494>
   254d5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   254d9:	48 8b 40 08          	mov    0x8(%rax),%rax
   254dd:	48 8d 48 08          	lea    0x8(%rax),%rcx
   254e1:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   254e5:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   254e9:	48 8b 00             	mov    (%rax),%rax
   254ec:	48 89 06             	mov    %rax,(%rsi)
			break;
   254ef:	e9 92 07 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_LONG:
			(*argtable)[n].longarg = va_arg(ap, long);
   254f4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   254f8:	48 8b 00             	mov    (%rax),%rax
   254fb:	8b 55 ac             	mov    -0x54(%rbp),%edx
   254fe:	48 63 d2             	movslq %edx,%rdx
   25501:	48 c1 e2 04          	shl    $0x4,%rdx
   25505:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25509:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2550d:	8b 00                	mov    (%rax),%eax
   2550f:	83 f8 2f             	cmp    $0x2f,%eax
   25512:	77 24                	ja     25538 <__find_arguments+0x14e3>
   25514:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25518:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2551c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25520:	8b 00                	mov    (%rax),%eax
   25522:	89 c0                	mov    %eax,%eax
   25524:	48 01 d0             	add    %rdx,%rax
   25527:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2552b:	8b 12                	mov    (%rdx),%edx
   2552d:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25530:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25534:	89 0a                	mov    %ecx,(%rdx)
   25536:	eb 14                	jmp    2554c <__find_arguments+0x14f7>
   25538:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2553c:	48 8b 40 08          	mov    0x8(%rax),%rax
   25540:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25544:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25548:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2554c:	48 8b 00             	mov    (%rax),%rax
   2554f:	48 89 06             	mov    %rax,(%rsi)
			break;
   25552:	e9 2f 07 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_U_LONG:
			(*argtable)[n].ulongarg = va_arg(ap, unsigned long);
   25557:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   2555b:	48 8b 00             	mov    (%rax),%rax
   2555e:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25561:	48 63 d2             	movslq %edx,%rdx
   25564:	48 c1 e2 04          	shl    $0x4,%rdx
   25568:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   2556c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25570:	8b 00                	mov    (%rax),%eax
   25572:	83 f8 2f             	cmp    $0x2f,%eax
   25575:	77 24                	ja     2559b <__find_arguments+0x1546>
   25577:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2557b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2557f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25583:	8b 00                	mov    (%rax),%eax
   25585:	89 c0                	mov    %eax,%eax
   25587:	48 01 d0             	add    %rdx,%rax
   2558a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2558e:	8b 12                	mov    (%rdx),%edx
   25590:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25593:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25597:	89 0a                	mov    %ecx,(%rdx)
   25599:	eb 14                	jmp    255af <__find_arguments+0x155a>
   2559b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2559f:	48 8b 40 08          	mov    0x8(%rax),%rax
   255a3:	48 8d 48 08          	lea    0x8(%rax),%rcx
   255a7:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   255ab:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   255af:	48 8b 00             	mov    (%rax),%rax
   255b2:	48 89 06             	mov    %rax,(%rsi)
			break;
   255b5:	e9 cc 06 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case TP_LONG:
			(*argtable)[n].plongarg = va_arg(ap, long *);
   255ba:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   255be:	48 8b 00             	mov    (%rax),%rax
   255c1:	8b 55 ac             	mov    -0x54(%rbp),%edx
   255c4:	48 63 d2             	movslq %edx,%rdx
   255c7:	48 c1 e2 04          	shl    $0x4,%rdx
   255cb:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   255cf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   255d3:	8b 00                	mov    (%rax),%eax
   255d5:	83 f8 2f             	cmp    $0x2f,%eax
   255d8:	77 24                	ja     255fe <__find_arguments+0x15a9>
   255da:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   255de:	48 8b 50 10          	mov    0x10(%rax),%rdx
   255e2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   255e6:	8b 00                	mov    (%rax),%eax
   255e8:	89 c0                	mov    %eax,%eax
   255ea:	48 01 d0             	add    %rdx,%rax
   255ed:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   255f1:	8b 12                	mov    (%rdx),%edx
   255f3:	8d 4a 08             	lea    0x8(%rdx),%ecx
   255f6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   255fa:	89 0a                	mov    %ecx,(%rdx)
   255fc:	eb 14                	jmp    25612 <__find_arguments+0x15bd>
   255fe:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25602:	48 8b 40 08          	mov    0x8(%rax),%rax
   25606:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2560a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2560e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25612:	48 8b 00             	mov    (%rax),%rax
   25615:	48 89 06             	mov    %rax,(%rsi)
			break;
   25618:	e9 69 06 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_LLONG:
			(*argtable)[n].longlongarg = va_arg(ap, long long);
   2561d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25621:	48 8b 00             	mov    (%rax),%rax
   25624:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25627:	48 63 d2             	movslq %edx,%rdx
   2562a:	48 c1 e2 04          	shl    $0x4,%rdx
   2562e:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25632:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25636:	8b 00                	mov    (%rax),%eax
   25638:	83 f8 2f             	cmp    $0x2f,%eax
   2563b:	77 24                	ja     25661 <__find_arguments+0x160c>
   2563d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25641:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25645:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25649:	8b 00                	mov    (%rax),%eax
   2564b:	89 c0                	mov    %eax,%eax
   2564d:	48 01 d0             	add    %rdx,%rax
   25650:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25654:	8b 12                	mov    (%rdx),%edx
   25656:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25659:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2565d:	89 0a                	mov    %ecx,(%rdx)
   2565f:	eb 14                	jmp    25675 <__find_arguments+0x1620>
   25661:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25665:	48 8b 40 08          	mov    0x8(%rax),%rax
   25669:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2566d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25671:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25675:	48 8b 00             	mov    (%rax),%rax
   25678:	48 89 06             	mov    %rax,(%rsi)
			break;
   2567b:	e9 06 06 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_U_LLONG:
			(*argtable)[n].ulonglongarg = va_arg(ap, unsigned long long);
   25680:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25684:	48 8b 00             	mov    (%rax),%rax
   25687:	8b 55 ac             	mov    -0x54(%rbp),%edx
   2568a:	48 63 d2             	movslq %edx,%rdx
   2568d:	48 c1 e2 04          	shl    $0x4,%rdx
   25691:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25695:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25699:	8b 00                	mov    (%rax),%eax
   2569b:	83 f8 2f             	cmp    $0x2f,%eax
   2569e:	77 24                	ja     256c4 <__find_arguments+0x166f>
   256a0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   256a4:	48 8b 50 10          	mov    0x10(%rax),%rdx
   256a8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   256ac:	8b 00                	mov    (%rax),%eax
   256ae:	89 c0                	mov    %eax,%eax
   256b0:	48 01 d0             	add    %rdx,%rax
   256b3:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   256b7:	8b 12                	mov    (%rdx),%edx
   256b9:	8d 4a 08             	lea    0x8(%rdx),%ecx
   256bc:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   256c0:	89 0a                	mov    %ecx,(%rdx)
   256c2:	eb 14                	jmp    256d8 <__find_arguments+0x1683>
   256c4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   256c8:	48 8b 40 08          	mov    0x8(%rax),%rax
   256cc:	48 8d 48 08          	lea    0x8(%rax),%rcx
   256d0:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   256d4:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   256d8:	48 8b 00             	mov    (%rax),%rax
   256db:	48 89 06             	mov    %rax,(%rsi)
			break;
   256de:	e9 a3 05 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case TP_LLONG:
			(*argtable)[n].plonglongarg = va_arg(ap, long long *);
   256e3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   256e7:	48 8b 00             	mov    (%rax),%rax
   256ea:	8b 55 ac             	mov    -0x54(%rbp),%edx
   256ed:	48 63 d2             	movslq %edx,%rdx
   256f0:	48 c1 e2 04          	shl    $0x4,%rdx
   256f4:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   256f8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   256fc:	8b 00                	mov    (%rax),%eax
   256fe:	83 f8 2f             	cmp    $0x2f,%eax
   25701:	77 24                	ja     25727 <__find_arguments+0x16d2>
   25703:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25707:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2570b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2570f:	8b 00                	mov    (%rax),%eax
   25711:	89 c0                	mov    %eax,%eax
   25713:	48 01 d0             	add    %rdx,%rax
   25716:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2571a:	8b 12                	mov    (%rdx),%edx
   2571c:	8d 4a 08             	lea    0x8(%rdx),%ecx
   2571f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25723:	89 0a                	mov    %ecx,(%rdx)
   25725:	eb 14                	jmp    2573b <__find_arguments+0x16e6>
   25727:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2572b:	48 8b 40 08          	mov    0x8(%rax),%rax
   2572f:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25733:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25737:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2573b:	48 8b 00             	mov    (%rax),%rax
   2573e:	48 89 06             	mov    %rax,(%rsi)
			break;
   25741:	e9 40 05 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
#ifdef FLOATING_POINT
		case T_DOUBLE:
			(*argtable)[n].doublearg = va_arg(ap, double);
   25746:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   2574a:	48 8b 00             	mov    (%rax),%rax
   2574d:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25750:	48 63 d2             	movslq %edx,%rdx
   25753:	48 c1 e2 04          	shl    $0x4,%rdx
   25757:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   2575b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2575f:	8b 40 04             	mov    0x4(%rax),%eax
   25762:	3d af 00 00 00       	cmp    $0xaf,%eax
   25767:	77 27                	ja     25790 <__find_arguments+0x173b>
   25769:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2576d:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25771:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25775:	8b 40 04             	mov    0x4(%rax),%eax
   25778:	89 c0                	mov    %eax,%eax
   2577a:	48 01 d0             	add    %rdx,%rax
   2577d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25781:	8b 52 04             	mov    0x4(%rdx),%edx
   25784:	8d 4a 10             	lea    0x10(%rdx),%ecx
   25787:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2578b:	89 4a 04             	mov    %ecx,0x4(%rdx)
   2578e:	eb 14                	jmp    257a4 <__find_arguments+0x174f>
   25790:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25794:	48 8b 40 08          	mov    0x8(%rax),%rax
   25798:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2579c:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   257a0:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   257a4:	f2 0f 10 00          	movsd  (%rax),%xmm0
   257a8:	f2 0f 11 06          	movsd  %xmm0,(%rsi)
			break;
   257ac:	e9 d5 04 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_LONG_DOUBLE:
			(*argtable)[n].longdoublearg = va_arg(ap, long double);
   257b1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   257b5:	48 8b 00             	mov    (%rax),%rax
   257b8:	8b 55 ac             	mov    -0x54(%rbp),%edx
   257bb:	48 63 d2             	movslq %edx,%rdx
   257be:	48 c1 e2 04          	shl    $0x4,%rdx
   257c2:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   257c6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   257ca:	48 8b 40 08          	mov    0x8(%rax),%rax
   257ce:	48 83 c0 0f          	add    $0xf,%rax
   257d2:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
   257d6:	48 8d 48 10          	lea    0x10(%rax),%rcx
   257da:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   257de:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   257e2:	db 28                	fldt   (%rax)
   257e4:	db 3e                	fstpt  (%rsi)
			break;
   257e6:	e9 9b 04 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
#endif
		case TP_CHAR:
			(*argtable)[n].pchararg = va_arg(ap, char *);
   257eb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   257ef:	48 8b 00             	mov    (%rax),%rax
   257f2:	8b 55 ac             	mov    -0x54(%rbp),%edx
   257f5:	48 63 d2             	movslq %edx,%rdx
   257f8:	48 c1 e2 04          	shl    $0x4,%rdx
   257fc:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25800:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25804:	8b 00                	mov    (%rax),%eax
   25806:	83 f8 2f             	cmp    $0x2f,%eax
   25809:	77 24                	ja     2582f <__find_arguments+0x17da>
   2580b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2580f:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25813:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25817:	8b 00                	mov    (%rax),%eax
   25819:	89 c0                	mov    %eax,%eax
   2581b:	48 01 d0             	add    %rdx,%rax
   2581e:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25822:	8b 12                	mov    (%rdx),%edx
   25824:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25827:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2582b:	89 0a                	mov    %ecx,(%rdx)
   2582d:	eb 14                	jmp    25843 <__find_arguments+0x17ee>
   2582f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25833:	48 8b 40 08          	mov    0x8(%rax),%rax
   25837:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2583b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2583f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25843:	48 8b 00             	mov    (%rax),%rax
   25846:	48 89 06             	mov    %rax,(%rsi)
			break;
   25849:	e9 38 04 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case TP_VOID:
			(*argtable)[n].pvoidarg = va_arg(ap, void *);
   2584e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25852:	48 8b 00             	mov    (%rax),%rax
   25855:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25858:	48 63 d2             	movslq %edx,%rdx
   2585b:	48 c1 e2 04          	shl    $0x4,%rdx
   2585f:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25863:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25867:	8b 00                	mov    (%rax),%eax
   25869:	83 f8 2f             	cmp    $0x2f,%eax
   2586c:	77 24                	ja     25892 <__find_arguments+0x183d>
   2586e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25872:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25876:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2587a:	8b 00                	mov    (%rax),%eax
   2587c:	89 c0                	mov    %eax,%eax
   2587e:	48 01 d0             	add    %rdx,%rax
   25881:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25885:	8b 12                	mov    (%rdx),%edx
   25887:	8d 4a 08             	lea    0x8(%rdx),%ecx
   2588a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2588e:	89 0a                	mov    %ecx,(%rdx)
   25890:	eb 14                	jmp    258a6 <__find_arguments+0x1851>
   25892:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25896:	48 8b 40 08          	mov    0x8(%rax),%rax
   2589a:	48 8d 48 08          	lea    0x8(%rax),%rcx
   2589e:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   258a2:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   258a6:	48 8b 00             	mov    (%rax),%rax
   258a9:	48 89 06             	mov    %rax,(%rsi)
			break;
   258ac:	e9 d5 03 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_PTRINT:
			(*argtable)[n].ptrdiffarg = va_arg(ap, ptrdiff_t);
   258b1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   258b5:	48 8b 00             	mov    (%rax),%rax
   258b8:	8b 55 ac             	mov    -0x54(%rbp),%edx
   258bb:	48 63 d2             	movslq %edx,%rdx
   258be:	48 c1 e2 04          	shl    $0x4,%rdx
   258c2:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   258c6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   258ca:	8b 00                	mov    (%rax),%eax
   258cc:	83 f8 2f             	cmp    $0x2f,%eax
   258cf:	77 24                	ja     258f5 <__find_arguments+0x18a0>
   258d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   258d5:	48 8b 50 10          	mov    0x10(%rax),%rdx
   258d9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   258dd:	8b 00                	mov    (%rax),%eax
   258df:	89 c0                	mov    %eax,%eax
   258e1:	48 01 d0             	add    %rdx,%rax
   258e4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   258e8:	8b 12                	mov    (%rdx),%edx
   258ea:	8d 4a 08             	lea    0x8(%rdx),%ecx
   258ed:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   258f1:	89 0a                	mov    %ecx,(%rdx)
   258f3:	eb 14                	jmp    25909 <__find_arguments+0x18b4>
   258f5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   258f9:	48 8b 40 08          	mov    0x8(%rax),%rax
   258fd:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25901:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25905:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25909:	48 8b 00             	mov    (%rax),%rax
   2590c:	48 89 06             	mov    %rax,(%rsi)
			break;
   2590f:	e9 72 03 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case TP_PTRINT:
			(*argtable)[n].pptrdiffarg = va_arg(ap, ptrdiff_t *);
   25914:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25918:	48 8b 00             	mov    (%rax),%rax
   2591b:	8b 55 ac             	mov    -0x54(%rbp),%edx
   2591e:	48 63 d2             	movslq %edx,%rdx
   25921:	48 c1 e2 04          	shl    $0x4,%rdx
   25925:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25929:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2592d:	8b 00                	mov    (%rax),%eax
   2592f:	83 f8 2f             	cmp    $0x2f,%eax
   25932:	77 24                	ja     25958 <__find_arguments+0x1903>
   25934:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25938:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2593c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25940:	8b 00                	mov    (%rax),%eax
   25942:	89 c0                	mov    %eax,%eax
   25944:	48 01 d0             	add    %rdx,%rax
   25947:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2594b:	8b 12                	mov    (%rdx),%edx
   2594d:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25950:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25954:	89 0a                	mov    %ecx,(%rdx)
   25956:	eb 14                	jmp    2596c <__find_arguments+0x1917>
   25958:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2595c:	48 8b 40 08          	mov    0x8(%rax),%rax
   25960:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25964:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25968:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   2596c:	48 8b 00             	mov    (%rax),%rax
   2596f:	48 89 06             	mov    %rax,(%rsi)
			break;
   25972:	e9 0f 03 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_SIZEINT:
			(*argtable)[n].sizearg = va_arg(ap, size_t);
   25977:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   2597b:	48 8b 00             	mov    (%rax),%rax
   2597e:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25981:	48 63 d2             	movslq %edx,%rdx
   25984:	48 c1 e2 04          	shl    $0x4,%rdx
   25988:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   2598c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25990:	8b 00                	mov    (%rax),%eax
   25992:	83 f8 2f             	cmp    $0x2f,%eax
   25995:	77 24                	ja     259bb <__find_arguments+0x1966>
   25997:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2599b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2599f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   259a3:	8b 00                	mov    (%rax),%eax
   259a5:	89 c0                	mov    %eax,%eax
   259a7:	48 01 d0             	add    %rdx,%rax
   259aa:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   259ae:	8b 12                	mov    (%rdx),%edx
   259b0:	8d 4a 08             	lea    0x8(%rdx),%ecx
   259b3:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   259b7:	89 0a                	mov    %ecx,(%rdx)
   259b9:	eb 14                	jmp    259cf <__find_arguments+0x197a>
   259bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   259bf:	48 8b 40 08          	mov    0x8(%rax),%rax
   259c3:	48 8d 48 08          	lea    0x8(%rax),%rcx
   259c7:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   259cb:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   259cf:	48 8b 00             	mov    (%rax),%rax
   259d2:	48 89 06             	mov    %rax,(%rsi)
			break;
   259d5:	e9 ac 02 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_SSIZEINT:
			(*argtable)[n].ssizearg = va_arg(ap, ssize_t);
   259da:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   259de:	48 8b 00             	mov    (%rax),%rax
   259e1:	8b 55 ac             	mov    -0x54(%rbp),%edx
   259e4:	48 63 d2             	movslq %edx,%rdx
   259e7:	48 c1 e2 04          	shl    $0x4,%rdx
   259eb:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   259ef:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   259f3:	8b 00                	mov    (%rax),%eax
   259f5:	83 f8 2f             	cmp    $0x2f,%eax
   259f8:	77 24                	ja     25a1e <__find_arguments+0x19c9>
   259fa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   259fe:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25a02:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25a06:	8b 00                	mov    (%rax),%eax
   25a08:	89 c0                	mov    %eax,%eax
   25a0a:	48 01 d0             	add    %rdx,%rax
   25a0d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25a11:	8b 12                	mov    (%rdx),%edx
   25a13:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25a16:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25a1a:	89 0a                	mov    %ecx,(%rdx)
   25a1c:	eb 14                	jmp    25a32 <__find_arguments+0x19dd>
   25a1e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25a22:	48 8b 40 08          	mov    0x8(%rax),%rax
   25a26:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25a2a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25a2e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25a32:	48 8b 00             	mov    (%rax),%rax
   25a35:	48 89 06             	mov    %rax,(%rsi)
			break;
   25a38:	e9 49 02 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case TP_SSIZEINT:
			(*argtable)[n].pssizearg = va_arg(ap, ssize_t *);
   25a3d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25a41:	48 8b 00             	mov    (%rax),%rax
   25a44:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25a47:	48 63 d2             	movslq %edx,%rdx
   25a4a:	48 c1 e2 04          	shl    $0x4,%rdx
   25a4e:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25a52:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25a56:	8b 00                	mov    (%rax),%eax
   25a58:	83 f8 2f             	cmp    $0x2f,%eax
   25a5b:	77 24                	ja     25a81 <__find_arguments+0x1a2c>
   25a5d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25a61:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25a65:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25a69:	8b 00                	mov    (%rax),%eax
   25a6b:	89 c0                	mov    %eax,%eax
   25a6d:	48 01 d0             	add    %rdx,%rax
   25a70:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25a74:	8b 12                	mov    (%rdx),%edx
   25a76:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25a79:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25a7d:	89 0a                	mov    %ecx,(%rdx)
   25a7f:	eb 14                	jmp    25a95 <__find_arguments+0x1a40>
   25a81:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25a85:	48 8b 40 08          	mov    0x8(%rax),%rax
   25a89:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25a8d:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25a91:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25a95:	48 8b 00             	mov    (%rax),%rax
   25a98:	48 89 06             	mov    %rax,(%rsi)
			break;
   25a9b:	e9 e6 01 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_MAXINT:
			(*argtable)[n].intmaxarg = va_arg(ap, intmax_t);
   25aa0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25aa4:	48 8b 00             	mov    (%rax),%rax
   25aa7:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25aaa:	48 63 d2             	movslq %edx,%rdx
   25aad:	48 c1 e2 04          	shl    $0x4,%rdx
   25ab1:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25ab5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25ab9:	8b 00                	mov    (%rax),%eax
   25abb:	83 f8 2f             	cmp    $0x2f,%eax
   25abe:	77 24                	ja     25ae4 <__find_arguments+0x1a8f>
   25ac0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25ac4:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25ac8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25acc:	8b 00                	mov    (%rax),%eax
   25ace:	89 c0                	mov    %eax,%eax
   25ad0:	48 01 d0             	add    %rdx,%rax
   25ad3:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25ad7:	8b 12                	mov    (%rdx),%edx
   25ad9:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25adc:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25ae0:	89 0a                	mov    %ecx,(%rdx)
   25ae2:	eb 14                	jmp    25af8 <__find_arguments+0x1aa3>
   25ae4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25ae8:	48 8b 40 08          	mov    0x8(%rax),%rax
   25aec:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25af0:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25af4:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25af8:	48 8b 00             	mov    (%rax),%rax
   25afb:	48 89 06             	mov    %rax,(%rsi)
			break;
   25afe:	e9 83 01 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case T_MAXUINT:
			(*argtable)[n].uintmaxarg = va_arg(ap, uintmax_t);
   25b03:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25b07:	48 8b 00             	mov    (%rax),%rax
   25b0a:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25b0d:	48 63 d2             	movslq %edx,%rdx
   25b10:	48 c1 e2 04          	shl    $0x4,%rdx
   25b14:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25b18:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25b1c:	8b 00                	mov    (%rax),%eax
   25b1e:	83 f8 2f             	cmp    $0x2f,%eax
   25b21:	77 24                	ja     25b47 <__find_arguments+0x1af2>
   25b23:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25b27:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25b2b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25b2f:	8b 00                	mov    (%rax),%eax
   25b31:	89 c0                	mov    %eax,%eax
   25b33:	48 01 d0             	add    %rdx,%rax
   25b36:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25b3a:	8b 12                	mov    (%rdx),%edx
   25b3c:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25b3f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25b43:	89 0a                	mov    %ecx,(%rdx)
   25b45:	eb 14                	jmp    25b5b <__find_arguments+0x1b06>
   25b47:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25b4b:	48 8b 40 08          	mov    0x8(%rax),%rax
   25b4f:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25b53:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25b57:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25b5b:	48 8b 00             	mov    (%rax),%rax
   25b5e:	48 89 06             	mov    %rax,(%rsi)
			break;
   25b61:	e9 20 01 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
		case TP_MAXINT:
			(*argtable)[n].pintmaxarg = va_arg(ap, intmax_t *);
   25b66:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25b6a:	48 8b 00             	mov    (%rax),%rax
   25b6d:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25b70:	48 63 d2             	movslq %edx,%rdx
   25b73:	48 c1 e2 04          	shl    $0x4,%rdx
   25b77:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25b7b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25b7f:	8b 00                	mov    (%rax),%eax
   25b81:	83 f8 2f             	cmp    $0x2f,%eax
   25b84:	77 24                	ja     25baa <__find_arguments+0x1b55>
   25b86:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25b8a:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25b8e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25b92:	8b 00                	mov    (%rax),%eax
   25b94:	89 c0                	mov    %eax,%eax
   25b96:	48 01 d0             	add    %rdx,%rax
   25b99:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25b9d:	8b 12                	mov    (%rdx),%edx
   25b9f:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25ba2:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25ba6:	89 0a                	mov    %ecx,(%rdx)
   25ba8:	eb 14                	jmp    25bbe <__find_arguments+0x1b69>
   25baa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25bae:	48 8b 40 08          	mov    0x8(%rax),%rax
   25bb2:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25bb6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25bba:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25bbe:	48 8b 00             	mov    (%rax),%rax
   25bc1:	48 89 06             	mov    %rax,(%rsi)
			break;
   25bc4:	e9 bd 00 00 00       	jmpq   25c86 <__find_arguments+0x1c31>
#ifdef PRINTF_WIDE_CHAR
		case T_WINT:
			(*argtable)[n].wintarg = va_arg(ap, wint_t);
   25bc9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25bcd:	48 8b 00             	mov    (%rax),%rax
   25bd0:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25bd3:	48 63 d2             	movslq %edx,%rdx
   25bd6:	48 c1 e2 04          	shl    $0x4,%rdx
   25bda:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25bde:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25be2:	8b 00                	mov    (%rax),%eax
   25be4:	83 f8 2f             	cmp    $0x2f,%eax
   25be7:	77 24                	ja     25c0d <__find_arguments+0x1bb8>
   25be9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25bed:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25bf1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25bf5:	8b 00                	mov    (%rax),%eax
   25bf7:	89 c0                	mov    %eax,%eax
   25bf9:	48 01 d0             	add    %rdx,%rax
   25bfc:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25c00:	8b 12                	mov    (%rdx),%edx
   25c02:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25c05:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25c09:	89 0a                	mov    %ecx,(%rdx)
   25c0b:	eb 14                	jmp    25c21 <__find_arguments+0x1bcc>
   25c0d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25c11:	48 8b 40 08          	mov    0x8(%rax),%rax
   25c15:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25c19:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25c1d:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25c21:	8b 00                	mov    (%rax),%eax
   25c23:	89 06                	mov    %eax,(%rsi)
			break;
   25c25:	eb 5f                	jmp    25c86 <__find_arguments+0x1c31>
		case TP_WCHAR:
			(*argtable)[n].pwchararg = va_arg(ap, wchar_t *);
   25c27:	48 8b 45 88          	mov    -0x78(%rbp),%rax
   25c2b:	48 8b 00             	mov    (%rax),%rax
   25c2e:	8b 55 ac             	mov    -0x54(%rbp),%edx
   25c31:	48 63 d2             	movslq %edx,%rdx
   25c34:	48 c1 e2 04          	shl    $0x4,%rdx
   25c38:	48 8d 34 10          	lea    (%rax,%rdx,1),%rsi
   25c3c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25c40:	8b 00                	mov    (%rax),%eax
   25c42:	83 f8 2f             	cmp    $0x2f,%eax
   25c45:	77 24                	ja     25c6b <__find_arguments+0x1c16>
   25c47:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25c4b:	48 8b 50 10          	mov    0x10(%rax),%rdx
   25c4f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25c53:	8b 00                	mov    (%rax),%eax
   25c55:	89 c0                	mov    %eax,%eax
   25c57:	48 01 d0             	add    %rdx,%rax
   25c5a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25c5e:	8b 12                	mov    (%rdx),%edx
   25c60:	8d 4a 08             	lea    0x8(%rdx),%ecx
   25c63:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25c67:	89 0a                	mov    %ecx,(%rdx)
   25c69:	eb 14                	jmp    25c7f <__find_arguments+0x1c2a>
   25c6b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   25c6f:	48 8b 40 08          	mov    0x8(%rax),%rax
   25c73:	48 8d 48 08          	lea    0x8(%rax),%rcx
   25c77:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   25c7b:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
   25c7f:	48 8b 00             	mov    (%rax),%rax
   25c82:	48 89 06             	mov    %rax,(%rsi)
			break;
   25c85:	90                   	nop
	for (n = 1; n <= tablemax; n++) {
   25c86:	83 45 ac 01          	addl   $0x1,-0x54(%rbp)
   25c8a:	8b 45 ac             	mov    -0x54(%rbp),%eax
   25c8d:	3b 45 b8             	cmp    -0x48(%rbp),%eax
   25c90:	0f 8e 98 f6 ff ff    	jle    2532e <__find_arguments+0x12d9>
#endif
		}
	}
	goto finish;
   25c96:	eb 4c                	jmp    25ce4 <__find_arguments+0x1c8f>
			ADDASTER();
   25c98:	90                   	nop
   25c99:	eb 37                	jmp    25cd2 <__find_arguments+0x1c7d>
   25c9b:	90                   	nop
   25c9c:	eb 34                	jmp    25cd2 <__find_arguments+0x1c7d>
   25c9e:	90                   	nop
   25c9f:	eb 31                	jmp    25cd2 <__find_arguments+0x1c7d>
   25ca1:	90                   	nop
   25ca2:	eb 2e                	jmp    25cd2 <__find_arguments+0x1c7d>
				ADDASTER();
   25ca4:	90                   	nop
   25ca5:	eb 2b                	jmp    25cd2 <__find_arguments+0x1c7d>
   25ca7:	90                   	nop
   25ca8:	eb 28                	jmp    25cd2 <__find_arguments+0x1c7d>
   25caa:	90                   	nop
   25cab:	eb 25                	jmp    25cd2 <__find_arguments+0x1c7d>
   25cad:	90                   	nop
   25cae:	eb 22                	jmp    25cd2 <__find_arguments+0x1c7d>
				APPEND_DIGIT(n ,ch);
   25cb0:	90                   	nop
   25cb1:	eb 1f                	jmp    25cd2 <__find_arguments+0x1c7d>
   25cb3:	90                   	nop
   25cb4:	eb 1c                	jmp    25cd2 <__find_arguments+0x1c7d>
				ADDTYPE_CHECK(T_WINT);
   25cb6:	90                   	nop
   25cb7:	eb 19                	jmp    25cd2 <__find_arguments+0x1c7d>
				ADDTYPE_CHECK(T_LONG_DOUBLE);
   25cb9:	90                   	nop
   25cba:	eb 16                	jmp    25cd2 <__find_arguments+0x1c7d>
				ADDTYPE_CHECK(TP_LLONG);
   25cbc:	90                   	nop
   25cbd:	eb 13                	jmp    25cd2 <__find_arguments+0x1c7d>
				ADDTYPE_CHECK(TP_LONG);
   25cbf:	90                   	nop
   25cc0:	eb 10                	jmp    25cd2 <__find_arguments+0x1c7d>
				ADDTYPE_CHECK(TP_SHORT);
   25cc2:	90                   	nop
   25cc3:	eb 0d                	jmp    25cd2 <__find_arguments+0x1c7d>
				ADDTYPE_CHECK(TP_PTRINT);
   25cc5:	90                   	nop
   25cc6:	eb 0a                	jmp    25cd2 <__find_arguments+0x1c7d>
				ADDTYPE_CHECK(TP_SSIZEINT);
   25cc8:	90                   	nop
   25cc9:	eb 07                	jmp    25cd2 <__find_arguments+0x1c7d>
				ADDTYPE_CHECK(TP_MAXINT);
   25ccb:	90                   	nop
   25ccc:	eb 04                	jmp    25cd2 <__find_arguments+0x1c7d>
				ADDTYPE_CHECK(TP_WCHAR);
   25cce:	90                   	nop
   25ccf:	eb 01                	jmp    25cd2 <__find_arguments+0x1c7d>
			goto overflow; //return (-1);
   25cd1:	90                   	nop

overflow:
	errno = ENOMEM;
   25cd2:	e8 e9 99 ff ff       	callq  1f6c0 <__errno>
   25cd7:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
	ret = -1;
   25cdd:	c7 45 c0 ff ff ff ff 	movl   $0xffffffff,-0x40(%rbp)

finish:
	if (typetable != NULL && typetable != stattypetable) {
   25ce4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   25ce8:	48 85 c0             	test   %rax,%rax
   25ceb:	74 21                	je     25d0e <__find_arguments+0x1cb9>
   25ced:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   25cf1:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   25cf5:	48 39 c2             	cmp    %rax,%rdx
   25cf8:	74 14                	je     25d0e <__find_arguments+0x1cb9>
		free(typetable);
   25cfa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   25cfe:	48 89 c7             	mov    %rax,%rdi
   25d01:	e8 16 5f fe ff       	callq  bc1c <dlfree>
		typetable = NULL;
   25d06:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
   25d0d:	00 
	}
	return (ret);
   25d0e:	8b 45 c0             	mov    -0x40(%rbp),%eax
}
   25d11:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
   25d15:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
   25d1c:	00 00 
   25d1e:	74 05                	je     25d25 <__find_arguments+0x1cd0>
   25d20:	e8 73 f2 fd ff       	callq  4f98 <__stack_chk_fail>
   25d25:	c9                   	leaveq 
   25d26:	c3                   	retq   

0000000000025d27 <__grow_type_table>:
/*
 * Increase the size of the type table.
 */
static int
__grow_type_table(unsigned char **typetable, int *tablesize)
{
   25d27:	55                   	push   %rbp
   25d28:	48 89 e5             	mov    %rsp,%rbp
   25d2b:	48 83 ec 30          	sub    $0x30,%rsp
   25d2f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   25d33:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	unsigned char *oldtable = *typetable;
   25d37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25d3b:	48 8b 00             	mov    (%rax),%rax
   25d3e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int newsize = *tablesize * 2;
   25d42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   25d46:	8b 00                	mov    (%rax),%eax
   25d48:	01 c0                	add    %eax,%eax
   25d4a:	89 45 ec             	mov    %eax,-0x14(%rbp)

	if (newsize < SE_PAGE_SIZE)
   25d4d:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)
   25d54:	7f 07                	jg     25d5d <__grow_type_table+0x36>
		newsize = SE_PAGE_SIZE;
   25d56:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)

	if (*tablesize == STATIC_ARG_TBL_SIZE) {
   25d5d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   25d61:	8b 00                	mov    (%rax),%eax
   25d63:	83 f8 08             	cmp    $0x8,%eax
   25d66:	75 4e                	jne    25db6 <__grow_type_table+0x8f>
		*typetable = (unsigned char *)malloc(newsize);
   25d68:	8b 45 ec             	mov    -0x14(%rbp),%eax
   25d6b:	48 98                	cltq   
   25d6d:	48 89 c7             	mov    %rax,%rdi
   25d70:	e8 b0 53 fe ff       	callq  b125 <dlmalloc>
   25d75:	48 89 c2             	mov    %rax,%rdx
   25d78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25d7c:	48 89 10             	mov    %rdx,(%rax)
		if (*typetable == NULL)
   25d7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25d83:	48 8b 00             	mov    (%rax),%rax
   25d86:	48 85 c0             	test   %rax,%rax
   25d89:	75 0a                	jne    25d95 <__grow_type_table+0x6e>
			return (-1);
   25d8b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   25d90:	e9 b9 00 00 00       	jmpq   25e4e <__grow_type_table+0x127>
		memmove(*typetable, oldtable, *tablesize);
   25d95:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   25d99:	8b 00                	mov    (%rax),%eax
   25d9b:	48 63 d0             	movslq %eax,%rdx
   25d9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25da2:	48 8b 00             	mov    (%rax),%rax
   25da5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   25da9:	48 89 ce             	mov    %rcx,%rsi
   25dac:	48 89 c7             	mov    %rax,%rdi
   25daf:	e8 0f 59 00 00       	callq  2b6c3 <memmove>
   25db4:	eb 58                	jmp    25e0e <__grow_type_table+0xe7>
	} else {
		unsigned char *new1 = (unsigned char *)malloc(newsize);
   25db6:	8b 45 ec             	mov    -0x14(%rbp),%eax
   25db9:	48 98                	cltq   
   25dbb:	48 89 c7             	mov    %rax,%rdi
   25dbe:	e8 62 53 fe ff       	callq  b125 <dlmalloc>
   25dc3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (new1 == NULL)
   25dc7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   25dcc:	75 07                	jne    25dd5 <__grow_type_table+0xae>
			return (-1);
   25dce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   25dd3:	eb 79                	jmp    25e4e <__grow_type_table+0x127>
		memmove(new1, *typetable, *tablesize);
   25dd5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   25dd9:	8b 00                	mov    (%rax),%eax
   25ddb:	48 63 d0             	movslq %eax,%rdx
   25dde:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25de2:	48 8b 08             	mov    (%rax),%rcx
   25de5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   25de9:	48 89 ce             	mov    %rcx,%rsi
   25dec:	48 89 c7             	mov    %rax,%rdi
   25def:	e8 cf 58 00 00       	callq  2b6c3 <memmove>
		free(*typetable);
   25df4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25df8:	48 8b 00             	mov    (%rax),%rax
   25dfb:	48 89 c7             	mov    %rax,%rdi
   25dfe:	e8 19 5e fe ff       	callq  bc1c <dlfree>
		*typetable = new1;
   25e03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25e07:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   25e0b:	48 89 10             	mov    %rdx,(%rax)
	}
	memset(*typetable + *tablesize, T_UNUSED, (newsize - *tablesize));
   25e0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   25e12:	8b 00                	mov    (%rax),%eax
   25e14:	8b 55 ec             	mov    -0x14(%rbp),%edx
   25e17:	29 c2                	sub    %eax,%edx
   25e19:	89 d0                	mov    %edx,%eax
   25e1b:	48 98                	cltq   
   25e1d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   25e21:	48 8b 0a             	mov    (%rdx),%rcx
   25e24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   25e28:	8b 12                	mov    (%rdx),%edx
   25e2a:	48 63 d2             	movslq %edx,%rdx
   25e2d:	48 01 d1             	add    %rdx,%rcx
   25e30:	48 89 c2             	mov    %rax,%rdx
   25e33:	be 00 00 00 00       	mov    $0x0,%esi
   25e38:	48 89 cf             	mov    %rcx,%rdi
   25e3b:	e8 18 8a fe ff       	callq  e858 <memset>

	*tablesize = newsize;
   25e40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   25e44:	8b 55 ec             	mov    -0x14(%rbp),%edx
   25e47:	89 10                	mov    %edx,(%rax)
	return (0);
   25e49:	b8 00 00 00 00       	mov    $0x0,%eax
}
   25e4e:	c9                   	leaveq 
   25e4f:	c3                   	retq   

0000000000025e50 <exponent>:

 
#ifdef FLOATING_POINT
static int
exponent(char *p0, int exp, int fmtch)
{
   25e50:	55                   	push   %rbp
   25e51:	48 89 e5             	mov    %rsp,%rbp
   25e54:	48 83 ec 30          	sub    $0x30,%rsp
   25e58:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   25e5c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   25e5f:	89 55 d0             	mov    %edx,-0x30(%rbp)
   25e62:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   25e69:	00 00 
   25e6b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   25e6f:	31 c0                	xor    %eax,%eax
	char *p, *t;
	char expbuf[MAXEXPDIG];

	p = p0;
   25e71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25e75:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	*p++ = fmtch;
   25e79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   25e7d:	48 8d 50 01          	lea    0x1(%rax),%rdx
   25e81:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   25e85:	8b 55 d0             	mov    -0x30(%rbp),%edx
   25e88:	88 10                	mov    %dl,(%rax)
	if (exp < 0) {
   25e8a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   25e8e:	79 14                	jns    25ea4 <exponent+0x54>
		exp = -exp;
   25e90:	f7 5d d4             	negl   -0x2c(%rbp)
		*p++ = '-';
   25e93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   25e97:	48 8d 50 01          	lea    0x1(%rax),%rdx
   25e9b:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   25e9f:	c6 00 2d             	movb   $0x2d,(%rax)
   25ea2:	eb 0f                	jmp    25eb3 <exponent+0x63>
	} else
		*p++ = '+';
   25ea4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   25ea8:	48 8d 50 01          	lea    0x1(%rax),%rdx
   25eac:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   25eb0:	c6 00 2b             	movb   $0x2b,(%rax)
	t = expbuf + MAXEXPDIG;
   25eb3:	48 8d 45 f2          	lea    -0xe(%rbp),%rax
   25eb7:	48 83 c0 06          	add    $0x6,%rax
   25ebb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (exp > 9) {
   25ebf:	83 7d d4 09          	cmpl   $0x9,-0x2c(%rbp)
   25ec3:	0f 8e 98 00 00 00    	jle    25f61 <exponent+0x111>
		do {
			*--t = to_char(exp % 10);
   25ec9:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
   25ecc:	ba 67 66 66 66       	mov    $0x66666667,%edx
   25ed1:	89 c8                	mov    %ecx,%eax
   25ed3:	f7 ea                	imul   %edx
   25ed5:	c1 fa 02             	sar    $0x2,%edx
   25ed8:	89 c8                	mov    %ecx,%eax
   25eda:	c1 f8 1f             	sar    $0x1f,%eax
   25edd:	29 c2                	sub    %eax,%edx
   25edf:	89 d0                	mov    %edx,%eax
   25ee1:	c1 e0 02             	shl    $0x2,%eax
   25ee4:	01 d0                	add    %edx,%eax
   25ee6:	01 c0                	add    %eax,%eax
   25ee8:	29 c1                	sub    %eax,%ecx
   25eea:	89 ca                	mov    %ecx,%edx
   25eec:	89 d0                	mov    %edx,%eax
   25eee:	83 c0 30             	add    $0x30,%eax
   25ef1:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   25ef6:	89 c2                	mov    %eax,%edx
   25ef8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25efc:	88 10                	mov    %dl,(%rax)
		} while ((exp /= 10) > 9);
   25efe:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
   25f01:	ba 67 66 66 66       	mov    $0x66666667,%edx
   25f06:	89 c8                	mov    %ecx,%eax
   25f08:	f7 ea                	imul   %edx
   25f0a:	c1 fa 02             	sar    $0x2,%edx
   25f0d:	89 c8                	mov    %ecx,%eax
   25f0f:	c1 f8 1f             	sar    $0x1f,%eax
   25f12:	29 c2                	sub    %eax,%edx
   25f14:	89 d0                	mov    %edx,%eax
   25f16:	89 45 d4             	mov    %eax,-0x2c(%rbp)
   25f19:	83 7d d4 09          	cmpl   $0x9,-0x2c(%rbp)
   25f1d:	7f aa                	jg     25ec9 <exponent+0x79>
		*--t = to_char(exp);
   25f1f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   25f22:	83 c0 30             	add    $0x30,%eax
   25f25:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   25f2a:	89 c2                	mov    %eax,%edx
   25f2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   25f30:	88 10                	mov    %dl,(%rax)
		for (; t < expbuf + MAXEXPDIG; *p++ = *t++)
   25f32:	eb 1d                	jmp    25f51 <exponent+0x101>
   25f34:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   25f38:	48 8d 42 01          	lea    0x1(%rdx),%rax
   25f3c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   25f40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   25f44:	48 8d 48 01          	lea    0x1(%rax),%rcx
   25f48:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
   25f4c:	0f b6 12             	movzbl (%rdx),%edx
   25f4f:	88 10                	mov    %dl,(%rax)
   25f51:	48 8d 45 f2          	lea    -0xe(%rbp),%rax
   25f55:	48 83 c0 06          	add    $0x6,%rax
   25f59:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   25f5d:	72 d5                	jb     25f34 <exponent+0xe4>
   25f5f:	eb 31                	jmp    25f92 <exponent+0x142>
		 * Exponents for decimal floating point conversions
		 * (%[eEgG]) must be at least two characters long,
		 * whereas exponents for hexadecimal conversions can
		 * be only one character long.
		 */
		if (fmtch == 'e' || fmtch == 'E')
   25f61:	83 7d d0 65          	cmpl   $0x65,-0x30(%rbp)
   25f65:	74 06                	je     25f6d <exponent+0x11d>
   25f67:	83 7d d0 45          	cmpl   $0x45,-0x30(%rbp)
   25f6b:	75 0f                	jne    25f7c <exponent+0x12c>
			*p++ = '0';
   25f6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   25f71:	48 8d 50 01          	lea    0x1(%rax),%rdx
   25f75:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   25f79:	c6 00 30             	movb   $0x30,(%rax)
		*p++ = to_char(exp);
   25f7c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   25f7f:	8d 48 30             	lea    0x30(%rax),%ecx
   25f82:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   25f86:	48 8d 50 01          	lea    0x1(%rax),%rdx
   25f8a:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   25f8e:	89 ca                	mov    %ecx,%edx
   25f90:	88 10                	mov    %dl,(%rax)
	}
	return (p - p0);
   25f92:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   25f96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   25f9a:	48 29 c2             	sub    %rax,%rdx
   25f9d:	48 89 d0             	mov    %rdx,%rax
}
   25fa0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   25fa4:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
   25fab:	00 00 
   25fad:	74 05                	je     25fb4 <exponent+0x164>
   25faf:	e8 e4 ef fd ff       	callq  4f98 <__stack_chk_fail>
   25fb4:	c9                   	leaveq 
   25fb5:	c3                   	retq   
   25fb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   25fbd:	00 00 00 

0000000000025fc0 <__cacheSize>:
   25fc0:	f3 0f 1e fa          	endbr64 
   25fc4:	55                   	push   %rbp
   25fc5:	48 89 e5             	mov    %rsp,%rbp
   25fc8:	41 57                	push   %r15
   25fca:	48 81 ec 48 01 00 00 	sub    $0x148,%rsp
   25fd1:	41 89 fa             	mov    %edi,%r10d
   25fd4:	48 8d 05 cd ed 20 00 	lea    0x20edcd(%rip),%rax        # 234da8 <__intel_security_cookie>
   25fdb:	48 8b 10             	mov    (%rax),%rdx
   25fde:	41 8d 4a ff          	lea    -0x1(%r10),%ecx
   25fe2:	48 33 d5             	xor    %rbp,%rdx
   25fe5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   25fe9:	83 f9 02             	cmp    $0x2,%ecx
   25fec:	77 2f                	ja     2601d <__cacheSize+0x5d>
   25fee:	83 3d d7 fd 20 00 00 	cmpl   $0x0,0x20fdd7(%rip)        # 235dcc <__libirc_cache_tbl+0xc>
   25ff5:	74 3c                	je     26033 <__cacheSize+0x73>
   25ff7:	48 8d 35 c2 fd 20 00 	lea    0x20fdc2(%rip),%rsi        # 235dc0 <__libirc_cache_tbl>
   25ffe:	41 c1 e2 02          	shl    $0x2,%r10d
   26002:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   26006:	48 33 fd             	xor    %rbp,%rdi
   26009:	46 8b 3c 96          	mov    (%rsi,%r10,4),%r15d
   2600d:	e8 98 ef fd ff       	callq  4faa <__intel_security_check_cookie>
   26012:	44 89 f8             	mov    %r15d,%eax
   26015:	48 8d 65 f8          	lea    -0x8(%rbp),%rsp
   26019:	41 5f                	pop    %r15
   2601b:	5d                   	pop    %rbp
   2601c:	c3                   	retq   
   2601d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
   26021:	48 33 fd             	xor    %rbp,%rdi
   26024:	e8 81 ef fd ff       	callq  4faa <__intel_security_check_cookie>
   26029:	33 c0                	xor    %eax,%eax
   2602b:	48 8d 65 f8          	lea    -0x8(%rbp),%rsp
   2602f:	41 5f                	pop    %r15
   26031:	5d                   	pop    %rbp
   26032:	c3                   	retq   
   26033:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
   2603a:	50                   	push   %rax
   2603b:	51                   	push   %rcx
   2603c:	9c                   	pushfq 
   2603d:	58                   	pop    %rax
   2603e:	89 c1                	mov    %eax,%ecx
   26040:	35 00 00 20 00       	xor    $0x200000,%eax
   26045:	50                   	push   %rax
   26046:	9d                   	popfq  
   26047:	9c                   	pushfq 
   26048:	58                   	pop    %rax
   26049:	3b c1                	cmp    %ecx,%eax
   2604b:	74 08                	je     26055 <__cacheSize+0x95>
   2604d:	c7 45 90 01 00 00 00 	movl   $0x1,-0x70(%rbp)
   26054:	51                   	push   %rcx
   26055:	9d                   	popfq  
   26056:	59                   	pop    %rcx
   26057:	58                   	pop    %rax
   26058:	83 7d 90 00          	cmpl   $0x0,-0x70(%rbp)
   2605c:	75 0c                	jne    2606a <__cacheSize+0xaa>
   2605e:	48 8d 35 5b fd 20 00 	lea    0x20fd5b(%rip),%rsi        # 235dc0 <__libirc_cache_tbl>
   26065:	e9 40 03 00 00       	jmpq   263aa <__cacheSize+0x3ea>
   2606a:	48 ba 47 65 6e 75 69 	movabs $0x49656e69756e6547,%rdx
   26071:	6e 65 49 
   26074:	48 8d 45 88          	lea    -0x78(%rbp),%rax
   26078:	33 c9                	xor    %ecx,%ecx
   2607a:	48 89 40 f0          	mov    %rax,-0x10(%rax)
   2607e:	48 89 55 d4          	mov    %rdx,-0x2c(%rbp)
   26082:	48 c7 45 dc 6e 74 65 	movq   $0x6c65746e,-0x24(%rbp)
   26089:	6c 
   2608a:	89 4d 8c             	mov    %ecx,-0x74(%rbp)
   2608d:	89 08                	mov    %ecx,(%rax)
   2608f:	48 89 5d 80          	mov    %rbx,-0x80(%rbp)
   26093:	50                   	push   %rax
   26094:	53                   	push   %rbx
   26095:	51                   	push   %rcx
   26096:	52                   	push   %rdx
   26097:	b8 00 00 00 00       	mov    $0x0,%eax
   2609c:	0f a2                	cpuid  
   2609e:	39 5d d4             	cmp    %ebx,-0x2c(%rbp)
   260a1:	75 1a                	jne    260bd <__cacheSize+0xfd>
   260a3:	39 55 d8             	cmp    %edx,-0x28(%rbp)
   260a6:	75 15                	jne    260bd <__cacheSize+0xfd>
   260a8:	39 4d dc             	cmp    %ecx,-0x24(%rbp)
   260ab:	75 10                	jne    260bd <__cacheSize+0xfd>
   260ad:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
   260b4:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
   260bb:	89 02                	mov    %eax,(%rdx)
   260bd:	5a                   	pop    %rdx
   260be:	59                   	pop    %rcx
   260bf:	5b                   	pop    %rbx
   260c0:	58                   	pop    %rax
   260c1:	8b 45 8c             	mov    -0x74(%rbp),%eax
   260c4:	8b 55 88             	mov    -0x78(%rbp),%edx
   260c7:	48 8b 5d 80          	mov    -0x80(%rbp),%rbx
   260cb:	89 05 ef fc 20 00    	mov    %eax,0x20fcef(%rip)        # 235dc0 <__libirc_cache_tbl>
   260d1:	89 15 ed fc 20 00    	mov    %edx,0x20fced(%rip)        # 235dc4 <__libirc_cache_tbl+0x4>
   260d7:	83 fa 04             	cmp    $0x4,%edx
   260da:	7d 0c                	jge    260e8 <__cacheSize+0x128>
   260dc:	48 8d 35 dd fc 20 00 	lea    0x20fcdd(%rip),%rsi        # 235dc0 <__libirc_cache_tbl>
   260e3:	e9 23 01 00 00       	jmpq   2620b <__cacheSize+0x24b>
   260e8:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
   260ef:	00 00 00 
   260f2:	48 8d 85 d8 fe ff ff 	lea    -0x128(%rbp),%rax
   260f9:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
   26100:	48 89 5d 80          	mov    %rbx,-0x80(%rbp)
   26104:	50                   	push   %rax
   26105:	53                   	push   %rbx
   26106:	51                   	push   %rcx
   26107:	52                   	push   %rdx
   26108:	57                   	push   %rdi
   26109:	4c 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%r8
   26110:	bf 00 00 00 00       	mov    $0x0,%edi
   26115:	89 f9                	mov    %edi,%ecx
   26117:	b8 04 00 00 00       	mov    $0x4,%eax
   2611c:	0f a2                	cpuid  
   2611e:	a9 1f 00 00 00       	test   $0x1f,%eax
   26123:	74 1d                	je     26142 <__cacheSize+0x182>
   26125:	41 89 00             	mov    %eax,(%r8)
   26128:	41 89 58 04          	mov    %ebx,0x4(%r8)
   2612c:	41 89 48 08          	mov    %ecx,0x8(%r8)
   26130:	41 89 50 0c          	mov    %edx,0xc(%r8)
   26134:	83 c7 01             	add    $0x1,%edi
   26137:	83 ff 08             	cmp    $0x8,%edi
   2613a:	7d 06                	jge    26142 <__cacheSize+0x182>
   2613c:	49 83 c0 10          	add    $0x10,%r8
   26140:	eb d3                	jmp    26115 <__cacheSize+0x155>
   26142:	89 bd cc fe ff ff    	mov    %edi,-0x134(%rbp)
   26148:	5f                   	pop    %rdi
   26149:	5a                   	pop    %rdx
   2614a:	59                   	pop    %rcx
   2614b:	5b                   	pop    %rbx
   2614c:	58                   	pop    %rax
   2614d:	33 c0                	xor    %eax,%eax
   2614f:	48 63 95 cc fe ff ff 	movslq -0x134(%rbp),%rdx
   26156:	33 c9                	xor    %ecx,%ecx
   26158:	48 8b 5d 80          	mov    -0x80(%rbp),%rbx
   2615c:	48 85 d2             	test   %rdx,%rdx
   2615f:	0f 8e 77 ff ff ff    	jle    260dc <__cacheSize+0x11c>
   26165:	48 8d 35 54 fc 20 00 	lea    0x20fc54(%rip),%rsi        # 235dc0 <__libirc_cache_tbl>
   2616c:	44 8a 84 0d d8 fe ff 	mov    -0x128(%rbp,%rcx,1),%r8b
   26173:	ff 
   26174:	44 88 c7             	mov    %r8b,%dil
   26177:	40 80 e7 1d          	and    $0x1d,%dil
   2617b:	40 80 ff 01          	cmp    $0x1,%dil
   2617f:	75 7a                	jne    261fb <__cacheSize+0x23b>
   26181:	41 80 e0 e0          	and    $0xe0,%r8b
   26185:	41 c0 e8 05          	shr    $0x5,%r8b
   26189:	45 0f b6 f8          	movzbl %r8b,%r15d
   2618d:	49 c1 e7 04          	shl    $0x4,%r15
   26191:	44 8b 8c 0d dc fe ff 	mov    -0x124(%rbp,%rcx,1),%r9d
   26198:	ff 
   26199:	0f b7 bc 0d de fe ff 	movzwl -0x122(%rbp,%rcx,1),%edi
   261a0:	ff 
   261a1:	41 81 e1 00 f0 3f 00 	and    $0x3ff000,%r9d
   261a8:	81 e7 c0 ff 00 00    	and    $0xffc0,%edi
   261ae:	44 0f b7 84 0d dc fe 	movzwl -0x124(%rbp,%rcx,1),%r8d
   261b5:	ff ff 
   261b7:	41 c1 e9 0c          	shr    $0xc,%r9d
   261bb:	41 81 e0 ff 0f 00 00 	and    $0xfff,%r8d
   261c2:	c1 ef 06             	shr    $0x6,%edi
   261c5:	41 ff c0             	inc    %r8d
   261c8:	44 8b 9c 0d e0 fe ff 	mov    -0x120(%rbp,%rcx,1),%r11d
   261cf:	ff 
   261d0:	41 ff c1             	inc    %r9d
   261d3:	ff c7                	inc    %edi
   261d5:	41 ff c3             	inc    %r11d
   261d8:	45 89 4c 37 08       	mov    %r9d,0x8(%r15,%rsi,1)
   261dd:	44 0f af cf          	imul   %edi,%r9d
   261e1:	45 0f af d8          	imul   %r8d,%r11d
   261e5:	45 0f af d9          	imul   %r9d,%r11d
   261e9:	41 c1 eb 0a          	shr    $0xa,%r11d
   261ed:	45 89 44 37 04       	mov    %r8d,0x4(%r15,%rsi,1)
   261f2:	41 89 7c 37 0c       	mov    %edi,0xc(%r15,%rsi,1)
   261f7:	45 89 1c 37          	mov    %r11d,(%r15,%rsi,1)
   261fb:	48 ff c0             	inc    %rax
   261fe:	48 83 c1 10          	add    $0x10,%rcx
   26202:	48 3b c2             	cmp    %rdx,%rax
   26205:	0f 8c 61 ff ff ff    	jl     2616c <__cacheSize+0x1ac>
   2620b:	83 3d be fb 20 00 00 	cmpl   $0x0,0x20fbbe(%rip)        # 235dd0 <__libirc_cache_tbl+0x10>
   26212:	0f 85 92 01 00 00    	jne    263aa <__cacheSize+0x3ea>
   26218:	83 7d 88 02          	cmpl   $0x2,-0x78(%rbp)
   2621c:	0f 8c 88 01 00 00    	jl     263aa <__cacheSize+0x3ea>
   26222:	48 89 5d 80          	mov    %rbx,-0x80(%rbp)
   26226:	48 8d 45 94          	lea    -0x6c(%rbp),%rax
   2622a:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
   26231:	50                   	push   %rax
   26232:	53                   	push   %rbx
   26233:	51                   	push   %rcx
   26234:	52                   	push   %rdx
   26235:	4c 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%r8
   2623c:	b8 02 00 00 00       	mov    $0x2,%eax
   26241:	0f a2                	cpuid  
   26243:	41 89 00             	mov    %eax,(%r8)
   26246:	41 89 58 04          	mov    %ebx,0x4(%r8)
   2624a:	41 89 48 08          	mov    %ecx,0x8(%r8)
   2624e:	41 89 50 0c          	mov    %edx,0xc(%r8)
   26252:	3c 01                	cmp    $0x1,%al
   26254:	7e 4d                	jle    262a3 <__cacheSize+0x2e3>
   26256:	3c 02                	cmp    $0x2,%al
   26258:	7e 32                	jle    2628c <__cacheSize+0x2cc>
   2625a:	3c 03                	cmp    $0x3,%al
   2625c:	7e 17                	jle    26275 <__cacheSize+0x2b5>
   2625e:	b8 02 00 00 00       	mov    $0x2,%eax
   26263:	0f a2                	cpuid  
   26265:	41 89 40 30          	mov    %eax,0x30(%r8)
   26269:	41 89 58 34          	mov    %ebx,0x34(%r8)
   2626d:	41 89 48 38          	mov    %ecx,0x38(%r8)
   26271:	41 89 50 3c          	mov    %edx,0x3c(%r8)
   26275:	b8 02 00 00 00       	mov    $0x2,%eax
   2627a:	0f a2                	cpuid  
   2627c:	41 89 40 20          	mov    %eax,0x20(%r8)
   26280:	41 89 58 24          	mov    %ebx,0x24(%r8)
   26284:	41 89 48 28          	mov    %ecx,0x28(%r8)
   26288:	41 89 50 2c          	mov    %edx,0x2c(%r8)
   2628c:	b8 02 00 00 00       	mov    $0x2,%eax
   26291:	0f a2                	cpuid  
   26293:	41 89 40 10          	mov    %eax,0x10(%r8)
   26297:	41 89 58 14          	mov    %ebx,0x14(%r8)
   2629b:	41 89 48 18          	mov    %ecx,0x18(%r8)
   2629f:	41 89 50 1c          	mov    %edx,0x1c(%r8)
   262a3:	5a                   	pop    %rdx
   262a4:	59                   	pop    %rcx
   262a5:	5b                   	pop    %rbx
   262a6:	58                   	pop    %rax
   262a7:	0f b6 7d 94          	movzbl -0x6c(%rbp),%edi
   262ab:	48 8b 5d 80          	mov    -0x80(%rbp),%rbx
   262af:	83 ff 04             	cmp    $0x4,%edi
   262b2:	7e 07                	jle    262bb <__cacheSize+0x2fb>
   262b4:	bf 10 00 00 00       	mov    $0x10,%edi
   262b9:	eb 0d                	jmp    262c8 <__cacheSize+0x308>
   262bb:	48 c1 e7 02          	shl    $0x2,%rdi
   262bf:	48 85 ff             	test   %rdi,%rdi
   262c2:	0f 8e e2 00 00 00    	jle    263aa <__cacheSize+0x3ea>
   262c8:	48 89 5d 80          	mov    %rbx,-0x80(%rbp)
   262cc:	45 33 c9             	xor    %r9d,%r9d
   262cf:	4c 89 a5 58 ff ff ff 	mov    %r12,-0xa8(%rbp)
   262d6:	4c 89 ad 60 ff ff ff 	mov    %r13,-0xa0(%rbp)
   262dd:	4c 89 b5 68 ff ff ff 	mov    %r14,-0x98(%rbp)
   262e4:	42 f6 44 8d 97 80    	testb  $0x80,-0x69(%rbp,%r9,4)
   262ea:	0f 85 8d 00 00 00    	jne    2637d <__cacheSize+0x3bd>
   262f0:	45 33 ed             	xor    %r13d,%r13d
   262f3:	4e 8d 64 8d 94       	lea    -0x6c(%rbp,%r9,4),%r12
   262f8:	47 0f b6 74 25 00    	movzbl 0x0(%r13,%r12,1),%r14d
   262fe:	49 81 fe ff 00 00 00 	cmp    $0xff,%r14
   26305:	0f 84 3a 01 00 00    	je     26445 <__cacheSize+0x485>
   2630b:	4c 8d 3d 6e ed 20 00 	lea    0x20ed6e(%rip),%r15        # 235080 <cpuid2_cache_tbl>
   26312:	43 8a 04 f7          	mov    (%r15,%r14,8),%al
   26316:	24 07                	and    $0x7,%al
   26318:	44 0f b6 d8          	movzbl %al,%r11d
   2631c:	4d 85 db             	test   %r11,%r11
   2631f:	74 4f                	je     26370 <__cacheSize+0x3b0>
   26321:	49 83 fb 02          	cmp    $0x2,%r11
   26325:	0f 84 8e 00 00 00    	je     263b9 <__cacheSize+0x3f9>
   2632b:	49 c1 e3 04          	shl    $0x4,%r11
   2632f:	43 0f b7 04 f7       	movzwl (%r15,%r14,8),%eax
   26334:	43 8b 14 f7          	mov    (%r15,%r14,8),%edx
   26338:	25 f8 7f 00 00       	and    $0x7ff8,%eax
   2633d:	43 0f b7 4c f7 02    	movzwl 0x2(%r15,%r14,8),%ecx
   26343:	81 e2 00 80 3f 00    	and    $0x3f8000,%edx
   26349:	81 e1 c0 ff 00 00    	and    $0xffc0,%ecx
   2634f:	43 8b 5c f7 04       	mov    0x4(%r15,%r14,8),%ebx
   26354:	c1 e8 03             	shr    $0x3,%eax
   26357:	c1 ea 0f             	shr    $0xf,%edx
   2635a:	c1 e9 06             	shr    $0x6,%ecx
   2635d:	41 89 44 33 04       	mov    %eax,0x4(%r11,%rsi,1)
   26362:	41 89 54 33 08       	mov    %edx,0x8(%r11,%rsi,1)
   26367:	41 89 4c 33 0c       	mov    %ecx,0xc(%r11,%rsi,1)
   2636c:	41 89 1c 33          	mov    %ebx,(%r11,%rsi,1)
   26370:	49 ff c5             	inc    %r13
   26373:	49 83 fd 04          	cmp    $0x4,%r13
   26377:	0f 8c 7b ff ff ff    	jl     262f8 <__cacheSize+0x338>
   2637d:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   26384:	00 
   26385:	49 ff c1             	inc    %r9
   26388:	4c 3b cf             	cmp    %rdi,%r9
   2638b:	0f 8c 53 ff ff ff    	jl     262e4 <__cacheSize+0x324>
   26391:	48 8b 5d 80          	mov    -0x80(%rbp),%rbx
   26395:	4c 8b a5 58 ff ff ff 	mov    -0xa8(%rbp),%r12
   2639c:	4c 8b ad 60 ff ff ff 	mov    -0xa0(%rbp),%r13
   263a3:	4c 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%r14
   263aa:	c7 05 18 fa 20 00 01 	movl   $0x1,0x20fa18(%rip)        # 235dcc <__libirc_cache_tbl+0xc>
   263b1:	00 00 00 
   263b4:	e9 45 fc ff ff       	jmpq   25ffe <__cacheSize+0x3e>
   263b9:	49 83 fe 49          	cmp    $0x49,%r14
   263bd:	0f 85 68 ff ff ff    	jne    2632b <__cacheSize+0x36b>
   263c3:	c7 85 c8 fe ff ff 01 	movl   $0x1,-0x138(%rbp)
   263ca:	00 00 00 
   263cd:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
   263d4:	48 89 40 10          	mov    %rax,0x10(%rax)
   263d8:	50                   	push   %rax
   263d9:	53                   	push   %rbx
   263da:	51                   	push   %rcx
   263db:	52                   	push   %rdx
   263dc:	4c 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%r8
   263e3:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
   263e9:	0f a2                	cpuid  
   263eb:	41 89 00             	mov    %eax,(%r8)
   263ee:	41 89 58 04          	mov    %ebx,0x4(%r8)
   263f2:	41 89 48 08          	mov    %ecx,0x8(%r8)
   263f6:	41 89 50 0c          	mov    %edx,0xc(%r8)
   263fa:	5a                   	pop    %rdx
   263fb:	59                   	pop    %rcx
   263fc:	5b                   	pop    %rbx
   263fd:	58                   	pop    %rax
   263fe:	8b 95 b0 fe ff ff    	mov    -0x150(%rbp),%edx
   26404:	89 d0                	mov    %edx,%eax
   26406:	25 00 0f 00 00       	and    $0xf00,%eax
   2640b:	3d 00 0f 00 00       	cmp    $0xf00,%eax
   26410:	0f 85 15 ff ff ff    	jne    2632b <__cacheSize+0x36b>
   26416:	f7 c2 00 00 00 0f    	test   $0xf000000,%edx
   2641c:	0f 85 09 ff ff ff    	jne    2632b <__cacheSize+0x36b>
   26422:	89 d0                	mov    %edx,%eax
   26424:	b9 03 00 00 00       	mov    $0x3,%ecx
   26429:	c1 e8 0c             	shr    $0xc,%eax
   2642c:	c1 ea 04             	shr    $0x4,%edx
   2642f:	25 f0 00 00 00       	and    $0xf0,%eax
   26434:	83 e2 0f             	and    $0xf,%edx
   26437:	0b c2                	or     %edx,%eax
   26439:	83 f8 06             	cmp    $0x6,%eax
   2643c:	4c 0f 44 d9          	cmove  %rcx,%r11
   26440:	e9 e6 fe ff ff       	jmpq   2632b <__cacheSize+0x36b>
   26445:	48 8b 5d 80          	mov    -0x80(%rbp),%rbx
   26449:	66 0f ef c0          	pxor   %xmm0,%xmm0
   2644d:	4c 8b a5 58 ff ff ff 	mov    -0xa8(%rbp),%r12
   26454:	4c 8b ad 60 ff ff ff 	mov    -0xa0(%rbp),%r13
   2645b:	4c 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%r14
   26462:	f3 0f 7f 05 66 f9 20 	movdqu %xmm0,0x20f966(%rip)        # 235dd0 <__libirc_cache_tbl+0x10>
   26469:	00 
   2646a:	f3 0f 7f 05 6e f9 20 	movdqu %xmm0,0x20f96e(%rip)        # 235de0 <__libirc_cache_tbl+0x20>
   26471:	00 
   26472:	f3 0f 7f 05 76 f9 20 	movdqu %xmm0,0x20f976(%rip)        # 235df0 <__libirc_cache_tbl+0x30>
   26479:	00 
   2647a:	e9 2b ff ff ff       	jmpq   263aa <__cacheSize+0x3ea>
   2647f:	90                   	nop

0000000000026480 <__sti__$E>:
   26480:	f3 0f 1e fa          	endbr64 
   26484:	8b 05 06 f4 20 00    	mov    0x20f406(%rip),%eax        # 235890 <__libirc_data_cache_size_half>
   2648a:	8b 15 f8 f3 20 00    	mov    0x20f3f8(%rip),%edx        # 235888 <__libirc_largest_cache_size_half>
   26490:	8b 0d f6 f3 20 00    	mov    0x20f3f6(%rip),%ecx        # 23588c <__libirc_data_cache_size>
   26496:	89 05 68 f9 20 00    	mov    %eax,0x20f968(%rip)        # 235e04 <__libirc_copy_loop_threshold>
   2649c:	89 15 66 f9 20 00    	mov    %edx,0x20f966(%rip)        # 235e08 <__libirc_rep_move_threshold>
   264a2:	89 0d 64 f9 20 00    	mov    %ecx,0x20f964(%rip)        # 235e0c <__libirc_set_loop_threshold>
   264a8:	c3                   	retq   
   264a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000264b0 <__intel_memcpy>:
   264b0:	49 89 d0             	mov    %rdx,%r8
   264b3:	48 89 f9             	mov    %rdi,%rcx
   264b6:	48 89 f2             	mov    %rsi,%rdx
   264b9:	49 83 f8 01          	cmp    $0x1,%r8
   264bd:	48 89 c8             	mov    %rcx,%rax
   264c0:	75 07                	jne    264c9 <__intel_memcpy+0x19>
   264c2:	44 8a 0a             	mov    (%rdx),%r9b
   264c5:	44 88 09             	mov    %r9b,(%rcx)
   264c8:	c3                   	retq   
   264c9:	4c 8d 1d 80 01 00 00 	lea    0x180(%rip),%r11        # 26650 <__intel_memcpy+0x1a0>
   264d0:	49 83 f8 08          	cmp    $0x8,%r8
   264d4:	7f 1a                	jg     264f0 <__intel_memcpy+0x40>
   264d6:	4c 01 c1             	add    %r8,%rcx
   264d9:	4c 01 c2             	add    %r8,%rdx
   264dc:	4f 8b 14 c3          	mov    (%r11,%r8,8),%r10
   264e0:	4f 8d 1c 1a          	lea    (%r10,%r11,1),%r11
   264e4:	41 ff e3             	jmpq   *%r11
   264e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   264ee:	00 00 
   264f0:	48 f7 c1 07 00 00 00 	test   $0x7,%rcx
   264f7:	75 25                	jne    2651e <__intel_memcpy+0x6e>
   264f9:	4c 8d 1d 50 01 00 00 	lea    0x150(%rip),%r11        # 26650 <__intel_memcpy+0x1a0>
   26500:	49 81 f8 b0 00 00 00 	cmp    $0xb0,%r8
   26507:	0f 8f a3 0e 00 00    	jg     273b0 <__intel_memcpy+0xf00>
   2650d:	4c 01 c1             	add    %r8,%rcx
   26510:	4c 01 c2             	add    %r8,%rdx
   26513:	4f 8b 14 c3          	mov    (%r11,%r8,8),%r10
   26517:	4f 8d 1c 1a          	lea    (%r10,%r11,1),%r11
   2651b:	41 ff e3             	jmpq   *%r11
   2651e:	4c 8d 1d eb 00 00 00 	lea    0xeb(%rip),%r11        # 26610 <__intel_memcpy+0x160>
   26525:	49 89 c9             	mov    %rcx,%r9
   26528:	49 83 e1 07          	and    $0x7,%r9
   2652c:	4f 8b 14 cb          	mov    (%r11,%r9,8),%r10
   26530:	4f 8d 1c 1a          	lea    (%r10,%r11,1),%r11
   26534:	41 ff e3             	jmpq   *%r11
   26537:	44 8a 1a             	mov    (%rdx),%r11b
   2653a:	66 44 8b 52 01       	mov    0x1(%rdx),%r10w
   2653f:	44 8b 4a 03          	mov    0x3(%rdx),%r9d
   26543:	44 88 19             	mov    %r11b,(%rcx)
   26546:	66 44 89 51 01       	mov    %r10w,0x1(%rcx)
   2654b:	44 89 49 03          	mov    %r9d,0x3(%rcx)
   2654f:	49 83 e8 07          	sub    $0x7,%r8
   26553:	48 83 c1 07          	add    $0x7,%rcx
   26557:	48 83 c2 07          	add    $0x7,%rdx
   2655b:	eb 9c                	jmp    264f9 <__intel_memcpy+0x49>
   2655d:	66 44 8b 12          	mov    (%rdx),%r10w
   26561:	44 8b 4a 02          	mov    0x2(%rdx),%r9d
   26565:	66 44 89 11          	mov    %r10w,(%rcx)
   26569:	44 89 49 02          	mov    %r9d,0x2(%rcx)
   2656d:	49 83 e8 06          	sub    $0x6,%r8
   26571:	48 83 c1 06          	add    $0x6,%rcx
   26575:	48 83 c2 06          	add    $0x6,%rdx
   26579:	e9 7b ff ff ff       	jmpq   264f9 <__intel_memcpy+0x49>
   2657e:	44 8a 1a             	mov    (%rdx),%r11b
   26581:	44 8b 4a 01          	mov    0x1(%rdx),%r9d
   26585:	44 88 19             	mov    %r11b,(%rcx)
   26588:	44 89 49 01          	mov    %r9d,0x1(%rcx)
   2658c:	49 83 e8 05          	sub    $0x5,%r8
   26590:	48 83 c1 05          	add    $0x5,%rcx
   26594:	48 83 c2 05          	add    $0x5,%rdx
   26598:	e9 5c ff ff ff       	jmpq   264f9 <__intel_memcpy+0x49>
   2659d:	44 8b 0a             	mov    (%rdx),%r9d
   265a0:	44 89 09             	mov    %r9d,(%rcx)
   265a3:	49 83 e8 04          	sub    $0x4,%r8
   265a7:	48 83 c1 04          	add    $0x4,%rcx
   265ab:	48 83 c2 04          	add    $0x4,%rdx
   265af:	e9 45 ff ff ff       	jmpq   264f9 <__intel_memcpy+0x49>
   265b4:	44 8a 1a             	mov    (%rdx),%r11b
   265b7:	66 44 8b 52 01       	mov    0x1(%rdx),%r10w
   265bc:	44 88 19             	mov    %r11b,(%rcx)
   265bf:	66 44 89 51 01       	mov    %r10w,0x1(%rcx)
   265c4:	49 83 e8 03          	sub    $0x3,%r8
   265c8:	48 83 c1 03          	add    $0x3,%rcx
   265cc:	48 83 c2 03          	add    $0x3,%rdx
   265d0:	e9 24 ff ff ff       	jmpq   264f9 <__intel_memcpy+0x49>
   265d5:	66 44 8b 12          	mov    (%rdx),%r10w
   265d9:	66 44 89 11          	mov    %r10w,(%rcx)
   265dd:	49 83 e8 02          	sub    $0x2,%r8
   265e1:	48 83 c1 02          	add    $0x2,%rcx
   265e5:	48 83 c2 02          	add    $0x2,%rdx
   265e9:	e9 0b ff ff ff       	jmpq   264f9 <__intel_memcpy+0x49>
   265ee:	44 8a 1a             	mov    (%rdx),%r11b
   265f1:	44 88 19             	mov    %r11b,(%rcx)
   265f4:	49 ff c8             	dec    %r8
   265f7:	48 ff c1             	inc    %rcx
   265fa:	48 ff c2             	inc    %rdx
   265fd:	e9 f7 fe ff ff       	jmpq   264f9 <__intel_memcpy+0x49>
   26602:	0f 1f 40 00          	nopl   0x0(%rax)
   26606:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   2660d:	00 00 00 
   26610:	e9 fe ff ff ff       	jmpq   26613 <__intel_memcpy+0x163>
   26615:	ff                   	(bad)  
   26616:	ff                   	(bad)  
   26617:	ff 27                	jmpq   *(%rdi)
   26619:	ff                   	(bad)  
   2661a:	ff                   	(bad)  
   2661b:	ff                   	(bad)  
   2661c:	ff                   	(bad)  
   2661d:	ff                   	(bad)  
   2661e:	ff                   	(bad)  
   2661f:	ff 4d ff             	decl   -0x1(%rbp)
   26622:	ff                   	(bad)  
   26623:	ff                   	(bad)  
   26624:	ff                   	(bad)  
   26625:	ff                   	(bad)  
   26626:	ff                   	(bad)  
   26627:	ff 6e ff             	ljmp   *-0x1(%rsi)
   2662a:	ff                   	(bad)  
   2662b:	ff                   	(bad)  
   2662c:	ff                   	(bad)  
   2662d:	ff                   	(bad)  
   2662e:	ff                   	(bad)  
   2662f:	ff 8d ff ff ff ff    	decl   -0x1(%rbp)
   26635:	ff                   	(bad)  
   26636:	ff                   	(bad)  
   26637:	ff a4 ff ff ff ff ff 	jmpq   *-0x1(%rdi,%rdi,8)
   2663e:	ff                   	(bad)  
   2663f:	ff c5                	inc    %ebp
   26641:	ff                   	(bad)  
   26642:	ff                   	(bad)  
   26643:	ff                   	(bad)  
   26644:	ff                   	(bad)  
   26645:	ff                   	(bad)  
   26646:	ff                   	(bad)  
   26647:	ff                   	(bad)  
   26648:	de ff                	fdivrp %st,%st(7)
   2664a:	ff                   	(bad)  
   2664b:	ff                   	(bad)  
   2664c:	ff                   	(bad)  
   2664d:	ff                   	(bad)  
   2664e:	ff                   	(bad)  
   2664f:	ff f4                	push   %rsp
   26651:	06                   	(bad)  
   26652:	00 00                	add    %al,(%rax)
   26654:	00 00                	add    %al,(%rax)
   26656:	00 00                	add    %al,(%rax)
   26658:	cf                   	iret   
   26659:	07                   	(bad)  
   2665a:	00 00                	add    %al,(%rax)
   2665c:	00 00                	add    %al,(%rax)
   2665e:	00 00                	add    %al,(%rax)
   26660:	b2 08                	mov    $0x8,%dl
   26662:	00 00                	add    %al,(%rax)
   26664:	00 00                	add    %al,(%rax)
   26666:	00 00                	add    %al,(%rax)
   26668:	97                   	xchg   %eax,%edi
   26669:	09 00                	or     %eax,(%rax)
   2666b:	00 00                	add    %al,(%rax)
   2666d:	00 00                	add    %al,(%rax)
   2666f:	00 84 0a 00 00 00 00 	add    %al,0x0(%rdx,%rcx,1)
   26676:	00 00                	add    %al,(%rax)
   26678:	67 0b 00             	or     (%eax),%eax
   2667b:	00 00                	add    %al,(%rax)
   2667d:	00 00                	add    %al,(%rax)
   2667f:	00 52 0c             	add    %dl,0xc(%rdx)
   26682:	00 00                	add    %al,(%rax)
   26684:	00 00                	add    %al,(%rax)
   26686:	00 00                	add    %al,(%rax)
   26688:	3f                   	(bad)  
   26689:	0d 00 00 00 00       	or     $0x0,%eax
   2668e:	00 00                	add    %al,(%rax)
   26690:	ec                   	in     (%dx),%al
   26691:	06                   	(bad)  
   26692:	00 00                	add    %al,(%rax)
   26694:	00 00                	add    %al,(%rax)
   26696:	00 00                	add    %al,(%rax)
   26698:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
   2669e:	00 00                	add    %al,(%rax)
   266a0:	aa                   	stos   %al,%es:(%rdi)
   266a1:	08 00                	or     %al,(%rax)
   266a3:	00 00                	add    %al,(%rax)
   266a5:	00 00                	add    %al,(%rax)
   266a7:	00 8f 09 00 00 00    	add    %cl,0x9(%rdi)
   266ad:	00 00                	add    %al,(%rax)
   266af:	00 7c 0a 00          	add    %bh,0x0(%rdx,%rcx,1)
   266b3:	00 00                	add    %al,(%rax)
   266b5:	00 00                	add    %al,(%rax)
   266b7:	00 5f 0b             	add    %bl,0xb(%rdi)
   266ba:	00 00                	add    %al,(%rax)
   266bc:	00 00                	add    %al,(%rax)
   266be:	00 00                	add    %al,(%rax)
   266c0:	4a 0c 00             	rex.WX or $0x0,%al
   266c3:	00 00                	add    %al,(%rax)
   266c5:	00 00                	add    %al,(%rax)
   266c7:	00 37                	add    %dh,(%rdi)
   266c9:	0d 00 00 00 00       	or     $0x0,%eax
   266ce:	00 00                	add    %al,(%rax)
   266d0:	e4 06                	in     $0x6,%al
   266d2:	00 00                	add    %al,(%rax)
   266d4:	00 00                	add    %al,(%rax)
   266d6:	00 00                	add    %al,(%rax)
   266d8:	bf 07 00 00 00       	mov    $0x7,%edi
   266dd:	00 00                	add    %al,(%rax)
   266df:	00 a2 08 00 00 00    	add    %ah,0x8(%rdx)
   266e5:	00 00                	add    %al,(%rax)
   266e7:	00 87 09 00 00 00    	add    %al,0x9(%rdi)
   266ed:	00 00                	add    %al,(%rax)
   266ef:	00 74 0a 00          	add    %dh,0x0(%rdx,%rcx,1)
   266f3:	00 00                	add    %al,(%rax)
   266f5:	00 00                	add    %al,(%rax)
   266f7:	00 57 0b             	add    %dl,0xb(%rdi)
   266fa:	00 00                	add    %al,(%rax)
   266fc:	00 00                	add    %al,(%rax)
   266fe:	00 00                	add    %al,(%rax)
   26700:	42 0c 00             	rex.X or $0x0,%al
   26703:	00 00                	add    %al,(%rax)
   26705:	00 00                	add    %al,(%rax)
   26707:	00 2f                	add    %ch,(%rdi)
   26709:	0d 00 00 00 00       	or     $0x0,%eax
   2670e:	00 00                	add    %al,(%rax)
   26710:	dc 06                	faddl  (%rsi)
   26712:	00 00                	add    %al,(%rax)
   26714:	00 00                	add    %al,(%rax)
   26716:	00 00                	add    %al,(%rax)
   26718:	b7 07                	mov    $0x7,%bh
   2671a:	00 00                	add    %al,(%rax)
   2671c:	00 00                	add    %al,(%rax)
   2671e:	00 00                	add    %al,(%rax)
   26720:	9a                   	(bad)  
   26721:	08 00                	or     %al,(%rax)
   26723:	00 00                	add    %al,(%rax)
   26725:	00 00                	add    %al,(%rax)
   26727:	00 7f 09             	add    %bh,0x9(%rdi)
   2672a:	00 00                	add    %al,(%rax)
   2672c:	00 00                	add    %al,(%rax)
   2672e:	00 00                	add    %al,(%rax)
   26730:	6c                   	insb   (%dx),%es:(%rdi)
   26731:	0a 00                	or     (%rax),%al
   26733:	00 00                	add    %al,(%rax)
   26735:	00 00                	add    %al,(%rax)
   26737:	00 4f 0b             	add    %cl,0xb(%rdi)
   2673a:	00 00                	add    %al,(%rax)
   2673c:	00 00                	add    %al,(%rax)
   2673e:	00 00                	add    %al,(%rax)
   26740:	3a 0c 00             	cmp    (%rax,%rax,1),%cl
   26743:	00 00                	add    %al,(%rax)
   26745:	00 00                	add    %al,(%rax)
   26747:	00 27                	add    %ah,(%rdi)
   26749:	0d 00 00 00 00       	or     $0x0,%eax
   2674e:	00 00                	add    %al,(%rax)
   26750:	d4                   	(bad)  
   26751:	06                   	(bad)  
   26752:	00 00                	add    %al,(%rax)
   26754:	00 00                	add    %al,(%rax)
   26756:	00 00                	add    %al,(%rax)
   26758:	af                   	scas   %es:(%rdi),%eax
   26759:	07                   	(bad)  
   2675a:	00 00                	add    %al,(%rax)
   2675c:	00 00                	add    %al,(%rax)
   2675e:	00 00                	add    %al,(%rax)
   26760:	92                   	xchg   %eax,%edx
   26761:	08 00                	or     %al,(%rax)
   26763:	00 00                	add    %al,(%rax)
   26765:	00 00                	add    %al,(%rax)
   26767:	00 77 09             	add    %dh,0x9(%rdi)
   2676a:	00 00                	add    %al,(%rax)
   2676c:	00 00                	add    %al,(%rax)
   2676e:	00 00                	add    %al,(%rax)
   26770:	64 0a 00             	or     %fs:(%rax),%al
   26773:	00 00                	add    %al,(%rax)
   26775:	00 00                	add    %al,(%rax)
   26777:	00 47 0b             	add    %al,0xb(%rdi)
   2677a:	00 00                	add    %al,(%rax)
   2677c:	00 00                	add    %al,(%rax)
   2677e:	00 00                	add    %al,(%rax)
   26780:	32 0c 00             	xor    (%rax,%rax,1),%cl
   26783:	00 00                	add    %al,(%rax)
   26785:	00 00                	add    %al,(%rax)
   26787:	00 1f                	add    %bl,(%rdi)
   26789:	0d 00 00 00 00       	or     $0x0,%eax
   2678e:	00 00                	add    %al,(%rax)
   26790:	cc                   	int3   
   26791:	06                   	(bad)  
   26792:	00 00                	add    %al,(%rax)
   26794:	00 00                	add    %al,(%rax)
   26796:	00 00                	add    %al,(%rax)
   26798:	a7                   	cmpsl  %es:(%rdi),%ds:(%rsi)
   26799:	07                   	(bad)  
   2679a:	00 00                	add    %al,(%rax)
   2679c:	00 00                	add    %al,(%rax)
   2679e:	00 00                	add    %al,(%rax)
   267a0:	8a 08                	mov    (%rax),%cl
   267a2:	00 00                	add    %al,(%rax)
   267a4:	00 00                	add    %al,(%rax)
   267a6:	00 00                	add    %al,(%rax)
   267a8:	6f                   	outsl  %ds:(%rsi),(%dx)
   267a9:	09 00                	or     %eax,(%rax)
   267ab:	00 00                	add    %al,(%rax)
   267ad:	00 00                	add    %al,(%rax)
   267af:	00 5c 0a 00          	add    %bl,0x0(%rdx,%rcx,1)
   267b3:	00 00                	add    %al,(%rax)
   267b5:	00 00                	add    %al,(%rax)
   267b7:	00 3f                	add    %bh,(%rdi)
   267b9:	0b 00                	or     (%rax),%eax
   267bb:	00 00                	add    %al,(%rax)
   267bd:	00 00                	add    %al,(%rax)
   267bf:	00 2a                	add    %ch,(%rdx)
   267c1:	0c 00                	or     $0x0,%al
   267c3:	00 00                	add    %al,(%rax)
   267c5:	00 00                	add    %al,(%rax)
   267c7:	00 17                	add    %dl,(%rdi)
   267c9:	0d 00 00 00 00       	or     $0x0,%eax
   267ce:	00 00                	add    %al,(%rax)
   267d0:	c4                   	(bad)  
   267d1:	06                   	(bad)  
   267d2:	00 00                	add    %al,(%rax)
   267d4:	00 00                	add    %al,(%rax)
   267d6:	00 00                	add    %al,(%rax)
   267d8:	9f                   	lahf   
   267d9:	07                   	(bad)  
   267da:	00 00                	add    %al,(%rax)
   267dc:	00 00                	add    %al,(%rax)
   267de:	00 00                	add    %al,(%rax)
   267e0:	82                   	(bad)  
   267e1:	08 00                	or     %al,(%rax)
   267e3:	00 00                	add    %al,(%rax)
   267e5:	00 00                	add    %al,(%rax)
   267e7:	00 67 09             	add    %ah,0x9(%rdi)
   267ea:	00 00                	add    %al,(%rax)
   267ec:	00 00                	add    %al,(%rax)
   267ee:	00 00                	add    %al,(%rax)
   267f0:	54                   	push   %rsp
   267f1:	0a 00                	or     (%rax),%al
   267f3:	00 00                	add    %al,(%rax)
   267f5:	00 00                	add    %al,(%rax)
   267f7:	00 37                	add    %dh,(%rdi)
   267f9:	0b 00                	or     (%rax),%eax
   267fb:	00 00                	add    %al,(%rax)
   267fd:	00 00                	add    %al,(%rax)
   267ff:	00 22                	add    %ah,(%rdx)
   26801:	0c 00                	or     $0x0,%al
   26803:	00 00                	add    %al,(%rax)
   26805:	00 00                	add    %al,(%rax)
   26807:	00 0f                	add    %cl,(%rdi)
   26809:	0d 00 00 00 00       	or     $0x0,%eax
   2680e:	00 00                	add    %al,(%rax)
   26810:	bc 06 00 00 00       	mov    $0x6,%esp
   26815:	00 00                	add    %al,(%rax)
   26817:	00 97 07 00 00 00    	add    %dl,0x7(%rdi)
   2681d:	00 00                	add    %al,(%rax)
   2681f:	00 7a 08             	add    %bh,0x8(%rdx)
   26822:	00 00                	add    %al,(%rax)
   26824:	00 00                	add    %al,(%rax)
   26826:	00 00                	add    %al,(%rax)
   26828:	5f                   	pop    %rdi
   26829:	09 00                	or     %eax,(%rax)
   2682b:	00 00                	add    %al,(%rax)
   2682d:	00 00                	add    %al,(%rax)
   2682f:	00 4c 0a 00          	add    %cl,0x0(%rdx,%rcx,1)
   26833:	00 00                	add    %al,(%rax)
   26835:	00 00                	add    %al,(%rax)
   26837:	00 2f                	add    %ch,(%rdi)
   26839:	0b 00                	or     (%rax),%eax
   2683b:	00 00                	add    %al,(%rax)
   2683d:	00 00                	add    %al,(%rax)
   2683f:	00 1a                	add    %bl,(%rdx)
   26841:	0c 00                	or     $0x0,%al
   26843:	00 00                	add    %al,(%rax)
   26845:	00 00                	add    %al,(%rax)
   26847:	00 07                	add    %al,(%rdi)
   26849:	0d 00 00 00 00       	or     $0x0,%eax
   2684e:	00 00                	add    %al,(%rax)
   26850:	b4 06                	mov    $0x6,%ah
   26852:	00 00                	add    %al,(%rax)
   26854:	00 00                	add    %al,(%rax)
   26856:	00 00                	add    %al,(%rax)
   26858:	8f 07                	popq   (%rdi)
   2685a:	00 00                	add    %al,(%rax)
   2685c:	00 00                	add    %al,(%rax)
   2685e:	00 00                	add    %al,(%rax)
   26860:	72 08                	jb     2686a <__intel_memcpy+0x3ba>
   26862:	00 00                	add    %al,(%rax)
   26864:	00 00                	add    %al,(%rax)
   26866:	00 00                	add    %al,(%rax)
   26868:	57                   	push   %rdi
   26869:	09 00                	or     %eax,(%rax)
   2686b:	00 00                	add    %al,(%rax)
   2686d:	00 00                	add    %al,(%rax)
   2686f:	00 44 0a 00          	add    %al,0x0(%rdx,%rcx,1)
   26873:	00 00                	add    %al,(%rax)
   26875:	00 00                	add    %al,(%rax)
   26877:	00 27                	add    %ah,(%rdi)
   26879:	0b 00                	or     (%rax),%eax
   2687b:	00 00                	add    %al,(%rax)
   2687d:	00 00                	add    %al,(%rax)
   2687f:	00 12                	add    %dl,(%rdx)
   26881:	0c 00                	or     $0x0,%al
   26883:	00 00                	add    %al,(%rax)
   26885:	00 00                	add    %al,(%rax)
   26887:	00 ff                	add    %bh,%bh
   26889:	0c 00                	or     $0x0,%al
   2688b:	00 00                	add    %al,(%rax)
   2688d:	00 00                	add    %al,(%rax)
   2688f:	00 ac 06 00 00 00 00 	add    %ch,0x0(%rsi,%rax,1)
   26896:	00 00                	add    %al,(%rax)
   26898:	87 07                	xchg   %eax,(%rdi)
   2689a:	00 00                	add    %al,(%rax)
   2689c:	00 00                	add    %al,(%rax)
   2689e:	00 00                	add    %al,(%rax)
   268a0:	6a 08                	pushq  $0x8
   268a2:	00 00                	add    %al,(%rax)
   268a4:	00 00                	add    %al,(%rax)
   268a6:	00 00                	add    %al,(%rax)
   268a8:	4f 09 00             	rex.WRXB or %r8,(%r8)
   268ab:	00 00                	add    %al,(%rax)
   268ad:	00 00                	add    %al,(%rax)
   268af:	00 3c 0a             	add    %bh,(%rdx,%rcx,1)
   268b2:	00 00                	add    %al,(%rax)
   268b4:	00 00                	add    %al,(%rax)
   268b6:	00 00                	add    %al,(%rax)
   268b8:	1f                   	(bad)  
   268b9:	0b 00                	or     (%rax),%eax
   268bb:	00 00                	add    %al,(%rax)
   268bd:	00 00                	add    %al,(%rax)
   268bf:	00 0a                	add    %cl,(%rdx)
   268c1:	0c 00                	or     $0x0,%al
   268c3:	00 00                	add    %al,(%rax)
   268c5:	00 00                	add    %al,(%rax)
   268c7:	00 f7                	add    %dh,%bh
   268c9:	0c 00                	or     $0x0,%al
   268cb:	00 00                	add    %al,(%rax)
   268cd:	00 00                	add    %al,(%rax)
   268cf:	00 a4 06 00 00 00 00 	add    %ah,0x0(%rsi,%rax,1)
   268d6:	00 00                	add    %al,(%rax)
   268d8:	7f 07                	jg     268e1 <__intel_memcpy+0x431>
   268da:	00 00                	add    %al,(%rax)
   268dc:	00 00                	add    %al,(%rax)
   268de:	00 00                	add    %al,(%rax)
   268e0:	62                   	(bad)  
   268e1:	08 00                	or     %al,(%rax)
   268e3:	00 00                	add    %al,(%rax)
   268e5:	00 00                	add    %al,(%rax)
   268e7:	00 47 09             	add    %al,0x9(%rdi)
   268ea:	00 00                	add    %al,(%rax)
   268ec:	00 00                	add    %al,(%rax)
   268ee:	00 00                	add    %al,(%rax)
   268f0:	34 0a                	xor    $0xa,%al
   268f2:	00 00                	add    %al,(%rax)
   268f4:	00 00                	add    %al,(%rax)
   268f6:	00 00                	add    %al,(%rax)
   268f8:	17                   	(bad)  
   268f9:	0b 00                	or     (%rax),%eax
   268fb:	00 00                	add    %al,(%rax)
   268fd:	00 00                	add    %al,(%rax)
   268ff:	00 02                	add    %al,(%rdx)
   26901:	0c 00                	or     $0x0,%al
   26903:	00 00                	add    %al,(%rax)
   26905:	00 00                	add    %al,(%rax)
   26907:	00 ef                	add    %ch,%bh
   26909:	0c 00                	or     $0x0,%al
   2690b:	00 00                	add    %al,(%rax)
   2690d:	00 00                	add    %al,(%rax)
   2690f:	00 9c 06 00 00 00 00 	add    %bl,0x0(%rsi,%rax,1)
   26916:	00 00                	add    %al,(%rax)
   26918:	77 07                	ja     26921 <__intel_memcpy+0x471>
   2691a:	00 00                	add    %al,(%rax)
   2691c:	00 00                	add    %al,(%rax)
   2691e:	00 00                	add    %al,(%rax)
   26920:	5a                   	pop    %rdx
   26921:	08 00                	or     %al,(%rax)
   26923:	00 00                	add    %al,(%rax)
   26925:	00 00                	add    %al,(%rax)
   26927:	00 3f                	add    %bh,(%rdi)
   26929:	09 00                	or     %eax,(%rax)
   2692b:	00 00                	add    %al,(%rax)
   2692d:	00 00                	add    %al,(%rax)
   2692f:	00 2c 0a             	add    %ch,(%rdx,%rcx,1)
   26932:	00 00                	add    %al,(%rax)
   26934:	00 00                	add    %al,(%rax)
   26936:	00 00                	add    %al,(%rax)
   26938:	0f 0b                	ud2    
   2693a:	00 00                	add    %al,(%rax)
   2693c:	00 00                	add    %al,(%rax)
   2693e:	00 00                	add    %al,(%rax)
   26940:	fa                   	cli    
   26941:	0b 00                	or     (%rax),%eax
   26943:	00 00                	add    %al,(%rax)
   26945:	00 00                	add    %al,(%rax)
   26947:	00 e7                	add    %ah,%bh
   26949:	0c 00                	or     $0x0,%al
   2694b:	00 00                	add    %al,(%rax)
   2694d:	00 00                	add    %al,(%rax)
   2694f:	00 94 06 00 00 00 00 	add    %dl,0x0(%rsi,%rax,1)
   26956:	00 00                	add    %al,(%rax)
   26958:	6f                   	outsl  %ds:(%rsi),(%dx)
   26959:	07                   	(bad)  
   2695a:	00 00                	add    %al,(%rax)
   2695c:	00 00                	add    %al,(%rax)
   2695e:	00 00                	add    %al,(%rax)
   26960:	52                   	push   %rdx
   26961:	08 00                	or     %al,(%rax)
   26963:	00 00                	add    %al,(%rax)
   26965:	00 00                	add    %al,(%rax)
   26967:	00 37                	add    %dh,(%rdi)
   26969:	09 00                	or     %eax,(%rax)
   2696b:	00 00                	add    %al,(%rax)
   2696d:	00 00                	add    %al,(%rax)
   2696f:	00 24 0a             	add    %ah,(%rdx,%rcx,1)
   26972:	00 00                	add    %al,(%rax)
   26974:	00 00                	add    %al,(%rax)
   26976:	00 00                	add    %al,(%rax)
   26978:	07                   	(bad)  
   26979:	0b 00                	or     (%rax),%eax
   2697b:	00 00                	add    %al,(%rax)
   2697d:	00 00                	add    %al,(%rax)
   2697f:	00 f2                	add    %dh,%dl
   26981:	0b 00                	or     (%rax),%eax
   26983:	00 00                	add    %al,(%rax)
   26985:	00 00                	add    %al,(%rax)
   26987:	00 df                	add    %bl,%bh
   26989:	0c 00                	or     $0x0,%al
   2698b:	00 00                	add    %al,(%rax)
   2698d:	00 00                	add    %al,(%rax)
   2698f:	00 8c 06 00 00 00 00 	add    %cl,0x0(%rsi,%rax,1)
   26996:	00 00                	add    %al,(%rax)
   26998:	67 07                	addr32 (bad) 
   2699a:	00 00                	add    %al,(%rax)
   2699c:	00 00                	add    %al,(%rax)
   2699e:	00 00                	add    %al,(%rax)
   269a0:	4a 08 00             	rex.WX or %al,(%rax)
   269a3:	00 00                	add    %al,(%rax)
   269a5:	00 00                	add    %al,(%rax)
   269a7:	00 2f                	add    %ch,(%rdi)
   269a9:	09 00                	or     %eax,(%rax)
   269ab:	00 00                	add    %al,(%rax)
   269ad:	00 00                	add    %al,(%rax)
   269af:	00 1c 0a             	add    %bl,(%rdx,%rcx,1)
   269b2:	00 00                	add    %al,(%rax)
   269b4:	00 00                	add    %al,(%rax)
   269b6:	00 00                	add    %al,(%rax)
   269b8:	ff 0a                	decl   (%rdx)
   269ba:	00 00                	add    %al,(%rax)
   269bc:	00 00                	add    %al,(%rax)
   269be:	00 00                	add    %al,(%rax)
   269c0:	ea                   	(bad)  
   269c1:	0b 00                	or     (%rax),%eax
   269c3:	00 00                	add    %al,(%rax)
   269c5:	00 00                	add    %al,(%rax)
   269c7:	00 d7                	add    %dl,%bh
   269c9:	0c 00                	or     $0x0,%al
   269cb:	00 00                	add    %al,(%rax)
   269cd:	00 00                	add    %al,(%rax)
   269cf:	00 84 06 00 00 00 00 	add    %al,0x0(%rsi,%rax,1)
   269d6:	00 00                	add    %al,(%rax)
   269d8:	5f                   	pop    %rdi
   269d9:	07                   	(bad)  
   269da:	00 00                	add    %al,(%rax)
   269dc:	00 00                	add    %al,(%rax)
   269de:	00 00                	add    %al,(%rax)
   269e0:	42 08 00             	rex.X or %al,(%rax)
   269e3:	00 00                	add    %al,(%rax)
   269e5:	00 00                	add    %al,(%rax)
   269e7:	00 27                	add    %ah,(%rdi)
   269e9:	09 00                	or     %eax,(%rax)
   269eb:	00 00                	add    %al,(%rax)
   269ed:	00 00                	add    %al,(%rax)
   269ef:	00 14 0a             	add    %dl,(%rdx,%rcx,1)
   269f2:	00 00                	add    %al,(%rax)
   269f4:	00 00                	add    %al,(%rax)
   269f6:	00 00                	add    %al,(%rax)
   269f8:	f7 0a 00 00 00 00    	testl  $0x0,(%rdx)
   269fe:	00 00                	add    %al,(%rax)
   26a00:	e2 0b                	loop   26a0d <__intel_memcpy+0x55d>
   26a02:	00 00                	add    %al,(%rax)
   26a04:	00 00                	add    %al,(%rax)
   26a06:	00 00                	add    %al,(%rax)
   26a08:	cf                   	iret   
   26a09:	0c 00                	or     $0x0,%al
   26a0b:	00 00                	add    %al,(%rax)
   26a0d:	00 00                	add    %al,(%rax)
   26a0f:	00 7c 06 00          	add    %bh,0x0(%rsi,%rax,1)
   26a13:	00 00                	add    %al,(%rax)
   26a15:	00 00                	add    %al,(%rax)
   26a17:	00 57 07             	add    %dl,0x7(%rdi)
   26a1a:	00 00                	add    %al,(%rax)
   26a1c:	00 00                	add    %al,(%rax)
   26a1e:	00 00                	add    %al,(%rax)
   26a20:	3a 08                	cmp    (%rax),%cl
   26a22:	00 00                	add    %al,(%rax)
   26a24:	00 00                	add    %al,(%rax)
   26a26:	00 00                	add    %al,(%rax)
   26a28:	1f                   	(bad)  
   26a29:	09 00                	or     %eax,(%rax)
   26a2b:	00 00                	add    %al,(%rax)
   26a2d:	00 00                	add    %al,(%rax)
   26a2f:	00 0c 0a             	add    %cl,(%rdx,%rcx,1)
   26a32:	00 00                	add    %al,(%rax)
   26a34:	00 00                	add    %al,(%rax)
   26a36:	00 00                	add    %al,(%rax)
   26a38:	ef                   	out    %eax,(%dx)
   26a39:	0a 00                	or     (%rax),%al
   26a3b:	00 00                	add    %al,(%rax)
   26a3d:	00 00                	add    %al,(%rax)
   26a3f:	00 da                	add    %bl,%dl
   26a41:	0b 00                	or     (%rax),%eax
   26a43:	00 00                	add    %al,(%rax)
   26a45:	00 00                	add    %al,(%rax)
   26a47:	00 c7                	add    %al,%bh
   26a49:	0c 00                	or     $0x0,%al
   26a4b:	00 00                	add    %al,(%rax)
   26a4d:	00 00                	add    %al,(%rax)
   26a4f:	00 74 06 00          	add    %dh,0x0(%rsi,%rax,1)
   26a53:	00 00                	add    %al,(%rax)
   26a55:	00 00                	add    %al,(%rax)
   26a57:	00 49 07             	add    %cl,0x7(%rcx)
   26a5a:	00 00                	add    %al,(%rax)
   26a5c:	00 00                	add    %al,(%rax)
   26a5e:	00 00                	add    %al,(%rax)
   26a60:	2c 08                	sub    $0x8,%al
   26a62:	00 00                	add    %al,(%rax)
   26a64:	00 00                	add    %al,(%rax)
   26a66:	00 00                	add    %al,(%rax)
   26a68:	11 09                	adc    %ecx,(%rcx)
   26a6a:	00 00                	add    %al,(%rax)
   26a6c:	00 00                	add    %al,(%rax)
   26a6e:	00 00                	add    %al,(%rax)
   26a70:	fe 09                	decb   (%rcx)
   26a72:	00 00                	add    %al,(%rax)
   26a74:	00 00                	add    %al,(%rax)
   26a76:	00 00                	add    %al,(%rax)
   26a78:	e1 0a                	loope  26a84 <__intel_memcpy+0x5d4>
   26a7a:	00 00                	add    %al,(%rax)
   26a7c:	00 00                	add    %al,(%rax)
   26a7e:	00 00                	add    %al,(%rax)
   26a80:	cc                   	int3   
   26a81:	0b 00                	or     (%rax),%eax
   26a83:	00 00                	add    %al,(%rax)
   26a85:	00 00                	add    %al,(%rax)
   26a87:	00 b9 0c 00 00 00    	add    %bh,0xc(%rcx)
   26a8d:	00 00                	add    %al,(%rax)
   26a8f:	00 66 06             	add    %ah,0x6(%rsi)
   26a92:	00 00                	add    %al,(%rax)
   26a94:	00 00                	add    %al,(%rax)
   26a96:	00 00                	add    %al,(%rax)
   26a98:	3b 07                	cmp    (%rdi),%eax
   26a9a:	00 00                	add    %al,(%rax)
   26a9c:	00 00                	add    %al,(%rax)
   26a9e:	00 00                	add    %al,(%rax)
   26aa0:	1e                   	(bad)  
   26aa1:	08 00                	or     %al,(%rax)
   26aa3:	00 00                	add    %al,(%rax)
   26aa5:	00 00                	add    %al,(%rax)
   26aa7:	00 03                	add    %al,(%rbx)
   26aa9:	09 00                	or     %eax,(%rax)
   26aab:	00 00                	add    %al,(%rax)
   26aad:	00 00                	add    %al,(%rax)
   26aaf:	00 f0                	add    %dh,%al
   26ab1:	09 00                	or     %eax,(%rax)
   26ab3:	00 00                	add    %al,(%rax)
   26ab5:	00 00                	add    %al,(%rax)
   26ab7:	00 d3                	add    %dl,%bl
   26ab9:	0a 00                	or     (%rax),%al
   26abb:	00 00                	add    %al,(%rax)
   26abd:	00 00                	add    %al,(%rax)
   26abf:	00 be 0b 00 00 00    	add    %bh,0xb(%rsi)
   26ac5:	00 00                	add    %al,(%rax)
   26ac7:	00 ab 0c 00 00 00    	add    %ch,0xc(%rbx)
   26acd:	00 00                	add    %al,(%rax)
   26acf:	00 58 06             	add    %bl,0x6(%rax)
   26ad2:	00 00                	add    %al,(%rax)
   26ad4:	00 00                	add    %al,(%rax)
   26ad6:	00 00                	add    %al,(%rax)
   26ad8:	2d 07 00 00 00       	sub    $0x7,%eax
   26add:	00 00                	add    %al,(%rax)
   26adf:	00 10                	add    %dl,(%rax)
   26ae1:	08 00                	or     %al,(%rax)
   26ae3:	00 00                	add    %al,(%rax)
   26ae5:	00 00                	add    %al,(%rax)
   26ae7:	00 f5                	add    %dh,%ch
   26ae9:	08 00                	or     %al,(%rax)
   26aeb:	00 00                	add    %al,(%rax)
   26aed:	00 00                	add    %al,(%rax)
   26aef:	00 e2                	add    %ah,%dl
   26af1:	09 00                	or     %eax,(%rax)
   26af3:	00 00                	add    %al,(%rax)
   26af5:	00 00                	add    %al,(%rax)
   26af7:	00 c5                	add    %al,%ch
   26af9:	0a 00                	or     (%rax),%al
   26afb:	00 00                	add    %al,(%rax)
   26afd:	00 00                	add    %al,(%rax)
   26aff:	00 b0 0b 00 00 00    	add    %dh,0xb(%rax)
   26b05:	00 00                	add    %al,(%rax)
   26b07:	00 9d 0c 00 00 00    	add    %bl,0xc(%rbp)
   26b0d:	00 00                	add    %al,(%rax)
   26b0f:	00 4a 06             	add    %cl,0x6(%rdx)
   26b12:	00 00                	add    %al,(%rax)
   26b14:	00 00                	add    %al,(%rax)
   26b16:	00 00                	add    %al,(%rax)
   26b18:	1f                   	(bad)  
   26b19:	07                   	(bad)  
   26b1a:	00 00                	add    %al,(%rax)
   26b1c:	00 00                	add    %al,(%rax)
   26b1e:	00 00                	add    %al,(%rax)
   26b20:	02 08                	add    (%rax),%cl
   26b22:	00 00                	add    %al,(%rax)
   26b24:	00 00                	add    %al,(%rax)
   26b26:	00 00                	add    %al,(%rax)
   26b28:	e7 08                	out    %eax,$0x8
   26b2a:	00 00                	add    %al,(%rax)
   26b2c:	00 00                	add    %al,(%rax)
   26b2e:	00 00                	add    %al,(%rax)
   26b30:	d4                   	(bad)  
   26b31:	09 00                	or     %eax,(%rax)
   26b33:	00 00                	add    %al,(%rax)
   26b35:	00 00                	add    %al,(%rax)
   26b37:	00 b7 0a 00 00 00    	add    %dh,0xa(%rdi)
   26b3d:	00 00                	add    %al,(%rax)
   26b3f:	00 a2 0b 00 00 00    	add    %ah,0xb(%rdx)
   26b45:	00 00                	add    %al,(%rax)
   26b47:	00 8f 0c 00 00 00    	add    %cl,0xc(%rdi)
   26b4d:	00 00                	add    %al,(%rax)
   26b4f:	00 3c 06             	add    %bh,(%rsi,%rax,1)
   26b52:	00 00                	add    %al,(%rax)
   26b54:	00 00                	add    %al,(%rax)
   26b56:	00 00                	add    %al,(%rax)
   26b58:	11 07                	adc    %eax,(%rdi)
   26b5a:	00 00                	add    %al,(%rax)
   26b5c:	00 00                	add    %al,(%rax)
   26b5e:	00 00                	add    %al,(%rax)
   26b60:	f4                   	hlt    
   26b61:	07                   	(bad)  
   26b62:	00 00                	add    %al,(%rax)
   26b64:	00 00                	add    %al,(%rax)
   26b66:	00 00                	add    %al,(%rax)
   26b68:	d9 08                	(bad)  (%rax)
   26b6a:	00 00                	add    %al,(%rax)
   26b6c:	00 00                	add    %al,(%rax)
   26b6e:	00 00                	add    %al,(%rax)
   26b70:	c6                   	(bad)  
   26b71:	09 00                	or     %eax,(%rax)
   26b73:	00 00                	add    %al,(%rax)
   26b75:	00 00                	add    %al,(%rax)
   26b77:	00 a9 0a 00 00 00    	add    %ch,0xa(%rcx)
   26b7d:	00 00                	add    %al,(%rax)
   26b7f:	00 94 0b 00 00 00 00 	add    %dl,0x0(%rbx,%rcx,1)
   26b86:	00 00                	add    %al,(%rax)
   26b88:	81 0c 00 00 00 00 00 	orl    $0x0,(%rax,%rax,1)
   26b8f:	00 2e                	add    %ch,(%rsi)
   26b91:	06                   	(bad)  
   26b92:	00 00                	add    %al,(%rax)
   26b94:	00 00                	add    %al,(%rax)
   26b96:	00 00                	add    %al,(%rax)
   26b98:	03 07                	add    (%rdi),%eax
   26b9a:	00 00                	add    %al,(%rax)
   26b9c:	00 00                	add    %al,(%rax)
   26b9e:	00 00                	add    %al,(%rax)
   26ba0:	e6 07                	out    %al,$0x7
   26ba2:	00 00                	add    %al,(%rax)
   26ba4:	00 00                	add    %al,(%rax)
   26ba6:	00 00                	add    %al,(%rax)
   26ba8:	cb                   	lret   
   26ba9:	08 00                	or     %al,(%rax)
   26bab:	00 00                	add    %al,(%rax)
   26bad:	00 00                	add    %al,(%rax)
   26baf:	00 b8 09 00 00 00    	add    %bh,0x9(%rax)
   26bb5:	00 00                	add    %al,(%rax)
   26bb7:	00 9b 0a 00 00 00    	add    %bl,0xa(%rbx)
   26bbd:	00 00                	add    %al,(%rax)
   26bbf:	00 86 0b 00 00 00    	add    %al,0xb(%rsi)
   26bc5:	00 00                	add    %al,(%rax)
   26bc7:	00 73 0c             	add    %dh,0xc(%rbx)
   26bca:	00 00                	add    %al,(%rax)
   26bcc:	00 00                	add    %al,(%rax)
   26bce:	00 00                	add    %al,(%rax)
   26bd0:	20 06                	and    %al,(%rsi)
   26bd2:	00 00                	add    %al,(%rax)
   26bd4:	00 00                	add    %al,(%rax)
   26bd6:	00 00                	add    %al,(%rax)
   26bd8:	f5                   	cmc    
   26bd9:	06                   	(bad)  
   26bda:	00 00                	add    %al,(%rax)
   26bdc:	00 00                	add    %al,(%rax)
   26bde:	00 00                	add    %al,(%rax)
   26be0:	d8 07                	fadds  (%rdi)
   26be2:	00 00                	add    %al,(%rax)
   26be4:	00 00                	add    %al,(%rax)
   26be6:	00 00                	add    %al,(%rax)
   26be8:	bd 08 00 00 00       	mov    $0x8,%ebp
   26bed:	00 00                	add    %al,(%rax)
   26bef:	00 aa 09 00 00 00    	add    %ch,0x9(%rdx)
   26bf5:	00 00                	add    %al,(%rax)
   26bf7:	00 8d 0a 00 00 00    	add    %cl,0xa(%rbp)
   26bfd:	00 00                	add    %al,(%rax)
   26bff:	00 78 0b             	add    %bh,0xb(%rax)
   26c02:	00 00                	add    %al,(%rax)
   26c04:	00 00                	add    %al,(%rax)
   26c06:	00 00                	add    %al,(%rax)
   26c08:	65 0c 00             	gs or  $0x0,%al
   26c0b:	00 00                	add    %al,(%rax)
   26c0d:	00 00                	add    %al,(%rax)
   26c0f:	00 c3                	add    %al,%bl
   26c11:	48 f7 c1 01 00 00 00 	test   $0x1,%rcx
   26c18:	74 12                	je     26c2c <__intel_memcpy+0x77c>
   26c1a:	44 8a 12             	mov    (%rdx),%r10b
   26c1d:	44 88 11             	mov    %r10b,(%rcx)
   26c20:	48 83 c1 01          	add    $0x1,%rcx
   26c24:	49 83 e8 01          	sub    $0x1,%r8
   26c28:	48 83 c2 01          	add    $0x1,%rdx
   26c2c:	48 f7 c1 02 00 00 00 	test   $0x2,%rcx
   26c33:	74 14                	je     26c49 <__intel_memcpy+0x799>
   26c35:	66 44 8b 12          	mov    (%rdx),%r10w
   26c39:	66 44 89 11          	mov    %r10w,(%rcx)
   26c3d:	48 83 c1 02          	add    $0x2,%rcx
   26c41:	49 83 e8 02          	sub    $0x2,%r8
   26c45:	48 83 c2 02          	add    $0x2,%rdx
   26c49:	48 f7 c1 04 00 00 00 	test   $0x4,%rcx
   26c50:	0f 84 a3 f8 ff ff    	je     264f9 <__intel_memcpy+0x49>
   26c56:	44 8b 12             	mov    (%rdx),%r10d
   26c59:	44 89 11             	mov    %r10d,(%rcx)
   26c5c:	49 83 e8 04          	sub    $0x4,%r8
   26c60:	48 83 c2 04          	add    $0x4,%rdx
   26c64:	48 83 c1 04          	add    $0x4,%rcx
   26c68:	e9 8c f8 ff ff       	jmpq   264f9 <__intel_memcpy+0x49>
   26c6d:	0f 1f 00             	nopl   (%rax)
   26c70:	4c 8b 8a 50 ff ff ff 	mov    -0xb0(%rdx),%r9
   26c77:	4c 89 89 50 ff ff ff 	mov    %r9,-0xb0(%rcx)
   26c7e:	4c 8b 9a 58 ff ff ff 	mov    -0xa8(%rdx),%r11
   26c85:	4c 89 99 58 ff ff ff 	mov    %r11,-0xa8(%rcx)
   26c8c:	4c 8b 8a 60 ff ff ff 	mov    -0xa0(%rdx),%r9
   26c93:	4c 89 89 60 ff ff ff 	mov    %r9,-0xa0(%rcx)
   26c9a:	4c 8b 92 68 ff ff ff 	mov    -0x98(%rdx),%r10
   26ca1:	4c 89 91 68 ff ff ff 	mov    %r10,-0x98(%rcx)
   26ca8:	4c 8b 8a 70 ff ff ff 	mov    -0x90(%rdx),%r9
   26caf:	4c 89 89 70 ff ff ff 	mov    %r9,-0x90(%rcx)
   26cb6:	4c 8b 92 78 ff ff ff 	mov    -0x88(%rdx),%r10
   26cbd:	4c 89 91 78 ff ff ff 	mov    %r10,-0x88(%rcx)
   26cc4:	4c 8b 4a 80          	mov    -0x80(%rdx),%r9
   26cc8:	4c 89 49 80          	mov    %r9,-0x80(%rcx)
   26ccc:	4c 8b 52 88          	mov    -0x78(%rdx),%r10
   26cd0:	4c 89 51 88          	mov    %r10,-0x78(%rcx)
   26cd4:	4c 8b 4a 90          	mov    -0x70(%rdx),%r9
   26cd8:	4c 89 49 90          	mov    %r9,-0x70(%rcx)
   26cdc:	4c 8b 52 98          	mov    -0x68(%rdx),%r10
   26ce0:	4c 89 51 98          	mov    %r10,-0x68(%rcx)
   26ce4:	4c 8b 4a a0          	mov    -0x60(%rdx),%r9
   26ce8:	4c 89 49 a0          	mov    %r9,-0x60(%rcx)
   26cec:	4c 8b 52 a8          	mov    -0x58(%rdx),%r10
   26cf0:	4c 89 51 a8          	mov    %r10,-0x58(%rcx)
   26cf4:	4c 8b 4a b0          	mov    -0x50(%rdx),%r9
   26cf8:	4c 89 49 b0          	mov    %r9,-0x50(%rcx)
   26cfc:	4c 8b 52 b8          	mov    -0x48(%rdx),%r10
   26d00:	4c 89 51 b8          	mov    %r10,-0x48(%rcx)
   26d04:	4c 8b 4a c0          	mov    -0x40(%rdx),%r9
   26d08:	4c 89 49 c0          	mov    %r9,-0x40(%rcx)
   26d0c:	4c 8b 52 c8          	mov    -0x38(%rdx),%r10
   26d10:	4c 89 51 c8          	mov    %r10,-0x38(%rcx)
   26d14:	4c 8b 4a d0          	mov    -0x30(%rdx),%r9
   26d18:	4c 89 49 d0          	mov    %r9,-0x30(%rcx)
   26d1c:	4c 8b 52 d8          	mov    -0x28(%rdx),%r10
   26d20:	4c 89 51 d8          	mov    %r10,-0x28(%rcx)
   26d24:	4c 8b 4a e0          	mov    -0x20(%rdx),%r9
   26d28:	4c 89 49 e0          	mov    %r9,-0x20(%rcx)
   26d2c:	4c 8b 52 e8          	mov    -0x18(%rdx),%r10
   26d30:	4c 89 51 e8          	mov    %r10,-0x18(%rcx)
   26d34:	4c 8b 4a f0          	mov    -0x10(%rdx),%r9
   26d38:	4c 89 49 f0          	mov    %r9,-0x10(%rcx)
   26d3c:	4c 8b 52 f8          	mov    -0x8(%rdx),%r10
   26d40:	4c 89 51 f8          	mov    %r10,-0x8(%rcx)
   26d44:	c3                   	retq   
   26d45:	4c 8b 8a 4f ff ff ff 	mov    -0xb1(%rdx),%r9
   26d4c:	4c 89 89 4f ff ff ff 	mov    %r9,-0xb1(%rcx)
   26d53:	4c 8b 8a 57 ff ff ff 	mov    -0xa9(%rdx),%r9
   26d5a:	4c 89 89 57 ff ff ff 	mov    %r9,-0xa9(%rcx)
   26d61:	4c 8b 8a 5f ff ff ff 	mov    -0xa1(%rdx),%r9
   26d68:	4c 89 89 5f ff ff ff 	mov    %r9,-0xa1(%rcx)
   26d6f:	4c 8b 8a 67 ff ff ff 	mov    -0x99(%rdx),%r9
   26d76:	4c 89 89 67 ff ff ff 	mov    %r9,-0x99(%rcx)
   26d7d:	4c 8b 8a 6f ff ff ff 	mov    -0x91(%rdx),%r9
   26d84:	4c 89 89 6f ff ff ff 	mov    %r9,-0x91(%rcx)
   26d8b:	4c 8b 8a 77 ff ff ff 	mov    -0x89(%rdx),%r9
   26d92:	4c 89 89 77 ff ff ff 	mov    %r9,-0x89(%rcx)
   26d99:	4c 8b 8a 7f ff ff ff 	mov    -0x81(%rdx),%r9
   26da0:	4c 89 89 7f ff ff ff 	mov    %r9,-0x81(%rcx)
   26da7:	4c 8b 4a 87          	mov    -0x79(%rdx),%r9
   26dab:	4c 89 49 87          	mov    %r9,-0x79(%rcx)
   26daf:	4c 8b 4a 8f          	mov    -0x71(%rdx),%r9
   26db3:	4c 89 49 8f          	mov    %r9,-0x71(%rcx)
   26db7:	4c 8b 4a 97          	mov    -0x69(%rdx),%r9
   26dbb:	4c 89 49 97          	mov    %r9,-0x69(%rcx)
   26dbf:	4c 8b 4a 9f          	mov    -0x61(%rdx),%r9
   26dc3:	4c 89 49 9f          	mov    %r9,-0x61(%rcx)
   26dc7:	4c 8b 5a a7          	mov    -0x59(%rdx),%r11
   26dcb:	4c 89 59 a7          	mov    %r11,-0x59(%rcx)
   26dcf:	4c 8b 52 af          	mov    -0x51(%rdx),%r10
   26dd3:	4c 89 51 af          	mov    %r10,-0x51(%rcx)
   26dd7:	4c 8b 4a b7          	mov    -0x49(%rdx),%r9
   26ddb:	4c 89 49 b7          	mov    %r9,-0x49(%rcx)
   26ddf:	4c 8b 5a bf          	mov    -0x41(%rdx),%r11
   26de3:	4c 89 59 bf          	mov    %r11,-0x41(%rcx)
   26de7:	4c 8b 52 c7          	mov    -0x39(%rdx),%r10
   26deb:	4c 89 51 c7          	mov    %r10,-0x39(%rcx)
   26def:	4c 8b 4a cf          	mov    -0x31(%rdx),%r9
   26df3:	4c 89 49 cf          	mov    %r9,-0x31(%rcx)
   26df7:	4c 8b 5a d7          	mov    -0x29(%rdx),%r11
   26dfb:	4c 89 59 d7          	mov    %r11,-0x29(%rcx)
   26dff:	4c 8b 52 df          	mov    -0x21(%rdx),%r10
   26e03:	4c 89 51 df          	mov    %r10,-0x21(%rcx)
   26e07:	4c 8b 4a e7          	mov    -0x19(%rdx),%r9
   26e0b:	4c 89 49 e7          	mov    %r9,-0x19(%rcx)
   26e0f:	4c 8b 5a ef          	mov    -0x11(%rdx),%r11
   26e13:	4c 89 59 ef          	mov    %r11,-0x11(%rcx)
   26e17:	4c 8b 52 f7          	mov    -0x9(%rdx),%r10
   26e1b:	4c 89 51 f7          	mov    %r10,-0x9(%rcx)
   26e1f:	44 8a 4a ff          	mov    -0x1(%rdx),%r9b
   26e23:	44 88 49 ff          	mov    %r9b,-0x1(%rcx)
   26e27:	c3                   	retq   
   26e28:	4c 8b 8a 4e ff ff ff 	mov    -0xb2(%rdx),%r9
   26e2f:	4c 89 89 4e ff ff ff 	mov    %r9,-0xb2(%rcx)
   26e36:	4c 8b 8a 56 ff ff ff 	mov    -0xaa(%rdx),%r9
   26e3d:	4c 89 89 56 ff ff ff 	mov    %r9,-0xaa(%rcx)
   26e44:	4c 8b 8a 5e ff ff ff 	mov    -0xa2(%rdx),%r9
   26e4b:	4c 89 89 5e ff ff ff 	mov    %r9,-0xa2(%rcx)
   26e52:	4c 8b 8a 66 ff ff ff 	mov    -0x9a(%rdx),%r9
   26e59:	4c 89 89 66 ff ff ff 	mov    %r9,-0x9a(%rcx)
   26e60:	4c 8b 8a 6e ff ff ff 	mov    -0x92(%rdx),%r9
   26e67:	4c 89 89 6e ff ff ff 	mov    %r9,-0x92(%rcx)
   26e6e:	4c 8b 8a 76 ff ff ff 	mov    -0x8a(%rdx),%r9
   26e75:	4c 89 89 76 ff ff ff 	mov    %r9,-0x8a(%rcx)
   26e7c:	4c 8b 8a 7e ff ff ff 	mov    -0x82(%rdx),%r9
   26e83:	4c 89 89 7e ff ff ff 	mov    %r9,-0x82(%rcx)
   26e8a:	4c 8b 4a 86          	mov    -0x7a(%rdx),%r9
   26e8e:	4c 89 49 86          	mov    %r9,-0x7a(%rcx)
   26e92:	4c 8b 4a 8e          	mov    -0x72(%rdx),%r9
   26e96:	4c 89 49 8e          	mov    %r9,-0x72(%rcx)
   26e9a:	4c 8b 4a 96          	mov    -0x6a(%rdx),%r9
   26e9e:	4c 89 49 96          	mov    %r9,-0x6a(%rcx)
   26ea2:	4c 8b 4a 9e          	mov    -0x62(%rdx),%r9
   26ea6:	4c 89 49 9e          	mov    %r9,-0x62(%rcx)
   26eaa:	4c 8b 4a a6          	mov    -0x5a(%rdx),%r9
   26eae:	4c 89 49 a6          	mov    %r9,-0x5a(%rcx)
   26eb2:	4c 8b 4a ae          	mov    -0x52(%rdx),%r9
   26eb6:	4c 89 49 ae          	mov    %r9,-0x52(%rcx)
   26eba:	4c 8b 4a b6          	mov    -0x4a(%rdx),%r9
   26ebe:	4c 89 49 b6          	mov    %r9,-0x4a(%rcx)
   26ec2:	4c 8b 4a be          	mov    -0x42(%rdx),%r9
   26ec6:	4c 89 49 be          	mov    %r9,-0x42(%rcx)
   26eca:	4c 8b 4a c6          	mov    -0x3a(%rdx),%r9
   26ece:	4c 89 49 c6          	mov    %r9,-0x3a(%rcx)
   26ed2:	4c 8b 4a ce          	mov    -0x32(%rdx),%r9
   26ed6:	4c 89 49 ce          	mov    %r9,-0x32(%rcx)
   26eda:	4c 8b 4a d6          	mov    -0x2a(%rdx),%r9
   26ede:	4c 89 49 d6          	mov    %r9,-0x2a(%rcx)
   26ee2:	4c 8b 4a de          	mov    -0x22(%rdx),%r9
   26ee6:	4c 89 49 de          	mov    %r9,-0x22(%rcx)
   26eea:	4c 8b 4a e6          	mov    -0x1a(%rdx),%r9
   26eee:	4c 89 49 e6          	mov    %r9,-0x1a(%rcx)
   26ef2:	4c 8b 4a ee          	mov    -0x12(%rdx),%r9
   26ef6:	4c 89 49 ee          	mov    %r9,-0x12(%rcx)
   26efa:	4c 8b 4a f6          	mov    -0xa(%rdx),%r9
   26efe:	4c 89 49 f6          	mov    %r9,-0xa(%rcx)
   26f02:	66 44 8b 4a fe       	mov    -0x2(%rdx),%r9w
   26f07:	66 44 89 49 fe       	mov    %r9w,-0x2(%rcx)
   26f0c:	c3                   	retq   
   26f0d:	4c 8b 8a 4d ff ff ff 	mov    -0xb3(%rdx),%r9
   26f14:	4c 89 89 4d ff ff ff 	mov    %r9,-0xb3(%rcx)
   26f1b:	4c 8b 8a 55 ff ff ff 	mov    -0xab(%rdx),%r9
   26f22:	4c 89 89 55 ff ff ff 	mov    %r9,-0xab(%rcx)
   26f29:	4c 8b 8a 5d ff ff ff 	mov    -0xa3(%rdx),%r9
   26f30:	4c 89 89 5d ff ff ff 	mov    %r9,-0xa3(%rcx)
   26f37:	4c 8b 8a 65 ff ff ff 	mov    -0x9b(%rdx),%r9
   26f3e:	4c 89 89 65 ff ff ff 	mov    %r9,-0x9b(%rcx)
   26f45:	4c 8b 8a 6d ff ff ff 	mov    -0x93(%rdx),%r9
   26f4c:	4c 89 89 6d ff ff ff 	mov    %r9,-0x93(%rcx)
   26f53:	4c 8b 8a 75 ff ff ff 	mov    -0x8b(%rdx),%r9
   26f5a:	4c 89 89 75 ff ff ff 	mov    %r9,-0x8b(%rcx)
   26f61:	4c 8b 8a 7d ff ff ff 	mov    -0x83(%rdx),%r9
   26f68:	4c 89 89 7d ff ff ff 	mov    %r9,-0x83(%rcx)
   26f6f:	4c 8b 4a 85          	mov    -0x7b(%rdx),%r9
   26f73:	4c 89 49 85          	mov    %r9,-0x7b(%rcx)
   26f77:	4c 8b 4a 8d          	mov    -0x73(%rdx),%r9
   26f7b:	4c 89 49 8d          	mov    %r9,-0x73(%rcx)
   26f7f:	4c 8b 4a 95          	mov    -0x6b(%rdx),%r9
   26f83:	4c 89 49 95          	mov    %r9,-0x6b(%rcx)
   26f87:	4c 8b 4a 9d          	mov    -0x63(%rdx),%r9
   26f8b:	4c 89 49 9d          	mov    %r9,-0x63(%rcx)
   26f8f:	4c 8b 4a a5          	mov    -0x5b(%rdx),%r9
   26f93:	4c 89 49 a5          	mov    %r9,-0x5b(%rcx)
   26f97:	4c 8b 4a ad          	mov    -0x53(%rdx),%r9
   26f9b:	4c 89 49 ad          	mov    %r9,-0x53(%rcx)
   26f9f:	4c 8b 4a b5          	mov    -0x4b(%rdx),%r9
   26fa3:	4c 89 49 b5          	mov    %r9,-0x4b(%rcx)
   26fa7:	4c 8b 4a bd          	mov    -0x43(%rdx),%r9
   26fab:	4c 89 49 bd          	mov    %r9,-0x43(%rcx)
   26faf:	4c 8b 4a c5          	mov    -0x3b(%rdx),%r9
   26fb3:	4c 89 49 c5          	mov    %r9,-0x3b(%rcx)
   26fb7:	4c 8b 4a cd          	mov    -0x33(%rdx),%r9
   26fbb:	4c 89 49 cd          	mov    %r9,-0x33(%rcx)
   26fbf:	4c 8b 4a d5          	mov    -0x2b(%rdx),%r9
   26fc3:	4c 89 49 d5          	mov    %r9,-0x2b(%rcx)
   26fc7:	4c 8b 4a dd          	mov    -0x23(%rdx),%r9
   26fcb:	4c 89 49 dd          	mov    %r9,-0x23(%rcx)
   26fcf:	4c 8b 4a e5          	mov    -0x1b(%rdx),%r9
   26fd3:	4c 89 49 e5          	mov    %r9,-0x1b(%rcx)
   26fd7:	4c 8b 4a ed          	mov    -0x13(%rdx),%r9
   26fdb:	4c 89 49 ed          	mov    %r9,-0x13(%rcx)
   26fdf:	4c 8b 4a f5          	mov    -0xb(%rdx),%r9
   26fe3:	4c 89 49 f5          	mov    %r9,-0xb(%rcx)
   26fe7:	66 44 8b 4a fd       	mov    -0x3(%rdx),%r9w
   26fec:	44 8a 52 ff          	mov    -0x1(%rdx),%r10b
   26ff0:	66 44 89 49 fd       	mov    %r9w,-0x3(%rcx)
   26ff5:	44 88 51 ff          	mov    %r10b,-0x1(%rcx)
   26ff9:	c3                   	retq   
   26ffa:	4c 8b 8a 4c ff ff ff 	mov    -0xb4(%rdx),%r9
   27001:	4c 89 89 4c ff ff ff 	mov    %r9,-0xb4(%rcx)
   27008:	4c 8b 8a 54 ff ff ff 	mov    -0xac(%rdx),%r9
   2700f:	4c 89 89 54 ff ff ff 	mov    %r9,-0xac(%rcx)
   27016:	4c 8b 8a 5c ff ff ff 	mov    -0xa4(%rdx),%r9
   2701d:	4c 89 89 5c ff ff ff 	mov    %r9,-0xa4(%rcx)
   27024:	4c 8b 8a 64 ff ff ff 	mov    -0x9c(%rdx),%r9
   2702b:	4c 89 89 64 ff ff ff 	mov    %r9,-0x9c(%rcx)
   27032:	4c 8b 8a 6c ff ff ff 	mov    -0x94(%rdx),%r9
   27039:	4c 89 89 6c ff ff ff 	mov    %r9,-0x94(%rcx)
   27040:	4c 8b 8a 74 ff ff ff 	mov    -0x8c(%rdx),%r9
   27047:	4c 89 89 74 ff ff ff 	mov    %r9,-0x8c(%rcx)
   2704e:	4c 8b 8a 7c ff ff ff 	mov    -0x84(%rdx),%r9
   27055:	4c 89 89 7c ff ff ff 	mov    %r9,-0x84(%rcx)
   2705c:	4c 8b 4a 84          	mov    -0x7c(%rdx),%r9
   27060:	4c 89 49 84          	mov    %r9,-0x7c(%rcx)
   27064:	4c 8b 4a 8c          	mov    -0x74(%rdx),%r9
   27068:	4c 89 49 8c          	mov    %r9,-0x74(%rcx)
   2706c:	4c 8b 4a 94          	mov    -0x6c(%rdx),%r9
   27070:	4c 89 49 94          	mov    %r9,-0x6c(%rcx)
   27074:	4c 8b 4a 9c          	mov    -0x64(%rdx),%r9
   27078:	4c 89 49 9c          	mov    %r9,-0x64(%rcx)
   2707c:	4c 8b 4a a4          	mov    -0x5c(%rdx),%r9
   27080:	4c 89 49 a4          	mov    %r9,-0x5c(%rcx)
   27084:	4c 8b 4a ac          	mov    -0x54(%rdx),%r9
   27088:	4c 89 49 ac          	mov    %r9,-0x54(%rcx)
   2708c:	4c 8b 4a b4          	mov    -0x4c(%rdx),%r9
   27090:	4c 89 49 b4          	mov    %r9,-0x4c(%rcx)
   27094:	4c 8b 4a bc          	mov    -0x44(%rdx),%r9
   27098:	4c 89 49 bc          	mov    %r9,-0x44(%rcx)
   2709c:	4c 8b 4a c4          	mov    -0x3c(%rdx),%r9
   270a0:	4c 89 49 c4          	mov    %r9,-0x3c(%rcx)
   270a4:	4c 8b 4a cc          	mov    -0x34(%rdx),%r9
   270a8:	4c 89 49 cc          	mov    %r9,-0x34(%rcx)
   270ac:	4c 8b 4a d4          	mov    -0x2c(%rdx),%r9
   270b0:	4c 89 49 d4          	mov    %r9,-0x2c(%rcx)
   270b4:	4c 8b 4a dc          	mov    -0x24(%rdx),%r9
   270b8:	4c 89 49 dc          	mov    %r9,-0x24(%rcx)
   270bc:	4c 8b 4a e4          	mov    -0x1c(%rdx),%r9
   270c0:	4c 89 49 e4          	mov    %r9,-0x1c(%rcx)
   270c4:	4c 8b 4a ec          	mov    -0x14(%rdx),%r9
   270c8:	4c 89 49 ec          	mov    %r9,-0x14(%rcx)
   270cc:	4c 8b 4a f4          	mov    -0xc(%rdx),%r9
   270d0:	4c 89 49 f4          	mov    %r9,-0xc(%rcx)
   270d4:	44 8b 4a fc          	mov    -0x4(%rdx),%r9d
   270d8:	44 89 49 fc          	mov    %r9d,-0x4(%rcx)
   270dc:	c3                   	retq   
   270dd:	4c 8b 8a 4b ff ff ff 	mov    -0xb5(%rdx),%r9
   270e4:	4c 89 89 4b ff ff ff 	mov    %r9,-0xb5(%rcx)
   270eb:	4c 8b 8a 53 ff ff ff 	mov    -0xad(%rdx),%r9
   270f2:	4c 89 89 53 ff ff ff 	mov    %r9,-0xad(%rcx)
   270f9:	4c 8b 8a 5b ff ff ff 	mov    -0xa5(%rdx),%r9
   27100:	4c 89 89 5b ff ff ff 	mov    %r9,-0xa5(%rcx)
   27107:	4c 8b 8a 63 ff ff ff 	mov    -0x9d(%rdx),%r9
   2710e:	4c 89 89 63 ff ff ff 	mov    %r9,-0x9d(%rcx)
   27115:	4c 8b 8a 6b ff ff ff 	mov    -0x95(%rdx),%r9
   2711c:	4c 89 89 6b ff ff ff 	mov    %r9,-0x95(%rcx)
   27123:	4c 8b 8a 73 ff ff ff 	mov    -0x8d(%rdx),%r9
   2712a:	4c 89 89 73 ff ff ff 	mov    %r9,-0x8d(%rcx)
   27131:	4c 8b 8a 7b ff ff ff 	mov    -0x85(%rdx),%r9
   27138:	4c 89 89 7b ff ff ff 	mov    %r9,-0x85(%rcx)
   2713f:	4c 8b 4a 83          	mov    -0x7d(%rdx),%r9
   27143:	4c 89 49 83          	mov    %r9,-0x7d(%rcx)
   27147:	4c 8b 4a 8b          	mov    -0x75(%rdx),%r9
   2714b:	4c 89 49 8b          	mov    %r9,-0x75(%rcx)
   2714f:	4c 8b 4a 93          	mov    -0x6d(%rdx),%r9
   27153:	4c 89 49 93          	mov    %r9,-0x6d(%rcx)
   27157:	4c 8b 4a 9b          	mov    -0x65(%rdx),%r9
   2715b:	4c 89 49 9b          	mov    %r9,-0x65(%rcx)
   2715f:	4c 8b 4a a3          	mov    -0x5d(%rdx),%r9
   27163:	4c 89 49 a3          	mov    %r9,-0x5d(%rcx)
   27167:	4c 8b 4a ab          	mov    -0x55(%rdx),%r9
   2716b:	4c 89 49 ab          	mov    %r9,-0x55(%rcx)
   2716f:	4c 8b 4a b3          	mov    -0x4d(%rdx),%r9
   27173:	4c 89 49 b3          	mov    %r9,-0x4d(%rcx)
   27177:	4c 8b 4a bb          	mov    -0x45(%rdx),%r9
   2717b:	4c 89 49 bb          	mov    %r9,-0x45(%rcx)
   2717f:	4c 8b 4a c3          	mov    -0x3d(%rdx),%r9
   27183:	4c 89 49 c3          	mov    %r9,-0x3d(%rcx)
   27187:	4c 8b 4a cb          	mov    -0x35(%rdx),%r9
   2718b:	4c 89 49 cb          	mov    %r9,-0x35(%rcx)
   2718f:	4c 8b 4a d3          	mov    -0x2d(%rdx),%r9
   27193:	4c 89 49 d3          	mov    %r9,-0x2d(%rcx)
   27197:	4c 8b 4a db          	mov    -0x25(%rdx),%r9
   2719b:	4c 89 49 db          	mov    %r9,-0x25(%rcx)
   2719f:	4c 8b 4a e3          	mov    -0x1d(%rdx),%r9
   271a3:	4c 89 49 e3          	mov    %r9,-0x1d(%rcx)
   271a7:	4c 8b 4a eb          	mov    -0x15(%rdx),%r9
   271ab:	4c 89 49 eb          	mov    %r9,-0x15(%rcx)
   271af:	4c 8b 4a f3          	mov    -0xd(%rdx),%r9
   271b3:	4c 89 49 f3          	mov    %r9,-0xd(%rcx)
   271b7:	44 8b 4a fb          	mov    -0x5(%rdx),%r9d
   271bb:	44 8a 52 ff          	mov    -0x1(%rdx),%r10b
   271bf:	44 89 49 fb          	mov    %r9d,-0x5(%rcx)
   271c3:	44 88 51 ff          	mov    %r10b,-0x1(%rcx)
   271c7:	c3                   	retq   
   271c8:	4c 8b 8a 4a ff ff ff 	mov    -0xb6(%rdx),%r9
   271cf:	4c 89 89 4a ff ff ff 	mov    %r9,-0xb6(%rcx)
   271d6:	4c 8b 8a 52 ff ff ff 	mov    -0xae(%rdx),%r9
   271dd:	4c 89 89 52 ff ff ff 	mov    %r9,-0xae(%rcx)
   271e4:	4c 8b 8a 5a ff ff ff 	mov    -0xa6(%rdx),%r9
   271eb:	4c 89 89 5a ff ff ff 	mov    %r9,-0xa6(%rcx)
   271f2:	4c 8b 8a 62 ff ff ff 	mov    -0x9e(%rdx),%r9
   271f9:	4c 89 89 62 ff ff ff 	mov    %r9,-0x9e(%rcx)
   27200:	4c 8b 8a 6a ff ff ff 	mov    -0x96(%rdx),%r9
   27207:	4c 89 89 6a ff ff ff 	mov    %r9,-0x96(%rcx)
   2720e:	4c 8b 8a 72 ff ff ff 	mov    -0x8e(%rdx),%r9
   27215:	4c 89 89 72 ff ff ff 	mov    %r9,-0x8e(%rcx)
   2721c:	4c 8b 8a 7a ff ff ff 	mov    -0x86(%rdx),%r9
   27223:	4c 89 89 7a ff ff ff 	mov    %r9,-0x86(%rcx)
   2722a:	4c 8b 4a 82          	mov    -0x7e(%rdx),%r9
   2722e:	4c 89 49 82          	mov    %r9,-0x7e(%rcx)
   27232:	4c 8b 4a 8a          	mov    -0x76(%rdx),%r9
   27236:	4c 89 49 8a          	mov    %r9,-0x76(%rcx)
   2723a:	4c 8b 4a 92          	mov    -0x6e(%rdx),%r9
   2723e:	4c 89 49 92          	mov    %r9,-0x6e(%rcx)
   27242:	4c 8b 4a 9a          	mov    -0x66(%rdx),%r9
   27246:	4c 89 49 9a          	mov    %r9,-0x66(%rcx)
   2724a:	4c 8b 4a a2          	mov    -0x5e(%rdx),%r9
   2724e:	4c 89 49 a2          	mov    %r9,-0x5e(%rcx)
   27252:	4c 8b 4a aa          	mov    -0x56(%rdx),%r9
   27256:	4c 89 49 aa          	mov    %r9,-0x56(%rcx)
   2725a:	4c 8b 4a b2          	mov    -0x4e(%rdx),%r9
   2725e:	4c 89 49 b2          	mov    %r9,-0x4e(%rcx)
   27262:	4c 8b 4a ba          	mov    -0x46(%rdx),%r9
   27266:	4c 89 49 ba          	mov    %r9,-0x46(%rcx)
   2726a:	4c 8b 4a c2          	mov    -0x3e(%rdx),%r9
   2726e:	4c 89 49 c2          	mov    %r9,-0x3e(%rcx)
   27272:	4c 8b 4a ca          	mov    -0x36(%rdx),%r9
   27276:	4c 89 49 ca          	mov    %r9,-0x36(%rcx)
   2727a:	4c 8b 4a d2          	mov    -0x2e(%rdx),%r9
   2727e:	4c 89 49 d2          	mov    %r9,-0x2e(%rcx)
   27282:	4c 8b 4a da          	mov    -0x26(%rdx),%r9
   27286:	4c 89 49 da          	mov    %r9,-0x26(%rcx)
   2728a:	4c 8b 4a e2          	mov    -0x1e(%rdx),%r9
   2728e:	4c 89 49 e2          	mov    %r9,-0x1e(%rcx)
   27292:	4c 8b 4a ea          	mov    -0x16(%rdx),%r9
   27296:	4c 89 49 ea          	mov    %r9,-0x16(%rcx)
   2729a:	4c 8b 4a f2          	mov    -0xe(%rdx),%r9
   2729e:	4c 89 49 f2          	mov    %r9,-0xe(%rcx)
   272a2:	44 8b 4a fa          	mov    -0x6(%rdx),%r9d
   272a6:	66 44 8b 52 fe       	mov    -0x2(%rdx),%r10w
   272ab:	44 89 49 fa          	mov    %r9d,-0x6(%rcx)
   272af:	66 44 89 51 fe       	mov    %r10w,-0x2(%rcx)
   272b4:	c3                   	retq   
   272b5:	4c 8b 8a 49 ff ff ff 	mov    -0xb7(%rdx),%r9
   272bc:	4c 89 89 49 ff ff ff 	mov    %r9,-0xb7(%rcx)
   272c3:	4c 8b 8a 51 ff ff ff 	mov    -0xaf(%rdx),%r9
   272ca:	4c 89 89 51 ff ff ff 	mov    %r9,-0xaf(%rcx)
   272d1:	4c 8b 8a 59 ff ff ff 	mov    -0xa7(%rdx),%r9
   272d8:	4c 89 89 59 ff ff ff 	mov    %r9,-0xa7(%rcx)
   272df:	4c 8b 8a 61 ff ff ff 	mov    -0x9f(%rdx),%r9
   272e6:	4c 89 89 61 ff ff ff 	mov    %r9,-0x9f(%rcx)
   272ed:	4c 8b 8a 69 ff ff ff 	mov    -0x97(%rdx),%r9
   272f4:	4c 89 89 69 ff ff ff 	mov    %r9,-0x97(%rcx)
   272fb:	4c 8b 8a 71 ff ff ff 	mov    -0x8f(%rdx),%r9
   27302:	4c 89 89 71 ff ff ff 	mov    %r9,-0x8f(%rcx)
   27309:	4c 8b 8a 79 ff ff ff 	mov    -0x87(%rdx),%r9
   27310:	4c 89 89 79 ff ff ff 	mov    %r9,-0x87(%rcx)
   27317:	4c 8b 4a 81          	mov    -0x7f(%rdx),%r9
   2731b:	4c 89 49 81          	mov    %r9,-0x7f(%rcx)
   2731f:	4c 8b 4a 89          	mov    -0x77(%rdx),%r9
   27323:	4c 89 49 89          	mov    %r9,-0x77(%rcx)
   27327:	4c 8b 4a 91          	mov    -0x6f(%rdx),%r9
   2732b:	4c 89 49 91          	mov    %r9,-0x6f(%rcx)
   2732f:	4c 8b 4a 99          	mov    -0x67(%rdx),%r9
   27333:	4c 89 49 99          	mov    %r9,-0x67(%rcx)
   27337:	4c 8b 4a a1          	mov    -0x5f(%rdx),%r9
   2733b:	4c 89 49 a1          	mov    %r9,-0x5f(%rcx)
   2733f:	4c 8b 4a a9          	mov    -0x57(%rdx),%r9
   27343:	4c 89 49 a9          	mov    %r9,-0x57(%rcx)
   27347:	4c 8b 4a b1          	mov    -0x4f(%rdx),%r9
   2734b:	4c 89 49 b1          	mov    %r9,-0x4f(%rcx)
   2734f:	4c 8b 4a b9          	mov    -0x47(%rdx),%r9
   27353:	4c 89 49 b9          	mov    %r9,-0x47(%rcx)
   27357:	4c 8b 4a c1          	mov    -0x3f(%rdx),%r9
   2735b:	4c 89 49 c1          	mov    %r9,-0x3f(%rcx)
   2735f:	4c 8b 4a c9          	mov    -0x37(%rdx),%r9
   27363:	4c 89 49 c9          	mov    %r9,-0x37(%rcx)
   27367:	4c 8b 4a d1          	mov    -0x2f(%rdx),%r9
   2736b:	4c 89 49 d1          	mov    %r9,-0x2f(%rcx)
   2736f:	4c 8b 4a d9          	mov    -0x27(%rdx),%r9
   27373:	4c 89 49 d9          	mov    %r9,-0x27(%rcx)
   27377:	4c 8b 4a e1          	mov    -0x1f(%rdx),%r9
   2737b:	4c 89 49 e1          	mov    %r9,-0x1f(%rcx)
   2737f:	4c 8b 4a e9          	mov    -0x17(%rdx),%r9
   27383:	4c 89 49 e9          	mov    %r9,-0x17(%rcx)
   27387:	4c 8b 4a f1          	mov    -0xf(%rdx),%r9
   2738b:	4c 89 49 f1          	mov    %r9,-0xf(%rcx)
   2738f:	44 8b 4a f9          	mov    -0x7(%rdx),%r9d
   27393:	66 44 8b 52 fd       	mov    -0x3(%rdx),%r10w
   27398:	44 8a 5a ff          	mov    -0x1(%rdx),%r11b
   2739c:	44 89 49 f9          	mov    %r9d,-0x7(%rcx)
   273a0:	66 44 89 51 fd       	mov    %r10w,-0x3(%rcx)
   273a5:	44 88 59 ff          	mov    %r11b,-0x1(%rcx)
   273a9:	c3                   	retq   
   273aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   273b0:	83 3d c9 e4 20 00 02 	cmpl   $0x2,0x20e4c9(%rip)        # 235880 <__libirc_mem_ops_method>
   273b7:	0f 85 e3 06 00 00    	jne    27aa0 <__intel_memcpy+0x15f0>
   273bd:	48 f7 c1 0f 00 00 00 	test   $0xf,%rcx
   273c4:	0f 85 76 08 00 00    	jne    27c40 <__intel_memcpy+0x1790>
   273ca:	44 8b 0d b7 e4 20 00 	mov    0x20e4b7(%rip),%r9d        # 235888 <__libirc_largest_cache_size_half>
   273d1:	4d 39 c8             	cmp    %r9,%r8
   273d4:	0f 8f c6 05 00 00    	jg     279a0 <__intel_memcpy+0x14f0>
   273da:	48 f7 c2 0f 00 00 00 	test   $0xf,%rdx
   273e1:	0f 84 29 06 00 00    	je     27a10 <__intel_memcpy+0x1560>
   273e7:	4c 8d 15 32 00 00 00 	lea    0x32(%rip),%r10        # 27420 <__intel_memcpy+0xf70>
   273ee:	49 89 d3             	mov    %rdx,%r11
   273f1:	49 83 e3 0f          	and    $0xf,%r11
   273f5:	f3 0f 6f 02          	movdqu (%rdx),%xmm0
   273f9:	66 0f 7f 01          	movdqa %xmm0,(%rcx)
   273fd:	48 83 c2 10          	add    $0x10,%rdx
   27401:	4c 29 da             	sub    %r11,%rdx
   27404:	48 83 c1 10          	add    $0x10,%rcx
   27408:	49 83 e8 10          	sub    $0x10,%r8
   2740c:	66 0f 6f 0a          	movdqa (%rdx),%xmm1
   27410:	4f 8b 0c da          	mov    (%r10,%r11,8),%r9
   27414:	4f 8d 14 11          	lea    (%r9,%r10,1),%r10
   27418:	41 ff e2             	jmpq   *%r10
   2741b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   27420:	f0 05 00 00 00 00    	lock add $0x0,%eax
   27426:	00 00                	add    %al,(%rax)
   27428:	b0 00                	mov    $0x0,%al
   2742a:	00 00                	add    %al,(%rax)
   2742c:	00 00                	add    %al,(%rax)
   2742e:	00 00                	add    %al,(%rax)
   27430:	00 01                	add    %al,(%rcx)
   27432:	00 00                	add    %al,(%rax)
   27434:	00 00                	add    %al,(%rax)
   27436:	00 00                	add    %al,(%rax)
   27438:	50                   	push   %rax
   27439:	01 00                	add    %eax,(%rax)
   2743b:	00 00                	add    %al,(%rax)
   2743d:	00 00                	add    %al,(%rax)
   2743f:	00 a0 01 00 00 00    	add    %ah,0x1(%rax)
   27445:	00 00                	add    %al,(%rax)
   27447:	00 f0                	add    %dh,%al
   27449:	01 00                	add    %eax,(%rax)
   2744b:	00 00                	add    %al,(%rax)
   2744d:	00 00                	add    %al,(%rax)
   2744f:	00 40 02             	add    %al,0x2(%rax)
   27452:	00 00                	add    %al,(%rax)
   27454:	00 00                	add    %al,(%rax)
   27456:	00 00                	add    %al,(%rax)
   27458:	90                   	nop
   27459:	02 00                	add    (%rax),%al
   2745b:	00 00                	add    %al,(%rax)
   2745d:	00 00                	add    %al,(%rax)
   2745f:	00 e0                	add    %ah,%al
   27461:	02 00                	add    (%rax),%al
   27463:	00 00                	add    %al,(%rax)
   27465:	00 00                	add    %al,(%rax)
   27467:	00 30                	add    %dh,(%rax)
   27469:	03 00                	add    (%rax),%eax
   2746b:	00 00                	add    %al,(%rax)
   2746d:	00 00                	add    %al,(%rax)
   2746f:	00 80 03 00 00 00    	add    %al,0x3(%rax)
   27475:	00 00                	add    %al,(%rax)
   27477:	00 d0                	add    %dl,%al
   27479:	03 00                	add    (%rax),%eax
   2747b:	00 00                	add    %al,(%rax)
   2747d:	00 00                	add    %al,(%rax)
   2747f:	00 20                	add    %ah,(%rax)
   27481:	04 00                	add    $0x0,%al
   27483:	00 00                	add    %al,(%rax)
   27485:	00 00                	add    %al,(%rax)
   27487:	00 70 04             	add    %dh,0x4(%rax)
   2748a:	00 00                	add    %al,(%rax)
   2748c:	00 00                	add    %al,(%rax)
   2748e:	00 00                	add    %al,(%rax)
   27490:	c0 04 00 00          	rolb   $0x0,(%rax,%rax,1)
   27494:	00 00                	add    %al,(%rax)
   27496:	00 00                	add    %al,(%rax)
   27498:	10 05 00 00 00 00    	adc    %al,0x0(%rip)        # 2749e <__intel_memcpy+0xfee>
   2749e:	00 00                	add    %al,(%rax)
   274a0:	4c 8d 15 e9 06 00 00 	lea    0x6e9(%rip),%r10        # 27b90 <__intel_memcpy+0x16e0>
   274a7:	4d 89 c1             	mov    %r8,%r9
   274aa:	49 c1 e9 04          	shr    $0x4,%r9
   274ae:	49 c1 e1 04          	shl    $0x4,%r9
   274b2:	4c 01 c9             	add    %r9,%rcx
   274b5:	4c 01 ca             	add    %r9,%rdx
   274b8:	4d 29 c8             	sub    %r9,%r8
   274bb:	49 c1 e9 04          	shr    $0x4,%r9
   274bf:	4f 8b 1c ca          	mov    (%r10,%r9,8),%r11
   274c3:	4f 8d 14 13          	lea    (%r11,%r10,1),%r10
   274c7:	41 ff e2             	jmpq   *%r10
   274ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   274d0:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   274d5:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   274da:	48 8d 52 20          	lea    0x20(%rdx),%rdx
   274de:	4d 8d 40 e0          	lea    -0x20(%r8),%r8
   274e2:	66 0f 73 d9 01       	psrldq $0x1,%xmm1
   274e7:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   274eb:	66 0f 73 fb 0f       	pslldq $0xf,%xmm3
   274f0:	66 0f eb d9          	por    %xmm1,%xmm3
   274f4:	49 83 f8 20          	cmp    $0x20,%r8
   274f8:	66 0f 73 da 01       	psrldq $0x1,%xmm2
   274fd:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   27501:	66 0f 73 f8 0f       	pslldq $0xf,%xmm0
   27506:	66 0f eb c2          	por    %xmm2,%xmm0
   2750a:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   2750e:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   27513:	48 8d 49 20          	lea    0x20(%rcx),%rcx
   27517:	7d b7                	jge    274d0 <__intel_memcpy+0x1020>
   27519:	e9 5b 04 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   2751e:	66 90                	xchg   %ax,%ax
   27520:	49 83 e8 20          	sub    $0x20,%r8
   27524:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   27529:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   2752e:	48 83 c2 20          	add    $0x20,%rdx
   27532:	66 0f 73 d9 02       	psrldq $0x2,%xmm1
   27537:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   2753b:	66 0f 73 fb 0e       	pslldq $0xe,%xmm3
   27540:	66 0f eb d9          	por    %xmm1,%xmm3
   27544:	66 0f 73 da 02       	psrldq $0x2,%xmm2
   27549:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2754d:	66 0f 73 f8 0e       	pslldq $0xe,%xmm0
   27552:	66 0f eb c2          	por    %xmm2,%xmm0
   27556:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   2755a:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   2755f:	48 83 c1 20          	add    $0x20,%rcx
   27563:	49 83 f8 20          	cmp    $0x20,%r8
   27567:	7d b7                	jge    27520 <__intel_memcpy+0x1070>
   27569:	e9 0b 04 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   2756e:	66 90                	xchg   %ax,%ax
   27570:	49 83 e8 20          	sub    $0x20,%r8
   27574:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   27579:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   2757e:	48 83 c2 20          	add    $0x20,%rdx
   27582:	66 0f 73 d9 03       	psrldq $0x3,%xmm1
   27587:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   2758b:	66 0f 73 fb 0d       	pslldq $0xd,%xmm3
   27590:	66 0f eb d9          	por    %xmm1,%xmm3
   27594:	66 0f 73 da 03       	psrldq $0x3,%xmm2
   27599:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2759d:	66 0f 73 f8 0d       	pslldq $0xd,%xmm0
   275a2:	66 0f eb c2          	por    %xmm2,%xmm0
   275a6:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   275aa:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   275af:	48 83 c1 20          	add    $0x20,%rcx
   275b3:	49 83 f8 20          	cmp    $0x20,%r8
   275b7:	7d b7                	jge    27570 <__intel_memcpy+0x10c0>
   275b9:	e9 bb 03 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   275be:	66 90                	xchg   %ax,%ax
   275c0:	49 83 e8 20          	sub    $0x20,%r8
   275c4:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   275c9:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   275ce:	48 83 c2 20          	add    $0x20,%rdx
   275d2:	66 0f 73 d9 04       	psrldq $0x4,%xmm1
   275d7:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   275db:	66 0f 73 fb 0c       	pslldq $0xc,%xmm3
   275e0:	66 0f eb d9          	por    %xmm1,%xmm3
   275e4:	66 0f 73 da 04       	psrldq $0x4,%xmm2
   275e9:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   275ed:	66 0f 73 f8 0c       	pslldq $0xc,%xmm0
   275f2:	66 0f eb c2          	por    %xmm2,%xmm0
   275f6:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   275fa:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   275ff:	48 83 c1 20          	add    $0x20,%rcx
   27603:	49 83 f8 20          	cmp    $0x20,%r8
   27607:	7d b7                	jge    275c0 <__intel_memcpy+0x1110>
   27609:	e9 6b 03 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   2760e:	66 90                	xchg   %ax,%ax
   27610:	49 83 e8 20          	sub    $0x20,%r8
   27614:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   27619:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   2761e:	48 83 c2 20          	add    $0x20,%rdx
   27622:	66 0f 73 d9 05       	psrldq $0x5,%xmm1
   27627:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   2762b:	66 0f 73 fb 0b       	pslldq $0xb,%xmm3
   27630:	66 0f eb d9          	por    %xmm1,%xmm3
   27634:	66 0f 73 da 05       	psrldq $0x5,%xmm2
   27639:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2763d:	66 0f 73 f8 0b       	pslldq $0xb,%xmm0
   27642:	66 0f eb c2          	por    %xmm2,%xmm0
   27646:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   2764a:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   2764f:	48 83 c1 20          	add    $0x20,%rcx
   27653:	49 83 f8 20          	cmp    $0x20,%r8
   27657:	7d b7                	jge    27610 <__intel_memcpy+0x1160>
   27659:	e9 1b 03 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   2765e:	66 90                	xchg   %ax,%ax
   27660:	49 83 e8 20          	sub    $0x20,%r8
   27664:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   27669:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   2766e:	48 83 c2 20          	add    $0x20,%rdx
   27672:	66 0f 73 d9 06       	psrldq $0x6,%xmm1
   27677:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   2767b:	66 0f 73 fb 0a       	pslldq $0xa,%xmm3
   27680:	66 0f eb d9          	por    %xmm1,%xmm3
   27684:	66 0f 73 da 06       	psrldq $0x6,%xmm2
   27689:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2768d:	66 0f 73 f8 0a       	pslldq $0xa,%xmm0
   27692:	66 0f eb c2          	por    %xmm2,%xmm0
   27696:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   2769a:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   2769f:	48 83 c1 20          	add    $0x20,%rcx
   276a3:	49 83 f8 20          	cmp    $0x20,%r8
   276a7:	7d b7                	jge    27660 <__intel_memcpy+0x11b0>
   276a9:	e9 cb 02 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   276ae:	66 90                	xchg   %ax,%ax
   276b0:	49 83 e8 20          	sub    $0x20,%r8
   276b4:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   276b9:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   276be:	48 83 c2 20          	add    $0x20,%rdx
   276c2:	66 0f 73 d9 07       	psrldq $0x7,%xmm1
   276c7:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   276cb:	66 0f 73 fb 09       	pslldq $0x9,%xmm3
   276d0:	66 0f eb d9          	por    %xmm1,%xmm3
   276d4:	66 0f 73 da 07       	psrldq $0x7,%xmm2
   276d9:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   276dd:	66 0f 73 f8 09       	pslldq $0x9,%xmm0
   276e2:	66 0f eb c2          	por    %xmm2,%xmm0
   276e6:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   276ea:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   276ef:	48 83 c1 20          	add    $0x20,%rcx
   276f3:	49 83 f8 20          	cmp    $0x20,%r8
   276f7:	7d b7                	jge    276b0 <__intel_memcpy+0x1200>
   276f9:	e9 7b 02 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   276fe:	66 90                	xchg   %ax,%ax
   27700:	49 83 e8 20          	sub    $0x20,%r8
   27704:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   27709:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   2770e:	48 83 c2 20          	add    $0x20,%rdx
   27712:	66 0f 73 d9 08       	psrldq $0x8,%xmm1
   27717:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   2771b:	66 0f 73 fb 08       	pslldq $0x8,%xmm3
   27720:	66 0f eb d9          	por    %xmm1,%xmm3
   27724:	66 0f 73 da 08       	psrldq $0x8,%xmm2
   27729:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2772d:	66 0f 73 f8 08       	pslldq $0x8,%xmm0
   27732:	66 0f eb c2          	por    %xmm2,%xmm0
   27736:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   2773a:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   2773f:	48 83 c1 20          	add    $0x20,%rcx
   27743:	49 83 f8 20          	cmp    $0x20,%r8
   27747:	7d b7                	jge    27700 <__intel_memcpy+0x1250>
   27749:	e9 2b 02 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   2774e:	66 90                	xchg   %ax,%ax
   27750:	49 83 e8 20          	sub    $0x20,%r8
   27754:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   27759:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   2775e:	48 83 c2 20          	add    $0x20,%rdx
   27762:	66 0f 73 d9 09       	psrldq $0x9,%xmm1
   27767:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   2776b:	66 0f 73 fb 07       	pslldq $0x7,%xmm3
   27770:	66 0f eb d9          	por    %xmm1,%xmm3
   27774:	66 0f 73 da 09       	psrldq $0x9,%xmm2
   27779:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2777d:	66 0f 73 f8 07       	pslldq $0x7,%xmm0
   27782:	66 0f eb c2          	por    %xmm2,%xmm0
   27786:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   2778a:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   2778f:	48 83 c1 20          	add    $0x20,%rcx
   27793:	49 83 f8 20          	cmp    $0x20,%r8
   27797:	7d b7                	jge    27750 <__intel_memcpy+0x12a0>
   27799:	e9 db 01 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   2779e:	66 90                	xchg   %ax,%ax
   277a0:	49 83 e8 20          	sub    $0x20,%r8
   277a4:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   277a9:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   277ae:	48 83 c2 20          	add    $0x20,%rdx
   277b2:	66 0f 73 d9 0a       	psrldq $0xa,%xmm1
   277b7:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   277bb:	66 0f 73 fb 06       	pslldq $0x6,%xmm3
   277c0:	66 0f eb d9          	por    %xmm1,%xmm3
   277c4:	66 0f 73 da 0a       	psrldq $0xa,%xmm2
   277c9:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   277cd:	66 0f 73 f8 06       	pslldq $0x6,%xmm0
   277d2:	66 0f eb c2          	por    %xmm2,%xmm0
   277d6:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   277da:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   277df:	48 83 c1 20          	add    $0x20,%rcx
   277e3:	49 83 f8 20          	cmp    $0x20,%r8
   277e7:	7d b7                	jge    277a0 <__intel_memcpy+0x12f0>
   277e9:	e9 8b 01 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   277ee:	66 90                	xchg   %ax,%ax
   277f0:	49 83 e8 20          	sub    $0x20,%r8
   277f4:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   277f9:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   277fe:	48 83 c2 20          	add    $0x20,%rdx
   27802:	66 0f 73 d9 0b       	psrldq $0xb,%xmm1
   27807:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   2780b:	66 0f 73 fb 05       	pslldq $0x5,%xmm3
   27810:	66 0f eb d9          	por    %xmm1,%xmm3
   27814:	66 0f 73 da 0b       	psrldq $0xb,%xmm2
   27819:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2781d:	66 0f 73 f8 05       	pslldq $0x5,%xmm0
   27822:	66 0f eb c2          	por    %xmm2,%xmm0
   27826:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   2782a:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   2782f:	48 83 c1 20          	add    $0x20,%rcx
   27833:	49 83 f8 20          	cmp    $0x20,%r8
   27837:	7d b7                	jge    277f0 <__intel_memcpy+0x1340>
   27839:	e9 3b 01 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   2783e:	66 90                	xchg   %ax,%ax
   27840:	49 83 e8 20          	sub    $0x20,%r8
   27844:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   27849:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   2784e:	48 83 c2 20          	add    $0x20,%rdx
   27852:	66 0f 73 d9 0c       	psrldq $0xc,%xmm1
   27857:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   2785b:	66 0f 73 fb 04       	pslldq $0x4,%xmm3
   27860:	66 0f eb d9          	por    %xmm1,%xmm3
   27864:	66 0f 73 da 0c       	psrldq $0xc,%xmm2
   27869:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2786d:	66 0f 73 f8 04       	pslldq $0x4,%xmm0
   27872:	66 0f eb c2          	por    %xmm2,%xmm0
   27876:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   2787a:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   2787f:	48 83 c1 20          	add    $0x20,%rcx
   27883:	49 83 f8 20          	cmp    $0x20,%r8
   27887:	7d b7                	jge    27840 <__intel_memcpy+0x1390>
   27889:	e9 eb 00 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   2788e:	66 90                	xchg   %ax,%ax
   27890:	49 83 e8 20          	sub    $0x20,%r8
   27894:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   27899:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   2789e:	48 83 c2 20          	add    $0x20,%rdx
   278a2:	66 0f 73 d9 0d       	psrldq $0xd,%xmm1
   278a7:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   278ab:	66 0f 73 fb 03       	pslldq $0x3,%xmm3
   278b0:	66 0f eb d9          	por    %xmm1,%xmm3
   278b4:	66 0f 73 da 0d       	psrldq $0xd,%xmm2
   278b9:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   278bd:	66 0f 73 f8 03       	pslldq $0x3,%xmm0
   278c2:	66 0f eb c2          	por    %xmm2,%xmm0
   278c6:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   278ca:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   278cf:	48 83 c1 20          	add    $0x20,%rcx
   278d3:	49 83 f8 20          	cmp    $0x20,%r8
   278d7:	7d b7                	jge    27890 <__intel_memcpy+0x13e0>
   278d9:	e9 9b 00 00 00       	jmpq   27979 <__intel_memcpy+0x14c9>
   278de:	66 90                	xchg   %ax,%ax
   278e0:	49 83 e8 20          	sub    $0x20,%r8
   278e4:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   278e9:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   278ee:	48 83 c2 20          	add    $0x20,%rdx
   278f2:	66 0f 73 d9 0e       	psrldq $0xe,%xmm1
   278f7:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   278fb:	66 0f 73 fb 02       	pslldq $0x2,%xmm3
   27900:	66 0f eb d9          	por    %xmm1,%xmm3
   27904:	66 0f 73 da 0e       	psrldq $0xe,%xmm2
   27909:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2790d:	66 0f 73 f8 02       	pslldq $0x2,%xmm0
   27912:	66 0f eb c2          	por    %xmm2,%xmm0
   27916:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   2791a:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   2791f:	48 83 c1 20          	add    $0x20,%rcx
   27923:	49 83 f8 20          	cmp    $0x20,%r8
   27927:	7d b7                	jge    278e0 <__intel_memcpy+0x1430>
   27929:	eb 4e                	jmp    27979 <__intel_memcpy+0x14c9>
   2792b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   27930:	49 83 e8 20          	sub    $0x20,%r8
   27934:	66 0f 6f 5a 10       	movdqa 0x10(%rdx),%xmm3
   27939:	66 0f 6f 42 20       	movdqa 0x20(%rdx),%xmm0
   2793e:	48 83 c2 20          	add    $0x20,%rdx
   27942:	66 0f 73 d9 0f       	psrldq $0xf,%xmm1
   27947:	66 0f 6f d3          	movdqa %xmm3,%xmm2
   2794b:	66 0f 73 fb 01       	pslldq $0x1,%xmm3
   27950:	66 0f eb d9          	por    %xmm1,%xmm3
   27954:	66 0f 73 da 0f       	psrldq $0xf,%xmm2
   27959:	66 0f 6f c8          	movdqa %xmm0,%xmm1
   2795d:	66 0f 73 f8 01       	pslldq $0x1,%xmm0
   27962:	66 0f eb c2          	por    %xmm2,%xmm0
   27966:	66 0f 7f 19          	movdqa %xmm3,(%rcx)
   2796a:	66 0f 7f 41 10       	movdqa %xmm0,0x10(%rcx)
   2796f:	48 83 c1 20          	add    $0x20,%rcx
   27973:	49 83 f8 20          	cmp    $0x20,%r8
   27977:	7d b7                	jge    27930 <__intel_memcpy+0x1480>
   27979:	4c 8d 15 d0 ec ff ff 	lea    -0x1330(%rip),%r10        # 26650 <__intel_memcpy+0x1a0>
   27980:	4c 01 da             	add    %r11,%rdx
   27983:	4c 01 c1             	add    %r8,%rcx
   27986:	4c 01 c2             	add    %r8,%rdx
   27989:	4f 8b 0c c2          	mov    (%r10,%r8,8),%r9
   2798d:	4f 8d 14 11          	lea    (%r9,%r10,1),%r10
   27991:	41 ff e2             	jmpq   *%r10
   27994:	66 90                	xchg   %ax,%ax
   27996:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   2799d:	00 00 00 
   279a0:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   279a4:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   279a8:	4d 8d 40 c0          	lea    -0x40(%r8),%r8
   279ac:	0f 18 82 80 01 00 00 	prefetchnta 0x180(%rdx)
   279b3:	f3 0f 6f 42 c0       	movdqu -0x40(%rdx),%xmm0
   279b8:	f3 0f 6f 4a d0       	movdqu -0x30(%rdx),%xmm1
   279bd:	49 83 f8 40          	cmp    $0x40,%r8
   279c1:	66 0f e7 41 c0       	movntdq %xmm0,-0x40(%rcx)
   279c6:	66 0f e7 49 d0       	movntdq %xmm1,-0x30(%rcx)
   279cb:	f3 0f 6f 52 e0       	movdqu -0x20(%rdx),%xmm2
   279d0:	f3 0f 6f 5a f0       	movdqu -0x10(%rdx),%xmm3
   279d5:	66 0f e7 51 e0       	movntdq %xmm2,-0x20(%rcx)
   279da:	66 0f e7 59 f0       	movntdq %xmm3,-0x10(%rcx)
   279df:	7d bf                	jge    279a0 <__intel_memcpy+0x14f0>
   279e1:	4c 8d 15 a8 01 00 00 	lea    0x1a8(%rip),%r10        # 27b90 <__intel_memcpy+0x16e0>
   279e8:	4d 89 c1             	mov    %r8,%r9
   279eb:	49 c1 e9 04          	shr    $0x4,%r9
   279ef:	49 c1 e1 04          	shl    $0x4,%r9
   279f3:	4c 01 c9             	add    %r9,%rcx
   279f6:	4c 01 ca             	add    %r9,%rdx
   279f9:	4d 29 c8             	sub    %r9,%r8
   279fc:	49 c1 e9 04          	shr    $0x4,%r9
   27a00:	0f ae f8             	sfence 
   27a03:	4f 8b 1c ca          	mov    (%r10,%r9,8),%r11
   27a07:	4f 8d 14 13          	lea    (%r11,%r10,1),%r10
   27a0b:	41 ff e2             	jmpq   *%r10
   27a0e:	66 90                	xchg   %ax,%ax
   27a10:	66 0f 6f 02          	movdqa (%rdx),%xmm0
   27a14:	66 0f 6f 4a 10       	movdqa 0x10(%rdx),%xmm1
   27a19:	66 0f 7f 01          	movdqa %xmm0,(%rcx)
   27a1d:	66 0f 7f 49 10       	movdqa %xmm1,0x10(%rcx)
   27a22:	4d 8d 40 80          	lea    -0x80(%r8),%r8
   27a26:	66 0f 6f 52 20       	movdqa 0x20(%rdx),%xmm2
   27a2b:	66 0f 6f 5a 30       	movdqa 0x30(%rdx),%xmm3
   27a30:	66 0f 7f 51 20       	movdqa %xmm2,0x20(%rcx)
   27a35:	66 0f 7f 59 30       	movdqa %xmm3,0x30(%rcx)
   27a3a:	66 0f 6f 42 40       	movdqa 0x40(%rdx),%xmm0
   27a3f:	66 0f 6f 4a 50       	movdqa 0x50(%rdx),%xmm1
   27a44:	49 81 f8 a8 00 00 00 	cmp    $0xa8,%r8
   27a4b:	66 0f 7f 41 40       	movdqa %xmm0,0x40(%rcx)
   27a50:	66 0f 7f 49 50       	movdqa %xmm1,0x50(%rcx)
   27a55:	66 0f 6f 52 60       	movdqa 0x60(%rdx),%xmm2
   27a5a:	66 0f 6f 5a 70       	movdqa 0x70(%rdx),%xmm3
   27a5f:	48 8d 92 80 00 00 00 	lea    0x80(%rdx),%rdx
   27a66:	66 0f 7f 51 60       	movdqa %xmm2,0x60(%rcx)
   27a6b:	66 0f 7f 59 70       	movdqa %xmm3,0x70(%rcx)
   27a70:	48 8d 89 80 00 00 00 	lea    0x80(%rcx),%rcx
   27a77:	7d 97                	jge    27a10 <__intel_memcpy+0x1560>
   27a79:	4c 8d 15 d0 eb ff ff 	lea    -0x1430(%rip),%r10        # 26650 <__intel_memcpy+0x1a0>
   27a80:	4c 01 c1             	add    %r8,%rcx
   27a83:	4c 01 c2             	add    %r8,%rdx
   27a86:	4f 8b 0c c2          	mov    (%r10,%r8,8),%r9
   27a8a:	4f 8d 14 11          	lea    (%r9,%r10,1),%r10
   27a8e:	41 ff e2             	jmpq   *%r10
   27a91:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   27a96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   27a9d:	00 00 00 
   27aa0:	44 8b 0d e1 dd 20 00 	mov    0x20dde1(%rip),%r9d        # 235888 <__libirc_largest_cache_size_half>
   27aa7:	4d 39 c8             	cmp    %r9,%r8
   27aaa:	7f 74                	jg     27b20 <__intel_memcpy+0x1670>
   27aac:	eb 02                	jmp    27ab0 <__intel_memcpy+0x1600>
   27aae:	66 90                	xchg   %ax,%ax
   27ab0:	4c 8b 0a             	mov    (%rdx),%r9
   27ab3:	4c 8b 52 08          	mov    0x8(%rdx),%r10
   27ab7:	4d 8d 40 c0          	lea    -0x40(%r8),%r8
   27abb:	4c 89 09             	mov    %r9,(%rcx)
   27abe:	4c 89 51 08          	mov    %r10,0x8(%rcx)
   27ac2:	4c 8b 5a 10          	mov    0x10(%rdx),%r11
   27ac6:	4c 8b 4a 18          	mov    0x18(%rdx),%r9
   27aca:	4c 89 59 10          	mov    %r11,0x10(%rcx)
   27ace:	4c 89 49 18          	mov    %r9,0x18(%rcx)
   27ad2:	49 83 f8 40          	cmp    $0x40,%r8
   27ad6:	4c 8b 52 20          	mov    0x20(%rdx),%r10
   27ada:	4c 8b 5a 28          	mov    0x28(%rdx),%r11
   27ade:	4c 89 51 20          	mov    %r10,0x20(%rcx)
   27ae2:	4c 89 59 28          	mov    %r11,0x28(%rcx)
   27ae6:	4c 8b 4a 30          	mov    0x30(%rdx),%r9
   27aea:	4c 8b 52 38          	mov    0x38(%rdx),%r10
   27aee:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   27af2:	4c 89 49 30          	mov    %r9,0x30(%rcx)
   27af6:	4c 89 51 38          	mov    %r10,0x38(%rcx)
   27afa:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   27afe:	7f b0                	jg     27ab0 <__intel_memcpy+0x1600>
   27b00:	4c 8d 15 49 eb ff ff 	lea    -0x14b7(%rip),%r10        # 26650 <__intel_memcpy+0x1a0>
   27b07:	4a 8d 14 02          	lea    (%rdx,%r8,1),%rdx
   27b0b:	4a 8d 0c 01          	lea    (%rcx,%r8,1),%rcx
   27b0f:	4f 8b 0c c2          	mov    (%r10,%r8,8),%r9
   27b13:	4f 8d 14 11          	lea    (%r9,%r10,1),%r10
   27b17:	41 ff e2             	jmpq   *%r10
   27b1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
   27b20:	49 83 e8 40          	sub    $0x40,%r8
   27b24:	0f 18 82 80 01 00 00 	prefetchnta 0x180(%rdx)
   27b2b:	4c 8b 0a             	mov    (%rdx),%r9
   27b2e:	4c 0f c3 09          	movnti %r9,(%rcx)
   27b32:	4c 8b 52 08          	mov    0x8(%rdx),%r10
   27b36:	4c 0f c3 51 08       	movnti %r10,0x8(%rcx)
   27b3b:	4c 8b 5a 10          	mov    0x10(%rdx),%r11
   27b3f:	4c 0f c3 59 10       	movnti %r11,0x10(%rcx)
   27b44:	4c 8b 4a 18          	mov    0x18(%rdx),%r9
   27b48:	4c 0f c3 49 18       	movnti %r9,0x18(%rcx)
   27b4d:	4c 8b 52 20          	mov    0x20(%rdx),%r10
   27b51:	4c 0f c3 51 20       	movnti %r10,0x20(%rcx)
   27b56:	4c 8b 5a 28          	mov    0x28(%rdx),%r11
   27b5a:	4c 0f c3 59 28       	movnti %r11,0x28(%rcx)
   27b5f:	4c 8b 4a 30          	mov    0x30(%rdx),%r9
   27b63:	4c 0f c3 49 30       	movnti %r9,0x30(%rcx)
   27b68:	4c 8b 52 38          	mov    0x38(%rdx),%r10
   27b6c:	4c 0f c3 51 38       	movnti %r10,0x38(%rcx)
   27b71:	48 8d 52 40          	lea    0x40(%rdx),%rdx
   27b75:	48 8d 49 40          	lea    0x40(%rcx),%rcx
   27b79:	49 83 f8 40          	cmp    $0x40,%r8
   27b7d:	7d a1                	jge    27b20 <__intel_memcpy+0x1670>
   27b7f:	0f ae f8             	sfence 
   27b82:	e9 79 ff ff ff       	jmpq   27b00 <__intel_memcpy+0x1650>
   27b87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   27b8e:	00 00 
   27b90:	98                   	cwtl   
   27b91:	00 00                	add    %al,(%rax)
   27b93:	00 00                	add    %al,(%rax)
   27b95:	00 00                	add    %al,(%rax)
   27b97:	00 8e 00 00 00 00    	add    %cl,0x0(%rsi)
   27b9d:	00 00                	add    %al,(%rax)
   27b9f:	00 84 00 00 00 00 00 	add    %al,0x0(%rax,%rax,1)
   27ba6:	00 00                	add    %al,(%rax)
   27ba8:	7a 00                	jp     27baa <__intel_memcpy+0x16fa>
   27baa:	00 00                	add    %al,(%rax)
   27bac:	00 00                	add    %al,(%rax)
   27bae:	00 00                	add    %al,(%rax)
   27bb0:	70 00                	jo     27bb2 <__intel_memcpy+0x1702>
   27bb2:	00 00                	add    %al,(%rax)
   27bb4:	00 00                	add    %al,(%rax)
   27bb6:	00 00                	add    %al,(%rax)
   27bb8:	66 00 00             	data16 add %al,(%rax)
   27bbb:	00 00                	add    %al,(%rax)
   27bbd:	00 00                	add    %al,(%rax)
   27bbf:	00 5c 00 00          	add    %bl,0x0(%rax,%rax,1)
   27bc3:	00 00                	add    %al,(%rax)
   27bc5:	00 00                	add    %al,(%rax)
   27bc7:	00 52 00             	add    %dl,0x0(%rdx)
   27bca:	00 00                	add    %al,(%rax)
   27bcc:	00 00                	add    %al,(%rax)
   27bce:	00 00                	add    %al,(%rax)
   27bd0:	48 00 00             	rex.W add %al,(%rax)
   27bd3:	00 00                	add    %al,(%rax)
   27bd5:	00 00                	add    %al,(%rax)
   27bd7:	00 f3                	add    %dh,%bl
   27bd9:	0f 6f 42 80          	movq   -0x80(%rdx),%mm0
   27bdd:	66 0f 7f 41 80       	movdqa %xmm0,-0x80(%rcx)
   27be2:	f3 0f 6f 4a 90       	movdqu -0x70(%rdx),%xmm1
   27be7:	66 0f 7f 49 90       	movdqa %xmm1,-0x70(%rcx)
   27bec:	f3 0f 6f 52 a0       	movdqu -0x60(%rdx),%xmm2
   27bf1:	66 0f 7f 51 a0       	movdqa %xmm2,-0x60(%rcx)
   27bf6:	f3 0f 6f 5a b0       	movdqu -0x50(%rdx),%xmm3
   27bfb:	66 0f 7f 59 b0       	movdqa %xmm3,-0x50(%rcx)
   27c00:	f3 0f 6f 42 c0       	movdqu -0x40(%rdx),%xmm0
   27c05:	66 0f 7f 41 c0       	movdqa %xmm0,-0x40(%rcx)
   27c0a:	f3 0f 6f 4a d0       	movdqu -0x30(%rdx),%xmm1
   27c0f:	66 0f 7f 49 d0       	movdqa %xmm1,-0x30(%rcx)
   27c14:	f3 0f 6f 52 e0       	movdqu -0x20(%rdx),%xmm2
   27c19:	66 0f 7f 51 e0       	movdqa %xmm2,-0x20(%rcx)
   27c1e:	f3 0f 6f 5a f0       	movdqu -0x10(%rdx),%xmm3
   27c23:	66 0f 7f 59 f0       	movdqa %xmm3,-0x10(%rcx)
   27c28:	4c 8d 15 21 ea ff ff 	lea    -0x15df(%rip),%r10        # 26650 <__intel_memcpy+0x1a0>
   27c2f:	4c 01 c2             	add    %r8,%rdx
   27c32:	4c 01 c1             	add    %r8,%rcx
   27c35:	4f 8b 0c c2          	mov    (%r10,%r8,8),%r9
   27c39:	4f 8d 14 11          	lea    (%r9,%r10,1),%r10
   27c3d:	41 ff e2             	jmpq   *%r10
   27c40:	4c 8b 0a             	mov    (%rdx),%r9
   27c43:	4c 89 09             	mov    %r9,(%rcx)
   27c46:	48 83 c1 08          	add    $0x8,%rcx
   27c4a:	48 83 c2 08          	add    $0x8,%rdx
   27c4e:	49 83 e8 08          	sub    $0x8,%r8
   27c52:	e9 73 f7 ff ff       	jmpq   273ca <__intel_memcpy+0xf1a>
   27c57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   27c5e:	00 00 

0000000000027c60 <__intel_memset>:
   27c60:	48 83 fa 01          	cmp    $0x1,%rdx
   27c64:	48 89 f8             	mov    %rdi,%rax
   27c67:	75 04                	jne    27c6d <__intel_memset+0xd>
   27c69:	40 88 37             	mov    %sil,(%rdi)
   27c6c:	c3                   	retq   
   27c6d:	49 b9 01 01 01 01 01 	movabs $0x101010101010101,%r9
   27c74:	01 01 01 
   27c77:	49 89 d0             	mov    %rdx,%r8
   27c7a:	48 0f b6 d6          	movzbq %sil,%rdx
   27c7e:	49 0f af d1          	imul   %r9,%rdx
   27c82:	49 83 f8 41          	cmp    $0x41,%r8
   27c86:	0f 8d 04 04 00 00    	jge    28090 <__intel_memset+0x430>
   27c8c:	4c 8d 1d 1d 00 00 00 	lea    0x1d(%rip),%r11        # 27cb0 <__intel_memset+0x50>
   27c93:	4c 01 c7             	add    %r8,%rdi
   27c96:	4b 8b 0c c3          	mov    (%r11,%r8,8),%rcx
   27c9a:	4e 8d 1c 19          	lea    (%rcx,%r11,1),%r11
   27c9e:	41 ff e3             	jmpq   *%r11
   27ca1:	c2 00 00             	retq   $0x0
   27ca4:	66 90                	xchg   %ax,%ax
   27ca6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   27cad:	00 00 00 
   27cb0:	f1                   	icebp  
   27cb1:	ff                   	(bad)  
   27cb2:	ff                   	(bad)  
   27cb3:	ff                   	(bad)  
   27cb4:	ff                   	(bad)  
   27cb5:	ff                   	(bad)  
   27cb6:	ff                   	(bad)  
   27cb7:	ff a4 02 00 00 00 00 	jmpq   *0x0(%rdx,%rax,1)
   27cbe:	00 00                	add    %al,(%rax)
   27cc0:	f5                   	cmc    
   27cc1:	02 00                	add    (%rax),%al
   27cc3:	00 00                	add    %al,(%rax)
   27cc5:	00 00                	add    %al,(%rax)
   27cc7:	00 20                	add    %ah,(%rax)
   27cc9:	03 00                	add    (%rax),%eax
   27ccb:	00 00                	add    %al,(%rax)
   27ccd:	00 00                	add    %al,(%rax)
   27ccf:	00 4e 03             	add    %cl,0x3(%rsi)
   27cd2:	00 00                	add    %al,(%rax)
   27cd4:	00 00                	add    %al,(%rax)
   27cd6:	00 00                	add    %al,(%rax)
   27cd8:	78 03                	js     27cdd <__intel_memset+0x7d>
   27cda:	00 00                	add    %al,(%rax)
   27cdc:	00 00                	add    %al,(%rax)
   27cde:	00 00                	add    %al,(%rax)
   27ce0:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
   27ce1:	03 00                	add    (%rax),%eax
   27ce3:	00 00                	add    %al,(%rax)
   27ce5:	00 00                	add    %al,(%rax)
   27ce7:	00 d3                	add    %dl,%bl
   27ce9:	03 00                	add    (%rax),%eax
   27ceb:	00 00                	add    %al,(%rax)
   27ced:	00 00                	add    %al,(%rax)
   27cef:	00 ca                	add    %cl,%dl
   27cf1:	02 00                	add    (%rax),%al
   27cf3:	00 00                	add    %al,(%rax)
   27cf5:	00 00                	add    %al,(%rax)
   27cf7:	00 a0 02 00 00 00    	add    %ah,0x2(%rax)
   27cfd:	00 00                	add    %al,(%rax)
   27cff:	00 f1                	add    %dh,%cl
   27d01:	02 00                	add    (%rax),%al
   27d03:	00 00                	add    %al,(%rax)
   27d05:	00 00                	add    %al,(%rax)
   27d07:	00 1c 03             	add    %bl,(%rbx,%rax,1)
   27d0a:	00 00                	add    %al,(%rax)
   27d0c:	00 00                	add    %al,(%rax)
   27d0e:	00 00                	add    %al,(%rax)
   27d10:	4a 03 00             	rex.WX add (%rax),%rax
   27d13:	00 00                	add    %al,(%rax)
   27d15:	00 00                	add    %al,(%rax)
   27d17:	00 74 03 00          	add    %dh,0x0(%rbx,%rax,1)
   27d1b:	00 00                	add    %al,(%rax)
   27d1d:	00 00                	add    %al,(%rax)
   27d1f:	00 a1 03 00 00 00    	add    %ah,0x3(%rcx)
   27d25:	00 00                	add    %al,(%rax)
   27d27:	00 cf                	add    %cl,%bh
   27d29:	03 00                	add    (%rax),%eax
   27d2b:	00 00                	add    %al,(%rax)
   27d2d:	00 00                	add    %al,(%rax)
   27d2f:	00 c6                	add    %al,%dh
   27d31:	02 00                	add    (%rax),%al
   27d33:	00 00                	add    %al,(%rax)
   27d35:	00 00                	add    %al,(%rax)
   27d37:	00 9c 02 00 00 00 00 	add    %bl,0x0(%rdx,%rax,1)
   27d3e:	00 00                	add    %al,(%rax)
   27d40:	ed                   	in     (%dx),%eax
   27d41:	02 00                	add    (%rax),%al
   27d43:	00 00                	add    %al,(%rax)
   27d45:	00 00                	add    %al,(%rax)
   27d47:	00 18                	add    %bl,(%rax)
   27d49:	03 00                	add    (%rax),%eax
   27d4b:	00 00                	add    %al,(%rax)
   27d4d:	00 00                	add    %al,(%rax)
   27d4f:	00 46 03             	add    %al,0x3(%rsi)
   27d52:	00 00                	add    %al,(%rax)
   27d54:	00 00                	add    %al,(%rax)
   27d56:	00 00                	add    %al,(%rax)
   27d58:	70 03                	jo     27d5d <__intel_memset+0xfd>
   27d5a:	00 00                	add    %al,(%rax)
   27d5c:	00 00                	add    %al,(%rax)
   27d5e:	00 00                	add    %al,(%rax)
   27d60:	9d                   	popfq  
   27d61:	03 00                	add    (%rax),%eax
   27d63:	00 00                	add    %al,(%rax)
   27d65:	00 00                	add    %al,(%rax)
   27d67:	00 cb                	add    %cl,%bl
   27d69:	03 00                	add    (%rax),%eax
   27d6b:	00 00                	add    %al,(%rax)
   27d6d:	00 00                	add    %al,(%rax)
   27d6f:	00 c2                	add    %al,%dl
   27d71:	02 00                	add    (%rax),%al
   27d73:	00 00                	add    %al,(%rax)
   27d75:	00 00                	add    %al,(%rax)
   27d77:	00 98 02 00 00 00    	add    %bl,0x2(%rax)
   27d7d:	00 00                	add    %al,(%rax)
   27d7f:	00 e9                	add    %ch,%cl
   27d81:	02 00                	add    (%rax),%al
   27d83:	00 00                	add    %al,(%rax)
   27d85:	00 00                	add    %al,(%rax)
   27d87:	00 14 03             	add    %dl,(%rbx,%rax,1)
   27d8a:	00 00                	add    %al,(%rax)
   27d8c:	00 00                	add    %al,(%rax)
   27d8e:	00 00                	add    %al,(%rax)
   27d90:	42 03 00             	rex.X add (%rax),%eax
   27d93:	00 00                	add    %al,(%rax)
   27d95:	00 00                	add    %al,(%rax)
   27d97:	00 6c 03 00          	add    %ch,0x0(%rbx,%rax,1)
   27d9b:	00 00                	add    %al,(%rax)
   27d9d:	00 00                	add    %al,(%rax)
   27d9f:	00 99 03 00 00 00    	add    %bl,0x3(%rcx)
   27da5:	00 00                	add    %al,(%rax)
   27da7:	00 c7                	add    %al,%bh
   27da9:	03 00                	add    (%rax),%eax
   27dab:	00 00                	add    %al,(%rax)
   27dad:	00 00                	add    %al,(%rax)
   27daf:	00 be 02 00 00 00    	add    %bh,0x2(%rsi)
   27db5:	00 00                	add    %al,(%rax)
   27db7:	00 94 02 00 00 00 00 	add    %dl,0x0(%rdx,%rax,1)
   27dbe:	00 00                	add    %al,(%rax)
   27dc0:	e5 02                	in     $0x2,%eax
   27dc2:	00 00                	add    %al,(%rax)
   27dc4:	00 00                	add    %al,(%rax)
   27dc6:	00 00                	add    %al,(%rax)
   27dc8:	10 03                	adc    %al,(%rbx)
   27dca:	00 00                	add    %al,(%rax)
   27dcc:	00 00                	add    %al,(%rax)
   27dce:	00 00                	add    %al,(%rax)
   27dd0:	3e 03 00             	add    %ds:(%rax),%eax
   27dd3:	00 00                	add    %al,(%rax)
   27dd5:	00 00                	add    %al,(%rax)
   27dd7:	00 68 03             	add    %ch,0x3(%rax)
   27dda:	00 00                	add    %al,(%rax)
   27ddc:	00 00                	add    %al,(%rax)
   27dde:	00 00                	add    %al,(%rax)
   27de0:	95                   	xchg   %eax,%ebp
   27de1:	03 00                	add    (%rax),%eax
   27de3:	00 00                	add    %al,(%rax)
   27de5:	00 00                	add    %al,(%rax)
   27de7:	00 c3                	add    %al,%bl
   27de9:	03 00                	add    (%rax),%eax
   27deb:	00 00                	add    %al,(%rax)
   27ded:	00 00                	add    %al,(%rax)
   27def:	00 ba 02 00 00 00    	add    %bh,0x2(%rdx)
   27df5:	00 00                	add    %al,(%rax)
   27df7:	00 90 02 00 00 00    	add    %dl,0x2(%rax)
   27dfd:	00 00                	add    %al,(%rax)
   27dff:	00 e1                	add    %ah,%cl
   27e01:	02 00                	add    (%rax),%al
   27e03:	00 00                	add    %al,(%rax)
   27e05:	00 00                	add    %al,(%rax)
   27e07:	00 0c 03             	add    %cl,(%rbx,%rax,1)
   27e0a:	00 00                	add    %al,(%rax)
   27e0c:	00 00                	add    %al,(%rax)
   27e0e:	00 00                	add    %al,(%rax)
   27e10:	3a 03                	cmp    (%rbx),%al
   27e12:	00 00                	add    %al,(%rax)
   27e14:	00 00                	add    %al,(%rax)
   27e16:	00 00                	add    %al,(%rax)
   27e18:	64 03 00             	add    %fs:(%rax),%eax
   27e1b:	00 00                	add    %al,(%rax)
   27e1d:	00 00                	add    %al,(%rax)
   27e1f:	00 91 03 00 00 00    	add    %dl,0x3(%rcx)
   27e25:	00 00                	add    %al,(%rax)
   27e27:	00 bf 03 00 00 00    	add    %bh,0x3(%rdi)
   27e2d:	00 00                	add    %al,(%rax)
   27e2f:	00 b6 02 00 00 00    	add    %dh,0x2(%rsi)
   27e35:	00 00                	add    %al,(%rax)
   27e37:	00 8c 02 00 00 00 00 	add    %cl,0x0(%rdx,%rax,1)
   27e3e:	00 00                	add    %al,(%rax)
   27e40:	dd 02                	fldl   (%rdx)
   27e42:	00 00                	add    %al,(%rax)
   27e44:	00 00                	add    %al,(%rax)
   27e46:	00 00                	add    %al,(%rax)
   27e48:	08 03                	or     %al,(%rbx)
   27e4a:	00 00                	add    %al,(%rax)
   27e4c:	00 00                	add    %al,(%rax)
   27e4e:	00 00                	add    %al,(%rax)
   27e50:	36 03 00             	add    %ss:(%rax),%eax
   27e53:	00 00                	add    %al,(%rax)
   27e55:	00 00                	add    %al,(%rax)
   27e57:	00 60 03             	add    %ah,0x3(%rax)
   27e5a:	00 00                	add    %al,(%rax)
   27e5c:	00 00                	add    %al,(%rax)
   27e5e:	00 00                	add    %al,(%rax)
   27e60:	8d 03                	lea    (%rbx),%eax
   27e62:	00 00                	add    %al,(%rax)
   27e64:	00 00                	add    %al,(%rax)
   27e66:	00 00                	add    %al,(%rax)
   27e68:	bb 03 00 00 00       	mov    $0x3,%ebx
   27e6d:	00 00                	add    %al,(%rax)
   27e6f:	00 b2 02 00 00 00    	add    %dh,0x2(%rdx)
   27e75:	00 00                	add    %al,(%rax)
   27e77:	00 88 02 00 00 00    	add    %cl,0x2(%rax)
   27e7d:	00 00                	add    %al,(%rax)
   27e7f:	00 d9                	add    %bl,%cl
   27e81:	02 00                	add    (%rax),%al
   27e83:	00 00                	add    %al,(%rax)
   27e85:	00 00                	add    %al,(%rax)
   27e87:	00 04 03             	add    %al,(%rbx,%rax,1)
   27e8a:	00 00                	add    %al,(%rax)
   27e8c:	00 00                	add    %al,(%rax)
   27e8e:	00 00                	add    %al,(%rax)
   27e90:	32 03                	xor    (%rbx),%al
   27e92:	00 00                	add    %al,(%rax)
   27e94:	00 00                	add    %al,(%rax)
   27e96:	00 00                	add    %al,(%rax)
   27e98:	5c                   	pop    %rsp
   27e99:	03 00                	add    (%rax),%eax
   27e9b:	00 00                	add    %al,(%rax)
   27e9d:	00 00                	add    %al,(%rax)
   27e9f:	00 89 03 00 00 00    	add    %cl,0x3(%rcx)
   27ea5:	00 00                	add    %al,(%rax)
   27ea7:	00 b7 03 00 00 00    	add    %dh,0x3(%rdi)
   27ead:	00 00                	add    %al,(%rax)
   27eaf:	00 ae 02 00 00 00    	add    %ch,0x2(%rsi)
   27eb5:	00 00                	add    %al,(%rax)
   27eb7:	00 84 02 00 00 00 00 	add    %al,0x0(%rdx,%rax,1)
   27ebe:	00 00                	add    %al,(%rax)
   27ec0:	d5                   	(bad)  
   27ec1:	02 00                	add    (%rax),%al
   27ec3:	00 00                	add    %al,(%rax)
   27ec5:	00 00                	add    %al,(%rax)
   27ec7:	00 00                	add    %al,(%rax)
   27ec9:	03 00                	add    (%rax),%eax
   27ecb:	00 00                	add    %al,(%rax)
   27ecd:	00 00                	add    %al,(%rax)
   27ecf:	00 2e                	add    %ch,(%rsi)
   27ed1:	03 00                	add    (%rax),%eax
   27ed3:	00 00                	add    %al,(%rax)
   27ed5:	00 00                	add    %al,(%rax)
   27ed7:	00 58 03             	add    %bl,0x3(%rax)
   27eda:	00 00                	add    %al,(%rax)
   27edc:	00 00                	add    %al,(%rax)
   27ede:	00 00                	add    %al,(%rax)
   27ee0:	85 03                	test   %eax,(%rbx)
   27ee2:	00 00                	add    %al,(%rax)
   27ee4:	00 00                	add    %al,(%rax)
   27ee6:	00 00                	add    %al,(%rax)
   27ee8:	b3 03                	mov    $0x3,%bl
   27eea:	00 00                	add    %al,(%rax)
   27eec:	00 00                	add    %al,(%rax)
   27eee:	00 00                	add    %al,(%rax)
   27ef0:	aa                   	stos   %al,%es:(%rdi)
   27ef1:	02 00                	add    (%rax),%al
   27ef3:	00 00                	add    %al,(%rax)
   27ef5:	00 00                	add    %al,(%rax)
   27ef7:	00 80 02 00 00 00    	add    %al,0x2(%rax)
   27efd:	00 00                	add    %al,(%rax)
   27eff:	00 d1                	add    %dl,%cl
   27f01:	02 00                	add    (%rax),%al
   27f03:	00 00                	add    %al,(%rax)
   27f05:	00 00                	add    %al,(%rax)
   27f07:	00 fc                	add    %bh,%ah
   27f09:	02 00                	add    (%rax),%al
   27f0b:	00 00                	add    %al,(%rax)
   27f0d:	00 00                	add    %al,(%rax)
   27f0f:	00 2a                	add    %ch,(%rdx)
   27f11:	03 00                	add    (%rax),%eax
   27f13:	00 00                	add    %al,(%rax)
   27f15:	00 00                	add    %al,(%rax)
   27f17:	00 54 03 00          	add    %dl,0x0(%rbx,%rax,1)
   27f1b:	00 00                	add    %al,(%rax)
   27f1d:	00 00                	add    %al,(%rax)
   27f1f:	00 81 03 00 00 00    	add    %al,0x3(%rcx)
   27f25:	00 00                	add    %al,(%rax)
   27f27:	00 af 03 00 00 00    	add    %ch,0x3(%rdi)
   27f2d:	00 00                	add    %al,(%rax)
   27f2f:	00 48 89             	add    %cl,-0x77(%rax)
   27f32:	57                   	push   %rdi
   27f33:	b7 48                	mov    $0x48,%bh
   27f35:	89 57 bf             	mov    %edx,-0x41(%rdi)
   27f38:	48 89 57 c7          	mov    %rdx,-0x39(%rdi)
   27f3c:	48 89 57 cf          	mov    %rdx,-0x31(%rdi)
   27f40:	48 89 57 d7          	mov    %rdx,-0x29(%rdi)
   27f44:	48 89 57 df          	mov    %rdx,-0x21(%rdi)
   27f48:	48 89 57 e7          	mov    %rdx,-0x19(%rdi)
   27f4c:	48 89 57 ef          	mov    %rdx,-0x11(%rdi)
   27f50:	48 89 57 f7          	mov    %rdx,-0x9(%rdi)
   27f54:	88 57 ff             	mov    %dl,-0x1(%rdi)
   27f57:	c2 00 00             	retq   $0x0
   27f5a:	48 89 57 b8          	mov    %rdx,-0x48(%rdi)
   27f5e:	48 89 57 c0          	mov    %rdx,-0x40(%rdi)
   27f62:	48 89 57 c8          	mov    %rdx,-0x38(%rdi)
   27f66:	48 89 57 d0          	mov    %rdx,-0x30(%rdi)
   27f6a:	48 89 57 d8          	mov    %rdx,-0x28(%rdi)
   27f6e:	48 89 57 e0          	mov    %rdx,-0x20(%rdi)
   27f72:	48 89 57 e8          	mov    %rdx,-0x18(%rdi)
   27f76:	48 89 57 f0          	mov    %rdx,-0x10(%rdi)
   27f7a:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   27f7e:	c2 00 00             	retq   $0x0
   27f81:	48 89 57 b6          	mov    %rdx,-0x4a(%rdi)
   27f85:	48 89 57 be          	mov    %rdx,-0x42(%rdi)
   27f89:	48 89 57 c6          	mov    %rdx,-0x3a(%rdi)
   27f8d:	48 89 57 ce          	mov    %rdx,-0x32(%rdi)
   27f91:	48 89 57 d6          	mov    %rdx,-0x2a(%rdi)
   27f95:	48 89 57 de          	mov    %rdx,-0x22(%rdi)
   27f99:	48 89 57 e6          	mov    %rdx,-0x1a(%rdi)
   27f9d:	48 89 57 ee          	mov    %rdx,-0x12(%rdi)
   27fa1:	48 89 57 f6          	mov    %rdx,-0xa(%rdi)
   27fa5:	66 89 57 fe          	mov    %dx,-0x2(%rdi)
   27fa9:	c2 00 00             	retq   $0x0
   27fac:	48 89 57 b5          	mov    %rdx,-0x4b(%rdi)
   27fb0:	48 89 57 bd          	mov    %rdx,-0x43(%rdi)
   27fb4:	48 89 57 c5          	mov    %rdx,-0x3b(%rdi)
   27fb8:	48 89 57 cd          	mov    %rdx,-0x33(%rdi)
   27fbc:	48 89 57 d5          	mov    %rdx,-0x2b(%rdi)
   27fc0:	48 89 57 dd          	mov    %rdx,-0x23(%rdi)
   27fc4:	48 89 57 e5          	mov    %rdx,-0x1b(%rdi)
   27fc8:	48 89 57 ed          	mov    %rdx,-0x13(%rdi)
   27fcc:	48 89 57 f5          	mov    %rdx,-0xb(%rdi)
   27fd0:	66 89 57 fd          	mov    %dx,-0x3(%rdi)
   27fd4:	88 57 ff             	mov    %dl,-0x1(%rdi)
   27fd7:	c2 00 00             	retq   $0x0
   27fda:	48 89 57 b4          	mov    %rdx,-0x4c(%rdi)
   27fde:	48 89 57 bc          	mov    %rdx,-0x44(%rdi)
   27fe2:	48 89 57 c4          	mov    %rdx,-0x3c(%rdi)
   27fe6:	48 89 57 cc          	mov    %rdx,-0x34(%rdi)
   27fea:	48 89 57 d4          	mov    %rdx,-0x2c(%rdi)
   27fee:	48 89 57 dc          	mov    %rdx,-0x24(%rdi)
   27ff2:	48 89 57 e4          	mov    %rdx,-0x1c(%rdi)
   27ff6:	48 89 57 ec          	mov    %rdx,-0x14(%rdi)
   27ffa:	48 89 57 f4          	mov    %rdx,-0xc(%rdi)
   27ffe:	89 57 fc             	mov    %edx,-0x4(%rdi)
   28001:	c2 00 00             	retq   $0x0
   28004:	48 89 57 b3          	mov    %rdx,-0x4d(%rdi)
   28008:	48 89 57 bb          	mov    %rdx,-0x45(%rdi)
   2800c:	48 89 57 c3          	mov    %rdx,-0x3d(%rdi)
   28010:	48 89 57 cb          	mov    %rdx,-0x35(%rdi)
   28014:	48 89 57 d3          	mov    %rdx,-0x2d(%rdi)
   28018:	48 89 57 db          	mov    %rdx,-0x25(%rdi)
   2801c:	48 89 57 e3          	mov    %rdx,-0x1d(%rdi)
   28020:	48 89 57 eb          	mov    %rdx,-0x15(%rdi)
   28024:	48 89 57 f3          	mov    %rdx,-0xd(%rdi)
   28028:	89 57 fb             	mov    %edx,-0x5(%rdi)
   2802b:	88 57 ff             	mov    %dl,-0x1(%rdi)
   2802e:	c2 00 00             	retq   $0x0
   28031:	48 89 57 b2          	mov    %rdx,-0x4e(%rdi)
   28035:	48 89 57 ba          	mov    %rdx,-0x46(%rdi)
   28039:	48 89 57 c2          	mov    %rdx,-0x3e(%rdi)
   2803d:	48 89 57 ca          	mov    %rdx,-0x36(%rdi)
   28041:	48 89 57 d2          	mov    %rdx,-0x2e(%rdi)
   28045:	48 89 57 da          	mov    %rdx,-0x26(%rdi)
   28049:	48 89 57 e2          	mov    %rdx,-0x1e(%rdi)
   2804d:	48 89 57 ea          	mov    %rdx,-0x16(%rdi)
   28051:	48 89 57 f2          	mov    %rdx,-0xe(%rdi)
   28055:	89 57 fa             	mov    %edx,-0x6(%rdi)
   28058:	66 89 57 fe          	mov    %dx,-0x2(%rdi)
   2805c:	c2 00 00             	retq   $0x0
   2805f:	48 89 57 b1          	mov    %rdx,-0x4f(%rdi)
   28063:	48 89 57 b9          	mov    %rdx,-0x47(%rdi)
   28067:	48 89 57 c1          	mov    %rdx,-0x3f(%rdi)
   2806b:	48 89 57 c9          	mov    %rdx,-0x37(%rdi)
   2806f:	48 89 57 d1          	mov    %rdx,-0x2f(%rdi)
   28073:	48 89 57 d9          	mov    %rdx,-0x27(%rdi)
   28077:	48 89 57 e1          	mov    %rdx,-0x1f(%rdi)
   2807b:	48 89 57 e9          	mov    %rdx,-0x17(%rdi)
   2807f:	48 89 57 f1          	mov    %rdx,-0xf(%rdi)
   28083:	89 57 f9             	mov    %edx,-0x7(%rdi)
   28086:	66 89 57 fd          	mov    %dx,-0x3(%rdi)
   2808a:	88 57 ff             	mov    %dl,-0x1(%rdi)
   2808d:	c2 00 00             	retq   $0x0
   28090:	83 3d e9 d7 20 00 02 	cmpl   $0x2,0x20d7e9(%rip)        # 235880 <__libirc_mem_ops_method>
   28097:	0f 8c e3 06 00 00    	jl     28780 <__intel_memset+0xb20>
   2809d:	66 48 0f 6e c2       	movq   %rdx,%xmm0
   280a2:	4c 8d 1d 37 00 00 00 	lea    0x37(%rip),%r11        # 280e0 <__intel_memset+0x480>
   280a9:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
   280ad:	49 c7 c2 10 00 00 00 	mov    $0x10,%r10
   280b4:	49 89 f9             	mov    %rdi,%r9
   280b7:	49 83 e1 0f          	and    $0xf,%r9
   280bb:	4d 29 ca             	sub    %r9,%r10
   280be:	49 83 e2 0f          	and    $0xf,%r10
   280c2:	4c 01 d7             	add    %r10,%rdi
   280c5:	4d 29 d0             	sub    %r10,%r8
   280c8:	4b 8b 0c d3          	mov    (%r11,%r10,8),%rcx
   280cc:	4e 8d 1c 19          	lea    (%rcx,%r11,1),%r11
   280d0:	41 ff e3             	jmpq   *%r11
   280d3:	0f 1f 00             	nopl   (%rax)
   280d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   280dd:	00 00 00 
   280e0:	92                   	xchg   %eax,%edx
   280e1:	00 00                	add    %al,(%rax)
   280e3:	00 00                	add    %al,(%rax)
   280e5:	00 00                	add    %al,(%rax)
   280e7:	00 9d 00 00 00 00    	add    %bl,0x0(%rbp)
   280ed:	00 00                	add    %al,(%rax)
   280ef:	00 b2 00 00 00 00    	add    %dh,0x0(%rdx)
   280f5:	00 00                	add    %al,(%rax)
   280f7:	00 af 00 00 00 00    	add    %ch,0x0(%rdi)
   280fd:	00 00                	add    %al,(%rax)
   280ff:	00 bb 00 00 00 00    	add    %bh,0x0(%rbx)
   28105:	00 00                	add    %al,(%rax)
   28107:	00 b8 00 00 00 00    	add    %bh,0x0(%rax)
   2810d:	00 00                	add    %al,(%rax)
   2810f:	00 d3                	add    %dl,%bl
   28111:	00 00                	add    %al,(%rax)
   28113:	00 00                	add    %al,(%rax)
   28115:	00 00                	add    %al,(%rax)
   28117:	00 d0                	add    %dl,%al
   28119:	00 00                	add    %al,(%rax)
   2811b:	00 00                	add    %al,(%rax)
   2811d:	00 00                	add    %al,(%rax)
   2811f:	00 8e 00 00 00 00    	add    %cl,0x0(%rsi)
   28125:	00 00                	add    %al,(%rax)
   28127:	00 94 00 00 00 00 00 	add    %dl,0x0(%rax,%rax,1)
   2812e:	00 00                	add    %al,(%rax)
   28130:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
   28131:	00 00                	add    %al,(%rax)
   28133:	00 00                	add    %al,(%rax)
   28135:	00 00                	add    %al,(%rax)
   28137:	00 a2 00 00 00 00    	add    %ah,0x0(%rdx)
   2813d:	00 00                	add    %al,(%rax)
   2813f:	00 8b 00 00 00 00    	add    %cl,0x0(%rbx)
   28145:	00 00                	add    %al,(%rax)
   28147:	00 88 00 00 00 00    	add    %cl,0x0(%rax)
   2814d:	00 00                	add    %al,(%rax)
   2814f:	00 c3                	add    %al,%bl
   28151:	00 00                	add    %al,(%rax)
   28153:	00 00                	add    %al,(%rax)
   28155:	00 00                	add    %al,(%rax)
   28157:	00 c0                	add    %al,%al
   28159:	00 00                	add    %al,(%rax)
   2815b:	00 00                	add    %al,(%rax)
   2815d:	00 00                	add    %al,(%rax)
   2815f:	00 92 00 00 00 00    	add    %dl,0x0(%rdx)
   28165:	00 00                	add    %al,(%rax)
   28167:	00 88 57 f3 89 57    	add    %cl,0x5789f357(%rax)
   2816d:	f4                   	hlt    
   2816e:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   28172:	eb 48                	jmp    281bc <__intel_memset+0x55c>
   28174:	88 57 f7             	mov    %dl,-0x9(%rdi)
   28177:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   2817b:	eb 3f                	jmp    281bc <__intel_memset+0x55c>
   2817d:	88 57 ff             	mov    %dl,-0x1(%rdi)
   28180:	eb 3a                	jmp    281bc <__intel_memset+0x55c>
   28182:	88 57 f5             	mov    %dl,-0xb(%rdi)
   28185:	66 89 57 f6          	mov    %dx,-0xa(%rdi)
   28189:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   2818d:	eb 2d                	jmp    281bc <__intel_memset+0x55c>
   2818f:	88 57 fd             	mov    %dl,-0x3(%rdi)
   28192:	66 89 57 fe          	mov    %dx,-0x2(%rdi)
   28196:	eb 24                	jmp    281bc <__intel_memset+0x55c>
   28198:	88 57 fb             	mov    %dl,-0x5(%rdi)
   2819b:	89 57 fc             	mov    %edx,-0x4(%rdi)
   2819e:	eb 1c                	jmp    281bc <__intel_memset+0x55c>
   281a0:	88 57 f1             	mov    %dl,-0xf(%rdi)
   281a3:	66 89 57 f2          	mov    %dx,-0xe(%rdi)
   281a7:	89 57 f4             	mov    %edx,-0xc(%rdi)
   281aa:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   281ae:	eb 0c                	jmp    281bc <__intel_memset+0x55c>
   281b0:	88 57 f9             	mov    %dl,-0x7(%rdi)
   281b3:	66 89 57 fa          	mov    %dx,-0x6(%rdi)
   281b7:	89 57 fc             	mov    %edx,-0x4(%rdi)
   281ba:	eb 00                	jmp    281bc <__intel_memset+0x55c>
   281bc:	4c 8d 0d 7d 06 00 00 	lea    0x67d(%rip),%r9        # 28840 <__intel_memset+0xbe0>
   281c3:	49 81 f8 b0 00 00 00 	cmp    $0xb0,%r8
   281ca:	0f 8d d9 04 00 00    	jge    286a9 <__intel_memset+0xa49>
   281d0:	4c 01 c7             	add    %r8,%rdi
   281d3:	4b 8b 0c c1          	mov    (%r9,%r8,8),%rcx
   281d7:	4e 8d 0c 09          	lea    (%rcx,%r9,1),%r9
   281db:	41 ff e1             	jmpq   *%r9
   281de:	66 90                	xchg   %ax,%ax
   281e0:	66 0f 7f 87 50 ff ff 	movdqa %xmm0,-0xb0(%rdi)
   281e7:	ff 
   281e8:	66 0f 7f 87 60 ff ff 	movdqa %xmm0,-0xa0(%rdi)
   281ef:	ff 
   281f0:	66 0f 7f 87 70 ff ff 	movdqa %xmm0,-0x90(%rdi)
   281f7:	ff 
   281f8:	66 0f 7f 47 80       	movdqa %xmm0,-0x80(%rdi)
   281fd:	66 0f 7f 47 90       	movdqa %xmm0,-0x70(%rdi)
   28202:	66 0f 7f 47 a0       	movdqa %xmm0,-0x60(%rdi)
   28207:	66 0f 7f 47 b0       	movdqa %xmm0,-0x50(%rdi)
   2820c:	66 0f 7f 47 c0       	movdqa %xmm0,-0x40(%rdi)
   28211:	66 0f 7f 47 d0       	movdqa %xmm0,-0x30(%rdi)
   28216:	66 0f 7f 47 e0       	movdqa %xmm0,-0x20(%rdi)
   2821b:	66 0f 7f 47 f0       	movdqa %xmm0,-0x10(%rdi)
   28220:	c3                   	retq   
   28221:	66 0f 7f 87 4f ff ff 	movdqa %xmm0,-0xb1(%rdi)
   28228:	ff 
   28229:	66 0f 7f 87 5f ff ff 	movdqa %xmm0,-0xa1(%rdi)
   28230:	ff 
   28231:	66 0f 7f 87 6f ff ff 	movdqa %xmm0,-0x91(%rdi)
   28238:	ff 
   28239:	66 0f 7f 87 7f ff ff 	movdqa %xmm0,-0x81(%rdi)
   28240:	ff 
   28241:	66 0f 7f 47 8f       	movdqa %xmm0,-0x71(%rdi)
   28246:	66 0f 7f 47 9f       	movdqa %xmm0,-0x61(%rdi)
   2824b:	66 0f 7f 47 af       	movdqa %xmm0,-0x51(%rdi)
   28250:	66 0f 7f 47 bf       	movdqa %xmm0,-0x41(%rdi)
   28255:	66 0f 7f 47 cf       	movdqa %xmm0,-0x31(%rdi)
   2825a:	66 0f 7f 47 df       	movdqa %xmm0,-0x21(%rdi)
   2825f:	66 0f 7f 47 ef       	movdqa %xmm0,-0x11(%rdi)
   28264:	88 57 ff             	mov    %dl,-0x1(%rdi)
   28267:	c3                   	retq   
   28268:	66 0f 7f 87 4e ff ff 	movdqa %xmm0,-0xb2(%rdi)
   2826f:	ff 
   28270:	66 0f 7f 87 5e ff ff 	movdqa %xmm0,-0xa2(%rdi)
   28277:	ff 
   28278:	66 0f 7f 87 6e ff ff 	movdqa %xmm0,-0x92(%rdi)
   2827f:	ff 
   28280:	66 0f 7f 87 7e ff ff 	movdqa %xmm0,-0x82(%rdi)
   28287:	ff 
   28288:	66 0f 7f 47 8e       	movdqa %xmm0,-0x72(%rdi)
   2828d:	66 0f 7f 47 9e       	movdqa %xmm0,-0x62(%rdi)
   28292:	66 0f 7f 47 ae       	movdqa %xmm0,-0x52(%rdi)
   28297:	66 0f 7f 47 be       	movdqa %xmm0,-0x42(%rdi)
   2829c:	66 0f 7f 47 ce       	movdqa %xmm0,-0x32(%rdi)
   282a1:	66 0f 7f 47 de       	movdqa %xmm0,-0x22(%rdi)
   282a6:	66 0f 7f 47 ee       	movdqa %xmm0,-0x12(%rdi)
   282ab:	66 89 57 fe          	mov    %dx,-0x2(%rdi)
   282af:	c2 00 00             	retq   $0x0
   282b2:	66 0f 7f 87 4d ff ff 	movdqa %xmm0,-0xb3(%rdi)
   282b9:	ff 
   282ba:	66 0f 7f 87 5d ff ff 	movdqa %xmm0,-0xa3(%rdi)
   282c1:	ff 
   282c2:	66 0f 7f 87 6d ff ff 	movdqa %xmm0,-0x93(%rdi)
   282c9:	ff 
   282ca:	66 0f 7f 87 7d ff ff 	movdqa %xmm0,-0x83(%rdi)
   282d1:	ff 
   282d2:	66 0f 7f 47 8d       	movdqa %xmm0,-0x73(%rdi)
   282d7:	66 0f 7f 47 9d       	movdqa %xmm0,-0x63(%rdi)
   282dc:	66 0f 7f 47 ad       	movdqa %xmm0,-0x53(%rdi)
   282e1:	66 0f 7f 47 bd       	movdqa %xmm0,-0x43(%rdi)
   282e6:	66 0f 7f 47 cd       	movdqa %xmm0,-0x33(%rdi)
   282eb:	66 0f 7f 47 dd       	movdqa %xmm0,-0x23(%rdi)
   282f0:	66 0f 7f 47 ed       	movdqa %xmm0,-0x13(%rdi)
   282f5:	66 89 57 fd          	mov    %dx,-0x3(%rdi)
   282f9:	88 57 ff             	mov    %dl,-0x1(%rdi)
   282fc:	c2 00 00             	retq   $0x0
   282ff:	66 0f 7f 87 4c ff ff 	movdqa %xmm0,-0xb4(%rdi)
   28306:	ff 
   28307:	66 0f 7f 87 5c ff ff 	movdqa %xmm0,-0xa4(%rdi)
   2830e:	ff 
   2830f:	66 0f 7f 87 6c ff ff 	movdqa %xmm0,-0x94(%rdi)
   28316:	ff 
   28317:	66 0f 7f 87 7c ff ff 	movdqa %xmm0,-0x84(%rdi)
   2831e:	ff 
   2831f:	66 0f 7f 47 8c       	movdqa %xmm0,-0x74(%rdi)
   28324:	66 0f 7f 47 9c       	movdqa %xmm0,-0x64(%rdi)
   28329:	66 0f 7f 47 ac       	movdqa %xmm0,-0x54(%rdi)
   2832e:	66 0f 7f 47 bc       	movdqa %xmm0,-0x44(%rdi)
   28333:	66 0f 7f 47 cc       	movdqa %xmm0,-0x34(%rdi)
   28338:	66 0f 7f 47 dc       	movdqa %xmm0,-0x24(%rdi)
   2833d:	66 0f 7f 47 ec       	movdqa %xmm0,-0x14(%rdi)
   28342:	89 57 fc             	mov    %edx,-0x4(%rdi)
   28345:	c2 00 00             	retq   $0x0
   28348:	66 0f 7f 87 4b ff ff 	movdqa %xmm0,-0xb5(%rdi)
   2834f:	ff 
   28350:	66 0f 7f 87 5b ff ff 	movdqa %xmm0,-0xa5(%rdi)
   28357:	ff 
   28358:	66 0f 7f 87 6b ff ff 	movdqa %xmm0,-0x95(%rdi)
   2835f:	ff 
   28360:	66 0f 7f 87 7b ff ff 	movdqa %xmm0,-0x85(%rdi)
   28367:	ff 
   28368:	66 0f 7f 47 8b       	movdqa %xmm0,-0x75(%rdi)
   2836d:	66 0f 7f 47 9b       	movdqa %xmm0,-0x65(%rdi)
   28372:	66 0f 7f 47 ab       	movdqa %xmm0,-0x55(%rdi)
   28377:	66 0f 7f 47 bb       	movdqa %xmm0,-0x45(%rdi)
   2837c:	66 0f 7f 47 cb       	movdqa %xmm0,-0x35(%rdi)
   28381:	66 0f 7f 47 db       	movdqa %xmm0,-0x25(%rdi)
   28386:	66 0f 7f 47 eb       	movdqa %xmm0,-0x15(%rdi)
   2838b:	89 57 fb             	mov    %edx,-0x5(%rdi)
   2838e:	88 57 ff             	mov    %dl,-0x1(%rdi)
   28391:	c2 00 00             	retq   $0x0
   28394:	66 0f 7f 87 4a ff ff 	movdqa %xmm0,-0xb6(%rdi)
   2839b:	ff 
   2839c:	66 0f 7f 87 5a ff ff 	movdqa %xmm0,-0xa6(%rdi)
   283a3:	ff 
   283a4:	66 0f 7f 87 6a ff ff 	movdqa %xmm0,-0x96(%rdi)
   283ab:	ff 
   283ac:	66 0f 7f 87 7a ff ff 	movdqa %xmm0,-0x86(%rdi)
   283b3:	ff 
   283b4:	66 0f 7f 47 8a       	movdqa %xmm0,-0x76(%rdi)
   283b9:	66 0f 7f 47 9a       	movdqa %xmm0,-0x66(%rdi)
   283be:	66 0f 7f 47 aa       	movdqa %xmm0,-0x56(%rdi)
   283c3:	66 0f 7f 47 ba       	movdqa %xmm0,-0x46(%rdi)
   283c8:	66 0f 7f 47 ca       	movdqa %xmm0,-0x36(%rdi)
   283cd:	66 0f 7f 47 da       	movdqa %xmm0,-0x26(%rdi)
   283d2:	66 0f 7f 47 ea       	movdqa %xmm0,-0x16(%rdi)
   283d7:	89 57 fa             	mov    %edx,-0x6(%rdi)
   283da:	66 89 57 fe          	mov    %dx,-0x2(%rdi)
   283de:	c2 00 00             	retq   $0x0
   283e1:	66 0f 7f 87 49 ff ff 	movdqa %xmm0,-0xb7(%rdi)
   283e8:	ff 
   283e9:	66 0f 7f 87 59 ff ff 	movdqa %xmm0,-0xa7(%rdi)
   283f0:	ff 
   283f1:	66 0f 7f 87 69 ff ff 	movdqa %xmm0,-0x97(%rdi)
   283f8:	ff 
   283f9:	66 0f 7f 87 79 ff ff 	movdqa %xmm0,-0x87(%rdi)
   28400:	ff 
   28401:	66 0f 7f 47 89       	movdqa %xmm0,-0x77(%rdi)
   28406:	66 0f 7f 47 99       	movdqa %xmm0,-0x67(%rdi)
   2840b:	66 0f 7f 47 a9       	movdqa %xmm0,-0x57(%rdi)
   28410:	66 0f 7f 47 b9       	movdqa %xmm0,-0x47(%rdi)
   28415:	66 0f 7f 47 c9       	movdqa %xmm0,-0x37(%rdi)
   2841a:	66 0f 7f 47 d9       	movdqa %xmm0,-0x27(%rdi)
   2841f:	66 0f 7f 47 e9       	movdqa %xmm0,-0x17(%rdi)
   28424:	89 57 f9             	mov    %edx,-0x7(%rdi)
   28427:	66 89 57 fd          	mov    %dx,-0x3(%rdi)
   2842b:	88 57 ff             	mov    %dl,-0x1(%rdi)
   2842e:	c2 00 00             	retq   $0x0
   28431:	66 0f 7f 87 48 ff ff 	movdqa %xmm0,-0xb8(%rdi)
   28438:	ff 
   28439:	66 0f 7f 87 58 ff ff 	movdqa %xmm0,-0xa8(%rdi)
   28440:	ff 
   28441:	66 0f 7f 87 68 ff ff 	movdqa %xmm0,-0x98(%rdi)
   28448:	ff 
   28449:	66 0f 7f 87 78 ff ff 	movdqa %xmm0,-0x88(%rdi)
   28450:	ff 
   28451:	66 0f 7f 47 88       	movdqa %xmm0,-0x78(%rdi)
   28456:	66 0f 7f 47 98       	movdqa %xmm0,-0x68(%rdi)
   2845b:	66 0f 7f 47 a8       	movdqa %xmm0,-0x58(%rdi)
   28460:	66 0f 7f 47 b8       	movdqa %xmm0,-0x48(%rdi)
   28465:	66 0f 7f 47 c8       	movdqa %xmm0,-0x38(%rdi)
   2846a:	66 0f 7f 47 d8       	movdqa %xmm0,-0x28(%rdi)
   2846f:	66 0f 7f 47 e8       	movdqa %xmm0,-0x18(%rdi)
   28474:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
   28478:	c2 00 00             	retq   $0x0
   2847b:	66 0f 7f 87 47 ff ff 	movdqa %xmm0,-0xb9(%rdi)
   28482:	ff 
   28483:	66 0f 7f 87 57 ff ff 	movdqa %xmm0,-0xa9(%rdi)
   2848a:	ff 
   2848b:	66 0f 7f 87 67 ff ff 	movdqa %xmm0,-0x99(%rdi)
   28492:	ff 
   28493:	66 0f 7f 87 77 ff ff 	movdqa %xmm0,-0x89(%rdi)
   2849a:	ff 
   2849b:	66 0f 7f 47 87       	movdqa %xmm0,-0x79(%rdi)
   284a0:	66 0f 7f 47 97       	movdqa %xmm0,-0x69(%rdi)
   284a5:	66 0f 7f 47 a7       	movdqa %xmm0,-0x59(%rdi)
   284aa:	66 0f 7f 47 b7       	movdqa %xmm0,-0x49(%rdi)
   284af:	66 0f 7f 47 c7       	movdqa %xmm0,-0x39(%rdi)
   284b4:	66 0f 7f 47 d7       	movdqa %xmm0,-0x29(%rdi)
   284b9:	66 0f 7f 47 e7       	movdqa %xmm0,-0x19(%rdi)
   284be:	48 89 57 f7          	mov    %rdx,-0x9(%rdi)
   284c2:	88 57 ff             	mov    %dl,-0x1(%rdi)
   284c5:	c2 00 00             	retq   $0x0
   284c8:	66 0f 7f 87 46 ff ff 	movdqa %xmm0,-0xba(%rdi)
   284cf:	ff 
   284d0:	66 0f 7f 87 56 ff ff 	movdqa %xmm0,-0xaa(%rdi)
   284d7:	ff 
   284d8:	66 0f 7f 87 66 ff ff 	movdqa %xmm0,-0x9a(%rdi)
   284df:	ff 
   284e0:	66 0f 7f 87 76 ff ff 	movdqa %xmm0,-0x8a(%rdi)
   284e7:	ff 
   284e8:	66 0f 7f 47 86       	movdqa %xmm0,-0x7a(%rdi)
   284ed:	66 0f 7f 47 96       	movdqa %xmm0,-0x6a(%rdi)
   284f2:	66 0f 7f 47 a6       	movdqa %xmm0,-0x5a(%rdi)
   284f7:	66 0f 7f 47 b6       	movdqa %xmm0,-0x4a(%rdi)
   284fc:	66 0f 7f 47 c6       	movdqa %xmm0,-0x3a(%rdi)
   28501:	66 0f 7f 47 d6       	movdqa %xmm0,-0x2a(%rdi)
   28506:	66 0f 7f 47 e6       	movdqa %xmm0,-0x1a(%rdi)
   2850b:	48 89 57 f6          	mov    %rdx,-0xa(%rdi)
   2850f:	66 89 57 fe          	mov    %dx,-0x2(%rdi)
   28513:	c2 00 00             	retq   $0x0
   28516:	66 0f 7f 87 45 ff ff 	movdqa %xmm0,-0xbb(%rdi)
   2851d:	ff 
   2851e:	66 0f 7f 87 55 ff ff 	movdqa %xmm0,-0xab(%rdi)
   28525:	ff 
   28526:	66 0f 7f 87 65 ff ff 	movdqa %xmm0,-0x9b(%rdi)
   2852d:	ff 
   2852e:	66 0f 7f 87 75 ff ff 	movdqa %xmm0,-0x8b(%rdi)
   28535:	ff 
   28536:	66 0f 7f 47 85       	movdqa %xmm0,-0x7b(%rdi)
   2853b:	66 0f 7f 47 95       	movdqa %xmm0,-0x6b(%rdi)
   28540:	66 0f 7f 47 a5       	movdqa %xmm0,-0x5b(%rdi)
   28545:	66 0f 7f 47 b5       	movdqa %xmm0,-0x4b(%rdi)
   2854a:	66 0f 7f 47 c5       	movdqa %xmm0,-0x3b(%rdi)
   2854f:	66 0f 7f 47 d5       	movdqa %xmm0,-0x2b(%rdi)
   28554:	66 0f 7f 47 e5       	movdqa %xmm0,-0x1b(%rdi)
   28559:	48 89 57 f5          	mov    %rdx,-0xb(%rdi)
   2855d:	66 89 57 fd          	mov    %dx,-0x3(%rdi)
   28561:	88 57 ff             	mov    %dl,-0x1(%rdi)
   28564:	c2 00 00             	retq   $0x0
   28567:	66 0f 7f 87 44 ff ff 	movdqa %xmm0,-0xbc(%rdi)
   2856e:	ff 
   2856f:	66 0f 7f 87 54 ff ff 	movdqa %xmm0,-0xac(%rdi)
   28576:	ff 
   28577:	66 0f 7f 87 64 ff ff 	movdqa %xmm0,-0x9c(%rdi)
   2857e:	ff 
   2857f:	66 0f 7f 87 74 ff ff 	movdqa %xmm0,-0x8c(%rdi)
   28586:	ff 
   28587:	66 0f 7f 47 84       	movdqa %xmm0,-0x7c(%rdi)
   2858c:	66 0f 7f 47 94       	movdqa %xmm0,-0x6c(%rdi)
   28591:	66 0f 7f 47 a4       	movdqa %xmm0,-0x5c(%rdi)
   28596:	66 0f 7f 47 b4       	movdqa %xmm0,-0x4c(%rdi)
   2859b:	66 0f 7f 47 c4       	movdqa %xmm0,-0x3c(%rdi)
   285a0:	66 0f 7f 47 d4       	movdqa %xmm0,-0x2c(%rdi)
   285a5:	66 0f 7f 47 e4       	movdqa %xmm0,-0x1c(%rdi)
   285aa:	48 89 57 f4          	mov    %rdx,-0xc(%rdi)
   285ae:	89 57 fc             	mov    %edx,-0x4(%rdi)
   285b1:	c2 00 00             	retq   $0x0
   285b4:	66 0f 7f 87 43 ff ff 	movdqa %xmm0,-0xbd(%rdi)
   285bb:	ff 
   285bc:	66 0f 7f 87 53 ff ff 	movdqa %xmm0,-0xad(%rdi)
   285c3:	ff 
   285c4:	66 0f 7f 87 63 ff ff 	movdqa %xmm0,-0x9d(%rdi)
   285cb:	ff 
   285cc:	66 0f 7f 87 73 ff ff 	movdqa %xmm0,-0x8d(%rdi)
   285d3:	ff 
   285d4:	66 0f 7f 47 83       	movdqa %xmm0,-0x7d(%rdi)
   285d9:	66 0f 7f 47 93       	movdqa %xmm0,-0x6d(%rdi)
   285de:	66 0f 7f 47 a3       	movdqa %xmm0,-0x5d(%rdi)
   285e3:	66 0f 7f 47 b3       	movdqa %xmm0,-0x4d(%rdi)
   285e8:	66 0f 7f 47 c3       	movdqa %xmm0,-0x3d(%rdi)
   285ed:	66 0f 7f 47 d3       	movdqa %xmm0,-0x2d(%rdi)
   285f2:	66 0f 7f 47 e3       	movdqa %xmm0,-0x1d(%rdi)
   285f7:	48 89 57 f3          	mov    %rdx,-0xd(%rdi)
   285fb:	89 57 fb             	mov    %edx,-0x5(%rdi)
   285fe:	88 57 ff             	mov    %dl,-0x1(%rdi)
   28601:	c2 00 00             	retq   $0x0
   28604:	66 0f 7f 87 42 ff ff 	movdqa %xmm0,-0xbe(%rdi)
   2860b:	ff 
   2860c:	66 0f 7f 87 52 ff ff 	movdqa %xmm0,-0xae(%rdi)
   28613:	ff 
   28614:	66 0f 7f 87 62 ff ff 	movdqa %xmm0,-0x9e(%rdi)
   2861b:	ff 
   2861c:	66 0f 7f 87 72 ff ff 	movdqa %xmm0,-0x8e(%rdi)
   28623:	ff 
   28624:	66 0f 7f 47 82       	movdqa %xmm0,-0x7e(%rdi)
   28629:	66 0f 7f 47 92       	movdqa %xmm0,-0x6e(%rdi)
   2862e:	66 0f 7f 47 a2       	movdqa %xmm0,-0x5e(%rdi)
   28633:	66 0f 7f 47 b2       	movdqa %xmm0,-0x4e(%rdi)
   28638:	66 0f 7f 47 c2       	movdqa %xmm0,-0x3e(%rdi)
   2863d:	66 0f 7f 47 d2       	movdqa %xmm0,-0x2e(%rdi)
   28642:	66 0f 7f 47 e2       	movdqa %xmm0,-0x1e(%rdi)
   28647:	48 89 57 f2          	mov    %rdx,-0xe(%rdi)
   2864b:	89 57 fa             	mov    %edx,-0x6(%rdi)
   2864e:	66 89 57 fe          	mov    %dx,-0x2(%rdi)
   28652:	c2 00 00             	retq   $0x0
   28655:	66 0f 7f 87 41 ff ff 	movdqa %xmm0,-0xbf(%rdi)
   2865c:	ff 
   2865d:	66 0f 7f 87 51 ff ff 	movdqa %xmm0,-0xaf(%rdi)
   28664:	ff 
   28665:	66 0f 7f 87 61 ff ff 	movdqa %xmm0,-0x9f(%rdi)
   2866c:	ff 
   2866d:	66 0f 7f 87 71 ff ff 	movdqa %xmm0,-0x8f(%rdi)
   28674:	ff 
   28675:	66 0f 7f 47 81       	movdqa %xmm0,-0x7f(%rdi)
   2867a:	66 0f 7f 47 91       	movdqa %xmm0,-0x6f(%rdi)
   2867f:	66 0f 7f 47 a1       	movdqa %xmm0,-0x5f(%rdi)
   28684:	66 0f 7f 47 b1       	movdqa %xmm0,-0x4f(%rdi)
   28689:	66 0f 7f 47 c1       	movdqa %xmm0,-0x3f(%rdi)
   2868e:	66 0f 7f 47 d1       	movdqa %xmm0,-0x2f(%rdi)
   28693:	66 0f 7f 47 e1       	movdqa %xmm0,-0x1f(%rdi)
   28698:	48 89 57 f1          	mov    %rdx,-0xf(%rdi)
   2869c:	89 57 f9             	mov    %edx,-0x7(%rdi)
   2869f:	66 89 57 fd          	mov    %dx,-0x3(%rdi)
   286a3:	88 57 ff             	mov    %dl,-0x1(%rdi)
   286a6:	c2 00 00             	retq   $0x0
   286a9:	44 8b 0d d4 d1 20 00 	mov    0x20d1d4(%rip),%r9d        # 235884 <__libirc_largest_cache_size>
   286b0:	4d 39 c8             	cmp    %r9,%r8
   286b3:	7f 5b                	jg     28710 <__intel_memset+0xab0>
   286b5:	eb 09                	jmp    286c0 <__intel_memset+0xa60>
   286b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   286be:	00 00 
   286c0:	4d 8d 40 80          	lea    -0x80(%r8),%r8
   286c4:	66 0f 7f 07          	movdqa %xmm0,(%rdi)
   286c8:	66 0f 7f 47 10       	movdqa %xmm0,0x10(%rdi)
   286cd:	66 0f 7f 47 20       	movdqa %xmm0,0x20(%rdi)
   286d2:	66 0f 7f 47 30       	movdqa %xmm0,0x30(%rdi)
   286d7:	49 81 f8 80 00 00 00 	cmp    $0x80,%r8
   286de:	66 0f 7f 47 40       	movdqa %xmm0,0x40(%rdi)
   286e3:	66 0f 7f 47 50       	movdqa %xmm0,0x50(%rdi)
   286e8:	66 0f 7f 47 60       	movdqa %xmm0,0x60(%rdi)
   286ed:	66 0f 7f 47 70       	movdqa %xmm0,0x70(%rdi)
   286f2:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
   286f9:	7d c5                	jge    286c0 <__intel_memset+0xa60>
   286fb:	4c 8d 1d 3e 01 00 00 	lea    0x13e(%rip),%r11        # 28840 <__intel_memset+0xbe0>
   28702:	4c 01 c7             	add    %r8,%rdi
   28705:	4b 8b 0c c3          	mov    (%r11,%r8,8),%rcx
   28709:	4e 8d 1c 19          	lea    (%rcx,%r11,1),%r11
   2870d:	41 ff e3             	jmpq   *%r11
   28710:	49 83 f9 00          	cmp    $0x0,%r9
   28714:	74 aa                	je     286c0 <__intel_memset+0xa60>
   28716:	eb 08                	jmp    28720 <__intel_memset+0xac0>
   28718:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2871f:	00 
   28720:	49 81 e8 80 00 00 00 	sub    $0x80,%r8
   28727:	66 0f e7 07          	movntdq %xmm0,(%rdi)
   2872b:	66 0f e7 47 10       	movntdq %xmm0,0x10(%rdi)
   28730:	66 0f e7 47 20       	movntdq %xmm0,0x20(%rdi)
   28735:	66 0f e7 47 30       	movntdq %xmm0,0x30(%rdi)
   2873a:	66 0f e7 47 40       	movntdq %xmm0,0x40(%rdi)
   2873f:	66 0f e7 47 50       	movntdq %xmm0,0x50(%rdi)
   28744:	66 0f e7 47 60       	movntdq %xmm0,0x60(%rdi)
   28749:	66 0f e7 47 70       	movntdq %xmm0,0x70(%rdi)
   2874e:	48 81 c7 80 00 00 00 	add    $0x80,%rdi
   28755:	49 81 f8 80 00 00 00 	cmp    $0x80,%r8
   2875c:	7d c2                	jge    28720 <__intel_memset+0xac0>
   2875e:	0f ae f8             	sfence 
   28761:	4c 8d 1d d8 00 00 00 	lea    0xd8(%rip),%r11        # 28840 <__intel_memset+0xbe0>
   28768:	4c 01 c7             	add    %r8,%rdi
   2876b:	4b 8b 0c c3          	mov    (%r11,%r8,8),%rcx
   2876f:	4e 8d 1c 19          	lea    (%rcx,%r11,1),%r11
   28773:	41 ff e3             	jmpq   *%r11
   28776:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   2877d:	00 00 00 
   28780:	44 8b 0d fd d0 20 00 	mov    0x20d0fd(%rip),%r9d        # 235884 <__libirc_largest_cache_size>
   28787:	4d 39 c8             	cmp    %r9,%r8
   2878a:	7f 54                	jg     287e0 <__intel_memset+0xb80>
   2878c:	eb 02                	jmp    28790 <__intel_memset+0xb30>
   2878e:	66 90                	xchg   %ax,%ax
   28790:	48 89 17             	mov    %rdx,(%rdi)
   28793:	48 89 57 08          	mov    %rdx,0x8(%rdi)
   28797:	4d 8d 40 c0          	lea    -0x40(%r8),%r8
   2879b:	48 89 57 10          	mov    %rdx,0x10(%rdi)
   2879f:	48 89 57 18          	mov    %rdx,0x18(%rdi)
   287a3:	49 83 f8 40          	cmp    $0x40,%r8
   287a7:	48 89 57 20          	mov    %rdx,0x20(%rdi)
   287ab:	48 89 57 28          	mov    %rdx,0x28(%rdi)
   287af:	48 89 57 30          	mov    %rdx,0x30(%rdi)
   287b3:	48 89 57 38          	mov    %rdx,0x38(%rdi)
   287b7:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   287bb:	7f d3                	jg     28790 <__intel_memset+0xb30>
   287bd:	4c 8d 1d ec f4 ff ff 	lea    -0xb14(%rip),%r11        # 27cb0 <__intel_memset+0x50>
   287c4:	4a 8d 3c 07          	lea    (%rdi,%r8,1),%rdi
   287c8:	4b 8b 0c c3          	mov    (%r11,%r8,8),%rcx
   287cc:	4e 8d 1c 19          	lea    (%rcx,%r11,1),%r11
   287d0:	41 ff e3             	jmpq   *%r11
   287d3:	0f 1f 00             	nopl   (%rax)
   287d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
   287dd:	00 00 00 
   287e0:	49 83 f9 00          	cmp    $0x0,%r9
   287e4:	74 aa                	je     28790 <__intel_memset+0xb30>
   287e6:	eb 08                	jmp    287f0 <__intel_memset+0xb90>
   287e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   287ef:	00 
   287f0:	48 0f c3 17          	movnti %rdx,(%rdi)
   287f4:	48 0f c3 57 08       	movnti %rdx,0x8(%rdi)
   287f9:	4d 8d 40 c0          	lea    -0x40(%r8),%r8
   287fd:	48 0f c3 57 10       	movnti %rdx,0x10(%rdi)
   28802:	48 0f c3 57 18       	movnti %rdx,0x18(%rdi)
   28807:	48 0f c3 57 20       	movnti %rdx,0x20(%rdi)
   2880c:	49 83 f8 40          	cmp    $0x40,%r8
   28810:	48 0f c3 57 28       	movnti %rdx,0x28(%rdi)
   28815:	48 0f c3 57 30       	movnti %rdx,0x30(%rdi)
   2881a:	48 0f c3 57 38       	movnti %rdx,0x38(%rdi)
   2881f:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
   28823:	7d cb                	jge    287f0 <__intel_memset+0xb90>
   28825:	4c 8d 1d 84 f4 ff ff 	lea    -0xb7c(%rip),%r11        # 27cb0 <__intel_memset+0x50>
   2882c:	4a 8d 3c 07          	lea    (%rdi,%r8,1),%rdi
   28830:	4b 8b 0c c3          	mov    (%r11,%r8,8),%rcx
   28834:	4e 8d 1c 19          	lea    (%rcx,%r11,1),%r11
   28838:	41 ff e3             	jmpq   *%r11
   2883b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
   28840:	e0 f9                	loopne 2883b <__intel_memset+0xbdb>
   28842:	ff                   	(bad)  
   28843:	ff                   	(bad)  
   28844:	ff                   	(bad)  
   28845:	ff                   	(bad)  
   28846:	ff                   	(bad)  
   28847:	ff 24 fa             	jmpq   *(%rdx,%rdi,8)
   2884a:	ff                   	(bad)  
   2884b:	ff                   	(bad)  
   2884c:	ff                   	(bad)  
   2884d:	ff                   	(bad)  
   2884e:	ff                   	(bad)  
   2884f:	ff 6b fa             	ljmp   *-0x6(%rbx)
   28852:	ff                   	(bad)  
   28853:	ff                   	(bad)  
   28854:	ff                   	(bad)  
   28855:	ff                   	(bad)  
   28856:	ff                   	(bad)  
   28857:	ff b5 fa ff ff ff    	pushq  -0x6(%rbp)
   2885d:	ff                   	(bad)  
   2885e:	ff                   	(bad)  
   2885f:	ff 02                	incl   (%rdx)
   28861:	fb                   	sti    
   28862:	ff                   	(bad)  
   28863:	ff                   	(bad)  
   28864:	ff                   	(bad)  
   28865:	ff                   	(bad)  
   28866:	ff                   	(bad)  
   28867:	ff 4b fb             	decl   -0x5(%rbx)
   2886a:	ff                   	(bad)  
   2886b:	ff                   	(bad)  
   2886c:	ff                   	(bad)  
   2886d:	ff                   	(bad)  
   2886e:	ff                   	(bad)  
   2886f:	ff 97 fb ff ff ff    	callq  *-0x5(%rdi)
   28875:	ff                   	(bad)  
   28876:	ff                   	(bad)  
   28877:	ff e4                	jmpq   *%rsp
   28879:	fb                   	sti    
   2887a:	ff                   	(bad)  
   2887b:	ff                   	(bad)  
   2887c:	ff                   	(bad)  
   2887d:	ff                   	(bad)  
   2887e:	ff                   	(bad)  
   2887f:	ff 34 fc             	pushq  (%rsp,%rdi,8)
   28882:	ff                   	(bad)  
   28883:	ff                   	(bad)  
   28884:	ff                   	(bad)  
   28885:	ff                   	(bad)  
   28886:	ff                   	(bad)  
   28887:	ff                   	(bad)  
   28888:	7e fc                	jle    28886 <__intel_memset+0xc26>
   2888a:	ff                   	(bad)  
   2888b:	ff                   	(bad)  
   2888c:	ff                   	(bad)  
   2888d:	ff                   	(bad)  
   2888e:	ff                   	(bad)  
   2888f:	ff cb                	dec    %ebx
   28891:	fc                   	cld    
   28892:	ff                   	(bad)  
   28893:	ff                   	(bad)  
   28894:	ff                   	(bad)  
   28895:	ff                   	(bad)  
   28896:	ff                   	(bad)  
   28897:	ff 19                	lcall  *(%rcx)
   28899:	fd                   	std    
   2889a:	ff                   	(bad)  
   2889b:	ff                   	(bad)  
   2889c:	ff                   	(bad)  
   2889d:	ff                   	(bad)  
   2889e:	ff                   	(bad)  
   2889f:	ff 6a fd             	ljmp   *-0x3(%rdx)
   288a2:	ff                   	(bad)  
   288a3:	ff                   	(bad)  
   288a4:	ff                   	(bad)  
   288a5:	ff                   	(bad)  
   288a6:	ff                   	(bad)  
   288a7:	ff b7 fd ff ff ff    	pushq  -0x3(%rdi)
   288ad:	ff                   	(bad)  
   288ae:	ff                   	(bad)  
   288af:	ff 07                	incl   (%rdi)
   288b1:	fe                   	(bad)  
   288b2:	ff                   	(bad)  
   288b3:	ff                   	(bad)  
   288b4:	ff                   	(bad)  
   288b5:	ff                   	(bad)  
   288b6:	ff                   	(bad)  
   288b7:	ff 58 fe             	lcall  *-0x2(%rax)
   288ba:	ff                   	(bad)  
   288bb:	ff                   	(bad)  
   288bc:	ff                   	(bad)  
   288bd:	ff                   	(bad)  
   288be:	ff                   	(bad)  
   288bf:	ff                   	(bad)  
   288c0:	db f9                	(bad)  
   288c2:	ff                   	(bad)  
   288c3:	ff                   	(bad)  
   288c4:	ff                   	(bad)  
   288c5:	ff                   	(bad)  
   288c6:	ff                   	(bad)  
   288c7:	ff 1f                	lcall  *(%rdi)
   288c9:	fa                   	cli    
   288ca:	ff                   	(bad)  
   288cb:	ff                   	(bad)  
   288cc:	ff                   	(bad)  
   288cd:	ff                   	(bad)  
   288ce:	ff                   	(bad)  
   288cf:	ff 66 fa             	jmpq   *-0x6(%rsi)
   288d2:	ff                   	(bad)  
   288d3:	ff                   	(bad)  
   288d4:	ff                   	(bad)  
   288d5:	ff                   	(bad)  
   288d6:	ff                   	(bad)  
   288d7:	ff b0 fa ff ff ff    	pushq  -0x6(%rax)
   288dd:	ff                   	(bad)  
   288de:	ff                   	(bad)  
   288df:	ff                   	(bad)  
   288e0:	fd                   	std    
   288e1:	fa                   	cli    
   288e2:	ff                   	(bad)  
   288e3:	ff                   	(bad)  
   288e4:	ff                   	(bad)  
   288e5:	ff                   	(bad)  
   288e6:	ff                   	(bad)  
   288e7:	ff 46 fb             	incl   -0x5(%rsi)
   288ea:	ff                   	(bad)  
   288eb:	ff                   	(bad)  
   288ec:	ff                   	(bad)  
   288ed:	ff                   	(bad)  
   288ee:	ff                   	(bad)  
   288ef:	ff 92 fb ff ff ff    	callq  *-0x5(%rdx)
   288f5:	ff                   	(bad)  
   288f6:	ff                   	(bad)  
   288f7:	ff                   	(bad)  
   288f8:	df fb                	(bad)  
   288fa:	ff                   	(bad)  
   288fb:	ff                   	(bad)  
   288fc:	ff                   	(bad)  
   288fd:	ff                   	(bad)  
   288fe:	ff                   	(bad)  
   288ff:	ff 2f                	ljmp   *(%rdi)
   28901:	fc                   	cld    
   28902:	ff                   	(bad)  
   28903:	ff                   	(bad)  
   28904:	ff                   	(bad)  
   28905:	ff                   	(bad)  
   28906:	ff                   	(bad)  
   28907:	ff                   	(bad)  
   28908:	79 fc                	jns    28906 <__intel_memset+0xca6>
   2890a:	ff                   	(bad)  
   2890b:	ff                   	(bad)  
   2890c:	ff                   	(bad)  
   2890d:	ff                   	(bad)  
   2890e:	ff                   	(bad)  
   2890f:	ff c6                	inc    %esi
   28911:	fc                   	cld    
   28912:	ff                   	(bad)  
   28913:	ff                   	(bad)  
   28914:	ff                   	(bad)  
   28915:	ff                   	(bad)  
   28916:	ff                   	(bad)  
   28917:	ff 14 fd ff ff ff ff 	callq  *-0x1(,%rdi,8)
   2891e:	ff                   	(bad)  
   2891f:	ff 65 fd             	jmpq   *-0x3(%rbp)
   28922:	ff                   	(bad)  
   28923:	ff                   	(bad)  
   28924:	ff                   	(bad)  
   28925:	ff                   	(bad)  
   28926:	ff                   	(bad)  
   28927:	ff b2 fd ff ff ff    	pushq  -0x3(%rdx)
   2892d:	ff                   	(bad)  
   2892e:	ff                   	(bad)  
   2892f:	ff 02                	incl   (%rdx)
   28931:	fe                   	(bad)  
   28932:	ff                   	(bad)  
   28933:	ff                   	(bad)  
   28934:	ff                   	(bad)  
   28935:	ff                   	(bad)  
   28936:	ff                   	(bad)  
   28937:	ff 53 fe             	callq  *-0x2(%rbx)
   2893a:	ff                   	(bad)  
   2893b:	ff                   	(bad)  
   2893c:	ff                   	(bad)  
   2893d:	ff                   	(bad)  
   2893e:	ff                   	(bad)  
   2893f:	ff d6                	callq  *%rsi
   28941:	f9                   	stc    
   28942:	ff                   	(bad)  
   28943:	ff                   	(bad)  
   28944:	ff                   	(bad)  
   28945:	ff                   	(bad)  
   28946:	ff                   	(bad)  
   28947:	ff 1a                	lcall  *(%rdx)
   28949:	fa                   	cli    
   2894a:	ff                   	(bad)  
   2894b:	ff                   	(bad)  
   2894c:	ff                   	(bad)  
   2894d:	ff                   	(bad)  
   2894e:	ff                   	(bad)  
   2894f:	ff 61 fa             	jmpq   *-0x6(%rcx)
   28952:	ff                   	(bad)  
   28953:	ff                   	(bad)  
   28954:	ff                   	(bad)  
   28955:	ff                   	(bad)  
   28956:	ff                   	(bad)  
   28957:	ff ab fa ff ff ff    	ljmp   *-0x6(%rbx)
   2895d:	ff                   	(bad)  
   2895e:	ff                   	(bad)  
   2895f:	ff                   	(bad)  
   28960:	f8                   	clc    
   28961:	fa                   	cli    
   28962:	ff                   	(bad)  
   28963:	ff                   	(bad)  
   28964:	ff                   	(bad)  
   28965:	ff                   	(bad)  
   28966:	ff                   	(bad)  
   28967:	ff 41 fb             	incl   -0x5(%rcx)
   2896a:	ff                   	(bad)  
   2896b:	ff                   	(bad)  
   2896c:	ff                   	(bad)  
   2896d:	ff                   	(bad)  
   2896e:	ff                   	(bad)  
   2896f:	ff 8d fb ff ff ff    	decl   -0x5(%rbp)
   28975:	ff                   	(bad)  
   28976:	ff                   	(bad)  
   28977:	ff                   	(bad)  
   28978:	da fb                	(bad)  
   2897a:	ff                   	(bad)  
   2897b:	ff                   	(bad)  
   2897c:	ff                   	(bad)  
   2897d:	ff                   	(bad)  
   2897e:	ff                   	(bad)  
   2897f:	ff 2a                	ljmp   *(%rdx)
   28981:	fc                   	cld    
   28982:	ff                   	(bad)  
   28983:	ff                   	(bad)  
   28984:	ff                   	(bad)  
   28985:	ff                   	(bad)  
   28986:	ff                   	(bad)  
   28987:	ff 74 fc ff          	pushq  -0x1(%rsp,%rdi,8)
   2898b:	ff                   	(bad)  
   2898c:	ff                   	(bad)  
   2898d:	ff                   	(bad)  
   2898e:	ff                   	(bad)  
   2898f:	ff c1                	inc    %ecx
   28991:	fc                   	cld    
   28992:	ff                   	(bad)  
   28993:	ff                   	(bad)  
   28994:	ff                   	(bad)  
   28995:	ff                   	(bad)  
   28996:	ff                   	(bad)  
   28997:	ff 0f                	decl   (%rdi)
   28999:	fd                   	std    
   2899a:	ff                   	(bad)  
   2899b:	ff                   	(bad)  
   2899c:	ff                   	(bad)  
   2899d:	ff                   	(bad)  
   2899e:	ff                   	(bad)  
   2899f:	ff 60 fd             	jmpq   *-0x3(%rax)
   289a2:	ff                   	(bad)  
   289a3:	ff                   	(bad)  
   289a4:	ff                   	(bad)  
   289a5:	ff                   	(bad)  
   289a6:	ff                   	(bad)  
   289a7:	ff ad fd ff ff ff    	ljmp   *-0x3(%rbp)
   289ad:	ff                   	(bad)  
   289ae:	ff                   	(bad)  
   289af:	ff                   	(bad)  
   289b0:	fd                   	std    
   289b1:	fd                   	std    
   289b2:	ff                   	(bad)  
   289b3:	ff                   	(bad)  
   289b4:	ff                   	(bad)  
   289b5:	ff                   	(bad)  
   289b6:	ff                   	(bad)  
   289b7:	ff 4e fe             	decl   -0x2(%rsi)
   289ba:	ff                   	(bad)  
   289bb:	ff                   	(bad)  
   289bc:	ff                   	(bad)  
   289bd:	ff                   	(bad)  
   289be:	ff                   	(bad)  
   289bf:	ff d1                	callq  *%rcx
   289c1:	f9                   	stc    
   289c2:	ff                   	(bad)  
   289c3:	ff                   	(bad)  
   289c4:	ff                   	(bad)  
   289c5:	ff                   	(bad)  
   289c6:	ff                   	(bad)  
   289c7:	ff 15 fa ff ff ff    	callq  *-0x6(%rip)        # 289c7 <__intel_memset+0xd67>
   289cd:	ff                   	(bad)  
   289ce:	ff                   	(bad)  
   289cf:	ff 5c fa ff          	lcall  *-0x1(%rdx,%rdi,8)
   289d3:	ff                   	(bad)  
   289d4:	ff                   	(bad)  
   289d5:	ff                   	(bad)  
   289d6:	ff                   	(bad)  
   289d7:	ff a6 fa ff ff ff    	jmpq   *-0x6(%rsi)
   289dd:	ff                   	(bad)  
   289de:	ff                   	(bad)  
   289df:	ff f3                	push   %rbx
   289e1:	fa                   	cli    
   289e2:	ff                   	(bad)  
   289e3:	ff                   	(bad)  
   289e4:	ff                   	(bad)  
   289e5:	ff                   	(bad)  
   289e6:	ff                   	(bad)  
   289e7:	ff                   	(bad)  
   289e8:	3c fb                	cmp    $0xfb,%al
   289ea:	ff                   	(bad)  
   289eb:	ff                   	(bad)  
   289ec:	ff                   	(bad)  
   289ed:	ff                   	(bad)  
   289ee:	ff                   	(bad)  
   289ef:	ff 88 fb ff ff ff    	decl   -0x5(%rax)
   289f5:	ff                   	(bad)  
   289f6:	ff                   	(bad)  
   289f7:	ff d5                	callq  *%rbp
   289f9:	fb                   	sti    
   289fa:	ff                   	(bad)  
   289fb:	ff                   	(bad)  
   289fc:	ff                   	(bad)  
   289fd:	ff                   	(bad)  
   289fe:	ff                   	(bad)  
   289ff:	ff 25 fc ff ff ff    	jmpq   *-0x4(%rip)        # 28a01 <__intel_memset+0xda1>
   28a05:	ff                   	(bad)  
   28a06:	ff                   	(bad)  
   28a07:	ff 6f fc             	ljmp   *-0x4(%rdi)
   28a0a:	ff                   	(bad)  
   28a0b:	ff                   	(bad)  
   28a0c:	ff                   	(bad)  
   28a0d:	ff                   	(bad)  
   28a0e:	ff                   	(bad)  
   28a0f:	ff                   	(bad)  
   28a10:	bc fc ff ff ff       	mov    $0xfffffffc,%esp
   28a15:	ff                   	(bad)  
   28a16:	ff                   	(bad)  
   28a17:	ff 0a                	decl   (%rdx)
   28a19:	fd                   	std    
   28a1a:	ff                   	(bad)  
   28a1b:	ff                   	(bad)  
   28a1c:	ff                   	(bad)  
   28a1d:	ff                   	(bad)  
   28a1e:	ff                   	(bad)  
   28a1f:	ff 5b fd             	lcall  *-0x3(%rbx)
   28a22:	ff                   	(bad)  
   28a23:	ff                   	(bad)  
   28a24:	ff                   	(bad)  
   28a25:	ff                   	(bad)  
   28a26:	ff                   	(bad)  
   28a27:	ff a8 fd ff ff ff    	ljmp   *-0x3(%rax)
   28a2d:	ff                   	(bad)  
   28a2e:	ff                   	(bad)  
   28a2f:	ff                   	(bad)  
   28a30:	f8                   	clc    
   28a31:	fd                   	std    
   28a32:	ff                   	(bad)  
   28a33:	ff                   	(bad)  
   28a34:	ff                   	(bad)  
   28a35:	ff                   	(bad)  
   28a36:	ff                   	(bad)  
   28a37:	ff 49 fe             	decl   -0x2(%rcx)
   28a3a:	ff                   	(bad)  
   28a3b:	ff                   	(bad)  
   28a3c:	ff                   	(bad)  
   28a3d:	ff                   	(bad)  
   28a3e:	ff                   	(bad)  
   28a3f:	ff cc                	dec    %esp
   28a41:	f9                   	stc    
   28a42:	ff                   	(bad)  
   28a43:	ff                   	(bad)  
   28a44:	ff                   	(bad)  
   28a45:	ff                   	(bad)  
   28a46:	ff                   	(bad)  
   28a47:	ff 10                	callq  *(%rax)
   28a49:	fa                   	cli    
   28a4a:	ff                   	(bad)  
   28a4b:	ff                   	(bad)  
   28a4c:	ff                   	(bad)  
   28a4d:	ff                   	(bad)  
   28a4e:	ff                   	(bad)  
   28a4f:	ff 57 fa             	callq  *-0x6(%rdi)
   28a52:	ff                   	(bad)  
   28a53:	ff                   	(bad)  
   28a54:	ff                   	(bad)  
   28a55:	ff                   	(bad)  
   28a56:	ff                   	(bad)  
   28a57:	ff a1 fa ff ff ff    	jmpq   *-0x6(%rcx)
   28a5d:	ff                   	(bad)  
   28a5e:	ff                   	(bad)  
   28a5f:	ff                   	(bad)  
   28a60:	ee                   	out    %al,(%dx)
   28a61:	fa                   	cli    
   28a62:	ff                   	(bad)  
   28a63:	ff                   	(bad)  
   28a64:	ff                   	(bad)  
   28a65:	ff                   	(bad)  
   28a66:	ff                   	(bad)  
   28a67:	ff 37                	pushq  (%rdi)
   28a69:	fb                   	sti    
   28a6a:	ff                   	(bad)  
   28a6b:	ff                   	(bad)  
   28a6c:	ff                   	(bad)  
   28a6d:	ff                   	(bad)  
   28a6e:	ff                   	(bad)  
   28a6f:	ff 83 fb ff ff ff    	incl   -0x5(%rbx)
   28a75:	ff                   	(bad)  
   28a76:	ff                   	(bad)  
   28a77:	ff d0                	callq  *%rax
   28a79:	fb                   	sti    
   28a7a:	ff                   	(bad)  
   28a7b:	ff                   	(bad)  
   28a7c:	ff                   	(bad)  
   28a7d:	ff                   	(bad)  
   28a7e:	ff                   	(bad)  
   28a7f:	ff 20                	jmpq   *(%rax)
   28a81:	fc                   	cld    
   28a82:	ff                   	(bad)  
   28a83:	ff                   	(bad)  
   28a84:	ff                   	(bad)  
   28a85:	ff                   	(bad)  
   28a86:	ff                   	(bad)  
   28a87:	ff 6a fc             	ljmp   *-0x4(%rdx)
   28a8a:	ff                   	(bad)  
   28a8b:	ff                   	(bad)  
   28a8c:	ff                   	(bad)  
   28a8d:	ff                   	(bad)  
   28a8e:	ff                   	(bad)  
   28a8f:	ff b7 fc ff ff ff    	pushq  -0x4(%rdi)
   28a95:	ff                   	(bad)  
   28a96:	ff                   	(bad)  
   28a97:	ff 05 fd ff ff ff    	incl   -0x3(%rip)        # 28a9a <__intel_memset+0xe3a>
   28a9d:	ff                   	(bad)  
   28a9e:	ff                   	(bad)  
   28a9f:	ff 56 fd             	callq  *-0x3(%rsi)
   28aa2:	ff                   	(bad)  
   28aa3:	ff                   	(bad)  
   28aa4:	ff                   	(bad)  
   28aa5:	ff                   	(bad)  
   28aa6:	ff                   	(bad)  
   28aa7:	ff a3 fd ff ff ff    	jmpq   *-0x3(%rbx)
   28aad:	ff                   	(bad)  
   28aae:	ff                   	(bad)  
   28aaf:	ff f3                	push   %rbx
   28ab1:	fd                   	std    
   28ab2:	ff                   	(bad)  
   28ab3:	ff                   	(bad)  
   28ab4:	ff                   	(bad)  
   28ab5:	ff                   	(bad)  
   28ab6:	ff                   	(bad)  
   28ab7:	ff 44 fe ff          	incl   -0x1(%rsi,%rdi,8)
   28abb:	ff                   	(bad)  
   28abc:	ff                   	(bad)  
   28abd:	ff                   	(bad)  
   28abe:	ff                   	(bad)  
   28abf:	ff c7                	inc    %edi
   28ac1:	f9                   	stc    
   28ac2:	ff                   	(bad)  
   28ac3:	ff                   	(bad)  
   28ac4:	ff                   	(bad)  
   28ac5:	ff                   	(bad)  
   28ac6:	ff                   	(bad)  
   28ac7:	ff 0b                	decl   (%rbx)
   28ac9:	fa                   	cli    
   28aca:	ff                   	(bad)  
   28acb:	ff                   	(bad)  
   28acc:	ff                   	(bad)  
   28acd:	ff                   	(bad)  
   28ace:	ff                   	(bad)  
   28acf:	ff 52 fa             	callq  *-0x6(%rdx)
   28ad2:	ff                   	(bad)  
   28ad3:	ff                   	(bad)  
   28ad4:	ff                   	(bad)  
   28ad5:	ff                   	(bad)  
   28ad6:	ff                   	(bad)  
   28ad7:	ff 9c fa ff ff ff ff 	lcall  *-0x1(%rdx,%rdi,8)
   28ade:	ff                   	(bad)  
   28adf:	ff                   	(bad)  
   28ae0:	e9 fa ff ff ff       	jmpq   28adf <__intel_memset+0xe7f>
   28ae5:	ff                   	(bad)  
   28ae6:	ff                   	(bad)  
   28ae7:	ff 32                	pushq  (%rdx)
   28ae9:	fb                   	sti    
   28aea:	ff                   	(bad)  
   28aeb:	ff                   	(bad)  
   28aec:	ff                   	(bad)  
   28aed:	ff                   	(bad)  
   28aee:	ff                   	(bad)  
   28aef:	ff                   	(bad)  
   28af0:	7e fb                	jle    28aed <__intel_memset+0xe8d>
   28af2:	ff                   	(bad)  
   28af3:	ff                   	(bad)  
   28af4:	ff                   	(bad)  
   28af5:	ff                   	(bad)  
   28af6:	ff                   	(bad)  
   28af7:	ff cb                	dec    %ebx
   28af9:	fb                   	sti    
   28afa:	ff                   	(bad)  
   28afb:	ff                   	(bad)  
   28afc:	ff                   	(bad)  
   28afd:	ff                   	(bad)  
   28afe:	ff                   	(bad)  
   28aff:	ff 1b                	lcall  *(%rbx)
   28b01:	fc                   	cld    
   28b02:	ff                   	(bad)  
   28b03:	ff                   	(bad)  
   28b04:	ff                   	(bad)  
   28b05:	ff                   	(bad)  
   28b06:	ff                   	(bad)  
   28b07:	ff 65 fc             	jmpq   *-0x4(%rbp)
   28b0a:	ff                   	(bad)  
   28b0b:	ff                   	(bad)  
   28b0c:	ff                   	(bad)  
   28b0d:	ff                   	(bad)  
   28b0e:	ff                   	(bad)  
   28b0f:	ff b2 fc ff ff ff    	pushq  -0x4(%rdx)
   28b15:	ff                   	(bad)  
   28b16:	ff                   	(bad)  
   28b17:	ff 00                	incl   (%rax)
   28b19:	fd                   	std    
   28b1a:	ff                   	(bad)  
   28b1b:	ff                   	(bad)  
   28b1c:	ff                   	(bad)  
   28b1d:	ff                   	(bad)  
   28b1e:	ff                   	(bad)  
   28b1f:	ff 51 fd             	callq  *-0x3(%rcx)
   28b22:	ff                   	(bad)  
   28b23:	ff                   	(bad)  
   28b24:	ff                   	(bad)  
   28b25:	ff                   	(bad)  
   28b26:	ff                   	(bad)  
   28b27:	ff 9e fd ff ff ff    	lcall  *-0x3(%rsi)
   28b2d:	ff                   	(bad)  
   28b2e:	ff                   	(bad)  
   28b2f:	ff                   	(bad)  
   28b30:	ee                   	out    %al,(%dx)
   28b31:	fd                   	std    
   28b32:	ff                   	(bad)  
   28b33:	ff                   	(bad)  
   28b34:	ff                   	(bad)  
   28b35:	ff                   	(bad)  
   28b36:	ff                   	(bad)  
   28b37:	ff                   	(bad)  
   28b38:	3f                   	(bad)  
   28b39:	fe                   	(bad)  
   28b3a:	ff                   	(bad)  
   28b3b:	ff                   	(bad)  
   28b3c:	ff                   	(bad)  
   28b3d:	ff                   	(bad)  
   28b3e:	ff                   	(bad)  
   28b3f:	ff c2                	inc    %edx
   28b41:	f9                   	stc    
   28b42:	ff                   	(bad)  
   28b43:	ff                   	(bad)  
   28b44:	ff                   	(bad)  
   28b45:	ff                   	(bad)  
   28b46:	ff                   	(bad)  
   28b47:	ff 06                	incl   (%rsi)
   28b49:	fa                   	cli    
   28b4a:	ff                   	(bad)  
   28b4b:	ff                   	(bad)  
   28b4c:	ff                   	(bad)  
   28b4d:	ff                   	(bad)  
   28b4e:	ff                   	(bad)  
   28b4f:	ff 4d fa             	decl   -0x6(%rbp)
   28b52:	ff                   	(bad)  
   28b53:	ff                   	(bad)  
   28b54:	ff                   	(bad)  
   28b55:	ff                   	(bad)  
   28b56:	ff                   	(bad)  
   28b57:	ff 97 fa ff ff ff    	callq  *-0x6(%rdi)
   28b5d:	ff                   	(bad)  
   28b5e:	ff                   	(bad)  
   28b5f:	ff e4                	jmpq   *%rsp
   28b61:	fa                   	cli    
   28b62:	ff                   	(bad)  
   28b63:	ff                   	(bad)  
   28b64:	ff                   	(bad)  
   28b65:	ff                   	(bad)  
   28b66:	ff                   	(bad)  
   28b67:	ff 2d fb ff ff ff    	ljmp   *-0x5(%rip)        # 28b68 <__intel_memset+0xf08>
   28b6d:	ff                   	(bad)  
   28b6e:	ff                   	(bad)  
   28b6f:	ff                   	(bad)  
   28b70:	79 fb                	jns    28b6d <__intel_memset+0xf0d>
   28b72:	ff                   	(bad)  
   28b73:	ff                   	(bad)  
   28b74:	ff                   	(bad)  
   28b75:	ff                   	(bad)  
   28b76:	ff                   	(bad)  
   28b77:	ff c6                	inc    %esi
   28b79:	fb                   	sti    
   28b7a:	ff                   	(bad)  
   28b7b:	ff                   	(bad)  
   28b7c:	ff                   	(bad)  
   28b7d:	ff                   	(bad)  
   28b7e:	ff                   	(bad)  
   28b7f:	ff 16                	callq  *(%rsi)
   28b81:	fc                   	cld    
   28b82:	ff                   	(bad)  
   28b83:	ff                   	(bad)  
   28b84:	ff                   	(bad)  
   28b85:	ff                   	(bad)  
   28b86:	ff                   	(bad)  
   28b87:	ff 60 fc             	jmpq   *-0x4(%rax)
   28b8a:	ff                   	(bad)  
   28b8b:	ff                   	(bad)  
   28b8c:	ff                   	(bad)  
   28b8d:	ff                   	(bad)  
   28b8e:	ff                   	(bad)  
   28b8f:	ff ad fc ff ff ff    	ljmp   *-0x4(%rbp)
   28b95:	ff                   	(bad)  
   28b96:	ff                   	(bad)  
   28b97:	ff                   	(bad)  
   28b98:	fb                   	sti    
   28b99:	fc                   	cld    
   28b9a:	ff                   	(bad)  
   28b9b:	ff                   	(bad)  
   28b9c:	ff                   	(bad)  
   28b9d:	ff                   	(bad)  
   28b9e:	ff                   	(bad)  
   28b9f:	ff 4c fd ff          	decl   -0x1(%rbp,%rdi,8)
   28ba3:	ff                   	(bad)  
   28ba4:	ff                   	(bad)  
   28ba5:	ff                   	(bad)  
   28ba6:	ff                   	(bad)  
   28ba7:	ff 99 fd ff ff ff    	lcall  *-0x3(%rcx)
   28bad:	ff                   	(bad)  
   28bae:	ff                   	(bad)  
   28baf:	ff                   	(bad)  
   28bb0:	e9 fd ff ff ff       	jmpq   28bb2 <__intel_memset+0xf52>
   28bb5:	ff                   	(bad)  
   28bb6:	ff                   	(bad)  
   28bb7:	ff                   	(bad)  
   28bb8:	3a fe                	cmp    %dh,%bh
   28bba:	ff                   	(bad)  
   28bbb:	ff                   	(bad)  
   28bbc:	ff                   	(bad)  
   28bbd:	ff                   	(bad)  
   28bbe:	ff                   	(bad)  
   28bbf:	ff                   	(bad)  
   28bc0:	bd f9 ff ff ff       	mov    $0xfffffff9,%ebp
   28bc5:	ff                   	(bad)  
   28bc6:	ff                   	(bad)  
   28bc7:	ff 01                	incl   (%rcx)
   28bc9:	fa                   	cli    
   28bca:	ff                   	(bad)  
   28bcb:	ff                   	(bad)  
   28bcc:	ff                   	(bad)  
   28bcd:	ff                   	(bad)  
   28bce:	ff                   	(bad)  
   28bcf:	ff 48 fa             	decl   -0x6(%rax)
   28bd2:	ff                   	(bad)  
   28bd3:	ff                   	(bad)  
   28bd4:	ff                   	(bad)  
   28bd5:	ff                   	(bad)  
   28bd6:	ff                   	(bad)  
   28bd7:	ff 92 fa ff ff ff    	callq  *-0x6(%rdx)
   28bdd:	ff                   	(bad)  
   28bde:	ff                   	(bad)  
   28bdf:	ff                   	(bad)  
   28be0:	df fa                	(bad)  
   28be2:	ff                   	(bad)  
   28be3:	ff                   	(bad)  
   28be4:	ff                   	(bad)  
   28be5:	ff                   	(bad)  
   28be6:	ff                   	(bad)  
   28be7:	ff 28                	ljmp   *(%rax)
   28be9:	fb                   	sti    
   28bea:	ff                   	(bad)  
   28beb:	ff                   	(bad)  
   28bec:	ff                   	(bad)  
   28bed:	ff                   	(bad)  
   28bee:	ff                   	(bad)  
   28bef:	ff 74 fb ff          	pushq  -0x1(%rbx,%rdi,8)
   28bf3:	ff                   	(bad)  
   28bf4:	ff                   	(bad)  
   28bf5:	ff                   	(bad)  
   28bf6:	ff                   	(bad)  
   28bf7:	ff c1                	inc    %ecx
   28bf9:	fb                   	sti    
   28bfa:	ff                   	(bad)  
   28bfb:	ff                   	(bad)  
   28bfc:	ff                   	(bad)  
   28bfd:	ff                   	(bad)  
   28bfe:	ff                   	(bad)  
   28bff:	ff 11                	callq  *(%rcx)
   28c01:	fc                   	cld    
   28c02:	ff                   	(bad)  
   28c03:	ff                   	(bad)  
   28c04:	ff                   	(bad)  
   28c05:	ff                   	(bad)  
   28c06:	ff                   	(bad)  
   28c07:	ff 5b fc             	lcall  *-0x4(%rbx)
   28c0a:	ff                   	(bad)  
   28c0b:	ff                   	(bad)  
   28c0c:	ff                   	(bad)  
   28c0d:	ff                   	(bad)  
   28c0e:	ff                   	(bad)  
   28c0f:	ff a8 fc ff ff ff    	ljmp   *-0x4(%rax)
   28c15:	ff                   	(bad)  
   28c16:	ff                   	(bad)  
   28c17:	ff f6                	push   %rsi
   28c19:	fc                   	cld    
   28c1a:	ff                   	(bad)  
   28c1b:	ff                   	(bad)  
   28c1c:	ff                   	(bad)  
   28c1d:	ff                   	(bad)  
   28c1e:	ff                   	(bad)  
   28c1f:	ff 47 fd             	incl   -0x3(%rdi)
   28c22:	ff                   	(bad)  
   28c23:	ff                   	(bad)  
   28c24:	ff                   	(bad)  
   28c25:	ff                   	(bad)  
   28c26:	ff                   	(bad)  
   28c27:	ff 94 fd ff ff ff ff 	callq  *-0x1(%rbp,%rdi,8)
   28c2e:	ff                   	(bad)  
   28c2f:	ff e4                	jmpq   *%rsp
   28c31:	fd                   	std    
   28c32:	ff                   	(bad)  
   28c33:	ff                   	(bad)  
   28c34:	ff                   	(bad)  
   28c35:	ff                   	(bad)  
   28c36:	ff                   	(bad)  
   28c37:	ff 35 fe ff ff ff    	pushq  -0x2(%rip)        # 28c3b <__intel_memset+0xfdb>
   28c3d:	ff                   	(bad)  
   28c3e:	ff                   	(bad)  
   28c3f:	ff                   	(bad)  
   28c40:	b8 f9 ff ff ff       	mov    $0xfffffff9,%eax
   28c45:	ff                   	(bad)  
   28c46:	ff                   	(bad)  
   28c47:	ff                   	(bad)  
   28c48:	f9                   	stc    
   28c49:	f9                   	stc    
   28c4a:	ff                   	(bad)  
   28c4b:	ff                   	(bad)  
   28c4c:	ff                   	(bad)  
   28c4d:	ff                   	(bad)  
   28c4e:	ff                   	(bad)  
   28c4f:	ff 40 fa             	incl   -0x6(%rax)
   28c52:	ff                   	(bad)  
   28c53:	ff                   	(bad)  
   28c54:	ff                   	(bad)  
   28c55:	ff                   	(bad)  
   28c56:	ff                   	(bad)  
   28c57:	ff 8a fa ff ff ff    	decl   -0x6(%rdx)
   28c5d:	ff                   	(bad)  
   28c5e:	ff                   	(bad)  
   28c5f:	ff d7                	callq  *%rdi
   28c61:	fa                   	cli    
   28c62:	ff                   	(bad)  
   28c63:	ff                   	(bad)  
   28c64:	ff                   	(bad)  
   28c65:	ff                   	(bad)  
   28c66:	ff                   	(bad)  
   28c67:	ff 20                	jmpq   *(%rax)
   28c69:	fb                   	sti    
   28c6a:	ff                   	(bad)  
   28c6b:	ff                   	(bad)  
   28c6c:	ff                   	(bad)  
   28c6d:	ff                   	(bad)  
   28c6e:	ff                   	(bad)  
   28c6f:	ff 6c fb ff          	ljmp   *-0x1(%rbx,%rdi,8)
   28c73:	ff                   	(bad)  
   28c74:	ff                   	(bad)  
   28c75:	ff                   	(bad)  
   28c76:	ff                   	(bad)  
   28c77:	ff                   	(bad)  
   28c78:	b9 fb ff ff ff       	mov    $0xfffffffb,%ecx
   28c7d:	ff                   	(bad)  
   28c7e:	ff                   	(bad)  
   28c7f:	ff 09                	decl   (%rcx)
   28c81:	fc                   	cld    
   28c82:	ff                   	(bad)  
   28c83:	ff                   	(bad)  
   28c84:	ff                   	(bad)  
   28c85:	ff                   	(bad)  
   28c86:	ff                   	(bad)  
   28c87:	ff 53 fc             	callq  *-0x4(%rbx)
   28c8a:	ff                   	(bad)  
   28c8b:	ff                   	(bad)  
   28c8c:	ff                   	(bad)  
   28c8d:	ff                   	(bad)  
   28c8e:	ff                   	(bad)  
   28c8f:	ff a0 fc ff ff ff    	jmpq   *-0x4(%rax)
   28c95:	ff                   	(bad)  
   28c96:	ff                   	(bad)  
   28c97:	ff                   	(bad)  
   28c98:	ee                   	out    %al,(%dx)
   28c99:	fc                   	cld    
   28c9a:	ff                   	(bad)  
   28c9b:	ff                   	(bad)  
   28c9c:	ff                   	(bad)  
   28c9d:	ff                   	(bad)  
   28c9e:	ff                   	(bad)  
   28c9f:	ff                   	(bad)  
   28ca0:	3f                   	(bad)  
   28ca1:	fd                   	std    
   28ca2:	ff                   	(bad)  
   28ca3:	ff                   	(bad)  
   28ca4:	ff                   	(bad)  
   28ca5:	ff                   	(bad)  
   28ca6:	ff                   	(bad)  
   28ca7:	ff 8c fd ff ff ff ff 	decl   -0x1(%rbp,%rdi,8)
   28cae:	ff                   	(bad)  
   28caf:	ff                   	(bad)  
   28cb0:	dc fd                	fdivr  %st,%st(5)
   28cb2:	ff                   	(bad)  
   28cb3:	ff                   	(bad)  
   28cb4:	ff                   	(bad)  
   28cb5:	ff                   	(bad)  
   28cb6:	ff                   	(bad)  
   28cb7:	ff 2d fe ff ff ff    	ljmp   *-0x2(%rip)        # 28cbb <__intel_memset+0x105b>
   28cbd:	ff                   	(bad)  
   28cbe:	ff                   	(bad)  
   28cbf:	ff b0 f9 ff ff ff    	pushq  -0x7(%rax)
   28cc5:	ff                   	(bad)  
   28cc6:	ff                   	(bad)  
   28cc7:	ff f1                	push   %rcx
   28cc9:	f9                   	stc    
   28cca:	ff                   	(bad)  
   28ccb:	ff                   	(bad)  
   28ccc:	ff                   	(bad)  
   28ccd:	ff                   	(bad)  
   28cce:	ff                   	(bad)  
   28ccf:	ff                   	(bad)  
   28cd0:	38 fa                	cmp    %bh,%dl
   28cd2:	ff                   	(bad)  
   28cd3:	ff                   	(bad)  
   28cd4:	ff                   	(bad)  
   28cd5:	ff                   	(bad)  
   28cd6:	ff                   	(bad)  
   28cd7:	ff 82 fa ff ff ff    	incl   -0x6(%rdx)
   28cdd:	ff                   	(bad)  
   28cde:	ff                   	(bad)  
   28cdf:	ff cf                	dec    %edi
   28ce1:	fa                   	cli    
   28ce2:	ff                   	(bad)  
   28ce3:	ff                   	(bad)  
   28ce4:	ff                   	(bad)  
   28ce5:	ff                   	(bad)  
   28ce6:	ff                   	(bad)  
   28ce7:	ff 18                	lcall  *(%rax)
   28ce9:	fb                   	sti    
   28cea:	ff                   	(bad)  
   28ceb:	ff                   	(bad)  
   28cec:	ff                   	(bad)  
   28ced:	ff                   	(bad)  
   28cee:	ff                   	(bad)  
   28cef:	ff 64 fb ff          	jmpq   *-0x1(%rbx,%rdi,8)
   28cf3:	ff                   	(bad)  
   28cf4:	ff                   	(bad)  
   28cf5:	ff                   	(bad)  
   28cf6:	ff                   	(bad)  
   28cf7:	ff b1 fb ff ff ff    	pushq  -0x5(%rcx)
   28cfd:	ff                   	(bad)  
   28cfe:	ff                   	(bad)  
   28cff:	ff 01                	incl   (%rcx)
   28d01:	fc                   	cld    
   28d02:	ff                   	(bad)  
   28d03:	ff                   	(bad)  
   28d04:	ff                   	(bad)  
   28d05:	ff                   	(bad)  
   28d06:	ff                   	(bad)  
   28d07:	ff 4b fc             	decl   -0x4(%rbx)
   28d0a:	ff                   	(bad)  
   28d0b:	ff                   	(bad)  
   28d0c:	ff                   	(bad)  
   28d0d:	ff                   	(bad)  
   28d0e:	ff                   	(bad)  
   28d0f:	ff 98 fc ff ff ff    	lcall  *-0x4(%rax)
   28d15:	ff                   	(bad)  
   28d16:	ff                   	(bad)  
   28d17:	ff e6                	jmpq   *%rsi
   28d19:	fc                   	cld    
   28d1a:	ff                   	(bad)  
   28d1b:	ff                   	(bad)  
   28d1c:	ff                   	(bad)  
   28d1d:	ff                   	(bad)  
   28d1e:	ff                   	(bad)  
   28d1f:	ff 37                	pushq  (%rdi)
   28d21:	fd                   	std    
   28d22:	ff                   	(bad)  
   28d23:	ff                   	(bad)  
   28d24:	ff                   	(bad)  
   28d25:	ff                   	(bad)  
   28d26:	ff                   	(bad)  
   28d27:	ff 84 fd ff ff ff ff 	incl   -0x1(%rbp,%rdi,8)
   28d2e:	ff                   	(bad)  
   28d2f:	ff d4                	callq  *%rsp
   28d31:	fd                   	std    
   28d32:	ff                   	(bad)  
   28d33:	ff                   	(bad)  
   28d34:	ff                   	(bad)  
   28d35:	ff                   	(bad)  
   28d36:	ff                   	(bad)  
   28d37:	ff 25 fe ff ff ff    	jmpq   *-0x2(%rip)        # 28d3b <__intel_memset+0x10db>
   28d3d:	ff                   	(bad)  
   28d3e:	ff                   	(bad)  
   28d3f:	ff a8 f9 ff ff ff    	ljmp   *-0x7(%rax)
   28d45:	ff                   	(bad)  
   28d46:	ff                   	(bad)  
   28d47:	ff                   	(bad)  
   28d48:	e9 f9 ff ff ff       	jmpq   28d46 <__intel_memset+0x10e6>
   28d4d:	ff                   	(bad)  
   28d4e:	ff                   	(bad)  
   28d4f:	ff 30                	pushq  (%rax)
   28d51:	fa                   	cli    
   28d52:	ff                   	(bad)  
   28d53:	ff                   	(bad)  
   28d54:	ff                   	(bad)  
   28d55:	ff                   	(bad)  
   28d56:	ff                   	(bad)  
   28d57:	ff                   	(bad)  
   28d58:	7a fa                	jp     28d54 <__intel_memset+0x10f4>
   28d5a:	ff                   	(bad)  
   28d5b:	ff                   	(bad)  
   28d5c:	ff                   	(bad)  
   28d5d:	ff                   	(bad)  
   28d5e:	ff                   	(bad)  
   28d5f:	ff c7                	inc    %edi
   28d61:	fa                   	cli    
   28d62:	ff                   	(bad)  
   28d63:	ff                   	(bad)  
   28d64:	ff                   	(bad)  
   28d65:	ff                   	(bad)  
   28d66:	ff                   	(bad)  
   28d67:	ff 10                	callq  *(%rax)
   28d69:	fb                   	sti    
   28d6a:	ff                   	(bad)  
   28d6b:	ff                   	(bad)  
   28d6c:	ff                   	(bad)  
   28d6d:	ff                   	(bad)  
   28d6e:	ff                   	(bad)  
   28d6f:	ff 5c fb ff          	lcall  *-0x1(%rbx,%rdi,8)
   28d73:	ff                   	(bad)  
   28d74:	ff                   	(bad)  
   28d75:	ff                   	(bad)  
   28d76:	ff                   	(bad)  
   28d77:	ff a9 fb ff ff ff    	ljmp   *-0x5(%rcx)
   28d7d:	ff                   	(bad)  
   28d7e:	ff                   	(bad)  
   28d7f:	ff                   	(bad)  
   28d80:	f9                   	stc    
   28d81:	fb                   	sti    
   28d82:	ff                   	(bad)  
   28d83:	ff                   	(bad)  
   28d84:	ff                   	(bad)  
   28d85:	ff                   	(bad)  
   28d86:	ff                   	(bad)  
   28d87:	ff 43 fc             	incl   -0x4(%rbx)
   28d8a:	ff                   	(bad)  
   28d8b:	ff                   	(bad)  
   28d8c:	ff                   	(bad)  
   28d8d:	ff                   	(bad)  
   28d8e:	ff                   	(bad)  
   28d8f:	ff 90 fc ff ff ff    	callq  *-0x4(%rax)
   28d95:	ff                   	(bad)  
   28d96:	ff                   	(bad)  
   28d97:	ff                   	(bad)  
   28d98:	de fc                	fdivrp %st,%st(4)
   28d9a:	ff                   	(bad)  
   28d9b:	ff                   	(bad)  
   28d9c:	ff                   	(bad)  
   28d9d:	ff                   	(bad)  
   28d9e:	ff                   	(bad)  
   28d9f:	ff 2f                	ljmp   *(%rdi)
   28da1:	fd                   	std    
   28da2:	ff                   	(bad)  
   28da3:	ff                   	(bad)  
   28da4:	ff                   	(bad)  
   28da5:	ff                   	(bad)  
   28da6:	ff                   	(bad)  
   28da7:	ff                   	(bad)  
   28da8:	7c fd                	jl     28da7 <__intel_memset+0x1147>
   28daa:	ff                   	(bad)  
   28dab:	ff                   	(bad)  
   28dac:	ff                   	(bad)  
   28dad:	ff                   	(bad)  
   28dae:	ff                   	(bad)  
   28daf:	ff cc                	dec    %esp
   28db1:	fd                   	std    
   28db2:	ff                   	(bad)  
   28db3:	ff                   	(bad)  
   28db4:	ff                   	(bad)  
   28db5:	ff                   	(bad)  
   28db6:	ff                   	(bad)  
   28db7:	ff 1d fe ff ff ff    	lcall  *-0x2(%rip)        # 28dbb <__intel_memset+0x115b>
   28dbd:	ff                   	(bad)  
   28dbe:	ff                   	(bad)  
   28dbf:	ff a0 f9 ff ff ff    	jmpq   *-0x7(%rax)
   28dc5:	ff                   	(bad)  
   28dc6:	ff                   	(bad)  
   28dc7:	ff e1                	jmpq   *%rcx
   28dc9:	f9                   	stc    
   28dca:	ff                   	(bad)  
   28dcb:	ff                   	(bad)  
   28dcc:	ff                   	(bad)  
   28dcd:	ff                   	(bad)  
   28dce:	ff                   	(bad)  
   28dcf:	ff 28                	ljmp   *(%rax)
   28dd1:	fa                   	cli    
   28dd2:	ff                   	(bad)  
   28dd3:	ff                   	(bad)  
   28dd4:	ff                   	(bad)  
   28dd5:	ff                   	(bad)  
   28dd6:	ff                   	(bad)  
   28dd7:	ff 72 fa             	pushq  -0x6(%rdx)
   28dda:	ff                   	(bad)  
   28ddb:	ff                   	(bad)  
   28ddc:	ff                   	(bad)  
   28ddd:	ff                   	(bad)  
   28dde:	ff                   	(bad)  
   28ddf:	ff                   	(bad)  
   28de0:	bf fa ff ff ff       	mov    $0xfffffffa,%edi
   28de5:	ff                   	(bad)  
   28de6:	ff                   	(bad)  
   28de7:	ff 08                	decl   (%rax)
   28de9:	fb                   	sti    
   28dea:	ff                   	(bad)  
   28deb:	ff                   	(bad)  
   28dec:	ff                   	(bad)  
   28ded:	ff                   	(bad)  
   28dee:	ff                   	(bad)  
   28def:	ff 54 fb ff          	callq  *-0x1(%rbx,%rdi,8)
   28df3:	ff                   	(bad)  
   28df4:	ff                   	(bad)  
   28df5:	ff                   	(bad)  
   28df6:	ff                   	(bad)  
   28df7:	ff a1 fb ff ff ff    	jmpq   *-0x5(%rcx)
   28dfd:	ff                   	(bad)  
   28dfe:	ff                   	(bad)  
   28dff:	ff f1                	push   %rcx
   28e01:	fb                   	sti    
   28e02:	ff                   	(bad)  
   28e03:	ff                   	(bad)  
   28e04:	ff                   	(bad)  
   28e05:	ff                   	(bad)  
   28e06:	ff                   	(bad)  
   28e07:	ff                   	(bad)  
   28e08:	3b fc                	cmp    %esp,%edi
   28e0a:	ff                   	(bad)  
   28e0b:	ff                   	(bad)  
   28e0c:	ff                   	(bad)  
   28e0d:	ff                   	(bad)  
   28e0e:	ff                   	(bad)  
   28e0f:	ff 88 fc ff ff ff    	decl   -0x4(%rax)
   28e15:	ff                   	(bad)  
   28e16:	ff                   	(bad)  
   28e17:	ff d6                	callq  *%rsi
   28e19:	fc                   	cld    
   28e1a:	ff                   	(bad)  
   28e1b:	ff                   	(bad)  
   28e1c:	ff                   	(bad)  
   28e1d:	ff                   	(bad)  
   28e1e:	ff                   	(bad)  
   28e1f:	ff 27                	jmpq   *(%rdi)
   28e21:	fd                   	std    
   28e22:	ff                   	(bad)  
   28e23:	ff                   	(bad)  
   28e24:	ff                   	(bad)  
   28e25:	ff                   	(bad)  
   28e26:	ff                   	(bad)  
   28e27:	ff 74 fd ff          	pushq  -0x1(%rbp,%rdi,8)
   28e2b:	ff                   	(bad)  
   28e2c:	ff                   	(bad)  
   28e2d:	ff                   	(bad)  
   28e2e:	ff                   	(bad)  
   28e2f:	ff c4                	inc    %esp
   28e31:	fd                   	std    
   28e32:	ff                   	(bad)  
   28e33:	ff                   	(bad)  
   28e34:	ff                   	(bad)  
   28e35:	ff                   	(bad)  
   28e36:	ff                   	(bad)  
   28e37:	ff 15 fe ff ff ff    	callq  *-0x2(%rip)        # 28e3b <__intel_memset+0x11db>
   28e3d:	ff                   	(bad)  
   28e3e:	ff                   	(bad)  
   28e3f:	ff                   	.byte 0xff

0000000000028e40 <__rv_alloc_D2A>:
#ifdef KR_headers
rv_alloc(i) int i;
#else
rv_alloc(int i)
#endif
{
   28e40:	55                   	push   %rbp
   28e41:	48 89 e5             	mov    %rsp,%rbp
   28e44:	48 83 ec 20          	sub    $0x20,%rsp
   28e48:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int j, k, *r;

	j = sizeof(ULong);
   28e4b:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%rbp)
	for(k = 0;
   28e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
   28e59:	eb 07                	jmp    28e62 <__rv_alloc_D2A+0x22>
		sizeof(Bigint) - sizeof(ULong) - sizeof(int) + j <= i;
		j <<= 1)
			k++;
   28e5b:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
		j <<= 1)
   28e5f:	d1 65 f0             	shll   -0x10(%rbp)
		sizeof(Bigint) - sizeof(ULong) - sizeof(int) + j <= i;
   28e62:	8b 45 f0             	mov    -0x10(%rbp),%eax
   28e65:	48 98                	cltq   
   28e67:	48 8d 50 18          	lea    0x18(%rax),%rdx
   28e6b:	8b 45 ec             	mov    -0x14(%rbp),%eax
   28e6e:	48 98                	cltq   
	for(k = 0;
   28e70:	48 39 c2             	cmp    %rax,%rdx
   28e73:	76 e6                	jbe    28e5b <__rv_alloc_D2A+0x1b>
	r = (int*)Balloc(k);
   28e75:	8b 45 f4             	mov    -0xc(%rbp),%eax
   28e78:	89 c7                	mov    %eax,%edi
   28e7a:	e8 75 2a 00 00       	callq  2b8f4 <__Balloc_D2A>
   28e7f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (r == NULL)
   28e83:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   28e88:	75 07                	jne    28e91 <__rv_alloc_D2A+0x51>
		return (
   28e8a:	b8 00 00 00 00       	mov    $0x0,%eax
   28e8f:	eb 11                	jmp    28ea2 <__rv_alloc_D2A+0x62>
#ifndef MULTIPLE_THREADS
		dtoa_result =
#endif
			NULL);
	*r = k;
   28e91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28e95:	8b 55 f4             	mov    -0xc(%rbp),%edx
   28e98:	89 10                	mov    %edx,(%rax)
	return
#ifndef MULTIPLE_THREADS
	dtoa_result =
#endif
		(char *)(r+1);
   28e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28e9e:	48 83 c0 04          	add    $0x4,%rax
	}
   28ea2:	c9                   	leaveq 
   28ea3:	c3                   	retq   

0000000000028ea4 <__nrv_alloc_D2A>:
#ifdef KR_headers
nrv_alloc(s, rve, n) char *s, **rve; int n;
#else
nrv_alloc(char *s, char **rve, int n)
#endif
{
   28ea4:	55                   	push   %rbp
   28ea5:	48 89 e5             	mov    %rsp,%rbp
   28ea8:	48 83 ec 30          	sub    $0x30,%rsp
   28eac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   28eb0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   28eb4:	89 55 dc             	mov    %edx,-0x24(%rbp)
	char *rv, *t;

	t = rv = rv_alloc(n);
   28eb7:	8b 45 dc             	mov    -0x24(%rbp),%eax
   28eba:	89 c7                	mov    %eax,%edi
   28ebc:	e8 7f ff ff ff       	callq  28e40 <__rv_alloc_D2A>
   28ec1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   28ec5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28ec9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (t == NULL)
   28ecd:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   28ed2:	75 0c                	jne    28ee0 <__nrv_alloc_D2A+0x3c>
		return (NULL);
   28ed4:	b8 00 00 00 00       	mov    $0x0,%eax
   28ed9:	eb 3b                	jmp    28f16 <__nrv_alloc_D2A+0x72>
	while((*t = *s++) !=0)
		t++;
   28edb:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	while((*t = *s++) !=0)
   28ee0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28ee4:	48 8d 50 01          	lea    0x1(%rax),%rdx
   28ee8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   28eec:	0f b6 10             	movzbl (%rax),%edx
   28eef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   28ef3:	88 10                	mov    %dl,(%rax)
   28ef5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   28ef9:	0f b6 00             	movzbl (%rax),%eax
   28efc:	84 c0                	test   %al,%al
   28efe:	75 db                	jne    28edb <__nrv_alloc_D2A+0x37>
	if (rve)
   28f00:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   28f05:	74 0b                	je     28f12 <__nrv_alloc_D2A+0x6e>
		*rve = t;
   28f07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   28f0b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   28f0f:	48 89 10             	mov    %rdx,(%rax)
	return rv;
   28f12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   28f16:	c9                   	leaveq 
   28f17:	c3                   	retq   

0000000000028f18 <__freedtoa>:
#ifdef KR_headers
freedtoa(s) char *s;
#else
freedtoa(char *s)
#endif
{
   28f18:	55                   	push   %rbp
   28f19:	48 89 e5             	mov    %rsp,%rbp
   28f1c:	48 83 ec 20          	sub    $0x20,%rsp
   28f20:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Bigint *b = (Bigint *)((int *)s - 1);
   28f24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28f28:	48 83 e8 04          	sub    $0x4,%rax
   28f2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	b->maxwds = 1 << (b->k = *(int*)b);
   28f30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28f34:	8b 10                	mov    (%rax),%edx
   28f36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28f3a:	89 50 08             	mov    %edx,0x8(%rax)
   28f3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28f41:	8b 40 08             	mov    0x8(%rax),%eax
   28f44:	ba 01 00 00 00       	mov    $0x1,%edx
   28f49:	89 c1                	mov    %eax,%ecx
   28f4b:	d3 e2                	shl    %cl,%edx
   28f4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28f51:	89 50 0c             	mov    %edx,0xc(%rax)
	Bfree(b);
   28f54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   28f58:	48 89 c7             	mov    %rax,%rdi
   28f5b:	e8 db 2a 00 00       	callq  2ba3b <__Bfree_D2A>
#ifndef MULTIPLE_THREADS
	if (s == dtoa_result)
		dtoa_result = 0;
#endif
	}
   28f60:	90                   	nop
   28f61:	c9                   	leaveq 
   28f62:	c3                   	retq   

0000000000028f63 <__quorem_D2A>:
#ifdef KR_headers
	(b, S) Bigint *b, *S;
#else
	(Bigint *b, Bigint *S)
#endif
{
   28f63:	55                   	push   %rbp
   28f64:	48 89 e5             	mov    %rsp,%rbp
   28f67:	48 83 ec 60          	sub    $0x60,%rsp
   28f6b:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   28f6f:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
#ifdef Pack_32
	ULong si, z, zs;
#endif
#endif

	n = S->wds;
   28f73:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   28f77:	8b 40 14             	mov    0x14(%rax),%eax
   28f7a:	89 45 bc             	mov    %eax,-0x44(%rbp)
#ifdef DEBUG
	/*debug*/ if (b->wds > n)
	/*debug*/	Bug("oversize b in quorem");
#endif
	if (b->wds < n)
   28f7d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   28f81:	8b 40 14             	mov    0x14(%rax),%eax
   28f84:	39 45 bc             	cmp    %eax,-0x44(%rbp)
   28f87:	7e 0a                	jle    28f93 <__quorem_D2A+0x30>
		return 0;
   28f89:	b8 00 00 00 00       	mov    $0x0,%eax
   28f8e:	e9 cb 02 00 00       	jmpq   2925e <__quorem_D2A+0x2fb>
	sx = S->x;
   28f93:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   28f97:	48 83 c0 18          	add    $0x18,%rax
   28f9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	sxe = sx + --n;
   28f9f:	83 6d bc 01          	subl   $0x1,-0x44(%rbp)
   28fa3:	8b 45 bc             	mov    -0x44(%rbp),%eax
   28fa6:	48 98                	cltq   
   28fa8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   28faf:	00 
   28fb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   28fb4:	48 01 d0             	add    %rdx,%rax
   28fb7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	bx = b->x;
   28fbb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   28fbf:	48 83 c0 18          	add    $0x18,%rax
   28fc3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	bxe = bx + n;
   28fc7:	8b 45 bc             	mov    -0x44(%rbp),%eax
   28fca:	48 98                	cltq   
   28fcc:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   28fd3:	00 
   28fd4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   28fd8:	48 01 d0             	add    %rdx,%rax
   28fdb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
   28fdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   28fe3:	8b 00                	mov    (%rax),%eax
   28fe5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   28fe9:	8b 12                	mov    (%rdx),%edx
   28feb:	8d 4a 01             	lea    0x1(%rdx),%ecx
   28fee:	ba 00 00 00 00       	mov    $0x0,%edx
   28ff3:	f7 f1                	div    %ecx
   28ff5:	89 45 c0             	mov    %eax,-0x40(%rbp)
#ifdef DEBUG
	/*debug*/ if (q > 9)
	/*debug*/	Bug("oversized quotient in quorem");
#endif
	if (q) {
   28ff8:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
   28ffc:	0f 84 09 01 00 00    	je     2910b <__quorem_D2A+0x1a8>
		borrow = 0;
   29002:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
		carry = 0;
   29009:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			y = *bx - (ys & 0xffffffffUL) - borrow;
			borrow = y >> 32 & 1UL;
			*bx++ = y & 0xffffffffUL;
#else
#ifdef Pack_32
			si = *sx++;
   29010:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   29014:	48 8d 50 04          	lea    0x4(%rax),%rdx
   29018:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   2901c:	8b 00                	mov    (%rax),%eax
   2901e:	89 45 cc             	mov    %eax,-0x34(%rbp)
			ys = (si & 0xffff) * q + carry;
   29021:	8b 45 cc             	mov    -0x34(%rbp),%eax
   29024:	0f b7 c0             	movzwl %ax,%eax
   29027:	0f af 45 c0          	imul   -0x40(%rbp),%eax
   2902b:	89 c2                	mov    %eax,%edx
   2902d:	8b 45 c8             	mov    -0x38(%rbp),%eax
   29030:	01 d0                	add    %edx,%eax
   29032:	89 45 d0             	mov    %eax,-0x30(%rbp)
			zs = (si >> 16) * q + (ys >> 16);
   29035:	8b 45 cc             	mov    -0x34(%rbp),%eax
   29038:	c1 e8 10             	shr    $0x10,%eax
   2903b:	0f af 45 c0          	imul   -0x40(%rbp),%eax
   2903f:	8b 55 d0             	mov    -0x30(%rbp),%edx
   29042:	c1 ea 10             	shr    $0x10,%edx
   29045:	01 d0                	add    %edx,%eax
   29047:	89 45 d4             	mov    %eax,-0x2c(%rbp)
			carry = zs >> 16;
   2904a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2904d:	c1 e8 10             	shr    $0x10,%eax
   29050:	89 45 c8             	mov    %eax,-0x38(%rbp)
			y = (*bx & 0xffff) - (ys & 0xffff) - borrow;
   29053:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   29057:	8b 00                	mov    (%rax),%eax
   29059:	0f b7 d0             	movzwl %ax,%edx
   2905c:	8b 45 d0             	mov    -0x30(%rbp),%eax
   2905f:	0f b7 c0             	movzwl %ax,%eax
   29062:	29 c2                	sub    %eax,%edx
   29064:	89 d0                	mov    %edx,%eax
   29066:	2b 45 c4             	sub    -0x3c(%rbp),%eax
   29069:	89 45 d8             	mov    %eax,-0x28(%rbp)
			borrow = (y & 0x10000) >> 16;
   2906c:	8b 45 d8             	mov    -0x28(%rbp),%eax
   2906f:	c1 e8 10             	shr    $0x10,%eax
   29072:	83 e0 01             	and    $0x1,%eax
   29075:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			z = (*bx >> 16) - (zs & 0xffff) - borrow;
   29078:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2907c:	8b 00                	mov    (%rax),%eax
   2907e:	c1 e8 10             	shr    $0x10,%eax
   29081:	89 c2                	mov    %eax,%edx
   29083:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   29086:	0f b7 c0             	movzwl %ax,%eax
   29089:	29 c2                	sub    %eax,%edx
   2908b:	89 d0                	mov    %edx,%eax
   2908d:	2b 45 c4             	sub    -0x3c(%rbp),%eax
   29090:	89 45 dc             	mov    %eax,-0x24(%rbp)
			borrow = (z & 0x10000) >> 16;
   29093:	8b 45 dc             	mov    -0x24(%rbp),%eax
   29096:	c1 e8 10             	shr    $0x10,%eax
   29099:	83 e0 01             	and    $0x1,%eax
   2909c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			Storeinc(bx, z, y);
   2909f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   290a3:	48 83 c0 02          	add    $0x2,%rax
   290a7:	8b 55 dc             	mov    -0x24(%rbp),%edx
   290aa:	66 89 10             	mov    %dx,(%rax)
   290ad:	8b 45 d8             	mov    -0x28(%rbp),%eax
   290b0:	89 c2                	mov    %eax,%edx
   290b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   290b6:	66 89 10             	mov    %dx,(%rax)
   290b9:	48 83 45 e0 04       	addq   $0x4,-0x20(%rbp)
			borrow = (y & 0x10000) >> 16;
			*bx++ = y & 0xffff;
#endif
#endif
			}
			while(sx <= sxe);
   290be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   290c2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   290c6:	0f 86 44 ff ff ff    	jbe    29010 <__quorem_D2A+0xad>
		if (!*bxe) {
   290cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   290d0:	8b 00                	mov    (%rax),%eax
   290d2:	85 c0                	test   %eax,%eax
   290d4:	75 35                	jne    2910b <__quorem_D2A+0x1a8>
			bx = b->x;
   290d6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   290da:	48 83 c0 18          	add    $0x18,%rax
   290de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
			while(--bxe > bx && !*bxe)
   290e2:	eb 04                	jmp    290e8 <__quorem_D2A+0x185>
				--n;
   290e4:	83 6d bc 01          	subl   $0x1,-0x44(%rbp)
			while(--bxe > bx && !*bxe)
   290e8:	48 83 6d e8 04       	subq   $0x4,-0x18(%rbp)
   290ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   290f1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   290f5:	76 0a                	jbe    29101 <__quorem_D2A+0x19e>
   290f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   290fb:	8b 00                	mov    (%rax),%eax
   290fd:	85 c0                	test   %eax,%eax
   290ff:	74 e3                	je     290e4 <__quorem_D2A+0x181>
			b->wds = n;
   29101:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   29105:	8b 55 bc             	mov    -0x44(%rbp),%edx
   29108:	89 50 14             	mov    %edx,0x14(%rax)
			}
		}
	if (cmp(b, S) >= 0) {
   2910b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   2910f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   29113:	48 89 d6             	mov    %rdx,%rsi
   29116:	48 89 c7             	mov    %rax,%rdi
   29119:	e8 08 33 00 00       	callq  2c426 <__cmp_D2A>
   2911e:	85 c0                	test   %eax,%eax
   29120:	0f 88 35 01 00 00    	js     2925b <__quorem_D2A+0x2f8>
		q++;
   29126:	83 45 c0 01          	addl   $0x1,-0x40(%rbp)
		borrow = 0;
   2912a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
		carry = 0;
   29131:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
		bx = b->x;
   29138:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2913c:	48 83 c0 18          	add    $0x18,%rax
   29140:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		sx = S->x;
   29144:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   29148:	48 83 c0 18          	add    $0x18,%rax
   2914c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
			y = *bx - (ys & 0xffffffffUL) - borrow;
			borrow = y >> 32 & 1UL;
			*bx++ = y & 0xffffffffUL;
#else
#ifdef Pack_32
			si = *sx++;
   29150:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   29154:	48 8d 50 04          	lea    0x4(%rax),%rdx
   29158:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   2915c:	8b 00                	mov    (%rax),%eax
   2915e:	89 45 cc             	mov    %eax,-0x34(%rbp)
			ys = (si & 0xffff) + carry;
   29161:	8b 45 cc             	mov    -0x34(%rbp),%eax
   29164:	0f b7 d0             	movzwl %ax,%edx
   29167:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2916a:	01 d0                	add    %edx,%eax
   2916c:	89 45 d0             	mov    %eax,-0x30(%rbp)
			zs = (si >> 16) + (ys >> 16);
   2916f:	8b 45 cc             	mov    -0x34(%rbp),%eax
   29172:	c1 e8 10             	shr    $0x10,%eax
   29175:	89 c2                	mov    %eax,%edx
   29177:	8b 45 d0             	mov    -0x30(%rbp),%eax
   2917a:	c1 e8 10             	shr    $0x10,%eax
   2917d:	01 d0                	add    %edx,%eax
   2917f:	89 45 d4             	mov    %eax,-0x2c(%rbp)
			carry = zs >> 16;
   29182:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   29185:	c1 e8 10             	shr    $0x10,%eax
   29188:	89 45 c8             	mov    %eax,-0x38(%rbp)
			y = (*bx & 0xffff) - (ys & 0xffff) - borrow;
   2918b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2918f:	8b 00                	mov    (%rax),%eax
   29191:	0f b7 d0             	movzwl %ax,%edx
   29194:	8b 45 d0             	mov    -0x30(%rbp),%eax
   29197:	0f b7 c0             	movzwl %ax,%eax
   2919a:	29 c2                	sub    %eax,%edx
   2919c:	89 d0                	mov    %edx,%eax
   2919e:	2b 45 c4             	sub    -0x3c(%rbp),%eax
   291a1:	89 45 d8             	mov    %eax,-0x28(%rbp)
			borrow = (y & 0x10000) >> 16;
   291a4:	8b 45 d8             	mov    -0x28(%rbp),%eax
   291a7:	c1 e8 10             	shr    $0x10,%eax
   291aa:	83 e0 01             	and    $0x1,%eax
   291ad:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			z = (*bx >> 16) - (zs & 0xffff) - borrow;
   291b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   291b4:	8b 00                	mov    (%rax),%eax
   291b6:	c1 e8 10             	shr    $0x10,%eax
   291b9:	89 c2                	mov    %eax,%edx
   291bb:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   291be:	0f b7 c0             	movzwl %ax,%eax
   291c1:	29 c2                	sub    %eax,%edx
   291c3:	89 d0                	mov    %edx,%eax
   291c5:	2b 45 c4             	sub    -0x3c(%rbp),%eax
   291c8:	89 45 dc             	mov    %eax,-0x24(%rbp)
			borrow = (z & 0x10000) >> 16;
   291cb:	8b 45 dc             	mov    -0x24(%rbp),%eax
   291ce:	c1 e8 10             	shr    $0x10,%eax
   291d1:	83 e0 01             	and    $0x1,%eax
   291d4:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			Storeinc(bx, z, y);
   291d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   291db:	48 83 c0 02          	add    $0x2,%rax
   291df:	8b 55 dc             	mov    -0x24(%rbp),%edx
   291e2:	66 89 10             	mov    %dx,(%rax)
   291e5:	8b 45 d8             	mov    -0x28(%rbp),%eax
   291e8:	89 c2                	mov    %eax,%edx
   291ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   291ee:	66 89 10             	mov    %dx,(%rax)
   291f1:	48 83 45 e0 04       	addq   $0x4,-0x20(%rbp)
			borrow = (y & 0x10000) >> 16;
			*bx++ = y & 0xffff;
#endif
#endif
			}
			while(sx <= sxe);
   291f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   291fa:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   291fe:	0f 86 4c ff ff ff    	jbe    29150 <__quorem_D2A+0x1ed>
		bx = b->x;
   29204:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   29208:	48 83 c0 18          	add    $0x18,%rax
   2920c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		bxe = bx + n;
   29210:	8b 45 bc             	mov    -0x44(%rbp),%eax
   29213:	48 98                	cltq   
   29215:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2921c:	00 
   2921d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   29221:	48 01 d0             	add    %rdx,%rax
   29224:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (!*bxe) {
   29228:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2922c:	8b 00                	mov    (%rax),%eax
   2922e:	85 c0                	test   %eax,%eax
   29230:	75 29                	jne    2925b <__quorem_D2A+0x2f8>
			while(--bxe > bx && !*bxe)
   29232:	eb 04                	jmp    29238 <__quorem_D2A+0x2d5>
				--n;
   29234:	83 6d bc 01          	subl   $0x1,-0x44(%rbp)
			while(--bxe > bx && !*bxe)
   29238:	48 83 6d e8 04       	subq   $0x4,-0x18(%rbp)
   2923d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   29241:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   29245:	76 0a                	jbe    29251 <__quorem_D2A+0x2ee>
   29247:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2924b:	8b 00                	mov    (%rax),%eax
   2924d:	85 c0                	test   %eax,%eax
   2924f:	74 e3                	je     29234 <__quorem_D2A+0x2d1>
			b->wds = n;
   29251:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   29255:	8b 55 bc             	mov    -0x44(%rbp),%edx
   29258:	89 50 14             	mov    %edx,0x14(%rax)
			}
		}
	return q;
   2925b:	8b 45 c0             	mov    -0x40(%rbp),%eax
	}
   2925e:	c9                   	leaveq 
   2925f:	c3                   	retq   

0000000000029260 <__dtoa>:
	(d0, mode, ndigits, decpt, sign, rve)
	double d0; int mode, ndigits, *decpt, *sign; char **rve;
#else
	(double d0, int mode, int ndigits, int *decpt, int *sign, char **rve)
#endif
{
   29260:	55                   	push   %rbp
   29261:	48 89 e5             	mov    %rsp,%rbp
   29264:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
   2926b:	f2 0f 11 85 28 ff ff 	movsd  %xmm0,-0xd8(%rbp)
   29272:	ff 
   29273:	89 bd 24 ff ff ff    	mov    %edi,-0xdc(%rbp)
   29279:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%rbp)
   2927f:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
   29286:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
   2928d:	4c 89 85 08 ff ff ff 	mov    %r8,-0xf8(%rbp)
   29294:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   2929b:	00 00 
   2929d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   292a1:	31 c0                	xor    %eax,%eax
	if (dtoa_result) {
		freedtoa(dtoa_result);
		dtoa_result = 0;
		}
#endif
	d.d = d0;
   292a3:	f2 0f 10 85 28 ff ff 	movsd  -0xd8(%rbp),%xmm0
   292aa:	ff 
   292ab:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
	if (word0(&d) & Sign_bit) {
   292b0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   292b3:	85 c0                	test   %eax,%eax
   292b5:	79 1a                	jns    292d1 <__dtoa+0x71>
		/* set sign for everything, including 0's and NaNs */
		*sign = 1;
   292b7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   292be:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
		word0(&d) &= ~Sign_bit;	/* clear sign bit */
   292c4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   292c7:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   292cc:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   292cf:	eb 0d                	jmp    292de <__dtoa+0x7e>
		}
	else
		*sign = 0;
   292d1:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   292d8:	c7 00 00 00 00 00    	movl   $0x0,(%rax)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
	if ((word0(&d) & Exp_mask) == Exp_mask)
   292de:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   292e1:	25 00 00 f0 7f       	and    $0x7ff00000,%eax
   292e6:	3d 00 00 f0 7f       	cmp    $0x7ff00000,%eax
   292eb:	75 60                	jne    2934d <__dtoa+0xed>
#else
	if (word0(&d)  == 0x8000)
#endif
		{
		/* Infinity or NaN */
		*decpt = 9999;
   292ed:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   292f4:	c7 00 0f 27 00 00    	movl   $0x270f,(%rax)
#ifdef IEEE_Arith
		if (!word1(&d) && !(word0(&d) & 0xfffff))
   292fa:	8b 45 e0             	mov    -0x20(%rbp),%eax
   292fd:	85 c0                	test   %eax,%eax
   292ff:	75 2c                	jne    2932d <__dtoa+0xcd>
   29301:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   29304:	25 ff ff 0f 00       	and    $0xfffff,%eax
   29309:	85 c0                	test   %eax,%eax
   2930b:	75 20                	jne    2932d <__dtoa+0xcd>
			return nrv_alloc("Infinity", rve, 8);
   2930d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   29314:	ba 08 00 00 00       	mov    $0x8,%edx
   29319:	48 89 c6             	mov    %rax,%rsi
   2931c:	48 8d 3d 0d 7a 00 00 	lea    0x7a0d(%rip),%rdi        # 30d30 <xdigs_upper.3164+0x10>
   29323:	e8 7c fb ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   29328:	e9 d3 15 00 00       	jmpq   2a900 <__dtoa+0x16a0>
#endif
		return nrv_alloc("NaN", rve, 3);
   2932d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   29334:	ba 03 00 00 00       	mov    $0x3,%edx
   29339:	48 89 c6             	mov    %rax,%rsi
   2933c:	48 8d 3d f6 79 00 00 	lea    0x79f6(%rip),%rdi        # 30d39 <xdigs_upper.3164+0x19>
   29343:	e8 5c fb ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   29348:	e9 b3 15 00 00       	jmpq   2a900 <__dtoa+0x16a0>
		}
#endif
#ifdef IBM
	dval(&d) += 0; /* normalize */
#endif
	if (!dval(&d)) {
   2934d:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29352:	66 0f ef c9          	pxor   %xmm1,%xmm1
   29356:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2935a:	7a 37                	jp     29393 <__dtoa+0x133>
   2935c:	66 0f ef c9          	pxor   %xmm1,%xmm1
   29360:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29364:	75 2d                	jne    29393 <__dtoa+0x133>
		*decpt = 1;
   29366:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   2936d:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
		return nrv_alloc("0", rve, 1);
   29373:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   2937a:	ba 01 00 00 00       	mov    $0x1,%edx
   2937f:	48 89 c6             	mov    %rax,%rsi
   29382:	48 8d 3d b4 79 00 00 	lea    0x79b4(%rip),%rdi        # 30d3d <xdigs_upper.3164+0x1d>
   29389:	e8 16 fb ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   2938e:	e9 6d 15 00 00       	jmpq   2a900 <__dtoa+0x16a0>
			if (Rounding != 2)
				Rounding = 0;
		}
#endif

	b = d2b(dval(&d), &be, &bbits);
   29393:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   29397:	48 8d 8d 34 ff ff ff 	lea    -0xcc(%rbp),%rcx
   2939e:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
   293a5:	48 89 ce             	mov    %rcx,%rsi
   293a8:	48 89 d7             	mov    %rdx,%rdi
   293ab:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
   293b2:	f2 0f 10 85 00 ff ff 	movsd  -0x100(%rbp),%xmm0
   293b9:	ff 
   293ba:	e8 21 35 00 00       	callq  2c8e0 <__d2b_D2A>
   293bf:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	if (b == NULL)
   293c3:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   293c8:	75 0a                	jne    293d4 <__dtoa+0x174>
		return (NULL);
   293ca:	b8 00 00 00 00       	mov    $0x0,%eax
   293cf:	e9 2c 15 00 00       	jmpq   2a900 <__dtoa+0x16a0>
#ifdef Sudden_Underflow
	i = (int)(word0(&d) >> Exp_shift1 & (Exp_mask>>Exp_shift1));
#else
	if (( i = (int)(word0(&d) >> Exp_shift1 & (Exp_mask>>Exp_shift1)) )!=0) {
   293d4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   293d7:	c1 e8 14             	shr    $0x14,%eax
   293da:	25 ff 07 00 00       	and    $0x7ff,%eax
   293df:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
   293e5:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   293ec:	74 39                	je     29427 <__dtoa+0x1c7>
#endif
		dval(&d2) = dval(&d);
   293ee:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   293f3:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
		word0(&d2) &= Frac_mask1;
   293f8:	8b 45 ec             	mov    -0x14(%rbp),%eax
   293fb:	25 ff ff 0f 00       	and    $0xfffff,%eax
   29400:	89 45 ec             	mov    %eax,-0x14(%rbp)
		word0(&d2) |= Exp_11;
   29403:	8b 45 ec             	mov    -0x14(%rbp),%eax
   29406:	0d 00 00 f0 3f       	or     $0x3ff00000,%eax
   2940b:	89 45 ec             	mov    %eax,-0x14(%rbp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

		i -= Bias;
   2940e:	81 ad 48 ff ff ff ff 	subl   $0x3ff,-0xb8(%rbp)
   29415:	03 00 00 
#ifdef IBM
		i <<= 2;
		i += j;
#endif
#ifndef Sudden_Underflow
		denorm = 0;
   29418:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
   2941f:	00 00 00 
   29422:	e9 ab 00 00 00       	jmpq   294d2 <__dtoa+0x272>
		}
	else {
		/* d is denormalized */

		i = bbits + be + (Bias + (P-1) - 1);
   29427:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
   2942d:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax
   29433:	01 d0                	add    %edx,%eax
   29435:	05 32 04 00 00       	add    $0x432,%eax
   2943a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
		x = i > 32  ? word0(&d) << (64 - i) | word1(&d) >> (i - 32)
			    : word1(&d) << (32 - i);
   29440:	83 bd 48 ff ff ff 20 	cmpl   $0x20,-0xb8(%rbp)
   29447:	7e 2a                	jle    29473 <__dtoa+0x213>
		x = i > 32  ? word0(&d) << (64 - i) | word1(&d) >> (i - 32)
   29449:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   2944c:	b8 40 00 00 00       	mov    $0x40,%eax
   29451:	2b 85 48 ff ff ff    	sub    -0xb8(%rbp),%eax
   29457:	89 d6                	mov    %edx,%esi
   29459:	89 c1                	mov    %eax,%ecx
   2945b:	d3 e6                	shl    %cl,%esi
   2945d:	8b 55 e0             	mov    -0x20(%rbp),%edx
   29460:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29466:	83 e8 20             	sub    $0x20,%eax
   29469:	89 c1                	mov    %eax,%ecx
   2946b:	d3 ea                	shr    %cl,%edx
   2946d:	89 d0                	mov    %edx,%eax
			    : word1(&d) << (32 - i);
   2946f:	09 f0                	or     %esi,%eax
   29471:	eb 14                	jmp    29487 <__dtoa+0x227>
   29473:	8b 55 e0             	mov    -0x20(%rbp),%edx
   29476:	b8 20 00 00 00       	mov    $0x20,%eax
   2947b:	2b 85 48 ff ff ff    	sub    -0xb8(%rbp),%eax
   29481:	89 c1                	mov    %eax,%ecx
   29483:	d3 e2                	shl    %cl,%edx
   29485:	89 d0                	mov    %edx,%eax
		x = i > 32  ? word0(&d) << (64 - i) | word1(&d) >> (i - 32)
   29487:	89 45 80             	mov    %eax,-0x80(%rbp)
		dval(&d2) = x;
   2948a:	8b 45 80             	mov    -0x80(%rbp),%eax
   2948d:	48 85 c0             	test   %rax,%rax
   29490:	78 07                	js     29499 <__dtoa+0x239>
   29492:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
   29497:	eb 15                	jmp    294ae <__dtoa+0x24e>
   29499:	48 89 c2             	mov    %rax,%rdx
   2949c:	48 d1 ea             	shr    %rdx
   2949f:	83 e0 01             	and    $0x1,%eax
   294a2:	48 09 c2             	or     %rax,%rdx
   294a5:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
   294aa:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
   294ae:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
		word0(&d2) -= 31*Exp_msk1; /* adjust exponent */
   294b3:	8b 45 ec             	mov    -0x14(%rbp),%eax
   294b6:	2d 00 00 f0 01       	sub    $0x1f00000,%eax
   294bb:	89 45 ec             	mov    %eax,-0x14(%rbp)
		i -= (Bias + (P-1) - 1) + 1;
   294be:	81 ad 48 ff ff ff 33 	subl   $0x433,-0xb8(%rbp)
   294c5:	04 00 00 
		denorm = 1;
   294c8:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%rbp)
   294cf:	00 00 00 
		}
#endif
	ds = (dval(&d2)-1.5)*0.289529654602168 + 0.1760912590558 + i*0.301029995663981;
   294d2:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   294d7:	f2 0f 10 0d 61 78 00 	movsd  0x7861(%rip),%xmm1        # 30d40 <xdigs_upper.3164+0x20>
   294de:	00 
   294df:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   294e3:	f2 0f 10 0d 5d 78 00 	movsd  0x785d(%rip),%xmm1        # 30d48 <xdigs_upper.3164+0x28>
   294ea:	00 
   294eb:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   294ef:	f2 0f 10 0d 59 78 00 	movsd  0x7859(%rip),%xmm1        # 30d50 <xdigs_upper.3164+0x30>
   294f6:	00 
   294f7:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
   294fb:	f2 0f 2a 85 48 ff ff 	cvtsi2sdl -0xb8(%rbp),%xmm0
   29502:	ff 
   29503:	f2 0f 10 15 4d 78 00 	movsd  0x784d(%rip),%xmm2        # 30d58 <xdigs_upper.3164+0x38>
   2950a:	00 
   2950b:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
   2950f:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
   29513:	f2 0f 11 45 b8       	movsd  %xmm0,-0x48(%rbp)
	k = (int)ds;
   29518:	f2 0f 10 45 b8       	movsd  -0x48(%rbp),%xmm0
   2951d:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
   29521:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
	if (ds < 0. && ds != k)
   29527:	66 0f ef c0          	pxor   %xmm0,%xmm0
   2952b:	66 0f 2e 45 b8       	ucomisd -0x48(%rbp),%xmm0
   29530:	76 1d                	jbe    2954f <__dtoa+0x2ef>
   29532:	f2 0f 2a 85 5c ff ff 	cvtsi2sdl -0xa4(%rbp),%xmm0
   29539:	ff 
   2953a:	66 0f 2e 45 b8       	ucomisd -0x48(%rbp),%xmm0
   2953f:	7a 07                	jp     29548 <__dtoa+0x2e8>
   29541:	66 0f 2e 45 b8       	ucomisd -0x48(%rbp),%xmm0
   29546:	74 07                	je     2954f <__dtoa+0x2ef>
		k--;	/* want k = floor(ds) */
   29548:	83 ad 5c ff ff ff 01 	subl   $0x1,-0xa4(%rbp)
	k_check = 1;
   2954f:	c7 85 60 ff ff ff 01 	movl   $0x1,-0xa0(%rbp)
   29556:	00 00 00 
	if (k >= 0 && k <= Ten_pmax) {
   29559:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
   29560:	78 41                	js     295a3 <__dtoa+0x343>
   29562:	83 bd 5c ff ff ff 16 	cmpl   $0x16,-0xa4(%rbp)
   29569:	7f 38                	jg     295a3 <__dtoa+0x343>
		if (dval(&d) < tens[k])
   2956b:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29570:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   29576:	48 98                	cltq   
   29578:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2957f:	00 
   29580:	48 8d 05 39 79 00 00 	lea    0x7939(%rip),%rax        # 30ec0 <__tens_D2A>
   29587:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   2958c:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29590:	76 07                	jbe    29599 <__dtoa+0x339>
			k--;
   29592:	83 ad 5c ff ff ff 01 	subl   $0x1,-0xa4(%rbp)
		k_check = 0;
   29599:	c7 85 60 ff ff ff 00 	movl   $0x0,-0xa0(%rbp)
   295a0:	00 00 00 
		}
	j = bbits - i - 1;
   295a3:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
   295a9:	2b 85 48 ff ff ff    	sub    -0xb8(%rbp),%eax
   295af:	83 e8 01             	sub    $0x1,%eax
   295b2:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
	if (j >= 0) {
   295b8:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   295bf:	78 18                	js     295d9 <__dtoa+0x379>
		b2 = 0;
   295c1:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
   295c8:	00 00 00 
		s2 = j;
   295cb:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
   295d1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
   295d7:	eb 18                	jmp    295f1 <__dtoa+0x391>
		}
	else {
		b2 = -j;
   295d9:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
   295df:	f7 d8                	neg    %eax
   295e1:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
		s2 = 0;
   295e7:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
   295ee:	00 00 00 
		}
	if (k >= 0) {
   295f1:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
   295f8:	78 24                	js     2961e <__dtoa+0x3be>
		b5 = 0;
   295fa:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)
   29601:	00 00 00 
		s5 = k;
   29604:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   2960a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
		s2 += k;
   29610:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   29616:	01 85 6c ff ff ff    	add    %eax,-0x94(%rbp)
   2961c:	eb 24                	jmp    29642 <__dtoa+0x3e2>
		}
	else {
		b2 -= k;
   2961e:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   29624:	29 85 3c ff ff ff    	sub    %eax,-0xc4(%rbp)
		b5 = -k;
   2962a:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   29630:	f7 d8                	neg    %eax
   29632:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
		s5 = 0;
   29638:	c7 85 70 ff ff ff 00 	movl   $0x0,-0x90(%rbp)
   2963f:	00 00 00 
		}
	if (mode < 0 || mode > 9)
   29642:	83 bd 24 ff ff ff 00 	cmpl   $0x0,-0xdc(%rbp)
   29649:	78 09                	js     29654 <__dtoa+0x3f4>
   2964b:	83 bd 24 ff ff ff 09 	cmpl   $0x9,-0xdc(%rbp)
   29652:	7e 0a                	jle    2965e <__dtoa+0x3fe>
		mode = 0;
   29654:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%rbp)
   2965b:	00 00 00 

#ifndef SET_INEXACT
#ifdef Check_FLT_ROUNDS
	try_quick = Rounding == 1;
#else
	try_quick = 1;
   2965e:	c7 85 78 ff ff ff 01 	movl   $0x1,-0x88(%rbp)
   29665:	00 00 00 
#endif
#endif /*SET_INEXACT*/

	if (mode > 5) {
   29668:	83 bd 24 ff ff ff 05 	cmpl   $0x5,-0xdc(%rbp)
   2966f:	7e 11                	jle    29682 <__dtoa+0x422>
		mode -= 4;
   29671:	83 ad 24 ff ff ff 04 	subl   $0x4,-0xdc(%rbp)
		try_quick = 0;
   29678:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%rbp)
   2967f:	00 00 00 
		}
	leftright = 1;
   29682:	c7 85 64 ff ff ff 01 	movl   $0x1,-0x9c(%rbp)
   29689:	00 00 00 
	ilim = ilim1 = -1;	/* Values for cases 0 and 1; done here to */
   2968c:	c7 85 54 ff ff ff ff 	movl   $0xffffffff,-0xac(%rbp)
   29693:	ff ff ff 
   29696:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
   2969c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
				/* silence erroneous "gcc -Wall" warning. */
	switch(mode) {
   296a2:	83 bd 24 ff ff ff 05 	cmpl   $0x5,-0xdc(%rbp)
   296a9:	0f 87 d2 00 00 00    	ja     29781 <__dtoa+0x521>
   296af:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
   296b5:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   296bc:	00 
   296bd:	48 8d 05 d4 76 00 00 	lea    0x76d4(%rip),%rax        # 30d98 <xdigs_upper.3164+0x78>
   296c4:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   296c7:	48 63 d0             	movslq %eax,%rdx
   296ca:	48 8d 05 c7 76 00 00 	lea    0x76c7(%rip),%rax        # 30d98 <xdigs_upper.3164+0x78>
   296d1:	48 01 d0             	add    %rdx,%rax
   296d4:	ff e0                	jmpq   *%rax
		case 0:
		case 1:
			i = 18;
   296d6:	c7 85 48 ff ff ff 12 	movl   $0x12,-0xb8(%rbp)
   296dd:	00 00 00 
			ndigits = 0;
   296e0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%rbp)
   296e7:	00 00 00 
			break;
   296ea:	e9 92 00 00 00       	jmpq   29781 <__dtoa+0x521>
		case 2:
			leftright = 0;
   296ef:	c7 85 64 ff ff ff 00 	movl   $0x0,-0x9c(%rbp)
   296f6:	00 00 00 
			/* no break */
		case 4:
			if (ndigits <= 0)
   296f9:	83 bd 20 ff ff ff 00 	cmpl   $0x0,-0xe0(%rbp)
   29700:	7f 0a                	jg     2970c <__dtoa+0x4ac>
				ndigits = 1;
   29702:	c7 85 20 ff ff ff 01 	movl   $0x1,-0xe0(%rbp)
   29709:	00 00 00 
			ilim = ilim1 = i = ndigits;
   2970c:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
   29712:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
   29718:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2971e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
   29724:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
   2972a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
			break;
   29730:	eb 4f                	jmp    29781 <__dtoa+0x521>
		case 3:
			leftright = 0;
   29732:	c7 85 64 ff ff ff 00 	movl   $0x0,-0x9c(%rbp)
   29739:	00 00 00 
			/* no break */
		case 5:
			i = ndigits + k + 1;
   2973c:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx
   29742:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   29748:	01 d0                	add    %edx,%eax
   2974a:	83 c0 01             	add    $0x1,%eax
   2974d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
			ilim = i;
   29753:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29759:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
			ilim1 = i - 1;
   2975f:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29765:	83 e8 01             	sub    $0x1,%eax
   29768:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
			if (i <= 0)
   2976e:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   29775:	7f 0a                	jg     29781 <__dtoa+0x521>
				i = 1;
   29777:	c7 85 48 ff ff ff 01 	movl   $0x1,-0xb8(%rbp)
   2977e:	00 00 00 
		}
	s = s0 = rv_alloc(i);
   29781:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29787:	89 c7                	mov    %eax,%edi
   29789:	e8 b2 f6 ff ff       	callq  28e40 <__rv_alloc_D2A>
   2978e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
   29792:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   29796:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	if (s == NULL)
   2979a:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
   2979f:	75 0a                	jne    297ab <__dtoa+0x54b>
		return (NULL);
   297a1:	b8 00 00 00 00       	mov    $0x0,%eax
   297a6:	e9 55 11 00 00       	jmpq   2a900 <__dtoa+0x16a0>
#ifdef Honor_FLT_ROUNDS
	if (mode > 1 && Rounding != 1)
		leftright = 0;
#endif

	if (ilim >= 0 && ilim <= Quick_max && try_quick) {
   297ab:	83 bd 50 ff ff ff 00 	cmpl   $0x0,-0xb0(%rbp)
   297b2:	0f 88 09 05 00 00    	js     29cc1 <__dtoa+0xa61>
   297b8:	83 bd 50 ff ff ff 0e 	cmpl   $0xe,-0xb0(%rbp)
   297bf:	0f 8f fc 04 00 00    	jg     29cc1 <__dtoa+0xa61>
   297c5:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%rbp)
   297cc:	0f 84 ef 04 00 00    	je     29cc1 <__dtoa+0xa61>

		/* Try to get by with floating-point arithmetic. */

		i = 0;
   297d2:	c7 85 48 ff ff ff 00 	movl   $0x0,-0xb8(%rbp)
   297d9:	00 00 00 
		dval(&d2) = dval(&d);
   297dc:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   297e1:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
		k0 = k;
   297e6:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   297ec:	89 45 84             	mov    %eax,-0x7c(%rbp)
		ilim0 = ilim;
   297ef:	8b 85 50 ff ff ff    	mov    -0xb0(%rbp),%eax
   297f5:	89 45 88             	mov    %eax,-0x78(%rbp)
		ieps = 2; /* conservative */
   297f8:	c7 85 4c ff ff ff 02 	movl   $0x2,-0xb4(%rbp)
   297ff:	00 00 00 
		if (k > 0) {
   29802:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
   29809:	0f 8e ce 00 00 00    	jle    298dd <__dtoa+0x67d>
			ds = tens[k&0xf];
   2980f:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   29815:	83 e0 0f             	and    $0xf,%eax
   29818:	48 98                	cltq   
   2981a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   29821:	00 
   29822:	48 8d 05 97 76 00 00 	lea    0x7697(%rip),%rax        # 30ec0 <__tens_D2A>
   29829:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   2982e:	f2 0f 11 45 b8       	movsd  %xmm0,-0x48(%rbp)
			j = k >> 4;
   29833:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   29839:	c1 f8 04             	sar    $0x4,%eax
   2983c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
			if (j & Bletch) {
   29842:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
   29848:	83 e0 10             	and    $0x10,%eax
   2984b:	85 c0                	test   %eax,%eax
   2984d:	74 71                	je     298c0 <__dtoa+0x660>
				/* prevent overflows */
				j &= Bletch - 1;
   2984f:	83 a5 58 ff ff ff 0f 	andl   $0xf,-0xa8(%rbp)
				dval(&d) /= bigtens[n_bigtens-1];
   29856:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   2985b:	f2 0f 10 0d fd 75 00 	movsd  0x75fd(%rip),%xmm1        # 30e60 <__bigtens_D2A+0x20>
   29862:	00 
   29863:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
   29867:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
				ieps++;
   2986c:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)
				}
			for(; j; j >>= 1, i++)
   29873:	eb 4b                	jmp    298c0 <__dtoa+0x660>
				if (j & 1) {
   29875:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
   2987b:	83 e0 01             	and    $0x1,%eax
   2987e:	85 c0                	test   %eax,%eax
   29880:	74 31                	je     298b3 <__dtoa+0x653>
					ieps++;
   29882:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)
					ds *= bigtens[i];
   29889:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2988f:	48 98                	cltq   
   29891:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   29898:	00 
   29899:	48 8d 05 a0 75 00 00 	lea    0x75a0(%rip),%rax        # 30e40 <__bigtens_D2A>
   298a0:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   298a5:	f2 0f 10 4d b8       	movsd  -0x48(%rbp),%xmm1
   298aa:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   298ae:	f2 0f 11 45 b8       	movsd  %xmm0,-0x48(%rbp)
			for(; j; j >>= 1, i++)
   298b3:	d1 bd 58 ff ff ff    	sarl   -0xa8(%rbp)
   298b9:	83 85 48 ff ff ff 01 	addl   $0x1,-0xb8(%rbp)
   298c0:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   298c7:	75 ac                	jne    29875 <__dtoa+0x615>
					}
			dval(&d) /= ds;
   298c9:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   298ce:	f2 0f 5e 45 b8       	divsd  -0x48(%rbp),%xmm0
   298d3:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
   298d8:	e9 a1 00 00 00       	jmpq   2997e <__dtoa+0x71e>
			}
		else if (( j1 = -k )!=0) {
   298dd:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   298e3:	f7 d8                	neg    %eax
   298e5:	89 45 8c             	mov    %eax,-0x74(%rbp)
   298e8:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
   298ec:	0f 84 8c 00 00 00    	je     2997e <__dtoa+0x71e>
			dval(&d) *= tens[j1 & 0xf];
   298f2:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   298f7:	8b 45 8c             	mov    -0x74(%rbp),%eax
   298fa:	83 e0 0f             	and    $0xf,%eax
   298fd:	48 98                	cltq   
   298ff:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   29906:	00 
   29907:	48 8d 05 b2 75 00 00 	lea    0x75b2(%rip),%rax        # 30ec0 <__tens_D2A>
   2990e:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   29913:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   29917:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
			for(j = j1 >> 4; j; j >>= 1, i++)
   2991c:	8b 45 8c             	mov    -0x74(%rbp),%eax
   2991f:	c1 f8 04             	sar    $0x4,%eax
   29922:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
   29928:	eb 4b                	jmp    29975 <__dtoa+0x715>
				if (j & 1) {
   2992a:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
   29930:	83 e0 01             	and    $0x1,%eax
   29933:	85 c0                	test   %eax,%eax
   29935:	74 31                	je     29968 <__dtoa+0x708>
					ieps++;
   29937:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)
					dval(&d) *= bigtens[i];
   2993e:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29943:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29949:	48 98                	cltq   
   2994b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   29952:	00 
   29953:	48 8d 05 e6 74 00 00 	lea    0x74e6(%rip),%rax        # 30e40 <__bigtens_D2A>
   2995a:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   2995f:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   29963:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
			for(j = j1 >> 4; j; j >>= 1, i++)
   29968:	d1 bd 58 ff ff ff    	sarl   -0xa8(%rbp)
   2996e:	83 85 48 ff ff ff 01 	addl   $0x1,-0xb8(%rbp)
   29975:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   2997c:	75 ac                	jne    2992a <__dtoa+0x6ca>
					}
			}
		if (k_check && dval(&d) < 1. && ilim > 0) {
   2997e:	83 bd 60 ff ff ff 00 	cmpl   $0x0,-0xa0(%rbp)
   29985:	74 59                	je     299e0 <__dtoa+0x780>
   29987:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   2998c:	f2 0f 10 05 cc 73 00 	movsd  0x73cc(%rip),%xmm0        # 30d60 <xdigs_upper.3164+0x40>
   29993:	00 
   29994:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29998:	76 46                	jbe    299e0 <__dtoa+0x780>
   2999a:	83 bd 50 ff ff ff 00 	cmpl   $0x0,-0xb0(%rbp)
   299a1:	7e 3d                	jle    299e0 <__dtoa+0x780>
			if (ilim1 <= 0)
   299a3:	83 bd 54 ff ff ff 00 	cmpl   $0x0,-0xac(%rbp)
   299aa:	0f 8e e9 02 00 00    	jle    29c99 <__dtoa+0xa39>
				goto fast_failed;
			ilim = ilim1;
   299b0:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
   299b6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
			k--;
   299bc:	83 ad 5c ff ff ff 01 	subl   $0x1,-0xa4(%rbp)
			dval(&d) *= 10.;
   299c3:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   299c8:	f2 0f 10 05 98 73 00 	movsd  0x7398(%rip),%xmm0        # 30d68 <xdigs_upper.3164+0x48>
   299cf:	00 
   299d0:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   299d4:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
			ieps++;
   299d9:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)
			}
		dval(&eps) = ieps*dval(&d) + 7.;
   299e0:	f2 0f 2a 85 4c ff ff 	cvtsi2sdl -0xb4(%rbp),%xmm0
   299e7:	ff 
   299e8:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   299ed:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   299f1:	f2 0f 10 0d 77 73 00 	movsd  0x7377(%rip),%xmm1        # 30d70 <xdigs_upper.3164+0x50>
   299f8:	00 
   299f9:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
   299fd:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
		word0(&eps) -= (P-1)*Exp_msk1;
   29a02:	8b 45 f4             	mov    -0xc(%rbp),%eax
   29a05:	2d 00 00 40 03       	sub    $0x3400000,%eax
   29a0a:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ilim == 0) {
   29a0d:	83 bd 50 ff ff ff 00 	cmpl   $0x0,-0xb0(%rbp)
   29a14:	75 5f                	jne    29a75 <__dtoa+0x815>
			S = mhi = 0;
   29a16:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
   29a1d:	00 
   29a1e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   29a22:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
			dval(&d) -= 5.;
   29a26:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29a2b:	f2 0f 10 0d 45 73 00 	movsd  0x7345(%rip),%xmm1        # 30d78 <xdigs_upper.3164+0x58>
   29a32:	00 
   29a33:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   29a37:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
			if (dval(&d) > dval(&eps))
   29a3c:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29a41:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   29a46:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29a4a:	0f 87 ef 08 00 00    	ja     2a33f <__dtoa+0x10df>
				goto one_digit;
			if (dval(&d) < -dval(&eps))
   29a50:	f2 0f 10 55 e0       	movsd  -0x20(%rbp),%xmm2
   29a55:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   29a5a:	f3 0f 7e 05 1e 73 00 	movq   0x731e(%rip),%xmm0        # 30d80 <xdigs_upper.3164+0x60>
   29a61:	00 
   29a62:	66 0f 57 c1          	xorpd  %xmm1,%xmm0
   29a66:	66 0f 2e c2          	ucomisd %xmm2,%xmm0
   29a6a:	0f 87 b8 08 00 00    	ja     2a328 <__dtoa+0x10c8>
				goto no_digits;
			goto fast_failed;
   29a70:	e9 28 02 00 00       	jmpq   29c9d <__dtoa+0xa3d>
			}
#ifndef No_leftright
		if (leftright) {
   29a75:	83 bd 64 ff ff ff 00 	cmpl   $0x0,-0x9c(%rbp)
   29a7c:	0f 84 fa 00 00 00    	je     29b7c <__dtoa+0x91c>
			/* Use Steele & White method of only
			 * generating digits needed.
			 */
			dval(&eps) = 0.5/tens[ilim-1] - dval(&eps);
   29a82:	8b 85 50 ff ff ff    	mov    -0xb0(%rbp),%eax
   29a88:	83 e8 01             	sub    $0x1,%eax
   29a8b:	48 98                	cltq   
   29a8d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   29a94:	00 
   29a95:	48 8d 05 24 74 00 00 	lea    0x7424(%rip),%rax        # 30ec0 <__tens_D2A>
   29a9c:	f2 0f 10 0c 02       	movsd  (%rdx,%rax,1),%xmm1
   29aa1:	f2 0f 10 05 e7 72 00 	movsd  0x72e7(%rip),%xmm0        # 30d90 <xdigs_upper.3164+0x70>
   29aa8:	00 
   29aa9:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
   29aad:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   29ab2:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   29ab6:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
			for(i = 0;;) {
   29abb:	c7 85 48 ff ff ff 00 	movl   $0x0,-0xb8(%rbp)
   29ac2:	00 00 00 
				L = dval(&d);
   29ac5:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29aca:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
   29ace:	89 45 90             	mov    %eax,-0x70(%rbp)
				dval(&d) -= L;
   29ad1:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29ad6:	f2 0f 2a 45 90       	cvtsi2sdl -0x70(%rbp),%xmm0
   29adb:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
   29adf:	66 0f 28 c1          	movapd %xmm1,%xmm0
   29ae3:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
				*s++ = '0' + (int)L;
   29ae8:	8b 45 90             	mov    -0x70(%rbp),%eax
   29aeb:	8d 48 30             	lea    0x30(%rax),%ecx
   29aee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   29af2:	48 8d 50 01          	lea    0x1(%rax),%rdx
   29af6:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   29afa:	89 ca                	mov    %ecx,%edx
   29afc:	88 10                	mov    %dl,(%rax)
				if (dval(&d) < dval(&eps))
   29afe:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29b03:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
   29b08:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29b0c:	0f 87 a9 0d 00 00    	ja     2a8bb <__dtoa+0x165b>
					goto ret1;
				if (1. - dval(&d) < dval(&eps))
   29b12:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29b17:	f2 0f 10 05 41 72 00 	movsd  0x7241(%rip),%xmm0        # 30d60 <xdigs_upper.3164+0x40>
   29b1e:	00 
   29b1f:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   29b23:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   29b28:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
   29b2c:	0f 87 da 02 00 00    	ja     29e0c <__dtoa+0xbac>
					goto bump_up;
				if (++i >= ilim)
   29b32:	83 85 48 ff ff ff 01 	addl   $0x1,-0xb8(%rbp)
   29b39:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29b3f:	3b 85 50 ff ff ff    	cmp    -0xb0(%rbp),%eax
   29b45:	0f 8d 51 01 00 00    	jge    29c9c <__dtoa+0xa3c>
					break;
				dval(&eps) *= 10.;
   29b4b:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   29b50:	f2 0f 10 05 10 72 00 	movsd  0x7210(%rip),%xmm0        # 30d68 <xdigs_upper.3164+0x48>
   29b57:	00 
   29b58:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   29b5c:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
				dval(&d) *= 10.;
   29b61:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29b66:	f2 0f 10 05 fa 71 00 	movsd  0x71fa(%rip),%xmm0        # 30d68 <xdigs_upper.3164+0x48>
   29b6d:	00 
   29b6e:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   29b72:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
				L = dval(&d);
   29b77:	e9 49 ff ff ff       	jmpq   29ac5 <__dtoa+0x865>
				}
			}
		else {
#endif
			/* Generate ilim digits, then fix them up. */
			dval(&eps) *= tens[ilim-1];
   29b7c:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   29b81:	8b 85 50 ff ff ff    	mov    -0xb0(%rbp),%eax
   29b87:	83 e8 01             	sub    $0x1,%eax
   29b8a:	48 98                	cltq   
   29b8c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   29b93:	00 
   29b94:	48 8d 05 25 73 00 00 	lea    0x7325(%rip),%rax        # 30ec0 <__tens_D2A>
   29b9b:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   29ba0:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   29ba4:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
			for(i = 1;; i++, dval(&d) *= 10.) {
   29ba9:	c7 85 48 ff ff ff 01 	movl   $0x1,-0xb8(%rbp)
   29bb0:	00 00 00 
				L = (Long)(dval(&d));
   29bb3:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29bb8:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
   29bbc:	89 45 90             	mov    %eax,-0x70(%rbp)
				if (!(dval(&d) -= L))
   29bbf:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29bc4:	f2 0f 2a 45 90       	cvtsi2sdl -0x70(%rbp),%xmm0
   29bc9:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
   29bcd:	66 0f 28 c1          	movapd %xmm1,%xmm0
   29bd1:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
   29bd6:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29bdb:	66 0f ef c9          	pxor   %xmm1,%xmm1
   29bdf:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29be3:	7a 16                	jp     29bfb <__dtoa+0x99b>
   29be5:	66 0f ef c9          	pxor   %xmm1,%xmm1
   29be9:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29bed:	75 0c                	jne    29bfb <__dtoa+0x99b>
					ilim = i;
   29bef:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29bf5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
				*s++ = '0' + (int)L;
   29bfb:	8b 45 90             	mov    -0x70(%rbp),%eax
   29bfe:	8d 48 30             	lea    0x30(%rax),%ecx
   29c01:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   29c05:	48 8d 50 01          	lea    0x1(%rax),%rdx
   29c09:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   29c0d:	89 ca                	mov    %ecx,%edx
   29c0f:	88 10                	mov    %dl,(%rax)
				if (i == ilim) {
   29c11:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29c17:	3b 85 50 ff ff ff    	cmp    -0xb0(%rbp),%eax
   29c1d:	75 58                	jne    29c77 <__dtoa+0xa17>
					if (dval(&d) > 0.5 + dval(&eps))
   29c1f:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29c24:	f2 0f 10 55 f0       	movsd  -0x10(%rbp),%xmm2
   29c29:	f2 0f 10 05 5f 71 00 	movsd  0x715f(%rip),%xmm0        # 30d90 <xdigs_upper.3164+0x70>
   29c30:	00 
   29c31:	f2 0f 58 c2          	addsd  %xmm2,%xmm0
   29c35:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
   29c39:	0f 87 d0 01 00 00    	ja     29e0f <__dtoa+0xbaf>
						goto bump_up;
					else if (dval(&d) < 0.5 - dval(&eps)) {
   29c3f:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29c44:	f2 0f 10 55 f0       	movsd  -0x10(%rbp),%xmm2
   29c49:	f2 0f 10 05 3f 71 00 	movsd  0x713f(%rip),%xmm0        # 30d90 <xdigs_upper.3164+0x70>
   29c50:	00 
   29c51:	f2 0f 5c c2          	subsd  %xmm2,%xmm0
   29c55:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29c59:	77 02                	ja     29c5d <__dtoa+0x9fd>
						while(*--s == '0');
						s++;
						goto ret1;
						}
					break;
   29c5b:	eb 40                	jmp    29c9d <__dtoa+0xa3d>
						while(*--s == '0');
   29c5d:	48 83 6d c0 01       	subq   $0x1,-0x40(%rbp)
   29c62:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   29c66:	0f b6 00             	movzbl (%rax),%eax
   29c69:	3c 30                	cmp    $0x30,%al
   29c6b:	74 f0                	je     29c5d <__dtoa+0x9fd>
						s++;
   29c6d:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
						goto ret1;
   29c72:	e9 48 0c 00 00       	jmpq   2a8bf <__dtoa+0x165f>
			for(i = 1;; i++, dval(&d) *= 10.) {
   29c77:	83 85 48 ff ff ff 01 	addl   $0x1,-0xb8(%rbp)
   29c7e:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29c83:	f2 0f 10 05 dd 70 00 	movsd  0x70dd(%rip),%xmm0        # 30d68 <xdigs_upper.3164+0x48>
   29c8a:	00 
   29c8b:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   29c8f:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
				L = (Long)(dval(&d));
   29c94:	e9 1a ff ff ff       	jmpq   29bb3 <__dtoa+0x953>
				goto fast_failed;
   29c99:	90                   	nop
   29c9a:	eb 01                	jmp    29c9d <__dtoa+0xa3d>
					break;
   29c9c:	90                   	nop
				}
#ifndef No_leftright
			}
#endif
 fast_failed:
		s = s0;
   29c9d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   29ca1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		dval(&d) = dval(&d2);
   29ca5:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   29caa:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
		k = k0;
   29caf:	8b 45 84             	mov    -0x7c(%rbp),%eax
   29cb2:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
		ilim = ilim0;
   29cb8:	8b 45 88             	mov    -0x78(%rbp),%eax
   29cbb:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
		}

	/* Do we have a "small" integer? */

	if (be >= 0 && k <= Int_max) {
   29cc1:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax
   29cc7:	85 c0                	test   %eax,%eax
   29cc9:	0f 88 b4 01 00 00    	js     29e83 <__dtoa+0xc23>
   29ccf:	83 bd 5c ff ff ff 0e 	cmpl   $0xe,-0xa4(%rbp)
   29cd6:	0f 8f a7 01 00 00    	jg     29e83 <__dtoa+0xc23>
		/* Yes. */
		ds = tens[k];
   29cdc:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   29ce2:	48 98                	cltq   
   29ce4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   29ceb:	00 
   29cec:	48 8d 05 cd 71 00 00 	lea    0x71cd(%rip),%rax        # 30ec0 <__tens_D2A>
   29cf3:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   29cf8:	f2 0f 11 45 b8       	movsd  %xmm0,-0x48(%rbp)
		if (ndigits < 0 && ilim <= 0) {
   29cfd:	83 bd 20 ff ff ff 00 	cmpl   $0x0,-0xe0(%rbp)
   29d04:	79 4b                	jns    29d51 <__dtoa+0xaf1>
   29d06:	83 bd 50 ff ff ff 00 	cmpl   $0x0,-0xb0(%rbp)
   29d0d:	7f 42                	jg     29d51 <__dtoa+0xaf1>
			S = mhi = 0;
   29d0f:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
   29d16:	00 
   29d17:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   29d1b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
			if (ilim < 0 || dval(&d) <= 5*ds)
   29d1f:	83 bd 50 ff ff ff 00 	cmpl   $0x0,-0xb0(%rbp)
   29d26:	0f 88 ff 05 00 00    	js     2a32b <__dtoa+0x10cb>
   29d2c:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29d31:	f2 0f 10 55 b8       	movsd  -0x48(%rbp),%xmm2
   29d36:	f2 0f 10 05 3a 70 00 	movsd  0x703a(%rip),%xmm0        # 30d78 <xdigs_upper.3164+0x58>
   29d3d:	00 
   29d3e:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
   29d42:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29d46:	0f 83 df 05 00 00    	jae    2a32b <__dtoa+0x10cb>
				goto no_digits;
			goto one_digit;
   29d4c:	e9 f2 05 00 00       	jmpq   2a343 <__dtoa+0x10e3>
			}
		for(i = 1;; i++, dval(&d) *= 10.) {
   29d51:	c7 85 48 ff ff ff 01 	movl   $0x1,-0xb8(%rbp)
   29d58:	00 00 00 
			L = (Long)(dval(&d) / ds);
   29d5b:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29d60:	f2 0f 5e 45 b8       	divsd  -0x48(%rbp),%xmm0
   29d65:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
   29d69:	89 45 90             	mov    %eax,-0x70(%rbp)
			dval(&d) -= L*ds;
   29d6c:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29d71:	f2 0f 2a 45 90       	cvtsi2sdl -0x70(%rbp),%xmm0
   29d76:	f2 0f 59 45 b8       	mulsd  -0x48(%rbp),%xmm0
   29d7b:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
   29d7f:	66 0f 28 c1          	movapd %xmm1,%xmm0
   29d83:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
			if (dval(&d) < 0) {
				L--;
				dval(&d) += ds;
				}
#endif
			*s++ = '0' + (int)L;
   29d88:	8b 45 90             	mov    -0x70(%rbp),%eax
   29d8b:	8d 48 30             	lea    0x30(%rax),%ecx
   29d8e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   29d92:	48 8d 50 01          	lea    0x1(%rax),%rdx
   29d96:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   29d9a:	89 ca                	mov    %ecx,%edx
   29d9c:	88 10                	mov    %dl,(%rax)
			if (!dval(&d)) {
   29d9e:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29da3:	66 0f ef c9          	pxor   %xmm1,%xmm1
   29da7:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29dab:	7a 0e                	jp     29dbb <__dtoa+0xb5b>
   29dad:	66 0f ef c9          	pxor   %xmm1,%xmm1
   29db1:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   29db5:	0f 84 bc 00 00 00    	je     29e77 <__dtoa+0xc17>
#ifdef SET_INEXACT
				inexact = 0;
#endif
				break;
				}
			if (i == ilim) {
   29dbb:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29dc1:	3b 85 50 ff ff ff    	cmp    -0xb0(%rbp),%eax
   29dc7:	0f 85 88 00 00 00    	jne    29e55 <__dtoa+0xbf5>
				switch(Rounding) {
				  case 0: goto ret1;
				  case 2: goto bump_up;
				  }
#endif
				dval(&d) += dval(&d);
   29dcd:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29dd2:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
   29dd6:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
#ifdef ROUND_BIASED
				if (dval(&d) >= ds)
#else
				if (dval(&d) > ds || (dval(&d) == ds && L & 1))
   29ddb:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29de0:	66 0f 2e 45 b8       	ucomisd -0x48(%rbp),%xmm0
   29de5:	77 2b                	ja     29e12 <__dtoa+0xbb2>
   29de7:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
   29dec:	66 0f 2e 45 b8       	ucomisd -0x48(%rbp),%xmm0
   29df1:	0f 8a 86 00 00 00    	jp     29e7d <__dtoa+0xc1d>
   29df7:	66 0f 2e 45 b8       	ucomisd -0x48(%rbp),%xmm0
   29dfc:	74 02                	je     29e00 <__dtoa+0xba0>
							*s = '0';
							break;
							}
					++*s++;
					}
				break;
   29dfe:	eb 7d                	jmp    29e7d <__dtoa+0xc1d>
				if (dval(&d) > ds || (dval(&d) == ds && L & 1))
   29e00:	8b 45 90             	mov    -0x70(%rbp),%eax
   29e03:	83 e0 01             	and    $0x1,%eax
   29e06:	85 c0                	test   %eax,%eax
   29e08:	74 73                	je     29e7d <__dtoa+0xc1d>
 bump_up:
   29e0a:	eb 06                	jmp    29e12 <__dtoa+0xbb2>
					goto bump_up;
   29e0c:	90                   	nop
   29e0d:	eb 20                	jmp    29e2f <__dtoa+0xbcf>
						goto bump_up;
   29e0f:	90                   	nop
   29e10:	eb 1d                	jmp    29e2f <__dtoa+0xbcf>
 bump_up:
   29e12:	90                   	nop
					while(*--s == '9')
   29e13:	eb 1a                	jmp    29e2f <__dtoa+0xbcf>
						if (s == s0) {
   29e15:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   29e19:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   29e1d:	75 10                	jne    29e2f <__dtoa+0xbcf>
							k++;
   29e1f:	83 85 5c ff ff ff 01 	addl   $0x1,-0xa4(%rbp)
							*s = '0';
   29e26:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   29e2a:	c6 00 30             	movb   $0x30,(%rax)
							break;
   29e2d:	eb 10                	jmp    29e3f <__dtoa+0xbdf>
					while(*--s == '9')
   29e2f:	48 83 6d c0 01       	subq   $0x1,-0x40(%rbp)
   29e34:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   29e38:	0f b6 00             	movzbl (%rax),%eax
   29e3b:	3c 39                	cmp    $0x39,%al
   29e3d:	74 d6                	je     29e15 <__dtoa+0xbb5>
					++*s++;
   29e3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   29e43:	48 8d 50 01          	lea    0x1(%rax),%rdx
   29e47:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   29e4b:	0f b6 10             	movzbl (%rax),%edx
   29e4e:	83 c2 01             	add    $0x1,%edx
   29e51:	88 10                	mov    %dl,(%rax)
				break;
   29e53:	eb 28                	jmp    29e7d <__dtoa+0xc1d>
		for(i = 1;; i++, dval(&d) *= 10.) {
   29e55:	83 85 48 ff ff ff 01 	addl   $0x1,-0xb8(%rbp)
   29e5c:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
   29e61:	f2 0f 10 05 ff 6e 00 	movsd  0x6eff(%rip),%xmm0        # 30d68 <xdigs_upper.3164+0x48>
   29e68:	00 
   29e69:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   29e6d:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
			L = (Long)(dval(&d) / ds);
   29e72:	e9 e4 fe ff ff       	jmpq   29d5b <__dtoa+0xafb>
				break;
   29e77:	90                   	nop
   29e78:	e9 42 0a 00 00       	jmpq   2a8bf <__dtoa+0x165f>
				break;
   29e7d:	90                   	nop
				}
			}
		goto ret1;
   29e7e:	e9 3c 0a 00 00       	jmpq   2a8bf <__dtoa+0x165f>
		}

	m2 = b2;
   29e83:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
   29e89:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
	m5 = b5;
   29e8f:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
   29e95:	89 45 94             	mov    %eax,-0x6c(%rbp)
	mhi = mlo = 0;
   29e98:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
   29e9f:	00 
   29ea0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   29ea4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	if (leftright) {
   29ea8:	83 bd 64 ff ff ff 00 	cmpl   $0x0,-0x9c(%rbp)
   29eaf:	74 62                	je     29f13 <__dtoa+0xcb3>
		i =
#ifndef Sudden_Underflow
			denorm ? be + (Bias + (P-1) - 1 + 1) :
   29eb1:	83 bd 7c ff ff ff 00 	cmpl   $0x0,-0x84(%rbp)
   29eb8:	74 0d                	je     29ec7 <__dtoa+0xc67>
   29eba:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax
   29ec0:	05 33 04 00 00       	add    $0x433,%eax
   29ec5:	eb 0f                	jmp    29ed6 <__dtoa+0xc76>
#endif
#ifdef IBM
			1 + 4*P - 3 - bbits + ((bbits + be - 1) & 3);
#else
			1 + P - bbits;
   29ec7:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
			denorm ? be + (Bias + (P-1) - 1 + 1) :
   29ecd:	ba 36 00 00 00       	mov    $0x36,%edx
   29ed2:	29 c2                	sub    %eax,%edx
   29ed4:	89 d0                	mov    %edx,%eax
		i =
   29ed6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
#endif
		b2 += i;
   29edc:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29ee2:	01 85 3c ff ff ff    	add    %eax,-0xc4(%rbp)
		s2 += i;
   29ee8:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29eee:	01 85 6c ff ff ff    	add    %eax,-0x94(%rbp)
		mhi = i2b(1);
   29ef4:	bf 01 00 00 00       	mov    $0x1,%edi
   29ef9:	e8 74 1e 00 00       	callq  2bd72 <__i2b_D2A>
   29efe:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		if (mhi == NULL)
   29f02:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   29f07:	75 0a                	jne    29f13 <__dtoa+0xcb3>
			return (NULL);
   29f09:	b8 00 00 00 00       	mov    $0x0,%eax
   29f0e:	e9 ed 09 00 00       	jmpq   2a900 <__dtoa+0x16a0>
		}
	if (m2 > 0 && s2 > 0) {
   29f13:	83 bd 68 ff ff ff 00 	cmpl   $0x0,-0x98(%rbp)
   29f1a:	7e 46                	jle    29f62 <__dtoa+0xd02>
   29f1c:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%rbp)
   29f23:	7e 3d                	jle    29f62 <__dtoa+0xd02>
		i = m2 < s2 ? m2 : s2;
   29f25:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
   29f2b:	39 85 6c ff ff ff    	cmp    %eax,-0x94(%rbp)
   29f31:	0f 4e 85 6c ff ff ff 	cmovle -0x94(%rbp),%eax
   29f38:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
		b2 -= i;
   29f3e:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29f44:	29 85 3c ff ff ff    	sub    %eax,-0xc4(%rbp)
		m2 -= i;
   29f4a:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29f50:	29 85 68 ff ff ff    	sub    %eax,-0x98(%rbp)
		s2 -= i;
   29f56:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   29f5c:	29 85 6c ff ff ff    	sub    %eax,-0x94(%rbp)
		}
	if (b5 > 0) {
   29f62:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)
   29f69:	0f 8e df 00 00 00    	jle    2a04e <__dtoa+0xdee>
		if (leftright) {
   29f6f:	83 bd 64 ff ff ff 00 	cmpl   $0x0,-0x9c(%rbp)
   29f76:	0f 84 a9 00 00 00    	je     2a025 <__dtoa+0xdc5>
			if (m5 > 0) {
   29f7c:	83 7d 94 00          	cmpl   $0x0,-0x6c(%rbp)
   29f80:	7e 62                	jle    29fe4 <__dtoa+0xd84>
				mhi = pow5mult(mhi, m5);
   29f82:	8b 55 94             	mov    -0x6c(%rbp),%edx
   29f85:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   29f89:	89 d6                	mov    %edx,%esi
   29f8b:	48 89 c7             	mov    %rax,%rdi
   29f8e:	e8 3f 21 00 00       	callq  2c0d2 <__pow5mult_D2A>
   29f93:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
				if (mhi == NULL)
   29f97:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   29f9c:	75 0a                	jne    29fa8 <__dtoa+0xd48>
					return (NULL);
   29f9e:	b8 00 00 00 00       	mov    $0x0,%eax
   29fa3:	e9 58 09 00 00       	jmpq   2a900 <__dtoa+0x16a0>
				b1 = mult(mhi, b);
   29fa8:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   29fac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   29fb0:	48 89 d6             	mov    %rdx,%rsi
   29fb3:	48 89 c7             	mov    %rax,%rdi
   29fb6:	e8 f9 1d 00 00       	callq  2bdb4 <__mult_D2A>
   29fbb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				if (b1 == NULL)
   29fbf:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   29fc4:	75 0a                	jne    29fd0 <__dtoa+0xd70>
					return (NULL);
   29fc6:	b8 00 00 00 00       	mov    $0x0,%eax
   29fcb:	e9 30 09 00 00       	jmpq   2a900 <__dtoa+0x16a0>
				Bfree(b);
   29fd0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   29fd4:	48 89 c7             	mov    %rax,%rdi
   29fd7:	e8 5f 1a 00 00       	callq  2ba3b <__Bfree_D2A>
				b = b1;
   29fdc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   29fe0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				}
			if (( j = b5 - m5 )!=0) {
   29fe4:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
   29fea:	2b 45 94             	sub    -0x6c(%rbp),%eax
   29fed:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
   29ff3:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   29ffa:	74 52                	je     2a04e <__dtoa+0xdee>
				b = pow5mult(b, j);
   29ffc:	8b 95 58 ff ff ff    	mov    -0xa8(%rbp),%edx
   2a002:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a006:	89 d6                	mov    %edx,%esi
   2a008:	48 89 c7             	mov    %rax,%rdi
   2a00b:	e8 c2 20 00 00       	callq  2c0d2 <__pow5mult_D2A>
   2a010:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				if (b == NULL)
   2a014:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2a019:	75 33                	jne    2a04e <__dtoa+0xdee>
					return (NULL);
   2a01b:	b8 00 00 00 00       	mov    $0x0,%eax
   2a020:	e9 db 08 00 00       	jmpq   2a900 <__dtoa+0x16a0>
				}
			}
		else {
			b = pow5mult(b, b5);
   2a025:	8b 95 40 ff ff ff    	mov    -0xc0(%rbp),%edx
   2a02b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a02f:	89 d6                	mov    %edx,%esi
   2a031:	48 89 c7             	mov    %rax,%rdi
   2a034:	e8 99 20 00 00       	callq  2c0d2 <__pow5mult_D2A>
   2a039:	48 89 45 98          	mov    %rax,-0x68(%rbp)
			if (b == NULL)
   2a03d:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2a042:	75 0a                	jne    2a04e <__dtoa+0xdee>
				return (NULL);
   2a044:	b8 00 00 00 00       	mov    $0x0,%eax
   2a049:	e9 b2 08 00 00       	jmpq   2a900 <__dtoa+0x16a0>
			}
		}
	S = i2b(1);
   2a04e:	bf 01 00 00 00       	mov    $0x1,%edi
   2a053:	e8 1a 1d 00 00       	callq  2bd72 <__i2b_D2A>
   2a058:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	if (S == NULL)
   2a05c:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
   2a061:	75 0a                	jne    2a06d <__dtoa+0xe0d>
		return (NULL);
   2a063:	b8 00 00 00 00       	mov    $0x0,%eax
   2a068:	e9 93 08 00 00       	jmpq   2a900 <__dtoa+0x16a0>
	if (s5 > 0) {
   2a06d:	83 bd 70 ff ff ff 00 	cmpl   $0x0,-0x90(%rbp)
   2a074:	7e 29                	jle    2a09f <__dtoa+0xe3f>
		S = pow5mult(S, s5);
   2a076:	8b 95 70 ff ff ff    	mov    -0x90(%rbp),%edx
   2a07c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2a080:	89 d6                	mov    %edx,%esi
   2a082:	48 89 c7             	mov    %rax,%rdi
   2a085:	e8 48 20 00 00       	callq  2c0d2 <__pow5mult_D2A>
   2a08a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		if (S == NULL)
   2a08e:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
   2a093:	75 0a                	jne    2a09f <__dtoa+0xe3f>
			return (NULL);
   2a095:	b8 00 00 00 00       	mov    $0x0,%eax
   2a09a:	e9 61 08 00 00       	jmpq   2a900 <__dtoa+0x16a0>
		}

	/* Check for special case that d is a normalized power of 2. */

	spec_case = 0;
   2a09f:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
   2a0a6:	00 00 00 
	if ((mode < 2 || leftright)
   2a0a9:	83 bd 24 ff ff ff 01 	cmpl   $0x1,-0xdc(%rbp)
   2a0b0:	7e 09                	jle    2a0bb <__dtoa+0xe5b>
   2a0b2:	83 bd 64 ff ff ff 00 	cmpl   $0x0,-0x9c(%rbp)
   2a0b9:	74 37                	je     2a0f2 <__dtoa+0xe92>
#ifdef Honor_FLT_ROUNDS
			&& Rounding == 1
#endif
				) {
		if (!word1(&d) && !(word0(&d) & Bndry_mask)
   2a0bb:	8b 45 e0             	mov    -0x20(%rbp),%eax
   2a0be:	85 c0                	test   %eax,%eax
   2a0c0:	75 30                	jne    2a0f2 <__dtoa+0xe92>
   2a0c2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2a0c5:	25 ff ff 0f 00       	and    $0xfffff,%eax
   2a0ca:	85 c0                	test   %eax,%eax
   2a0cc:	75 24                	jne    2a0f2 <__dtoa+0xe92>
#ifndef Sudden_Underflow
		 && word0(&d) & (Exp_mask & ~Exp_msk1)
   2a0ce:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2a0d1:	25 00 00 e0 7f       	and    $0x7fe00000,%eax
   2a0d6:	85 c0                	test   %eax,%eax
   2a0d8:	74 18                	je     2a0f2 <__dtoa+0xe92>
#endif
				) {
			/* The special case */
			b2 += Log2P;
   2a0da:	83 85 3c ff ff ff 01 	addl   $0x1,-0xc4(%rbp)
			s2 += Log2P;
   2a0e1:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
			spec_case = 1;
   2a0e8:	c7 85 74 ff ff ff 01 	movl   $0x1,-0x8c(%rbp)
   2a0ef:	00 00 00 
	 * Perhaps we should just compute leading 28 bits of S once
	 * and for all and pass them and a shift to quorem, so it
	 * can do shifts and ors to compute the numerator for q.
	 */
#ifdef Pack_32
	if (( i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f )!=0)
   2a0f2:	83 bd 70 ff ff ff 00 	cmpl   $0x0,-0x90(%rbp)
   2a0f9:	74 29                	je     2a124 <__dtoa+0xec4>
   2a0fb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2a0ff:	8b 40 14             	mov    0x14(%rax),%eax
   2a102:	8d 50 ff             	lea    -0x1(%rax),%edx
   2a105:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2a109:	48 63 d2             	movslq %edx,%rdx
   2a10c:	48 83 c2 04          	add    $0x4,%rdx
   2a110:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
   2a114:	89 c7                	mov    %eax,%edi
   2a116:	e8 d4 1b 00 00       	callq  2bcef <__hi0bits_D2A>
   2a11b:	ba 20 00 00 00       	mov    $0x20,%edx
   2a120:	29 c2                	sub    %eax,%edx
   2a122:	eb 05                	jmp    2a129 <__dtoa+0xec9>
   2a124:	ba 01 00 00 00       	mov    $0x1,%edx
   2a129:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
   2a12f:	01 d0                	add    %edx,%eax
   2a131:	83 e0 1f             	and    $0x1f,%eax
   2a134:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
   2a13a:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2a141:	74 11                	je     2a154 <__dtoa+0xef4>
		i = 32 - i;
   2a143:	b8 20 00 00 00       	mov    $0x20,%eax
   2a148:	2b 85 48 ff ff ff    	sub    -0xb8(%rbp),%eax
   2a14e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
#else
	if (( i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0xf )!=0)
		i = 16 - i;
#endif
	if (i > 4) {
   2a154:	83 bd 48 ff ff ff 04 	cmpl   $0x4,-0xb8(%rbp)
   2a15b:	7e 2d                	jle    2a18a <__dtoa+0xf2a>
		i -= 4;
   2a15d:	83 ad 48 ff ff ff 04 	subl   $0x4,-0xb8(%rbp)
		b2 += i;
   2a164:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2a16a:	01 85 3c ff ff ff    	add    %eax,-0xc4(%rbp)
		m2 += i;
   2a170:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2a176:	01 85 68 ff ff ff    	add    %eax,-0x98(%rbp)
		s2 += i;
   2a17c:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2a182:	01 85 6c ff ff ff    	add    %eax,-0x94(%rbp)
   2a188:	eb 34                	jmp    2a1be <__dtoa+0xf5e>
		}
	else if (i < 4) {
   2a18a:	83 bd 48 ff ff ff 03 	cmpl   $0x3,-0xb8(%rbp)
   2a191:	7f 2b                	jg     2a1be <__dtoa+0xf5e>
		i += 28;
   2a193:	83 85 48 ff ff ff 1c 	addl   $0x1c,-0xb8(%rbp)
		b2 += i;
   2a19a:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2a1a0:	01 85 3c ff ff ff    	add    %eax,-0xc4(%rbp)
		m2 += i;
   2a1a6:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2a1ac:	01 85 68 ff ff ff    	add    %eax,-0x98(%rbp)
		s2 += i;
   2a1b2:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2a1b8:	01 85 6c ff ff ff    	add    %eax,-0x94(%rbp)
		}
	if (b2 > 0) {
   2a1be:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)
   2a1c5:	7e 29                	jle    2a1f0 <__dtoa+0xf90>
		b = lshift(b, b2);
   2a1c7:	8b 95 3c ff ff ff    	mov    -0xc4(%rbp),%edx
   2a1cd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a1d1:	89 d6                	mov    %edx,%esi
   2a1d3:	48 89 c7             	mov    %rax,%rdi
   2a1d6:	e8 c2 20 00 00       	callq  2c29d <__lshift_D2A>
   2a1db:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		if (b == NULL)
   2a1df:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2a1e4:	75 0a                	jne    2a1f0 <__dtoa+0xf90>
			return (NULL);
   2a1e6:	b8 00 00 00 00       	mov    $0x0,%eax
   2a1eb:	e9 10 07 00 00       	jmpq   2a900 <__dtoa+0x16a0>
		}
	if (s2 > 0) {
   2a1f0:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%rbp)
   2a1f7:	7e 29                	jle    2a222 <__dtoa+0xfc2>
		S = lshift(S, s2);
   2a1f9:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
   2a1ff:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2a203:	89 d6                	mov    %edx,%esi
   2a205:	48 89 c7             	mov    %rax,%rdi
   2a208:	e8 90 20 00 00       	callq  2c29d <__lshift_D2A>
   2a20d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		if (S == NULL)
   2a211:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
   2a216:	75 0a                	jne    2a222 <__dtoa+0xfc2>
			return (NULL);
   2a218:	b8 00 00 00 00       	mov    $0x0,%eax
   2a21d:	e9 de 06 00 00       	jmpq   2a900 <__dtoa+0x16a0>
		}
	if (k_check) {
   2a222:	83 bd 60 ff ff ff 00 	cmpl   $0x0,-0xa0(%rbp)
   2a229:	0f 84 89 00 00 00    	je     2a2b8 <__dtoa+0x1058>
		if (cmp(b,S) < 0) {
   2a22f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   2a233:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a237:	48 89 d6             	mov    %rdx,%rsi
   2a23a:	48 89 c7             	mov    %rax,%rdi
   2a23d:	e8 e4 21 00 00       	callq  2c426 <__cmp_D2A>
   2a242:	85 c0                	test   %eax,%eax
   2a244:	79 72                	jns    2a2b8 <__dtoa+0x1058>
			k--;
   2a246:	83 ad 5c ff ff ff 01 	subl   $0x1,-0xa4(%rbp)
			b = multadd(b, 10, 0);	/* we botched the k estimate */
   2a24d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a251:	ba 00 00 00 00       	mov    $0x0,%edx
   2a256:	be 0a 00 00 00       	mov    $0xa,%esi
   2a25b:	48 89 c7             	mov    %rax,%rdi
   2a25e:	e8 46 19 00 00       	callq  2bba9 <__multadd_D2A>
   2a263:	48 89 45 98          	mov    %rax,-0x68(%rbp)
			if (b == NULL)
   2a267:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2a26c:	75 0a                	jne    2a278 <__dtoa+0x1018>
				return (NULL);
   2a26e:	b8 00 00 00 00       	mov    $0x0,%eax
   2a273:	e9 88 06 00 00       	jmpq   2a900 <__dtoa+0x16a0>
			if (leftright) {
   2a278:	83 bd 64 ff ff ff 00 	cmpl   $0x0,-0x9c(%rbp)
   2a27f:	74 2b                	je     2a2ac <__dtoa+0x104c>
				mhi = multadd(mhi, 10, 0);
   2a281:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a285:	ba 00 00 00 00       	mov    $0x0,%edx
   2a28a:	be 0a 00 00 00       	mov    $0xa,%esi
   2a28f:	48 89 c7             	mov    %rax,%rdi
   2a292:	e8 12 19 00 00       	callq  2bba9 <__multadd_D2A>
   2a297:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
				if (mhi == NULL)
   2a29b:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   2a2a0:	75 0a                	jne    2a2ac <__dtoa+0x104c>
					return (NULL);
   2a2a2:	b8 00 00 00 00       	mov    $0x0,%eax
   2a2a7:	e9 54 06 00 00       	jmpq   2a900 <__dtoa+0x16a0>
				}
			ilim = ilim1;
   2a2ac:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
   2a2b2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
			}
		}
	if (ilim <= 0 && (mode == 3 || mode == 5)) {
   2a2b8:	83 bd 50 ff ff ff 00 	cmpl   $0x0,-0xb0(%rbp)
   2a2bf:	0f 8f 99 00 00 00    	jg     2a35e <__dtoa+0x10fe>
   2a2c5:	83 bd 24 ff ff ff 03 	cmpl   $0x3,-0xdc(%rbp)
   2a2cc:	74 0d                	je     2a2db <__dtoa+0x107b>
   2a2ce:	83 bd 24 ff ff ff 05 	cmpl   $0x5,-0xdc(%rbp)
   2a2d5:	0f 85 83 00 00 00    	jne    2a35e <__dtoa+0x10fe>
		S = multadd(S,5,0);
   2a2db:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2a2df:	ba 00 00 00 00       	mov    $0x0,%edx
   2a2e4:	be 05 00 00 00       	mov    $0x5,%esi
   2a2e9:	48 89 c7             	mov    %rax,%rdi
   2a2ec:	e8 b8 18 00 00       	callq  2bba9 <__multadd_D2A>
   2a2f1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		if (S == NULL)
   2a2f5:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
   2a2fa:	75 0a                	jne    2a306 <__dtoa+0x10a6>
			return (NULL);
   2a2fc:	b8 00 00 00 00       	mov    $0x0,%eax
   2a301:	e9 fa 05 00 00       	jmpq   2a900 <__dtoa+0x16a0>
		if (ilim < 0 || cmp(b,S) <= 0) {
   2a306:	83 bd 50 ff ff ff 00 	cmpl   $0x0,-0xb0(%rbp)
   2a30d:	78 1c                	js     2a32b <__dtoa+0x10cb>
   2a30f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   2a313:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a317:	48 89 d6             	mov    %rdx,%rsi
   2a31a:	48 89 c7             	mov    %rax,%rdi
   2a31d:	e8 04 21 00 00       	callq  2c426 <__cmp_D2A>
   2a322:	85 c0                	test   %eax,%eax
   2a324:	7f 1c                	jg     2a342 <__dtoa+0x10e2>
			/* no digits, fcvt style */
 no_digits:
   2a326:	eb 03                	jmp    2a32b <__dtoa+0x10cb>
				goto no_digits;
   2a328:	90                   	nop
   2a329:	eb 01                	jmp    2a32c <__dtoa+0x10cc>
 no_digits:
   2a32b:	90                   	nop
			k = -1 - ndigits;
   2a32c:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
   2a332:	f7 d0                	not    %eax
   2a334:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
			goto ret;
   2a33a:	e9 3e 05 00 00       	jmpq   2a87d <__dtoa+0x161d>
				goto one_digit;
   2a33f:	90                   	nop
   2a340:	eb 01                	jmp    2a343 <__dtoa+0x10e3>
			}
 one_digit:
   2a342:	90                   	nop
		*s++ = '1';
   2a343:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a347:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a34b:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2a34f:	c6 00 31             	movb   $0x31,(%rax)
		k++;
   2a352:	83 85 5c ff ff ff 01 	addl   $0x1,-0xa4(%rbp)
		goto ret;
   2a359:	e9 1f 05 00 00       	jmpq   2a87d <__dtoa+0x161d>
		}
	if (leftright) {
   2a35e:	83 bd 64 ff ff ff 00 	cmpl   $0x0,-0x9c(%rbp)
   2a365:	0f 84 b3 03 00 00    	je     2a71e <__dtoa+0x14be>
		if (m2 > 0) {
   2a36b:	83 bd 68 ff ff ff 00 	cmpl   $0x0,-0x98(%rbp)
   2a372:	7e 29                	jle    2a39d <__dtoa+0x113d>
			mhi = lshift(mhi, m2);
   2a374:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
   2a37a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a37e:	89 d6                	mov    %edx,%esi
   2a380:	48 89 c7             	mov    %rax,%rdi
   2a383:	e8 15 1f 00 00       	callq  2c29d <__lshift_D2A>
   2a388:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if (mhi == NULL)
   2a38c:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   2a391:	75 0a                	jne    2a39d <__dtoa+0x113d>
				return (NULL);
   2a393:	b8 00 00 00 00       	mov    $0x0,%eax
   2a398:	e9 63 05 00 00       	jmpq   2a900 <__dtoa+0x16a0>

		/* Compute mlo -- check for special case
		 * that d is a normalized power of 2.
		 */

		mlo = mhi;
   2a39d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a3a1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		if (spec_case) {
   2a3a5:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%rbp)
   2a3ac:	74 79                	je     2a427 <__dtoa+0x11c7>
			mhi = Balloc(mhi->k);
   2a3ae:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a3b2:	8b 40 08             	mov    0x8(%rax),%eax
   2a3b5:	89 c7                	mov    %eax,%edi
   2a3b7:	e8 38 15 00 00       	callq  2b8f4 <__Balloc_D2A>
   2a3bc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if (mhi == NULL)
   2a3c0:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   2a3c5:	75 0a                	jne    2a3d1 <__dtoa+0x1171>
				return (NULL);
   2a3c7:	b8 00 00 00 00       	mov    $0x0,%eax
   2a3cc:	e9 2f 05 00 00       	jmpq   2a900 <__dtoa+0x16a0>
			Bcopy(mhi, mlo);
   2a3d1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2a3d5:	8b 40 14             	mov    0x14(%rax),%eax
   2a3d8:	48 98                	cltq   
   2a3da:	48 83 c0 02          	add    $0x2,%rax
   2a3de:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2a3e5:	00 
   2a3e6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2a3ea:	48 8d 48 10          	lea    0x10(%rax),%rcx
   2a3ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a3f2:	48 83 c0 10          	add    $0x10,%rax
   2a3f6:	48 89 ce             	mov    %rcx,%rsi
   2a3f9:	48 89 c7             	mov    %rax,%rdi
   2a3fc:	e8 e9 43 fe ff       	callq  e7ea <memcpy>
			mhi = lshift(mhi, Log2P);
   2a401:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a405:	be 01 00 00 00       	mov    $0x1,%esi
   2a40a:	48 89 c7             	mov    %rax,%rdi
   2a40d:	e8 8b 1e 00 00       	callq  2c29d <__lshift_D2A>
   2a412:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if (mhi == NULL)
   2a416:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   2a41b:	75 0a                	jne    2a427 <__dtoa+0x11c7>
				return (NULL);
   2a41d:	b8 00 00 00 00       	mov    $0x0,%eax
   2a422:	e9 d9 04 00 00       	jmpq   2a900 <__dtoa+0x16a0>
			}

		for(i = 1;;i++) {
   2a427:	c7 85 48 ff ff ff 01 	movl   $0x1,-0xb8(%rbp)
   2a42e:	00 00 00 
			dig = quorem(b,S) + '0';
   2a431:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   2a435:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a439:	48 89 d6             	mov    %rdx,%rsi
   2a43c:	48 89 c7             	mov    %rax,%rdi
   2a43f:	e8 1f eb ff ff       	callq  28f63 <__quorem_D2A>
   2a444:	83 c0 30             	add    $0x30,%eax
   2a447:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
			/* Do we yet have the shortest decimal string
			 * that will round to d?
			 */
			j = cmp(b, mlo);
   2a44d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   2a451:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a455:	48 89 d6             	mov    %rdx,%rsi
   2a458:	48 89 c7             	mov    %rax,%rdi
   2a45b:	e8 c6 1f 00 00       	callq  2c426 <__cmp_D2A>
   2a460:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
			delta = diff(S, mhi);
   2a466:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2a46a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2a46e:	48 89 d6             	mov    %rdx,%rsi
   2a471:	48 89 c7             	mov    %rax,%rdi
   2a474:	e8 7d 20 00 00       	callq  2c4f6 <__diff_D2A>
   2a479:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
			if (delta == NULL)
   2a47d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   2a482:	75 0a                	jne    2a48e <__dtoa+0x122e>
				return (NULL);
   2a484:	b8 00 00 00 00       	mov    $0x0,%eax
   2a489:	e9 72 04 00 00       	jmpq   2a900 <__dtoa+0x16a0>
			j1 = delta->sign ? 1 : cmp(b, delta);
   2a48e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2a492:	8b 40 10             	mov    0x10(%rax),%eax
   2a495:	85 c0                	test   %eax,%eax
   2a497:	75 15                	jne    2a4ae <__dtoa+0x124e>
   2a499:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   2a49d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a4a1:	48 89 d6             	mov    %rdx,%rsi
   2a4a4:	48 89 c7             	mov    %rax,%rdi
   2a4a7:	e8 7a 1f 00 00       	callq  2c426 <__cmp_D2A>
   2a4ac:	eb 05                	jmp    2a4b3 <__dtoa+0x1253>
   2a4ae:	b8 01 00 00 00       	mov    $0x1,%eax
   2a4b3:	89 45 8c             	mov    %eax,-0x74(%rbp)
			Bfree(delta);
   2a4b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2a4ba:	48 89 c7             	mov    %rax,%rdi
   2a4bd:	e8 79 15 00 00       	callq  2ba3b <__Bfree_D2A>
#ifndef ROUND_BIASED
			if (j1 == 0 && mode != 1 && !(word1(&d) & 1)
   2a4c2:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
   2a4c6:	75 49                	jne    2a511 <__dtoa+0x12b1>
   2a4c8:	83 bd 24 ff ff ff 01 	cmpl   $0x1,-0xdc(%rbp)
   2a4cf:	74 40                	je     2a511 <__dtoa+0x12b1>
   2a4d1:	8b 45 e0             	mov    -0x20(%rbp),%eax
   2a4d4:	83 e0 01             	and    $0x1,%eax
   2a4d7:	85 c0                	test   %eax,%eax
   2a4d9:	75 36                	jne    2a511 <__dtoa+0x12b1>
#ifdef Honor_FLT_ROUNDS
				&& Rounding >= 1
#endif
								   ) {
				if (dig == '9')
   2a4db:	83 bd 44 ff ff ff 39 	cmpl   $0x39,-0xbc(%rbp)
   2a4e2:	0f 84 10 01 00 00    	je     2a5f8 <__dtoa+0x1398>
					goto round_9_up;
				if (j > 0)
   2a4e8:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   2a4ef:	7e 07                	jle    2a4f8 <__dtoa+0x1298>
					dig++;
   2a4f1:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
#ifdef SET_INEXACT
				else if (!b->x[0] && b->wds <= 1)
					inexact = 0;
#endif
				*s++ = dig;
   2a4f8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a4fc:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a500:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2a504:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
   2a50a:	88 10                	mov    %dl,(%rax)
				goto ret;
   2a50c:	e9 6c 03 00 00       	jmpq   2a87d <__dtoa+0x161d>
				}
#endif
			if (j < 0 || (j == 0 && mode != 1
   2a511:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   2a518:	78 28                	js     2a542 <__dtoa+0x12e2>
   2a51a:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   2a521:	0f 85 c0 00 00 00    	jne    2a5e7 <__dtoa+0x1387>
   2a527:	83 bd 24 ff ff ff 01 	cmpl   $0x1,-0xdc(%rbp)
   2a52e:	0f 84 b3 00 00 00    	je     2a5e7 <__dtoa+0x1387>
#ifndef ROUND_BIASED
							&& !(word1(&d) & 1)
   2a534:	8b 45 e0             	mov    -0x20(%rbp),%eax
   2a537:	83 e0 01             	and    $0x1,%eax
   2a53a:	85 c0                	test   %eax,%eax
   2a53c:	0f 85 a5 00 00 00    	jne    2a5e7 <__dtoa+0x1387>
#endif
					)) {
				if (!b->x[0] && b->wds <= 1) {
   2a542:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a546:	8b 40 18             	mov    0x18(%rax),%eax
   2a549:	85 c0                	test   %eax,%eax
   2a54b:	75 0c                	jne    2a559 <__dtoa+0x12f9>
   2a54d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a551:	8b 40 14             	mov    0x14(%rax),%eax
   2a554:	83 f8 01             	cmp    $0x1,%eax
   2a557:	7e 71                	jle    2a5ca <__dtoa+0x136a>
				 switch(Rounding) {
				  case 0: goto accept_dig;
				  case 2: goto keep_dig;
				  }
#endif /*Honor_FLT_ROUNDS*/
				if (j1 > 0) {
   2a559:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
   2a55d:	7e 6e                	jle    2a5cd <__dtoa+0x136d>
					b = lshift(b, 1);
   2a55f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a563:	be 01 00 00 00       	mov    $0x1,%esi
   2a568:	48 89 c7             	mov    %rax,%rdi
   2a56b:	e8 2d 1d 00 00       	callq  2c29d <__lshift_D2A>
   2a570:	48 89 45 98          	mov    %rax,-0x68(%rbp)
					if (b == NULL)
   2a574:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2a579:	75 0a                	jne    2a585 <__dtoa+0x1325>
						return (NULL);
   2a57b:	b8 00 00 00 00       	mov    $0x0,%eax
   2a580:	e9 7b 03 00 00       	jmpq   2a900 <__dtoa+0x16a0>
					j1 = cmp(b, S);
   2a585:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   2a589:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a58d:	48 89 d6             	mov    %rdx,%rsi
   2a590:	48 89 c7             	mov    %rax,%rdi
   2a593:	e8 8e 1e 00 00       	callq  2c426 <__cmp_D2A>
   2a598:	89 45 8c             	mov    %eax,-0x74(%rbp)
#ifdef ROUND_BIASED
					if (j1 >= 0 /*)*/
#else
					if ((j1 > 0 || (j1 == 0 && dig & 1))
   2a59b:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
   2a59f:	7f 13                	jg     2a5b4 <__dtoa+0x1354>
   2a5a1:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
   2a5a5:	75 26                	jne    2a5cd <__dtoa+0x136d>
   2a5a7:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
   2a5ad:	83 e0 01             	and    $0x1,%eax
   2a5b0:	85 c0                	test   %eax,%eax
   2a5b2:	74 19                	je     2a5cd <__dtoa+0x136d>
#endif
					&& dig++ == '9')
   2a5b4:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
   2a5ba:	8d 50 01             	lea    0x1(%rax),%edx
   2a5bd:	89 95 44 ff ff ff    	mov    %edx,-0xbc(%rbp)
   2a5c3:	83 f8 39             	cmp    $0x39,%eax
   2a5c6:	74 33                	je     2a5fb <__dtoa+0x139b>
						goto round_9_up;
					}
 accept_dig:
   2a5c8:	eb 03                	jmp    2a5cd <__dtoa+0x136d>
					goto accept_dig;
   2a5ca:	90                   	nop
   2a5cb:	eb 01                	jmp    2a5ce <__dtoa+0x136e>
 accept_dig:
   2a5cd:	90                   	nop
				*s++ = dig;
   2a5ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a5d2:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a5d6:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2a5da:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
   2a5e0:	88 10                	mov    %dl,(%rax)
				goto ret;
   2a5e2:	e9 96 02 00 00       	jmpq   2a87d <__dtoa+0x161d>
				}
			if (j1 > 0) {
   2a5e7:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
   2a5eb:	7e 41                	jle    2a62e <__dtoa+0x13ce>
#ifdef Honor_FLT_ROUNDS
				if (!Rounding)
					goto accept_dig;
#endif
				if (dig == '9') { /* possible if i == 1 */
   2a5ed:	83 bd 44 ff ff ff 39 	cmpl   $0x39,-0xbc(%rbp)
   2a5f4:	75 1a                	jne    2a610 <__dtoa+0x13b0>
 round_9_up:
   2a5f6:	eb 04                	jmp    2a5fc <__dtoa+0x139c>
					goto round_9_up;
   2a5f8:	90                   	nop
   2a5f9:	eb 01                	jmp    2a5fc <__dtoa+0x139c>
						goto round_9_up;
   2a5fb:	90                   	nop
					*s++ = '9';
   2a5fc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a600:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a604:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2a608:	c6 00 39             	movb   $0x39,(%rax)
					goto roundoff;
   2a60b:	e9 0b 02 00 00       	jmpq   2a81b <__dtoa+0x15bb>
					}
				*s++ = dig + 1;
   2a610:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
   2a616:	8d 48 01             	lea    0x1(%rax),%ecx
   2a619:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a61d:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a621:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2a625:	89 ca                	mov    %ecx,%edx
   2a627:	88 10                	mov    %dl,(%rax)
				goto ret;
   2a629:	e9 4f 02 00 00       	jmpq   2a87d <__dtoa+0x161d>
				}
#ifdef Honor_FLT_ROUNDS
 keep_dig:
#endif
			*s++ = dig;
   2a62e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a632:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a636:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2a63a:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
   2a640:	88 10                	mov    %dl,(%rax)
			if (i == ilim)
   2a642:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2a648:	3b 85 50 ff ff ff    	cmp    -0xb0(%rbp),%eax
   2a64e:	0f 84 64 01 00 00    	je     2a7b8 <__dtoa+0x1558>
				break;
			b = multadd(b, 10, 0);
   2a654:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a658:	ba 00 00 00 00       	mov    $0x0,%edx
   2a65d:	be 0a 00 00 00       	mov    $0xa,%esi
   2a662:	48 89 c7             	mov    %rax,%rdi
   2a665:	e8 3f 15 00 00       	callq  2bba9 <__multadd_D2A>
   2a66a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
			if (b == NULL)
   2a66e:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2a673:	75 0a                	jne    2a67f <__dtoa+0x141f>
				return (NULL);
   2a675:	b8 00 00 00 00       	mov    $0x0,%eax
   2a67a:	e9 81 02 00 00       	jmpq   2a900 <__dtoa+0x16a0>
			if (mlo == mhi) {
   2a67f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2a683:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
   2a687:	75 33                	jne    2a6bc <__dtoa+0x145c>
				mlo = mhi = multadd(mhi, 10, 0);
   2a689:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a68d:	ba 00 00 00 00       	mov    $0x0,%edx
   2a692:	be 0a 00 00 00       	mov    $0xa,%esi
   2a697:	48 89 c7             	mov    %rax,%rdi
   2a69a:	e8 0a 15 00 00       	callq  2bba9 <__multadd_D2A>
   2a69f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2a6a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a6a7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
				if (mlo == NULL)
   2a6ab:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2a6b0:	75 60                	jne    2a712 <__dtoa+0x14b2>
					return (NULL);
   2a6b2:	b8 00 00 00 00       	mov    $0x0,%eax
   2a6b7:	e9 44 02 00 00       	jmpq   2a900 <__dtoa+0x16a0>
				}
			else {
				mlo = multadd(mlo, 10, 0);
   2a6bc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2a6c0:	ba 00 00 00 00       	mov    $0x0,%edx
   2a6c5:	be 0a 00 00 00       	mov    $0xa,%esi
   2a6ca:	48 89 c7             	mov    %rax,%rdi
   2a6cd:	e8 d7 14 00 00       	callq  2bba9 <__multadd_D2A>
   2a6d2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
				if (mlo == NULL)
   2a6d6:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2a6db:	75 0a                	jne    2a6e7 <__dtoa+0x1487>
					return (NULL);
   2a6dd:	b8 00 00 00 00       	mov    $0x0,%eax
   2a6e2:	e9 19 02 00 00       	jmpq   2a900 <__dtoa+0x16a0>
				mhi = multadd(mhi, 10, 0);
   2a6e7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a6eb:	ba 00 00 00 00       	mov    $0x0,%edx
   2a6f0:	be 0a 00 00 00       	mov    $0xa,%esi
   2a6f5:	48 89 c7             	mov    %rax,%rdi
   2a6f8:	e8 ac 14 00 00       	callq  2bba9 <__multadd_D2A>
   2a6fd:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
				if (mhi == NULL)
   2a701:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   2a706:	75 0a                	jne    2a712 <__dtoa+0x14b2>
					return (NULL);
   2a708:	b8 00 00 00 00       	mov    $0x0,%eax
   2a70d:	e9 ee 01 00 00       	jmpq   2a900 <__dtoa+0x16a0>
		for(i = 1;;i++) {
   2a712:	83 85 48 ff ff ff 01 	addl   $0x1,-0xb8(%rbp)
			dig = quorem(b,S) + '0';
   2a719:	e9 13 fd ff ff       	jmpq   2a431 <__dtoa+0x11d1>
				}
			}
		}
	else
		for(i = 1;; i++) {
   2a71e:	c7 85 48 ff ff ff 01 	movl   $0x1,-0xb8(%rbp)
   2a725:	00 00 00 
			*s++ = dig = quorem(b,S) + '0';
   2a728:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   2a72c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a730:	48 89 d6             	mov    %rdx,%rsi
   2a733:	48 89 c7             	mov    %rax,%rdi
   2a736:	e8 28 e8 ff ff       	callq  28f63 <__quorem_D2A>
   2a73b:	83 c0 30             	add    $0x30,%eax
   2a73e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
   2a744:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a748:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a74c:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2a750:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
   2a756:	88 10                	mov    %dl,(%rax)
			if (!b->x[0] && b->wds <= 1) {
   2a758:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a75c:	8b 40 18             	mov    0x18(%rax),%eax
   2a75f:	85 c0                	test   %eax,%eax
   2a761:	75 10                	jne    2a773 <__dtoa+0x1513>
   2a763:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a767:	8b 40 14             	mov    0x14(%rax),%eax
   2a76a:	83 f8 01             	cmp    $0x1,%eax
   2a76d:	0f 8e 09 01 00 00    	jle    2a87c <__dtoa+0x161c>
#ifdef SET_INEXACT
				inexact = 0;
#endif
				goto ret;
				}
			if (i >= ilim)
   2a773:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2a779:	3b 85 50 ff ff ff    	cmp    -0xb0(%rbp),%eax
   2a77f:	7d 3a                	jge    2a7bb <__dtoa+0x155b>
				break;
			b = multadd(b, 10, 0);
   2a781:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a785:	ba 00 00 00 00       	mov    $0x0,%edx
   2a78a:	be 0a 00 00 00       	mov    $0xa,%esi
   2a78f:	48 89 c7             	mov    %rax,%rdi
   2a792:	e8 12 14 00 00       	callq  2bba9 <__multadd_D2A>
   2a797:	48 89 45 98          	mov    %rax,-0x68(%rbp)
			if (b == NULL)
   2a79b:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2a7a0:	75 0a                	jne    2a7ac <__dtoa+0x154c>
				return (NULL);
   2a7a2:	b8 00 00 00 00       	mov    $0x0,%eax
   2a7a7:	e9 54 01 00 00       	jmpq   2a900 <__dtoa+0x16a0>
		for(i = 1;; i++) {
   2a7ac:	83 85 48 ff ff ff 01 	addl   $0x1,-0xb8(%rbp)
			*s++ = dig = quorem(b,S) + '0';
   2a7b3:	e9 70 ff ff ff       	jmpq   2a728 <__dtoa+0x14c8>
				break;
   2a7b8:	90                   	nop
   2a7b9:	eb 01                	jmp    2a7bc <__dtoa+0x155c>
				break;
   2a7bb:	90                   	nop
	switch(Rounding) {
	  case 0: goto trimzeros;
	  case 2: goto roundoff;
	  }
#endif
	b = lshift(b, 1);
   2a7bc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a7c0:	be 01 00 00 00       	mov    $0x1,%esi
   2a7c5:	48 89 c7             	mov    %rax,%rdi
   2a7c8:	e8 d0 1a 00 00       	callq  2c29d <__lshift_D2A>
   2a7cd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	if (b == NULL)
   2a7d1:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2a7d6:	75 0a                	jne    2a7e2 <__dtoa+0x1582>
		return (NULL);
   2a7d8:	b8 00 00 00 00       	mov    $0x0,%eax
   2a7dd:	e9 1e 01 00 00       	jmpq   2a900 <__dtoa+0x16a0>
	j = cmp(b, S);
   2a7e2:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
   2a7e6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a7ea:	48 89 d6             	mov    %rdx,%rsi
   2a7ed:	48 89 c7             	mov    %rax,%rdi
   2a7f0:	e8 31 1c 00 00       	callq  2c426 <__cmp_D2A>
   2a7f5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
#ifdef ROUND_BIASED
	if (j >= 0)
#else
	if (j > 0 || (j == 0 && dig & 1))
   2a7fb:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   2a802:	7f 16                	jg     2a81a <__dtoa+0x15ba>
   2a804:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   2a80b:	75 58                	jne    2a865 <__dtoa+0x1605>
   2a80d:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
   2a813:	83 e0 01             	and    $0x1,%eax
   2a816:	85 c0                	test   %eax,%eax
   2a818:	74 4b                	je     2a865 <__dtoa+0x1605>
#endif
		{
 roundoff:
   2a81a:	90                   	nop
		while(*--s == '9')
   2a81b:	eb 22                	jmp    2a83f <__dtoa+0x15df>
			if (s == s0) {
   2a81d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a821:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   2a825:	75 18                	jne    2a83f <__dtoa+0x15df>
				k++;
   2a827:	83 85 5c ff ff ff 01 	addl   $0x1,-0xa4(%rbp)
				*s++ = '1';
   2a82e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a832:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a836:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2a83a:	c6 00 31             	movb   $0x31,(%rax)
				goto ret;
   2a83d:	eb 3e                	jmp    2a87d <__dtoa+0x161d>
		while(*--s == '9')
   2a83f:	48 83 6d c0 01       	subq   $0x1,-0x40(%rbp)
   2a844:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a848:	0f b6 00             	movzbl (%rax),%eax
   2a84b:	3c 39                	cmp    $0x39,%al
   2a84d:	74 ce                	je     2a81d <__dtoa+0x15bd>
				}
		++*s++;
   2a84f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a853:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2a857:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2a85b:	0f b6 10             	movzbl (%rax),%edx
   2a85e:	83 c2 01             	add    $0x1,%edx
   2a861:	88 10                	mov    %dl,(%rax)
   2a863:	eb 18                	jmp    2a87d <__dtoa+0x161d>
		}
	else {
#ifdef Honor_FLT_ROUNDS
 trimzeros:
#endif
		while(*--s == '0');
   2a865:	48 83 6d c0 01       	subq   $0x1,-0x40(%rbp)
   2a86a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a86e:	0f b6 00             	movzbl (%rax),%eax
   2a871:	3c 30                	cmp    $0x30,%al
   2a873:	74 f0                	je     2a865 <__dtoa+0x1605>
		s++;
   2a875:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
   2a87a:	eb 01                	jmp    2a87d <__dtoa+0x161d>
				goto ret;
   2a87c:	90                   	nop
		}
 ret:
	Bfree(S);
   2a87d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2a881:	48 89 c7             	mov    %rax,%rdi
   2a884:	e8 b2 11 00 00       	callq  2ba3b <__Bfree_D2A>
	if (mhi) {
   2a889:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   2a88e:	74 2e                	je     2a8be <__dtoa+0x165e>
		if (mlo && mlo != mhi)
   2a890:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2a895:	74 16                	je     2a8ad <__dtoa+0x164d>
   2a897:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2a89b:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
   2a89f:	74 0c                	je     2a8ad <__dtoa+0x164d>
			Bfree(mlo);
   2a8a1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2a8a5:	48 89 c7             	mov    %rax,%rdi
   2a8a8:	e8 8e 11 00 00       	callq  2ba3b <__Bfree_D2A>
		Bfree(mhi);
   2a8ad:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a8b1:	48 89 c7             	mov    %rax,%rdi
   2a8b4:	e8 82 11 00 00       	callq  2ba3b <__Bfree_D2A>
   2a8b9:	eb 04                	jmp    2a8bf <__dtoa+0x165f>
					goto ret1;
   2a8bb:	90                   	nop
   2a8bc:	eb 01                	jmp    2a8bf <__dtoa+0x165f>
		}
 ret1:
   2a8be:	90                   	nop
			}
		}
	else if (!oldinexact)
		clear_inexact();
#endif
	Bfree(b);
   2a8bf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2a8c3:	48 89 c7             	mov    %rax,%rdi
   2a8c6:	e8 70 11 00 00       	callq  2ba3b <__Bfree_D2A>
	*s = 0;
   2a8cb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2a8cf:	c6 00 00             	movb   $0x0,(%rax)
	*decpt = k + 1;
   2a8d2:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   2a8d8:	8d 50 01             	lea    0x1(%rax),%edx
   2a8db:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   2a8e2:	89 10                	mov    %edx,(%rax)
	if (rve)
   2a8e4:	48 83 bd 08 ff ff ff 	cmpq   $0x0,-0xf8(%rbp)
   2a8eb:	00 
   2a8ec:	74 0e                	je     2a8fc <__dtoa+0x169c>
		*rve = s;
   2a8ee:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   2a8f5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   2a8f9:	48 89 10             	mov    %rdx,(%rax)
	return s0;
   2a8fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	}
   2a900:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   2a904:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   2a90b:	00 00 
   2a90d:	74 05                	je     2a914 <__dtoa+0x16b4>
   2a90f:	e8 84 a6 fd ff       	callq  4f98 <__stack_chk_fail>
   2a914:	c9                   	leaveq 
   2a915:	c3                   	retq   

000000000002a916 <__sfvwrite>:
 * This routine is large and unsightly, but most of the ugliness due
 * to the three different kinds of output buffering is handled here.
 */
int
__sfvwrite(FILE *fp, struct __suio *uio)
{
   2a916:	55                   	push   %rbp
   2a917:	48 89 e5             	mov    %rsp,%rbp
   2a91a:	48 83 ec 60          	sub    $0x60,%rsp
   2a91e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   2a922:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	struct __siov *iov;
	int w, s;
	char *nl;
	int nlknown, nldist;

	if ((len = uio->uio_resid) == 0)
   2a926:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2a92a:	8b 40 0c             	mov    0xc(%rax),%eax
   2a92d:	48 98                	cltq   
   2a92f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2a933:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   2a938:	75 0a                	jne    2a944 <__sfvwrite+0x2e>
		return (0);
   2a93a:	b8 00 00 00 00       	mov    $0x0,%eax
   2a93f:	e9 35 04 00 00       	jmpq   2ad79 <__sfvwrite+0x463>
	}

#define	MIN(a, b) ((a) < (b) ? (a) : (b))
#define	COPY(n)	  (void)memcpy((void *)fp->_p, (void *)p, (size_t)(n))

	iov = uio->uio_iov;
   2a944:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2a948:	48 8b 00             	mov    (%rax),%rax
   2a94b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	p = iov->iov_base;
   2a94f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2a953:	48 8b 00             	mov    (%rax),%rax
   2a956:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	len = iov->iov_len;
   2a95a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2a95e:	48 8b 40 08          	mov    0x8(%rax),%rax
   2a962:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	iov++;
   2a966:	48 83 45 e0 10       	addq   $0x10,-0x20(%rbp)
		extra_work; \
		p = iov->iov_base; \
		len = iov->iov_len; \
		iov++; \
	}
	if (fp->_flags & __SNBF) {
   2a96b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a96f:	0f b7 40 10          	movzwl 0x10(%rax),%eax
   2a973:	98                   	cwtl   
   2a974:	83 e0 02             	and    $0x2,%eax
   2a977:	85 c0                	test   %eax,%eax
   2a979:	0f 85 d0 03 00 00    	jne    2ad4f <__sfvwrite+0x439>
				goto err;
			p += w;
			len -= w;
		} while ((uio->uio_resid -= w) != 0);
		#endif
	} else if ((fp->_flags & __SLBF) == 0) {
   2a97f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a983:	0f b7 40 10          	movzwl 0x10(%rax),%eax
   2a987:	98                   	cwtl   
   2a988:	83 e0 01             	and    $0x1,%eax
   2a98b:	85 c0                	test   %eax,%eax
   2a98d:	0f 85 48 02 00 00    	jne    2abdb <__sfvwrite+0x2c5>
		 * snprintf() return the number of bytes needed, rather
		 * than the number used, and avoids its write function
		 * (so that the write function can be invalid).
		 */
		do {
			GETIOV(;);
   2a993:	eb 1c                	jmp    2a9b1 <__sfvwrite+0x9b>
   2a995:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2a999:	48 8b 00             	mov    (%rax),%rax
   2a99c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2a9a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2a9a4:	48 8b 40 08          	mov    0x8(%rax),%rax
   2a9a8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2a9ac:	48 83 45 e0 10       	addq   $0x10,-0x20(%rbp)
   2a9b1:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   2a9b6:	74 dd                	je     2a995 <__sfvwrite+0x7f>
			if ((fp->_flags & (__SALC | __SSTR)) ==
   2a9b8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a9bc:	0f b7 40 10          	movzwl 0x10(%rax),%eax
   2a9c0:	98                   	cwtl   
   2a9c1:	25 00 42 00 00       	and    $0x4200,%eax
   2a9c6:	3d 00 42 00 00       	cmp    $0x4200,%eax
   2a9cb:	0f 85 ca 00 00 00    	jne    2aa9b <__sfvwrite+0x185>
			    (__SALC | __SSTR) && fp->_w < len) {
   2a9d1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a9d5:	8b 40 0c             	mov    0xc(%rax),%eax
   2a9d8:	48 98                	cltq   
   2a9da:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   2a9de:	0f 86 b7 00 00 00    	jbe    2aa9b <__sfvwrite+0x185>
				size_t blen = fp->_p - fp->_bf._base;
   2a9e4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a9e8:	48 8b 00             	mov    (%rax),%rax
   2a9eb:	48 89 c2             	mov    %rax,%rdx
   2a9ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2a9f2:	48 8b 40 18          	mov    0x18(%rax),%rax
   2a9f6:	48 29 c2             	sub    %rax,%rdx
   2a9f9:	48 89 d0             	mov    %rdx,%rax
   2a9fc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
				unsigned char *_base;
				int _size;

				/* Allocate space exponentially. */
				_size = fp->_bf._size;
   2aa00:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aa04:	8b 40 20             	mov    0x20(%rax),%eax
   2aa07:	89 45 c8             	mov    %eax,-0x38(%rbp)
				do {
					_size = (_size << 1) + 1;
   2aa0a:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2aa0d:	01 c0                	add    %eax,%eax
   2aa0f:	83 c0 01             	add    $0x1,%eax
   2aa12:	89 45 c8             	mov    %eax,-0x38(%rbp)
				} while (_size < blen + len);
   2aa15:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2aa18:	48 98                	cltq   
   2aa1a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   2aa1e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   2aa22:	48 01 ca             	add    %rcx,%rdx
   2aa25:	48 39 d0             	cmp    %rdx,%rax
   2aa28:	72 e0                	jb     2aa0a <__sfvwrite+0xf4>
				_base = realloc(fp->_bf._base, _size + 1);
   2aa2a:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2aa2d:	83 c0 01             	add    $0x1,%eax
   2aa30:	48 63 d0             	movslq %eax,%rdx
   2aa33:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aa37:	48 8b 40 18          	mov    0x18(%rax),%rax
   2aa3b:	48 89 d6             	mov    %rdx,%rsi
   2aa3e:	48 89 c7             	mov    %rax,%rdi
   2aa41:	e8 c0 39 fe ff       	callq  e406 <dlrealloc>
   2aa46:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
				if (_base == NULL)
   2aa4a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2aa4f:	0f 84 fd 02 00 00    	je     2ad52 <__sfvwrite+0x43c>
					goto err;
				fp->_w += _size - fp->_bf._size;
   2aa55:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aa59:	8b 50 0c             	mov    0xc(%rax),%edx
   2aa5c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aa60:	8b 40 20             	mov    0x20(%rax),%eax
   2aa63:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   2aa66:	29 c1                	sub    %eax,%ecx
   2aa68:	89 c8                	mov    %ecx,%eax
   2aa6a:	01 c2                	add    %eax,%edx
   2aa6c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aa70:	89 50 0c             	mov    %edx,0xc(%rax)
				fp->_bf._base = _base;
   2aa73:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aa77:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2aa7b:	48 89 50 18          	mov    %rdx,0x18(%rax)
				fp->_bf._size = _size;
   2aa7f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aa83:	8b 55 c8             	mov    -0x38(%rbp),%edx
   2aa86:	89 50 20             	mov    %edx,0x20(%rax)
				fp->_p = _base + blen;
   2aa89:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2aa8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2aa91:	48 01 c2             	add    %rax,%rdx
   2aa94:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aa98:	48 89 10             	mov    %rdx,(%rax)
			}
			w = fp->_w;
   2aa9b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aa9f:	8b 40 0c             	mov    0xc(%rax),%eax
   2aaa2:	89 45 bc             	mov    %eax,-0x44(%rbp)
			if (fp->_flags & __SSTR) {
   2aaa5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aaa9:	0f b7 40 10          	movzwl 0x10(%rax),%eax
   2aaad:	98                   	cwtl   
   2aaae:	25 00 02 00 00       	and    $0x200,%eax
   2aab3:	85 c0                	test   %eax,%eax
   2aab5:	74 63                	je     2ab1a <__sfvwrite+0x204>
				if (len < w)
   2aab7:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2aaba:	48 98                	cltq   
   2aabc:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   2aac0:	73 07                	jae    2aac9 <__sfvwrite+0x1b3>
					w = len;
   2aac2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2aac6:	89 45 bc             	mov    %eax,-0x44(%rbp)
				COPY(w);	/* copy MIN(fp->_w,len), */
   2aac9:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2aacc:	48 63 d0             	movslq %eax,%rdx
   2aacf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aad3:	48 8b 00             	mov    (%rax),%rax
   2aad6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   2aada:	48 89 ce             	mov    %rcx,%rsi
   2aadd:	48 89 c7             	mov    %rax,%rdi
   2aae0:	e8 05 3d fe ff       	callq  e7ea <memcpy>
				fp->_w -= w;
   2aae5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aae9:	8b 40 0c             	mov    0xc(%rax),%eax
   2aaec:	2b 45 bc             	sub    -0x44(%rbp),%eax
   2aaef:	89 c2                	mov    %eax,%edx
   2aaf1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aaf5:	89 50 0c             	mov    %edx,0xc(%rax)
				fp->_p += w;
   2aaf8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2aafc:	48 8b 10             	mov    (%rax),%rdx
   2aaff:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2ab02:	48 98                	cltq   
   2ab04:	48 01 c2             	add    %rax,%rdx
   2ab07:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ab0b:	48 89 10             	mov    %rdx,(%rax)
				w = len;	/* but pretend copied all */
   2ab0e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2ab12:	89 45 bc             	mov    %eax,-0x44(%rbp)
   2ab15:	e9 88 00 00 00       	jmpq   2aba2 <__sfvwrite+0x28c>
			} else if (fp->_p > fp->_bf._base && len > w) {
   2ab1a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ab1e:	48 8b 10             	mov    (%rax),%rdx
   2ab21:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ab25:	48 8b 40 18          	mov    0x18(%rax),%rax
   2ab29:	48 39 c2             	cmp    %rax,%rdx
   2ab2c:	76 0f                	jbe    2ab3d <__sfvwrite+0x227>
   2ab2e:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2ab31:	48 98                	cltq   
   2ab33:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   2ab37:	0f 87 18 02 00 00    	ja     2ad55 <__sfvwrite+0x43f>
				/* fp->_w -= w; */ /* unneeded */
				fp->_p += w;
				if (__sflush(fp))
			#endif
					goto err;
			} else if (len >= (w = fp->_bf._size)) {
   2ab3d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ab41:	8b 40 20             	mov    0x20(%rax),%eax
   2ab44:	89 45 bc             	mov    %eax,-0x44(%rbp)
   2ab47:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2ab4a:	48 98                	cltq   
   2ab4c:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   2ab50:	0f 83 02 02 00 00    	jae    2ad58 <__sfvwrite+0x442>
				if (w <= 0)
			#endif
					goto err;
			} else {
				/* fill and done */
				w = len;
   2ab56:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2ab5a:	89 45 bc             	mov    %eax,-0x44(%rbp)
				COPY(w);
   2ab5d:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2ab60:	48 63 d0             	movslq %eax,%rdx
   2ab63:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ab67:	48 8b 00             	mov    (%rax),%rax
   2ab6a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   2ab6e:	48 89 ce             	mov    %rcx,%rsi
   2ab71:	48 89 c7             	mov    %rax,%rdi
   2ab74:	e8 71 3c fe ff       	callq  e7ea <memcpy>
				fp->_w -= w;
   2ab79:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ab7d:	8b 40 0c             	mov    0xc(%rax),%eax
   2ab80:	2b 45 bc             	sub    -0x44(%rbp),%eax
   2ab83:	89 c2                	mov    %eax,%edx
   2ab85:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ab89:	89 50 0c             	mov    %edx,0xc(%rax)
				fp->_p += w;
   2ab8c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ab90:	48 8b 10             	mov    (%rax),%rdx
   2ab93:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2ab96:	48 98                	cltq   
   2ab98:	48 01 c2             	add    %rax,%rdx
   2ab9b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ab9f:	48 89 10             	mov    %rdx,(%rax)
			}
			p += w;
   2aba2:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2aba5:	48 98                	cltq   
   2aba7:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			len -= w;
   2abab:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2abae:	48 98                	cltq   
   2abb0:	48 29 45 d0          	sub    %rax,-0x30(%rbp)
		} while ((uio->uio_resid -= w) != 0);
   2abb4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2abb8:	8b 40 0c             	mov    0xc(%rax),%eax
   2abbb:	2b 45 bc             	sub    -0x44(%rbp),%eax
   2abbe:	89 c2                	mov    %eax,%edx
   2abc0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2abc4:	89 50 0c             	mov    %edx,0xc(%rax)
   2abc7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2abcb:	8b 40 0c             	mov    0xc(%rax),%eax
   2abce:	85 c0                	test   %eax,%eax
   2abd0:	0f 85 db fd ff ff    	jne    2a9b1 <__sfvwrite+0x9b>
   2abd6:	e9 6d 01 00 00       	jmpq   2ad48 <__sfvwrite+0x432>
		 * must check for newlines.  Compute the distance
		 * to the first newline (including the newline),
		 * or `infinity' if there is none, then pretend
		 * that the amount to write is MIN(len,nldist).
		 */
		nlknown = 0;
   2abdb:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
		nldist = 0;	/* XXX just to keep gcc happy */
   2abe2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
		do {
			GETIOV(nlknown = 0);
   2abe9:	eb 23                	jmp    2ac0e <__sfvwrite+0x2f8>
   2abeb:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
   2abf2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2abf6:	48 8b 00             	mov    (%rax),%rax
   2abf9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2abfd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2ac01:	48 8b 40 08          	mov    0x8(%rax),%rax
   2ac05:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2ac09:	48 83 45 e0 10       	addq   $0x10,-0x20(%rbp)
   2ac0e:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   2ac13:	74 d6                	je     2abeb <__sfvwrite+0x2d5>
			if (!nlknown) {
   2ac15:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
   2ac19:	75 48                	jne    2ac63 <__sfvwrite+0x34d>
				nl = memchr((void *)p, '\n', len);
   2ac1b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   2ac1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2ac23:	be 0a 00 00 00       	mov    $0xa,%esi
   2ac28:	48 89 c7             	mov    %rax,%rdi
   2ac2b:	e8 42 0a 00 00       	callq  2b672 <memchr>
   2ac30:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				nldist = nl ? nl + 1 - p : len + 1;
   2ac34:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   2ac39:	74 17                	je     2ac52 <__sfvwrite+0x33c>
   2ac3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ac3f:	48 83 c0 01          	add    $0x1,%rax
   2ac43:	48 89 c2             	mov    %rax,%rdx
   2ac46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2ac4a:	48 29 c2             	sub    %rax,%rdx
   2ac4d:	48 89 d0             	mov    %rdx,%rax
   2ac50:	eb 07                	jmp    2ac59 <__sfvwrite+0x343>
   2ac52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2ac56:	83 c0 01             	add    $0x1,%eax
   2ac59:	89 45 c4             	mov    %eax,-0x3c(%rbp)
				nlknown = 1;
   2ac5c:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)
			}
			s = MIN(len, nldist);
   2ac63:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   2ac66:	48 98                	cltq   
   2ac68:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
   2ac6c:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
   2ac71:	89 45 cc             	mov    %eax,-0x34(%rbp)
			w = fp->_w + fp->_bf._size;
   2ac74:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ac78:	8b 50 0c             	mov    0xc(%rax),%edx
   2ac7b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ac7f:	8b 40 20             	mov    0x20(%rax),%eax
   2ac82:	01 d0                	add    %edx,%eax
   2ac84:	89 45 bc             	mov    %eax,-0x44(%rbp)
			if (fp->_p > fp->_bf._base && s > w) {
   2ac87:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ac8b:	48 8b 10             	mov    (%rax),%rdx
   2ac8e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ac92:	48 8b 40 18          	mov    0x18(%rax),%rax
   2ac96:	48 39 c2             	cmp    %rax,%rdx
   2ac99:	76 0c                	jbe    2aca7 <__sfvwrite+0x391>
   2ac9b:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2ac9e:	3b 45 bc             	cmp    -0x44(%rbp),%eax
   2aca1:	0f 8f ae 00 00 00    	jg     2ad55 <__sfvwrite+0x43f>
				/* fp->_w -= w; */
				fp->_p += w;
				if (__sflush(fp))
			#endif
					goto err;
			} else if (s >= (w = fp->_bf._size)) {
   2aca7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2acab:	8b 40 20             	mov    0x20(%rax),%eax
   2acae:	89 45 bc             	mov    %eax,-0x44(%rbp)
   2acb1:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2acb4:	3b 45 cc             	cmp    -0x34(%rbp),%eax
   2acb7:	0f 8e 9e 00 00 00    	jle    2ad5b <__sfvwrite+0x445>
				w = (*fp->_write)(fp->_cookie, p, w);
				if (w <= 0)
			#endif
				 	goto err;
			} else {
				w = s;
   2acbd:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2acc0:	89 45 bc             	mov    %eax,-0x44(%rbp)
				COPY(w);
   2acc3:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2acc6:	48 63 d0             	movslq %eax,%rdx
   2acc9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2accd:	48 8b 00             	mov    (%rax),%rax
   2acd0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   2acd4:	48 89 ce             	mov    %rcx,%rsi
   2acd7:	48 89 c7             	mov    %rax,%rdi
   2acda:	e8 0b 3b fe ff       	callq  e7ea <memcpy>
				fp->_w -= w;
   2acdf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ace3:	8b 40 0c             	mov    0xc(%rax),%eax
   2ace6:	2b 45 bc             	sub    -0x44(%rbp),%eax
   2ace9:	89 c2                	mov    %eax,%edx
   2aceb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2acef:	89 50 0c             	mov    %edx,0xc(%rax)
				fp->_p += w;
   2acf2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2acf6:	48 8b 10             	mov    (%rax),%rdx
   2acf9:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2acfc:	48 98                	cltq   
   2acfe:	48 01 c2             	add    %rax,%rdx
   2ad01:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ad05:	48 89 10             	mov    %rdx,(%rax)
			}
			if ((nldist -= w) == 0) {
   2ad08:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2ad0b:	29 45 c4             	sub    %eax,-0x3c(%rbp)
   2ad0e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
   2ad12:	74 4a                	je     2ad5e <__sfvwrite+0x448>
				if (__sflush(fp))
			#endif
					goto err;
				//nlknown = 0;
			}
			p += w;
   2ad14:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2ad17:	48 98                	cltq   
   2ad19:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			len -= w;
   2ad1d:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2ad20:	48 98                	cltq   
   2ad22:	48 29 45 d0          	sub    %rax,-0x30(%rbp)
		} while ((uio->uio_resid -= w) != 0);
   2ad26:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2ad2a:	8b 40 0c             	mov    0xc(%rax),%eax
   2ad2d:	2b 45 bc             	sub    -0x44(%rbp),%eax
   2ad30:	89 c2                	mov    %eax,%edx
   2ad32:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2ad36:	89 50 0c             	mov    %edx,0xc(%rax)
   2ad39:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2ad3d:	8b 40 0c             	mov    0xc(%rax),%eax
   2ad40:	85 c0                	test   %eax,%eax
   2ad42:	0f 85 c6 fe ff ff    	jne    2ac0e <__sfvwrite+0x2f8>
	}
	return (0);
   2ad48:	b8 00 00 00 00       	mov    $0x0,%eax
   2ad4d:	eb 2a                	jmp    2ad79 <__sfvwrite+0x463>
		goto err;
   2ad4f:	90                   	nop
   2ad50:	eb 0d                	jmp    2ad5f <__sfvwrite+0x449>
					goto err;
   2ad52:	90                   	nop
   2ad53:	eb 0a                	jmp    2ad5f <__sfvwrite+0x449>

err:
   2ad55:	90                   	nop
   2ad56:	eb 07                	jmp    2ad5f <__sfvwrite+0x449>
					goto err;
   2ad58:	90                   	nop
   2ad59:	eb 04                	jmp    2ad5f <__sfvwrite+0x449>
				 	goto err;
   2ad5b:	90                   	nop
   2ad5c:	eb 01                	jmp    2ad5f <__sfvwrite+0x449>
					goto err;
   2ad5e:	90                   	nop
	fp->_flags |= __SERR;
   2ad5f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ad63:	0f b7 40 10          	movzwl 0x10(%rax),%eax
   2ad67:	83 c8 40             	or     $0x40,%eax
   2ad6a:	89 c2                	mov    %eax,%edx
   2ad6c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ad70:	66 89 50 10          	mov    %dx,0x10(%rax)
	return (EOF);
   2ad74:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   2ad79:	c9                   	leaveq 
   2ad7a:	c3                   	retq   

000000000002ad7b <roundup>:
 * this procedure sets it to 100...0 and returns 1 to indicate that
 * the exponent needs to be bumped.  Otherwise, 0 is returned.
 */
static int
roundup(char *s0, int ndigits)
{
   2ad7b:	55                   	push   %rbp
   2ad7c:	48 89 e5             	mov    %rsp,%rbp
   2ad7f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2ad83:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	char *s;

	for (s = s0 + ndigits - 1; *s == 0xf; s--) {
   2ad86:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2ad89:	48 98                	cltq   
   2ad8b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   2ad8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ad93:	48 01 d0             	add    %rdx,%rax
   2ad96:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2ad9a:	eb 24                	jmp    2adc0 <roundup+0x45>
		if (s == s0) {
   2ad9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ada0:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   2ada4:	75 0e                	jne    2adb4 <roundup+0x39>
			*s = 1;
   2ada6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2adaa:	c6 00 01             	movb   $0x1,(%rax)
			return (1);
   2adad:	b8 01 00 00 00       	mov    $0x1,%eax
   2adb2:	eb 2e                	jmp    2ade2 <roundup+0x67>
		}
		*s = 0;
   2adb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2adb8:	c6 00 00             	movb   $0x0,(%rax)
	for (s = s0 + ndigits - 1; *s == 0xf; s--) {
   2adbb:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   2adc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2adc4:	0f b6 00             	movzbl (%rax),%eax
   2adc7:	3c 0f                	cmp    $0xf,%al
   2adc9:	74 d1                	je     2ad9c <roundup+0x21>
	}
	++*s;
   2adcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2adcf:	0f b6 00             	movzbl (%rax),%eax
   2add2:	83 c0 01             	add    $0x1,%eax
   2add5:	89 c2                	mov    %eax,%edx
   2add7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2addb:	88 10                	mov    %dl,(%rax)
	return (0);
   2addd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   2ade2:	5d                   	pop    %rbp
   2ade3:	c3                   	retq   

000000000002ade4 <dorounding>:
 * value is not representable in the corresponding floating-point
 * type.  The exponent pointed to by decpt is adjusted if necessary.
 */
static void
dorounding(char *s0, int ndigits, int sign, int *decpt)
{
   2ade4:	55                   	push   %rbp
   2ade5:	48 89 e5             	mov    %rsp,%rbp
   2ade8:	48 83 ec 28          	sub    $0x28,%rsp
   2adec:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2adf0:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   2adf3:	89 55 e0             	mov    %edx,-0x20(%rbp)
   2adf6:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
	int adjust = 0;	/* do we need to adjust the exponent? */
   2adfa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	switch (FLT_ROUNDS) {
	case 0:		/* toward zero */
	default:	/* implementation-defined */
		break;
	case 1:		/* to nearest, halfway rounds to even */
		if ((s0[ndigits] > 8) ||
   2ae01:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2ae04:	48 63 d0             	movslq %eax,%rdx
   2ae07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ae0b:	48 01 d0             	add    %rdx,%rax
   2ae0e:	0f b6 00             	movzbl (%rax),%eax
   2ae11:	3c 08                	cmp    $0x8,%al
   2ae13:	7f 31                	jg     2ae46 <dorounding+0x62>
		    (s0[ndigits] == 8 && s0[ndigits + 1] & 1))
   2ae15:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2ae18:	48 63 d0             	movslq %eax,%rdx
   2ae1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ae1f:	48 01 d0             	add    %rdx,%rax
   2ae22:	0f b6 00             	movzbl (%rax),%eax
		if ((s0[ndigits] > 8) ||
   2ae25:	3c 08                	cmp    $0x8,%al
   2ae27:	75 31                	jne    2ae5a <dorounding+0x76>
		    (s0[ndigits] == 8 && s0[ndigits + 1] & 1))
   2ae29:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2ae2c:	48 98                	cltq   
   2ae2e:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2ae32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ae36:	48 01 d0             	add    %rdx,%rax
   2ae39:	0f b6 00             	movzbl (%rax),%eax
   2ae3c:	0f be c0             	movsbl %al,%eax
   2ae3f:	83 e0 01             	and    $0x1,%eax
   2ae42:	85 c0                	test   %eax,%eax
   2ae44:	74 14                	je     2ae5a <dorounding+0x76>
			adjust = roundup(s0, ndigits);
   2ae46:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   2ae49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ae4d:	89 d6                	mov    %edx,%esi
   2ae4f:	48 89 c7             	mov    %rax,%rdi
   2ae52:	e8 24 ff ff ff       	callq  2ad7b <roundup>
   2ae57:	89 45 fc             	mov    %eax,-0x4(%rbp)
		break;
   2ae5a:	90                   	nop
		if (sign != 0)
			adjust = roundup(s0, ndigits);
		break;
	}

	if (adjust)
   2ae5b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
   2ae5f:	74 0f                	je     2ae70 <dorounding+0x8c>
		*decpt += 4;
   2ae61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2ae65:	8b 00                	mov    (%rax),%eax
   2ae67:	8d 50 04             	lea    0x4(%rax),%edx
   2ae6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2ae6e:	89 10                	mov    %edx,(%rax)
}
   2ae70:	90                   	nop
   2ae71:	c9                   	leaveq 
   2ae72:	c3                   	retq   

000000000002ae73 <__hdtoa>:
 * Outputs:	decpt, sign, rve
 */
char *
__hdtoa(double d, const char *xdigs, int ndigits, int *decpt, int *sign,
    char **rve)
{
   2ae73:	55                   	push   %rbp
   2ae74:	48 89 e5             	mov    %rsp,%rbp
   2ae77:	48 83 ec 60          	sub    $0x60,%rsp
   2ae7b:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
   2ae80:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
   2ae84:	89 75 cc             	mov    %esi,-0x34(%rbp)
   2ae87:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2ae8b:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   2ae8f:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
	static const int sigfigs = (DBL_MANT_DIG + 3) / 4;
	struct ieee_double *p = (struct ieee_double *)&d;
   2ae93:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
   2ae97:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	char *s, *s0;
	int bufsize;

	*sign = p->dbl_sign;
   2ae9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ae9f:	0f b6 40 07          	movzbl 0x7(%rax),%eax
   2aea3:	c0 e8 07             	shr    $0x7,%al
   2aea6:	0f b6 d0             	movzbl %al,%edx
   2aea9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2aead:	89 10                	mov    %edx,(%rax)

	switch (fpclassify(d)) {
   2aeaf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2aeb3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
   2aeb7:	f2 0f 10 45 a8       	movsd  -0x58(%rbp),%xmm0
   2aebc:	e8 5f 20 00 00       	callq  2cf20 <__fpclassify>
   2aec1:	83 f8 04             	cmp    $0x4,%eax
   2aec4:	0f 87 f3 00 00 00    	ja     2afbd <__hdtoa+0x14a>
   2aeca:	89 c0                	mov    %eax,%eax
   2aecc:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2aed3:	00 
   2aed4:	48 8d 05 05 5f 00 00 	lea    0x5f05(%rip),%rax        # 30de0 <xdigs_upper.3164+0xc0>
   2aedb:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   2aede:	48 63 d0             	movslq %eax,%rdx
   2aee1:	48 8d 05 f8 5e 00 00 	lea    0x5ef8(%rip),%rax        # 30de0 <xdigs_upper.3164+0xc0>
   2aee8:	48 01 d0             	add    %rdx,%rax
   2aeeb:	ff e0                	jmpq   *%rax
	case FP_NORMAL:
		*decpt = p->dbl_exp - DBL_ADJ;
   2aeed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2aef1:	0f b7 40 06          	movzwl 0x6(%rax),%eax
   2aef5:	66 c1 e8 04          	shr    $0x4,%ax
   2aef9:	66 25 ff 07          	and    $0x7ff,%ax
   2aefd:	0f b7 c0             	movzwl %ax,%eax
   2af00:	8d 90 02 fc ff ff    	lea    -0x3fe(%rax),%edx
   2af06:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2af0a:	89 10                	mov    %edx,(%rax)
		break;
   2af0c:	e9 b1 00 00 00       	jmpq   2afc2 <__hdtoa+0x14f>
	case FP_ZERO:
		*decpt = 1;
   2af11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2af15:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
		return (nrv_alloc("0", rve, 1));
   2af1b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2af1f:	ba 01 00 00 00       	mov    $0x1,%edx
   2af24:	48 89 c6             	mov    %rax,%rsi
   2af27:	48 8d 3d 82 5e 00 00 	lea    0x5e82(%rip),%rdi        # 30db0 <xdigs_upper.3164+0x90>
   2af2e:	e8 71 df ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   2af33:	e9 8b 02 00 00       	jmpq   2b1c3 <__hdtoa+0x350>
	case FP_SUBNORMAL:
		d *= 5.363123171977039e+154; /* = 0x1p514 */
   2af38:	f2 0f 10 4d d8       	movsd  -0x28(%rbp),%xmm1
   2af3d:	f2 0f 10 05 7b 5e 00 	movsd  0x5e7b(%rip),%xmm0        # 30dc0 <xdigs_upper.3164+0xa0>
   2af44:	00 
   2af45:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2af49:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
		*decpt = p->dbl_exp - (514 + DBL_ADJ);
   2af4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2af52:	0f b7 40 06          	movzwl 0x6(%rax),%eax
   2af56:	66 c1 e8 04          	shr    $0x4,%ax
   2af5a:	66 25 ff 07          	and    $0x7ff,%ax
   2af5e:	0f b7 c0             	movzwl %ax,%eax
   2af61:	8d 90 00 fa ff ff    	lea    -0x600(%rax),%edx
   2af67:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2af6b:	89 10                	mov    %edx,(%rax)
		break;
   2af6d:	eb 53                	jmp    2afc2 <__hdtoa+0x14f>
	case FP_INFINITE:
		*decpt = INT_MAX;
   2af6f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2af73:	c7 00 ff ff ff 7f    	movl   $0x7fffffff,(%rax)
		return (nrv_alloc(INFSTR, rve, sizeof(INFSTR) - 1));
   2af79:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2af7d:	ba 08 00 00 00       	mov    $0x8,%edx
   2af82:	48 89 c6             	mov    %rax,%rsi
   2af85:	48 8d 3d 26 5e 00 00 	lea    0x5e26(%rip),%rdi        # 30db2 <xdigs_upper.3164+0x92>
   2af8c:	e8 13 df ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   2af91:	e9 2d 02 00 00       	jmpq   2b1c3 <__hdtoa+0x350>
	case FP_NAN:
		*decpt = INT_MAX;
   2af96:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2af9a:	c7 00 ff ff ff 7f    	movl   $0x7fffffff,(%rax)
		return (nrv_alloc(NANSTR, rve, sizeof(NANSTR) - 1));
   2afa0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2afa4:	ba 03 00 00 00       	mov    $0x3,%edx
   2afa9:	48 89 c6             	mov    %rax,%rsi
   2afac:	48 8d 3d 08 5e 00 00 	lea    0x5e08(%rip),%rdi        # 30dbb <xdigs_upper.3164+0x9b>
   2afb3:	e8 ec de ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   2afb8:	e9 06 02 00 00       	jmpq   2b1c3 <__hdtoa+0x350>
	default:
		abort();
   2afbd:	e8 cc 4f 00 00       	callq  2ff8e <abort>
	}

	/* FP_NORMAL or FP_SUBNORMAL */

	if (ndigits == 0)		/* dtoa() compatibility */
   2afc2:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   2afc6:	75 07                	jne    2afcf <__hdtoa+0x15c>
		ndigits = 1;
   2afc8:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%rbp)

	/*
	 * For simplicity, we generate all the digits even if the
	 * caller has requested fewer.
	 */
	bufsize = (sigfigs > ndigits) ? sigfigs : ndigits;
   2afcf:	8b 05 33 5e 00 00    	mov    0x5e33(%rip),%eax        # 30e08 <sigfigs.2481>
   2afd5:	39 45 cc             	cmp    %eax,-0x34(%rbp)
   2afd8:	0f 4d 45 cc          	cmovge -0x34(%rbp),%eax
   2afdc:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	s0 = rv_alloc(bufsize);
   2afdf:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2afe2:	89 c7                	mov    %eax,%edi
   2afe4:	e8 57 de ff ff       	callq  28e40 <__rv_alloc_D2A>
   2afe9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (s0 == NULL)
   2afed:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2aff2:	75 0a                	jne    2affe <__hdtoa+0x18b>
		return (NULL);
   2aff4:	b8 00 00 00 00       	mov    $0x0,%eax
   2aff9:	e9 c5 01 00 00       	jmpq   2b1c3 <__hdtoa+0x350>
	 * mantissa, followed by the most significant.  The buffer is
	 * filled with the byte values 0x0 through 0xf, which are
	 * converted to xdigs[0x0] through xdigs[0xf] after the
	 * rounding phase.
	 */
	for (s = s0 + bufsize - 1; s > s0 + sigfigs - 1; s--)
   2affe:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2b001:	48 98                	cltq   
   2b003:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   2b007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b00b:	48 01 d0             	add    %rdx,%rax
   2b00e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2b012:	eb 0c                	jmp    2b020 <__hdtoa+0x1ad>
		*s = 0;
   2b014:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b018:	c6 00 00             	movb   $0x0,(%rax)
	for (s = s0 + bufsize - 1; s > s0 + sigfigs - 1; s--)
   2b01b:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   2b020:	8b 05 e2 5d 00 00    	mov    0x5de2(%rip),%eax        # 30e08 <sigfigs.2481>
   2b026:	48 98                	cltq   
   2b028:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   2b02c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b030:	48 01 d0             	add    %rdx,%rax
   2b033:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   2b037:	77 db                	ja     2b014 <__hdtoa+0x1a1>
	for (; s > s0 + sigfigs - (DBL_FRACLBITS / 4) - 1 && s > s0; s--) {
   2b039:	eb 27                	jmp    2b062 <__hdtoa+0x1ef>
		*s = p->dbl_fracl & 0xf;
   2b03b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b03f:	8b 00                	mov    (%rax),%eax
   2b041:	83 e0 0f             	and    $0xf,%eax
   2b044:	89 c2                	mov    %eax,%edx
   2b046:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b04a:	88 10                	mov    %dl,(%rax)
		p->dbl_fracl >>= 4;
   2b04c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b050:	8b 00                	mov    (%rax),%eax
   2b052:	c1 e8 04             	shr    $0x4,%eax
   2b055:	89 c2                	mov    %eax,%edx
   2b057:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b05b:	89 10                	mov    %edx,(%rax)
	for (; s > s0 + sigfigs - (DBL_FRACLBITS / 4) - 1 && s > s0; s--) {
   2b05d:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   2b062:	8b 05 a0 5d 00 00    	mov    0x5da0(%rip),%eax        # 30e08 <sigfigs.2481>
   2b068:	48 98                	cltq   
   2b06a:	48 8d 50 f7          	lea    -0x9(%rax),%rdx
   2b06e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b072:	48 01 d0             	add    %rdx,%rax
   2b075:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   2b079:	76 58                	jbe    2b0d3 <__hdtoa+0x260>
   2b07b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b07f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2b083:	77 b6                	ja     2b03b <__hdtoa+0x1c8>
	}
	for (; s > s0; s--) {
   2b085:	eb 4c                	jmp    2b0d3 <__hdtoa+0x260>
		*s = p->dbl_frach & 0xf;
   2b087:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b08b:	8b 40 04             	mov    0x4(%rax),%eax
   2b08e:	25 ff ff 0f 00       	and    $0xfffff,%eax
   2b093:	83 e0 0f             	and    $0xf,%eax
   2b096:	89 c2                	mov    %eax,%edx
   2b098:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b09c:	88 10                	mov    %dl,(%rax)
		p->dbl_frach >>= 4;
   2b09e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b0a2:	8b 40 04             	mov    0x4(%rax),%eax
   2b0a5:	25 ff ff 0f 00       	and    $0xfffff,%eax
   2b0aa:	c1 f8 04             	sar    $0x4,%eax
   2b0ad:	25 ff ff 0f 00       	and    $0xfffff,%eax
   2b0b2:	89 c2                	mov    %eax,%edx
   2b0b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b0b8:	89 d1                	mov    %edx,%ecx
   2b0ba:	81 e1 ff ff 0f 00    	and    $0xfffff,%ecx
   2b0c0:	8b 50 04             	mov    0x4(%rax),%edx
   2b0c3:	81 e2 00 00 f0 ff    	and    $0xfff00000,%edx
   2b0c9:	09 ca                	or     %ecx,%edx
   2b0cb:	89 50 04             	mov    %edx,0x4(%rax)
	for (; s > s0; s--) {
   2b0ce:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   2b0d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b0d7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2b0db:	77 aa                	ja     2b087 <__hdtoa+0x214>
	 * At this point, we have snarfed all the bits in the
	 * mantissa, with the possible exception of the highest-order
	 * (partial) nibble, which is dealt with by the next
	 * statement.  We also tack on the implicit normalization bit.
	 */
	*s = p->dbl_frach | (1U << ((DBL_MANT_DIG - 1) % 4));
   2b0dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b0e1:	8b 40 04             	mov    0x4(%rax),%eax
   2b0e4:	25 ff ff 0f 00       	and    $0xfffff,%eax
   2b0e9:	83 c8 01             	or     $0x1,%eax
   2b0ec:	89 c2                	mov    %eax,%edx
   2b0ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b0f2:	88 10                	mov    %dl,(%rax)

	/* If ndigits < 0, we are expected to auto-size the precision. */
	if (ndigits < 0) {
   2b0f4:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   2b0f8:	79 26                	jns    2b120 <__hdtoa+0x2ad>
		for (ndigits = sigfigs; s0[ndigits - 1] == 0; ndigits--)
   2b0fa:	8b 05 08 5d 00 00    	mov    0x5d08(%rip),%eax        # 30e08 <sigfigs.2481>
   2b100:	89 45 cc             	mov    %eax,-0x34(%rbp)
   2b103:	eb 04                	jmp    2b109 <__hdtoa+0x296>
   2b105:	83 6d cc 01          	subl   $0x1,-0x34(%rbp)
   2b109:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2b10c:	48 98                	cltq   
   2b10e:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   2b112:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b116:	48 01 d0             	add    %rdx,%rax
   2b119:	0f b6 00             	movzbl (%rax),%eax
   2b11c:	84 c0                	test   %al,%al
   2b11e:	74 e5                	je     2b105 <__hdtoa+0x292>
			;
	}

	if (sigfigs > ndigits && s0[ndigits] != 0)
   2b120:	8b 05 e2 5c 00 00    	mov    0x5ce2(%rip),%eax        # 30e08 <sigfigs.2481>
   2b126:	39 45 cc             	cmp    %eax,-0x34(%rbp)
   2b129:	7d 35                	jge    2b160 <__hdtoa+0x2ed>
   2b12b:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2b12e:	48 63 d0             	movslq %eax,%rdx
   2b131:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b135:	48 01 d0             	add    %rdx,%rax
   2b138:	0f b6 00             	movzbl (%rax),%eax
   2b13b:	84 c0                	test   %al,%al
   2b13d:	74 21                	je     2b160 <__hdtoa+0x2ed>
		dorounding(s0, ndigits, p->dbl_sign, decpt);
   2b13f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b143:	0f b6 40 07          	movzbl 0x7(%rax),%eax
   2b147:	c0 e8 07             	shr    $0x7,%al
   2b14a:	0f b6 d0             	movzbl %al,%edx
   2b14d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   2b151:	8b 75 cc             	mov    -0x34(%rbp),%esi
   2b154:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b158:	48 89 c7             	mov    %rax,%rdi
   2b15b:	e8 84 fc ff ff       	callq  2ade4 <dorounding>

	s = s0 + ndigits;
   2b160:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2b163:	48 63 d0             	movslq %eax,%rdx
   2b166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b16a:	48 01 d0             	add    %rdx,%rax
   2b16d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (rve != NULL)
   2b171:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
   2b176:	74 0b                	je     2b183 <__hdtoa+0x310>
		*rve = s;
   2b178:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
   2b17c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2b180:	48 89 10             	mov    %rdx,(%rax)
	*s-- = '\0';
   2b183:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b187:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   2b18b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2b18f:	c6 00 00             	movb   $0x0,(%rax)
	for (; s >= s0; s--)
   2b192:	eb 21                	jmp    2b1b5 <__hdtoa+0x342>
		*s = xdigs[(unsigned int)*s];
   2b194:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b198:	0f b6 00             	movzbl (%rax),%eax
   2b19b:	0f be c0             	movsbl %al,%eax
   2b19e:	89 c2                	mov    %eax,%edx
   2b1a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2b1a4:	48 01 d0             	add    %rdx,%rax
   2b1a7:	0f b6 10             	movzbl (%rax),%edx
   2b1aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b1ae:	88 10                	mov    %dl,(%rax)
	for (; s >= s0; s--)
   2b1b0:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   2b1b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b1b9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2b1bd:	73 d5                	jae    2b194 <__hdtoa+0x321>

	return (s0);
   2b1bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
   2b1c3:	c9                   	leaveq 
   2b1c4:	c3                   	retq   

000000000002b1c5 <__hldtoa>:
 * This is the long double version of __hdtoa().
 */
char *
__hldtoa(long double e, const char *xdigs, int ndigits, int *decpt, int *sign,
    char **rve)
{
   2b1c5:	55                   	push   %rbp
   2b1c6:	48 89 e5             	mov    %rsp,%rbp
   2b1c9:	48 83 ec 50          	sub    $0x50,%rsp
   2b1cd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2b1d1:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   2b1d4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   2b1d8:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   2b1dc:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	static const int sigfigs = (LDBL_MANT_DIG + 3) / 4;
	struct ieee_ext *p = (struct ieee_ext *)&e;
   2b1e0:	48 8d 45 10          	lea    0x10(%rbp),%rax
   2b1e4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	char *s, *s0;
	int bufsize;

	*sign = p->ext_sign;
   2b1e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b1ec:	0f b6 40 09          	movzbl 0x9(%rax),%eax
   2b1f0:	c0 e8 07             	shr    $0x7,%al
   2b1f3:	0f b6 d0             	movzbl %al,%edx
   2b1f6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2b1fa:	89 10                	mov    %edx,(%rax)

	switch (fpclassify(e)) {
   2b1fc:	db 6d 10             	fldt   0x10(%rbp)
   2b1ff:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
   2b204:	db 3c 24             	fstpt  (%rsp)
   2b207:	e8 34 1e 00 00       	callq  2d040 <__fpclassifyl>
   2b20c:	48 83 c4 10          	add    $0x10,%rsp
   2b210:	83 f8 04             	cmp    $0x4,%eax
   2b213:	0f 87 e3 00 00 00    	ja     2b2fc <__hldtoa+0x137>
   2b219:	89 c0                	mov    %eax,%eax
   2b21b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2b222:	00 
   2b223:	48 8d 05 ca 5b 00 00 	lea    0x5bca(%rip),%rax        # 30df4 <xdigs_upper.3164+0xd4>
   2b22a:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   2b22d:	48 63 d0             	movslq %eax,%rdx
   2b230:	48 8d 05 bd 5b 00 00 	lea    0x5bbd(%rip),%rax        # 30df4 <xdigs_upper.3164+0xd4>
   2b237:	48 01 d0             	add    %rdx,%rax
   2b23a:	ff e0                	jmpq   *%rax
	case FP_NORMAL:
		*decpt = p->ext_exp - LDBL_ADJ;
   2b23c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b240:	0f b7 40 08          	movzwl 0x8(%rax),%eax
   2b244:	66 25 ff 7f          	and    $0x7fff,%ax
   2b248:	0f b7 c0             	movzwl %ax,%eax
   2b24b:	8d 90 ff bf ff ff    	lea    -0x4001(%rax),%edx
   2b251:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b255:	89 10                	mov    %edx,(%rax)
		break;
   2b257:	e9 a5 00 00 00       	jmpq   2b301 <__hldtoa+0x13c>
	case FP_ZERO:
		*decpt = 1;
   2b25c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b260:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
		return (nrv_alloc("0", rve, 1));
   2b266:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2b26a:	ba 01 00 00 00       	mov    $0x1,%edx
   2b26f:	48 89 c6             	mov    %rax,%rsi
   2b272:	48 8d 3d 37 5b 00 00 	lea    0x5b37(%rip),%rdi        # 30db0 <xdigs_upper.3164+0x90>
   2b279:	e8 26 dc ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   2b27e:	e9 58 02 00 00       	jmpq   2b4db <__hldtoa+0x316>
	case FP_SUBNORMAL:
		e *= 0x1p514L;
   2b283:	db 6d 10             	fldt   0x10(%rbp)
   2b286:	db 2d 44 5b 00 00    	fldt   0x5b44(%rip)        # 30dd0 <xdigs_upper.3164+0xb0>
   2b28c:	de c9                	fmulp  %st,%st(1)
   2b28e:	db 7d 10             	fstpt  0x10(%rbp)
		*decpt = p->ext_exp - (514 + LDBL_ADJ);
   2b291:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b295:	0f b7 40 08          	movzwl 0x8(%rax),%eax
   2b299:	66 25 ff 7f          	and    $0x7fff,%ax
   2b29d:	0f b7 c0             	movzwl %ax,%eax
   2b2a0:	8d 90 fd bd ff ff    	lea    -0x4203(%rax),%edx
   2b2a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b2aa:	89 10                	mov    %edx,(%rax)
		break;
   2b2ac:	eb 53                	jmp    2b301 <__hldtoa+0x13c>
	case FP_INFINITE:
		*decpt = INT_MAX;
   2b2ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b2b2:	c7 00 ff ff ff 7f    	movl   $0x7fffffff,(%rax)
		return (nrv_alloc(INFSTR, rve, sizeof(INFSTR) - 1));
   2b2b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2b2bc:	ba 08 00 00 00       	mov    $0x8,%edx
   2b2c1:	48 89 c6             	mov    %rax,%rsi
   2b2c4:	48 8d 3d e7 5a 00 00 	lea    0x5ae7(%rip),%rdi        # 30db2 <xdigs_upper.3164+0x92>
   2b2cb:	e8 d4 db ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   2b2d0:	e9 06 02 00 00       	jmpq   2b4db <__hldtoa+0x316>
	case FP_NAN:
		*decpt = INT_MAX;
   2b2d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b2d9:	c7 00 ff ff ff 7f    	movl   $0x7fffffff,(%rax)
		return (nrv_alloc(NANSTR, rve, sizeof(NANSTR) - 1));
   2b2df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2b2e3:	ba 03 00 00 00       	mov    $0x3,%edx
   2b2e8:	48 89 c6             	mov    %rax,%rsi
   2b2eb:	48 8d 3d c9 5a 00 00 	lea    0x5ac9(%rip),%rdi        # 30dbb <xdigs_upper.3164+0x9b>
   2b2f2:	e8 ad db ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   2b2f7:	e9 df 01 00 00       	jmpq   2b4db <__hldtoa+0x316>
	default:
		abort();
   2b2fc:	e8 8d 4c 00 00       	callq  2ff8e <abort>
	}

	/* FP_NORMAL or FP_SUBNORMAL */

	if (ndigits == 0)		/* dtoa() compatibility */
   2b301:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   2b305:	75 07                	jne    2b30e <__hldtoa+0x149>
		ndigits = 1;
   2b307:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)

	/*
	 * For simplicity, we generate all the digits even if the
	 * caller has requested fewer.
	 */
	bufsize = (sigfigs > ndigits) ? sigfigs : ndigits;
   2b30e:	8b 05 f8 5a 00 00    	mov    0x5af8(%rip),%eax        # 30e0c <sigfigs.2516>
   2b314:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
   2b317:	0f 4d 45 d4          	cmovge -0x2c(%rbp),%eax
   2b31b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	s0 = rv_alloc(bufsize);
   2b31e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2b321:	89 c7                	mov    %eax,%edi
   2b323:	e8 18 db ff ff       	callq  28e40 <__rv_alloc_D2A>
   2b328:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (s0 == NULL)
   2b32c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b331:	75 0a                	jne    2b33d <__hldtoa+0x178>
		return (NULL);
   2b333:	b8 00 00 00 00       	mov    $0x0,%eax
   2b338:	e9 9e 01 00 00       	jmpq   2b4db <__hldtoa+0x316>
	 * mantissa, followed by the most significant.  The buffer is
	 * filled with the byte values 0x0 through 0xf, which are
	 * converted to xdigs[0x0] through xdigs[0xf] after the
	 * rounding phase.
	 */
	for (s = s0 + bufsize - 1; s > s0 + sigfigs - 1; s--)
   2b33d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2b340:	48 98                	cltq   
   2b342:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   2b346:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b34a:	48 01 d0             	add    %rdx,%rax
   2b34d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2b351:	eb 0c                	jmp    2b35f <__hldtoa+0x19a>
		*s = 0;
   2b353:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b357:	c6 00 00             	movb   $0x0,(%rax)
	for (s = s0 + bufsize - 1; s > s0 + sigfigs - 1; s--)
   2b35a:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   2b35f:	8b 05 a7 5a 00 00    	mov    0x5aa7(%rip),%eax        # 30e0c <sigfigs.2516>
   2b365:	48 98                	cltq   
   2b367:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   2b36b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b36f:	48 01 d0             	add    %rdx,%rax
   2b372:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   2b376:	77 db                	ja     2b353 <__hldtoa+0x18e>
	for (; s > s0 + sigfigs - (EXT_FRACLBITS / 4) - 1 && s > s0; s--) {
   2b378:	eb 27                	jmp    2b3a1 <__hldtoa+0x1dc>
		*s = p->ext_fracl & 0xf;
   2b37a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b37e:	8b 00                	mov    (%rax),%eax
   2b380:	83 e0 0f             	and    $0xf,%eax
   2b383:	89 c2                	mov    %eax,%edx
   2b385:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b389:	88 10                	mov    %dl,(%rax)
		p->ext_fracl >>= 4;
   2b38b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b38f:	8b 00                	mov    (%rax),%eax
   2b391:	c1 e8 04             	shr    $0x4,%eax
   2b394:	89 c2                	mov    %eax,%edx
   2b396:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b39a:	89 10                	mov    %edx,(%rax)
	for (; s > s0 + sigfigs - (EXT_FRACLBITS / 4) - 1 && s > s0; s--) {
   2b39c:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   2b3a1:	8b 05 65 5a 00 00    	mov    0x5a65(%rip),%eax        # 30e0c <sigfigs.2516>
   2b3a7:	48 98                	cltq   
   2b3a9:	48 8d 50 f7          	lea    -0x9(%rax),%rdx
   2b3ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b3b1:	48 01 d0             	add    %rdx,%rax
   2b3b4:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
   2b3b8:	76 36                	jbe    2b3f0 <__hldtoa+0x22b>
   2b3ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b3be:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2b3c2:	77 b6                	ja     2b37a <__hldtoa+0x1b5>
	for (; s > s0; s--) {
		*s = p->ext_fraclm & 0xf;
		p->ext_fraclm >>= 4;
	}
#endif
	for (; s > s0; s--) {
   2b3c4:	eb 2a                	jmp    2b3f0 <__hldtoa+0x22b>
		*s = p->ext_frach & 0xf;
   2b3c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b3ca:	8b 40 04             	mov    0x4(%rax),%eax
   2b3cd:	83 e0 0f             	and    $0xf,%eax
   2b3d0:	89 c2                	mov    %eax,%edx
   2b3d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b3d6:	88 10                	mov    %dl,(%rax)
		p->ext_frach >>= 4;
   2b3d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b3dc:	8b 40 04             	mov    0x4(%rax),%eax
   2b3df:	c1 e8 04             	shr    $0x4,%eax
   2b3e2:	89 c2                	mov    %eax,%edx
   2b3e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b3e8:	89 50 04             	mov    %edx,0x4(%rax)
	for (; s > s0; s--) {
   2b3eb:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   2b3f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b3f4:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2b3f8:	77 cc                	ja     2b3c6 <__hldtoa+0x201>
	 * At this point, we have snarfed all the bits in the
	 * mantissa, with the possible exception of the highest-order
	 * (partial) nibble, which is dealt with by the next
	 * statement.  We also tack on the implicit normalization bit.
	 */
	*s = p->ext_frach | (1U << ((LDBL_MANT_DIG - 1) % 4));
   2b3fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b3fe:	8b 40 04             	mov    0x4(%rax),%eax
   2b401:	83 c8 08             	or     $0x8,%eax
   2b404:	89 c2                	mov    %eax,%edx
   2b406:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b40a:	88 10                	mov    %dl,(%rax)

	/* If ndigits < 0, we are expected to auto-size the precision. */
	if (ndigits < 0) {
   2b40c:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   2b410:	79 26                	jns    2b438 <__hldtoa+0x273>
		for (ndigits = sigfigs; s0[ndigits - 1] == 0; ndigits--)
   2b412:	8b 05 f4 59 00 00    	mov    0x59f4(%rip),%eax        # 30e0c <sigfigs.2516>
   2b418:	89 45 d4             	mov    %eax,-0x2c(%rbp)
   2b41b:	eb 04                	jmp    2b421 <__hldtoa+0x25c>
   2b41d:	83 6d d4 01          	subl   $0x1,-0x2c(%rbp)
   2b421:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2b424:	48 98                	cltq   
   2b426:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   2b42a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b42e:	48 01 d0             	add    %rdx,%rax
   2b431:	0f b6 00             	movzbl (%rax),%eax
   2b434:	84 c0                	test   %al,%al
   2b436:	74 e5                	je     2b41d <__hldtoa+0x258>
			;
	}

	if (sigfigs > ndigits && s0[ndigits] != 0)
   2b438:	8b 05 ce 59 00 00    	mov    0x59ce(%rip),%eax        # 30e0c <sigfigs.2516>
   2b43e:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
   2b441:	7d 35                	jge    2b478 <__hldtoa+0x2b3>
   2b443:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2b446:	48 63 d0             	movslq %eax,%rdx
   2b449:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b44d:	48 01 d0             	add    %rdx,%rax
   2b450:	0f b6 00             	movzbl (%rax),%eax
   2b453:	84 c0                	test   %al,%al
   2b455:	74 21                	je     2b478 <__hldtoa+0x2b3>
		dorounding(s0, ndigits, p->ext_sign, decpt);
   2b457:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b45b:	0f b6 40 09          	movzbl 0x9(%rax),%eax
   2b45f:	c0 e8 07             	shr    $0x7,%al
   2b462:	0f b6 d0             	movzbl %al,%edx
   2b465:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
   2b469:	8b 75 d4             	mov    -0x2c(%rbp),%esi
   2b46c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b470:	48 89 c7             	mov    %rax,%rdi
   2b473:	e8 6c f9 ff ff       	callq  2ade4 <dorounding>

	s = s0 + ndigits;
   2b478:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2b47b:	48 63 d0             	movslq %eax,%rdx
   2b47e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b482:	48 01 d0             	add    %rdx,%rax
   2b485:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (rve != NULL)
   2b489:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
   2b48e:	74 0b                	je     2b49b <__hldtoa+0x2d6>
		*rve = s;
   2b490:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2b494:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2b498:	48 89 10             	mov    %rdx,(%rax)
	*s-- = '\0';
   2b49b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b49f:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
   2b4a3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2b4a7:	c6 00 00             	movb   $0x0,(%rax)
	for (; s >= s0; s--)
   2b4aa:	eb 21                	jmp    2b4cd <__hldtoa+0x308>
		*s = xdigs[(unsigned int)*s];
   2b4ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b4b0:	0f b6 00             	movzbl (%rax),%eax
   2b4b3:	0f be c0             	movsbl %al,%eax
   2b4b6:	89 c2                	mov    %eax,%edx
   2b4b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2b4bc:	48 01 d0             	add    %rdx,%rax
   2b4bf:	0f b6 10             	movzbl (%rax),%edx
   2b4c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b4c6:	88 10                	mov    %dl,(%rax)
	for (; s >= s0; s--)
   2b4c8:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   2b4cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b4d1:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2b4d5:	73 d5                	jae    2b4ac <__hldtoa+0x2e7>

	return (s0);
   2b4d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
   2b4db:	c9                   	leaveq 
   2b4dc:	c3                   	retq   

000000000002b4dd <__ldtoa>:
 * use INT_MAX in ldtoa() instead.
 */
char *
__ldtoa(long double *ld, int mode, int ndigits, int *decpt, int *sign,
    char **rve)
{
   2b4dd:	55                   	push   %rbp
   2b4de:	48 89 e5             	mov    %rsp,%rbp
   2b4e1:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
   2b4e5:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   2b4e9:	89 75 a4             	mov    %esi,-0x5c(%rbp)
   2b4ec:	89 55 a0             	mov    %edx,-0x60(%rbp)
   2b4ef:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   2b4f3:	4c 89 45 90          	mov    %r8,-0x70(%rbp)
   2b4f7:	4c 89 4d 88          	mov    %r9,-0x78(%rbp)
   2b4fb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   2b502:	00 00 
   2b504:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2b508:	31 c0                	xor    %eax,%eax
	FPI fpi = {
   2b50a:	c7 45 d0 40 00 00 00 	movl   $0x40,-0x30(%rbp)
   2b511:	c7 45 d4 c3 bf ff ff 	movl   $0xffffbfc3,-0x2c(%rbp)
   2b518:	c7 45 d8 c0 3f 00 00 	movl   $0x3fc0,-0x28(%rbp)
   2b51f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
   2b526:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
		0
#endif
	};
	int be, kind;
	char *ret;
	struct ieee_ext *p = (struct ieee_ext *)ld;
   2b52d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2b531:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	uint32_t bits[(LDBL_MANT_DIG + 31) / 32];
	void *vbits = bits;
   2b535:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
   2b539:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	/*
	 * gdtoa doesn't know anything about the sign of the number, so
	 * if the number is negative, we need to swap rounding modes of
	 * 2 (upwards) and 3 (downwards).
	 */
	*sign = p->ext_sign;
   2b53d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2b541:	0f b6 40 09          	movzbl 0x9(%rax),%eax
   2b545:	c0 e8 07             	shr    $0x7,%al
   2b548:	0f b6 d0             	movzbl %al,%edx
   2b54b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2b54f:	89 10                	mov    %edx,(%rax)
	fpi.rounding ^= (fpi.rounding >> 1) & p->ext_sign;
   2b551:	8b 55 dc             	mov    -0x24(%rbp),%edx
   2b554:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2b557:	d1 f8                	sar    %eax
   2b559:	89 c1                	mov    %eax,%ecx
   2b55b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2b55f:	0f b6 40 09          	movzbl 0x9(%rax),%eax
   2b563:	c0 e8 07             	shr    $0x7,%al
   2b566:	0f b6 c0             	movzbl %al,%eax
   2b569:	21 c8                	and    %ecx,%eax
   2b56b:	31 d0                	xor    %edx,%eax
   2b56d:	89 45 dc             	mov    %eax,-0x24(%rbp)

	be = p->ext_exp - (LDBL_MAX_EXP - 1) - (LDBL_MANT_DIG - 1);
   2b570:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2b574:	0f b7 40 08          	movzwl 0x8(%rax),%eax
   2b578:	66 25 ff 7f          	and    $0x7fff,%ax
   2b57c:	0f b7 c0             	movzwl %ax,%eax
   2b57f:	2d 3e 40 00 00       	sub    $0x403e,%eax
   2b584:	89 45 b4             	mov    %eax,-0x4c(%rbp)
	EXT_TO_ARRAY32(p, bits);
   2b587:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2b58b:	8b 00                	mov    (%rax),%eax
   2b58d:	89 45 f0             	mov    %eax,-0x10(%rbp)
   2b590:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2b594:	8b 40 04             	mov    0x4(%rax),%eax
   2b597:	89 45 f4             	mov    %eax,-0xc(%rbp)

	switch (fpclassify(*ld)) {
   2b59a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2b59e:	db 28                	fldt   (%rax)
   2b5a0:	48 8d 64 24 f0       	lea    -0x10(%rsp),%rsp
   2b5a5:	db 3c 24             	fstpt  (%rsp)
   2b5a8:	e8 93 1a 00 00       	callq  2d040 <__fpclassifyl>
   2b5ad:	48 83 c4 10          	add    $0x10,%rsp
   2b5b1:	83 f8 04             	cmp    $0x4,%eax
   2b5b4:	77 54                	ja     2b60a <__ldtoa+0x12d>
   2b5b6:	89 c0                	mov    %eax,%eax
   2b5b8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2b5bf:	00 
   2b5c0:	48 8d 05 49 58 00 00 	lea    0x5849(%rip),%rax        # 30e10 <sigfigs.2516+0x4>
   2b5c7:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   2b5ca:	48 63 d0             	movslq %eax,%rdx
   2b5cd:	48 8d 05 3c 58 00 00 	lea    0x583c(%rip),%rax        # 30e10 <sigfigs.2516+0x4>
   2b5d4:	48 01 d0             	add    %rdx,%rax
   2b5d7:	ff e0                	jmpq   *%rax
	case FP_NORMAL:
		kind = STRTOG_Normal;
   2b5d9:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
#ifdef EXT_IMPLICIT_NBIT
		bits[LDBL_MANT_DIG / 32] |= 1 << ((LDBL_MANT_DIG - 1) % 32);
#endif /* EXT_IMPLICIT_NBIT */
		break;
   2b5e0:	eb 2d                	jmp    2b60f <__ldtoa+0x132>
	case FP_ZERO:
		kind = STRTOG_Zero;
   2b5e2:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
		break;
   2b5e9:	eb 24                	jmp    2b60f <__ldtoa+0x132>
	case FP_SUBNORMAL:
		kind = STRTOG_Denormal;
   2b5eb:	c7 45 b0 02 00 00 00 	movl   $0x2,-0x50(%rbp)
		be++;
   2b5f2:	83 45 b4 01          	addl   $0x1,-0x4c(%rbp)
		break;
   2b5f6:	eb 17                	jmp    2b60f <__ldtoa+0x132>
	case FP_INFINITE:
		kind = STRTOG_Infinite;
   2b5f8:	c7 45 b0 03 00 00 00 	movl   $0x3,-0x50(%rbp)
		break;
   2b5ff:	eb 0e                	jmp    2b60f <__ldtoa+0x132>
	case FP_NAN:
		kind = STRTOG_NaN;
   2b601:	c7 45 b0 04 00 00 00 	movl   $0x4,-0x50(%rbp)
		break;
   2b608:	eb 05                	jmp    2b60f <__ldtoa+0x132>
	default:
		abort();
   2b60a:	e8 7f 49 00 00       	callq  2ff8e <abort>
	}

	ret = gdtoa(&fpi, be, vbits, &kind, mode, ndigits, decpt, rve);
   2b60f:	44 8b 45 a0          	mov    -0x60(%rbp),%r8d
   2b613:	8b 7d a4             	mov    -0x5c(%rbp),%edi
   2b616:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
   2b61a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
   2b61e:	8b 75 b4             	mov    -0x4c(%rbp),%esi
   2b621:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
   2b625:	ff 75 88             	pushq  -0x78(%rbp)
   2b628:	ff 75 98             	pushq  -0x68(%rbp)
   2b62b:	45 89 c1             	mov    %r8d,%r9d
   2b62e:	41 89 f8             	mov    %edi,%r8d
   2b631:	48 89 c7             	mov    %rax,%rdi
   2b634:	e8 26 1c 00 00       	callq  2d25f <__gdtoa>
   2b639:	48 83 c4 10          	add    $0x10,%rsp
   2b63d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	if (*decpt == -32768)
   2b641:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2b645:	8b 00                	mov    (%rax),%eax
   2b647:	3d 00 80 ff ff       	cmp    $0xffff8000,%eax
   2b64c:	75 0a                	jne    2b658 <__ldtoa+0x17b>
		*decpt = INT_MAX;
   2b64e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2b652:	c7 00 ff ff ff 7f    	movl   $0x7fffffff,(%rax)
	return ret;
   2b658:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
}
   2b65c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
   2b660:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
   2b667:	00 00 
   2b669:	74 05                	je     2b670 <__ldtoa+0x193>
   2b66b:	e8 28 99 fd ff       	callq  4f98 <__stack_chk_fail>
   2b670:	c9                   	leaveq 
   2b671:	c3                   	retq   

000000000002b672 <memchr>:

#include <string.h>

void *
memchr(const void *s, int c, size_t n)
{
   2b672:	55                   	push   %rbp
   2b673:	48 89 e5             	mov    %rsp,%rbp
   2b676:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2b67a:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   2b67d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	if (n != 0) {
   2b681:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   2b686:	74 34                	je     2b6bc <memchr+0x4a>
		const unsigned char *p = (const unsigned char *)s;
   2b688:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b68c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

		do {
			if (*p++ == (unsigned char)c)
   2b690:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b694:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2b698:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
   2b69c:	0f b6 00             	movzbl (%rax),%eax
   2b69f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
   2b6a2:	38 d0                	cmp    %dl,%al
   2b6a4:	75 0a                	jne    2b6b0 <memchr+0x3e>
				return ((void *)(p - 1));
   2b6a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b6aa:	48 83 e8 01          	sub    $0x1,%rax
   2b6ae:	eb 11                	jmp    2b6c1 <memchr+0x4f>
		} while (--n != 0);
   2b6b0:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
   2b6b5:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   2b6ba:	75 d4                	jne    2b690 <memchr+0x1e>
	}
	return (NULL);
   2b6bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   2b6c1:	5d                   	pop    %rbp
   2b6c2:	c3                   	retq   

000000000002b6c3 <memmove>:
/*
 * Copy a block of memory, handling overlap.
 */
void *
memmove(void *dst0, const void *src0, size_t length)
{
   2b6c3:	55                   	push   %rbp
   2b6c4:	48 89 e5             	mov    %rsp,%rbp
   2b6c7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2b6cb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   2b6cf:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	char *dst = dst0;
   2b6d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2b6d7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	const char *src = src0;
   2b6db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2b6df:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	size_t t;

	if (length == 0 || dst == src)		/* nothing to do */
   2b6e3:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
   2b6e8:	0f 84 ff 01 00 00    	je     2b8ed <memmove+0x22a>
   2b6ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b6f2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   2b6f6:	0f 84 f1 01 00 00    	je     2b8ed <memmove+0x22a>
	 * Macros: loop-t-times; and loop-t-times, t>0
	 */
#define	TLOOP(s) if (t) TLOOP1(s)
#define	TLOOP1(s) do { s; } while (--t)

	if ((unsigned long)dst < (unsigned long)src) {
   2b6fc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2b700:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b704:	48 39 c2             	cmp    %rax,%rdx
   2b707:	0f 83 fb 00 00 00    	jae    2b808 <memmove+0x145>
		/*
		 * Copy forward.
		 */
		t = (long)src;	/* only need low bits */
   2b70d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b711:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if ((t | (long)dst) & wmask) {
   2b715:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b719:	48 0b 45 f8          	or     -0x8(%rbp),%rax
   2b71d:	83 e0 07             	and    $0x7,%eax
   2b720:	48 85 c0             	test   %rax,%rax
   2b723:	74 68                	je     2b78d <memmove+0xca>
			/*
			 * Try to align operands.  This cannot be done
			 * unless the low bits match.
			 */
			if ((t ^ (long)dst) & wmask || length < wsize)
   2b725:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b729:	48 33 45 f8          	xor    -0x8(%rbp),%rax
   2b72d:	83 e0 07             	and    $0x7,%eax
   2b730:	48 85 c0             	test   %rax,%rax
   2b733:	75 07                	jne    2b73c <memmove+0x79>
   2b735:	48 83 7d c8 07       	cmpq   $0x7,-0x38(%rbp)
   2b73a:	77 0a                	ja     2b746 <memmove+0x83>
				t = length;
   2b73c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b740:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2b744:	eb 16                	jmp    2b75c <memmove+0x99>
			else
				t = wsize - (t & wmask);
   2b746:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b74a:	83 e0 07             	and    $0x7,%eax
   2b74d:	ba 08 00 00 00       	mov    $0x8,%edx
   2b752:	48 29 c2             	sub    %rax,%rdx
   2b755:	48 89 d0             	mov    %rdx,%rax
   2b758:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			length -= t;
   2b75c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b760:	48 29 45 c8          	sub    %rax,-0x38(%rbp)
			TLOOP1(*dst++ = *src++);
   2b764:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2b768:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2b76c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2b770:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b774:	48 8d 48 01          	lea    0x1(%rax),%rcx
   2b778:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   2b77c:	0f b6 12             	movzbl (%rdx),%edx
   2b77f:	88 10                	mov    %dl,(%rax)
   2b781:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   2b786:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b78b:	75 d7                	jne    2b764 <memmove+0xa1>
		}
		/*
		 * Copy whole words, then mop up any trailing bytes.
		 */
		t = length / wsize;
   2b78d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b791:	48 c1 e8 03          	shr    $0x3,%rax
   2b795:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		TLOOP(*(word *)dst = *(word *)src; src += wsize; dst += wsize);
   2b799:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b79e:	74 24                	je     2b7c4 <memmove+0x101>
   2b7a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b7a4:	48 8b 10             	mov    (%rax),%rdx
   2b7a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b7ab:	48 89 10             	mov    %rdx,(%rax)
   2b7ae:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
   2b7b3:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
   2b7b8:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   2b7bd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b7c2:	75 dc                	jne    2b7a0 <memmove+0xdd>
		t = length & wmask;
   2b7c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b7c8:	83 e0 07             	and    $0x7,%eax
   2b7cb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		TLOOP(*dst++ = *src++);
   2b7cf:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b7d4:	0f 84 14 01 00 00    	je     2b8ee <memmove+0x22b>
   2b7da:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
   2b7de:	48 8d 42 01          	lea    0x1(%rdx),%rax
   2b7e2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2b7e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b7ea:	48 8d 48 01          	lea    0x1(%rax),%rcx
   2b7ee:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   2b7f2:	0f b6 12             	movzbl (%rdx),%edx
   2b7f5:	88 10                	mov    %dl,(%rax)
   2b7f7:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   2b7fc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b801:	75 d7                	jne    2b7da <memmove+0x117>
   2b803:	e9 e6 00 00 00       	jmpq   2b8ee <memmove+0x22b>
		/*
		 * Copy backwards.  Otherwise essentially the same.
		 * Alignment works as before, except that it takes
		 * (t&wmask) bytes to align, not wsize-(t&wmask).
		 */
		src += length;
   2b808:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b80c:	48 01 45 f0          	add    %rax,-0x10(%rbp)
		dst += length;
   2b810:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b814:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		t = (long)src;
   2b818:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b81c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if ((t | (long)dst) & wmask) {
   2b820:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b824:	48 0b 45 f8          	or     -0x8(%rbp),%rax
   2b828:	83 e0 07             	and    $0x7,%eax
   2b82b:	48 85 c0             	test   %rax,%rax
   2b82e:	74 51                	je     2b881 <memmove+0x1be>
			if ((t ^ (long)dst) & wmask || length <= wsize)
   2b830:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b834:	48 33 45 f8          	xor    -0x8(%rbp),%rax
   2b838:	83 e0 07             	and    $0x7,%eax
   2b83b:	48 85 c0             	test   %rax,%rax
   2b83e:	75 07                	jne    2b847 <memmove+0x184>
   2b840:	48 83 7d c8 08       	cmpq   $0x8,-0x38(%rbp)
   2b845:	77 0a                	ja     2b851 <memmove+0x18e>
				t = length;
   2b847:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b84b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2b84f:	eb 05                	jmp    2b856 <memmove+0x193>
			else
				t &= wmask;
   2b851:	48 83 65 f8 07       	andq   $0x7,-0x8(%rbp)
			length -= t;
   2b856:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b85a:	48 29 45 c8          	sub    %rax,-0x38(%rbp)
			TLOOP1(*--dst = *--src);
   2b85e:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
   2b863:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   2b868:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b86c:	0f b6 10             	movzbl (%rax),%edx
   2b86f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b873:	88 10                	mov    %dl,(%rax)
   2b875:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   2b87a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b87f:	75 dd                	jne    2b85e <memmove+0x19b>
		}
		t = length / wsize;
   2b881:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b885:	48 c1 e8 03          	shr    $0x3,%rax
   2b889:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		TLOOP(src -= wsize; dst -= wsize; *(word *)dst = *(word *)src);
   2b88d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b892:	74 24                	je     2b8b8 <memmove+0x1f5>
   2b894:	48 83 6d f0 08       	subq   $0x8,-0x10(%rbp)
   2b899:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
   2b89e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b8a2:	48 8b 10             	mov    (%rax),%rdx
   2b8a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b8a9:	48 89 10             	mov    %rdx,(%rax)
   2b8ac:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   2b8b1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b8b6:	75 dc                	jne    2b894 <memmove+0x1d1>
		t = length & wmask;
   2b8b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2b8bc:	83 e0 07             	and    $0x7,%eax
   2b8bf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		TLOOP(*--dst = *--src);
   2b8c3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b8c8:	74 23                	je     2b8ed <memmove+0x22a>
   2b8ca:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
   2b8cf:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
   2b8d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2b8d8:	0f b6 10             	movzbl (%rax),%edx
   2b8db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2b8df:	88 10                	mov    %dl,(%rax)
   2b8e1:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
   2b8e6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b8eb:	75 dd                	jne    2b8ca <memmove+0x207>
	}
done:
   2b8ed:	90                   	nop
	return (dst0);
   2b8ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
   2b8f2:	5d                   	pop    %rbp
   2b8f3:	c3                   	retq   

000000000002b8f4 <__Balloc_D2A>:
#ifdef KR_headers
	(k) int k;
#else
	(int k)
#endif
{
   2b8f4:	55                   	push   %rbp
   2b8f5:	48 89 e5             	mov    %rsp,%rbp
   2b8f8:	48 83 ec 20          	sub    $0x20,%rsp
   2b8fc:	89 7d ec             	mov    %edi,-0x14(%rbp)
	Bigint *rv;
#ifndef Omit_Private_Memory
	unsigned int len;
#endif

	ACQUIRE_DTOA_LOCK(0);
   2b8ff:	48 8d 3d 82 ae 20 00 	lea    0x20ae82(%rip),%rdi        # 236788 <__dtoa_locks>
   2b906:	e8 af 35 fe ff       	callq  eeba <sgx_spin_lock>
	/* The k > Kmax case does not need ACQUIRE_DTOA_LOCK(0), */
	/* but this case seems very unlikely. */
	if (k <= Kmax && (rv = freelist[k]) !=0) {
   2b90b:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
   2b90f:	7f 47                	jg     2b958 <__Balloc_D2A+0x64>
   2b911:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2b914:	48 98                	cltq   
   2b916:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2b91d:	00 
   2b91e:	48 8d 05 fb a4 20 00 	lea    0x20a4fb(%rip),%rax        # 235e20 <freelist>
   2b925:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
   2b929:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2b92d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b932:	74 24                	je     2b958 <__Balloc_D2A+0x64>
		freelist[k] = rv->next;
   2b934:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2b938:	48 8b 10             	mov    (%rax),%rdx
   2b93b:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2b93e:	48 98                	cltq   
   2b940:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   2b947:	00 
   2b948:	48 8d 05 d1 a4 20 00 	lea    0x20a4d1(%rip),%rax        # 235e20 <freelist>
   2b94f:	48 89 14 01          	mov    %rdx,(%rcx,%rax,1)
   2b953:	e9 b8 00 00 00       	jmpq   2ba10 <__Balloc_D2A+0x11c>
		}
	else {
		x = 1 << k;
   2b958:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2b95b:	ba 01 00 00 00       	mov    $0x1,%edx
   2b960:	89 c1                	mov    %eax,%ecx
   2b962:	d3 e2                	shl    %cl,%edx
   2b964:	89 d0                	mov    %edx,%eax
   2b966:	89 45 f0             	mov    %eax,-0x10(%rbp)
#ifdef Omit_Private_Memory
		rv = (Bigint *)MALLOC(sizeof(Bigint) + (x-1)*sizeof(ULong));
		if (rv == NULL)
			return (NULL);
#else
		len = (sizeof(Bigint) + (x-1)*sizeof(ULong) + sizeof(double) - 1)
   2b969:	8b 45 f0             	mov    -0x10(%rbp),%eax
   2b96c:	83 e8 01             	sub    $0x1,%eax
   2b96f:	48 98                	cltq   
   2b971:	48 83 c0 0a          	add    $0xa,%rax
   2b975:	48 c1 e0 02          	shl    $0x2,%rax
   2b979:	48 83 e8 01          	sub    $0x1,%rax
			/sizeof(double);
   2b97d:	48 c1 e8 03          	shr    $0x3,%rax
		len = (sizeof(Bigint) + (x-1)*sizeof(ULong) + sizeof(double) - 1)
   2b981:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (k <= Kmax && pmem_next - private_mem + len <= PRIVATE_mem) {
   2b984:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
   2b988:	7f 51                	jg     2b9db <__Balloc_D2A+0xe7>
   2b98a:	48 8b 05 0f 9f 20 00 	mov    0x209f0f(%rip),%rax        # 2358a0 <pmem_next>
   2b991:	48 89 c2             	mov    %rax,%rdx
   2b994:	48 8d 05 e5 a4 20 00 	lea    0x20a4e5(%rip),%rax        # 235e80 <private_mem>
   2b99b:	48 29 c2             	sub    %rax,%rdx
   2b99e:	48 89 d0             	mov    %rdx,%rax
   2b9a1:	48 c1 f8 03          	sar    $0x3,%rax
   2b9a5:	48 89 c2             	mov    %rax,%rdx
   2b9a8:	8b 45 f4             	mov    -0xc(%rbp),%eax
   2b9ab:	48 01 d0             	add    %rdx,%rax
   2b9ae:	48 3d 20 01 00 00    	cmp    $0x120,%rax
   2b9b4:	77 25                	ja     2b9db <__Balloc_D2A+0xe7>
			rv = (Bigint*)pmem_next;
   2b9b6:	48 8b 05 e3 9e 20 00 	mov    0x209ee3(%rip),%rax        # 2358a0 <pmem_next>
   2b9bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			pmem_next += len;
   2b9c1:	48 8b 05 d8 9e 20 00 	mov    0x209ed8(%rip),%rax        # 2358a0 <pmem_next>
   2b9c8:	8b 55 f4             	mov    -0xc(%rbp),%edx
   2b9cb:	48 c1 e2 03          	shl    $0x3,%rdx
   2b9cf:	48 01 d0             	add    %rdx,%rax
   2b9d2:	48 89 05 c7 9e 20 00 	mov    %rax,0x209ec7(%rip)        # 2358a0 <pmem_next>
   2b9d9:	eb 21                	jmp    2b9fc <__Balloc_D2A+0x108>
			}
		else {
			rv = (Bigint*)MALLOC(len*sizeof(double));
   2b9db:	8b 45 f4             	mov    -0xc(%rbp),%eax
   2b9de:	48 c1 e0 03          	shl    $0x3,%rax
   2b9e2:	48 89 c7             	mov    %rax,%rdi
   2b9e5:	e8 3b f7 fd ff       	callq  b125 <dlmalloc>
   2b9ea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (rv == NULL)
   2b9ee:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2b9f3:	75 07                	jne    2b9fc <__Balloc_D2A+0x108>
				return (NULL);
   2b9f5:	b8 00 00 00 00       	mov    $0x0,%eax
   2b9fa:	eb 3d                	jmp    2ba39 <__Balloc_D2A+0x145>
		}
#endif
		rv->k = k;
   2b9fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ba00:	8b 55 ec             	mov    -0x14(%rbp),%edx
   2ba03:	89 50 08             	mov    %edx,0x8(%rax)
		rv->maxwds = x;
   2ba06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ba0a:	8b 55 f0             	mov    -0x10(%rbp),%edx
   2ba0d:	89 50 0c             	mov    %edx,0xc(%rax)
		}
	FREE_DTOA_LOCK(0);
   2ba10:	48 8d 3d 71 ad 20 00 	lea    0x20ad71(%rip),%rdi        # 236788 <__dtoa_locks>
   2ba17:	e8 05 35 fe ff       	callq  ef21 <sgx_spin_unlock>
	rv->sign = rv->wds = 0;
   2ba1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ba20:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
   2ba27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ba2b:	8b 50 14             	mov    0x14(%rax),%edx
   2ba2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ba32:	89 50 10             	mov    %edx,0x10(%rax)
	return rv;
   2ba35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   2ba39:	c9                   	leaveq 
   2ba3a:	c3                   	retq   

000000000002ba3b <__Bfree_D2A>:
#ifdef KR_headers
	(v) Bigint *v;
#else
	(Bigint *v)
#endif
{
   2ba3b:	55                   	push   %rbp
   2ba3c:	48 89 e5             	mov    %rsp,%rbp
   2ba3f:	48 83 ec 10          	sub    $0x10,%rsp
   2ba43:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (v) {
   2ba47:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2ba4c:	74 75                	je     2bac3 <__Bfree_D2A+0x88>
		if (v->k > Kmax)
   2ba4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ba52:	8b 40 08             	mov    0x8(%rax),%eax
   2ba55:	83 f8 09             	cmp    $0x9,%eax
   2ba58:	7e 0e                	jle    2ba68 <__Bfree_D2A+0x2d>
#ifdef FREE
			FREE((void*)v);
#else
			free((void*)v);
   2ba5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ba5e:	48 89 c7             	mov    %rax,%rdi
   2ba61:	e8 b6 01 fe ff       	callq  bc1c <dlfree>
			v->next = freelist[v->k];
			freelist[v->k] = v;
			FREE_DTOA_LOCK(0);
			}
		}
	}
   2ba66:	eb 5b                	jmp    2bac3 <__Bfree_D2A+0x88>
			ACQUIRE_DTOA_LOCK(0);
   2ba68:	48 8d 3d 19 ad 20 00 	lea    0x20ad19(%rip),%rdi        # 236788 <__dtoa_locks>
   2ba6f:	e8 46 34 fe ff       	callq  eeba <sgx_spin_lock>
			v->next = freelist[v->k];
   2ba74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ba78:	8b 40 08             	mov    0x8(%rax),%eax
   2ba7b:	48 98                	cltq   
   2ba7d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2ba84:	00 
   2ba85:	48 8d 05 94 a3 20 00 	lea    0x20a394(%rip),%rax        # 235e20 <freelist>
   2ba8c:	48 8b 14 02          	mov    (%rdx,%rax,1),%rdx
   2ba90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ba94:	48 89 10             	mov    %rdx,(%rax)
			freelist[v->k] = v;
   2ba97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ba9b:	8b 40 08             	mov    0x8(%rax),%eax
   2ba9e:	48 98                	cltq   
   2baa0:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
   2baa7:	00 
   2baa8:	48 8d 05 71 a3 20 00 	lea    0x20a371(%rip),%rax        # 235e20 <freelist>
   2baaf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2bab3:	48 89 14 01          	mov    %rdx,(%rcx,%rax,1)
			FREE_DTOA_LOCK(0);
   2bab7:	48 8d 3d ca ac 20 00 	lea    0x20acca(%rip),%rdi        # 236788 <__dtoa_locks>
   2babe:	e8 5e 34 fe ff       	callq  ef21 <sgx_spin_unlock>
	}
   2bac3:	90                   	nop
   2bac4:	c9                   	leaveq 
   2bac5:	c3                   	retq   

000000000002bac6 <__lo0bits_D2A>:
#ifdef KR_headers
	(y) ULong *y;
#else
	(ULong *y)
#endif
{
   2bac6:	55                   	push   %rbp
   2bac7:	48 89 e5             	mov    %rsp,%rbp
   2baca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int k;
	ULong x = *y;
   2bace:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2bad2:	8b 00                	mov    (%rax),%eax
   2bad4:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (x & 7) {
   2bad7:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2bada:	83 e0 07             	and    $0x7,%eax
   2badd:	85 c0                	test   %eax,%eax
   2badf:	74 4a                	je     2bb2b <__lo0bits_D2A+0x65>
		if (x & 1)
   2bae1:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2bae4:	83 e0 01             	and    $0x1,%eax
   2bae7:	85 c0                	test   %eax,%eax
   2bae9:	74 0a                	je     2baf5 <__lo0bits_D2A+0x2f>
			return 0;
   2baeb:	b8 00 00 00 00       	mov    $0x0,%eax
   2baf0:	e9 b2 00 00 00       	jmpq   2bba7 <__lo0bits_D2A+0xe1>
		if (x & 2) {
   2baf5:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2baf8:	83 e0 02             	and    $0x2,%eax
   2bafb:	85 c0                	test   %eax,%eax
   2bafd:	74 17                	je     2bb16 <__lo0bits_D2A+0x50>
			*y = x >> 1;
   2baff:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2bb02:	d1 e8                	shr    %eax
   2bb04:	89 c2                	mov    %eax,%edx
   2bb06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2bb0a:	89 10                	mov    %edx,(%rax)
			return 1;
   2bb0c:	b8 01 00 00 00       	mov    $0x1,%eax
   2bb11:	e9 91 00 00 00       	jmpq   2bba7 <__lo0bits_D2A+0xe1>
			}
		*y = x >> 2;
   2bb16:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2bb19:	c1 e8 02             	shr    $0x2,%eax
   2bb1c:	89 c2                	mov    %eax,%edx
   2bb1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2bb22:	89 10                	mov    %edx,(%rax)
		return 2;
   2bb24:	b8 02 00 00 00       	mov    $0x2,%eax
   2bb29:	eb 7c                	jmp    2bba7 <__lo0bits_D2A+0xe1>
		}
	k = 0;
   2bb2b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	if (!(x & 0xffff)) {
   2bb32:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2bb35:	0f b7 c0             	movzwl %ax,%eax
   2bb38:	85 c0                	test   %eax,%eax
   2bb3a:	75 0b                	jne    2bb47 <__lo0bits_D2A+0x81>
		k = 16;
   2bb3c:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
		x >>= 16;
   2bb43:	c1 6d fc 10          	shrl   $0x10,-0x4(%rbp)
		}
	if (!(x & 0xff)) {
   2bb47:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2bb4a:	0f b6 c0             	movzbl %al,%eax
   2bb4d:	85 c0                	test   %eax,%eax
   2bb4f:	75 08                	jne    2bb59 <__lo0bits_D2A+0x93>
		k += 8;
   2bb51:	83 45 f8 08          	addl   $0x8,-0x8(%rbp)
		x >>= 8;
   2bb55:	c1 6d fc 08          	shrl   $0x8,-0x4(%rbp)
		}
	if (!(x & 0xf)) {
   2bb59:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2bb5c:	83 e0 0f             	and    $0xf,%eax
   2bb5f:	85 c0                	test   %eax,%eax
   2bb61:	75 08                	jne    2bb6b <__lo0bits_D2A+0xa5>
		k += 4;
   2bb63:	83 45 f8 04          	addl   $0x4,-0x8(%rbp)
		x >>= 4;
   2bb67:	c1 6d fc 04          	shrl   $0x4,-0x4(%rbp)
		}
	if (!(x & 0x3)) {
   2bb6b:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2bb6e:	83 e0 03             	and    $0x3,%eax
   2bb71:	85 c0                	test   %eax,%eax
   2bb73:	75 08                	jne    2bb7d <__lo0bits_D2A+0xb7>
		k += 2;
   2bb75:	83 45 f8 02          	addl   $0x2,-0x8(%rbp)
		x >>= 2;
   2bb79:	c1 6d fc 02          	shrl   $0x2,-0x4(%rbp)
		}
	if (!(x & 1)) {
   2bb7d:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2bb80:	83 e0 01             	and    $0x1,%eax
   2bb83:	85 c0                	test   %eax,%eax
   2bb85:	75 14                	jne    2bb9b <__lo0bits_D2A+0xd5>
		k++;
   2bb87:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
		x >>= 1;
   2bb8b:	d1 6d fc             	shrl   -0x4(%rbp)
		if (!x)
   2bb8e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
   2bb92:	75 07                	jne    2bb9b <__lo0bits_D2A+0xd5>
			return 32;
   2bb94:	b8 20 00 00 00       	mov    $0x20,%eax
   2bb99:	eb 0c                	jmp    2bba7 <__lo0bits_D2A+0xe1>
		}
	*y = x;
   2bb9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2bb9f:	8b 55 fc             	mov    -0x4(%rbp),%edx
   2bba2:	89 10                	mov    %edx,(%rax)
	return k;
   2bba4:	8b 45 f8             	mov    -0x8(%rbp),%eax
	}
   2bba7:	5d                   	pop    %rbp
   2bba8:	c3                   	retq   

000000000002bba9 <__multadd_D2A>:
#ifdef KR_headers
	(b, m, a) Bigint *b; int m, a;
#else
	(Bigint *b, int m, int a)	/* multiply by m and add a */
#endif
{
   2bba9:	55                   	push   %rbp
   2bbaa:	48 89 e5             	mov    %rsp,%rbp
   2bbad:	48 83 ec 40          	sub    $0x40,%rsp
   2bbb1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   2bbb5:	89 75 c4             	mov    %esi,-0x3c(%rbp)
   2bbb8:	89 55 c0             	mov    %edx,-0x40(%rbp)
	ULong xi, z;
#endif
#endif
	Bigint *b1;

	wds = b->wds;
   2bbbb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bbbf:	8b 40 14             	mov    0x14(%rax),%eax
   2bbc2:	89 45 e0             	mov    %eax,-0x20(%rbp)
	x = b->x;
   2bbc5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bbc9:	48 83 c0 18          	add    $0x18,%rax
   2bbcd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	i = 0;
   2bbd1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
	carry = a;
   2bbd8:	8b 45 c0             	mov    -0x40(%rbp),%eax
   2bbdb:	89 45 dc             	mov    %eax,-0x24(%rbp)
		y = *x * (ULLong)m + carry;
		carry = y >> 32;
		*x++ = y & 0xffffffffUL;
#else
#ifdef Pack_32
		xi = *x;
   2bbde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2bbe2:	8b 00                	mov    (%rax),%eax
   2bbe4:	89 45 e4             	mov    %eax,-0x1c(%rbp)
		y = (xi & 0xffff) * m + carry;
   2bbe7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2bbea:	0f b7 d0             	movzwl %ax,%edx
   2bbed:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   2bbf0:	0f af d0             	imul   %eax,%edx
   2bbf3:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2bbf6:	01 d0                	add    %edx,%eax
   2bbf8:	89 45 e8             	mov    %eax,-0x18(%rbp)
		z = (xi >> 16) * m + (y >> 16);
   2bbfb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2bbfe:	c1 e8 10             	shr    $0x10,%eax
   2bc01:	89 c2                	mov    %eax,%edx
   2bc03:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   2bc06:	0f af c2             	imul   %edx,%eax
   2bc09:	8b 55 e8             	mov    -0x18(%rbp),%edx
   2bc0c:	c1 ea 10             	shr    $0x10,%edx
   2bc0f:	01 d0                	add    %edx,%eax
   2bc11:	89 45 ec             	mov    %eax,-0x14(%rbp)
		carry = z >> 16;
   2bc14:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2bc17:	c1 e8 10             	shr    $0x10,%eax
   2bc1a:	89 45 dc             	mov    %eax,-0x24(%rbp)
		*x++ = (z << 16) + (y & 0xffff);
   2bc1d:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2bc20:	c1 e0 10             	shl    $0x10,%eax
   2bc23:	89 c6                	mov    %eax,%esi
   2bc25:	8b 45 e8             	mov    -0x18(%rbp),%eax
   2bc28:	0f b7 c8             	movzwl %ax,%ecx
   2bc2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2bc2f:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2bc33:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   2bc37:	8d 14 0e             	lea    (%rsi,%rcx,1),%edx
   2bc3a:	89 10                	mov    %edx,(%rax)
		carry = y >> 16;
		*x++ = y & 0xffff;
#endif
#endif
		}
		while(++i < wds);
   2bc3c:	83 45 d8 01          	addl   $0x1,-0x28(%rbp)
   2bc40:	8b 45 d8             	mov    -0x28(%rbp),%eax
   2bc43:	3b 45 e0             	cmp    -0x20(%rbp),%eax
   2bc46:	7c 96                	jl     2bbde <__multadd_D2A+0x35>
	if (carry) {
   2bc48:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
   2bc4c:	0f 84 97 00 00 00    	je     2bce9 <__multadd_D2A+0x140>
		if (wds >= b->maxwds) {
   2bc52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bc56:	8b 40 0c             	mov    0xc(%rax),%eax
   2bc59:	39 45 e0             	cmp    %eax,-0x20(%rbp)
   2bc5c:	7c 67                	jl     2bcc5 <__multadd_D2A+0x11c>
			b1 = Balloc(b->k+1);
   2bc5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bc62:	8b 40 08             	mov    0x8(%rax),%eax
   2bc65:	83 c0 01             	add    $0x1,%eax
   2bc68:	89 c7                	mov    %eax,%edi
   2bc6a:	e8 85 fc ff ff       	callq  2b8f4 <__Balloc_D2A>
   2bc6f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (b1 == NULL)
   2bc73:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2bc78:	75 07                	jne    2bc81 <__multadd_D2A+0xd8>
				return (NULL);
   2bc7a:	b8 00 00 00 00       	mov    $0x0,%eax
   2bc7f:	eb 6c                	jmp    2bced <__multadd_D2A+0x144>
			Bcopy(b1, b);
   2bc81:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bc85:	8b 40 14             	mov    0x14(%rax),%eax
   2bc88:	48 98                	cltq   
   2bc8a:	48 83 c0 02          	add    $0x2,%rax
   2bc8e:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2bc95:	00 
   2bc96:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bc9a:	48 8d 48 10          	lea    0x10(%rax),%rcx
   2bc9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2bca2:	48 83 c0 10          	add    $0x10,%rax
   2bca6:	48 89 ce             	mov    %rcx,%rsi
   2bca9:	48 89 c7             	mov    %rax,%rdi
   2bcac:	e8 39 2b fe ff       	callq  e7ea <memcpy>
			Bfree(b);
   2bcb1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bcb5:	48 89 c7             	mov    %rax,%rdi
   2bcb8:	e8 7e fd ff ff       	callq  2ba3b <__Bfree_D2A>
			b = b1;
   2bcbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2bcc1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			}
		b->x[wds++] = carry;
   2bcc5:	8b 45 e0             	mov    -0x20(%rbp),%eax
   2bcc8:	8d 50 01             	lea    0x1(%rax),%edx
   2bccb:	89 55 e0             	mov    %edx,-0x20(%rbp)
   2bcce:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
   2bcd2:	48 98                	cltq   
   2bcd4:	48 8d 48 04          	lea    0x4(%rax),%rcx
   2bcd8:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2bcdb:	89 44 8a 08          	mov    %eax,0x8(%rdx,%rcx,4)
		b->wds = wds;
   2bcdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bce3:	8b 55 e0             	mov    -0x20(%rbp),%edx
   2bce6:	89 50 14             	mov    %edx,0x14(%rax)
		}
	return b;
   2bce9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	}
   2bced:	c9                   	leaveq 
   2bcee:	c3                   	retq   

000000000002bcef <__hi0bits_D2A>:
#ifdef KR_headers
	(x) ULong x;
#else
	(ULong x)
#endif
{
   2bcef:	55                   	push   %rbp
   2bcf0:	48 89 e5             	mov    %rsp,%rbp
   2bcf3:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int k = 0;
   2bcf6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (!(x & 0xffff0000)) {
   2bcfd:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2bd00:	66 b8 00 00          	mov    $0x0,%ax
   2bd04:	85 c0                	test   %eax,%eax
   2bd06:	75 0b                	jne    2bd13 <__hi0bits_D2A+0x24>
		k = 16;
   2bd08:	c7 45 fc 10 00 00 00 	movl   $0x10,-0x4(%rbp)
		x <<= 16;
   2bd0f:	c1 65 ec 10          	shll   $0x10,-0x14(%rbp)
		}
	if (!(x & 0xff000000)) {
   2bd13:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2bd16:	25 00 00 00 ff       	and    $0xff000000,%eax
   2bd1b:	85 c0                	test   %eax,%eax
   2bd1d:	75 08                	jne    2bd27 <__hi0bits_D2A+0x38>
		k += 8;
   2bd1f:	83 45 fc 08          	addl   $0x8,-0x4(%rbp)
		x <<= 8;
   2bd23:	c1 65 ec 08          	shll   $0x8,-0x14(%rbp)
		}
	if (!(x & 0xf0000000)) {
   2bd27:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2bd2a:	25 00 00 00 f0       	and    $0xf0000000,%eax
   2bd2f:	85 c0                	test   %eax,%eax
   2bd31:	75 08                	jne    2bd3b <__hi0bits_D2A+0x4c>
		k += 4;
   2bd33:	83 45 fc 04          	addl   $0x4,-0x4(%rbp)
		x <<= 4;
   2bd37:	c1 65 ec 04          	shll   $0x4,-0x14(%rbp)
		}
	if (!(x & 0xc0000000)) {
   2bd3b:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2bd3e:	25 00 00 00 c0       	and    $0xc0000000,%eax
   2bd43:	85 c0                	test   %eax,%eax
   2bd45:	75 08                	jne    2bd4f <__hi0bits_D2A+0x60>
		k += 2;
   2bd47:	83 45 fc 02          	addl   $0x2,-0x4(%rbp)
		x <<= 2;
   2bd4b:	c1 65 ec 02          	shll   $0x2,-0x14(%rbp)
		}
	if (!(x & 0x80000000)) {
   2bd4f:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2bd52:	85 c0                	test   %eax,%eax
   2bd54:	78 17                	js     2bd6d <__hi0bits_D2A+0x7e>
		k++;
   2bd56:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		if (!(x & 0x40000000))
   2bd5a:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2bd5d:	25 00 00 00 40       	and    $0x40000000,%eax
   2bd62:	85 c0                	test   %eax,%eax
   2bd64:	75 07                	jne    2bd6d <__hi0bits_D2A+0x7e>
			return 32;
   2bd66:	b8 20 00 00 00       	mov    $0x20,%eax
   2bd6b:	eb 03                	jmp    2bd70 <__hi0bits_D2A+0x81>
		}
	return k;
   2bd6d:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
   2bd70:	5d                   	pop    %rbp
   2bd71:	c3                   	retq   

000000000002bd72 <__i2b_D2A>:
#ifdef KR_headers
	(i) int i;
#else
	(int i)
#endif
{
   2bd72:	55                   	push   %rbp
   2bd73:	48 89 e5             	mov    %rsp,%rbp
   2bd76:	48 83 ec 20          	sub    $0x20,%rsp
   2bd7a:	89 7d ec             	mov    %edi,-0x14(%rbp)
	Bigint *b;

	b = Balloc(1);
   2bd7d:	bf 01 00 00 00       	mov    $0x1,%edi
   2bd82:	e8 6d fb ff ff       	callq  2b8f4 <__Balloc_D2A>
   2bd87:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (b == NULL)
   2bd8b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2bd90:	75 07                	jne    2bd99 <__i2b_D2A+0x27>
		return (NULL);
   2bd92:	b8 00 00 00 00       	mov    $0x0,%eax
   2bd97:	eb 19                	jmp    2bdb2 <__i2b_D2A+0x40>
	b->x[0] = i;
   2bd99:	8b 55 ec             	mov    -0x14(%rbp),%edx
   2bd9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2bda0:	89 50 18             	mov    %edx,0x18(%rax)
	b->wds = 1;
   2bda3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2bda7:	c7 40 14 01 00 00 00 	movl   $0x1,0x14(%rax)
	return b;
   2bdae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
   2bdb2:	c9                   	leaveq 
   2bdb3:	c3                   	retq   

000000000002bdb4 <__mult_D2A>:
#ifdef KR_headers
	(a, b) Bigint *a, *b;
#else
	(Bigint *a, Bigint *b)
#endif
{
   2bdb4:	55                   	push   %rbp
   2bdb5:	48 89 e5             	mov    %rsp,%rbp
   2bdb8:	48 83 ec 70          	sub    $0x70,%rsp
   2bdbc:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
   2bdc0:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
#ifdef Pack_32
	ULong z2;
#endif
#endif

	if (a->wds < b->wds) {
   2bdc4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2bdc8:	8b 50 14             	mov    0x14(%rax),%edx
   2bdcb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2bdcf:	8b 40 14             	mov    0x14(%rax),%eax
   2bdd2:	39 c2                	cmp    %eax,%edx
   2bdd4:	7d 18                	jge    2bdee <__mult_D2A+0x3a>
		c = a;
   2bdd6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2bdda:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		a = b;
   2bdde:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2bde2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		b = c;
   2bde6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2bdea:	48 89 45 90          	mov    %rax,-0x70(%rbp)
		}
	k = a->k;
   2bdee:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2bdf2:	8b 40 08             	mov    0x8(%rax),%eax
   2bdf5:	89 45 a0             	mov    %eax,-0x60(%rbp)
	wa = a->wds;
   2bdf8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2bdfc:	8b 40 14             	mov    0x14(%rax),%eax
   2bdff:	89 45 b0             	mov    %eax,-0x50(%rbp)
	wb = b->wds;
   2be02:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2be06:	8b 40 14             	mov    0x14(%rax),%eax
   2be09:	89 45 b4             	mov    %eax,-0x4c(%rbp)
	wc = wa + wb;
   2be0c:	8b 55 b0             	mov    -0x50(%rbp),%edx
   2be0f:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   2be12:	01 d0                	add    %edx,%eax
   2be14:	89 45 a4             	mov    %eax,-0x5c(%rbp)
	if (wc > a->maxwds)
   2be17:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2be1b:	8b 40 0c             	mov    0xc(%rax),%eax
   2be1e:	39 45 a4             	cmp    %eax,-0x5c(%rbp)
   2be21:	7e 04                	jle    2be27 <__mult_D2A+0x73>
		k++;
   2be23:	83 45 a0 01          	addl   $0x1,-0x60(%rbp)
	c = Balloc(k);
   2be27:	8b 45 a0             	mov    -0x60(%rbp),%eax
   2be2a:	89 c7                	mov    %eax,%edi
   2be2c:	e8 c3 fa ff ff       	callq  2b8f4 <__Balloc_D2A>
   2be31:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (c == NULL)
   2be35:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   2be3a:	75 0a                	jne    2be46 <__mult_D2A+0x92>
		return (NULL);
   2be3c:	b8 00 00 00 00       	mov    $0x0,%eax
   2be41:	e9 8a 02 00 00       	jmpq   2c0d0 <__mult_D2A+0x31c>
	for(x = c->x, xa = x + wc; x < xa; x++)
   2be46:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2be4a:	48 83 c0 18          	add    $0x18,%rax
   2be4e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2be52:	8b 45 a4             	mov    -0x5c(%rbp),%eax
   2be55:	48 98                	cltq   
   2be57:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2be5e:	00 
   2be5f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2be63:	48 01 d0             	add    %rdx,%rax
   2be66:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2be6a:	eb 0f                	jmp    2be7b <__mult_D2A+0xc7>
		*x = 0;
   2be6c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2be70:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	for(x = c->x, xa = x + wc; x < xa; x++)
   2be76:	48 83 45 c0 04       	addq   $0x4,-0x40(%rbp)
   2be7b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2be7f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   2be83:	72 e7                	jb     2be6c <__mult_D2A+0xb8>
	xa = a->x;
   2be85:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2be89:	48 83 c0 18          	add    $0x18,%rax
   2be8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	xae = xa + wa;
   2be91:	8b 45 b0             	mov    -0x50(%rbp),%eax
   2be94:	48 98                	cltq   
   2be96:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2be9d:	00 
   2be9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2bea2:	48 01 d0             	add    %rdx,%rax
   2bea5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	xb = b->x;
   2bea9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2bead:	48 83 c0 18          	add    $0x18,%rax
   2beb1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	xbe = xb + wb;
   2beb5:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   2beb8:	48 98                	cltq   
   2beba:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2bec1:	00 
   2bec2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bec6:	48 01 d0             	add    %rdx,%rax
   2bec9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	xc0 = c->x;
   2becd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2bed1:	48 83 c0 18          	add    $0x18,%rax
   2bed5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
			*xc = carry;
			}
		}
#else
#ifdef Pack_32
	for(; xb < xbe; xb++, xc0++) {
   2bed9:	e9 97 01 00 00       	jmpq   2c075 <__mult_D2A+0x2c1>
		if ( (y = *xb & 0xffff) !=0) {
   2bede:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bee2:	8b 00                	mov    (%rax),%eax
   2bee4:	25 ff ff 00 00       	and    $0xffff,%eax
   2bee9:	89 45 b8             	mov    %eax,-0x48(%rbp)
   2beec:	83 7d b8 00          	cmpl   $0x0,-0x48(%rbp)
   2bef0:	0f 84 ab 00 00 00    	je     2bfa1 <__mult_D2A+0x1ed>
			x = xa;
   2bef6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2befa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			xc = xc0;
   2befe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2bf02:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			carry = 0;
   2bf06:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
			do {
				z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
   2bf0d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2bf11:	8b 00                	mov    (%rax),%eax
   2bf13:	0f b7 c0             	movzwl %ax,%eax
   2bf16:	0f af 45 b8          	imul   -0x48(%rbp),%eax
   2bf1a:	89 c2                	mov    %eax,%edx
   2bf1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2bf20:	8b 00                	mov    (%rax),%eax
   2bf22:	0f b7 c0             	movzwl %ax,%eax
   2bf25:	01 c2                	add    %eax,%edx
   2bf27:	8b 45 a8             	mov    -0x58(%rbp),%eax
   2bf2a:	01 d0                	add    %edx,%eax
   2bf2c:	89 45 bc             	mov    %eax,-0x44(%rbp)
				carry = z >> 16;
   2bf2f:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2bf32:	c1 e8 10             	shr    $0x10,%eax
   2bf35:	89 45 a8             	mov    %eax,-0x58(%rbp)
				z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
   2bf38:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2bf3c:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2bf40:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2bf44:	8b 00                	mov    (%rax),%eax
   2bf46:	c1 e8 10             	shr    $0x10,%eax
   2bf49:	0f af 45 b8          	imul   -0x48(%rbp),%eax
   2bf4d:	89 c2                	mov    %eax,%edx
   2bf4f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2bf53:	8b 00                	mov    (%rax),%eax
   2bf55:	c1 e8 10             	shr    $0x10,%eax
   2bf58:	01 c2                	add    %eax,%edx
   2bf5a:	8b 45 a8             	mov    -0x58(%rbp),%eax
   2bf5d:	01 d0                	add    %edx,%eax
   2bf5f:	89 45 ac             	mov    %eax,-0x54(%rbp)
				carry = z2 >> 16;
   2bf62:	8b 45 ac             	mov    -0x54(%rbp),%eax
   2bf65:	c1 e8 10             	shr    $0x10,%eax
   2bf68:	89 45 a8             	mov    %eax,-0x58(%rbp)
				Storeinc(xc, z2, z);
   2bf6b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2bf6f:	48 83 c0 02          	add    $0x2,%rax
   2bf73:	8b 55 ac             	mov    -0x54(%rbp),%edx
   2bf76:	66 89 10             	mov    %dx,(%rax)
   2bf79:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2bf7c:	89 c2                	mov    %eax,%edx
   2bf7e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2bf82:	66 89 10             	mov    %dx,(%rax)
   2bf85:	48 83 45 d0 04       	addq   $0x4,-0x30(%rbp)
				}
				while(x < xae);
   2bf8a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2bf8e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   2bf92:	0f 82 75 ff ff ff    	jb     2bf0d <__mult_D2A+0x159>
			*xc = carry;
   2bf98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2bf9c:	8b 55 a8             	mov    -0x58(%rbp),%edx
   2bf9f:	89 10                	mov    %edx,(%rax)
			}
		if ( (y = *xb >> 16) !=0) {
   2bfa1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2bfa5:	8b 00                	mov    (%rax),%eax
   2bfa7:	c1 e8 10             	shr    $0x10,%eax
   2bfaa:	89 45 b8             	mov    %eax,-0x48(%rbp)
   2bfad:	83 7d b8 00          	cmpl   $0x0,-0x48(%rbp)
   2bfb1:	0f 84 b4 00 00 00    	je     2c06b <__mult_D2A+0x2b7>
			x = xa;
   2bfb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2bfbb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			xc = xc0;
   2bfbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2bfc3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			carry = 0;
   2bfc7:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
			z2 = *xc;
   2bfce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2bfd2:	8b 00                	mov    (%rax),%eax
   2bfd4:	89 45 ac             	mov    %eax,-0x54(%rbp)
			do {
				z = (*x & 0xffff) * y + (*xc >> 16) + carry;
   2bfd7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2bfdb:	8b 00                	mov    (%rax),%eax
   2bfdd:	0f b7 c0             	movzwl %ax,%eax
   2bfe0:	0f af 45 b8          	imul   -0x48(%rbp),%eax
   2bfe4:	89 c2                	mov    %eax,%edx
   2bfe6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2bfea:	8b 00                	mov    (%rax),%eax
   2bfec:	c1 e8 10             	shr    $0x10,%eax
   2bfef:	01 c2                	add    %eax,%edx
   2bff1:	8b 45 a8             	mov    -0x58(%rbp),%eax
   2bff4:	01 d0                	add    %edx,%eax
   2bff6:	89 45 bc             	mov    %eax,-0x44(%rbp)
				carry = z >> 16;
   2bff9:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2bffc:	c1 e8 10             	shr    $0x10,%eax
   2bfff:	89 45 a8             	mov    %eax,-0x58(%rbp)
				Storeinc(xc, z, z2);
   2c002:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c006:	48 83 c0 02          	add    $0x2,%rax
   2c00a:	8b 55 bc             	mov    -0x44(%rbp),%edx
   2c00d:	66 89 10             	mov    %dx,(%rax)
   2c010:	8b 45 ac             	mov    -0x54(%rbp),%eax
   2c013:	89 c2                	mov    %eax,%edx
   2c015:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c019:	66 89 10             	mov    %dx,(%rax)
   2c01c:	48 83 45 d0 04       	addq   $0x4,-0x30(%rbp)
				z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
   2c021:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2c025:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2c029:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2c02d:	8b 00                	mov    (%rax),%eax
   2c02f:	c1 e8 10             	shr    $0x10,%eax
   2c032:	0f af 45 b8          	imul   -0x48(%rbp),%eax
   2c036:	89 c2                	mov    %eax,%edx
   2c038:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c03c:	8b 00                	mov    (%rax),%eax
   2c03e:	0f b7 c0             	movzwl %ax,%eax
   2c041:	01 c2                	add    %eax,%edx
   2c043:	8b 45 a8             	mov    -0x58(%rbp),%eax
   2c046:	01 d0                	add    %edx,%eax
   2c048:	89 45 ac             	mov    %eax,-0x54(%rbp)
				carry = z2 >> 16;
   2c04b:	8b 45 ac             	mov    -0x54(%rbp),%eax
   2c04e:	c1 e8 10             	shr    $0x10,%eax
   2c051:	89 45 a8             	mov    %eax,-0x58(%rbp)
				}
				while(x < xae);
   2c054:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2c058:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   2c05c:	0f 82 75 ff ff ff    	jb     2bfd7 <__mult_D2A+0x223>
			*xc = z2;
   2c062:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c066:	8b 55 ac             	mov    -0x54(%rbp),%edx
   2c069:	89 10                	mov    %edx,(%rax)
	for(; xb < xbe; xb++, xc0++) {
   2c06b:	48 83 45 c8 04       	addq   $0x4,-0x38(%rbp)
   2c070:	48 83 45 d8 04       	addq   $0x4,-0x28(%rbp)
   2c075:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2c079:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2c07d:	0f 82 5b fe ff ff    	jb     2bede <__mult_D2A+0x12a>
			*xc = carry;
			}
		}
#endif
#endif
	for(xc0 = c->x, xc = xc0 + wc; wc > 0 && !*--xc; --wc) ;
   2c083:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c087:	48 83 c0 18          	add    $0x18,%rax
   2c08b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2c08f:	8b 45 a4             	mov    -0x5c(%rbp),%eax
   2c092:	48 98                	cltq   
   2c094:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2c09b:	00 
   2c09c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c0a0:	48 01 d0             	add    %rdx,%rax
   2c0a3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
   2c0a7:	eb 04                	jmp    2c0ad <__mult_D2A+0x2f9>
   2c0a9:	83 6d a4 01          	subl   $0x1,-0x5c(%rbp)
   2c0ad:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
   2c0b1:	7e 0f                	jle    2c0c2 <__mult_D2A+0x30e>
   2c0b3:	48 83 6d d0 04       	subq   $0x4,-0x30(%rbp)
   2c0b8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c0bc:	8b 00                	mov    (%rax),%eax
   2c0be:	85 c0                	test   %eax,%eax
   2c0c0:	74 e7                	je     2c0a9 <__mult_D2A+0x2f5>
	c->wds = wc;
   2c0c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c0c6:	8b 55 a4             	mov    -0x5c(%rbp),%edx
   2c0c9:	89 50 14             	mov    %edx,0x14(%rax)
	return c;
   2c0cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
	}
   2c0d0:	c9                   	leaveq 
   2c0d1:	c3                   	retq   

000000000002c0d2 <__pow5mult_D2A>:
#ifdef KR_headers
	(b, k) Bigint *b; int k;
#else
	(Bigint *b, int k)
#endif
{
   2c0d2:	55                   	push   %rbp
   2c0d3:	48 89 e5             	mov    %rsp,%rbp
   2c0d6:	48 83 ec 30          	sub    $0x30,%rsp
   2c0da:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2c0de:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	Bigint *b1, *p5, *p51;
	int i;
	static int p05[3] = { 5, 25, 125 };

	if ( (i = k & 3) !=0) {
   2c0e1:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2c0e4:	83 e0 03             	and    $0x3,%eax
   2c0e7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
   2c0ea:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
   2c0ee:	74 42                	je     2c132 <__pow5mult_D2A+0x60>
		b = multadd(b, p05[i-1], 0);
   2c0f0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2c0f3:	83 e8 01             	sub    $0x1,%eax
   2c0f6:	48 98                	cltq   
   2c0f8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2c0ff:	00 
   2c100:	48 8d 05 a1 97 20 00 	lea    0x2097a1(%rip),%rax        # 2358a8 <p05.2501>
   2c107:	8b 0c 02             	mov    (%rdx,%rax,1),%ecx
   2c10a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c10e:	ba 00 00 00 00       	mov    $0x0,%edx
   2c113:	89 ce                	mov    %ecx,%esi
   2c115:	48 89 c7             	mov    %rax,%rdi
   2c118:	e8 8c fa ff ff       	callq  2bba9 <__multadd_D2A>
   2c11d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		if (b == NULL)
   2c121:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   2c126:	75 0a                	jne    2c132 <__pow5mult_D2A+0x60>
			return (NULL);
   2c128:	b8 00 00 00 00       	mov    $0x0,%eax
   2c12d:	e9 69 01 00 00       	jmpq   2c29b <__pow5mult_D2A+0x1c9>
		}

	if (!(k >>= 2))
   2c132:	c1 7d d4 02          	sarl   $0x2,-0x2c(%rbp)
   2c136:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   2c13a:	75 09                	jne    2c145 <__pow5mult_D2A+0x73>
		return b;
   2c13c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c140:	e9 56 01 00 00       	jmpq   2c29b <__pow5mult_D2A+0x1c9>
	if ((p5 = p5s) == 0) {
   2c145:	48 8b 05 34 a6 20 00 	mov    0x20a634(%rip),%rax        # 236780 <p5s>
   2c14c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2c150:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   2c155:	75 62                	jne    2c1b9 <__pow5mult_D2A+0xe7>
		/* first time */
#ifdef MULTIPLE_THREADS
		ACQUIRE_DTOA_LOCK(1);
   2c157:	48 8d 3d 2e a6 20 00 	lea    0x20a62e(%rip),%rdi        # 23678c <__dtoa_locks+0x4>
   2c15e:	e8 57 2d fe ff       	callq  eeba <sgx_spin_lock>
		if (!(p5 = p5s)) {
   2c163:	48 8b 05 16 a6 20 00 	mov    0x20a616(%rip),%rax        # 236780 <p5s>
   2c16a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2c16e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   2c173:	75 38                	jne    2c1ad <__pow5mult_D2A+0xdb>
			p5 = p5s = i2b(625);
   2c175:	bf 71 02 00 00       	mov    $0x271,%edi
   2c17a:	e8 f3 fb ff ff       	callq  2bd72 <__i2b_D2A>
   2c17f:	48 89 05 fa a5 20 00 	mov    %rax,0x20a5fa(%rip)        # 236780 <p5s>
   2c186:	48 8b 05 f3 a5 20 00 	mov    0x20a5f3(%rip),%rax        # 236780 <p5s>
   2c18d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
			if (p5 == NULL)
   2c191:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   2c196:	75 0a                	jne    2c1a2 <__pow5mult_D2A+0xd0>
				return (NULL);
   2c198:	b8 00 00 00 00       	mov    $0x0,%eax
   2c19d:	e9 f9 00 00 00       	jmpq   2c29b <__pow5mult_D2A+0x1c9>
			p5->next = 0;
   2c1a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c1a6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			}
		FREE_DTOA_LOCK(1);
   2c1ad:	48 8d 3d d8 a5 20 00 	lea    0x20a5d8(%rip),%rdi        # 23678c <__dtoa_locks+0x4>
   2c1b4:	e8 68 2d fe ff       	callq  ef21 <sgx_spin_unlock>
			return (NULL);
		p5->next = 0;
#endif
		}
	for(;;) {
		if (k & 1) {
   2c1b9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2c1bc:	83 e0 01             	and    $0x1,%eax
   2c1bf:	85 c0                	test   %eax,%eax
   2c1c1:	74 3c                	je     2c1ff <__pow5mult_D2A+0x12d>
			b1 = mult(b, p5);
   2c1c3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2c1c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c1cb:	48 89 d6             	mov    %rdx,%rsi
   2c1ce:	48 89 c7             	mov    %rax,%rdi
   2c1d1:	e8 de fb ff ff       	callq  2bdb4 <__mult_D2A>
   2c1d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (b1 == NULL)
   2c1da:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2c1df:	75 0a                	jne    2c1eb <__pow5mult_D2A+0x119>
				return (NULL);
   2c1e1:	b8 00 00 00 00       	mov    $0x0,%eax
   2c1e6:	e9 b0 00 00 00       	jmpq   2c29b <__pow5mult_D2A+0x1c9>
			Bfree(b);
   2c1eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c1ef:	48 89 c7             	mov    %rax,%rdi
   2c1f2:	e8 44 f8 ff ff       	callq  2ba3b <__Bfree_D2A>
			b = b1;
   2c1f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2c1fb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
			}
		if (!(k >>= 1))
   2c1ff:	d1 7d d4             	sarl   -0x2c(%rbp)
   2c202:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   2c206:	0f 84 8a 00 00 00    	je     2c296 <__pow5mult_D2A+0x1c4>
			break;
		if ((p51 = p5->next) == 0) {
   2c20c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c210:	48 8b 00             	mov    (%rax),%rax
   2c213:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2c217:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   2c21c:	75 6b                	jne    2c289 <__pow5mult_D2A+0x1b7>
#ifdef MULTIPLE_THREADS
			ACQUIRE_DTOA_LOCK(1);
   2c21e:	48 8d 3d 67 a5 20 00 	lea    0x20a567(%rip),%rdi        # 23678c <__dtoa_locks+0x4>
   2c225:	e8 90 2c fe ff       	callq  eeba <sgx_spin_lock>
			if (!(p51 = p5->next)) {
   2c22a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c22e:	48 8b 00             	mov    (%rax),%rax
   2c231:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2c235:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   2c23a:	75 41                	jne    2c27d <__pow5mult_D2A+0x1ab>
				p51 = p5->next = mult(p5,p5);
   2c23c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2c240:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c244:	48 89 d6             	mov    %rdx,%rsi
   2c247:	48 89 c7             	mov    %rax,%rdi
   2c24a:	e8 65 fb ff ff       	callq  2bdb4 <__mult_D2A>
   2c24f:	48 89 c2             	mov    %rax,%rdx
   2c252:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c256:	48 89 10             	mov    %rdx,(%rax)
   2c259:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c25d:	48 8b 00             	mov    (%rax),%rax
   2c260:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
				if (p51 == NULL)
   2c264:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   2c269:	75 07                	jne    2c272 <__pow5mult_D2A+0x1a0>
					return (NULL);
   2c26b:	b8 00 00 00 00       	mov    $0x0,%eax
   2c270:	eb 29                	jmp    2c29b <__pow5mult_D2A+0x1c9>
				p51->next = 0;
   2c272:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2c276:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
				}
			FREE_DTOA_LOCK(1);
   2c27d:	48 8d 3d 08 a5 20 00 	lea    0x20a508(%rip),%rdi        # 23678c <__dtoa_locks+0x4>
   2c284:	e8 98 2c fe ff       	callq  ef21 <sgx_spin_unlock>
			if (p51 == NULL)
				return (NULL);
			p51->next = 0;
#endif
			}
		p5 = p51;
   2c289:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2c28d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (k & 1) {
   2c291:	e9 23 ff ff ff       	jmpq   2c1b9 <__pow5mult_D2A+0xe7>
			break;
   2c296:	90                   	nop
		}
	return b;
   2c297:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
	}
   2c29b:	c9                   	leaveq 
   2c29c:	c3                   	retq   

000000000002c29d <__lshift_D2A>:
#ifdef KR_headers
	(b, k) Bigint *b; int k;
#else
	(Bigint *b, int k)
#endif
{
   2c29d:	55                   	push   %rbp
   2c29e:	48 89 e5             	mov    %rsp,%rbp
   2c2a1:	48 83 ec 50          	sub    $0x50,%rsp
   2c2a5:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   2c2a9:	89 75 b4             	mov    %esi,-0x4c(%rbp)
	int i, k1, n, n1;
	Bigint *b1;
	ULong *x, *x1, *xe, z;

	n = k >> kshift;
   2c2ac:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   2c2af:	c1 f8 05             	sar    $0x5,%eax
   2c2b2:	89 45 dc             	mov    %eax,-0x24(%rbp)
	k1 = b->k;
   2c2b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2c2b9:	8b 40 08             	mov    0x8(%rax),%eax
   2c2bc:	89 45 d0             	mov    %eax,-0x30(%rbp)
	n1 = n + b->wds + 1;
   2c2bf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2c2c3:	8b 50 14             	mov    0x14(%rax),%edx
   2c2c6:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2c2c9:	01 d0                	add    %edx,%eax
   2c2cb:	83 c0 01             	add    $0x1,%eax
   2c2ce:	89 45 d4             	mov    %eax,-0x2c(%rbp)
	for(i = b->maxwds; n1 > i; i <<= 1)
   2c2d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2c2d5:	8b 40 0c             	mov    0xc(%rax),%eax
   2c2d8:	89 45 cc             	mov    %eax,-0x34(%rbp)
   2c2db:	eb 07                	jmp    2c2e4 <__lshift_D2A+0x47>
		k1++;
   2c2dd:	83 45 d0 01          	addl   $0x1,-0x30(%rbp)
	for(i = b->maxwds; n1 > i; i <<= 1)
   2c2e1:	d1 65 cc             	shll   -0x34(%rbp)
   2c2e4:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2c2e7:	3b 45 cc             	cmp    -0x34(%rbp),%eax
   2c2ea:	7f f1                	jg     2c2dd <__lshift_D2A+0x40>
	b1 = Balloc(k1);
   2c2ec:	8b 45 d0             	mov    -0x30(%rbp),%eax
   2c2ef:	89 c7                	mov    %eax,%edi
   2c2f1:	e8 fe f5 ff ff       	callq  2b8f4 <__Balloc_D2A>
   2c2f6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (b1 == NULL)
   2c2fa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   2c2ff:	75 0a                	jne    2c30b <__lshift_D2A+0x6e>
		return (NULL);
   2c301:	b8 00 00 00 00       	mov    $0x0,%eax
   2c306:	e9 19 01 00 00       	jmpq   2c424 <__lshift_D2A+0x187>
	x1 = b1->x;
   2c30b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2c30f:	48 83 c0 18          	add    $0x18,%rax
   2c313:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for(i = 0; i < n; i++)
   2c317:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
   2c31e:	eb 16                	jmp    2c336 <__lshift_D2A+0x99>
		*x1++ = 0;
   2c320:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c324:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2c328:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2c32c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	for(i = 0; i < n; i++)
   2c332:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
   2c336:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2c339:	3b 45 dc             	cmp    -0x24(%rbp),%eax
   2c33c:	7c e2                	jl     2c320 <__lshift_D2A+0x83>
	x = b->x;
   2c33e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2c342:	48 83 c0 18          	add    $0x18,%rax
   2c346:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	xe = x + b->wds;
   2c34a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2c34e:	8b 40 14             	mov    0x14(%rax),%eax
   2c351:	48 98                	cltq   
   2c353:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2c35a:	00 
   2c35b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c35f:	48 01 d0             	add    %rdx,%rax
   2c362:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (k &= kmask) {
   2c366:	83 65 b4 1f          	andl   $0x1f,-0x4c(%rbp)
   2c36a:	83 7d b4 00          	cmpl   $0x0,-0x4c(%rbp)
   2c36e:	74 71                	je     2c3e1 <__lshift_D2A+0x144>
#ifdef Pack_32
		k1 = 32 - k;
   2c370:	b8 20 00 00 00       	mov    $0x20,%eax
   2c375:	2b 45 b4             	sub    -0x4c(%rbp),%eax
   2c378:	89 45 d0             	mov    %eax,-0x30(%rbp)
		z = 0;
   2c37b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
		do {
			*x1++ = *x << k | z;
   2c382:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c386:	8b 10                	mov    (%rax),%edx
   2c388:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   2c38b:	89 c1                	mov    %eax,%ecx
   2c38d:	d3 e2                	shl    %cl,%edx
   2c38f:	89 d1                	mov    %edx,%ecx
   2c391:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c395:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2c399:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2c39d:	0b 4d d8             	or     -0x28(%rbp),%ecx
   2c3a0:	89 ca                	mov    %ecx,%edx
   2c3a2:	89 10                	mov    %edx,(%rax)
			z = *x++ >> k1;
   2c3a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c3a8:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2c3ac:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
   2c3b0:	8b 10                	mov    (%rax),%edx
   2c3b2:	8b 45 d0             	mov    -0x30(%rbp),%eax
   2c3b5:	89 c1                	mov    %eax,%ecx
   2c3b7:	d3 ea                	shr    %cl,%edx
   2c3b9:	89 d0                	mov    %edx,%eax
   2c3bb:	89 45 d8             	mov    %eax,-0x28(%rbp)
			}
			while(x < xe);
   2c3be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c3c2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2c3c6:	72 ba                	jb     2c382 <__lshift_D2A+0xe5>
		if ((*x1 = z) !=0)
   2c3c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c3cc:	8b 55 d8             	mov    -0x28(%rbp),%edx
   2c3cf:	89 10                	mov    %edx,(%rax)
   2c3d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c3d5:	8b 00                	mov    (%rax),%eax
   2c3d7:	85 c0                	test   %eax,%eax
   2c3d9:	74 2c                	je     2c407 <__lshift_D2A+0x16a>
			++n1;
   2c3db:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
   2c3df:	eb 26                	jmp    2c407 <__lshift_D2A+0x16a>
		if (*x1 = z)
			++n1;
#endif
		}
	else do
		*x1++ = *x++;
   2c3e1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
   2c3e5:	48 8d 42 04          	lea    0x4(%rdx),%rax
   2c3e9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
   2c3ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c3f1:	48 8d 48 04          	lea    0x4(%rax),%rcx
   2c3f5:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   2c3f9:	8b 12                	mov    (%rdx),%edx
   2c3fb:	89 10                	mov    %edx,(%rax)
		while(x < xe);
   2c3fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c401:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2c405:	72 da                	jb     2c3e1 <__lshift_D2A+0x144>
	b1->wds = n1 - 1;
   2c407:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2c40a:	8d 50 ff             	lea    -0x1(%rax),%edx
   2c40d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2c411:	89 50 14             	mov    %edx,0x14(%rax)
	Bfree(b);
   2c414:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2c418:	48 89 c7             	mov    %rax,%rdi
   2c41b:	e8 1b f6 ff ff       	callq  2ba3b <__Bfree_D2A>
	return b1;
   2c420:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
   2c424:	c9                   	leaveq 
   2c425:	c3                   	retq   

000000000002c426 <__cmp_D2A>:
#ifdef KR_headers
	(a, b) Bigint *a, *b;
#else
	(Bigint *a, Bigint *b)
#endif
{
   2c426:	55                   	push   %rbp
   2c427:	48 89 e5             	mov    %rsp,%rbp
   2c42a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   2c42e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	ULong *xa, *xa0, *xb, *xb0;
	int i, j;

	i = a->wds;
   2c432:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2c436:	8b 40 14             	mov    0x14(%rax),%eax
   2c439:	89 45 d8             	mov    %eax,-0x28(%rbp)
	j = b->wds;
   2c43c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2c440:	8b 40 14             	mov    0x14(%rax),%eax
   2c443:	89 45 dc             	mov    %eax,-0x24(%rbp)
#ifdef DEBUG
	if (i > 1 && !a->x[i-1])
   2c446:	83 7d d8 01          	cmpl   $0x1,-0x28(%rbp)
		Bug("cmp called with a->x[a->wds-1] == 0");
	if (j > 1 && !b->x[j-1])
   2c44a:	83 7d dc 01          	cmpl   $0x1,-0x24(%rbp)
		Bug("cmp called with b->x[b->wds-1] == 0");
#endif
	if (i -= j)
   2c44e:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2c451:	29 45 d8             	sub    %eax,-0x28(%rbp)
   2c454:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
   2c458:	74 08                	je     2c462 <__cmp_D2A+0x3c>
		return i;
   2c45a:	8b 45 d8             	mov    -0x28(%rbp),%eax
   2c45d:	e9 92 00 00 00       	jmpq   2c4f4 <__cmp_D2A+0xce>
	xa0 = a->x;
   2c462:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2c466:	48 83 c0 18          	add    $0x18,%rax
   2c46a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	xa = xa0 + j;
   2c46e:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2c471:	48 98                	cltq   
   2c473:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2c47a:	00 
   2c47b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2c47f:	48 01 d0             	add    %rdx,%rax
   2c482:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	xb0 = b->x;
   2c486:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2c48a:	48 83 c0 18          	add    $0x18,%rax
   2c48e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	xb = xb0 + j;
   2c492:	8b 45 dc             	mov    -0x24(%rbp),%eax
   2c495:	48 98                	cltq   
   2c497:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2c49e:	00 
   2c49f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2c4a3:	48 01 d0             	add    %rdx,%rax
   2c4a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for(;;) {
		if (*--xa != *--xb)
   2c4aa:	48 83 6d e0 04       	subq   $0x4,-0x20(%rbp)
   2c4af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c4b3:	8b 10                	mov    (%rax),%edx
   2c4b5:	48 83 6d e8 04       	subq   $0x4,-0x18(%rbp)
   2c4ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c4be:	8b 00                	mov    (%rax),%eax
   2c4c0:	39 c2                	cmp    %eax,%edx
   2c4c2:	74 1e                	je     2c4e2 <__cmp_D2A+0xbc>
			return *xa < *xb ? -1 : 1;
   2c4c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c4c8:	8b 10                	mov    (%rax),%edx
   2c4ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c4ce:	8b 00                	mov    (%rax),%eax
   2c4d0:	39 c2                	cmp    %eax,%edx
   2c4d2:	73 07                	jae    2c4db <__cmp_D2A+0xb5>
   2c4d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2c4d9:	eb 19                	jmp    2c4f4 <__cmp_D2A+0xce>
   2c4db:	b8 01 00 00 00       	mov    $0x1,%eax
   2c4e0:	eb 12                	jmp    2c4f4 <__cmp_D2A+0xce>
		if (xa <= xa0)
   2c4e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c4e6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   2c4ea:	76 02                	jbe    2c4ee <__cmp_D2A+0xc8>
		if (*--xa != *--xb)
   2c4ec:	eb bc                	jmp    2c4aa <__cmp_D2A+0x84>
			break;
   2c4ee:	90                   	nop
		}
	return 0;
   2c4ef:	b8 00 00 00 00       	mov    $0x0,%eax
	}
   2c4f4:	5d                   	pop    %rbp
   2c4f5:	c3                   	retq   

000000000002c4f6 <__diff_D2A>:
#ifdef KR_headers
	(a, b) Bigint *a, *b;
#else
	(Bigint *a, Bigint *b)
#endif
{
   2c4f6:	55                   	push   %rbp
   2c4f7:	48 89 e5             	mov    %rsp,%rbp
   2c4fa:	48 83 ec 60          	sub    $0x60,%rsp
   2c4fe:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
   2c502:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
#ifdef Pack_32
	ULong z;
#endif
#endif

	i = cmp(a,b);
   2c506:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   2c50a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2c50e:	48 89 d6             	mov    %rdx,%rsi
   2c511:	48 89 c7             	mov    %rax,%rdi
   2c514:	e8 0d ff ff ff       	callq  2c426 <__cmp_D2A>
   2c519:	89 45 b8             	mov    %eax,-0x48(%rbp)
	if (!i) {
   2c51c:	83 7d b8 00          	cmpl   $0x0,-0x48(%rbp)
   2c520:	75 3e                	jne    2c560 <__diff_D2A+0x6a>
		c = Balloc(0);
   2c522:	bf 00 00 00 00       	mov    $0x0,%edi
   2c527:	e8 c8 f3 ff ff       	callq  2b8f4 <__Balloc_D2A>
   2c52c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (c == NULL)
   2c530:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   2c535:	75 0a                	jne    2c541 <__diff_D2A+0x4b>
			return (NULL);
   2c537:	b8 00 00 00 00       	mov    $0x0,%eax
   2c53c:	e9 04 02 00 00       	jmpq   2c745 <__diff_D2A+0x24f>
		c->wds = 1;
   2c541:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c545:	c7 40 14 01 00 00 00 	movl   $0x1,0x14(%rax)
		c->x[0] = 0;
   2c54c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c550:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
		return c;
   2c557:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c55b:	e9 e5 01 00 00       	jmpq   2c745 <__diff_D2A+0x24f>
		}
	if (i < 0) {
   2c560:	83 7d b8 00          	cmpl   $0x0,-0x48(%rbp)
   2c564:	79 21                	jns    2c587 <__diff_D2A+0x91>
		c = a;
   2c566:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2c56a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		a = b;
   2c56e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2c572:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		b = c;
   2c576:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c57a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		i = 1;
   2c57e:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%rbp)
   2c585:	eb 07                	jmp    2c58e <__diff_D2A+0x98>
		}
	else
		i = 0;
   2c587:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
	c = Balloc(a->k);
   2c58e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2c592:	8b 40 08             	mov    0x8(%rax),%eax
   2c595:	89 c7                	mov    %eax,%edi
   2c597:	e8 58 f3 ff ff       	callq  2b8f4 <__Balloc_D2A>
   2c59c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (c == NULL)
   2c5a0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   2c5a5:	75 0a                	jne    2c5b1 <__diff_D2A+0xbb>
		return (NULL);
   2c5a7:	b8 00 00 00 00       	mov    $0x0,%eax
   2c5ac:	e9 94 01 00 00       	jmpq   2c745 <__diff_D2A+0x24f>
	c->sign = i;
   2c5b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c5b5:	8b 55 b8             	mov    -0x48(%rbp),%edx
   2c5b8:	89 50 10             	mov    %edx,0x10(%rax)
	wa = a->wds;
   2c5bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2c5bf:	8b 40 14             	mov    0x14(%rax),%eax
   2c5c2:	89 45 bc             	mov    %eax,-0x44(%rbp)
	xa = a->x;
   2c5c5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2c5c9:	48 83 c0 18          	add    $0x18,%rax
   2c5cd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	xae = xa + wa;
   2c5d1:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2c5d4:	48 98                	cltq   
   2c5d6:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2c5dd:	00 
   2c5de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c5e2:	48 01 d0             	add    %rdx,%rax
   2c5e5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	wb = b->wds;
   2c5e9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2c5ed:	8b 40 14             	mov    0x14(%rax),%eax
   2c5f0:	89 45 c4             	mov    %eax,-0x3c(%rbp)
	xb = b->x;
   2c5f3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2c5f7:	48 83 c0 18          	add    $0x18,%rax
   2c5fb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	xbe = xb + wb;
   2c5ff:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   2c602:	48 98                	cltq   
   2c604:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2c60b:	00 
   2c60c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c610:	48 01 d0             	add    %rdx,%rax
   2c613:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	xc = c->x;
   2c617:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c61b:	48 83 c0 18          	add    $0x18,%rax
   2c61f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	borrow = 0;
   2c623:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
		*xc++ = y & 0xffffffffUL;
		}
#else
#ifdef Pack_32
	do {
		y = (*xa & 0xffff) - (*xb & 0xffff) - borrow;
   2c62a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c62e:	8b 00                	mov    (%rax),%eax
   2c630:	0f b7 d0             	movzwl %ax,%edx
   2c633:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c637:	8b 00                	mov    (%rax),%eax
   2c639:	0f b7 c0             	movzwl %ax,%eax
   2c63c:	29 c2                	sub    %eax,%edx
   2c63e:	89 d0                	mov    %edx,%eax
   2c640:	2b 45 c0             	sub    -0x40(%rbp),%eax
   2c643:	89 45 c8             	mov    %eax,-0x38(%rbp)
		borrow = (y & 0x10000) >> 16;
   2c646:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2c649:	c1 e8 10             	shr    $0x10,%eax
   2c64c:	83 e0 01             	and    $0x1,%eax
   2c64f:	89 45 c0             	mov    %eax,-0x40(%rbp)
		z = (*xa++ >> 16) - (*xb++ >> 16) - borrow;
   2c652:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c656:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2c65a:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   2c65e:	8b 00                	mov    (%rax),%eax
   2c660:	c1 e8 10             	shr    $0x10,%eax
   2c663:	89 c1                	mov    %eax,%ecx
   2c665:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c669:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2c66d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   2c671:	8b 00                	mov    (%rax),%eax
   2c673:	c1 e8 10             	shr    $0x10,%eax
   2c676:	29 c1                	sub    %eax,%ecx
   2c678:	89 c8                	mov    %ecx,%eax
   2c67a:	2b 45 c0             	sub    -0x40(%rbp),%eax
   2c67d:	89 45 cc             	mov    %eax,-0x34(%rbp)
		borrow = (z & 0x10000) >> 16;
   2c680:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2c683:	c1 e8 10             	shr    $0x10,%eax
   2c686:	83 e0 01             	and    $0x1,%eax
   2c689:	89 45 c0             	mov    %eax,-0x40(%rbp)
		Storeinc(xc, z, y);
   2c68c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c690:	48 83 c0 02          	add    $0x2,%rax
   2c694:	8b 55 cc             	mov    -0x34(%rbp),%edx
   2c697:	66 89 10             	mov    %dx,(%rax)
   2c69a:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2c69d:	89 c2                	mov    %eax,%edx
   2c69f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c6a3:	66 89 10             	mov    %dx,(%rax)
   2c6a6:	48 83 45 e0 04       	addq   $0x4,-0x20(%rbp)
		}
		while(xb < xbe);
   2c6ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c6af:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2c6b3:	0f 82 71 ff ff ff    	jb     2c62a <__diff_D2A+0x134>
	while(xa < xae) {
   2c6b9:	eb 5d                	jmp    2c718 <__diff_D2A+0x222>
		y = (*xa & 0xffff) - borrow;
   2c6bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c6bf:	8b 00                	mov    (%rax),%eax
   2c6c1:	0f b7 c0             	movzwl %ax,%eax
   2c6c4:	2b 45 c0             	sub    -0x40(%rbp),%eax
   2c6c7:	89 45 c8             	mov    %eax,-0x38(%rbp)
		borrow = (y & 0x10000) >> 16;
   2c6ca:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2c6cd:	c1 e8 10             	shr    $0x10,%eax
   2c6d0:	83 e0 01             	and    $0x1,%eax
   2c6d3:	89 45 c0             	mov    %eax,-0x40(%rbp)
		z = (*xa++ >> 16) - borrow;
   2c6d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c6da:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2c6de:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   2c6e2:	8b 00                	mov    (%rax),%eax
   2c6e4:	c1 e8 10             	shr    $0x10,%eax
   2c6e7:	2b 45 c0             	sub    -0x40(%rbp),%eax
   2c6ea:	89 45 cc             	mov    %eax,-0x34(%rbp)
		borrow = (z & 0x10000) >> 16;
   2c6ed:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2c6f0:	c1 e8 10             	shr    $0x10,%eax
   2c6f3:	83 e0 01             	and    $0x1,%eax
   2c6f6:	89 45 c0             	mov    %eax,-0x40(%rbp)
		Storeinc(xc, z, y);
   2c6f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c6fd:	48 83 c0 02          	add    $0x2,%rax
   2c701:	8b 55 cc             	mov    -0x34(%rbp),%edx
   2c704:	66 89 10             	mov    %dx,(%rax)
   2c707:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2c70a:	89 c2                	mov    %eax,%edx
   2c70c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c710:	66 89 10             	mov    %dx,(%rax)
   2c713:	48 83 45 e0 04       	addq   $0x4,-0x20(%rbp)
	while(xa < xae) {
   2c718:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c71c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   2c720:	72 99                	jb     2c6bb <__diff_D2A+0x1c5>
		borrow = (y & 0x10000) >> 16;
		*xc++ = y & 0xffff;
		}
#endif
#endif
	while(!*--xc)
   2c722:	eb 04                	jmp    2c728 <__diff_D2A+0x232>
		wa--;
   2c724:	83 6d bc 01          	subl   $0x1,-0x44(%rbp)
	while(!*--xc)
   2c728:	48 83 6d e0 04       	subq   $0x4,-0x20(%rbp)
   2c72d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c731:	8b 00                	mov    (%rax),%eax
   2c733:	85 c0                	test   %eax,%eax
   2c735:	74 ed                	je     2c724 <__diff_D2A+0x22e>
	c->wds = wa;
   2c737:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c73b:	8b 55 bc             	mov    -0x44(%rbp),%edx
   2c73e:	89 50 14             	mov    %edx,0x14(%rax)
	return c;
   2c741:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
   2c745:	c9                   	leaveq 
   2c746:	c3                   	retq   

000000000002c747 <__b2d_D2A>:
#ifdef KR_headers
	(a, e) Bigint *a; int *e;
#else
	(Bigint *a, int *e)
#endif
{
   2c747:	55                   	push   %rbp
   2c748:	48 89 e5             	mov    %rsp,%rbp
   2c74b:	48 83 ec 40          	sub    $0x40,%rsp
   2c74f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   2c753:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
   2c757:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   2c75e:	00 00 
   2c760:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2c764:	31 c0                	xor    %eax,%eax
#else
#define d0 word0(&d)
#define d1 word1(&d)
#endif

	xa0 = a->x;
   2c766:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2c76a:	48 83 c0 18          	add    $0x18,%rax
   2c76e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	xa = xa0 + a->wds;
   2c772:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
   2c776:	8b 40 14             	mov    0x14(%rax),%eax
   2c779:	48 98                	cltq   
   2c77b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2c782:	00 
   2c783:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2c787:	48 01 d0             	add    %rdx,%rax
   2c78a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	y = *--xa;
   2c78e:	48 83 6d e0 04       	subq   $0x4,-0x20(%rbp)
   2c793:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c797:	8b 00                	mov    (%rax),%eax
   2c799:	89 45 d0             	mov    %eax,-0x30(%rbp)
#ifdef DEBUG
	if (!y) Bug("zero y in b2d");
#endif
	k = hi0bits(y);
   2c79c:	8b 45 d0             	mov    -0x30(%rbp),%eax
   2c79f:	89 c7                	mov    %eax,%edi
   2c7a1:	e8 49 f5 ff ff       	callq  2bcef <__hi0bits_D2A>
   2c7a6:	89 45 d4             	mov    %eax,-0x2c(%rbp)
	*e = 32 - k;
   2c7a9:	b8 20 00 00 00       	mov    $0x20,%eax
   2c7ae:	2b 45 d4             	sub    -0x2c(%rbp),%eax
   2c7b1:	89 c2                	mov    %eax,%edx
   2c7b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2c7b7:	89 10                	mov    %edx,(%rax)
#ifdef Pack_32
	if (k < Ebits) {
   2c7b9:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%rbp)
   2c7bd:	7f 62                	jg     2c821 <__b2d_D2A+0xda>
		d0 = Exp_1 | y >> (Ebits - k);
   2c7bf:	b8 0b 00 00 00       	mov    $0xb,%eax
   2c7c4:	2b 45 d4             	sub    -0x2c(%rbp),%eax
   2c7c7:	8b 55 d0             	mov    -0x30(%rbp),%edx
   2c7ca:	89 c1                	mov    %eax,%ecx
   2c7cc:	d3 ea                	shr    %cl,%edx
   2c7ce:	89 d0                	mov    %edx,%eax
   2c7d0:	0d 00 00 f0 3f       	or     $0x3ff00000,%eax
   2c7d5:	89 45 f4             	mov    %eax,-0xc(%rbp)
		w = xa > xa0 ? *--xa : 0;
   2c7d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c7dc:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   2c7e0:	76 0d                	jbe    2c7ef <__b2d_D2A+0xa8>
   2c7e2:	48 83 6d e0 04       	subq   $0x4,-0x20(%rbp)
   2c7e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c7eb:	8b 00                	mov    (%rax),%eax
   2c7ed:	eb 05                	jmp    2c7f4 <__b2d_D2A+0xad>
   2c7ef:	b8 00 00 00 00       	mov    $0x0,%eax
   2c7f4:	89 45 dc             	mov    %eax,-0x24(%rbp)
		d1 = y << ((32-Ebits) + k) | w >> (Ebits - k);
   2c7f7:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2c7fa:	83 c0 15             	add    $0x15,%eax
   2c7fd:	8b 55 d0             	mov    -0x30(%rbp),%edx
   2c800:	89 d6                	mov    %edx,%esi
   2c802:	89 c1                	mov    %eax,%ecx
   2c804:	d3 e6                	shl    %cl,%esi
   2c806:	b8 0b 00 00 00       	mov    $0xb,%eax
   2c80b:	2b 45 d4             	sub    -0x2c(%rbp),%eax
   2c80e:	8b 55 dc             	mov    -0x24(%rbp),%edx
   2c811:	89 c1                	mov    %eax,%ecx
   2c813:	d3 ea                	shr    %cl,%edx
   2c815:	89 d0                	mov    %edx,%eax
   2c817:	09 f0                	or     %esi,%eax
   2c819:	89 45 f0             	mov    %eax,-0x10(%rbp)
		goto ret_d;
   2c81c:	e9 a4 00 00 00       	jmpq   2c8c5 <__b2d_D2A+0x17e>
		}
	z = xa > xa0 ? *--xa : 0;
   2c821:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c825:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   2c829:	76 0d                	jbe    2c838 <__b2d_D2A+0xf1>
   2c82b:	48 83 6d e0 04       	subq   $0x4,-0x20(%rbp)
   2c830:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c834:	8b 00                	mov    (%rax),%eax
   2c836:	eb 05                	jmp    2c83d <__b2d_D2A+0xf6>
   2c838:	b8 00 00 00 00       	mov    $0x0,%eax
   2c83d:	89 45 d8             	mov    %eax,-0x28(%rbp)
	if (k -= Ebits) {
   2c840:	83 6d d4 0b          	subl   $0xb,-0x2c(%rbp)
   2c844:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   2c848:	74 6a                	je     2c8b4 <__b2d_D2A+0x16d>
		d0 = Exp_1 | y << k | z >> (32 - k);
   2c84a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2c84d:	8b 55 d0             	mov    -0x30(%rbp),%edx
   2c850:	89 d6                	mov    %edx,%esi
   2c852:	89 c1                	mov    %eax,%ecx
   2c854:	d3 e6                	shl    %cl,%esi
   2c856:	b8 20 00 00 00       	mov    $0x20,%eax
   2c85b:	2b 45 d4             	sub    -0x2c(%rbp),%eax
   2c85e:	8b 55 d8             	mov    -0x28(%rbp),%edx
   2c861:	89 c1                	mov    %eax,%ecx
   2c863:	d3 ea                	shr    %cl,%edx
   2c865:	89 d0                	mov    %edx,%eax
   2c867:	09 f0                	or     %esi,%eax
   2c869:	0d 00 00 f0 3f       	or     $0x3ff00000,%eax
   2c86e:	89 45 f4             	mov    %eax,-0xc(%rbp)
		y = xa > xa0 ? *--xa : 0;
   2c871:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c875:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
   2c879:	76 0d                	jbe    2c888 <__b2d_D2A+0x141>
   2c87b:	48 83 6d e0 04       	subq   $0x4,-0x20(%rbp)
   2c880:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2c884:	8b 00                	mov    (%rax),%eax
   2c886:	eb 05                	jmp    2c88d <__b2d_D2A+0x146>
   2c888:	b8 00 00 00 00       	mov    $0x0,%eax
   2c88d:	89 45 d0             	mov    %eax,-0x30(%rbp)
		d1 = z << k | y >> (32 - k);
   2c890:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2c893:	8b 55 d8             	mov    -0x28(%rbp),%edx
   2c896:	89 d6                	mov    %edx,%esi
   2c898:	89 c1                	mov    %eax,%ecx
   2c89a:	d3 e6                	shl    %cl,%esi
   2c89c:	b8 20 00 00 00       	mov    $0x20,%eax
   2c8a1:	2b 45 d4             	sub    -0x2c(%rbp),%eax
   2c8a4:	8b 55 d0             	mov    -0x30(%rbp),%edx
   2c8a7:	89 c1                	mov    %eax,%ecx
   2c8a9:	d3 ea                	shr    %cl,%edx
   2c8ab:	89 d0                	mov    %edx,%eax
   2c8ad:	09 f0                	or     %esi,%eax
   2c8af:	89 45 f0             	mov    %eax,-0x10(%rbp)
   2c8b2:	eb 11                	jmp    2c8c5 <__b2d_D2A+0x17e>
		}
	else {
		d0 = Exp_1 | y;
   2c8b4:	8b 45 d0             	mov    -0x30(%rbp),%eax
   2c8b7:	0d 00 00 f0 3f       	or     $0x3ff00000,%eax
   2c8bc:	89 45 f4             	mov    %eax,-0xc(%rbp)
		d1 = z;
   2c8bf:	8b 45 d8             	mov    -0x28(%rbp),%eax
   2c8c2:	89 45 f0             	mov    %eax,-0x10(%rbp)
 ret_d:
#ifdef VAX
	word0(&d) = d0 >> 16 | d0 << 16;
	word1(&d) = d1 >> 16 | d1 << 16;
#endif
	return dval(&d);
   2c8c5:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
	}
   2c8ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2c8ce:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
   2c8d5:	00 00 
   2c8d7:	74 05                	je     2c8de <__b2d_D2A+0x197>
   2c8d9:	e8 ba 86 fd ff       	callq  4f98 <__stack_chk_fail>
   2c8de:	c9                   	leaveq 
   2c8df:	c3                   	retq   

000000000002c8e0 <__d2b_D2A>:
#ifdef KR_headers
	(dd, e, bits) double dd; int *e, *bits;
#else
	(double dd, int *e, int *bits)
#endif
{
   2c8e0:	55                   	push   %rbp
   2c8e1:	48 89 e5             	mov    %rsp,%rbp
   2c8e4:	53                   	push   %rbx
   2c8e5:	48 83 ec 68          	sub    $0x68,%rsp
   2c8e9:	f2 0f 11 45 a8       	movsd  %xmm0,-0x58(%rbp)
   2c8ee:	48 89 7d a0          	mov    %rdi,-0x60(%rbp)
   2c8f2:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
   2c8f6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   2c8fd:	00 00 
   2c8ff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2c903:	31 c0                	xor    %eax,%eax
	ULong d0, d1;
#else
#define d0 word0(&d)
#define d1 word1(&d)
#endif
	d.d = dd;
   2c905:	f2 0f 10 45 a8       	movsd  -0x58(%rbp),%xmm0
   2c90a:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
	d0 = word0(&d) >> 16 | word0(&d) << 16;
	d1 = word1(&d) >> 16 | word1(&d) << 16;
#endif

#ifdef Pack_32
	b = Balloc(1);
   2c90f:	bf 01 00 00 00       	mov    $0x1,%edi
   2c914:	e8 db ef ff ff       	callq  2b8f4 <__Balloc_D2A>
   2c919:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#else
	b = Balloc(2);
#endif
	if (b == NULL)
   2c91d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   2c922:	75 0a                	jne    2c92e <__d2b_D2A+0x4e>
		return (NULL);
   2c924:	b8 00 00 00 00       	mov    $0x0,%eax
   2c929:	e9 68 01 00 00       	jmpq   2ca96 <__d2b_D2A+0x1b6>
	x = b->x;
   2c92e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c932:	48 83 c0 18          	add    $0x18,%rax
   2c936:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

	z = d0 & Frac_mask;
   2c93a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2c93d:	25 ff ff 0f 00       	and    $0xfffff,%eax
   2c942:	89 45 c0             	mov    %eax,-0x40(%rbp)
	d0 &= 0x7fffffff;	/* clear sign bit, which we ignore */
   2c945:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2c948:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   2c94d:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	de = (int)(d0 >> Exp_shift);
#ifndef IBM
	z |= Exp_msk11;
#endif
#else
	if ( (de = (int)(d0 >> Exp_shift)) !=0)
   2c950:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2c953:	c1 e8 14             	shr    $0x14,%eax
   2c956:	89 45 cc             	mov    %eax,-0x34(%rbp)
   2c959:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   2c95d:	74 0b                	je     2c96a <__d2b_D2A+0x8a>
		z |= Exp_msk1;
   2c95f:	8b 45 c0             	mov    -0x40(%rbp),%eax
   2c962:	0d 00 00 10 00       	or     $0x100000,%eax
   2c967:	89 45 c0             	mov    %eax,-0x40(%rbp)
#endif
#ifdef Pack_32
	if ( (y = d1) !=0) {
   2c96a:	8b 45 e0             	mov    -0x20(%rbp),%eax
   2c96d:	89 45 bc             	mov    %eax,-0x44(%rbp)
   2c970:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2c973:	85 c0                	test   %eax,%eax
   2c975:	74 7b                	je     2c9f2 <__d2b_D2A+0x112>
		if ( (k = lo0bits(&y)) !=0) {
   2c977:	48 8d 45 bc          	lea    -0x44(%rbp),%rax
   2c97b:	48 89 c7             	mov    %rax,%rdi
   2c97e:	e8 43 f1 ff ff       	callq  2bac6 <__lo0bits_D2A>
   2c983:	89 45 c8             	mov    %eax,-0x38(%rbp)
   2c986:	83 7d c8 00          	cmpl   $0x0,-0x38(%rbp)
   2c98a:	74 2b                	je     2c9b7 <__d2b_D2A+0xd7>
			x[0] = y | z << (32 - k);
   2c98c:	8b 55 c0             	mov    -0x40(%rbp),%edx
   2c98f:	b8 20 00 00 00       	mov    $0x20,%eax
   2c994:	2b 45 c8             	sub    -0x38(%rbp),%eax
   2c997:	89 c1                	mov    %eax,%ecx
   2c999:	d3 e2                	shl    %cl,%edx
   2c99b:	8b 45 bc             	mov    -0x44(%rbp),%eax
   2c99e:	09 c2                	or     %eax,%edx
   2c9a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c9a4:	89 10                	mov    %edx,(%rax)
			z >>= k;
   2c9a6:	8b 55 c0             	mov    -0x40(%rbp),%edx
   2c9a9:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2c9ac:	89 c1                	mov    %eax,%ecx
   2c9ae:	d3 ea                	shr    %cl,%edx
   2c9b0:	89 d0                	mov    %edx,%eax
   2c9b2:	89 45 c0             	mov    %eax,-0x40(%rbp)
   2c9b5:	eb 09                	jmp    2c9c0 <__d2b_D2A+0xe0>
			}
		else
			x[0] = y;
   2c9b7:	8b 55 bc             	mov    -0x44(%rbp),%edx
   2c9ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c9be:	89 10                	mov    %edx,(%rax)
#ifndef Sudden_Underflow
		i =
#endif
		     b->wds = (x[1] = z) !=0 ? 2 : 1;
   2c9c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2c9c4:	48 83 c0 04          	add    $0x4,%rax
   2c9c8:	8b 55 c0             	mov    -0x40(%rbp),%edx
   2c9cb:	89 10                	mov    %edx,(%rax)
   2c9cd:	8b 00                	mov    (%rax),%eax
   2c9cf:	85 c0                	test   %eax,%eax
   2c9d1:	74 07                	je     2c9da <__d2b_D2A+0xfa>
   2c9d3:	ba 02 00 00 00       	mov    $0x2,%edx
   2c9d8:	eb 05                	jmp    2c9df <__d2b_D2A+0xff>
   2c9da:	ba 01 00 00 00       	mov    $0x1,%edx
   2c9df:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c9e3:	89 50 14             	mov    %edx,0x14(%rax)
		i =
   2c9e6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2c9ea:	8b 40 14             	mov    0x14(%rax),%eax
   2c9ed:	89 45 c4             	mov    %eax,-0x3c(%rbp)
   2c9f0:	eb 31                	jmp    2ca23 <__d2b_D2A+0x143>
		}
	else {
		k = lo0bits(&z);
   2c9f2:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
   2c9f6:	48 89 c7             	mov    %rax,%rdi
   2c9f9:	e8 c8 f0 ff ff       	callq  2bac6 <__lo0bits_D2A>
   2c9fe:	89 45 c8             	mov    %eax,-0x38(%rbp)
		x[0] = z;
   2ca01:	8b 55 c0             	mov    -0x40(%rbp),%edx
   2ca04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2ca08:	89 10                	mov    %edx,(%rax)
#ifndef Sudden_Underflow
		i =
#endif
		    b->wds = 1;
   2ca0a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2ca0e:	c7 40 14 01 00 00 00 	movl   $0x1,0x14(%rax)
		i =
   2ca15:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2ca19:	8b 40 14             	mov    0x14(%rax),%eax
   2ca1c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
		k += 32;
   2ca1f:	83 45 c8 20          	addl   $0x20,-0x38(%rbp)
	while(!x[i])
		--i;
	b->wds = i + 1;
#endif
#ifndef Sudden_Underflow
	if (de) {
   2ca23:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
   2ca27:	74 26                	je     2ca4f <__d2b_D2A+0x16f>
#endif
#ifdef IBM
		*e = (de - Bias - (P-1) << 2) + k;
		*bits = 4*P + 8 - k - hi0bits(word0(&d) & Frac_mask);
#else
		*e = de - Bias - (P-1) + k;
   2ca29:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2ca2c:	8d 90 cd fb ff ff    	lea    -0x433(%rax),%edx
   2ca32:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2ca35:	01 c2                	add    %eax,%edx
   2ca37:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2ca3b:	89 10                	mov    %edx,(%rax)
		*bits = P - k;
   2ca3d:	b8 35 00 00 00       	mov    $0x35,%eax
   2ca42:	2b 45 c8             	sub    -0x38(%rbp),%eax
   2ca45:	89 c2                	mov    %eax,%edx
   2ca47:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2ca4b:	89 10                	mov    %edx,(%rax)
   2ca4d:	eb 43                	jmp    2ca92 <__d2b_D2A+0x1b2>
#endif
#ifndef Sudden_Underflow
		}
	else {
		*e = de - Bias - (P-1) + 1 + k;
   2ca4f:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2ca52:	8d 90 ce fb ff ff    	lea    -0x432(%rax),%edx
   2ca58:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2ca5b:	01 c2                	add    %eax,%edx
   2ca5d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2ca61:	89 10                	mov    %edx,(%rax)
#ifdef Pack_32
		*bits = 32*i - hi0bits(x[i-1]);
   2ca63:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   2ca66:	c1 e0 05             	shl    $0x5,%eax
   2ca69:	89 c3                	mov    %eax,%ebx
   2ca6b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
   2ca6e:	48 98                	cltq   
   2ca70:	48 c1 e0 02          	shl    $0x2,%rax
   2ca74:	48 8d 50 fc          	lea    -0x4(%rax),%rdx
   2ca78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2ca7c:	48 01 d0             	add    %rdx,%rax
   2ca7f:	8b 00                	mov    (%rax),%eax
   2ca81:	89 c7                	mov    %eax,%edi
   2ca83:	e8 67 f2 ff ff       	callq  2bcef <__hi0bits_D2A>
   2ca88:	29 c3                	sub    %eax,%ebx
   2ca8a:	89 da                	mov    %ebx,%edx
   2ca8c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2ca90:	89 10                	mov    %edx,(%rax)
#else
		*bits = (i+2)*16 - hi0bits(x[i]);
#endif
		}
#endif
	return b;
   2ca92:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
	}
   2ca96:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
   2ca9a:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
   2caa1:	00 00 
   2caa3:	74 05                	je     2caaa <__d2b_D2A+0x1ca>
   2caa5:	e8 ee 84 fd ff       	callq  4f98 <__stack_chk_fail>
   2caaa:	48 83 c4 68          	add    $0x68,%rsp
   2caae:	5b                   	pop    %rbx
   2caaf:	5d                   	pop    %rbp
   2cab0:	c3                   	retq   

000000000002cab1 <wrapv>:
 * Convert an unsigned char value into a char value without relying on
 * signed overflow behavior.
 */
static __inline char
wrapv(unsigned char ch)
{
   2cab1:	55                   	push   %rbp
   2cab2:	48 89 e5             	mov    %rsp,%rbp
   2cab5:	89 f8                	mov    %edi,%eax
   2cab7:	88 45 fc             	mov    %al,-0x4(%rbp)
	if (ch >= 0x80)
   2caba:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
   2cabe:	84 c0                	test   %al,%al
   2cac0:	79 06                	jns    2cac8 <wrapv+0x17>
		return ((int)ch - 0x100);
   2cac2:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
   2cac6:	eb 04                	jmp    2cacc <wrapv+0x1b>
	else
		return (ch);
   2cac8:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
}
   2cacc:	5d                   	pop    %rbp
   2cacd:	c3                   	retq   

000000000002cace <mbsinit>:

int
mbsinit(const mbstate_t *ps)
{
   2cace:	55                   	push   %rbp
   2cacf:	48 89 e5             	mov    %rsp,%rbp
   2cad2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	UNUSED(ps);
	return (1);  /* always initial state */
   2cad6:	b8 01 00 00 00       	mov    $0x1,%eax
}
   2cadb:	5d                   	pop    %rbp
   2cadc:	c3                   	retq   

000000000002cadd <mbrtowc>:

size_t
mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
{
   2cadd:	55                   	push   %rbp
   2cade:	48 89 e5             	mov    %rsp,%rbp
   2cae1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2cae5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2cae9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2caed:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	/* s may be NULL */
	/* ps appears to be unused */

	UNUSED(ps);

	if (s == NULL)
   2caf1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
   2caf6:	75 07                	jne    2caff <mbrtowc+0x22>
		return 0;
   2caf8:	b8 00 00 00 00       	mov    $0x0,%eax
   2cafd:	eb 36                	jmp    2cb35 <mbrtowc+0x58>
	if (n == 0)
   2caff:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   2cb04:	75 09                	jne    2cb0f <mbrtowc+0x32>
		return (size_t)-2;
   2cb06:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
   2cb0d:	eb 26                	jmp    2cb35 <mbrtowc+0x58>
	if (pwc)
   2cb0f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2cb14:	74 10                	je     2cb26 <mbrtowc+0x49>
		*pwc = (wchar_t)(unsigned char)*s;
   2cb16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2cb1a:	0f b6 00             	movzbl (%rax),%eax
   2cb1d:	0f b6 d0             	movzbl %al,%edx
   2cb20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2cb24:	89 10                	mov    %edx,(%rax)
	return (*s != '\0');
   2cb26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2cb2a:	0f b6 00             	movzbl (%rax),%eax
   2cb2d:	84 c0                	test   %al,%al
   2cb2f:	0f 95 c0             	setne  %al
   2cb32:	0f b6 c0             	movzbl %al,%eax
}
   2cb35:	5d                   	pop    %rbp
   2cb36:	c3                   	retq   

000000000002cb37 <mbsrtowcs>:

size_t
mbsrtowcs(wchar_t *dst, const char **src, size_t len, mbstate_t *ps)
{
   2cb37:	55                   	push   %rbp
   2cb38:	48 89 e5             	mov    %rsp,%rbp
   2cb3b:	48 83 ec 20          	sub    $0x20,%rsp
   2cb3f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2cb43:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2cb47:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2cb4b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return (mbsnrtowcs(dst, src, SIZE_MAX, len, ps));
   2cb4f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2cb53:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2cb57:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2cb5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2cb5f:	49 89 c8             	mov    %rcx,%r8
   2cb62:	48 89 d1             	mov    %rdx,%rcx
   2cb65:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   2cb6c:	48 89 c7             	mov    %rax,%rdi
   2cb6f:	e8 02 00 00 00       	callq  2cb76 <mbsnrtowcs>
}
   2cb74:	c9                   	leaveq 
   2cb75:	c3                   	retq   

000000000002cb76 <mbsnrtowcs>:

size_t
mbsnrtowcs(wchar_t *dst, const char **src, size_t nmc, size_t len,
    mbstate_t *ps)
{
   2cb76:	55                   	push   %rbp
   2cb77:	48 89 e5             	mov    %rsp,%rbp
   2cb7a:	48 83 ec 40          	sub    $0x40,%rsp
   2cb7e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2cb82:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   2cb86:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   2cb8a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
   2cb8e:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	/* dst may be NULL */
	/* ps appears to be unused */

	UNUSED(ps);
	
	if (dst == NULL)
   2cb92:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
   2cb97:	75 18                	jne    2cbb1 <mbsnrtowcs+0x3b>
		return strnlen(*src, nmc);
   2cb99:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2cb9d:	48 8b 00             	mov    (%rax),%rax
   2cba0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   2cba4:	48 89 d6             	mov    %rdx,%rsi
   2cba7:	48 89 c7             	mov    %rax,%rdi
   2cbaa:	e8 86 02 00 00       	callq  2ce35 <strnlen>
   2cbaf:	eb 7e                	jmp    2cc2f <mbsnrtowcs+0xb9>

	for (i = 0; i < nmc && i < len; i++)
   2cbb1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   2cbb8:	00 
   2cbb9:	eb 47                	jmp    2cc02 <mbsnrtowcs+0x8c>
		if ((dst[i] = (wchar_t)(unsigned char)(*src)[i]) == L'\0') {
   2cbbb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2cbbf:	48 8b 10             	mov    (%rax),%rdx
   2cbc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2cbc6:	48 01 d0             	add    %rdx,%rax
   2cbc9:	0f b6 00             	movzbl (%rax),%eax
   2cbcc:	89 c1                	mov    %eax,%ecx
   2cbce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2cbd2:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2cbd9:	00 
   2cbda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2cbde:	48 01 d0             	add    %rdx,%rax
   2cbe1:	0f b6 d1             	movzbl %cl,%edx
   2cbe4:	89 10                	mov    %edx,(%rax)
   2cbe6:	8b 00                	mov    (%rax),%eax
   2cbe8:	85 c0                	test   %eax,%eax
   2cbea:	75 11                	jne    2cbfd <mbsnrtowcs+0x87>
			*src = NULL;
   2cbec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2cbf0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			return (i);
   2cbf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2cbfb:	eb 32                	jmp    2cc2f <mbsnrtowcs+0xb9>
	for (i = 0; i < nmc && i < len; i++)
   2cbfd:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   2cc02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2cc06:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
   2cc0a:	73 0a                	jae    2cc16 <mbsnrtowcs+0xa0>
   2cc0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2cc10:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
   2cc14:	72 a5                	jb     2cbbb <mbsnrtowcs+0x45>
		}

	*src += i;
   2cc16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2cc1a:	48 8b 10             	mov    (%rax),%rdx
   2cc1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2cc21:	48 01 c2             	add    %rax,%rdx
   2cc24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2cc28:	48 89 10             	mov    %rdx,(%rax)
	return (i);
   2cc2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
   2cc2f:	c9                   	leaveq 
   2cc30:	c3                   	retq   

000000000002cc31 <wcrtomb>:

size_t
wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
{
   2cc31:	55                   	push   %rbp
   2cc32:	48 89 e5             	mov    %rsp,%rbp
   2cc35:	48 83 ec 20          	sub    $0x20,%rsp
   2cc39:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2cc3d:	89 75 f4             	mov    %esi,-0xc(%rbp)
   2cc40:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	/* s may be NULL */
	/* ps appears to be unused */

	UNUSED(ps);

	if (s == NULL)
   2cc44:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
   2cc49:	75 07                	jne    2cc52 <wcrtomb+0x21>
		return (1);
   2cc4b:	b8 01 00 00 00       	mov    $0x1,%eax
   2cc50:	eb 3d                	jmp    2cc8f <wcrtomb+0x5e>

	if (wc < 0 || wc > 0xff) {
   2cc52:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   2cc56:	78 09                	js     2cc61 <wcrtomb+0x30>
   2cc58:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%rbp)
   2cc5f:	7e 14                	jle    2cc75 <wcrtomb+0x44>
		errno = EILSEQ;
   2cc61:	e8 5a 2a ff ff       	callq  1f6c0 <__errno>
   2cc66:	c7 00 54 00 00 00    	movl   $0x54,(%rax)
		return (-1);
   2cc6c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
   2cc73:	eb 1a                	jmp    2cc8f <wcrtomb+0x5e>
	}

	*s = wrapv(wc);
   2cc75:	8b 45 f4             	mov    -0xc(%rbp),%eax
   2cc78:	0f b6 c0             	movzbl %al,%eax
   2cc7b:	89 c7                	mov    %eax,%edi
   2cc7d:	e8 2f fe ff ff       	callq  2cab1 <wrapv>
   2cc82:	89 c2                	mov    %eax,%edx
   2cc84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2cc88:	88 10                	mov    %dl,(%rax)
	return (1);
   2cc8a:	b8 01 00 00 00       	mov    $0x1,%eax
}
   2cc8f:	c9                   	leaveq 
   2cc90:	c3                   	retq   

000000000002cc91 <wcsrtombs>:

size_t
wcsrtombs(char *dst, const wchar_t **src, size_t len, mbstate_t *ps)
{
   2cc91:	55                   	push   %rbp
   2cc92:	48 89 e5             	mov    %rsp,%rbp
   2cc95:	48 83 ec 20          	sub    $0x20,%rsp
   2cc99:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2cc9d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   2cca1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2cca5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	return (wcsnrtombs(dst, src, SIZE_MAX, len, ps));
   2cca9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2ccad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2ccb1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
   2ccb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ccb9:	49 89 c8             	mov    %rcx,%r8
   2ccbc:	48 89 d1             	mov    %rdx,%rcx
   2ccbf:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
   2ccc6:	48 89 c7             	mov    %rax,%rdi
   2ccc9:	e8 02 00 00 00       	callq  2ccd0 <wcsnrtombs>
}
   2ccce:	c9                   	leaveq 
   2cccf:	c3                   	retq   

000000000002ccd0 <wcsnrtombs>:

size_t
wcsnrtombs(char *dst, const wchar_t **src, size_t nwc, size_t len,
    mbstate_t *ps)
{
   2ccd0:	55                   	push   %rbp
   2ccd1:	48 89 e5             	mov    %rsp,%rbp
   2ccd4:	53                   	push   %rbx
   2ccd5:	48 83 ec 48          	sub    $0x48,%rsp
   2ccd9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2ccdd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   2cce1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
   2cce5:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
   2cce9:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	/* dst may be NULL */
	/* ps appears to be unused */

	UNUSED(ps);
	
	if (dst == NULL) {
   2cced:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   2ccf2:	75 6e                	jne    2cd62 <wcsnrtombs+0x92>
		for (i = 0; i < nwc; i++) {
   2ccf4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   2ccfb:	00 
   2ccfc:	eb 51                	jmp    2cd4f <wcsnrtombs+0x7f>
			wchar_t wc = (*src)[i];
   2ccfe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2cd02:	48 8b 00             	mov    (%rax),%rax
   2cd05:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2cd09:	48 c1 e2 02          	shl    $0x2,%rdx
   2cd0d:	48 01 d0             	add    %rdx,%rax
   2cd10:	8b 00                	mov    (%rax),%eax
   2cd12:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			if (wc < 0 || wc > 0xff) {
   2cd15:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
   2cd19:	78 09                	js     2cd24 <wcsnrtombs+0x54>
   2cd1b:	81 7d e4 ff 00 00 00 	cmpl   $0xff,-0x1c(%rbp)
   2cd22:	7e 17                	jle    2cd3b <wcsnrtombs+0x6b>
				errno = EILSEQ;
   2cd24:	e8 97 29 ff ff       	callq  1f6c0 <__errno>
   2cd29:	c7 00 54 00 00 00    	movl   $0x54,(%rax)
				return (-1);
   2cd2f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
   2cd36:	e9 f3 00 00 00       	jmpq   2ce2e <wcsnrtombs+0x15e>
			}
			if (wc == L'\0')
   2cd3b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
   2cd3f:	75 09                	jne    2cd4a <wcsnrtombs+0x7a>
				return (i);
   2cd41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2cd45:	e9 e4 00 00 00       	jmpq   2ce2e <wcsnrtombs+0x15e>
		for (i = 0; i < nwc; i++) {
   2cd4a:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
   2cd4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2cd53:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   2cd57:	72 a5                	jb     2ccfe <wcsnrtombs+0x2e>
		}
		return (i);
   2cd59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2cd5d:	e9 cc 00 00 00       	jmpq   2ce2e <wcsnrtombs+0x15e>
	}

	for (i = 0; i < nwc && i < len; i++) {
   2cd62:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
   2cd69:	00 
   2cd6a:	e9 8a 00 00 00       	jmpq   2cdf9 <wcsnrtombs+0x129>
		wchar_t wc = (*src)[i];
   2cd6f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2cd73:	48 8b 00             	mov    (%rax),%rax
   2cd76:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2cd7a:	48 c1 e2 02          	shl    $0x2,%rdx
   2cd7e:	48 01 d0             	add    %rdx,%rax
   2cd81:	8b 00                	mov    (%rax),%eax
   2cd83:	89 45 e0             	mov    %eax,-0x20(%rbp)
		if (wc < 0 || wc > 0xff) {
   2cd86:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
   2cd8a:	78 09                	js     2cd95 <wcsnrtombs+0xc5>
   2cd8c:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
   2cd93:	7e 2d                	jle    2cdc2 <wcsnrtombs+0xf2>
			*src += i;
   2cd95:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2cd99:	48 8b 00             	mov    (%rax),%rax
   2cd9c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2cda0:	48 c1 e2 02          	shl    $0x2,%rdx
   2cda4:	48 01 c2             	add    %rax,%rdx
   2cda7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2cdab:	48 89 10             	mov    %rdx,(%rax)
			errno = EILSEQ;
   2cdae:	e8 0d 29 ff ff       	callq  1f6c0 <__errno>
   2cdb3:	c7 00 54 00 00 00    	movl   $0x54,(%rax)
			return (-1);
   2cdb9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
   2cdc0:	eb 6c                	jmp    2ce2e <wcsnrtombs+0x15e>
		}
		dst[i] = wrapv(wc);
   2cdc2:	8b 45 e0             	mov    -0x20(%rbp),%eax
   2cdc5:	0f b6 c0             	movzbl %al,%eax
   2cdc8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   2cdcc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2cdd0:	48 8d 1c 11          	lea    (%rcx,%rdx,1),%rbx
   2cdd4:	89 c7                	mov    %eax,%edi
   2cdd6:	e8 d6 fc ff ff       	callq  2cab1 <wrapv>
   2cddb:	88 03                	mov    %al,(%rbx)
		if (wc == L'\0') {
   2cddd:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
   2cde1:	75 11                	jne    2cdf4 <wcsnrtombs+0x124>
			*src = NULL;
   2cde3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2cde7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			return (i);
   2cdee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2cdf2:	eb 3a                	jmp    2ce2e <wcsnrtombs+0x15e>
	for (i = 0; i < nwc && i < len; i++) {
   2cdf4:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
   2cdf9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2cdfd:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
   2ce01:	73 0e                	jae    2ce11 <wcsnrtombs+0x141>
   2ce03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ce07:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   2ce0b:	0f 82 5e ff ff ff    	jb     2cd6f <wcsnrtombs+0x9f>
		}
	}
	*src += i;
   2ce11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2ce15:	48 8b 00             	mov    (%rax),%rax
   2ce18:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2ce1c:	48 c1 e2 02          	shl    $0x2,%rdx
   2ce20:	48 01 c2             	add    %rax,%rdx
   2ce23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2ce27:	48 89 10             	mov    %rdx,(%rax)
	return (i);
   2ce2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
   2ce2e:	48 83 c4 48          	add    $0x48,%rsp
   2ce32:	5b                   	pop    %rbx
   2ce33:	5d                   	pop    %rbp
   2ce34:	c3                   	retq   

000000000002ce35 <strnlen>:

#include <string.h>

size_t
strnlen(const char *str, size_t maxlen)
{
   2ce35:	55                   	push   %rbp
   2ce36:	48 89 e5             	mov    %rsp,%rbp
   2ce39:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2ce3d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	const char *cp;

	for (cp = str; maxlen != 0 && *cp != '\0'; cp++, maxlen--)
   2ce41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ce45:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2ce49:	eb 0a                	jmp    2ce55 <strnlen+0x20>
   2ce4b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
   2ce50:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
   2ce55:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   2ce5a:	74 0b                	je     2ce67 <strnlen+0x32>
   2ce5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ce60:	0f b6 00             	movzbl (%rax),%eax
   2ce63:	84 c0                	test   %al,%al
   2ce65:	75 e4                	jne    2ce4b <strnlen+0x16>
		;

	return (size_t)(cp - str);
   2ce67:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2ce6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ce6f:	48 29 c2             	sub    %rax,%rdx
   2ce72:	48 89 d0             	mov    %rdx,%rax
}
   2ce75:	5d                   	pop    %rbp
   2ce76:	c3                   	retq   
   2ce77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
   2ce7e:	00 00 

000000000002ce80 <__fpclassifyd>:
   2ce80:	f3 0f 1e fa          	endbr64 
   2ce84:	66 48 0f 7e c1       	movq   %xmm0,%rcx
   2ce89:	f2 0f 11 44 24 f8    	movsd  %xmm0,-0x8(%rsp)
   2ce8f:	8b 44 24 fc          	mov    -0x4(%rsp),%eax
   2ce93:	48 0f ba f1 3f       	btr    $0x3f,%rcx
   2ce98:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   2ce9d:	3d 00 00 f0 7f       	cmp    $0x7ff00000,%eax
   2cea2:	72 13                	jb     2ceb7 <__fpclassifyd+0x37>
   2cea4:	48 ba 00 00 00 00 00 	movabs $0x7ff0000000000000,%rdx
   2ceab:	00 f0 7f 
   2ceae:	33 c0                	xor    %eax,%eax
   2ceb0:	48 3b d1             	cmp    %rcx,%rdx
   2ceb3:	0f 93 c0             	setae  %al
   2ceb6:	c3                   	retq   
   2ceb7:	3d 00 00 10 00       	cmp    $0x100000,%eax
   2cebc:	73 0c                	jae    2ceca <__fpclassifyd+0x4a>
   2cebe:	33 c0                	xor    %eax,%eax
   2cec0:	48 85 c9             	test   %rcx,%rcx
   2cec3:	0f 95 c0             	setne  %al
   2cec6:	83 c0 02             	add    $0x2,%eax
   2cec9:	c3                   	retq   
   2ceca:	b8 04 00 00 00       	mov    $0x4,%eax
   2cecf:	c3                   	retq   

000000000002ced0 <fpclassifyd>:
   2ced0:	f3 0f 1e fa          	endbr64 
   2ced4:	66 48 0f 7e c1       	movq   %xmm0,%rcx
   2ced9:	f2 0f 11 44 24 f8    	movsd  %xmm0,-0x8(%rsp)
   2cedf:	8b 44 24 fc          	mov    -0x4(%rsp),%eax
   2cee3:	48 0f ba f1 3f       	btr    $0x3f,%rcx
   2cee8:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   2ceed:	3d 00 00 f0 7f       	cmp    $0x7ff00000,%eax
   2cef2:	72 13                	jb     2cf07 <fpclassifyd+0x37>
   2cef4:	48 ba 00 00 00 00 00 	movabs $0x7ff0000000000000,%rdx
   2cefb:	00 f0 7f 
   2cefe:	33 c0                	xor    %eax,%eax
   2cf00:	48 3b d1             	cmp    %rcx,%rdx
   2cf03:	0f 93 c0             	setae  %al
   2cf06:	c3                   	retq   
   2cf07:	3d 00 00 10 00       	cmp    $0x100000,%eax
   2cf0c:	73 0c                	jae    2cf1a <fpclassifyd+0x4a>
   2cf0e:	33 c0                	xor    %eax,%eax
   2cf10:	48 85 c9             	test   %rcx,%rcx
   2cf13:	0f 95 c0             	setne  %al
   2cf16:	83 c0 02             	add    $0x2,%eax
   2cf19:	c3                   	retq   
   2cf1a:	b8 04 00 00 00       	mov    $0x4,%eax
   2cf1f:	c3                   	retq   

000000000002cf20 <__fpclassify>:
   2cf20:	f3 0f 1e fa          	endbr64 
   2cf24:	66 48 0f 7e c1       	movq   %xmm0,%rcx
   2cf29:	f2 0f 11 44 24 f8    	movsd  %xmm0,-0x8(%rsp)
   2cf2f:	8b 44 24 fc          	mov    -0x4(%rsp),%eax
   2cf33:	48 0f ba f1 3f       	btr    $0x3f,%rcx
   2cf38:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   2cf3d:	3d 00 00 f0 7f       	cmp    $0x7ff00000,%eax
   2cf42:	72 13                	jb     2cf57 <__fpclassify+0x37>
   2cf44:	48 ba 00 00 00 00 00 	movabs $0x7ff0000000000000,%rdx
   2cf4b:	00 f0 7f 
   2cf4e:	33 c0                	xor    %eax,%eax
   2cf50:	48 3b d1             	cmp    %rcx,%rdx
   2cf53:	0f 93 c0             	setae  %al
   2cf56:	c3                   	retq   
   2cf57:	3d 00 00 10 00       	cmp    $0x100000,%eax
   2cf5c:	73 0c                	jae    2cf6a <__fpclassify+0x4a>
   2cf5e:	33 c0                	xor    %eax,%eax
   2cf60:	48 85 c9             	test   %rcx,%rcx
   2cf63:	0f 95 c0             	setne  %al
   2cf66:	83 c0 02             	add    $0x2,%eax
   2cf69:	c3                   	retq   
   2cf6a:	b8 04 00 00 00       	mov    $0x4,%eax
   2cf6f:	c3                   	retq   

000000000002cf70 <fpclassify>:
   2cf70:	f3 0f 1e fa          	endbr64 
   2cf74:	66 48 0f 7e c1       	movq   %xmm0,%rcx
   2cf79:	f2 0f 11 44 24 f8    	movsd  %xmm0,-0x8(%rsp)
   2cf7f:	8b 44 24 fc          	mov    -0x4(%rsp),%eax
   2cf83:	48 0f ba f1 3f       	btr    $0x3f,%rcx
   2cf88:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   2cf8d:	3d 00 00 f0 7f       	cmp    $0x7ff00000,%eax
   2cf92:	72 13                	jb     2cfa7 <fpclassify+0x37>
   2cf94:	48 ba 00 00 00 00 00 	movabs $0x7ff0000000000000,%rdx
   2cf9b:	00 f0 7f 
   2cf9e:	33 c0                	xor    %eax,%eax
   2cfa0:	48 3b d1             	cmp    %rcx,%rdx
   2cfa3:	0f 93 c0             	setae  %al
   2cfa6:	c3                   	retq   
   2cfa7:	3d 00 00 10 00       	cmp    $0x100000,%eax
   2cfac:	73 0c                	jae    2cfba <fpclassify+0x4a>
   2cfae:	33 c0                	xor    %eax,%eax
   2cfb0:	48 85 c9             	test   %rcx,%rcx
   2cfb3:	0f 95 c0             	setne  %al
   2cfb6:	83 c0 02             	add    $0x2,%eax
   2cfb9:	c3                   	retq   
   2cfba:	b8 04 00 00 00       	mov    $0x4,%eax
   2cfbf:	c3                   	retq   

000000000002cfc0 <__fpclassifyf>:
   2cfc0:	f3 0f 1e fa          	endbr64 
   2cfc4:	66 0f 7e c2          	movd   %xmm0,%edx
   2cfc8:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
   2cfce:	81 fa 00 00 80 7f    	cmp    $0x7f800000,%edx
   2cfd4:	72 09                	jb     2cfdf <__fpclassifyf+0x1f>
   2cfd6:	b8 00 00 00 00       	mov    $0x0,%eax
   2cfdb:	0f 96 c0             	setbe  %al
   2cfde:	c3                   	retq   
   2cfdf:	81 fa 00 00 80 00    	cmp    $0x800000,%edx
   2cfe5:	73 0b                	jae    2cff2 <__fpclassifyf+0x32>
   2cfe7:	33 c0                	xor    %eax,%eax
   2cfe9:	85 d2                	test   %edx,%edx
   2cfeb:	0f 95 c0             	setne  %al
   2cfee:	83 c0 02             	add    $0x2,%eax
   2cff1:	c3                   	retq   
   2cff2:	b8 04 00 00 00       	mov    $0x4,%eax
   2cff7:	c3                   	retq   
   2cff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2cfff:	00 

000000000002d000 <fpclassifyf>:
   2d000:	f3 0f 1e fa          	endbr64 
   2d004:	66 0f 7e c2          	movd   %xmm0,%edx
   2d008:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
   2d00e:	81 fa 00 00 80 7f    	cmp    $0x7f800000,%edx
   2d014:	72 09                	jb     2d01f <fpclassifyf+0x1f>
   2d016:	b8 00 00 00 00       	mov    $0x0,%eax
   2d01b:	0f 96 c0             	setbe  %al
   2d01e:	c3                   	retq   
   2d01f:	81 fa 00 00 80 00    	cmp    $0x800000,%edx
   2d025:	73 0b                	jae    2d032 <fpclassifyf+0x32>
   2d027:	33 c0                	xor    %eax,%eax
   2d029:	85 d2                	test   %edx,%edx
   2d02b:	0f 95 c0             	setne  %al
   2d02e:	83 c0 02             	add    $0x2,%eax
   2d031:	c3                   	retq   
   2d032:	b8 04 00 00 00       	mov    $0x4,%eax
   2d037:	c3                   	retq   
   2d038:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
   2d03f:	00 

000000000002d040 <__fpclassifyl>:
   2d040:	f3 0f 1e fa          	endbr64 
   2d044:	0f b7 4c 24 10       	movzwl 0x10(%rsp),%ecx
   2d049:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
   2d04f:	8b 74 24 0c          	mov    0xc(%rsp),%esi
   2d053:	89 c8                	mov    %ecx,%eax
   2d055:	89 f2                	mov    %esi,%edx
   2d057:	c1 e0 10             	shl    $0x10,%eax
   2d05a:	c1 ea 10             	shr    $0x10,%edx
   2d05d:	0b c2                	or     %edx,%eax
   2d05f:	3d 00 00 ff 7f       	cmp    $0x7fff0000,%eax
   2d064:	72 0b                	jb     2d071 <__fpclassifyl+0x31>
   2d066:	81 f9 ff 7f 00 00    	cmp    $0x7fff,%ecx
   2d06c:	74 2d                	je     2d09b <__fpclassifyl+0x5b>
   2d06e:	33 c0                	xor    %eax,%eax
   2d070:	c3                   	retq   
   2d071:	3d 00 00 01 00       	cmp    $0x10000,%eax
   2d076:	73 17                	jae    2d08f <__fpclassifyl+0x4f>
   2d078:	85 f6                	test   %esi,%esi
   2d07a:	75 07                	jne    2d083 <__fpclassifyl+0x43>
   2d07c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%rsp)
   2d081:	74 06                	je     2d089 <__fpclassifyl+0x49>
   2d083:	b8 03 00 00 00       	mov    $0x3,%eax
   2d088:	c3                   	retq   
   2d089:	b8 02 00 00 00       	mov    $0x2,%eax
   2d08e:	c3                   	retq   
   2d08f:	25 00 80 00 00       	and    $0x8000,%eax
   2d094:	c1 e8 0f             	shr    $0xf,%eax
   2d097:	83 c0 03             	add    $0x3,%eax
   2d09a:	c3                   	retq   
   2d09b:	81 fe 00 00 00 80    	cmp    $0x80000000,%esi
   2d0a1:	75 cb                	jne    2d06e <__fpclassifyl+0x2e>
   2d0a3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%rsp)
   2d0a8:	75 c4                	jne    2d06e <__fpclassifyl+0x2e>
   2d0aa:	b8 01 00 00 00       	mov    $0x1,%eax
   2d0af:	c3                   	retq   

000000000002d0b0 <fpclassifyl>:
   2d0b0:	f3 0f 1e fa          	endbr64 
   2d0b4:	0f b7 4c 24 10       	movzwl 0x10(%rsp),%ecx
   2d0b9:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
   2d0bf:	8b 74 24 0c          	mov    0xc(%rsp),%esi
   2d0c3:	89 c8                	mov    %ecx,%eax
   2d0c5:	89 f2                	mov    %esi,%edx
   2d0c7:	c1 e0 10             	shl    $0x10,%eax
   2d0ca:	c1 ea 10             	shr    $0x10,%edx
   2d0cd:	0b c2                	or     %edx,%eax
   2d0cf:	3d 00 00 ff 7f       	cmp    $0x7fff0000,%eax
   2d0d4:	72 0b                	jb     2d0e1 <fpclassifyl+0x31>
   2d0d6:	81 f9 ff 7f 00 00    	cmp    $0x7fff,%ecx
   2d0dc:	74 2d                	je     2d10b <fpclassifyl+0x5b>
   2d0de:	33 c0                	xor    %eax,%eax
   2d0e0:	c3                   	retq   
   2d0e1:	3d 00 00 01 00       	cmp    $0x10000,%eax
   2d0e6:	73 17                	jae    2d0ff <fpclassifyl+0x4f>
   2d0e8:	85 f6                	test   %esi,%esi
   2d0ea:	75 07                	jne    2d0f3 <fpclassifyl+0x43>
   2d0ec:	83 7c 24 08 00       	cmpl   $0x0,0x8(%rsp)
   2d0f1:	74 06                	je     2d0f9 <fpclassifyl+0x49>
   2d0f3:	b8 03 00 00 00       	mov    $0x3,%eax
   2d0f8:	c3                   	retq   
   2d0f9:	b8 02 00 00 00       	mov    $0x2,%eax
   2d0fe:	c3                   	retq   
   2d0ff:	25 00 80 00 00       	and    $0x8000,%eax
   2d104:	c1 e8 0f             	shr    $0xf,%eax
   2d107:	83 c0 03             	add    $0x3,%eax
   2d10a:	c3                   	retq   
   2d10b:	81 fe 00 00 00 80    	cmp    $0x80000000,%esi
   2d111:	75 cb                	jne    2d0de <fpclassifyl+0x2e>
   2d113:	83 7c 24 08 00       	cmpl   $0x0,0x8(%rsp)
   2d118:	75 c4                	jne    2d0de <fpclassifyl+0x2e>
   2d11a:	b8 01 00 00 00       	mov    $0x1,%eax
   2d11f:	c3                   	retq   

000000000002d120 <bitstob>:
#ifdef KR_headers
bitstob(bits, nbits, bbits) ULong *bits; int nbits; int *bbits;
#else
bitstob(ULong *bits, int nbits, int *bbits)
#endif
{
   2d120:	55                   	push   %rbp
   2d121:	48 89 e5             	mov    %rsp,%rbp
   2d124:	53                   	push   %rbx
   2d125:	48 83 ec 58          	sub    $0x58,%rsp
   2d129:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   2d12d:	89 75 b4             	mov    %esi,-0x4c(%rbp)
   2d130:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	int i, k;
	Bigint *b;
	ULong *be, *x, *x0;

	i = ULbits;
   2d134:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%rbp)
	k = 0;
   2d13b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
	while(i < nbits) {
   2d142:	eb 07                	jmp    2d14b <bitstob+0x2b>
		i <<= 1;
   2d144:	d1 65 c8             	shll   -0x38(%rbp)
		k++;
   2d147:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
	while(i < nbits) {
   2d14b:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2d14e:	3b 45 b4             	cmp    -0x4c(%rbp),%eax
   2d151:	7c f1                	jl     2d144 <bitstob+0x24>
		}
#ifndef Pack_32
	if (!k)
		k = 1;
#endif
	b = Balloc(k);
   2d153:	8b 45 cc             	mov    -0x34(%rbp),%eax
   2d156:	89 c7                	mov    %eax,%edi
   2d158:	e8 97 e7 ff ff       	callq  2b8f4 <__Balloc_D2A>
   2d15d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (b == NULL)
   2d161:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   2d166:	75 0a                	jne    2d172 <bitstob+0x52>
		return (NULL);
   2d168:	b8 00 00 00 00       	mov    $0x0,%eax
   2d16d:	e9 e6 00 00 00       	jmpq   2d258 <bitstob+0x138>
	be = bits + ((nbits - 1) >> kshift);
   2d172:	8b 45 b4             	mov    -0x4c(%rbp),%eax
   2d175:	83 e8 01             	sub    $0x1,%eax
   2d178:	c1 f8 05             	sar    $0x5,%eax
   2d17b:	48 98                	cltq   
   2d17d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2d184:	00 
   2d185:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2d189:	48 01 d0             	add    %rdx,%rax
   2d18c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	x = x0 = b->x;
   2d190:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2d194:	48 83 c0 18          	add    $0x18,%rax
   2d198:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2d19c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2d1a0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	do {
		*x++ = *bits & ALL_ON;
   2d1a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2d1a8:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2d1ac:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
   2d1b0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   2d1b4:	8b 12                	mov    (%rdx),%edx
   2d1b6:	89 10                	mov    %edx,(%rax)
#ifdef Pack_16
		*x++ = (*bits >> 16) & ALL_ON;
#endif
		} while(++bits <= be);
   2d1b8:	48 83 45 b8 04       	addq   $0x4,-0x48(%rbp)
   2d1bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2d1c1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
   2d1c5:	76 dd                	jbe    2d1a4 <bitstob+0x84>
	i = x - x0;
   2d1c7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
   2d1cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2d1cf:	48 29 c2             	sub    %rax,%rdx
   2d1d2:	48 89 d0             	mov    %rdx,%rax
   2d1d5:	48 c1 f8 02          	sar    $0x2,%rax
   2d1d9:	89 45 c8             	mov    %eax,-0x38(%rbp)
	while(!x0[--i])
   2d1dc:	eb 1d                	jmp    2d1fb <bitstob+0xdb>
		if (!i) {
   2d1de:	83 7d c8 00          	cmpl   $0x0,-0x38(%rbp)
   2d1e2:	75 17                	jne    2d1fb <bitstob+0xdb>
			b->wds = 0;
   2d1e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2d1e8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
			*bbits = 0;
   2d1ef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2d1f3:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
			goto ret;
   2d1f9:	eb 59                	jmp    2d254 <bitstob+0x134>
	while(!x0[--i])
   2d1fb:	83 6d c8 01          	subl   $0x1,-0x38(%rbp)
   2d1ff:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2d202:	48 98                	cltq   
   2d204:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2d20b:	00 
   2d20c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2d210:	48 01 d0             	add    %rdx,%rax
   2d213:	8b 00                	mov    (%rax),%eax
   2d215:	85 c0                	test   %eax,%eax
   2d217:	74 c5                	je     2d1de <bitstob+0xbe>
			}
	b->wds = i + 1;
   2d219:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2d21c:	8d 50 01             	lea    0x1(%rax),%edx
   2d21f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2d223:	89 50 14             	mov    %edx,0x14(%rax)
	*bbits = i*ULbits + 32 - hi0bits(b->x[i]);
   2d226:	8b 45 c8             	mov    -0x38(%rbp),%eax
   2d229:	83 c0 01             	add    $0x1,%eax
   2d22c:	c1 e0 05             	shl    $0x5,%eax
   2d22f:	89 c3                	mov    %eax,%ebx
   2d231:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2d235:	8b 55 c8             	mov    -0x38(%rbp),%edx
   2d238:	48 63 d2             	movslq %edx,%rdx
   2d23b:	48 83 c2 04          	add    $0x4,%rdx
   2d23f:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
   2d243:	89 c7                	mov    %eax,%edi
   2d245:	e8 a5 ea ff ff       	callq  2bcef <__hi0bits_D2A>
   2d24a:	29 c3                	sub    %eax,%ebx
   2d24c:	89 da                	mov    %ebx,%edx
   2d24e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2d252:	89 10                	mov    %edx,(%rax)
 ret:
	return b;
   2d254:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
	}
   2d258:	48 83 c4 58          	add    $0x58,%rsp
   2d25c:	5b                   	pop    %rbx
   2d25d:	5d                   	pop    %rbp
   2d25e:	c3                   	retq   

000000000002d25f <__gdtoa>:
	FPI *fpi; int be; ULong *bits;
	int *kindp, mode, ndigits, *decpt; char **rve;
#else
	(FPI *fpi, int be, ULong *bits, int *kindp, int mode, int ndigits, int *decpt, char **rve)
#endif
{
   2d25f:	55                   	push   %rbp
   2d260:	48 89 e5             	mov    %rsp,%rbp
   2d263:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
   2d26a:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
   2d271:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%rbp)
   2d277:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
   2d27e:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
   2d285:	44 89 85 10 ff ff ff 	mov    %r8d,-0xf0(%rbp)
   2d28c:	44 89 8d fc fe ff ff 	mov    %r9d,-0x104(%rbp)
   2d293:	48 8b 45 10          	mov    0x10(%rbp),%rax
   2d297:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
   2d29e:	48 8b 45 18          	mov    0x18(%rbp),%rax
   2d2a2:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
   2d2a9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   2d2b0:	00 00 
   2d2b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2d2b6:	31 c0                	xor    %eax,%eax
	if (dtoa_result) {
		freedtoa(dtoa_result);
		dtoa_result = 0;
		}
#endif
	inex = 0;
   2d2b8:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
   2d2bf:	00 00 00 
	kind = *kindp &= ~STRTOG_Inexact;
   2d2c2:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   2d2c9:	8b 00                	mov    (%rax),%eax
   2d2cb:	83 e0 cf             	and    $0xffffffcf,%eax
   2d2ce:	89 c2                	mov    %eax,%edx
   2d2d0:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   2d2d7:	89 10                	mov    %edx,(%rax)
   2d2d9:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   2d2e0:	8b 00                	mov    (%rax),%eax
   2d2e2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
	switch(kind & STRTOG_Retmask) {
   2d2e8:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
   2d2ee:	83 e0 0f             	and    $0xf,%eax
   2d2f1:	83 f8 04             	cmp    $0x4,%eax
   2d2f4:	77 7d                	ja     2d373 <__gdtoa+0x114>
   2d2f6:	89 c0                	mov    %eax,%eax
   2d2f8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2d2ff:	00 
   2d300:	48 8d 05 f1 3c 00 00 	lea    0x3cf1(%rip),%rax        # 30ff8 <__tens_D2A+0x138>
   2d307:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   2d30a:	48 63 d0             	movslq %eax,%rdx
   2d30d:	48 8d 05 e4 3c 00 00 	lea    0x3ce4(%rip),%rax        # 30ff8 <__tens_D2A+0x138>
   2d314:	48 01 d0             	add    %rdx,%rax
   2d317:	ff e0                	jmpq   *%rax
		goto ret_zero;
	  case STRTOG_Normal:
	  case STRTOG_Denormal:
		break;
	  case STRTOG_Infinite:
		*decpt = -32768;
   2d319:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
   2d320:	c7 00 00 80 ff ff    	movl   $0xffff8000,(%rax)
		return nrv_alloc("Infinity", rve, 8);
   2d326:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   2d32d:	ba 08 00 00 00       	mov    $0x8,%edx
   2d332:	48 89 c6             	mov    %rax,%rsi
   2d335:	48 8d 3d 44 3c 00 00 	lea    0x3c44(%rip),%rdi        # 30f80 <__tens_D2A+0xc0>
   2d33c:	e8 63 bb ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   2d341:	e9 14 1a 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
	  case STRTOG_NaN:
		*decpt = -32768;
   2d346:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
   2d34d:	c7 00 00 80 ff ff    	movl   $0xffff8000,(%rax)
		return nrv_alloc("NaN", rve, 3);
   2d353:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   2d35a:	ba 03 00 00 00       	mov    $0x3,%edx
   2d35f:	48 89 c6             	mov    %rax,%rsi
   2d362:	48 8d 3d 20 3c 00 00 	lea    0x3c20(%rip),%rdi        # 30f89 <__tens_D2A+0xc9>
   2d369:	e8 36 bb ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   2d36e:	e9 e7 19 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
	  default:
		return 0;
   2d373:	b8 00 00 00 00       	mov    $0x0,%eax
   2d378:	e9 dd 19 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
		break;
   2d37d:	90                   	nop
	  }
	b = bitstob(bits, nbits = fpi->nbits, &bbits);
   2d37e:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   2d385:	8b 00                	mov    (%rax),%eax
   2d387:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
   2d38d:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
   2d394:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
   2d39a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   2d3a1:	89 ce                	mov    %ecx,%esi
   2d3a3:	48 89 c7             	mov    %rax,%rdi
   2d3a6:	e8 75 fd ff ff       	callq  2d120 <bitstob>
   2d3ab:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	if (b == NULL)
   2d3af:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   2d3b4:	75 0a                	jne    2d3c0 <__gdtoa+0x161>
		return (NULL);
   2d3b6:	b8 00 00 00 00       	mov    $0x0,%eax
   2d3bb:	e9 9a 19 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
	be0 = be;
   2d3c0:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
   2d3c6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
	if ( (i = trailz(b)) !=0) {
   2d3cc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2d3d0:	48 89 c7             	mov    %rax,%rdi
   2d3d3:	e8 e9 1a 00 00       	callq  2eec1 <__trailz_D2A>
   2d3d8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
   2d3de:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d3e4:	85 c0                	test   %eax,%eax
   2d3e6:	74 36                	je     2d41e <__gdtoa+0x1bf>
		rshift(b, i);
   2d3e8:	8b 95 28 ff ff ff    	mov    -0xd8(%rbp),%edx
   2d3ee:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2d3f2:	89 d6                	mov    %edx,%esi
   2d3f4:	48 89 c7             	mov    %rax,%rdi
   2d3f7:	e8 74 19 00 00       	callq  2ed70 <__rshift_D2A>
		be += i;
   2d3fc:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d402:	01 85 14 ff ff ff    	add    %eax,-0xec(%rbp)
		bbits -= i;
   2d408:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
   2d40e:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d414:	29 c2                	sub    %eax,%edx
   2d416:	89 d0                	mov    %edx,%eax
   2d418:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
		}
	if (!b->wds) {
   2d41e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2d422:	8b 40 14             	mov    0x14(%rax),%eax
   2d425:	85 c0                	test   %eax,%eax
   2d427:	75 3c                	jne    2d465 <__gdtoa+0x206>
		Bfree(b);
   2d429:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2d42d:	48 89 c7             	mov    %rax,%rdi
   2d430:	e8 06 e6 ff ff       	callq  2ba3b <__Bfree_D2A>
   2d435:	eb 01                	jmp    2d438 <__gdtoa+0x1d9>
		goto ret_zero;
   2d437:	90                   	nop
 ret_zero:
		*decpt = 1;
   2d438:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
   2d43f:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
		return nrv_alloc("0", rve, 1);
   2d445:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   2d44c:	ba 01 00 00 00       	mov    $0x1,%edx
   2d451:	48 89 c6             	mov    %rax,%rsi
   2d454:	48 8d 3d 32 3b 00 00 	lea    0x3b32(%rip),%rdi        # 30f8d <__tens_D2A+0xcd>
   2d45b:	e8 44 ba ff ff       	callq  28ea4 <__nrv_alloc_D2A>
   2d460:	e9 f5 18 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
		}

	dval(&d) = b2d(b, &i);
   2d465:	48 8d 95 28 ff ff ff 	lea    -0xd8(%rbp),%rdx
   2d46c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2d470:	48 89 d6             	mov    %rdx,%rsi
   2d473:	48 89 c7             	mov    %rax,%rdi
   2d476:	e8 cc f2 ff ff       	callq  2c747 <__b2d_D2A>
   2d47b:	66 48 0f 7e c0       	movq   %xmm0,%rax
   2d480:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	i = be + bbits - 1;
   2d484:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
   2d48a:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
   2d490:	01 d0                	add    %edx,%eax
   2d492:	83 e8 01             	sub    $0x1,%eax
   2d495:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
	word0(&d) &= Frac_mask1;
   2d49b:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2d49e:	25 ff ff 0f 00       	and    $0xfffff,%eax
   2d4a3:	89 45 ec             	mov    %eax,-0x14(%rbp)
	word0(&d) |= Exp_11;
   2d4a6:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2d4a9:	0d 00 00 f0 3f       	or     $0x3ff00000,%eax
   2d4ae:	89 45 ec             	mov    %eax,-0x14(%rbp)
	 */
#ifdef IBM
	i <<= 2;
	i += j;
#endif
	ds = (dval(&d)-1.5)*0.289529654602168 + 0.1760912590558 + i*0.301029995663981;
   2d4b1:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2d4b6:	f2 0f 10 0d d2 3a 00 	movsd  0x3ad2(%rip),%xmm1        # 30f90 <__tens_D2A+0xd0>
   2d4bd:	00 
   2d4be:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   2d4c2:	f2 0f 10 0d ce 3a 00 	movsd  0x3ace(%rip),%xmm1        # 30f98 <__tens_D2A+0xd8>
   2d4c9:	00 
   2d4ca:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2d4ce:	f2 0f 10 0d ca 3a 00 	movsd  0x3aca(%rip),%xmm1        # 30fa0 <__tens_D2A+0xe0>
   2d4d5:	00 
   2d4d6:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
   2d4da:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d4e0:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
   2d4e4:	f2 0f 10 15 bc 3a 00 	movsd  0x3abc(%rip),%xmm2        # 30fa8 <__tens_D2A+0xe8>
   2d4eb:	00 
   2d4ec:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
   2d4f0:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
   2d4f4:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)

	/* correct assumption about exponent range */
	if ((j = i) < 0)
   2d4f9:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d4ff:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
   2d505:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2d50c:	79 06                	jns    2d514 <__gdtoa+0x2b5>
		j = -j;
   2d50e:	f7 9d 48 ff ff ff    	negl   -0xb8(%rbp)
	if ((j -= 1077) > 0)
   2d514:	81 ad 48 ff ff ff 35 	subl   $0x435,-0xb8(%rbp)
   2d51b:	04 00 00 
   2d51e:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2d525:	7e 22                	jle    2d549 <__gdtoa+0x2ea>
		ds += j * 7e-17;
   2d527:	f2 0f 2a 85 48 ff ff 	cvtsi2sdl -0xb8(%rbp),%xmm0
   2d52e:	ff 
   2d52f:	f2 0f 10 0d 79 3a 00 	movsd  0x3a79(%rip),%xmm1        # 30fb0 <__tens_D2A+0xf0>
   2d536:	00 
   2d537:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2d53b:	f2 0f 10 4d b0       	movsd  -0x50(%rbp),%xmm1
   2d540:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
   2d544:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)

	k = (int)ds;
   2d549:	f2 0f 10 45 b0       	movsd  -0x50(%rbp),%xmm0
   2d54e:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
   2d552:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
	if (ds < 0. && ds != k)
   2d558:	66 0f ef c0          	pxor   %xmm0,%xmm0
   2d55c:	66 0f 2e 45 b0       	ucomisd -0x50(%rbp),%xmm0
   2d561:	76 1d                	jbe    2d580 <__gdtoa+0x321>
   2d563:	f2 0f 2a 85 4c ff ff 	cvtsi2sdl -0xb4(%rbp),%xmm0
   2d56a:	ff 
   2d56b:	66 0f 2e 45 b0       	ucomisd -0x50(%rbp),%xmm0
   2d570:	7a 07                	jp     2d579 <__gdtoa+0x31a>
   2d572:	66 0f 2e 45 b0       	ucomisd -0x50(%rbp),%xmm0
   2d577:	74 07                	je     2d580 <__gdtoa+0x321>
		k--;	/* want k = floor(ds) */
   2d579:	83 ad 4c ff ff ff 01 	subl   $0x1,-0xb4(%rbp)
	k_check = 1;
   2d580:	c7 85 50 ff ff ff 01 	movl   $0x1,-0xb0(%rbp)
   2d587:	00 00 00 
	j = be + bbits - 1;
	if ( (j1 = j & 3) !=0)
		dval(&d) *= 1 << j1;
	word0(&d) += j << Exp_shift - 2 & Exp_mask;
#else
	word0(&d) += (be + bbits - 1) << Exp_shift;
   2d58a:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2d58d:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
   2d593:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
   2d599:	01 ca                	add    %ecx,%edx
   2d59b:	83 ea 01             	sub    $0x1,%edx
   2d59e:	c1 e2 14             	shl    $0x14,%edx
   2d5a1:	01 d0                	add    %edx,%eax
   2d5a3:	89 45 ec             	mov    %eax,-0x14(%rbp)
#endif
	if (k >= 0 && k <= Ten_pmax) {
   2d5a6:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
   2d5ad:	78 41                	js     2d5f0 <__gdtoa+0x391>
   2d5af:	83 bd 4c ff ff ff 16 	cmpl   $0x16,-0xb4(%rbp)
   2d5b6:	7f 38                	jg     2d5f0 <__gdtoa+0x391>
		if (dval(&d) < tens[k])
   2d5b8:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2d5bd:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2d5c3:	48 98                	cltq   
   2d5c5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2d5cc:	00 
   2d5cd:	48 8d 05 ec 38 00 00 	lea    0x38ec(%rip),%rax        # 30ec0 <__tens_D2A>
   2d5d4:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   2d5d9:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2d5dd:	76 07                	jbe    2d5e6 <__gdtoa+0x387>
			k--;
   2d5df:	83 ad 4c ff ff ff 01 	subl   $0x1,-0xb4(%rbp)
		k_check = 0;
   2d5e6:	c7 85 50 ff ff ff 00 	movl   $0x0,-0xb0(%rbp)
   2d5ed:	00 00 00 
		}
	j = bbits - i - 1;
   2d5f0:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
   2d5f6:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d5fc:	29 c2                	sub    %eax,%edx
   2d5fe:	89 d0                	mov    %edx,%eax
   2d600:	83 e8 01             	sub    $0x1,%eax
   2d603:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
	if (j >= 0) {
   2d609:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2d610:	78 18                	js     2d62a <__gdtoa+0x3cb>
		b2 = 0;
   2d612:	c7 85 2c ff ff ff 00 	movl   $0x0,-0xd4(%rbp)
   2d619:	00 00 00 
		s2 = j;
   2d61c:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2d622:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
   2d628:	eb 18                	jmp    2d642 <__gdtoa+0x3e3>
		}
	else {
		b2 = -j;
   2d62a:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2d630:	f7 d8                	neg    %eax
   2d632:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%rbp)
		s2 = 0;
   2d638:	c7 85 64 ff ff ff 00 	movl   $0x0,-0x9c(%rbp)
   2d63f:	00 00 00 
		}
	if (k >= 0) {
   2d642:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
   2d649:	78 24                	js     2d66f <__gdtoa+0x410>
		b5 = 0;
   2d64b:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%rbp)
   2d652:	00 00 00 
		s5 = k;
   2d655:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2d65b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
		s2 += k;
   2d661:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2d667:	01 85 64 ff ff ff    	add    %eax,-0x9c(%rbp)
   2d66d:	eb 24                	jmp    2d693 <__gdtoa+0x434>
		}
	else {
		b2 -= k;
   2d66f:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2d675:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
		b5 = -k;
   2d67b:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2d681:	f7 d8                	neg    %eax
   2d683:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%rbp)
		s5 = 0;
   2d689:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
   2d690:	00 00 00 
		}
	if (mode < 0 || mode > 9)
   2d693:	83 bd 10 ff ff ff 00 	cmpl   $0x0,-0xf0(%rbp)
   2d69a:	78 09                	js     2d6a5 <__gdtoa+0x446>
   2d69c:	83 bd 10 ff ff ff 09 	cmpl   $0x9,-0xf0(%rbp)
   2d6a3:	7e 0a                	jle    2d6af <__gdtoa+0x450>
		mode = 0;
   2d6a5:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%rbp)
   2d6ac:	00 00 00 
	try_quick = 1;
   2d6af:	c7 85 70 ff ff ff 01 	movl   $0x1,-0x90(%rbp)
   2d6b6:	00 00 00 
	if (mode > 5) {
   2d6b9:	83 bd 10 ff ff ff 05 	cmpl   $0x5,-0xf0(%rbp)
   2d6c0:	7e 13                	jle    2d6d5 <__gdtoa+0x476>
		mode -= 4;
   2d6c2:	83 ad 10 ff ff ff 04 	subl   $0x4,-0xf0(%rbp)
		try_quick = 0;
   2d6c9:	c7 85 70 ff ff ff 00 	movl   $0x0,-0x90(%rbp)
   2d6d0:	00 00 00 
   2d6d3:	eb 24                	jmp    2d6f9 <__gdtoa+0x49a>
		}
	else if (i >= -4 - Emin || i < Emin)
   2d6d5:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d6db:	3d f9 03 00 00       	cmp    $0x3f9,%eax
   2d6e0:	7f 0d                	jg     2d6ef <__gdtoa+0x490>
   2d6e2:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d6e8:	3d 02 fc ff ff       	cmp    $0xfffffc02,%eax
   2d6ed:	7d 0a                	jge    2d6f9 <__gdtoa+0x49a>
		try_quick = 0;
   2d6ef:	c7 85 70 ff ff ff 00 	movl   $0x0,-0x90(%rbp)
   2d6f6:	00 00 00 
	leftright = 1;
   2d6f9:	c7 85 54 ff ff ff 01 	movl   $0x1,-0xac(%rbp)
   2d700:	00 00 00 
	ilim = ilim1 = -1;	/* Values for cases 0 and 1; done here to */
   2d703:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%rbp)
   2d70a:	ff ff ff 
   2d70d:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
   2d713:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
				/* silence erroneous "gcc -Wall" warning. */
	switch(mode) {
   2d719:	83 bd 10 ff ff ff 05 	cmpl   $0x5,-0xf0(%rbp)
   2d720:	0f 87 ea 00 00 00    	ja     2d810 <__gdtoa+0x5b1>
   2d726:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
   2d72c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2d733:	00 
   2d734:	48 8d 05 d1 38 00 00 	lea    0x38d1(%rip),%rax        # 3100c <__tens_D2A+0x14c>
   2d73b:	8b 04 02             	mov    (%rdx,%rax,1),%eax
   2d73e:	48 63 d0             	movslq %eax,%rdx
   2d741:	48 8d 05 c4 38 00 00 	lea    0x38c4(%rip),%rax        # 3100c <__tens_D2A+0x14c>
   2d748:	48 01 d0             	add    %rdx,%rax
   2d74b:	ff e0                	jmpq   *%rax
		case 0:
		case 1:
			i = (int)(nbits * .30103) + 3;
   2d74d:	f2 0f 2a 85 78 ff ff 	cvtsi2sdl -0x88(%rbp),%xmm0
   2d754:	ff 
   2d755:	f2 0f 10 0d 5b 38 00 	movsd  0x385b(%rip),%xmm1        # 30fb8 <__tens_D2A+0xf8>
   2d75c:	00 
   2d75d:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2d761:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
   2d765:	83 c0 03             	add    $0x3,%eax
   2d768:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
			ndigits = 0;
   2d76e:	c7 85 fc fe ff ff 00 	movl   $0x0,-0x104(%rbp)
   2d775:	00 00 00 
			break;
   2d778:	e9 93 00 00 00       	jmpq   2d810 <__gdtoa+0x5b1>
		case 2:
			leftright = 0;
   2d77d:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
   2d784:	00 00 00 
			/* no break */
		case 4:
			if (ndigits <= 0)
   2d787:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
   2d78e:	7f 0a                	jg     2d79a <__gdtoa+0x53b>
				ndigits = 1;
   2d790:	c7 85 fc fe ff ff 01 	movl   $0x1,-0x104(%rbp)
   2d797:	00 00 00 
			ilim = ilim1 = i = ndigits;
   2d79a:	8b 85 fc fe ff ff    	mov    -0x104(%rbp),%eax
   2d7a0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
   2d7a6:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d7ac:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
   2d7b2:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
   2d7b8:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			break;
   2d7be:	eb 50                	jmp    2d810 <__gdtoa+0x5b1>
		case 3:
			leftright = 0;
   2d7c0:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
   2d7c7:	00 00 00 
			/* no break */
		case 5:
			i = ndigits + k + 1;
   2d7ca:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
   2d7d0:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2d7d6:	01 d0                	add    %edx,%eax
   2d7d8:	83 c0 01             	add    $0x1,%eax
   2d7db:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
			ilim = i;
   2d7e1:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d7e7:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			ilim1 = i - 1;
   2d7ed:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d7f3:	83 e8 01             	sub    $0x1,%eax
   2d7f6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
			if (i <= 0)
   2d7fc:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d802:	85 c0                	test   %eax,%eax
   2d804:	7f 0a                	jg     2d810 <__gdtoa+0x5b1>
				i = 1;
   2d806:	c7 85 28 ff ff ff 01 	movl   $0x1,-0xd8(%rbp)
   2d80d:	00 00 00 
		}
	s = s0 = rv_alloc(i);
   2d810:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d816:	89 c7                	mov    %eax,%edi
   2d818:	e8 23 b6 ff ff       	callq  28e40 <__rv_alloc_D2A>
   2d81d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
   2d821:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2d825:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	if (s == NULL)
   2d829:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
   2d82e:	75 0a                	jne    2d83a <__gdtoa+0x5db>
		return (NULL);
   2d830:	b8 00 00 00 00       	mov    $0x0,%eax
   2d835:	e9 20 15 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>

	if ( (rdir = fpi->rounding - 1) !=0) {
   2d83a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   2d841:	8b 40 0c             	mov    0xc(%rax),%eax
   2d844:	83 e8 01             	sub    $0x1,%eax
   2d847:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
   2d84d:	83 bd 60 ff ff ff 00 	cmpl   $0x0,-0xa0(%rbp)
   2d854:	74 33                	je     2d889 <__gdtoa+0x62a>
		if (rdir < 0)
   2d856:	83 bd 60 ff ff ff 00 	cmpl   $0x0,-0xa0(%rbp)
   2d85d:	79 0a                	jns    2d869 <__gdtoa+0x60a>
			rdir = 2;
   2d85f:	c7 85 60 ff ff ff 02 	movl   $0x2,-0xa0(%rbp)
   2d866:	00 00 00 
		if (kind & STRTOG_Neg)
   2d869:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
   2d86f:	25 00 01 00 00       	and    $0x100,%eax
   2d874:	85 c0                	test   %eax,%eax
   2d876:	74 11                	je     2d889 <__gdtoa+0x62a>
			rdir = 3 - rdir;
   2d878:	b8 03 00 00 00       	mov    $0x3,%eax
   2d87d:	2b 85 60 ff ff ff    	sub    -0xa0(%rbp),%eax
   2d883:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
		}

	/* Now rdir = 0 ==> round near, 1 ==> round up, 2 ==> round down. */

	if (ilim >= 0 && ilim <= Quick_max && try_quick && !rdir
   2d889:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)
   2d890:	0f 88 84 05 00 00    	js     2de1a <__gdtoa+0xbbb>
   2d896:	83 bd 3c ff ff ff 0e 	cmpl   $0xe,-0xc4(%rbp)
   2d89d:	0f 8f 77 05 00 00    	jg     2de1a <__gdtoa+0xbbb>
   2d8a3:	83 bd 70 ff ff ff 00 	cmpl   $0x0,-0x90(%rbp)
   2d8aa:	0f 84 6a 05 00 00    	je     2de1a <__gdtoa+0xbbb>
   2d8b0:	83 bd 60 ff ff ff 00 	cmpl   $0x0,-0xa0(%rbp)
   2d8b7:	0f 85 5d 05 00 00    	jne    2de1a <__gdtoa+0xbbb>
#ifndef IMPRECISE_INEXACT
		&& k == 0
   2d8bd:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
   2d8c4:	0f 85 50 05 00 00    	jne    2de1a <__gdtoa+0xbbb>
#endif
								) {

		/* Try to get by with floating-point arithmetic. */

		i = 0;
   2d8ca:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%rbp)
   2d8d1:	00 00 00 
		d2 = dval(&d);
   2d8d4:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2d8d9:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
#ifdef IBM
		if ( (j = 11 - hi0bits(word0(&d) & Frac_mask)) !=0)
			dval(&d) /= 1 << j;
#endif
		k0 = k;
   2d8de:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2d8e4:	89 45 80             	mov    %eax,-0x80(%rbp)
		ilim0 = ilim;
   2d8e7:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
   2d8ed:	89 45 84             	mov    %eax,-0x7c(%rbp)
		ieps = 2; /* conservative */
   2d8f0:	c7 85 38 ff ff ff 02 	movl   $0x2,-0xc8(%rbp)
   2d8f7:	00 00 00 
		if (k > 0) {
   2d8fa:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
   2d901:	0f 8e c7 00 00 00    	jle    2d9ce <__gdtoa+0x76f>
			ds = tens[k&0xf];
   2d907:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2d90d:	83 e0 0f             	and    $0xf,%eax
   2d910:	48 98                	cltq   
   2d912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2d919:	00 
   2d91a:	48 8d 05 9f 35 00 00 	lea    0x359f(%rip),%rax        # 30ec0 <__tens_D2A>
   2d921:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   2d926:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)
			j = k >> 4;
   2d92b:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2d931:	c1 f8 04             	sar    $0x4,%eax
   2d934:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
			if (j & Bletch) {
   2d93a:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2d940:	83 e0 10             	and    $0x10,%eax
   2d943:	85 c0                	test   %eax,%eax
   2d945:	74 79                	je     2d9c0 <__gdtoa+0x761>
				/* prevent overflows */
				j &= Bletch - 1;
   2d947:	83 a5 48 ff ff ff 0f 	andl   $0xf,-0xb8(%rbp)
				dval(&d) /= bigtens[n_bigtens-1];
   2d94e:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2d953:	f2 0f 10 0d 05 35 00 	movsd  0x3505(%rip),%xmm1        # 30e60 <__bigtens_D2A+0x20>
   2d95a:	00 
   2d95b:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
   2d95f:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
				ieps++;
   2d964:	83 85 38 ff ff ff 01 	addl   $0x1,-0xc8(%rbp)
				}
			for(; j; j >>= 1, i++)
   2d96b:	eb 53                	jmp    2d9c0 <__gdtoa+0x761>
				if (j & 1) {
   2d96d:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2d973:	83 e0 01             	and    $0x1,%eax
   2d976:	85 c0                	test   %eax,%eax
   2d978:	74 31                	je     2d9ab <__gdtoa+0x74c>
					ieps++;
   2d97a:	83 85 38 ff ff ff 01 	addl   $0x1,-0xc8(%rbp)
					ds *= bigtens[i];
   2d981:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d987:	48 98                	cltq   
   2d989:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2d990:	00 
   2d991:	48 8d 05 a8 34 00 00 	lea    0x34a8(%rip),%rax        # 30e40 <__bigtens_D2A>
   2d998:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   2d99d:	f2 0f 10 4d b0       	movsd  -0x50(%rbp),%xmm1
   2d9a2:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2d9a6:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)
			for(; j; j >>= 1, i++)
   2d9ab:	d1 bd 48 ff ff ff    	sarl   -0xb8(%rbp)
   2d9b1:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2d9b7:	83 c0 01             	add    $0x1,%eax
   2d9ba:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
   2d9c0:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2d9c7:	75 a4                	jne    2d96d <__gdtoa+0x70e>
   2d9c9:	e9 b6 00 00 00       	jmpq   2da84 <__gdtoa+0x825>
					}
			}
		else  {
			ds = 1.;
   2d9ce:	f2 0f 10 05 ea 35 00 	movsd  0x35ea(%rip),%xmm0        # 30fc0 <__tens_D2A+0x100>
   2d9d5:	00 
   2d9d6:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)
			if ( (j1 = -k) !=0) {
   2d9db:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2d9e1:	f7 d8                	neg    %eax
   2d9e3:	89 45 88             	mov    %eax,-0x78(%rbp)
   2d9e6:	83 7d 88 00          	cmpl   $0x0,-0x78(%rbp)
   2d9ea:	0f 84 94 00 00 00    	je     2da84 <__gdtoa+0x825>
				dval(&d) *= tens[j1 & 0xf];
   2d9f0:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2d9f5:	8b 45 88             	mov    -0x78(%rbp),%eax
   2d9f8:	83 e0 0f             	and    $0xf,%eax
   2d9fb:	48 98                	cltq   
   2d9fd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2da04:	00 
   2da05:	48 8d 05 b4 34 00 00 	lea    0x34b4(%rip),%rax        # 30ec0 <__tens_D2A>
   2da0c:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   2da11:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2da15:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
				for(j = j1 >> 4; j; j >>= 1, i++)
   2da1a:	8b 45 88             	mov    -0x78(%rbp),%eax
   2da1d:	c1 f8 04             	sar    $0x4,%eax
   2da20:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
   2da26:	eb 53                	jmp    2da7b <__gdtoa+0x81c>
					if (j & 1) {
   2da28:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2da2e:	83 e0 01             	and    $0x1,%eax
   2da31:	85 c0                	test   %eax,%eax
   2da33:	74 31                	je     2da66 <__gdtoa+0x807>
						ieps++;
   2da35:	83 85 38 ff ff ff 01 	addl   $0x1,-0xc8(%rbp)
						dval(&d) *= bigtens[i];
   2da3c:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2da41:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2da47:	48 98                	cltq   
   2da49:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2da50:	00 
   2da51:	48 8d 05 e8 33 00 00 	lea    0x33e8(%rip),%rax        # 30e40 <__bigtens_D2A>
   2da58:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   2da5d:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2da61:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
				for(j = j1 >> 4; j; j >>= 1, i++)
   2da66:	d1 bd 48 ff ff ff    	sarl   -0xb8(%rbp)
   2da6c:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2da72:	83 c0 01             	add    $0x1,%eax
   2da75:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
   2da7b:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2da82:	75 a4                	jne    2da28 <__gdtoa+0x7c9>
						}
				}
			}
		if (k_check && dval(&d) < 1. && ilim > 0) {
   2da84:	83 bd 50 ff ff ff 00 	cmpl   $0x0,-0xb0(%rbp)
   2da8b:	74 59                	je     2dae6 <__gdtoa+0x887>
   2da8d:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2da92:	f2 0f 10 05 26 35 00 	movsd  0x3526(%rip),%xmm0        # 30fc0 <__tens_D2A+0x100>
   2da99:	00 
   2da9a:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2da9e:	76 46                	jbe    2dae6 <__gdtoa+0x887>
   2daa0:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)
   2daa7:	7e 3d                	jle    2dae6 <__gdtoa+0x887>
			if (ilim1 <= 0)
   2daa9:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)
   2dab0:	0f 8e 3c 03 00 00    	jle    2ddf2 <__gdtoa+0xb93>
				goto fast_failed;
			ilim = ilim1;
   2dab6:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
   2dabc:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			k--;
   2dac2:	83 ad 4c ff ff ff 01 	subl   $0x1,-0xb4(%rbp)
			dval(&d) *= 10.;
   2dac9:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2dace:	f2 0f 10 05 f2 34 00 	movsd  0x34f2(%rip),%xmm0        # 30fc8 <__tens_D2A+0x108>
   2dad5:	00 
   2dad6:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2dada:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
			ieps++;
   2dadf:	83 85 38 ff ff ff 01 	addl   $0x1,-0xc8(%rbp)
			}
		dval(&eps) = ieps*dval(&d) + 7.;
   2dae6:	f2 0f 2a 85 38 ff ff 	cvtsi2sdl -0xc8(%rbp),%xmm0
   2daed:	ff 
   2daee:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2daf3:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2daf7:	f2 0f 10 0d d1 34 00 	movsd  0x34d1(%rip),%xmm1        # 30fd0 <__tens_D2A+0x110>
   2dafe:	00 
   2daff:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
   2db03:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
		word0(&eps) -= (P-1)*Exp_msk1;
   2db08:	8b 45 f4             	mov    -0xc(%rbp),%eax
   2db0b:	2d 00 00 40 03       	sub    $0x3400000,%eax
   2db10:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ilim == 0) {
   2db13:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)
   2db1a:	75 5f                	jne    2db7b <__gdtoa+0x91c>
			S = mhi = 0;
   2db1c:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
   2db23:	00 
   2db24:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2db28:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			dval(&d) -= 5.;
   2db2c:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2db31:	f2 0f 10 0d 9f 34 00 	movsd  0x349f(%rip),%xmm1        # 30fd8 <__tens_D2A+0x118>
   2db38:	00 
   2db39:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   2db3d:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
			if (dval(&d) > dval(&eps))
   2db42:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2db47:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   2db4c:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2db50:	0f 87 32 0a 00 00    	ja     2e588 <__gdtoa+0x1329>
				goto one_digit;
			if (dval(&d) < -dval(&eps))
   2db56:	f2 0f 10 55 e8       	movsd  -0x18(%rbp),%xmm2
   2db5b:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   2db60:	f3 0f 7e 05 78 34 00 	movq   0x3478(%rip),%xmm0        # 30fe0 <__tens_D2A+0x120>
   2db67:	00 
   2db68:	66 0f 57 c1          	xorpd  %xmm1,%xmm0
   2db6c:	66 0f 2e c2          	ucomisd %xmm2,%xmm0
   2db70:	0f 87 f1 09 00 00    	ja     2e567 <__gdtoa+0x1308>
				goto no_digits;
			goto fast_failed;
   2db76:	e9 7b 02 00 00       	jmpq   2ddf6 <__gdtoa+0xb97>
			}
#ifndef No_leftright
		if (leftright) {
   2db7b:	83 bd 54 ff ff ff 00 	cmpl   $0x0,-0xac(%rbp)
   2db82:	0f 84 3b 01 00 00    	je     2dcc3 <__gdtoa+0xa64>
			/* Use Steele & White method of only
			 * generating digits needed.
			 */
			dval(&eps) = ds*0.5/tens[ilim-1] - dval(&eps);
   2db88:	f2 0f 10 4d b0       	movsd  -0x50(%rbp),%xmm1
   2db8d:	f2 0f 10 05 5b 34 00 	movsd  0x345b(%rip),%xmm0        # 30ff0 <__tens_D2A+0x130>
   2db94:	00 
   2db95:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2db99:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
   2db9f:	83 e8 01             	sub    $0x1,%eax
   2dba2:	48 98                	cltq   
   2dba4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2dbab:	00 
   2dbac:	48 8d 05 0d 33 00 00 	lea    0x330d(%rip),%rax        # 30ec0 <__tens_D2A>
   2dbb3:	f2 0f 10 0c 02       	movsd  (%rdx,%rax,1),%xmm1
   2dbb8:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
   2dbbc:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   2dbc1:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   2dbc5:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
			for(i = 0;;) {
   2dbca:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%rbp)
   2dbd1:	00 00 00 
				L = (Long)(dval(&d)/ds);
   2dbd4:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2dbd9:	f2 0f 5e 45 b0       	divsd  -0x50(%rbp),%xmm0
   2dbde:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
   2dbe2:	89 45 8c             	mov    %eax,-0x74(%rbp)
				dval(&d) -= L*ds;
   2dbe5:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2dbea:	f2 0f 2a 45 8c       	cvtsi2sdl -0x74(%rbp),%xmm0
   2dbef:	f2 0f 59 45 b0       	mulsd  -0x50(%rbp),%xmm0
   2dbf4:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
   2dbf8:	66 0f 28 c1          	movapd %xmm1,%xmm0
   2dbfc:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
				*s++ = '0' + (int)L;
   2dc01:	8b 45 8c             	mov    -0x74(%rbp),%eax
   2dc04:	8d 48 30             	lea    0x30(%rax),%ecx
   2dc07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2dc0b:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2dc0f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2dc13:	89 ca                	mov    %ecx,%edx
   2dc15:	88 10                	mov    %dl,(%rax)
				if (dval(&d) < dval(&eps)) {
   2dc17:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2dc1c:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
   2dc21:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2dc25:	76 2d                	jbe    2dc54 <__gdtoa+0x9f5>
					if (dval(&d))
   2dc27:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2dc2c:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2dc30:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2dc34:	7a 0f                	jp     2dc45 <__gdtoa+0x9e6>
   2dc36:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2dc3a:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2dc3e:	75 05                	jne    2dc45 <__gdtoa+0x9e6>
						inex = STRTOG_Inexlo;
					goto ret1;
   2dc40:	e9 ba 10 00 00       	jmpq   2ecff <__gdtoa+0x1aa0>
						inex = STRTOG_Inexlo;
   2dc45:	c7 85 44 ff ff ff 10 	movl   $0x10,-0xbc(%rbp)
   2dc4c:	00 00 00 
					goto ret1;
   2dc4f:	e9 ab 10 00 00       	jmpq   2ecff <__gdtoa+0x1aa0>
					}
				if (ds - dval(&d) < dval(&eps))
   2dc54:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2dc59:	f2 0f 10 45 b0       	movsd  -0x50(%rbp),%xmm0
   2dc5e:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
   2dc62:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   2dc67:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
   2dc6b:	0f 87 0e 03 00 00    	ja     2df7f <__gdtoa+0xd20>
					goto bump_up;
				if (++i >= ilim)
   2dc71:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2dc77:	83 c0 01             	add    $0x1,%eax
   2dc7a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
   2dc80:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2dc86:	39 85 3c ff ff ff    	cmp    %eax,-0xc4(%rbp)
   2dc8c:	0f 8e 63 01 00 00    	jle    2ddf5 <__gdtoa+0xb96>
					break;
				dval(&eps) *= 10.;
   2dc92:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   2dc97:	f2 0f 10 05 29 33 00 	movsd  0x3329(%rip),%xmm0        # 30fc8 <__tens_D2A+0x108>
   2dc9e:	00 
   2dc9f:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2dca3:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
				dval(&d) *= 10.;
   2dca8:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2dcad:	f2 0f 10 05 13 33 00 	movsd  0x3313(%rip),%xmm0        # 30fc8 <__tens_D2A+0x108>
   2dcb4:	00 
   2dcb5:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2dcb9:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
				L = (Long)(dval(&d)/ds);
   2dcbe:	e9 11 ff ff ff       	jmpq   2dbd4 <__gdtoa+0x975>
				}
			}
		else {
#endif
			/* Generate ilim digits, then fix them up. */
			dval(&eps) *= tens[ilim-1];
   2dcc3:	f2 0f 10 4d f0       	movsd  -0x10(%rbp),%xmm1
   2dcc8:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
   2dcce:	83 e8 01             	sub    $0x1,%eax
   2dcd1:	48 98                	cltq   
   2dcd3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2dcda:	00 
   2dcdb:	48 8d 05 de 31 00 00 	lea    0x31de(%rip),%rax        # 30ec0 <__tens_D2A>
   2dce2:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   2dce7:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2dceb:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
			for(i = 1;; i++, dval(&d) *= 10.) {
   2dcf0:	c7 85 28 ff ff ff 01 	movl   $0x1,-0xd8(%rbp)
   2dcf7:	00 00 00 
				if ( (L = (Long)(dval(&d)/ds)) !=0)
   2dcfa:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2dcff:	f2 0f 5e 45 b0       	divsd  -0x50(%rbp),%xmm0
   2dd04:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
   2dd08:	89 45 8c             	mov    %eax,-0x74(%rbp)
   2dd0b:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
   2dd0f:	74 1c                	je     2dd2d <__gdtoa+0xace>
					dval(&d) -= L*ds;
   2dd11:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2dd16:	f2 0f 2a 45 8c       	cvtsi2sdl -0x74(%rbp),%xmm0
   2dd1b:	f2 0f 59 45 b0       	mulsd  -0x50(%rbp),%xmm0
   2dd20:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
   2dd24:	66 0f 28 c1          	movapd %xmm1,%xmm0
   2dd28:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
				*s++ = '0' + (int)L;
   2dd2d:	8b 45 8c             	mov    -0x74(%rbp),%eax
   2dd30:	8d 48 30             	lea    0x30(%rax),%ecx
   2dd33:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2dd37:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2dd3b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2dd3f:	89 ca                	mov    %ecx,%edx
   2dd41:	88 10                	mov    %dl,(%rax)
				if (i == ilim) {
   2dd43:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2dd49:	39 85 3c ff ff ff    	cmp    %eax,-0xc4(%rbp)
   2dd4f:	75 77                	jne    2ddc8 <__gdtoa+0xb69>
					ds *= 0.5;
   2dd51:	f2 0f 10 4d b0       	movsd  -0x50(%rbp),%xmm1
   2dd56:	f2 0f 10 05 92 32 00 	movsd  0x3292(%rip),%xmm0        # 30ff0 <__tens_D2A+0x130>
   2dd5d:	00 
   2dd5e:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2dd62:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)
					if (dval(&d) > ds + dval(&eps))
   2dd67:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2dd6c:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
   2dd71:	f2 0f 58 45 b0       	addsd  -0x50(%rbp),%xmm0
   2dd76:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
   2dd7a:	0f 87 02 02 00 00    	ja     2df82 <__gdtoa+0xd23>
						goto bump_up;
					else if (dval(&d) < ds - dval(&eps)) {
   2dd80:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2dd85:	f2 0f 10 55 f0       	movsd  -0x10(%rbp),%xmm2
   2dd8a:	f2 0f 10 45 b0       	movsd  -0x50(%rbp),%xmm0
   2dd8f:	f2 0f 5c c2          	subsd  %xmm2,%xmm0
   2dd93:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2dd97:	77 02                	ja     2dd9b <__gdtoa+0xb3c>
						if (dval(&d))
							inex = STRTOG_Inexlo;
						goto clear_trailing0;
						}
					break;
   2dd99:	eb 5b                	jmp    2ddf6 <__gdtoa+0xb97>
						if (dval(&d))
   2dd9b:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2dda0:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2dda4:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2dda8:	7a 0f                	jp     2ddb9 <__gdtoa+0xb5a>
   2ddaa:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2ddae:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2ddb2:	75 05                	jne    2ddb9 <__gdtoa+0xb5a>
						goto clear_trailing0;
   2ddb4:	e9 26 02 00 00       	jmpq   2dfdf <__gdtoa+0xd80>
							inex = STRTOG_Inexlo;
   2ddb9:	c7 85 44 ff ff ff 10 	movl   $0x10,-0xbc(%rbp)
   2ddc0:	00 00 00 
						goto clear_trailing0;
   2ddc3:	e9 17 02 00 00       	jmpq   2dfdf <__gdtoa+0xd80>
			for(i = 1;; i++, dval(&d) *= 10.) {
   2ddc8:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2ddce:	83 c0 01             	add    $0x1,%eax
   2ddd1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
   2ddd7:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2dddc:	f2 0f 10 05 e4 31 00 	movsd  0x31e4(%rip),%xmm0        # 30fc8 <__tens_D2A+0x108>
   2dde3:	00 
   2dde4:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2dde8:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
				if ( (L = (Long)(dval(&d)/ds)) !=0)
   2dded:	e9 08 ff ff ff       	jmpq   2dcfa <__gdtoa+0xa9b>
				goto fast_failed;
   2ddf2:	90                   	nop
   2ddf3:	eb 01                	jmp    2ddf6 <__gdtoa+0xb97>
					break;
   2ddf5:	90                   	nop
				}
#ifndef No_leftright
			}
#endif
 fast_failed:
		s = s0;
   2ddf6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
   2ddfa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		dval(&d) = d2;
   2ddfe:	f2 0f 10 45 c8       	movsd  -0x38(%rbp),%xmm0
   2de03:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
		k = k0;
   2de08:	8b 45 80             	mov    -0x80(%rbp),%eax
   2de0b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
		ilim = ilim0;
   2de11:	8b 45 84             	mov    -0x7c(%rbp),%eax
   2de14:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
		}

	/* Do we have a "small" integer? */

	if (be >= 0 && k <= Int_max) {
   2de1a:	83 bd 14 ff ff ff 00 	cmpl   $0x0,-0xec(%rbp)
   2de21:	0f 88 ff 01 00 00    	js     2e026 <__gdtoa+0xdc7>
   2de27:	83 bd 4c ff ff ff 0e 	cmpl   $0xe,-0xb4(%rbp)
   2de2e:	0f 8f f2 01 00 00    	jg     2e026 <__gdtoa+0xdc7>
		/* Yes. */
		ds = tens[k];
   2de34:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2de3a:	48 98                	cltq   
   2de3c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2de43:	00 
   2de44:	48 8d 05 75 30 00 00 	lea    0x3075(%rip),%rax        # 30ec0 <__tens_D2A>
   2de4b:	f2 0f 10 04 02       	movsd  (%rdx,%rax,1),%xmm0
   2de50:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)
		if (ndigits < 0 && ilim <= 0) {
   2de55:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
   2de5c:	79 4b                	jns    2dea9 <__gdtoa+0xc4a>
   2de5e:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)
   2de65:	7f 42                	jg     2dea9 <__gdtoa+0xc4a>
			S = mhi = 0;
   2de67:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
   2de6e:	00 
   2de6f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2de73:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if (ilim < 0 || dval(&d) <= 5*ds)
   2de77:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)
   2de7e:	0f 88 e6 06 00 00    	js     2e56a <__gdtoa+0x130b>
   2de84:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2de89:	f2 0f 10 55 b0       	movsd  -0x50(%rbp),%xmm2
   2de8e:	f2 0f 10 05 42 31 00 	movsd  0x3142(%rip),%xmm0        # 30fd8 <__tens_D2A+0x118>
   2de95:	00 
   2de96:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
   2de9a:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2de9e:	0f 83 c6 06 00 00    	jae    2e56a <__gdtoa+0x130b>
				goto no_digits;
			goto one_digit;
   2dea4:	e9 e3 06 00 00       	jmpq   2e58c <__gdtoa+0x132d>
			}
		for(i = 1;; i++, dval(&d) *= 10.) {
   2dea9:	c7 85 28 ff ff ff 01 	movl   $0x1,-0xd8(%rbp)
   2deb0:	00 00 00 
			L = dval(&d) / ds;
   2deb3:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2deb8:	f2 0f 5e 45 b0       	divsd  -0x50(%rbp),%xmm0
   2debd:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
   2dec1:	89 45 8c             	mov    %eax,-0x74(%rbp)
			dval(&d) -= L*ds;
   2dec4:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2dec9:	f2 0f 2a 45 8c       	cvtsi2sdl -0x74(%rbp),%xmm0
   2dece:	f2 0f 59 45 b0       	mulsd  -0x50(%rbp),%xmm0
   2ded3:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
   2ded7:	66 0f 28 c1          	movapd %xmm1,%xmm0
   2dedb:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
			if (dval(&d) < 0) {
				L--;
				dval(&d) += ds;
				}
#endif
			*s++ = '0' + (int)L;
   2dee0:	8b 45 8c             	mov    -0x74(%rbp),%eax
   2dee3:	8d 48 30             	lea    0x30(%rax),%ecx
   2dee6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2deea:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2deee:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2def2:	89 ca                	mov    %ecx,%edx
   2def4:	88 10                	mov    %dl,(%rax)
			if (dval(&d) == 0.)
   2def6:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2defb:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2deff:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2df03:	7a 0e                	jp     2df13 <__gdtoa+0xcb4>
   2df05:	66 0f ef c9          	pxor   %xmm1,%xmm1
   2df09:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
   2df0d:	0f 84 0d 01 00 00    	je     2e020 <__gdtoa+0xdc1>
				break;
			if (i == ilim) {
   2df13:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2df19:	39 85 3c ff ff ff    	cmp    %eax,-0xc4(%rbp)
   2df1f:	0f 85 d1 00 00 00    	jne    2dff6 <__gdtoa+0xd97>
				if (rdir) {
   2df25:	83 bd 60 ff ff ff 00 	cmpl   $0x0,-0xa0(%rbp)
   2df2c:	74 18                	je     2df46 <__gdtoa+0xce7>
					if (rdir == 1)
   2df2e:	83 bd 60 ff ff ff 01 	cmpl   $0x1,-0xa0(%rbp)
   2df35:	74 4e                	je     2df85 <__gdtoa+0xd26>
						goto bump_up;
					inex = STRTOG_Inexlo;
   2df37:	c7 85 44 ff ff ff 10 	movl   $0x10,-0xbc(%rbp)
   2df3e:	00 00 00 
					goto ret1;
   2df41:	e9 b9 0d 00 00       	jmpq   2ecff <__gdtoa+0x1aa0>
					}
				dval(&d) += dval(&d);
   2df46:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2df4b:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
   2df4f:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
#ifdef ROUND_BIASED
				if (dval(&d) >= ds)
#else
				if (dval(&d) > ds || (dval(&d) == ds && L & 1))
   2df54:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2df59:	66 0f 2e 45 b0       	ucomisd -0x50(%rbp),%xmm0
   2df5e:	77 28                	ja     2df88 <__gdtoa+0xd29>
   2df60:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
   2df65:	66 0f 2e 45 b0       	ucomisd -0x50(%rbp),%xmm0
   2df6a:	7a 69                	jp     2dfd5 <__gdtoa+0xd76>
   2df6c:	66 0f 2e 45 b0       	ucomisd -0x50(%rbp),%xmm0
   2df71:	75 62                	jne    2dfd5 <__gdtoa+0xd76>
   2df73:	8b 45 8c             	mov    -0x74(%rbp),%eax
   2df76:	83 e0 01             	and    $0x1,%eax
   2df79:	85 c0                	test   %eax,%eax
   2df7b:	74 58                	je     2dfd5 <__gdtoa+0xd76>
#endif
					{
 bump_up:
   2df7d:	eb 09                	jmp    2df88 <__gdtoa+0xd29>
					goto bump_up;
   2df7f:	90                   	nop
   2df80:	eb 07                	jmp    2df89 <__gdtoa+0xd2a>
						goto bump_up;
   2df82:	90                   	nop
   2df83:	eb 04                	jmp    2df89 <__gdtoa+0xd2a>
						goto bump_up;
   2df85:	90                   	nop
   2df86:	eb 01                	jmp    2df89 <__gdtoa+0xd2a>
 bump_up:
   2df88:	90                   	nop
					inex = STRTOG_Inexhi;
   2df89:	c7 85 44 ff ff ff 20 	movl   $0x20,-0xbc(%rbp)
   2df90:	00 00 00 
					while(*--s == '9')
   2df93:	eb 1a                	jmp    2dfaf <__gdtoa+0xd50>
						if (s == s0) {
   2df95:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2df99:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   2df9d:	75 10                	jne    2dfaf <__gdtoa+0xd50>
							k++;
   2df9f:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)
							*s = '0';
   2dfa6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2dfaa:	c6 00 30             	movb   $0x30,(%rax)
							break;
   2dfad:	eb 10                	jmp    2dfbf <__gdtoa+0xd60>
					while(*--s == '9')
   2dfaf:	48 83 6d b8 01       	subq   $0x1,-0x48(%rbp)
   2dfb4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2dfb8:	0f b6 00             	movzbl (%rax),%eax
   2dfbb:	3c 39                	cmp    $0x39,%al
   2dfbd:	74 d6                	je     2df95 <__gdtoa+0xd36>
							}
					++*s++;
   2dfbf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2dfc3:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2dfc7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2dfcb:	0f b6 10             	movzbl (%rax),%edx
   2dfce:	83 c2 01             	add    $0x1,%edx
   2dfd1:	88 10                	mov    %dl,(%rax)
					inex = STRTOG_Inexlo;
 clear_trailing0:
					while(*--s == '0'){}
					++s;
					}
				break;
   2dfd3:	eb 4c                	jmp    2e021 <__gdtoa+0xdc2>
					inex = STRTOG_Inexlo;
   2dfd5:	c7 85 44 ff ff ff 10 	movl   $0x10,-0xbc(%rbp)
   2dfdc:	00 00 00 
					while(*--s == '0'){}
   2dfdf:	48 83 6d b8 01       	subq   $0x1,-0x48(%rbp)
   2dfe4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2dfe8:	0f b6 00             	movzbl (%rax),%eax
   2dfeb:	3c 30                	cmp    $0x30,%al
   2dfed:	74 f0                	je     2dfdf <__gdtoa+0xd80>
					++s;
   2dfef:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
				break;
   2dff4:	eb 2b                	jmp    2e021 <__gdtoa+0xdc2>
		for(i = 1;; i++, dval(&d) *= 10.) {
   2dff6:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2dffc:	83 c0 01             	add    $0x1,%eax
   2dfff:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
   2e005:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
   2e00a:	f2 0f 10 05 b6 2f 00 	movsd  0x2fb6(%rip),%xmm0        # 30fc8 <__tens_D2A+0x108>
   2e011:	00 
   2e012:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
   2e016:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
			L = dval(&d) / ds;
   2e01b:	e9 93 fe ff ff       	jmpq   2deb3 <__gdtoa+0xc54>
				break;
   2e020:	90                   	nop
				}
			}
		goto ret1;
   2e021:	e9 d9 0c 00 00       	jmpq   2ecff <__gdtoa+0x1aa0>
		}

	m2 = b2;
   2e026:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
   2e02c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
	m5 = b5;
   2e032:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
   2e038:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
	mhi = mlo = 0;
   2e03e:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
   2e045:	00 
   2e046:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2e04a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	if (leftright) {
   2e04e:	83 bd 54 ff ff ff 00 	cmpl   $0x0,-0xac(%rbp)
   2e055:	0f 84 65 01 00 00    	je     2e1c0 <__gdtoa+0xf61>
		i = nbits - bbits;
   2e05b:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
   2e061:	8b 95 78 ff ff ff    	mov    -0x88(%rbp),%edx
   2e067:	29 c2                	sub    %eax,%edx
   2e069:	89 d0                	mov    %edx,%eax
   2e06b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
		if (be - i++ < fpi->emin && mode != 3 && mode != 5) {
   2e071:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e077:	8d 50 01             	lea    0x1(%rax),%edx
   2e07a:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%rbp)
   2e080:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
   2e086:	29 c2                	sub    %eax,%edx
   2e088:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   2e08f:	8b 40 04             	mov    0x4(%rax),%eax
   2e092:	39 c2                	cmp    %eax,%edx
   2e094:	7d 5d                	jge    2e0f3 <__gdtoa+0xe94>
   2e096:	83 bd 10 ff ff ff 03 	cmpl   $0x3,-0xf0(%rbp)
   2e09d:	74 54                	je     2e0f3 <__gdtoa+0xe94>
   2e09f:	83 bd 10 ff ff ff 05 	cmpl   $0x5,-0xf0(%rbp)
   2e0a6:	74 4b                	je     2e0f3 <__gdtoa+0xe94>
			/* denormal */
			i = be - fpi->emin + 1;
   2e0a8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   2e0af:	8b 40 04             	mov    0x4(%rax),%eax
   2e0b2:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
   2e0b8:	29 c2                	sub    %eax,%edx
   2e0ba:	89 d0                	mov    %edx,%eax
   2e0bc:	83 c0 01             	add    $0x1,%eax
   2e0bf:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
			if (mode >= 2 && ilim > 0 && ilim < i)
   2e0c5:	83 bd 10 ff ff ff 01 	cmpl   $0x1,-0xf0(%rbp)
   2e0cc:	0f 8e b6 00 00 00    	jle    2e188 <__gdtoa+0xf29>
   2e0d2:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)
   2e0d9:	0f 8e a9 00 00 00    	jle    2e188 <__gdtoa+0xf29>
   2e0df:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e0e5:	39 85 3c ff ff ff    	cmp    %eax,-0xc4(%rbp)
   2e0eb:	0f 8d 97 00 00 00    	jge    2e188 <__gdtoa+0xf29>
				goto small_ilim;
   2e0f1:	eb 0e                	jmp    2e101 <__gdtoa+0xea2>
			}
		else if (mode >= 2) {
   2e0f3:	83 bd 10 ff ff ff 01 	cmpl   $0x1,-0xf0(%rbp)
   2e0fa:	0f 8e 89 00 00 00    	jle    2e189 <__gdtoa+0xf2a>
 small_ilim:
   2e100:	90                   	nop
			j = ilim - 1;
   2e101:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
   2e107:	83 e8 01             	sub    $0x1,%eax
   2e10a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
			if (m5 >= j)
   2e110:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   2e116:	3b 85 48 ff ff ff    	cmp    -0xb8(%rbp),%eax
   2e11c:	7c 0e                	jl     2e12c <__gdtoa+0xecd>
				m5 -= j;
   2e11e:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2e124:	29 85 5c ff ff ff    	sub    %eax,-0xa4(%rbp)
   2e12a:	eb 2e                	jmp    2e15a <__gdtoa+0xefb>
			else {
				s5 += j -= m5;
   2e12c:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
   2e132:	29 85 48 ff ff ff    	sub    %eax,-0xb8(%rbp)
   2e138:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2e13e:	01 85 68 ff ff ff    	add    %eax,-0x98(%rbp)
				b5 += j;
   2e144:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
   2e14a:	01 85 30 ff ff ff    	add    %eax,-0xd0(%rbp)
				m5 = 0;
   2e150:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
   2e157:	00 00 00 
				}
			if ((i = ilim) < 0) {
   2e15a:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
   2e160:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
   2e166:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e16c:	85 c0                	test   %eax,%eax
   2e16e:	79 19                	jns    2e189 <__gdtoa+0xf2a>
				m2 -= i;
   2e170:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e176:	29 85 58 ff ff ff    	sub    %eax,-0xa8(%rbp)
				i = 0;
   2e17c:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%rbp)
   2e183:	00 00 00 
   2e186:	eb 01                	jmp    2e189 <__gdtoa+0xf2a>
			if (mode >= 2 && ilim > 0 && ilim < i)
   2e188:	90                   	nop
				}
			}
		b2 += i;
   2e189:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e18f:	01 85 2c ff ff ff    	add    %eax,-0xd4(%rbp)
		s2 += i;
   2e195:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e19b:	01 85 64 ff ff ff    	add    %eax,-0x9c(%rbp)
		mhi = i2b(1);
   2e1a1:	bf 01 00 00 00       	mov    $0x1,%edi
   2e1a6:	e8 c7 db ff ff       	callq  2bd72 <__i2b_D2A>
   2e1ab:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		if (mhi == NULL)
   2e1af:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2e1b4:	75 0a                	jne    2e1c0 <__gdtoa+0xf61>
			return (NULL);
   2e1b6:	b8 00 00 00 00       	mov    $0x0,%eax
   2e1bb:	e9 9a 0b 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
		}
	if (m2 > 0 && s2 > 0) {
   2e1c0:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   2e1c7:	7e 46                	jle    2e20f <__gdtoa+0xfb0>
   2e1c9:	83 bd 64 ff ff ff 00 	cmpl   $0x0,-0x9c(%rbp)
   2e1d0:	7e 3d                	jle    2e20f <__gdtoa+0xfb0>
		i = m2 < s2 ? m2 : s2;
   2e1d2:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
   2e1d8:	39 85 64 ff ff ff    	cmp    %eax,-0x9c(%rbp)
   2e1de:	0f 4e 85 64 ff ff ff 	cmovle -0x9c(%rbp),%eax
   2e1e5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
		b2 -= i;
   2e1eb:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e1f1:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
		m2 -= i;
   2e1f7:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e1fd:	29 85 58 ff ff ff    	sub    %eax,-0xa8(%rbp)
		s2 -= i;
   2e203:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e209:	29 85 64 ff ff ff    	sub    %eax,-0x9c(%rbp)
		}
	if (b5 > 0) {
   2e20f:	83 bd 30 ff ff ff 00 	cmpl   $0x0,-0xd0(%rbp)
   2e216:	0f 8e e8 00 00 00    	jle    2e304 <__gdtoa+0x10a5>
		if (leftright) {
   2e21c:	83 bd 54 ff ff ff 00 	cmpl   $0x0,-0xac(%rbp)
   2e223:	0f 84 b2 00 00 00    	je     2e2db <__gdtoa+0x107c>
			if (m5 > 0) {
   2e229:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
   2e230:	7e 65                	jle    2e297 <__gdtoa+0x1038>
				mhi = pow5mult(mhi, m5);
   2e232:	8b 95 5c ff ff ff    	mov    -0xa4(%rbp),%edx
   2e238:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2e23c:	89 d6                	mov    %edx,%esi
   2e23e:	48 89 c7             	mov    %rax,%rdi
   2e241:	e8 8c de ff ff       	callq  2c0d2 <__pow5mult_D2A>
   2e246:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
				if (mhi == NULL)
   2e24a:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2e24f:	75 0a                	jne    2e25b <__gdtoa+0xffc>
					return (NULL);
   2e251:	b8 00 00 00 00       	mov    $0x0,%eax
   2e256:	e9 ff 0a 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
				b1 = mult(mhi, b);
   2e25b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
   2e25f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2e263:	48 89 d6             	mov    %rdx,%rsi
   2e266:	48 89 c7             	mov    %rax,%rdi
   2e269:	e8 46 db ff ff       	callq  2bdb4 <__mult_D2A>
   2e26e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				if (b1 == NULL)
   2e272:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
   2e277:	75 0a                	jne    2e283 <__gdtoa+0x1024>
					return (NULL);
   2e279:	b8 00 00 00 00       	mov    $0x0,%eax
   2e27e:	e9 d7 0a 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
				Bfree(b);
   2e283:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e287:	48 89 c7             	mov    %rax,%rdi
   2e28a:	e8 ac d7 ff ff       	callq  2ba3b <__Bfree_D2A>
				b = b1;
   2e28f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
   2e293:	48 89 45 90          	mov    %rax,-0x70(%rbp)
				}
			if ( (j = b5 - m5) !=0) {
   2e297:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
   2e29d:	2b 85 5c ff ff ff    	sub    -0xa4(%rbp),%eax
   2e2a3:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
   2e2a9:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2e2b0:	74 52                	je     2e304 <__gdtoa+0x10a5>
				b = pow5mult(b, j);
   2e2b2:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
   2e2b8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e2bc:	89 d6                	mov    %edx,%esi
   2e2be:	48 89 c7             	mov    %rax,%rdi
   2e2c1:	e8 0c de ff ff       	callq  2c0d2 <__pow5mult_D2A>
   2e2c6:	48 89 45 90          	mov    %rax,-0x70(%rbp)
				if (b == NULL)
   2e2ca:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   2e2cf:	75 33                	jne    2e304 <__gdtoa+0x10a5>
					return (NULL);
   2e2d1:	b8 00 00 00 00       	mov    $0x0,%eax
   2e2d6:	e9 7f 0a 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
				}
			}
		else {
			b = pow5mult(b, b5);
   2e2db:	8b 95 30 ff ff ff    	mov    -0xd0(%rbp),%edx
   2e2e1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e2e5:	89 d6                	mov    %edx,%esi
   2e2e7:	48 89 c7             	mov    %rax,%rdi
   2e2ea:	e8 e3 dd ff ff       	callq  2c0d2 <__pow5mult_D2A>
   2e2ef:	48 89 45 90          	mov    %rax,-0x70(%rbp)
			if (b == NULL)
   2e2f3:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   2e2f8:	75 0a                	jne    2e304 <__gdtoa+0x10a5>
				return (NULL);
   2e2fa:	b8 00 00 00 00       	mov    $0x0,%eax
   2e2ff:	e9 56 0a 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
			}
		}
	S = i2b(1);
   2e304:	bf 01 00 00 00       	mov    $0x1,%edi
   2e309:	e8 64 da ff ff       	callq  2bd72 <__i2b_D2A>
   2e30e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	if (S == NULL)
   2e312:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   2e317:	75 0a                	jne    2e323 <__gdtoa+0x10c4>
		return (NULL);
   2e319:	b8 00 00 00 00       	mov    $0x0,%eax
   2e31e:	e9 37 0a 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
	if (s5 > 0) {
   2e323:	83 bd 68 ff ff ff 00 	cmpl   $0x0,-0x98(%rbp)
   2e32a:	7e 29                	jle    2e355 <__gdtoa+0x10f6>
		S = pow5mult(S, s5);
   2e32c:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
   2e332:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2e336:	89 d6                	mov    %edx,%esi
   2e338:	48 89 c7             	mov    %rax,%rdi
   2e33b:	e8 92 dd ff ff       	callq  2c0d2 <__pow5mult_D2A>
   2e340:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		if (S == NULL)
   2e344:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   2e349:	75 0a                	jne    2e355 <__gdtoa+0x10f6>
			return (NULL);
   2e34b:	b8 00 00 00 00       	mov    $0x0,%eax
   2e350:	e9 05 0a 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
		}

	/* Check for special case that d is a normalized power of 2. */

	spec_case = 0;
   2e355:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
   2e35c:	00 00 00 
	if (mode < 2) {
   2e35f:	83 bd 10 ff ff ff 01 	cmpl   $0x1,-0xf0(%rbp)
   2e366:	7f 38                	jg     2e3a0 <__gdtoa+0x1141>
		if (bbits == 1 && be0 > fpi->emin + 1) {
   2e368:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
   2e36e:	83 f8 01             	cmp    $0x1,%eax
   2e371:	75 2d                	jne    2e3a0 <__gdtoa+0x1141>
   2e373:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
   2e37a:	8b 40 04             	mov    0x4(%rax),%eax
   2e37d:	83 c0 01             	add    $0x1,%eax
   2e380:	39 85 7c ff ff ff    	cmp    %eax,-0x84(%rbp)
   2e386:	7e 18                	jle    2e3a0 <__gdtoa+0x1141>
			/* The special case */
			b2++;
   2e388:	83 85 2c ff ff ff 01 	addl   $0x1,-0xd4(%rbp)
			s2++;
   2e38f:	83 85 64 ff ff ff 01 	addl   $0x1,-0x9c(%rbp)
			spec_case = 1;
   2e396:	c7 85 6c ff ff ff 01 	movl   $0x1,-0x94(%rbp)
   2e39d:	00 00 00 
	 *
	 * Perhaps we should just compute leading 28 bits of S once
	 * and for all and pass them and a shift to quorem, so it
	 * can do shifts and ors to compute the numerator for q.
	 */
	i = ((s5 ? hi0bits(S->x[S->wds-1]) : ULbits - 1) - s2 - 4) & kmask;
   2e3a0:	83 bd 68 ff ff ff 00 	cmpl   $0x0,-0x98(%rbp)
   2e3a7:	74 22                	je     2e3cb <__gdtoa+0x116c>
   2e3a9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2e3ad:	8b 40 14             	mov    0x14(%rax),%eax
   2e3b0:	8d 50 ff             	lea    -0x1(%rax),%edx
   2e3b3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2e3b7:	48 63 d2             	movslq %edx,%rdx
   2e3ba:	48 83 c2 04          	add    $0x4,%rdx
   2e3be:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
   2e3c2:	89 c7                	mov    %eax,%edi
   2e3c4:	e8 26 d9 ff ff       	callq  2bcef <__hi0bits_D2A>
   2e3c9:	eb 05                	jmp    2e3d0 <__gdtoa+0x1171>
   2e3cb:	b8 1f 00 00 00       	mov    $0x1f,%eax
   2e3d0:	2b 85 64 ff ff ff    	sub    -0x9c(%rbp),%eax
   2e3d6:	83 e8 04             	sub    $0x4,%eax
   2e3d9:	83 e0 1f             	and    $0x1f,%eax
   2e3dc:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
	m2 += i;
   2e3e2:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e3e8:	01 85 58 ff ff ff    	add    %eax,-0xa8(%rbp)
	if ((b2 += i) > 0) {
   2e3ee:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e3f4:	01 85 2c ff ff ff    	add    %eax,-0xd4(%rbp)
   2e3fa:	83 bd 2c ff ff ff 00 	cmpl   $0x0,-0xd4(%rbp)
   2e401:	7e 29                	jle    2e42c <__gdtoa+0x11cd>
		b = lshift(b, b2);
   2e403:	8b 95 2c ff ff ff    	mov    -0xd4(%rbp),%edx
   2e409:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e40d:	89 d6                	mov    %edx,%esi
   2e40f:	48 89 c7             	mov    %rax,%rdi
   2e412:	e8 86 de ff ff       	callq  2c29d <__lshift_D2A>
   2e417:	48 89 45 90          	mov    %rax,-0x70(%rbp)
		if (b == NULL)
   2e41b:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   2e420:	75 0a                	jne    2e42c <__gdtoa+0x11cd>
			return (NULL);
   2e422:	b8 00 00 00 00       	mov    $0x0,%eax
   2e427:	e9 2e 09 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
		}
	if ((s2 += i) > 0) {
   2e42c:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2e432:	01 85 64 ff ff ff    	add    %eax,-0x9c(%rbp)
   2e438:	83 bd 64 ff ff ff 00 	cmpl   $0x0,-0x9c(%rbp)
   2e43f:	7e 29                	jle    2e46a <__gdtoa+0x120b>
		S = lshift(S, s2);
   2e441:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
   2e447:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2e44b:	89 d6                	mov    %edx,%esi
   2e44d:	48 89 c7             	mov    %rax,%rdi
   2e450:	e8 48 de ff ff       	callq  2c29d <__lshift_D2A>
   2e455:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		if (S == NULL)
   2e459:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   2e45e:	75 0a                	jne    2e46a <__gdtoa+0x120b>
			return (NULL);
   2e460:	b8 00 00 00 00       	mov    $0x0,%eax
   2e465:	e9 f0 08 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
		}
	if (k_check) {
   2e46a:	83 bd 50 ff ff ff 00 	cmpl   $0x0,-0xb0(%rbp)
   2e471:	0f 84 89 00 00 00    	je     2e500 <__gdtoa+0x12a1>
		if (cmp(b,S) < 0) {
   2e477:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2e47b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e47f:	48 89 d6             	mov    %rdx,%rsi
   2e482:	48 89 c7             	mov    %rax,%rdi
   2e485:	e8 9c df ff ff       	callq  2c426 <__cmp_D2A>
   2e48a:	85 c0                	test   %eax,%eax
   2e48c:	79 72                	jns    2e500 <__gdtoa+0x12a1>
			k--;
   2e48e:	83 ad 4c ff ff ff 01 	subl   $0x1,-0xb4(%rbp)
			b = multadd(b, 10, 0);	/* we botched the k estimate */
   2e495:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e499:	ba 00 00 00 00       	mov    $0x0,%edx
   2e49e:	be 0a 00 00 00       	mov    $0xa,%esi
   2e4a3:	48 89 c7             	mov    %rax,%rdi
   2e4a6:	e8 fe d6 ff ff       	callq  2bba9 <__multadd_D2A>
   2e4ab:	48 89 45 90          	mov    %rax,-0x70(%rbp)
			if (b == NULL)
   2e4af:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   2e4b4:	75 0a                	jne    2e4c0 <__gdtoa+0x1261>
				return (NULL);
   2e4b6:	b8 00 00 00 00       	mov    $0x0,%eax
   2e4bb:	e9 9a 08 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
			if (leftright) {
   2e4c0:	83 bd 54 ff ff ff 00 	cmpl   $0x0,-0xac(%rbp)
   2e4c7:	74 2b                	je     2e4f4 <__gdtoa+0x1295>
				mhi = multadd(mhi, 10, 0);
   2e4c9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2e4cd:	ba 00 00 00 00       	mov    $0x0,%edx
   2e4d2:	be 0a 00 00 00       	mov    $0xa,%esi
   2e4d7:	48 89 c7             	mov    %rax,%rdi
   2e4da:	e8 ca d6 ff ff       	callq  2bba9 <__multadd_D2A>
   2e4df:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
				if (mhi == NULL)
   2e4e3:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2e4e8:	75 0a                	jne    2e4f4 <__gdtoa+0x1295>
					return (NULL);
   2e4ea:	b8 00 00 00 00       	mov    $0x0,%eax
   2e4ef:	e9 66 08 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
				}
			ilim = ilim1;
   2e4f4:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
   2e4fa:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			}
		}
	if (ilim <= 0 && mode > 2) {
   2e500:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)
   2e507:	0f 8f a4 00 00 00    	jg     2e5b1 <__gdtoa+0x1352>
   2e50d:	83 bd 10 ff ff ff 02 	cmpl   $0x2,-0xf0(%rbp)
   2e514:	0f 8e 97 00 00 00    	jle    2e5b1 <__gdtoa+0x1352>
		S = multadd(S,5,0);
   2e51a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2e51e:	ba 00 00 00 00       	mov    $0x0,%edx
   2e523:	be 05 00 00 00       	mov    $0x5,%esi
   2e528:	48 89 c7             	mov    %rax,%rdi
   2e52b:	e8 79 d6 ff ff       	callq  2bba9 <__multadd_D2A>
   2e530:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		if (S == NULL)
   2e534:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
   2e539:	75 0a                	jne    2e545 <__gdtoa+0x12e6>
			return (NULL);
   2e53b:	b8 00 00 00 00       	mov    $0x0,%eax
   2e540:	e9 15 08 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
		if (ilim < 0 || cmp(b,S) <= 0) {
   2e545:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)
   2e54c:	78 1c                	js     2e56a <__gdtoa+0x130b>
   2e54e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2e552:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e556:	48 89 d6             	mov    %rdx,%rsi
   2e559:	48 89 c7             	mov    %rax,%rdi
   2e55c:	e8 c5 de ff ff       	callq  2c426 <__cmp_D2A>
   2e561:	85 c0                	test   %eax,%eax
   2e563:	7f 26                	jg     2e58b <__gdtoa+0x132c>
			/* no digits, fcvt style */
 no_digits:
   2e565:	eb 03                	jmp    2e56a <__gdtoa+0x130b>
				goto no_digits;
   2e567:	90                   	nop
   2e568:	eb 01                	jmp    2e56b <__gdtoa+0x130c>
 no_digits:
   2e56a:	90                   	nop
			k = -1 - ndigits;
   2e56b:	8b 85 fc fe ff ff    	mov    -0x104(%rbp),%eax
   2e571:	f7 d0                	not    %eax
   2e573:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
			inex = STRTOG_Inexlo;
   2e579:	c7 85 44 ff ff ff 10 	movl   $0x10,-0xbc(%rbp)
   2e580:	00 00 00 
			goto ret;
   2e583:	e9 38 07 00 00       	jmpq   2ecc0 <__gdtoa+0x1a61>
				goto one_digit;
   2e588:	90                   	nop
   2e589:	eb 01                	jmp    2e58c <__gdtoa+0x132d>
			}
 one_digit:
   2e58b:	90                   	nop
		inex = STRTOG_Inexhi;
   2e58c:	c7 85 44 ff ff ff 20 	movl   $0x20,-0xbc(%rbp)
   2e593:	00 00 00 
		*s++ = '1';
   2e596:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2e59a:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2e59e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2e5a2:	c6 00 31             	movb   $0x31,(%rax)
		k++;
   2e5a5:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)
		goto ret;
   2e5ac:	e9 0f 07 00 00       	jmpq   2ecc0 <__gdtoa+0x1a61>
		}
	if (leftright) {
   2e5b1:	83 bd 54 ff ff ff 00 	cmpl   $0x0,-0xac(%rbp)
   2e5b8:	0f 84 58 05 00 00    	je     2eb16 <__gdtoa+0x18b7>
		if (m2 > 0) {
   2e5be:	83 bd 58 ff ff ff 00 	cmpl   $0x0,-0xa8(%rbp)
   2e5c5:	7e 29                	jle    2e5f0 <__gdtoa+0x1391>
			mhi = lshift(mhi, m2);
   2e5c7:	8b 95 58 ff ff ff    	mov    -0xa8(%rbp),%edx
   2e5cd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2e5d1:	89 d6                	mov    %edx,%esi
   2e5d3:	48 89 c7             	mov    %rax,%rdi
   2e5d6:	e8 c2 dc ff ff       	callq  2c29d <__lshift_D2A>
   2e5db:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			if (mhi == NULL)
   2e5df:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2e5e4:	75 0a                	jne    2e5f0 <__gdtoa+0x1391>
				return (NULL);
   2e5e6:	b8 00 00 00 00       	mov    $0x0,%eax
   2e5eb:	e9 6a 07 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>

		/* Compute mlo -- check for special case
		 * that d is a normalized power of 2.
		 */

		mlo = mhi;
   2e5f0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2e5f4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		if (spec_case) {
   2e5f8:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%rbp)
   2e5ff:	74 79                	je     2e67a <__gdtoa+0x141b>
			mhi = Balloc(mhi->k);
   2e601:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2e605:	8b 40 08             	mov    0x8(%rax),%eax
   2e608:	89 c7                	mov    %eax,%edi
   2e60a:	e8 e5 d2 ff ff       	callq  2b8f4 <__Balloc_D2A>
   2e60f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			if (mhi == NULL)
   2e613:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2e618:	75 0a                	jne    2e624 <__gdtoa+0x13c5>
				return (NULL);
   2e61a:	b8 00 00 00 00       	mov    $0x0,%eax
   2e61f:	e9 36 07 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
			Bcopy(mhi, mlo);
   2e624:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2e628:	8b 40 14             	mov    0x14(%rax),%eax
   2e62b:	48 98                	cltq   
   2e62d:	48 83 c0 02          	add    $0x2,%rax
   2e631:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2e638:	00 
   2e639:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2e63d:	48 8d 48 10          	lea    0x10(%rax),%rcx
   2e641:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2e645:	48 83 c0 10          	add    $0x10,%rax
   2e649:	48 89 ce             	mov    %rcx,%rsi
   2e64c:	48 89 c7             	mov    %rax,%rdi
   2e64f:	e8 96 01 fe ff       	callq  e7ea <memcpy>
			mhi = lshift(mhi, 1);
   2e654:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2e658:	be 01 00 00 00       	mov    $0x1,%esi
   2e65d:	48 89 c7             	mov    %rax,%rdi
   2e660:	e8 38 dc ff ff       	callq  2c29d <__lshift_D2A>
   2e665:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			if (mhi == NULL)
   2e669:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2e66e:	75 0a                	jne    2e67a <__gdtoa+0x141b>
				return (NULL);
   2e670:	b8 00 00 00 00       	mov    $0x0,%eax
   2e675:	e9 e0 06 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
			}

		for(i = 1;;i++) {
   2e67a:	c7 85 28 ff ff ff 01 	movl   $0x1,-0xd8(%rbp)
   2e681:	00 00 00 
			dig = quorem(b,S) + '0';
   2e684:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2e688:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e68c:	48 89 d6             	mov    %rdx,%rsi
   2e68f:	48 89 c7             	mov    %rax,%rdi
   2e692:	e8 cc a8 ff ff       	callq  28f63 <__quorem_D2A>
   2e697:	83 c0 30             	add    $0x30,%eax
   2e69a:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
			/* Do we yet have the shortest decimal string
			 * that will round to d?
			 */
			j = cmp(b, mlo);
   2e6a0:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
   2e6a4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e6a8:	48 89 d6             	mov    %rdx,%rsi
   2e6ab:	48 89 c7             	mov    %rax,%rdi
   2e6ae:	e8 73 dd ff ff       	callq  2c426 <__cmp_D2A>
   2e6b3:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
			delta = diff(S, mhi);
   2e6b9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   2e6bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2e6c1:	48 89 d6             	mov    %rdx,%rsi
   2e6c4:	48 89 c7             	mov    %rax,%rdi
   2e6c7:	e8 2a de ff ff       	callq  2c4f6 <__diff_D2A>
   2e6cc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
			if (delta == NULL)
   2e6d0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
   2e6d5:	75 0a                	jne    2e6e1 <__gdtoa+0x1482>
				return (NULL);
   2e6d7:	b8 00 00 00 00       	mov    $0x0,%eax
   2e6dc:	e9 79 06 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
			j1 = delta->sign ? 1 : cmp(b, delta);
   2e6e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2e6e5:	8b 40 10             	mov    0x10(%rax),%eax
   2e6e8:	85 c0                	test   %eax,%eax
   2e6ea:	75 15                	jne    2e701 <__gdtoa+0x14a2>
   2e6ec:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   2e6f0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e6f4:	48 89 d6             	mov    %rdx,%rsi
   2e6f7:	48 89 c7             	mov    %rax,%rdi
   2e6fa:	e8 27 dd ff ff       	callq  2c426 <__cmp_D2A>
   2e6ff:	eb 05                	jmp    2e706 <__gdtoa+0x14a7>
   2e701:	b8 01 00 00 00       	mov    $0x1,%eax
   2e706:	89 45 88             	mov    %eax,-0x78(%rbp)
			Bfree(delta);
   2e709:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2e70d:	48 89 c7             	mov    %rax,%rdi
   2e710:	e8 26 d3 ff ff       	callq  2ba3b <__Bfree_D2A>
#ifndef ROUND_BIASED
			if (j1 == 0 && !mode && !(bits[0] & 1) && !rdir) {
   2e715:	83 7d 88 00          	cmpl   $0x0,-0x78(%rbp)
   2e719:	0f 85 85 00 00 00    	jne    2e7a4 <__gdtoa+0x1545>
   2e71f:	83 bd 10 ff ff ff 00 	cmpl   $0x0,-0xf0(%rbp)
   2e726:	75 7c                	jne    2e7a4 <__gdtoa+0x1545>
   2e728:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   2e72f:	8b 00                	mov    (%rax),%eax
   2e731:	83 e0 01             	and    $0x1,%eax
   2e734:	85 c0                	test   %eax,%eax
   2e736:	75 6c                	jne    2e7a4 <__gdtoa+0x1545>
   2e738:	83 bd 60 ff ff ff 00 	cmpl   $0x0,-0xa0(%rbp)
   2e73f:	75 63                	jne    2e7a4 <__gdtoa+0x1545>
				if (dig == '9')
   2e741:	83 bd 34 ff ff ff 39 	cmpl   $0x39,-0xcc(%rbp)
   2e748:	0f 84 83 02 00 00    	je     2e9d1 <__gdtoa+0x1772>
					goto round_9_up;
				if (j <= 0) {
   2e74e:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2e755:	7f 23                	jg     2e77a <__gdtoa+0x151b>
					if (b->wds > 1 || b->x[0])
   2e757:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e75b:	8b 40 14             	mov    0x14(%rax),%eax
   2e75e:	83 f8 01             	cmp    $0x1,%eax
   2e761:	7f 0b                	jg     2e76e <__gdtoa+0x150f>
   2e763:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e767:	8b 40 18             	mov    0x18(%rax),%eax
   2e76a:	85 c0                	test   %eax,%eax
   2e76c:	74 1d                	je     2e78b <__gdtoa+0x152c>
						inex = STRTOG_Inexlo;
   2e76e:	c7 85 44 ff ff ff 10 	movl   $0x10,-0xbc(%rbp)
   2e775:	00 00 00 
   2e778:	eb 11                	jmp    2e78b <__gdtoa+0x152c>
					}
				else {
					dig++;
   2e77a:	83 85 34 ff ff ff 01 	addl   $0x1,-0xcc(%rbp)
					inex = STRTOG_Inexhi;
   2e781:	c7 85 44 ff ff ff 20 	movl   $0x20,-0xbc(%rbp)
   2e788:	00 00 00 
					}
				*s++ = dig;
   2e78b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2e78f:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2e793:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2e797:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
   2e79d:	88 10                	mov    %dl,(%rax)
				goto ret;
   2e79f:	e9 1c 05 00 00       	jmpq   2ecc0 <__gdtoa+0x1a61>
				}
#endif
			if (j < 0 || (j == 0 && !mode
   2e7a4:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2e7ab:	78 2e                	js     2e7db <__gdtoa+0x157c>
   2e7ad:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2e7b4:	0f 85 fd 01 00 00    	jne    2e9b7 <__gdtoa+0x1758>
   2e7ba:	83 bd 10 ff ff ff 00 	cmpl   $0x0,-0xf0(%rbp)
   2e7c1:	0f 85 f0 01 00 00    	jne    2e9b7 <__gdtoa+0x1758>
#ifndef ROUND_BIASED
							&& !(bits[0] & 1)
   2e7c7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   2e7ce:	8b 00                	mov    (%rax),%eax
   2e7d0:	83 e0 01             	and    $0x1,%eax
   2e7d3:	85 c0                	test   %eax,%eax
   2e7d5:	0f 85 dc 01 00 00    	jne    2e9b7 <__gdtoa+0x1758>
#endif
					)) {
				if (rdir && (b->wds > 1 || b->x[0])) {
   2e7db:	83 bd 60 ff ff ff 00 	cmpl   $0x0,-0xa0(%rbp)
   2e7e2:	0f 84 19 01 00 00    	je     2e901 <__gdtoa+0x16a2>
   2e7e8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e7ec:	8b 40 14             	mov    0x14(%rax),%eax
   2e7ef:	83 f8 01             	cmp    $0x1,%eax
   2e7f2:	7f 0f                	jg     2e803 <__gdtoa+0x15a4>
   2e7f4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e7f8:	8b 40 18             	mov    0x18(%rax),%eax
   2e7fb:	85 c0                	test   %eax,%eax
   2e7fd:	0f 84 fe 00 00 00    	je     2e901 <__gdtoa+0x16a2>
					if (rdir == 2) {
   2e803:	83 bd 60 ff ff ff 02 	cmpl   $0x2,-0xa0(%rbp)
   2e80a:	0f 85 af 00 00 00    	jne    2e8bf <__gdtoa+0x1660>
						inex = STRTOG_Inexlo;
   2e810:	c7 85 44 ff ff ff 10 	movl   $0x10,-0xbc(%rbp)
   2e817:	00 00 00 
						goto accept;
   2e81a:	e9 7f 01 00 00       	jmpq   2e99e <__gdtoa+0x173f>
						}
					while (cmp(S,mhi) > 0) {
						*s++ = dig;
   2e81f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2e823:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2e827:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2e82b:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
   2e831:	88 10                	mov    %dl,(%rax)
						mhi1 = multadd(mhi, 10, 0);
   2e833:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2e837:	ba 00 00 00 00       	mov    $0x0,%edx
   2e83c:	be 0a 00 00 00       	mov    $0xa,%esi
   2e841:	48 89 c7             	mov    %rax,%rdi
   2e844:	e8 60 d3 ff ff       	callq  2bba9 <__multadd_D2A>
   2e849:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
						if (mhi1 == NULL)
   2e84d:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
   2e852:	75 0a                	jne    2e85e <__gdtoa+0x15ff>
							return (NULL);
   2e854:	b8 00 00 00 00       	mov    $0x0,%eax
   2e859:	e9 fc 04 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
						if (mlo == mhi)
   2e85e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2e862:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
   2e866:	75 08                	jne    2e870 <__gdtoa+0x1611>
							mlo = mhi1;
   2e868:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2e86c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
						mhi = mhi1;
   2e870:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2e874:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
						b = multadd(b, 10, 0);
   2e878:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e87c:	ba 00 00 00 00       	mov    $0x0,%edx
   2e881:	be 0a 00 00 00       	mov    $0xa,%esi
   2e886:	48 89 c7             	mov    %rax,%rdi
   2e889:	e8 1b d3 ff ff       	callq  2bba9 <__multadd_D2A>
   2e88e:	48 89 45 90          	mov    %rax,-0x70(%rbp)
						if (b == NULL)
   2e892:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   2e897:	75 0a                	jne    2e8a3 <__gdtoa+0x1644>
							return (NULL);
   2e899:	b8 00 00 00 00       	mov    $0x0,%eax
   2e89e:	e9 b7 04 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
						dig = quorem(b,S) + '0';
   2e8a3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2e8a7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e8ab:	48 89 d6             	mov    %rdx,%rsi
   2e8ae:	48 89 c7             	mov    %rax,%rdi
   2e8b1:	e8 ad a6 ff ff       	callq  28f63 <__quorem_D2A>
   2e8b6:	83 c0 30             	add    $0x30,%eax
   2e8b9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
					while (cmp(S,mhi) > 0) {
   2e8bf:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
   2e8c3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2e8c7:	48 89 d6             	mov    %rdx,%rsi
   2e8ca:	48 89 c7             	mov    %rax,%rdi
   2e8cd:	e8 54 db ff ff       	callq  2c426 <__cmp_D2A>
   2e8d2:	85 c0                	test   %eax,%eax
   2e8d4:	0f 8f 45 ff ff ff    	jg     2e81f <__gdtoa+0x15c0>
						}
					if (dig++ == '9')
   2e8da:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
   2e8e0:	8d 50 01             	lea    0x1(%rax),%edx
   2e8e3:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%rbp)
   2e8e9:	83 f8 39             	cmp    $0x39,%eax
   2e8ec:	0f 84 e2 00 00 00    	je     2e9d4 <__gdtoa+0x1775>
						goto round_9_up;
					inex = STRTOG_Inexhi;
   2e8f2:	c7 85 44 ff ff ff 20 	movl   $0x20,-0xbc(%rbp)
   2e8f9:	00 00 00 
					goto accept;
   2e8fc:	e9 9d 00 00 00       	jmpq   2e99e <__gdtoa+0x173f>
					}
				if (j1 > 0) {
   2e901:	83 7d 88 00          	cmpl   $0x0,-0x78(%rbp)
   2e905:	7e 73                	jle    2e97a <__gdtoa+0x171b>
					b = lshift(b, 1);
   2e907:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e90b:	be 01 00 00 00       	mov    $0x1,%esi
   2e910:	48 89 c7             	mov    %rax,%rdi
   2e913:	e8 85 d9 ff ff       	callq  2c29d <__lshift_D2A>
   2e918:	48 89 45 90          	mov    %rax,-0x70(%rbp)
					if (b == NULL)
   2e91c:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   2e921:	75 0a                	jne    2e92d <__gdtoa+0x16ce>
						return (NULL);
   2e923:	b8 00 00 00 00       	mov    $0x0,%eax
   2e928:	e9 2d 04 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
					j1 = cmp(b, S);
   2e92d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2e931:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e935:	48 89 d6             	mov    %rdx,%rsi
   2e938:	48 89 c7             	mov    %rax,%rdi
   2e93b:	e8 e6 da ff ff       	callq  2c426 <__cmp_D2A>
   2e940:	89 45 88             	mov    %eax,-0x78(%rbp)
#ifdef ROUND_BIASED
					if (j1 >= 0 /*)*/
#else
					if ((j1 > 0 || (j1 == 0 && dig & 1))
   2e943:	83 7d 88 00          	cmpl   $0x0,-0x78(%rbp)
   2e947:	7f 13                	jg     2e95c <__gdtoa+0x16fd>
   2e949:	83 7d 88 00          	cmpl   $0x0,-0x78(%rbp)
   2e94d:	75 21                	jne    2e970 <__gdtoa+0x1711>
   2e94f:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
   2e955:	83 e0 01             	and    $0x1,%eax
   2e958:	85 c0                	test   %eax,%eax
   2e95a:	74 14                	je     2e970 <__gdtoa+0x1711>
#endif
					&& dig++ == '9')
   2e95c:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
   2e962:	8d 50 01             	lea    0x1(%rax),%edx
   2e965:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%rbp)
   2e96b:	83 f8 39             	cmp    $0x39,%eax
   2e96e:	74 67                	je     2e9d7 <__gdtoa+0x1778>
						goto round_9_up;
					inex = STRTOG_Inexhi;
   2e970:	c7 85 44 ff ff ff 20 	movl   $0x20,-0xbc(%rbp)
   2e977:	00 00 00 
					}
				if (b->wds > 1 || b->x[0])
   2e97a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e97e:	8b 40 14             	mov    0x14(%rax),%eax
   2e981:	83 f8 01             	cmp    $0x1,%eax
   2e984:	7f 0b                	jg     2e991 <__gdtoa+0x1732>
   2e986:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2e98a:	8b 40 18             	mov    0x18(%rax),%eax
   2e98d:	85 c0                	test   %eax,%eax
   2e98f:	74 0c                	je     2e99d <__gdtoa+0x173e>
					inex = STRTOG_Inexlo;
   2e991:	c7 85 44 ff ff ff 10 	movl   $0x10,-0xbc(%rbp)
   2e998:	00 00 00 
   2e99b:	eb 01                	jmp    2e99e <__gdtoa+0x173f>
 accept:
   2e99d:	90                   	nop
				*s++ = dig;
   2e99e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2e9a2:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2e9a6:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2e9aa:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
   2e9b0:	88 10                	mov    %dl,(%rax)
				goto ret;
   2e9b2:	e9 09 03 00 00       	jmpq   2ecc0 <__gdtoa+0x1a61>
				}
			if (j1 > 0 && rdir != 2) {
   2e9b7:	83 7d 88 00          	cmpl   $0x0,-0x78(%rbp)
   2e9bb:	7e 61                	jle    2ea1e <__gdtoa+0x17bf>
   2e9bd:	83 bd 60 ff ff ff 02 	cmpl   $0x2,-0xa0(%rbp)
   2e9c4:	74 58                	je     2ea1e <__gdtoa+0x17bf>
				if (dig == '9') { /* possible if i == 1 */
   2e9c6:	83 bd 34 ff ff ff 39 	cmpl   $0x39,-0xcc(%rbp)
   2e9cd:	75 27                	jne    2e9f6 <__gdtoa+0x1797>
 round_9_up:
   2e9cf:	eb 07                	jmp    2e9d8 <__gdtoa+0x1779>
					goto round_9_up;
   2e9d1:	90                   	nop
   2e9d2:	eb 04                	jmp    2e9d8 <__gdtoa+0x1779>
						goto round_9_up;
   2e9d4:	90                   	nop
   2e9d5:	eb 01                	jmp    2e9d8 <__gdtoa+0x1779>
						goto round_9_up;
   2e9d7:	90                   	nop
					*s++ = '9';
   2e9d8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2e9dc:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2e9e0:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2e9e4:	c6 00 39             	movb   $0x39,(%rax)
					inex = STRTOG_Inexhi;
   2e9e7:	c7 85 44 ff ff ff 20 	movl   $0x20,-0xbc(%rbp)
   2e9ee:	00 00 00 
					goto roundoff;
   2e9f1:	e9 3f 02 00 00       	jmpq   2ec35 <__gdtoa+0x19d6>
					}
				inex = STRTOG_Inexhi;
   2e9f6:	c7 85 44 ff ff ff 20 	movl   $0x20,-0xbc(%rbp)
   2e9fd:	00 00 00 
				*s++ = dig + 1;
   2ea00:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
   2ea06:	8d 48 01             	lea    0x1(%rax),%ecx
   2ea09:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2ea0d:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2ea11:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2ea15:	89 ca                	mov    %ecx,%edx
   2ea17:	88 10                	mov    %dl,(%rax)
				goto ret;
   2ea19:	e9 a2 02 00 00       	jmpq   2ecc0 <__gdtoa+0x1a61>
				}
			*s++ = dig;
   2ea1e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2ea22:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2ea26:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2ea2a:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
   2ea30:	88 10                	mov    %dl,(%rax)
			if (i == ilim)
   2ea32:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2ea38:	39 85 3c ff ff ff    	cmp    %eax,-0xc4(%rbp)
   2ea3e:	0f 84 56 01 00 00    	je     2eb9a <__gdtoa+0x193b>
				break;
			b = multadd(b, 10, 0);
   2ea44:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2ea48:	ba 00 00 00 00       	mov    $0x0,%edx
   2ea4d:	be 0a 00 00 00       	mov    $0xa,%esi
   2ea52:	48 89 c7             	mov    %rax,%rdi
   2ea55:	e8 4f d1 ff ff       	callq  2bba9 <__multadd_D2A>
   2ea5a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
			if (b == NULL)
   2ea5e:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   2ea63:	75 0a                	jne    2ea6f <__gdtoa+0x1810>
				return (NULL);
   2ea65:	b8 00 00 00 00       	mov    $0x0,%eax
   2ea6a:	e9 eb 02 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
			if (mlo == mhi) {
   2ea6f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2ea73:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
   2ea77:	75 33                	jne    2eaac <__gdtoa+0x184d>
				mlo = mhi = multadd(mhi, 10, 0);
   2ea79:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2ea7d:	ba 00 00 00 00       	mov    $0x0,%edx
   2ea82:	be 0a 00 00 00       	mov    $0xa,%esi
   2ea87:	48 89 c7             	mov    %rax,%rdi
   2ea8a:	e8 1a d1 ff ff       	callq  2bba9 <__multadd_D2A>
   2ea8f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
   2ea93:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2ea97:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				if (mlo == NULL)
   2ea9b:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2eaa0:	75 60                	jne    2eb02 <__gdtoa+0x18a3>
					return (NULL);
   2eaa2:	b8 00 00 00 00       	mov    $0x0,%eax
   2eaa7:	e9 ae 02 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
				}
			else {
				mlo = multadd(mlo, 10, 0);
   2eaac:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2eab0:	ba 00 00 00 00       	mov    $0x0,%edx
   2eab5:	be 0a 00 00 00       	mov    $0xa,%esi
   2eaba:	48 89 c7             	mov    %rax,%rdi
   2eabd:	e8 e7 d0 ff ff       	callq  2bba9 <__multadd_D2A>
   2eac2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				if (mlo == NULL)
   2eac6:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2eacb:	75 0a                	jne    2ead7 <__gdtoa+0x1878>
					return (NULL);
   2eacd:	b8 00 00 00 00       	mov    $0x0,%eax
   2ead2:	e9 83 02 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
				mhi = multadd(mhi, 10, 0);
   2ead7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2eadb:	ba 00 00 00 00       	mov    $0x0,%edx
   2eae0:	be 0a 00 00 00       	mov    $0xa,%esi
   2eae5:	48 89 c7             	mov    %rax,%rdi
   2eae8:	e8 bc d0 ff ff       	callq  2bba9 <__multadd_D2A>
   2eaed:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
				if (mhi == NULL)
   2eaf1:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2eaf6:	75 0a                	jne    2eb02 <__gdtoa+0x18a3>
					return (NULL);
   2eaf8:	b8 00 00 00 00       	mov    $0x0,%eax
   2eafd:	e9 58 02 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
		for(i = 1;;i++) {
   2eb02:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2eb08:	83 c0 01             	add    $0x1,%eax
   2eb0b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
			dig = quorem(b,S) + '0';
   2eb11:	e9 6e fb ff ff       	jmpq   2e684 <__gdtoa+0x1425>
				}
			}
		}
	else
		for(i = 1;; i++) {
   2eb16:	c7 85 28 ff ff ff 01 	movl   $0x1,-0xd8(%rbp)
   2eb1d:	00 00 00 
			*s++ = dig = quorem(b,S) + '0';
   2eb20:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2eb24:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2eb28:	48 89 d6             	mov    %rdx,%rsi
   2eb2b:	48 89 c7             	mov    %rax,%rdi
   2eb2e:	e8 30 a4 ff ff       	callq  28f63 <__quorem_D2A>
   2eb33:	83 c0 30             	add    $0x30,%eax
   2eb36:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
   2eb3c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2eb40:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2eb44:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2eb48:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
   2eb4e:	88 10                	mov    %dl,(%rax)
			if (i >= ilim)
   2eb50:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2eb56:	39 85 3c ff ff ff    	cmp    %eax,-0xc4(%rbp)
   2eb5c:	7e 3f                	jle    2eb9d <__gdtoa+0x193e>
				break;
			b = multadd(b, 10, 0);
   2eb5e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2eb62:	ba 00 00 00 00       	mov    $0x0,%edx
   2eb67:	be 0a 00 00 00       	mov    $0xa,%esi
   2eb6c:	48 89 c7             	mov    %rax,%rdi
   2eb6f:	e8 35 d0 ff ff       	callq  2bba9 <__multadd_D2A>
   2eb74:	48 89 45 90          	mov    %rax,-0x70(%rbp)
			if (b == NULL)
   2eb78:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   2eb7d:	75 0a                	jne    2eb89 <__gdtoa+0x192a>
				return (NULL);
   2eb7f:	b8 00 00 00 00       	mov    $0x0,%eax
   2eb84:	e9 d1 01 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
		for(i = 1;; i++) {
   2eb89:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2eb8f:	83 c0 01             	add    $0x1,%eax
   2eb92:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
			*s++ = dig = quorem(b,S) + '0';
   2eb98:	eb 86                	jmp    2eb20 <__gdtoa+0x18c1>
				break;
   2eb9a:	90                   	nop
   2eb9b:	eb 01                	jmp    2eb9e <__gdtoa+0x193f>
				break;
   2eb9d:	90                   	nop
			}

	/* Round off last digit */

	if (rdir) {
   2eb9e:	83 bd 60 ff ff ff 00 	cmpl   $0x0,-0xa0(%rbp)
   2eba5:	74 2a                	je     2ebd1 <__gdtoa+0x1972>
		if (rdir == 2 || (b->wds <= 1 && !b->x[0]))
   2eba7:	83 bd 60 ff ff ff 02 	cmpl   $0x2,-0xa0(%rbp)
   2ebae:	0f 84 d5 00 00 00    	je     2ec89 <__gdtoa+0x1a2a>
   2ebb4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2ebb8:	8b 40 14             	mov    0x14(%rax),%eax
   2ebbb:	83 f8 01             	cmp    $0x1,%eax
   2ebbe:	7f 71                	jg     2ec31 <__gdtoa+0x19d2>
   2ebc0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2ebc4:	8b 40 18             	mov    0x18(%rax),%eax
   2ebc7:	85 c0                	test   %eax,%eax
   2ebc9:	0f 84 ba 00 00 00    	je     2ec89 <__gdtoa+0x1a2a>
			goto chopzeros;
		goto roundoff;
   2ebcf:	eb 60                	jmp    2ec31 <__gdtoa+0x19d2>
		}
	b = lshift(b, 1);
   2ebd1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2ebd5:	be 01 00 00 00       	mov    $0x1,%esi
   2ebda:	48 89 c7             	mov    %rax,%rdi
   2ebdd:	e8 bb d6 ff ff       	callq  2c29d <__lshift_D2A>
   2ebe2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	if (b == NULL)
   2ebe6:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
   2ebeb:	75 0a                	jne    2ebf7 <__gdtoa+0x1998>
		return (NULL);
   2ebed:	b8 00 00 00 00       	mov    $0x0,%eax
   2ebf2:	e9 63 01 00 00       	jmpq   2ed5a <__gdtoa+0x1afb>
	j = cmp(b, S);
   2ebf7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
   2ebfb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2ebff:	48 89 d6             	mov    %rdx,%rsi
   2ec02:	48 89 c7             	mov    %rax,%rdi
   2ec05:	e8 1c d8 ff ff       	callq  2c426 <__cmp_D2A>
   2ec0a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
#ifdef ROUND_BIASED
	if (j >= 0)
#else
	if (j > 0 || (j == 0 && dig & 1))
   2ec10:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2ec17:	7f 1b                	jg     2ec34 <__gdtoa+0x19d5>
   2ec19:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
   2ec20:	75 67                	jne    2ec89 <__gdtoa+0x1a2a>
   2ec22:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
   2ec28:	83 e0 01             	and    $0x1,%eax
   2ec2b:	85 c0                	test   %eax,%eax
   2ec2d:	74 5a                	je     2ec89 <__gdtoa+0x1a2a>
#endif
		{
 roundoff:
   2ec2f:	eb 03                	jmp    2ec34 <__gdtoa+0x19d5>
		goto roundoff;
   2ec31:	90                   	nop
   2ec32:	eb 01                	jmp    2ec35 <__gdtoa+0x19d6>
 roundoff:
   2ec34:	90                   	nop
		inex = STRTOG_Inexhi;
   2ec35:	c7 85 44 ff ff ff 20 	movl   $0x20,-0xbc(%rbp)
   2ec3c:	00 00 00 
		while(*--s == '9')
   2ec3f:	eb 22                	jmp    2ec63 <__gdtoa+0x1a04>
			if (s == s0) {
   2ec41:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2ec45:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
   2ec49:	75 18                	jne    2ec63 <__gdtoa+0x1a04>
				k++;
   2ec4b:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)
				*s++ = '1';
   2ec52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2ec56:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2ec5a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2ec5e:	c6 00 31             	movb   $0x31,(%rax)
				goto ret;
   2ec61:	eb 5d                	jmp    2ecc0 <__gdtoa+0x1a61>
		while(*--s == '9')
   2ec63:	48 83 6d b8 01       	subq   $0x1,-0x48(%rbp)
   2ec68:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2ec6c:	0f b6 00             	movzbl (%rax),%eax
   2ec6f:	3c 39                	cmp    $0x39,%al
   2ec71:	74 ce                	je     2ec41 <__gdtoa+0x19e2>
				}
		++*s++;
   2ec73:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2ec77:	48 8d 50 01          	lea    0x1(%rax),%rdx
   2ec7b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
   2ec7f:	0f b6 10             	movzbl (%rax),%edx
   2ec82:	83 c2 01             	add    $0x1,%edx
   2ec85:	88 10                	mov    %dl,(%rax)
   2ec87:	eb 37                	jmp    2ecc0 <__gdtoa+0x1a61>
		}
	else {
 chopzeros:
   2ec89:	90                   	nop
		if (b->wds > 1 || b->x[0])
   2ec8a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2ec8e:	8b 40 14             	mov    0x14(%rax),%eax
   2ec91:	83 f8 01             	cmp    $0x1,%eax
   2ec94:	7f 0b                	jg     2eca1 <__gdtoa+0x1a42>
   2ec96:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2ec9a:	8b 40 18             	mov    0x18(%rax),%eax
   2ec9d:	85 c0                	test   %eax,%eax
   2ec9f:	74 0a                	je     2ecab <__gdtoa+0x1a4c>
			inex = STRTOG_Inexlo;
   2eca1:	c7 85 44 ff ff ff 10 	movl   $0x10,-0xbc(%rbp)
   2eca8:	00 00 00 
		while(*--s == '0'){}
   2ecab:	48 83 6d b8 01       	subq   $0x1,-0x48(%rbp)
   2ecb0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2ecb4:	0f b6 00             	movzbl (%rax),%eax
   2ecb7:	3c 30                	cmp    $0x30,%al
   2ecb9:	74 f0                	je     2ecab <__gdtoa+0x1a4c>
		++s;
   2ecbb:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
		}
 ret:
	Bfree(S);
   2ecc0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
   2ecc4:	48 89 c7             	mov    %rax,%rdi
   2ecc7:	e8 6f cd ff ff       	callq  2ba3b <__Bfree_D2A>
	if (mhi) {
   2eccc:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
   2ecd1:	74 2b                	je     2ecfe <__gdtoa+0x1a9f>
		if (mlo && mlo != mhi)
   2ecd3:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
   2ecd8:	74 16                	je     2ecf0 <__gdtoa+0x1a91>
   2ecda:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2ecde:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
   2ece2:	74 0c                	je     2ecf0 <__gdtoa+0x1a91>
			Bfree(mlo);
   2ece4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
   2ece8:	48 89 c7             	mov    %rax,%rdi
   2eceb:	e8 4b cd ff ff       	callq  2ba3b <__Bfree_D2A>
		Bfree(mhi);
   2ecf0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
   2ecf4:	48 89 c7             	mov    %rax,%rdi
   2ecf7:	e8 3f cd ff ff       	callq  2ba3b <__Bfree_D2A>
   2ecfc:	eb 01                	jmp    2ecff <__gdtoa+0x1aa0>
		}
 ret1:
   2ecfe:	90                   	nop
	Bfree(b);
   2ecff:	48 8b 45 90          	mov    -0x70(%rbp),%rax
   2ed03:	48 89 c7             	mov    %rax,%rdi
   2ed06:	e8 30 cd ff ff       	callq  2ba3b <__Bfree_D2A>
	*s = 0;
   2ed0b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
   2ed0f:	c6 00 00             	movb   $0x0,(%rax)
	*decpt = k + 1;
   2ed12:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
   2ed18:	8d 50 01             	lea    0x1(%rax),%edx
   2ed1b:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
   2ed22:	89 10                	mov    %edx,(%rax)
	if (rve)
   2ed24:	48 83 bd e8 fe ff ff 	cmpq   $0x0,-0x118(%rbp)
   2ed2b:	00 
   2ed2c:	74 0e                	je     2ed3c <__gdtoa+0x1add>
		*rve = s;
   2ed2e:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   2ed35:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
   2ed39:	48 89 10             	mov    %rdx,(%rax)
	*kindp |= inex;
   2ed3c:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   2ed43:	8b 00                	mov    (%rax),%eax
   2ed45:	0b 85 44 ff ff ff    	or     -0xbc(%rbp),%eax
   2ed4b:	89 c2                	mov    %eax,%edx
   2ed4d:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   2ed54:	89 10                	mov    %edx,(%rax)
	return s0;
   2ed56:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
	}
   2ed5a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   2ed5e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   2ed65:	00 00 
   2ed67:	74 05                	je     2ed6e <__gdtoa+0x1b0f>
   2ed69:	e8 2a 62 fd ff       	callq  4f98 <__stack_chk_fail>
   2ed6e:	c9                   	leaveq 
   2ed6f:	c3                   	retq   

000000000002ed70 <__rshift_D2A>:
#ifdef KR_headers
rshift(b, k) Bigint *b; int k;
#else
rshift(Bigint *b, int k)
#endif
{
   2ed70:	55                   	push   %rbp
   2ed71:	48 89 e5             	mov    %rsp,%rbp
   2ed74:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2ed78:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	ULong *x, *x1, *xe, y;
	int n;

	x = x1 = b->x;
   2ed7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2ed7f:	48 83 c0 18          	add    $0x18,%rax
   2ed83:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   2ed87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ed8b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	n = k >> kshift;
   2ed8f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2ed92:	c1 f8 05             	sar    $0x5,%eax
   2ed95:	89 45 e4             	mov    %eax,-0x1c(%rbp)
	if (n < b->wds) {
   2ed98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2ed9c:	8b 40 14             	mov    0x14(%rax),%eax
   2ed9f:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
   2eda2:	0f 8d e4 00 00 00    	jge    2ee8c <__rshift_D2A+0x11c>
		xe = x + b->wds;
   2eda8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2edac:	8b 40 14             	mov    0x14(%rax),%eax
   2edaf:	48 98                	cltq   
   2edb1:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2edb8:	00 
   2edb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2edbd:	48 01 d0             	add    %rdx,%rax
   2edc0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		x += n;
   2edc4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2edc7:	48 98                	cltq   
   2edc9:	48 c1 e0 02          	shl    $0x2,%rax
   2edcd:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		if (k &= kmask) {
   2edd1:	83 65 d4 1f          	andl   $0x1f,-0x2c(%rbp)
   2edd5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
   2edd9:	0f 84 a3 00 00 00    	je     2ee82 <__rshift_D2A+0x112>
			n = ULbits - k;
   2eddf:	b8 20 00 00 00       	mov    $0x20,%eax
   2ede4:	2b 45 d4             	sub    -0x2c(%rbp),%eax
   2ede7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			y = *x++ >> k;
   2edea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2edee:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2edf2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2edf6:	8b 10                	mov    (%rax),%edx
   2edf8:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2edfb:	89 c1                	mov    %eax,%ecx
   2edfd:	d3 ea                	shr    %cl,%edx
   2edff:	89 d0                	mov    %edx,%eax
   2ee01:	89 45 e0             	mov    %eax,-0x20(%rbp)
			while(x < xe) {
   2ee04:	eb 3c                	jmp    2ee42 <__rshift_D2A+0xd2>
				*x1++ = (y | (*x << n)) & ALL_ON;
   2ee06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ee0a:	8b 10                	mov    (%rax),%edx
   2ee0c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
   2ee0f:	89 c1                	mov    %eax,%ecx
   2ee11:	d3 e2                	shl    %cl,%edx
   2ee13:	89 d1                	mov    %edx,%ecx
   2ee15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ee19:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2ee1d:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
   2ee21:	0b 4d e0             	or     -0x20(%rbp),%ecx
   2ee24:	89 ca                	mov    %ecx,%edx
   2ee26:	89 10                	mov    %edx,(%rax)
				y = *x++ >> k;
   2ee28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ee2c:	48 8d 50 04          	lea    0x4(%rax),%rdx
   2ee30:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
   2ee34:	8b 10                	mov    (%rax),%edx
   2ee36:	8b 45 d4             	mov    -0x2c(%rbp),%eax
   2ee39:	89 c1                	mov    %eax,%ecx
   2ee3b:	d3 ea                	shr    %cl,%edx
   2ee3d:	89 d0                	mov    %edx,%eax
   2ee3f:	89 45 e0             	mov    %eax,-0x20(%rbp)
			while(x < xe) {
   2ee42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ee46:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2ee4a:	72 ba                	jb     2ee06 <__rshift_D2A+0x96>
				}
			if ((*x1 = y) !=0)
   2ee4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ee50:	8b 55 e0             	mov    -0x20(%rbp),%edx
   2ee53:	89 10                	mov    %edx,(%rax)
   2ee55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ee59:	8b 00                	mov    (%rax),%eax
   2ee5b:	85 c0                	test   %eax,%eax
   2ee5d:	74 2d                	je     2ee8c <__rshift_D2A+0x11c>
				x1++;
   2ee5f:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
   2ee64:	eb 26                	jmp    2ee8c <__rshift_D2A+0x11c>
			}
		else
			while(x < xe)
				*x1++ = *x++;
   2ee66:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2ee6a:	48 8d 42 04          	lea    0x4(%rdx),%rax
   2ee6e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
   2ee72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ee76:	48 8d 48 04          	lea    0x4(%rax),%rcx
   2ee7a:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   2ee7e:	8b 12                	mov    (%rdx),%edx
   2ee80:	89 10                	mov    %edx,(%rax)
			while(x < xe)
   2ee82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ee86:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
   2ee8a:	72 da                	jb     2ee66 <__rshift_D2A+0xf6>
		}
	if ((b->wds = x1 - b->x) == 0)
   2ee8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2ee90:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   2ee94:	48 83 c2 18          	add    $0x18,%rdx
   2ee98:	48 29 d0             	sub    %rdx,%rax
   2ee9b:	48 c1 f8 02          	sar    $0x2,%rax
   2ee9f:	89 c2                	mov    %eax,%edx
   2eea1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2eea5:	89 50 14             	mov    %edx,0x14(%rax)
   2eea8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2eeac:	8b 40 14             	mov    0x14(%rax),%eax
   2eeaf:	85 c0                	test   %eax,%eax
   2eeb1:	75 0b                	jne    2eebe <__rshift_D2A+0x14e>
		b->x[0] = 0;
   2eeb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2eeb7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
	}
   2eebe:	90                   	nop
   2eebf:	5d                   	pop    %rbp
   2eec0:	c3                   	retq   

000000000002eec1 <__trailz_D2A>:
#ifdef KR_headers
trailz(b) Bigint *b;
#else
trailz(Bigint *b)
#endif
{
   2eec1:	55                   	push   %rbp
   2eec2:	48 89 e5             	mov    %rsp,%rbp
   2eec5:	48 83 ec 30          	sub    $0x30,%rsp
   2eec9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   2eecd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   2eed4:	00 00 
   2eed6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   2eeda:	31 c0                	xor    %eax,%eax
	ULong L, *x, *xe;
	int n = 0;
   2eedc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)

	x = b->x;
   2eee3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2eee7:	48 83 c0 18          	add    $0x18,%rax
   2eeeb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	xe = x + b->wds;
   2eeef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2eef3:	8b 40 14             	mov    0x14(%rax),%eax
   2eef6:	48 98                	cltq   
   2eef8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
   2eeff:	00 
   2ef00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ef04:	48 01 d0             	add    %rdx,%rax
   2ef07:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for(n = 0; x < xe && !*x; x++)
   2ef0b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
   2ef12:	eb 09                	jmp    2ef1d <__trailz_D2A+0x5c>
		n += ULbits;
   2ef14:	83 45 e4 20          	addl   $0x20,-0x1c(%rbp)
	for(n = 0; x < xe && !*x; x++)
   2ef18:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
   2ef1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ef21:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   2ef25:	73 0a                	jae    2ef31 <__trailz_D2A+0x70>
   2ef27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ef2b:	8b 00                	mov    (%rax),%eax
   2ef2d:	85 c0                	test   %eax,%eax
   2ef2f:	74 e3                	je     2ef14 <__trailz_D2A+0x53>
	if (x < xe) {
   2ef31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ef35:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
   2ef39:	73 18                	jae    2ef53 <__trailz_D2A+0x92>
		L = *x;
   2ef3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2ef3f:	8b 00                	mov    (%rax),%eax
   2ef41:	89 45 e0             	mov    %eax,-0x20(%rbp)
		n += lo0bits(&L);
   2ef44:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
   2ef48:	48 89 c7             	mov    %rax,%rdi
   2ef4b:	e8 76 cb ff ff       	callq  2bac6 <__lo0bits_D2A>
   2ef50:	01 45 e4             	add    %eax,-0x1c(%rbp)
		}
	return n;
   2ef53:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
   2ef56:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
   2ef5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
   2ef61:	00 00 
   2ef63:	74 05                	je     2ef6a <__trailz_D2A+0xa9>
   2ef65:	e8 2e 60 fd ff       	callq  4f98 <__stack_chk_fail>
   2ef6a:	c9                   	leaveq 
   2ef6b:	c3                   	retq   

000000000002ef6c <tcrypto_access_version_dummy1>:
#include "ippcp.h"
#include "se_cpu_feature.h"
#include "se_cdefs.h"

// add a version to tcrypto.
SGX_ACCESS_VERSION(tcrypto, 1)
   2ef6c:	55                   	push   %rbp
   2ef6d:	48 89 e5             	mov    %rsp,%rbp
   2ef70:	c6 05 49 69 20 00 73 	movb   $0x73,0x206949(%rip)        # 2358c0 <sgx_tcrypto_version>
   2ef77:	48 8d 05 42 69 20 00 	lea    0x206942(%rip),%rax        # 2358c0 <sgx_tcrypto_version>
   2ef7e:	5d                   	pop    %rbp
   2ef7f:	c3                   	retq   

000000000002ef80 <sgx_init_crypto_lib>:
/* Crypto Library Initialization
* Parameters:
* 	Return: sgx_status_t  - SGX_SUCCESS or failure as defined sgx_error.h
*	Inputs: uint64_t cpu_feature_indicator - Bit array of host CPU feature bits */
extern "C" sgx_status_t sgx_init_crypto_lib(uint64_t cpu_feature_indicator, uint32_t *cpuid_table)
{
   2ef80:	55                   	push   %rbp
   2ef81:	48 89 e5             	mov    %rsp,%rbp
   2ef84:	48 83 ec 10          	sub    $0x10,%rsp
   2ef88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   2ef8c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    (void)(cpuid_table);

    return init_ipp_cpuid(cpu_feature_indicator);
   2ef90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2ef94:	48 89 c7             	mov    %rax,%rdi
   2ef97:	e8 02 00 00 00       	callq  2ef9e <init_ipp_cpuid>
}
   2ef9c:	c9                   	leaveq 
   2ef9d:	c3                   	retq   

000000000002ef9e <init_ipp_cpuid>:
/* IPP library Initialization
* Parameters:
* 	Return: sgx_status_t  - SGX_SUCCESS or failure as defined sgx_error.h
*	Inputs: uint64_t cpu_feature_indicator - Bit array of host CPU feature bits */
extern "C" sgx_status_t init_ipp_cpuid(uint64_t cpu_feature_indicator)
{
   2ef9e:	55                   	push   %rbp
   2ef9f:	48 89 e5             	mov    %rsp,%rbp
   2efa2:	48 83 ec 20          	sub    $0x20,%rsp
   2efa6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    IppStatus error_code = ippStsNoOperation;
   2efaa:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
    if (ippcpSetCpuFeatures == NULL) {
   2efb1:	48 8b 05 30 60 20 00 	mov    0x206030(%rip),%rax        # 234fe8 <ippcpSetCpuFeatures>
   2efb8:	48 85 c0             	test   %rax,%rax
   2efbb:	75 0a                	jne    2efc7 <init_ipp_cpuid+0x29>
        return SGX_SUCCESS;
   2efbd:	b8 00 00 00 00       	mov    $0x0,%eax
   2efc2:	e9 81 02 00 00       	jmpq   2f248 <init_ipp_cpuid+0x2aa>
    //       1. AVX2
    //       2. SSE4.1
    //  We set SSE4.1 as the baseline.
    // Set the IPP feature bits based on host attributes that have been collected
    // NOTE: Some sanity check
    Ipp64u ippCpuFeatures = 0;
   2efc7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
   2efce:	00 
    if ((cpu_feature_indicator & CPU_FEATURE_SSE4_1) == CPU_FEATURE_SSE4_1)
   2efcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2efd3:	25 00 02 00 00       	and    $0x200,%eax
   2efd8:	48 85 c0             	test   %rax,%rax
   2efdb:	0f 84 31 02 00 00    	je     2f212 <init_ipp_cpuid+0x274>
    {
        // Some sanity checking has been performed when setting the feature mask
        // If SSE4.1 is set, then all earlier SSE/MMX ISA enhancements are available
        ippCpuFeatures |= (ippCPUID_SSE41 | ippCPUID_MMX | ippCPUID_SSE |
   2efe1:	48 83 4d f8 5f       	orq    $0x5f,-0x8(%rbp)
            ippCPUID_SSE2 | ippCPUID_SSE3 | ippCPUID_SSSE3);
        if ((cpu_feature_indicator & CPU_FEATURE_MOVBE) == CPU_FEATURE_MOVBE)
   2efe6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2efea:	25 00 08 00 00       	and    $0x800,%eax
   2efef:	48 85 c0             	test   %rax,%rax
   2eff2:	74 05                	je     2eff9 <init_ipp_cpuid+0x5b>
        {
            ippCpuFeatures |= ippCPUID_MOVBE;
   2eff4:	48 83 4d f8 20       	orq    $0x20,-0x8(%rbp)
        }
        if ((cpu_feature_indicator & CPU_FEATURE_SSE4_2) == CPU_FEATURE_SSE4_2)
   2eff9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2effd:	25 00 04 00 00       	and    $0x400,%eax
   2f002:	48 85 c0             	test   %rax,%rax
   2f005:	74 08                	je     2f00f <init_ipp_cpuid+0x71>
        {
            ippCpuFeatures |= ippCPUID_SSE42;
   2f007:	48 81 4d f8 80 00 00 	orq    $0x80,-0x8(%rbp)
   2f00e:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX) == CPU_FEATURE_AVX)
   2f00f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f013:	25 00 00 01 00       	and    $0x10000,%eax
   2f018:	48 85 c0             	test   %rax,%rax
   2f01b:	74 10                	je     2f02d <init_ipp_cpuid+0x8f>
        {
            ippCpuFeatures |= ippCPUID_AVX;
   2f01d:	48 81 4d f8 00 01 00 	orq    $0x100,-0x8(%rbp)
   2f024:	00 
            ippCpuFeatures |= ippAVX_ENABLEDBYOS;
   2f025:	48 81 4d f8 00 02 00 	orq    $0x200,-0x8(%rbp)
   2f02c:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AES) == CPU_FEATURE_AES)
   2f02d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f031:	25 00 40 00 00       	and    $0x4000,%eax
   2f036:	48 85 c0             	test   %rax,%rax
   2f039:	74 08                	je     2f043 <init_ipp_cpuid+0xa5>
        {
            ippCpuFeatures |= ippCPUID_AES;
   2f03b:	48 81 4d f8 00 04 00 	orq    $0x400,-0x8(%rbp)
   2f042:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_PCLMULQDQ) == CPU_FEATURE_PCLMULQDQ)
   2f043:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f047:	25 00 20 00 00       	and    $0x2000,%eax
   2f04c:	48 85 c0             	test   %rax,%rax
   2f04f:	74 08                	je     2f059 <init_ipp_cpuid+0xbb>
        {
            ippCpuFeatures |= ippCPUID_CLMUL;
   2f051:	48 81 4d f8 00 08 00 	orq    $0x800,-0x8(%rbp)
   2f058:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_RDRND) == CPU_FEATURE_RDRND)
   2f059:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f05d:	25 00 00 02 00       	and    $0x20000,%eax
   2f062:	48 85 c0             	test   %rax,%rax
   2f065:	74 08                	je     2f06f <init_ipp_cpuid+0xd1>
        {
            ippCpuFeatures |= ippCPUID_RDRAND;
   2f067:	48 81 4d f8 00 20 00 	orq    $0x2000,-0x8(%rbp)
   2f06e:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_F16C) == CPU_FEATURE_F16C)
   2f06f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f073:	25 00 80 00 00       	and    $0x8000,%eax
   2f078:	48 85 c0             	test   %rax,%rax
   2f07b:	74 08                	je     2f085 <init_ipp_cpuid+0xe7>
        {
            ippCpuFeatures |= ippCPUID_F16C;
   2f07d:	48 81 4d f8 00 40 00 	orq    $0x4000,-0x8(%rbp)
   2f084:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX2) == CPU_FEATURE_AVX2)
   2f085:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f089:	25 00 00 80 00       	and    $0x800000,%eax
   2f08e:	48 85 c0             	test   %rax,%rax
   2f091:	74 08                	je     2f09b <init_ipp_cpuid+0xfd>
        {
            ippCpuFeatures |= ippCPUID_AVX2;
   2f093:	48 81 4d f8 00 80 00 	orq    $0x8000,-0x8(%rbp)
   2f09a:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_ADX) == CPU_FEATURE_ADX)
   2f09b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f09f:	25 00 00 00 10       	and    $0x10000000,%eax
   2f0a4:	48 85 c0             	test   %rax,%rax
   2f0a7:	74 08                	je     2f0b1 <init_ipp_cpuid+0x113>
        {
            ippCpuFeatures |= ippCPUID_ADCOX;
   2f0a9:	48 81 4d f8 00 00 01 	orq    $0x10000,-0x8(%rbp)
   2f0b0:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_RDSEED) == CPU_FEATURE_RDSEED)
   2f0b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f0b5:	25 00 00 00 20       	and    $0x20000000,%eax
   2f0ba:	48 85 c0             	test   %rax,%rax
   2f0bd:	74 08                	je     2f0c7 <init_ipp_cpuid+0x129>
        {
            ippCpuFeatures |= ippCPUID_RDSEED;
   2f0bf:	48 81 4d f8 00 00 02 	orq    $0x20000,-0x8(%rbp)
   2f0c6:	00 
        }
	if ((cpu_feature_indicator & CPU_FEATURE_SHA) == CPU_FEATURE_SHA)
   2f0c7:	48 b8 00 00 00 00 08 	movabs $0x800000000,%rax
   2f0ce:	00 00 00 
   2f0d1:	48 23 45 e8          	and    -0x18(%rbp),%rax
   2f0d5:	48 85 c0             	test   %rax,%rax
   2f0d8:	74 08                	je     2f0e2 <init_ipp_cpuid+0x144>
        {
            ippCpuFeatures |= ippCPUID_SHA;
   2f0da:	48 81 4d f8 00 00 08 	orq    $0x80000,-0x8(%rbp)
   2f0e1:	00 
        }
        
	// AVX512
        if ((cpu_feature_indicator & CPU_FEATURE_AVX512F) == CPU_FEATURE_AVX512F)
   2f0e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f0e6:	25 00 00 00 08       	and    $0x8000000,%eax
   2f0eb:	48 85 c0             	test   %rax,%rax
   2f0ee:	74 16                	je     2f106 <init_ipp_cpuid+0x168>
        {
            ippCpuFeatures |= ippCPUID_AVX512F;
   2f0f0:	48 81 4d f8 00 00 10 	orq    $0x100000,-0x8(%rbp)
   2f0f7:	00 
            ippCpuFeatures |= ippAVX512_ENABLEDBYOS;
   2f0f8:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
   2f0ff:	00 00 00 
   2f102:	48 09 45 f8          	or     %rax,-0x8(%rbp)
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX512PF) == CPU_FEATURE_AVX512PF)
   2f106:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
   2f10d:	00 00 00 
   2f110:	48 23 45 e8          	and    -0x18(%rbp),%rax
   2f114:	48 85 c0             	test   %rax,%rax
   2f117:	74 08                	je     2f121 <init_ipp_cpuid+0x183>
        {
            ippCpuFeatures |= ippCPUID_AVX512PF;
   2f119:	48 81 4d f8 00 00 80 	orq    $0x800000,-0x8(%rbp)
   2f120:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX512ER) == CPU_FEATURE_AVX512ER)
   2f121:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
   2f128:	00 00 00 
   2f12b:	48 23 45 e8          	and    -0x18(%rbp),%rax
   2f12f:	48 85 c0             	test   %rax,%rax
   2f132:	74 08                	je     2f13c <init_ipp_cpuid+0x19e>
        {
            ippCpuFeatures |= ippCPUID_AVX512ER;
   2f134:	48 81 4d f8 00 00 40 	orq    $0x400000,-0x8(%rbp)
   2f13b:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX512CD) == CPU_FEATURE_AVX512CD)
   2f13c:	48 b8 00 00 00 00 04 	movabs $0x400000000,%rax
   2f143:	00 00 00 
   2f146:	48 23 45 e8          	and    -0x18(%rbp),%rax
   2f14a:	48 85 c0             	test   %rax,%rax
   2f14d:	74 08                	je     2f157 <init_ipp_cpuid+0x1b9>
        {
            ippCpuFeatures |= ippCPUID_AVX512CD;
   2f14f:	48 81 4d f8 00 00 20 	orq    $0x200000,-0x8(%rbp)
   2f156:	00 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX512DQ) == CPU_FEATURE_AVX512DQ)
   2f157:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f15b:	25 00 00 00 01       	and    $0x1000000,%eax
   2f160:	48 85 c0             	test   %rax,%rax
   2f163:	74 08                	je     2f16d <init_ipp_cpuid+0x1cf>
        {
            ippCpuFeatures |= ippCPUID_AVX512DQ;
   2f165:	48 81 4d f8 00 00 00 	orq    $0x2000000,-0x8(%rbp)
   2f16c:	02 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX512BW) == CPU_FEATURE_AVX512BW)
   2f16d:	48 b8 00 00 00 00 20 	movabs $0x2000000000,%rax
   2f174:	00 00 00 
   2f177:	48 23 45 e8          	and    -0x18(%rbp),%rax
   2f17b:	48 85 c0             	test   %rax,%rax
   2f17e:	74 08                	je     2f188 <init_ipp_cpuid+0x1ea>
        {
            ippCpuFeatures |= ippCPUID_AVX512BW;
   2f180:	48 81 4d f8 00 00 00 	orq    $0x1000000,-0x8(%rbp)
   2f187:	01 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX512VL) == CPU_FEATURE_AVX512VL)
   2f188:	48 b8 00 00 00 00 40 	movabs $0x4000000000,%rax
   2f18f:	00 00 00 
   2f192:	48 23 45 e8          	and    -0x18(%rbp),%rax
   2f196:	48 85 c0             	test   %rax,%rax
   2f199:	74 08                	je     2f1a3 <init_ipp_cpuid+0x205>
        {
            ippCpuFeatures |= ippCPUID_AVX512VL;
   2f19b:	48 81 4d f8 00 00 00 	orq    $0x4000000,-0x8(%rbp)
   2f1a2:	04 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX512VBMI) == CPU_FEATURE_AVX512VBMI)
   2f1a3:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
   2f1aa:	00 00 00 
   2f1ad:	48 23 45 e8          	and    -0x18(%rbp),%rax
   2f1b1:	48 85 c0             	test   %rax,%rax
   2f1b4:	74 08                	je     2f1be <init_ipp_cpuid+0x220>
        {
            ippCpuFeatures |= ippCPUID_AVX512VBMI;
   2f1b6:	48 81 4d f8 00 00 00 	orq    $0x8000000,-0x8(%rbp)
   2f1bd:	08 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX512_4VNNIW) == CPU_FEATURE_AVX512_4VNNIW)
   2f1be:	48 b8 00 00 00 00 00 	movabs $0x20000000000,%rax
   2f1c5:	02 00 00 
   2f1c8:	48 23 45 e8          	and    -0x18(%rbp),%rax
   2f1cc:	48 85 c0             	test   %rax,%rax
   2f1cf:	74 08                	je     2f1d9 <init_ipp_cpuid+0x23b>
        {
            ippCpuFeatures |= ippCPUID_AVX512_4VNNIW;
   2f1d1:	48 81 4d f8 00 00 00 	orq    $0x40000000,-0x8(%rbp)
   2f1d8:	40 
        }
        if ((cpu_feature_indicator & CPU_FEATURE_AVX512_4FMAPS) == CPU_FEATURE_AVX512_4FMAPS)
   2f1d9:	48 b8 00 00 00 00 00 	movabs $0x10000000000,%rax
   2f1e0:	01 00 00 
   2f1e3:	48 23 45 e8          	and    -0x18(%rbp),%rax
   2f1e7:	48 85 c0             	test   %rax,%rax
   2f1ea:	74 08                	je     2f1f4 <init_ipp_cpuid+0x256>
        {
            ippCpuFeatures |= ippCPUID_AVX512_4FMADDPS;
   2f1ec:	48 81 4d f8 00 00 00 	orq    $0x20000000,-0x8(%rbp)
   2f1f3:	20 
        }

        if ((cpu_feature_indicator & CPU_FEATURE_AVX512IFMA52) == CPU_FEATURE_AVX512IFMA52)
   2f1f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   2f1f8:	25 00 00 00 40       	and    $0x40000000,%eax
   2f1fd:	48 85 c0             	test   %rax,%rax
   2f200:	74 17                	je     2f219 <init_ipp_cpuid+0x27b>
        {
            ippCpuFeatures |= ippCPUID_AVX512IFMA;
   2f202:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
   2f209:	00 00 00 
   2f20c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
   2f210:	eb 07                	jmp    2f219 <init_ipp_cpuid+0x27b>
        }
    }
    else
    {
        // Return error if the old platoform has no SSE4.1
        return SGX_ERROR_INVALID_PARAMETER;
   2f212:	b8 02 00 00 00       	mov    $0x2,%eax
   2f217:	eb 2f                	jmp    2f248 <init_ipp_cpuid+0x2aa>

    }

    // Call SetCpuFeatures() to set the IPP library with the collected CPU features
    ippCpuFeatures |= ippCPUID_NOCHECK; /* Force ippcpSetCpuFeatures to set CPU features without check */
   2f219:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
   2f220:	00 00 80 
   2f223:	48 09 45 f8          	or     %rax,-0x8(%rbp)
    error_code = ippcpSetCpuFeatures(ippCpuFeatures);
   2f227:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2f22b:	48 89 c7             	mov    %rax,%rdi
   2f22e:	e8 25 14 fd ff       	callq  658 <ippcpSetCpuFeatures@plt>
   2f233:	89 45 f4             	mov    %eax,-0xc(%rbp)

    if (error_code != ippStsNoErr)
   2f236:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
   2f23a:	74 07                	je     2f243 <init_ipp_cpuid+0x2a5>
    {
        return SGX_ERROR_INVALID_PARAMETER;
   2f23c:	b8 02 00 00 00       	mov    $0x2,%eax
   2f241:	eb 05                	jmp    2f248 <init_ipp_cpuid+0x2aa>
    }
    return SGX_SUCCESS;
   2f243:	b8 00 00 00 00       	mov    $0x0,%eax
}
   2f248:	c9                   	leaveq 
   2f249:	c3                   	retq   

000000000002f24a <tservice_access_version_dummy1>:
#include "sgx_trts.h"
#include "trts_inst.h"
#include "se_cdefs.h"

// add a version to tservice.
SGX_ACCESS_VERSION(tservice, 1)
   2f24a:	55                   	push   %rbp
   2f24b:	48 89 e5             	mov    %rsp,%rbp
   2f24e:	c6 05 ab 66 20 00 73 	movb   $0x73,0x2066ab(%rip)        # 235900 <sgx_tservice_version>
   2f255:	48 8d 05 a4 66 20 00 	lea    0x2066a4(%rip),%rax        # 235900 <sgx_tservice_version>
   2f25c:	5d                   	pop    %rbp
   2f25d:	c3                   	retq   

000000000002f25e <sgx_create_report>:

extern "C" void * __memset(void *dst, int c, size_t n);

sgx_status_t sgx_create_report(const sgx_target_info_t *target_info, const sgx_report_data_t *report_data, sgx_report_t *report)
{
   2f25e:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
   2f263:	48 81 e4 00 fe ff ff 	and    $0xfffffffffffffe00,%rsp
   2f26a:	41 ff 72 f8          	pushq  -0x8(%r10)
   2f26e:	55                   	push   %rbp
   2f26f:	48 89 e5             	mov    %rsp,%rbp
   2f272:	41 52                	push   %r10
   2f274:	48 81 ec e8 09 00 00 	sub    $0x9e8,%rsp
   2f27b:	48 89 bd 78 f7 ff ff 	mov    %rdi,-0x888(%rbp)
   2f282:	48 89 b5 70 f7 ff ff 	mov    %rsi,-0x890(%rbp)
   2f289:	48 89 95 68 f7 ff ff 	mov    %rdx,-0x898(%rbp)
   2f290:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   2f297:	00 00 
   2f299:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
   2f2a0:	31 c0                	xor    %eax,%eax
    static_assert(sizeof(*target_info) == 512, "sgx_target_info_t");
    static_assert(sizeof(*report_data) == 64, "sgx_report_data_t");
    static_assert(sizeof(*report) == 432, "sgx_report_t");

    alignas(REPORT_DATA_ALIGN_SIZE) sgx_report_data_t tmp_report_data;
    __memset((void *)&tmp_report_data, 0, sizeof(sgx_report_data_t));
   2f2a2:	48 8d 85 90 f7 ff ff 	lea    -0x870(%rbp),%rax
   2f2a9:	ba 40 00 00 00       	mov    $0x40,%edx
   2f2ae:	be 00 00 00 00       	mov    $0x0,%esi
   2f2b3:	48 89 c7             	mov    %rax,%rdi
   2f2b6:	e8 5c f5 fd ff       	callq  e817 <__memset>
    alignas(TARGET_INFO_ALIGN_SIZE) sgx_target_info_t tmp_target_info;
    __memset((void *)&tmp_target_info, 0, sizeof(sgx_target_info_t));    
   2f2bb:	48 8d 85 10 fa ff ff 	lea    -0x5f0(%rbp),%rax
   2f2c2:	ba 00 02 00 00       	mov    $0x200,%edx
   2f2c7:	be 00 00 00 00       	mov    $0x0,%esi
   2f2cc:	48 89 c7             	mov    %rax,%rdi
   2f2cf:	e8 43 f5 fd ff       	callq  e817 <__memset>
    alignas(REPORT_ALIGN_SIZE)sgx_report_t tmp_report;
    __memset((void *)&tmp_report, 0, sizeof(sgx_report_t));
   2f2d4:	48 8d 85 10 f8 ff ff 	lea    -0x7f0(%rbp),%rax
   2f2db:	ba b0 01 00 00       	mov    $0x1b0,%edx
   2f2e0:	be 00 00 00 00       	mov    $0x0,%esi
   2f2e5:	48 89 c7             	mov    %rax,%rdi
   2f2e8:	e8 2a f5 fd ff       	callq  e817 <__memset>

    // check parameters
    //
    // target_info is allowed to be NULL, but if it is not NULL, it must be within the enclave
    if(target_info)
   2f2ed:	48 83 bd 78 f7 ff ff 	cmpq   $0x0,-0x888(%rbp)
   2f2f4:	00 
   2f2f5:	74 46                	je     2f33d <sgx_create_report+0xdf>
    {
        if (!sgx_is_within_enclave(target_info, sizeof(*target_info)))
   2f2f7:	48 8b 85 78 f7 ff ff 	mov    -0x888(%rbp),%rax
   2f2fe:	be 00 02 00 00       	mov    $0x200,%esi
   2f303:	48 89 c7             	mov    %rax,%rdi
   2f306:	e8 05 1a fd ff       	callq  d10 <sgx_is_within_enclave>
   2f30b:	85 c0                	test   %eax,%eax
   2f30d:	0f 94 c0             	sete   %al
   2f310:	84 c0                	test   %al,%al
   2f312:	74 0a                	je     2f31e <sgx_create_report+0xc0>
            return SGX_ERROR_INVALID_PARAMETER;
   2f314:	b8 02 00 00 00       	mov    $0x2,%eax
   2f319:	e9 8a 01 00 00       	jmpq   2f4a8 <sgx_create_report+0x24a>
        tmp_target_info = *target_info;
   2f31e:	48 8b 95 78 f7 ff ff 	mov    -0x888(%rbp),%rdx
   2f325:	48 8d 85 10 fa ff ff 	lea    -0x5f0(%rbp),%rax
   2f32c:	48 89 d6             	mov    %rdx,%rsi
   2f32f:	ba 40 00 00 00       	mov    $0x40,%edx
   2f334:	48 89 c7             	mov    %rax,%rdi
   2f337:	48 89 d1             	mov    %rdx,%rcx
   2f33a:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    }
    // report_data is allowed to be NULL, but if it is not NULL, it must be within the enclave
    if(report_data)
   2f33d:	48 83 bd 70 f7 ff ff 	cmpq   $0x0,-0x890(%rbp)
   2f344:	00 
   2f345:	0f 84 85 00 00 00    	je     2f3d0 <sgx_create_report+0x172>
    {
        if(!sgx_is_within_enclave(report_data, sizeof(*report_data)))
   2f34b:	48 8b 85 70 f7 ff ff 	mov    -0x890(%rbp),%rax
   2f352:	be 40 00 00 00       	mov    $0x40,%esi
   2f357:	48 89 c7             	mov    %rax,%rdi
   2f35a:	e8 b1 19 fd ff       	callq  d10 <sgx_is_within_enclave>
   2f35f:	85 c0                	test   %eax,%eax
   2f361:	0f 94 c0             	sete   %al
   2f364:	84 c0                	test   %al,%al
   2f366:	74 0a                	je     2f372 <sgx_create_report+0x114>
            return SGX_ERROR_INVALID_PARAMETER;
   2f368:	b8 02 00 00 00       	mov    $0x2,%eax
   2f36d:	e9 36 01 00 00       	jmpq   2f4a8 <sgx_create_report+0x24a>
        tmp_report_data = *report_data;
   2f372:	48 8b 8d 70 f7 ff ff 	mov    -0x890(%rbp),%rcx
   2f379:	48 8b 01             	mov    (%rcx),%rax
   2f37c:	48 8b 51 08          	mov    0x8(%rcx),%rdx
   2f380:	48 89 85 90 f7 ff ff 	mov    %rax,-0x870(%rbp)
   2f387:	48 89 95 98 f7 ff ff 	mov    %rdx,-0x868(%rbp)
   2f38e:	48 8b 41 10          	mov    0x10(%rcx),%rax
   2f392:	48 8b 51 18          	mov    0x18(%rcx),%rdx
   2f396:	48 89 85 a0 f7 ff ff 	mov    %rax,-0x860(%rbp)
   2f39d:	48 89 95 a8 f7 ff ff 	mov    %rdx,-0x858(%rbp)
   2f3a4:	48 8b 41 20          	mov    0x20(%rcx),%rax
   2f3a8:	48 8b 51 28          	mov    0x28(%rcx),%rdx
   2f3ac:	48 89 85 b0 f7 ff ff 	mov    %rax,-0x850(%rbp)
   2f3b3:	48 89 95 b8 f7 ff ff 	mov    %rdx,-0x848(%rbp)
   2f3ba:	48 8b 41 30          	mov    0x30(%rcx),%rax
   2f3be:	48 8b 51 38          	mov    0x38(%rcx),%rdx
   2f3c2:	48 89 85 c0 f7 ff ff 	mov    %rax,-0x840(%rbp)
   2f3c9:	48 89 95 c8 f7 ff ff 	mov    %rdx,-0x838(%rbp)
    }
    // report must be within the enclave
    if(!report || !sgx_is_within_enclave(report, sizeof(*report)))
   2f3d0:	48 83 bd 68 f7 ff ff 	cmpq   $0x0,-0x898(%rbp)
   2f3d7:	00 
   2f3d8:	74 18                	je     2f3f2 <sgx_create_report+0x194>
   2f3da:	48 8b 85 68 f7 ff ff 	mov    -0x898(%rbp),%rax
   2f3e1:	be b0 01 00 00       	mov    $0x1b0,%esi
   2f3e6:	48 89 c7             	mov    %rax,%rdi
   2f3e9:	e8 22 19 fd ff       	callq  d10 <sgx_is_within_enclave>
   2f3ee:	85 c0                	test   %eax,%eax
   2f3f0:	75 07                	jne    2f3f9 <sgx_create_report+0x19b>
   2f3f2:	b8 01 00 00 00       	mov    $0x1,%eax
   2f3f7:	eb 05                	jmp    2f3fe <sgx_create_report+0x1a0>
   2f3f9:	b8 00 00 00 00       	mov    $0x0,%eax
   2f3fe:	84 c0                	test   %al,%al
   2f400:	74 0a                	je     2f40c <sgx_create_report+0x1ae>
    {
        return SGX_ERROR_INVALID_PARAMETER;
   2f402:	b8 02 00 00 00       	mov    $0x2,%eax
   2f407:	e9 9c 00 00 00       	jmpq   2f4a8 <sgx_create_report+0x24a>
    }


    // Do EREPORT
    auto failed = do_ereport(&tmp_target_info, &tmp_report_data, &tmp_report);
   2f40c:	48 8d 95 10 f8 ff ff 	lea    -0x7f0(%rbp),%rdx
   2f413:	48 8d 8d 90 f7 ff ff 	lea    -0x870(%rbp),%rcx
   2f41a:	48 8d 85 10 fa ff ff 	lea    -0x5f0(%rbp),%rax
   2f421:	48 89 ce             	mov    %rcx,%rsi
   2f424:	48 89 c7             	mov    %rax,%rdi
   2f427:	e8 f9 0a 00 00       	callq  2ff25 <do_ereport>
   2f42c:	89 85 84 f7 ff ff    	mov    %eax,-0x87c(%rbp)
    
    // Copy data to the user buffer: *report = tmp_report; 
    // Use a loop to avoid compiler to call memcpy, 
    // which cannot be used during enclave initialization.
    // No need to cleanup the tmp_report as it is not secret.
    if (!failed)
   2f432:	83 bd 84 f7 ff ff 00 	cmpl   $0x0,-0x87c(%rbp)
   2f439:	75 57                	jne    2f492 <sgx_create_report+0x234>
    {
        static_assert(sizeof(*report) % sizeof(uint64_t) == 0, "sizeof(sgx_report_t) should be multiple of 8");
        for(size_t i = 0; i < sizeof(*report)/sizeof(uint64_t); i++)
   2f43b:	48 c7 85 88 f7 ff ff 	movq   $0x0,-0x878(%rbp)
   2f442:	00 00 00 00 
   2f446:	48 83 bd 88 f7 ff ff 	cmpq   $0x35,-0x878(%rbp)
   2f44d:	35 
   2f44e:	77 42                	ja     2f492 <sgx_create_report+0x234>
        {
            ((uint64_t*)report)[i] = ((uint64_t*)&tmp_report)[i];
   2f450:	48 8b 85 88 f7 ff ff 	mov    -0x878(%rbp),%rax
   2f457:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
   2f45e:	00 
   2f45f:	48 8d 85 10 f8 ff ff 	lea    -0x7f0(%rbp),%rax
   2f466:	48 01 d0             	add    %rdx,%rax
   2f469:	48 8b 95 88 f7 ff ff 	mov    -0x878(%rbp),%rdx
   2f470:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
   2f477:	00 
   2f478:	48 8b 95 68 f7 ff ff 	mov    -0x898(%rbp),%rdx
   2f47f:	48 01 ca             	add    %rcx,%rdx
   2f482:	48 8b 00             	mov    (%rax),%rax
   2f485:	48 89 02             	mov    %rax,(%rdx)
        for(size_t i = 0; i < sizeof(*report)/sizeof(uint64_t); i++)
   2f488:	48 83 85 88 f7 ff ff 	addq   $0x1,-0x878(%rbp)
   2f48f:	01 
   2f490:	eb b4                	jmp    2f446 <sgx_create_report+0x1e8>
        }
    }


    return failed ? SGX_ERROR_UNEXPECTED : SGX_SUCCESS;
   2f492:	83 bd 84 f7 ff ff 00 	cmpl   $0x0,-0x87c(%rbp)
   2f499:	74 07                	je     2f4a2 <sgx_create_report+0x244>
   2f49b:	b8 01 00 00 00       	mov    $0x1,%eax
   2f4a0:	eb 06                	jmp    2f4a8 <sgx_create_report+0x24a>
   2f4a2:	b8 00 00 00 00       	mov    $0x0,%eax
   2f4a7:	90                   	nop
}
   2f4a8:	48 8b b5 08 fe ff ff 	mov    -0x1f8(%rbp),%rsi
   2f4af:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
   2f4b6:	00 00 
   2f4b8:	74 05                	je     2f4bf <sgx_create_report+0x261>
   2f4ba:	e8 d9 5a fd ff       	callq  4f98 <__stack_chk_fail>
   2f4bf:	48 81 c4 e8 09 00 00 	add    $0x9e8,%rsp
   2f4c6:	41 5a                	pop    %r10
   2f4c8:	5d                   	pop    %rbp
   2f4c9:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
   2f4cd:	c3                   	retq   

000000000002f4ce <sgx_self_report>:

const sgx_report_t *sgx_self_report(void)
{
   2f4ce:	55                   	push   %rbp
   2f4cf:	48 89 e5             	mov    %rsp,%rbp
        .mac = {0}
    };

    // Below sgx_create_report() will be called only once during the enclave initialization,
    // so there is no potential race conditional.
    if (0 == _report.body.attributes.flags)
   2f4d2:	48 8b 05 f7 72 20 00 	mov    0x2072f7(%rip),%rax        # 2367d0 <_ZZ15sgx_self_reportE7_report+0x30>
   2f4d9:	48 85 c0             	test   %rax,%rax
   2f4dc:	75 16                	jne    2f4f4 <sgx_self_report+0x26>
        sgx_create_report(nullptr, nullptr, &_report);
   2f4de:	48 8d 15 bb 72 20 00 	lea    0x2072bb(%rip),%rdx        # 2367a0 <_ZZ15sgx_self_reportE7_report>
   2f4e5:	be 00 00 00 00       	mov    $0x0,%esi
   2f4ea:	bf 00 00 00 00       	mov    $0x0,%edi
   2f4ef:	e8 6a fd ff ff       	callq  2f25e <sgx_create_report>

    return &_report;
   2f4f4:	48 8d 05 a5 72 20 00 	lea    0x2072a5(%rip),%rax        # 2367a0 <_ZZ15sgx_self_reportE7_report>
}
   2f4fb:	5d                   	pop    %rbp
   2f4fc:	c3                   	retq   

Disassembly of section .nipx:

000000000002f4fd <do_init_enclave>:
#ifndef SE_SIM
int accept_post_remove(const volatile layout_t *layout_start, const volatile layout_t *layout_end, size_t offset);
#endif

sgx_status_t do_init_enclave(void *ms, void *tcs)
{
   2f4fd:	55                   	push   %rbp
   2f4fe:	48 89 e5             	mov    %rsp,%rbp
   2f501:	48 83 ec 20          	sub    $0x20,%rsp
   2f505:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   2f509:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#ifdef SE_SIM
    UNUSED(tcs);
#endif
    void *enclave_base = get_enclave_base();
   2f50d:	e8 45 07 00 00       	callq  2fc57 <get_enclave_base>
   2f512:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(ENCLAVE_INIT_NOT_STARTED != lock_enclave())
   2f516:	e8 5b 07 00 00       	callq  2fc76 <lock_enclave>
   2f51b:	85 c0                	test   %eax,%eax
   2f51d:	0f 95 c0             	setne  %al
   2f520:	84 c0                	test   %al,%al
   2f522:	74 0a                	je     2f52e <do_init_enclave+0x31>
    {
        return SGX_ERROR_UNEXPECTED;
   2f524:	b8 01 00 00 00       	mov    $0x1,%eax
   2f529:	e9 2f 01 00 00       	jmpq   2f65d <do_init_enclave+0x160>
    }
    if(0 != init_enclave(enclave_base, ms))
   2f52e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
   2f532:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2f536:	48 89 d6             	mov    %rdx,%rsi
   2f539:	48 89 c7             	mov    %rax,%rdi
   2f53c:	e8 1e 01 00 00       	callq  2f65f <init_enclave>
   2f541:	85 c0                	test   %eax,%eax
   2f543:	0f 95 c0             	setne  %al
   2f546:	84 c0                	test   %al,%al
   2f548:	74 0a                	je     2f554 <do_init_enclave+0x57>
    {
        return SGX_ERROR_UNEXPECTED;
   2f54a:	b8 01 00 00 00       	mov    $0x1,%eax
   2f54f:	e9 09 01 00 00       	jmpq   2f65d <do_init_enclave+0x160>
    }

#ifndef SE_SIM
    if (SGX_SUCCESS != do_init_thread(tcs, true))
   2f554:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2f558:	be 01 00 00 00       	mov    $0x1,%esi
   2f55d:	48 89 c7             	mov    %rax,%rdi
   2f560:	e8 ea 2f fd ff       	callq  254f <do_init_thread>
   2f565:	85 c0                	test   %eax,%eax
   2f567:	0f 95 c0             	setne  %al
   2f56a:	84 c0                	test   %al,%al
   2f56c:	74 0a                	je     2f578 <do_init_enclave+0x7b>
    {
        return SGX_ERROR_UNEXPECTED;
   2f56e:	b8 01 00 00 00       	mov    $0x1,%eax
   2f573:	e9 e5 00 00 00       	jmpq   2f65d <do_init_enclave+0x160>
    }

    /* for EDMM, we need to accept the trimming of the POST_REMOVE pages. */
    if (EDMM_supported)
   2f578:	8b 05 22 58 20 00    	mov    0x205822(%rip),%eax        # 234da0 <EDMM_supported>
   2f57e:	85 c0                	test   %eax,%eax
   2f580:	0f 84 8d 00 00 00    	je     2f613 <do_init_enclave+0x116>
    {
        if (0 != accept_post_remove(&g_global_data.layout_table[0], &g_global_data.layout_table[0] + g_global_data.layout_entry_num, 0))
   2f586:	48 8d 05 b3 1a 00 00 	lea    0x1ab3(%rip),%rax        # 31040 <g_global_data>
   2f58d:	8b 80 18 01 00 00    	mov    0x118(%rax),%eax
   2f593:	89 c0                	mov    %eax,%eax
   2f595:	48 c1 e0 05          	shl    $0x5,%rax
   2f599:	48 89 c2             	mov    %rax,%rdx
   2f59c:	48 8d 05 9d 1a 00 00 	lea    0x1a9d(%rip),%rax        # 31040 <g_global_data>
   2f5a3:	48 8d 80 20 01 00 00 	lea    0x120(%rax),%rax
   2f5aa:	48 01 d0             	add    %rdx,%rax
   2f5ad:	ba 00 00 00 00       	mov    $0x0,%edx
   2f5b2:	48 89 c6             	mov    %rax,%rsi
   2f5b5:	48 8d 05 84 1a 00 00 	lea    0x1a84(%rip),%rax        # 31040 <g_global_data>
   2f5bc:	48 8d b8 20 01 00 00 	lea    0x120(%rax),%rdi
   2f5c3:	e8 59 1e fd ff       	callq  1421 <_Z18accept_post_removePVK9_layout_tS1_m>
   2f5c8:	85 c0                	test   %eax,%eax
   2f5ca:	0f 95 c0             	setne  %al
   2f5cd:	84 c0                	test   %al,%al
   2f5cf:	74 0a                	je     2f5db <do_init_enclave+0xde>
            return SGX_ERROR_UNEXPECTED;
   2f5d1:	b8 01 00 00 00       	mov    $0x1,%eax
   2f5d6:	e9 82 00 00 00       	jmpq   2f65d <do_init_enclave+0x160>

        size_t heap_min_size = get_heap_min_size();
   2f5db:	e8 4b 3d fd ff       	callq  332b <get_heap_min_size>
   2f5e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        memset_s(GET_PTR(void, enclave_base, g_global_data.heap_offset), heap_min_size, 0, heap_min_size);
   2f5e4:	48 8d 05 55 1a 00 00 	lea    0x1a55(%rip),%rax        # 31040 <g_global_data>
   2f5eb:	48 8b 50 08          	mov    0x8(%rax),%rdx
   2f5ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
   2f5f3:	48 01 d0             	add    %rdx,%rax
   2f5f6:	48 89 c7             	mov    %rax,%rdi
   2f5f9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
   2f5fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   2f601:	48 89 d1             	mov    %rdx,%rcx
   2f604:	ba 00 00 00 00       	mov    $0x0,%edx
   2f609:	48 89 c6             	mov    %rax,%rsi
   2f60c:	e8 77 f2 fd ff       	callq  e888 <memset_s>
   2f611:	eb 3b                	jmp    2f64e <do_init_enclave+0x151>
    }
    else
#endif
    {
        memset_s(GET_PTR(void, enclave_base, g_global_data.heap_offset), g_global_data.heap_size, 0, g_global_data.heap_size);
   2f613:	48 8d 05 26 1a 00 00 	lea    0x1a26(%rip),%rax        # 31040 <g_global_data>
   2f61a:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2f61e:	48 8d 05 1b 1a 00 00 	lea    0x1a1b(%rip),%rax        # 31040 <g_global_data>
   2f625:	48 8b 40 10          	mov    0x10(%rax),%rax
   2f629:	48 8d 0d 10 1a 00 00 	lea    0x1a10(%rip),%rcx        # 31040 <g_global_data>
   2f630:	48 8b 71 08          	mov    0x8(%rcx),%rsi
   2f634:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   2f638:	48 01 f1             	add    %rsi,%rcx
   2f63b:	48 89 cf             	mov    %rcx,%rdi
   2f63e:	48 89 d1             	mov    %rdx,%rcx
   2f641:	ba 00 00 00 00       	mov    $0x0,%edx
   2f646:	48 89 c6             	mov    %rax,%rsi
   2f649:	e8 3a f2 fd ff       	callq  e888 <memset_s>
    }

    g_enclave_state = ENCLAVE_INIT_DONE;
   2f64e:	c7 05 cc 62 20 00 02 	movl   $0x2,0x2062cc(%rip)        # 235924 <g_enclave_state>
   2f655:	00 00 00 
    return SGX_SUCCESS;
   2f658:	b8 00 00 00 00       	mov    $0x0,%eax
}
   2f65d:	c9                   	leaveq 
   2f65e:	c3                   	retq   

000000000002f65f <init_enclave>:
{
   2f65f:	55                   	push   %rbp
   2f660:	48 89 e5             	mov    %rsp,%rbp
   2f663:	41 55                	push   %r13
   2f665:	41 54                	push   %r12
   2f667:	53                   	push   %rbx
   2f668:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
   2f66f:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
   2f676:	48 89 b5 e0 fe ff ff 	mov    %rsi,-0x120(%rbp)
   2f67d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   2f684:	00 00 
   2f686:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
   2f68a:	31 c0                	xor    %eax,%eax
    if(enclave_base == NULL || ms == NULL)
   2f68c:	48 83 bd e8 fe ff ff 	cmpq   $0x0,-0x118(%rbp)
   2f693:	00 
   2f694:	74 0a                	je     2f6a0 <init_enclave+0x41>
   2f696:	48 83 bd e0 fe ff ff 	cmpq   $0x0,-0x120(%rbp)
   2f69d:	00 
   2f69e:	75 0a                	jne    2f6aa <init_enclave+0x4b>
        return -1;
   2f6a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2f6a5:	e9 c3 03 00 00       	jmpq   2fa6d <init_enclave+0x40e>
    if(NULL != pcl_entry)
   2f6aa:	48 8b 05 ff 58 20 00 	mov    0x2058ff(%rip),%rax        # 234fb0 <_Z9pcl_entryPvS_>
   2f6b1:	48 85 c0             	test   %rax,%rax
   2f6b4:	74 67                	je     2f71d <init_enclave+0xbe>
        sgx_lfence();
   2f6b6:	0f ae e8             	lfence 
        system_features_t * csi = (system_features_t *)ms;
   2f6b9:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   2f6c0:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
        if(NULL == csi->sealed_key)
   2f6c7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   2f6ce:	48 8b 80 94 00 00 00 	mov    0x94(%rax),%rax
   2f6d5:	48 85 c0             	test   %rax,%rax
   2f6d8:	75 0a                	jne    2f6e4 <init_enclave+0x85>
            return -1;
   2f6da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2f6df:	e9 89 03 00 00       	jmpq   2fa6d <init_enclave+0x40e>
        sgx_status_t ret = pcl_entry(enclave_base, csi->sealed_key);
   2f6e4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
   2f6eb:	48 8b 90 94 00 00 00 	mov    0x94(%rax),%rdx
   2f6f2:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   2f6f9:	48 89 d6             	mov    %rdx,%rsi
   2f6fc:	48 89 c7             	mov    %rax,%rdi
   2f6ff:	e8 4c 0f fd ff       	callq  650 <_Z9pcl_entryPvS_@plt>
   2f704:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)
        if(SGX_SUCCESS != ret)
   2f70a:	83 bd f4 fe ff ff 00 	cmpl   $0x0,-0x10c(%rbp)
   2f711:	74 0a                	je     2f71d <init_enclave+0xbe>
            return -1;
   2f713:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2f718:	e9 50 03 00 00       	jmpq   2fa6d <init_enclave+0x40e>
    if(0 != relocate_enclave(enclave_base))
   2f71d:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
   2f724:	48 89 c7             	mov    %rax,%rdi
   2f727:	e8 14 4c fd ff       	callq  4340 <relocate_enclave>
   2f72c:	85 c0                	test   %eax,%eax
   2f72e:	0f 95 c0             	setne  %al
   2f731:	84 c0                	test   %al,%al
   2f733:	74 0a                	je     2f73f <init_enclave+0xe0>
        return -1;
   2f735:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2f73a:	e9 2e 03 00 00       	jmpq   2fa6d <init_enclave+0x40e>
    system_features_t *info = (system_features_t *)ms;
   2f73f:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
   2f746:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    if(!sgx_is_outside_enclave(info, sizeof(system_features_t)))
   2f74d:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   2f754:	be ac 00 00 00       	mov    $0xac,%esi
   2f759:	48 89 c7             	mov    %rax,%rdi
   2f75c:	e8 3f 16 fd ff       	callq  da0 <sgx_is_outside_enclave>
   2f761:	85 c0                	test   %eax,%eax
   2f763:	0f 94 c0             	sete   %al
   2f766:	84 c0                	test   %al,%al
   2f768:	74 0a                	je     2f774 <init_enclave+0x115>
        return -1;
   2f76a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2f76f:	e9 f9 02 00 00       	jmpq   2fa6d <init_enclave+0x40e>
    sgx_lfence();
   2f774:	0f ae e8             	lfence 
    system_features_t sys_features = *info;
   2f777:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   2f77e:	48 8b 10             	mov    (%rax),%rdx
   2f781:	48 8b 48 08          	mov    0x8(%rax),%rcx
   2f785:	48 89 95 20 ff ff ff 	mov    %rdx,-0xe0(%rbp)
   2f78c:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
   2f793:	48 8b 50 10          	mov    0x10(%rax),%rdx
   2f797:	48 8b 48 18          	mov    0x18(%rax),%rcx
   2f79b:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
   2f7a2:	48 89 8d 38 ff ff ff 	mov    %rcx,-0xc8(%rbp)
   2f7a9:	48 8b 50 20          	mov    0x20(%rax),%rdx
   2f7ad:	48 8b 48 28          	mov    0x28(%rax),%rcx
   2f7b1:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
   2f7b8:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
   2f7bf:	48 8b 50 30          	mov    0x30(%rax),%rdx
   2f7c3:	48 8b 48 38          	mov    0x38(%rax),%rcx
   2f7c7:	48 89 95 50 ff ff ff 	mov    %rdx,-0xb0(%rbp)
   2f7ce:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
   2f7d5:	48 8b 50 40          	mov    0x40(%rax),%rdx
   2f7d9:	48 8b 48 48          	mov    0x48(%rax),%rcx
   2f7dd:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
   2f7e4:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
   2f7eb:	48 8b 50 50          	mov    0x50(%rax),%rdx
   2f7ef:	48 8b 48 58          	mov    0x58(%rax),%rcx
   2f7f3:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
   2f7fa:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
   2f801:	48 8b 50 60          	mov    0x60(%rax),%rdx
   2f805:	48 8b 48 68          	mov    0x68(%rax),%rcx
   2f809:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
   2f80d:	48 89 4d 88          	mov    %rcx,-0x78(%rbp)
   2f811:	48 8b 50 70          	mov    0x70(%rax),%rdx
   2f815:	48 8b 48 78          	mov    0x78(%rax),%rcx
   2f819:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
   2f81d:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
   2f821:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
   2f828:	48 8b 88 88 00 00 00 	mov    0x88(%rax),%rcx
   2f82f:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
   2f833:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   2f837:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
   2f83e:	48 8b 88 98 00 00 00 	mov    0x98(%rax),%rcx
   2f845:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
   2f849:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   2f84d:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
   2f854:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
   2f858:	8b 80 a8 00 00 00    	mov    0xa8(%rax),%eax
   2f85e:	89 45 c8             	mov    %eax,-0x38(%rbp)
    if(sys_features.system_feature_set[0] & (1ULL<< SYS_FEATURE_EXTEND))
   2f861:	48 8b 95 2c ff ff ff 	mov    -0xd4(%rbp),%rdx
   2f868:	48 b8 00 00 00 00 00 	movabs $0x4000000000000000,%rax
   2f86f:	00 00 40 
   2f872:	48 21 d0             	and    %rdx,%rax
   2f875:	48 85 c0             	test   %rax,%rax
   2f878:	74 72                	je     2f8ec <init_enclave+0x28d>
        if(info->size < sizeof(sys_features))
   2f87a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   2f881:	48 8b 80 9c 00 00 00 	mov    0x9c(%rax),%rax
   2f888:	48 3d ab 00 00 00    	cmp    $0xab,%rax
   2f88e:	77 6c                	ja     2f8fc <init_enclave+0x29d>
            for(size_t i = 0; i < sizeof(sys_features) - info->size; i++)
   2f890:	48 c7 85 f8 fe ff ff 	movq   $0x0,-0x108(%rbp)
   2f897:	00 00 00 00 
   2f89b:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   2f8a2:	48 8b 80 9c 00 00 00 	mov    0x9c(%rax),%rax
   2f8a9:	ba ac 00 00 00       	mov    $0xac,%edx
   2f8ae:	48 29 c2             	sub    %rax,%rdx
   2f8b1:	48 89 d0             	mov    %rdx,%rax
   2f8b4:	48 39 85 f8 fe ff ff 	cmp    %rax,-0x108(%rbp)
   2f8bb:	73 3f                	jae    2f8fc <init_enclave+0x29d>
                *((uint8_t *)&sys_features + info->size + i) = 0;
   2f8bd:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
   2f8c4:	48 8b 90 9c 00 00 00 	mov    0x9c(%rax),%rdx
   2f8cb:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
   2f8d2:	48 01 c2             	add    %rax,%rdx
   2f8d5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   2f8dc:	48 01 d0             	add    %rdx,%rax
   2f8df:	c6 00 00             	movb   $0x0,(%rax)
            for(size_t i = 0; i < sizeof(sys_features) - info->size; i++)
   2f8e2:	48 83 85 f8 fe ff ff 	addq   $0x1,-0x108(%rbp)
   2f8e9:	01 
   2f8ea:	eb af                	jmp    2f89b <init_enclave+0x23c>
        sys_features.size = 0;
   2f8ec:	48 c7 45 bc 00 00 00 	movq   $0x0,-0x44(%rbp)
   2f8f3:	00 
        sys_features.cpu_features_ext = 0;
   2f8f4:	48 c7 45 c4 00 00 00 	movq   $0x0,-0x3c(%rbp)
   2f8fb:	00 
    g_sdk_version = sys_features.version;
   2f8fc:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
   2f902:	89 05 9c 54 20 00    	mov    %eax,0x20549c(%rip)        # 234da4 <g_sdk_version>
    if (g_sdk_version == SDK_VERSION_1_5)
   2f908:	8b 05 96 54 20 00    	mov    0x205496(%rip),%eax        # 234da4 <g_sdk_version>
   2f90e:	85 c0                	test   %eax,%eax
   2f910:	75 0c                	jne    2f91e <init_enclave+0x2bf>
        EDMM_supported = 0;
   2f912:	c7 05 84 54 20 00 00 	movl   $0x0,0x205484(%rip)        # 234da0 <EDMM_supported>
   2f919:	00 00 00 
   2f91c:	eb 34                	jmp    2f952 <init_enclave+0x2f3>
    else if (g_sdk_version >= SDK_VERSION_2_0)
   2f91e:	8b 05 80 54 20 00    	mov    0x205480(%rip),%eax        # 234da4 <g_sdk_version>
   2f924:	85 c0                	test   %eax,%eax
   2f926:	7e 20                	jle    2f948 <init_enclave+0x2e9>
        EDMM_supported = feature_supported((const uint64_t *)sys_features.system_feature_set, 0);
   2f928:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   2f92f:	48 83 c0 0c          	add    $0xc,%rax
   2f933:	be 00 00 00 00       	mov    $0x0,%esi
   2f938:	48 89 c7             	mov    %rax,%rdi
   2f93b:	e8 d7 3b fd ff       	callq  3517 <feature_supported>
   2f940:	89 05 5a 54 20 00    	mov    %eax,0x20545a(%rip)        # 234da0 <EDMM_supported>
   2f946:	eb 0a                	jmp    2f952 <init_enclave+0x2f3>
        return -1;
   2f948:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2f94d:	e9 1b 01 00 00       	jmpq   2fa6d <init_enclave+0x40e>
    if (heap_init(get_heap_base(), get_heap_size(), get_heap_min_size(), EDMM_supported) != SGX_SUCCESS)
   2f952:	8b 1d 48 54 20 00    	mov    0x205448(%rip),%ebx        # 234da0 <EDMM_supported>
   2f958:	e8 ce 39 fd ff       	callq  332b <get_heap_min_size>
   2f95d:	49 89 c5             	mov    %rax,%r13
   2f960:	e8 34 39 fd ff       	callq  3299 <get_heap_size>
   2f965:	49 89 c4             	mov    %rax,%r12
   2f968:	e8 11 39 fd ff       	callq  327e <get_heap_base>
   2f96d:	89 d9                	mov    %ebx,%ecx
   2f96f:	4c 89 ea             	mov    %r13,%rdx
   2f972:	4c 89 e6             	mov    %r12,%rsi
   2f975:	48 89 c7             	mov    %rax,%rdi
   2f978:	e8 88 ef fd ff       	callq  e905 <heap_init>
   2f97d:	85 c0                	test   %eax,%eax
   2f97f:	0f 95 c0             	setne  %al
   2f982:	84 c0                	test   %al,%al
   2f984:	74 0a                	je     2f990 <init_enclave+0x331>
        return -1;
   2f986:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2f98b:	e9 dd 00 00 00       	jmpq   2fa6d <init_enclave+0x40e>
    uint64_t xfrm = get_xfeature_state();
   2f990:	e8 5f 46 fd ff       	callq  3ff4 <get_xfeature_state>
   2f995:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    uint64_t cpu_features = (sys_features.cpu_features | INCOMPAT_FEATURE_BIT);
   2f99c:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
   2f9a3:	48 0d 00 18 00 1e    	or     $0x1e001800,%rax
   2f9a9:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    if (sys_features.system_feature_set[0] & ((uint64_t)(1ULL << SYS_FEATURE_EXTEND)))
   2f9b0:	48 8b 95 2c ff ff ff 	mov    -0xd4(%rbp),%rdx
   2f9b7:	48 b8 00 00 00 00 00 	movabs $0x4000000000000000,%rax
   2f9be:	00 00 40 
   2f9c1:	48 21 d0             	and    %rdx,%rax
   2f9c4:	48 85 c0             	test   %rax,%rax
   2f9c7:	74 0b                	je     2f9d4 <init_enclave+0x375>
        cpu_features = sys_features.cpu_features_ext;
   2f9c9:	48 8b 45 c4          	mov    -0x3c(%rbp),%rax
   2f9cd:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    if (SDK_VERSION_2_0 < g_sdk_version || sys_features.size != 0)
   2f9d4:	8b 05 ca 53 20 00    	mov    0x2053ca(%rip),%eax        # 234da4 <g_sdk_version>
   2f9da:	83 f8 01             	cmp    $0x1,%eax
   2f9dd:	7f 09                	jg     2f9e8 <init_enclave+0x389>
   2f9df:	48 8b 45 bc          	mov    -0x44(%rbp),%rax
   2f9e3:	48 85 c0             	test   %rax,%rax
   2f9e6:	74 34                	je     2fa1c <init_enclave+0x3bd>
        if (0 != init_optimized_libs(cpu_features, (uint32_t*)sys_features.cpuinfo_table, xfrm))
   2f9e8:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
   2f9ef:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
   2f9f6:	48 8d 48 14          	lea    0x14(%rax),%rcx
   2f9fa:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   2fa01:	48 89 ce             	mov    %rcx,%rsi
   2fa04:	48 89 c7             	mov    %rax,%rdi
   2fa07:	e8 4f 12 fd ff       	callq  c5b <init_optimized_libs>
   2fa0c:	85 c0                	test   %eax,%eax
   2fa0e:	0f 95 c0             	setne  %al
   2fa11:	84 c0                	test   %al,%al
   2fa13:	74 32                	je     2fa47 <init_enclave+0x3e8>
            return -1;
   2fa15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2fa1a:	eb 51                	jmp    2fa6d <init_enclave+0x40e>
        if (0 != init_optimized_libs(cpu_features, NULL, xfrm))
   2fa1c:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
   2fa23:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
   2fa2a:	be 00 00 00 00       	mov    $0x0,%esi
   2fa2f:	48 89 c7             	mov    %rax,%rdi
   2fa32:	e8 24 12 fd ff       	callq  c5b <init_optimized_libs>
   2fa37:	85 c0                	test   %eax,%eax
   2fa39:	0f 95 c0             	setne  %al
   2fa3c:	84 c0                	test   %al,%al
   2fa3e:	74 07                	je     2fa47 <init_enclave+0x3e8>
            return -1;
   2fa40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2fa45:	eb 26                	jmp    2fa6d <init_enclave+0x40e>
    if(SGX_SUCCESS != sgx_read_rand((unsigned char*)&__stack_chk_guard,
   2fa47:	be 08 00 00 00       	mov    $0x8,%esi
   2fa4c:	48 8d 3d 55 53 20 00 	lea    0x205355(%rip),%rdi        # 234da8 <__intel_security_cookie>
   2fa53:	e8 7e 15 fd ff       	callq  fd6 <sgx_read_rand>
   2fa58:	85 c0                	test   %eax,%eax
   2fa5a:	0f 95 c0             	setne  %al
   2fa5d:	84 c0                	test   %al,%al
   2fa5f:	74 07                	je     2fa68 <init_enclave+0x409>
        return -1;
   2fa61:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2fa66:	eb 05                	jmp    2fa6d <init_enclave+0x40e>
    return 0;
   2fa68:	b8 00 00 00 00       	mov    $0x0,%eax
}
   2fa6d:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
   2fa71:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
   2fa78:	00 00 
   2fa7a:	74 05                	je     2fa81 <init_enclave+0x422>
   2fa7c:	e8 17 55 fd ff       	callq  4f98 <__stack_chk_fail>
   2fa81:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
   2fa88:	5b                   	pop    %rbx
   2fa89:	41 5c                	pop    %r12
   2fa8b:	41 5d                	pop    %r13
   2fa8d:	5d                   	pop    %rbp
   2fa8e:	c3                   	retq   

000000000002fa8f <sgx_is_enclave_crashed>:
{
   2fa8f:	55                   	push   %rbp
   2fa90:	48 89 e5             	mov    %rsp,%rbp
    return get_enclave_state() == ENCLAVE_CRASHED;
   2fa93:	e8 c7 01 00 00       	callq  2fc5f <get_enclave_state>
   2fa98:	83 f8 03             	cmp    $0x3,%eax
   2fa9b:	0f 94 c0             	sete   %al
   2fa9e:	0f b6 c0             	movzbl %al,%eax
}
   2faa1:	5d                   	pop    %rbp
   2faa2:	c3                   	retq   

000000000002faa3 <enter_enclave>:

extern "C" int enter_enclave(int index, void *ms, void *tcs, int cssa) __attribute__((section(".nipx")));

extern "C" int enter_enclave(int index, void *ms, void *tcs, int cssa)
{
   2faa3:	55                   	push   %rbp
   2faa4:	48 89 e5             	mov    %rsp,%rbp
   2faa7:	48 83 ec 30          	sub    $0x30,%rsp
   2faab:	89 7d ec             	mov    %edi,-0x14(%rbp)
   2faae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   2fab2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   2fab6:	89 4d e8             	mov    %ecx,-0x18(%rbp)
    sgx_status_t error = SGX_ERROR_UNEXPECTED;
   2fab9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

    if(sgx_is_enclave_crashed())
   2fac0:	e8 ca ff ff ff       	callq  2fa8f <sgx_is_enclave_crashed>
   2fac5:	85 c0                	test   %eax,%eax
   2fac7:	0f 95 c0             	setne  %al
   2faca:	84 c0                	test   %al,%al
   2facc:	74 0a                	je     2fad8 <enter_enclave+0x35>
    {
        return SGX_ERROR_ENCLAVE_CRASHED;
   2face:	b8 06 10 00 00       	mov    $0x1006,%eax
   2fad3:	e9 24 01 00 00       	jmpq   2fbfc <enter_enclave+0x159>
    }
    if((ECMD_INIT_ENCLAVE != index) && (ENCLAVE_INIT_DONE != get_enclave_state()))
   2fad8:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%rbp)
   2fadc:	74 11                	je     2faef <enter_enclave+0x4c>
   2fade:	e8 7c 01 00 00       	callq  2fc5f <get_enclave_state>
   2fae3:	83 f8 02             	cmp    $0x2,%eax
   2fae6:	74 07                	je     2faef <enter_enclave+0x4c>
   2fae8:	b8 01 00 00 00       	mov    $0x1,%eax
   2faed:	eb 05                	jmp    2faf4 <enter_enclave+0x51>
   2faef:	b8 00 00 00 00       	mov    $0x0,%eax
   2faf4:	84 c0                	test   %al,%al
   2faf6:	74 12                	je     2fb0a <enter_enclave+0x67>
    {
        set_enclave_state(ENCLAVE_CRASHED);
   2faf8:	bf 03 00 00 00       	mov    $0x3,%edi
   2fafd:	e8 6a 01 00 00       	callq  2fc6c <set_enclave_state>
        return error;
   2fb02:	8b 45 fc             	mov    -0x4(%rbp),%eax
   2fb05:	e9 f2 00 00 00       	jmpq   2fbfc <enter_enclave+0x159>
    }

    if(cssa == 0)
   2fb0a:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
   2fb0e:	0f 85 9e 00 00 00    	jne    2fbb2 <enter_enclave+0x10f>
    {
        if((index >= 0) || (index == ECMD_INIT_SWITCHLESS) || (index == ECMD_RUN_SWITCHLESS_TWORKER))
   2fb14:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
   2fb18:	79 0c                	jns    2fb26 <enter_enclave+0x83>
   2fb1a:	83 7d ec fa          	cmpl   $0xfffffffa,-0x14(%rbp)
   2fb1e:	74 06                	je     2fb26 <enter_enclave+0x83>
   2fb20:	83 7d ec f9          	cmpl   $0xfffffff9,-0x14(%rbp)
   2fb24:	75 29                	jne    2fb4f <enter_enclave+0xac>
        {
            // Initialize stack guard if necessary
            init_stack_guard(tcs);
   2fb26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2fb2a:	48 89 c7             	mov    %rax,%rdi
   2fb2d:	e8 82 33 fd ff       	callq  2eb4 <_ZL16init_stack_guardPv>
            error = do_ecall(index, ms, tcs);
   2fb32:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   2fb36:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   2fb3a:	8b 45 ec             	mov    -0x14(%rbp),%eax
   2fb3d:	48 89 ce             	mov    %rcx,%rsi
   2fb40:	89 c7                	mov    %eax,%edi
   2fb42:	e8 ef 2c fd ff       	callq  2836 <do_ecall>
   2fb47:	89 45 fc             	mov    %eax,-0x4(%rbp)
   2fb4a:	e9 9a 00 00 00       	jmpq   2fbe9 <enter_enclave+0x146>
        }
        else if(index == ECMD_INIT_ENCLAVE)
   2fb4f:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%rbp)
   2fb53:	75 18                	jne    2fb6d <enter_enclave+0xca>
        {
            error = do_init_enclave(ms, tcs);
   2fb55:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
   2fb59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2fb5d:	48 89 d6             	mov    %rdx,%rsi
   2fb60:	48 89 c7             	mov    %rax,%rdi
   2fb63:	e8 95 f9 ff ff       	callq  2f4fd <do_init_enclave>
   2fb68:	89 45 fc             	mov    %eax,-0x4(%rbp)
   2fb6b:	eb 7c                	jmp    2fbe9 <enter_enclave+0x146>
        }
        else if(index == ECMD_ORET)
   2fb6d:	83 7d ec fe          	cmpl   $0xfffffffe,-0x14(%rbp)
   2fb71:	75 11                	jne    2fb84 <enter_enclave+0xe1>
        {
            error = do_oret(ms);
   2fb73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2fb77:	48 89 c7             	mov    %rax,%rdi
   2fb7a:	e8 e4 34 fd ff       	callq  3063 <do_oret>
   2fb7f:	89 45 fc             	mov    %eax,-0x4(%rbp)
   2fb82:	eb 65                	jmp    2fbe9 <enter_enclave+0x146>
        }
        else if(index == ECMD_MKTCS)
   2fb84:	83 7d ec fc          	cmpl   $0xfffffffc,-0x14(%rbp)
   2fb88:	75 11                	jne    2fb9b <enter_enclave+0xf8>
        {
            error = do_ecall_add_thread(ms);
   2fb8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
   2fb8e:	48 89 c7             	mov    %rax,%rdi
   2fb91:	e8 85 2d fd ff       	callq  291b <do_ecall_add_thread>
   2fb96:	89 45 fc             	mov    %eax,-0x4(%rbp)
   2fb99:	eb 4e                	jmp    2fbe9 <enter_enclave+0x146>
        }
        else if(index == ECMD_UNINIT_ENCLAVE)
   2fb9b:	83 7d ec fb          	cmpl   $0xfffffffb,-0x14(%rbp)
   2fb9f:	75 48                	jne    2fbe9 <enter_enclave+0x146>
        {
            error = do_uninit_enclave(tcs);
   2fba1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2fba5:	48 89 c7             	mov    %rax,%rdi
   2fba8:	e8 32 2e fd ff       	callq  29df <do_uninit_enclave>
   2fbad:	89 45 fc             	mov    %eax,-0x4(%rbp)
   2fbb0:	eb 37                	jmp    2fbe9 <enter_enclave+0x146>
        }
    }
    else if((cssa == 1) && (index == ECMD_EXCEPT))
   2fbb2:	83 7d e8 01          	cmpl   $0x1,-0x18(%rbp)
   2fbb6:	75 31                	jne    2fbe9 <enter_enclave+0x146>
   2fbb8:	83 7d ec fd          	cmpl   $0xfffffffd,-0x14(%rbp)
   2fbbc:	75 2b                	jne    2fbe9 <enter_enclave+0x146>
    {
        error = trts_handle_exception(tcs);
   2fbbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2fbc2:	48 89 c7             	mov    %rax,%rdi
   2fbc5:	e8 43 3f fd ff       	callq  3b0d <trts_handle_exception>
   2fbca:	89 45 fc             	mov    %eax,-0x4(%rbp)
        if (check_static_stack_canary(tcs) != 0)
   2fbcd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   2fbd1:	48 89 c7             	mov    %rax,%rdi
   2fbd4:	e8 16 15 fd ff       	callq  10ef <check_static_stack_canary>
   2fbd9:	85 c0                	test   %eax,%eax
   2fbdb:	0f 95 c0             	setne  %al
   2fbde:	84 c0                	test   %al,%al
   2fbe0:	74 07                	je     2fbe9 <enter_enclave+0x146>
        {
            error = SGX_ERROR_STACK_OVERRUN;
   2fbe2:	c7 45 fc 09 10 00 00 	movl   $0x1009,-0x4(%rbp)
        }
    }
    if(error == SGX_ERROR_UNEXPECTED)
   2fbe9:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
   2fbed:	75 0a                	jne    2fbf9 <enter_enclave+0x156>
    {
        set_enclave_state(ENCLAVE_CRASHED);
   2fbef:	bf 03 00 00 00       	mov    $0x3,%edi
   2fbf4:	e8 73 00 00 00       	callq  2fc6c <set_enclave_state>
    }
    return error;
   2fbf9:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
   2fbfc:	c9                   	leaveq 
   2fbfd:	c3                   	retq   

000000000002fbfe <restore_xregs>:
DECLARE_LOCAL_FUNC restore_xregs
#if defined(LINUX32)
    mov     SE_WORDSIZE(%esp), %ecx
    lea     g_xsave_enabled, %eax
#else
    mov     %rdi, %rcx
   2fbfe:	48 89 f9             	mov    %rdi,%rcx
    mov     g_xsave_enabled@GOTPCREL(%rip), %rax
   2fc01:	48 8d 05 20 5d 20 00 	lea    0x205d20(%rip),%rax        # 235928 <g_xsave_enabled>
#endif
    movl    (%xax), %eax
   2fc08:	8b 00                	mov    (%rax),%eax
    cmpl    $0, %eax
   2fc0a:	83 f8 00             	cmp    $0x0,%eax
    jz      1f
   2fc0d:	74 16                	je     2fc25 <restore_xregs+0x27>
    SET_XSAVE_MASK
   2fc0f:	48 31 c0             	xor    %rax,%rax
   2fc12:	48 31 d2             	xor    %rdx,%rdx
   2fc15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2fc1a:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   2fc1f:	48 0f ae 29          	xrstor64 (%rcx)
    DO_XRSTOR
    jmp     2f
   2fc23:	eb 04                	jmp    2fc29 <restore_xregs+0x2b>
   2fc25:	48 0f ae 09          	fxrstor64 (%rcx)
1:
    DO_FXRSTOR
2:
    ret
   2fc29:	c3                   	retq   

000000000002fc2a <save_xregs>:
DECLARE_LOCAL_FUNC save_xregs
#if defined(LINUX32)
    mov     SE_WORDSIZE(%esp), %ecx
    lea     g_xsave_enabled, %eax
#else
    mov     %rdi, %rcx
   2fc2a:	48 89 f9             	mov    %rdi,%rcx
    mov     g_xsave_enabled@GOTPCREL(%rip), %rax
   2fc2d:	48 8d 05 f4 5c 20 00 	lea    0x205cf4(%rip),%rax        # 235928 <g_xsave_enabled>
#endif
    fwait
   2fc34:	9b                   	fwait
    movl    (%xax), %eax
   2fc35:	8b 00                	mov    (%rax),%eax
    cmpl    $0, %eax
   2fc37:	83 f8 00             	cmp    $0x0,%eax
    jz      1f
   2fc3a:	74 16                	je     2fc52 <save_xregs+0x28>
    SET_XSAVE_MASK
   2fc3c:	48 31 c0             	xor    %rax,%rax
   2fc3f:	48 31 d2             	xor    %rdx,%rdx
   2fc42:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2fc47:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   2fc4c:	48 0f c7 21          	xsavec64 (%rcx)
    DO_XSAVEC
    jmp     2f
   2fc50:	eb 04                	jmp    2fc56 <save_xregs+0x2c>
   2fc52:	48 0f ae 01          	fxsave64 (%rcx)
1:
    DO_FXSAVE
2:
    ret
   2fc56:	c3                   	retq   

000000000002fc57 <get_enclave_base>:

    /* .text */
    .section .nipx,"ax",@progbits

DECLARE_LOCAL_FUNC get_enclave_base
    lea_pic __ImageBase, %xax
   2fc57:	48 8d 05 a2 03 fd ff 	lea    -0x2fc5e(%rip),%rax        # 0 <enclave.so>
    ret
   2fc5e:	c3                   	retq   

000000000002fc5f <get_enclave_state>:
DECLARE_LOCAL_FUNC get_enclave_state
    lea_pic g_enclave_state, %xcx
   2fc5f:	48 8d 0d be 5c 20 00 	lea    0x205cbe(%rip),%rcx        # 235924 <g_enclave_state>
    xor     %xax, %xax
   2fc66:	48 31 c0             	xor    %rax,%rax
    movl    (%xcx), %eax
   2fc69:	8b 01                	mov    (%rcx),%eax
    ret
   2fc6b:	c3                   	retq   

000000000002fc6c <set_enclave_state>:
DECLARE_LOCAL_FUNC set_enclave_state
    lea_pic g_enclave_state, %xax
   2fc6c:	48 8d 05 b1 5c 20 00 	lea    0x205cb1(%rip),%rax        # 235924 <g_enclave_state>
#ifdef LINUX32
    mov     SE_WORDSIZE(%esp), %edi
#endif
    movl    %edi, (%xax)
   2fc73:	89 38                	mov    %edi,(%rax)
    ret
   2fc75:	c3                   	retq   

000000000002fc76 <lock_enclave>:

DECLARE_LOCAL_FUNC lock_enclave
    lea_pic g_enclave_state, %xdx
   2fc76:	48 8d 15 a7 5c 20 00 	lea    0x205ca7(%rip),%rdx        # 235924 <g_enclave_state>
    xor     %xax, %xax
   2fc7d:	48 31 c0             	xor    %rax,%rax
    mov     $ENCLAVE_INIT_NOT_STARTED, %eax
   2fc80:	b8 00 00 00 00       	mov    $0x0,%eax
    xor     %xcx, %xcx
   2fc85:	48 31 c9             	xor    %rcx,%rcx
    mov     $ENCLAVE_INIT_IN_PROGRESS, %ecx     /* if (g_global_data.enclave_state == ENCLAVE_INIT_NOT_STARTED) */
   2fc88:	b9 01 00 00 00       	mov    $0x1,%ecx
    lock cmpxchgl %ecx, (%xdx)                  /*   g_global_data.enclave_state == ENCLAVE_INIT_IN_PROGRESS */
   2fc8d:	f0 0f b1 0a          	lock cmpxchg %ecx,(%rdx)
    ret                                         /* xax: the initial value of enclave state */
   2fc91:	c3                   	retq   

000000000002fc92 <get_thread_data>:
 *
 *     Get the address of thread_data
 * ---------------------------------------------------------------------
 */
DECLARE_LOCAL_FUNC get_thread_data
    READ_TD_DATA self_addr 
   2fc92:	65 48 8b 04 25 00 00 	mov    %gs:0x0,%rax
   2fc99:	00 00 
    ret
   2fc9b:	c3                   	retq   

000000000002fc9c <get_stack_guard>:
 *
 *     Get the value of stack_guard
 * ---------------------------------------------------------------------
 */
DECLARE_LOCAL_FUNC get_stack_guard 
    READ_TD_DATA stack_guard 
   2fc9c:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
   2fca3:	00 00 
    ret
   2fca5:	c3                   	retq   

000000000002fca6 <enclave_entry>:
 * ----------------------------------------------------------------------
 */
    .cfi_startproc

    /* Clear unused general registers */
    xor     %xdx, %xdx
   2fca6:	48 31 d2             	xor    %rdx,%rdx
    add     %xdx, %xdx          /* OF = SF = AF = CF = 0; ZF = PF = 1 */
   2fca9:	48 01 d2             	add    %rdx,%rdx
#if defined(LINUX64)
    xor     %r8, %r8
   2fcac:	4d 31 c0             	xor    %r8,%r8
    xor     %r9, %r9
   2fcaf:	4d 31 c9             	xor    %r9,%r9
    xor     %r10, %r10
   2fcb2:	4d 31 d2             	xor    %r10,%r10
    xor     %r11, %r11
   2fcb5:	4d 31 db             	xor    %r11,%r11
    xor     %r12, %r12
   2fcb8:	4d 31 e4             	xor    %r12,%r12
    xor     %r13, %r13
   2fcbb:	4d 31 ed             	xor    %r13,%r13
    xor     %r14, %r14
   2fcbe:	4d 31 f6             	xor    %r14,%r14
    xor     %r15, %r15
   2fcc1:	4d 31 ff             	xor    %r15,%r15
#endif

    /* switch to trusted stack */
    cmp     $0, %xax
   2fcc4:	48 83 f8 00          	cmp    $0x0,%rax
    jne     .Ldo_handler                /* handle exception state */
   2fcc8:	0f 85 9a 00 00 00    	jne    2fd68 <enclave_entry+0xc2>
    /* xor     %xdx, %xdx                  xdx is cssa, make sure it is 0 */
    READ_TD_DATA last_sp
   2fcce:	65 48 8b 04 25 08 00 	mov    %gs:0x8,%rax
   2fcd5:	00 00 
    cmp     $0, %xax
   2fcd7:	48 83 f8 00          	cmp    $0x0,%rax
    jne .Lswitch_stack
   2fcdb:	75 0f                	jne    2fcec <enclave_entry+0x46>
    GET_STACK_BASE  %xbx                /* if last_sp == 0, set sp to stack base */
   2fcdd:	48 89 d8             	mov    %rbx,%rax
   2fce0:	48 2d 00 00 01 00    	sub    $0x10000,%rax
    sub     $STATIC_STACK_SIZE, %xax    /* give space for static stack */
   2fce6:	48 2d b0 02 00 00    	sub    $0x2b0,%rax
.Lswitch_stack:
    xchg    %xsp, %xax
   2fcec:	48 94                	xchg   %rax,%rsp
    push    %xcx
   2fcee:	51                   	push   %rcx
    push    %xbp
   2fcef:	55                   	push   %rbp

    .cfi_def_cfa_offset   2 * SE_WORDSIZE
    .cfi_offset           xbp, -2 * SE_WORDSIZE
    mov     %xsp, %xbp
   2fcf0:	48 89 e5             	mov    %rsp,%rbp
    .cfi_def_cfa_register xbp

    /* Save the registers */
    sub     $(6*SE_WORDSIZE), %xsp
   2fcf3:	48 83 ec 30          	sub    $0x30,%rsp
    mov     %xax, -1*SE_WORDSIZE(%xbp)  /* xsp_u */
   2fcf7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    mov     %xdx, -3*SE_WORDSIZE(%xbp)  /* cssa */
   2fcfb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    mov     %xbx, -4*SE_WORDSIZE(%xbp)  /* TCS */
   2fcff:	48 89 5d e0          	mov    %rbx,-0x20(%rbp)
    mov     %xsi, -5*SE_WORDSIZE(%xbp)  /* XSI */
   2fd03:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
    mov     %xdi, -6*SE_WORDSIZE(%xbp)  /* XDI */
   2fd07:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)

#ifdef LINUX64
    mov     %rdx, %rcx
   2fd0b:	48 89 d1             	mov    %rdx,%rcx
    mov     %rbx, %rdx
   2fd0e:	48 89 da             	mov    %rbx,%rdx
#endif
    call    enter_enclave
   2fd11:	e8 8d fd ff ff       	callq  2faa3 <enter_enclave>
    mov     %xax, %xbx
   2fd16:	48 89 c3             	mov    %rax,%rbx

.Lexit_enclave:
/* clean extended feature registers */
    lea_pic SYNTHETIC_STATE, %xdi
   2fd19:	48 8d 3d a0 19 00 00 	lea    0x19a0(%rip),%rdi        # 316c0 <SYNTHETIC_STATE>
#ifdef LINUX32
    mov     %xdi, (%xsp)
#endif
    call    restore_xregs
   2fd20:	e8 d9 fe ff ff       	callq  2fbfe <restore_xregs>

/* set xdi and xsi */
    mov     $OCMD_ERET, %xdi
   2fd25:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
    mov     %xbx, %xsi
   2fd2c:	48 89 de             	mov    %rbx,%rsi

/* restore stack */
    mov     -1*SE_WORDSIZE(%xbp), %xdx  /* xdx: xsp_u  */
   2fd2f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    mov     %xbp, %xsp
   2fd33:	48 89 ec             	mov    %rbp,%rsp
    pop     %xbp                        /* xbp_u */
   2fd36:	5d                   	pop    %rbp
    pop     %xbx                        /* ret_u */
   2fd37:	5b                   	pop    %rbx
    mov     %xdx, %xsp                  /* xsp_u */
   2fd38:	48 89 d4             	mov    %rdx,%rsp

.Lclear_and_exit_enclave:
    /* Clear all GPRs, except xax, xbx, xdi and xsi */
    xor     %xcx, %xcx
   2fd3b:	48 31 c9             	xor    %rcx,%rcx
    xor     %xdx, %xdx
   2fd3e:	48 31 d2             	xor    %rdx,%rdx
#if defined(LINUX64)
    xor     %r8, %r8
   2fd41:	4d 31 c0             	xor    %r8,%r8
    xor     %r9, %r9
   2fd44:	4d 31 c9             	xor    %r9,%r9
    xor     %r10, %r10
   2fd47:	4d 31 d2             	xor    %r10,%r10
    xor     %r11, %r11
   2fd4a:	4d 31 db             	xor    %r11,%r11
    xor     %r12, %r12
   2fd4d:	4d 31 e4             	xor    %r12,%r12
    xor     %r13, %r13
   2fd50:	4d 31 ed             	xor    %r13,%r13
    xor     %r14, %r14
   2fd53:	4d 31 f6             	xor    %r14,%r14
    xor     %r15, %r15
   2fd56:	4d 31 ff             	xor    %r15,%r15
#endif

    /* Set status flags to pre-defined values */
    add     %xdx, %xdx          /* OF = SF = AF = CF = 0; ZF = PF = 1 */
   2fd59:	48 01 d2             	add    %rdx,%rdx

    /* EEXIT */
    mov     $SE_EEXIT, %xax     /* EEXIT leaf */
   2fd5c:	48 c7 c0 04 00 00 00 	mov    $0x4,%rax
   2fd63:	0f 01 d7             	enclu  
    ENCLU

    /* Should not come here */
    ud2
   2fd66:	0f 0b                	ud2    

.Ldo_handler:
    mov     %xax, %xdx          /* XDX: cssa */
   2fd68:	48 89 c2             	mov    %rax,%rdx
    GET_STACK_BASE %xbx         /* XAX: static stack, set sp to stack base */
   2fd6b:	48 89 d8             	mov    %rbx,%rax
   2fd6e:	48 2d 00 00 01 00    	sub    $0x10000,%rax
    jmp     .Lswitch_stack   
   2fd74:	e9 73 ff ff ff       	jmpq   2fcec <enclave_entry+0x46>
 
    /* Should not come here */
    ud2
   2fd79:	0f 0b                	ud2    

000000000002fd7b <do_ocall>:
/* 
 * 8 for GPR, 1 for TD.last_sp, 1 for ocall_index
 * 1 for OCALL_FLAG, 4 for shadow space.
 * Stack Pointer is 16-byte aligned under x86_64.
 */
    push    %xbp
   2fd7b:	55                   	push   %rbp
    mov     %xsp, %xbp
   2fd7c:	48 89 e5             	mov    %rsp,%rbp

/* save parameters in stack */
#ifdef LINUX64
    mov     %xdi, 2*SE_WORDSIZE(%xbp)
   2fd7f:	48 89 7d 10          	mov    %rdi,0x10(%rbp)
    mov     %xsi, 3*SE_WORDSIZE(%xbp)
   2fd83:	48 89 75 18          	mov    %rsi,0x18(%rbp)
#endif

/* save and clean extended feature registers */
    READ_TD_DATA xsave_size
   2fd87:	65 48 8b 04 25 38 00 	mov    %gs:0x38,%rax
   2fd8e:	00 00 
    sub     %xax, %xsp                 /* allocate buffer to save xregs */
   2fd90:	48 29 c4             	sub    %rax,%rsp
    mov     $0x3f, %xax
   2fd93:	48 c7 c0 3f 00 00 00 	mov    $0x3f,%rax
    not     %xax
   2fd9a:	48 f7 d0             	not    %rax
    and     %xax, %xsp                 /* xsave requires 64 byte aligned */
   2fd9d:	48 21 c4             	and    %rax,%rsp
    mov     %xsp, %xcx                 # xsave pointer
   2fda0:	48 89 e1             	mov    %rsp,%rcx

    sub     $(20*SE_WORDSIZE), %xsp    /* 20 slots for GPRs and other info */
   2fda3:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    mov     %xcx, SE_WORDSIZE*19(%xsp) /* addr for xsave */
   2fdaa:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
   2fdb1:	00 
/* save non-volatile registers, except xsp */
    mov     %xbx, SE_WORDSIZE*14(%xsp)
   2fdb2:	48 89 5c 24 70       	mov    %rbx,0x70(%rsp)
    mov     %xsi, SE_WORDSIZE*13(%xsp)
   2fdb7:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
    mov     %xdi, SE_WORDSIZE*12(%xsp)
   2fdbc:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
    mov     %xbp, SE_WORDSIZE*11(%xsp)
   2fdc1:	48 89 6c 24 58       	mov    %rbp,0x58(%rsp)

#ifdef LINUX64
    mov     %r12, SE_WORDSIZE*10(%rsp)
   2fdc6:	4c 89 64 24 50       	mov    %r12,0x50(%rsp)
    mov     %r13, SE_WORDSIZE* 9(%rsp)
   2fdcb:	4c 89 6c 24 48       	mov    %r13,0x48(%rsp)
    mov     %r14, SE_WORDSIZE* 8(%rsp)
   2fdd0:	4c 89 74 24 40       	mov    %r14,0x40(%rsp)
    mov     %r15, SE_WORDSIZE* 7(%rsp)
   2fdd5:	4c 89 7c 24 38       	mov    %r15,0x38(%rsp)
#endif

/* save and clean extended feature registers */
    mov     SE_WORDSIZE*19(%xsp), %xdi /* xsave pointer */
   2fdda:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
   2fde1:	00 
    READ_TD_DATA xsave_size
   2fde2:	65 48 8b 04 25 38 00 	mov    %gs:0x38,%rax
   2fde9:	00 00 
    mov     %xax, %xcx
   2fdeb:	48 89 c1             	mov    %rax,%rcx
    shr     $2, %xcx                   /* xsave size in dword */
   2fdee:	48 c1 e9 02          	shr    $0x2,%rcx
    xor     %xax, %xax
   2fdf2:	48 31 c0             	xor    %rax,%rax
    cld
   2fdf5:	fc                   	cld    
    rep stos %eax, %es:(%xdi)
   2fdf6:	f3 ab                	rep stos %eax,%es:(%rdi)

    mov     SE_WORDSIZE*19(%xsp), %xdi # xsave pointer
   2fdf8:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
   2fdff:	00 
    mov     %xdi, (%xsp)
   2fe00:	48 89 3c 24          	mov    %rdi,(%rsp)
    call    save_xregs
   2fe04:	e8 21 fe ff ff       	callq  2fc2a <save_xregs>
    lea_pic SYNTHETIC_STATE, %xdi
   2fe09:	48 8d 3d b0 18 00 00 	lea    0x18b0(%rip),%rdi        # 316c0 <SYNTHETIC_STATE>
    mov     %xdi, (%xsp)
   2fe10:	48 89 3c 24          	mov    %rdi,(%rsp)
    call    restore_xregs
   2fe14:	e8 e5 fd ff ff       	callq  2fbfe <restore_xregs>

    /* set xdi and xsi using the input parameters */
#ifdef LINUX64
    mov     SE_WORDSIZE*12(%xsp), %xdi
   2fe19:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    mov     SE_WORDSIZE*13(%xsp), %xsi
   2fe1e:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
    mov     SE_WORDSIZE*2(%ebp), %edi
    mov     SE_WORDSIZE*3(%ebp), %esi
#endif

    /* save ocall index to the stack */
    mov     $OCALL_FLAG, %xax
   2fe23:	48 c7 c0 44 49 43 4f 	mov    $0x4f434944,%rax
    mov     %xax, SE_WORDSIZE*4(%xsp)   /* save OCALL_FLAG */
   2fe2a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    mov     %xdi, SE_WORDSIZE*5(%xsp)   /* save ocall_index */
   2fe2f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
    /*
     * save the inside stack context
     *     push TD.last_sp
     *     set TD.last_sp = xsp
     */
    READ_TD_DATA self_addr
   2fe34:	65 48 8b 04 25 00 00 	mov    %gs:0x0,%rax
   2fe3b:	00 00 
    mov     %xax, %xbx 
   2fe3d:	48 89 c3             	mov    %rax,%rbx

    /* call update_ocall_lastsp */
#ifdef LINUX32
    mov     %xsp, (%xsp)
#else
    mov     %xsp, %xdi
   2fe40:	48 89 e7             	mov    %rsp,%rdi
#endif
    
    call    update_ocall_lastsp         /* xax: td.last_sp */
   2fe43:	e8 88 31 fd ff       	callq  2fd0 <update_ocall_lastsp>

#ifdef LINUX64
    mov     SE_WORDSIZE*12(%xsp), %xdi   /* restore xdi */
   2fe48:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    mov     SE_WORDSIZE*13(%xsp), %xsi   /* restore xdi */
   2fe4d:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
#endif

    /* restore outside stack context */
    mov     first_ssa_gpr(%xbx), %xdx
   2fe52:	48 8b 53 20          	mov    0x20(%rbx),%rdx
    mov     ssa_bp_u(%xdx), %xbp
   2fe56:	48 8b aa 98 00 00 00 	mov    0x98(%rdx),%rbp
    mov     ssa_sp_u(%xdx), %xsp
   2fe5d:	48 8b a2 90 00 00 00 	mov    0x90(%rdx),%rsp
     *                    | ret_addr    |
     *                    | xbp_u       |
     *                    | xsp_u       |
     *                    | ...         |
     */
    mov     -1*SE_WORDSIZE(%xax), %xbx  /* return address */
   2fe64:	48 8b 58 f8          	mov    -0x8(%rax),%rbx
    mov     $SE_EEXIT, %xax             /* EEXIT leaf */
   2fe68:	48 c7 c0 04 00 00 00 	mov    $0x4,%rax

    /* Clear all GPRs, except xax, xbx, xdi, and xsi*/
    xor     %xcx, %xcx
   2fe6f:	48 31 c9             	xor    %rcx,%rcx
    xor     %xdx, %xdx
   2fe72:	48 31 d2             	xor    %rdx,%rdx
#ifdef LINUX64
    xor     %r8,  %r8
   2fe75:	4d 31 c0             	xor    %r8,%r8
    xor     %r9,  %r9
   2fe78:	4d 31 c9             	xor    %r9,%r9
    xor     %r10, %r10
   2fe7b:	4d 31 d2             	xor    %r10,%r10
    xor     %r11, %r11
   2fe7e:	4d 31 db             	xor    %r11,%r11
    xor     %r12, %r12
   2fe81:	4d 31 e4             	xor    %r12,%r12
    xor     %r13, %r13
   2fe84:	4d 31 ed             	xor    %r13,%r13
    xor     %r14, %r14
   2fe87:	4d 31 f6             	xor    %r14,%r14
    xor     %r15, %r15
   2fe8a:	4d 31 ff             	xor    %r15,%r15
#endif

    /* Set status flags to pre-defined values */
    add     %xdx, %xdx          /* OF = SF = AF = CF = 0; ZF = PF = 1 */
   2fe8d:	48 01 d2             	add    %rdx,%rdx
   2fe90:	0f 01 d7             	enclu  

000000000002fe93 <__morestack>:
 * stick ocall bridge and proxy frame together
 * ------------------------------------------------------------------
 */
DECLARE_LOCAL_FUNC __morestack
    .cfi_startproc
    push %xbp
   2fe93:	55                   	push   %rbp
    .cfi_def_cfa_offset     2*SE_WORDSIZE
    .cfi_offset             xbp,-2*SE_WORDSIZE
    mov %xsp, %xbp
   2fe94:	48 89 e5             	mov    %rsp,%rbp
    .cfi_def_cfa_register   xbp
    sub $(4*SE_WORDSIZE), %xsp
   2fe97:	48 83 ec 20          	sub    $0x20,%rsp
    mov (2*SE_WORDSIZE)(%xbp), %xax
    mov %xax, (0*SE_WORDSIZE)(%xsp)
    mov (3*SE_WORDSIZE)(%xbp), %xax
    mov %xax, (1*SE_WORDSIZE)(%xsp)
#endif
    call        do_ocall
   2fe9b:	e8 db fe ff ff       	callq  2fd7b <do_ocall>
    leave
   2fea0:	c9                   	leaveq 
    ret
   2fea1:	c3                   	retq   

000000000002fea2 <asm_oret>:
    .cfi_endproc

DECLARE_GLOBAL_FUNC asm_oret
    mov     %xsp, %xbx
   2fea2:	48 89 e3             	mov    %rsp,%rbx
#ifdef LINUX64
    mov     %xdi, SE_WORDSIZE(%xsp)
   2fea5:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    mov     %xsi, 2*SE_WORDSIZE(%xsp)
   2feaa:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
#endif
    mov     SE_WORDSIZE(%xbx), %xsp    /* restore thread_data.last_sp */
   2feaf:	48 8b 63 08          	mov    0x8(%rbx),%rsp

/* restore extended feature registers */
    mov     19*SE_WORDSIZE(%xsp), %xdi
   2feb3:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
   2feba:	00 
#ifdef LINUX32
    mov     %xdi, (%xsp)
#endif
    call    restore_xregs
   2febb:	e8 3e fd ff ff       	callq  2fbfe <restore_xregs>

/* memset_s */
    xor     %xax, %xax
   2fec0:	48 31 c0             	xor    %rax,%rax
    mov     11*SE_WORDSIZE(%xsp), %xcx
   2fec3:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
    sub     %xdi, %xcx
   2fec8:	48 29 f9             	sub    %rdi,%rcx
    sub     $SE_WORDSIZE, %xcx
   2fecb:	48 83 e9 08          	sub    $0x8,%rcx
    shr     $2, %xcx
   2fecf:	48 c1 e9 02          	shr    $0x2,%rcx
    cld
   2fed3:	fc                   	cld    
    rep stos %eax,%es:(%xdi)
   2fed4:	f3 ab                	rep stos %eax,%es:(%rdi)

    mov     2*SE_WORDSIZE(%xbx), %xax  /* ocall return value */
   2fed6:	48 8b 43 10          	mov    0x10(%rbx),%rax

#ifdef LINUX64
    mov     7*SE_WORDSIZE(%xsp), %r15
   2feda:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
    mov     8*SE_WORDSIZE(%xsp), %r14
   2fedf:	4c 8b 74 24 40       	mov    0x40(%rsp),%r14
    mov     9*SE_WORDSIZE(%xsp), %r13
   2fee4:	4c 8b 6c 24 48       	mov    0x48(%rsp),%r13
    mov    10*SE_WORDSIZE(%xsp), %r12
   2fee9:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
#endif

    mov    11*SE_WORDSIZE(%xsp), %xbp
   2feee:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
    mov    12*SE_WORDSIZE(%xsp), %xdi
   2fef3:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    mov    13*SE_WORDSIZE(%xsp), %xsi
   2fef8:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
    mov    14*SE_WORDSIZE(%xsp), %xbx
   2fefd:	48 8b 5c 24 70       	mov    0x70(%rsp),%rbx

    mov     %xbp, %xsp
   2ff02:	48 89 ec             	mov    %rbp,%rsp
    pop     %xbp
   2ff05:	5d                   	pop    %rbp

    ret
   2ff06:	c3                   	retq   
    /* should not come here */
    ud2
   2ff07:	0f 0b                	ud2    

000000000002ff09 <do_egetkey>:
 * EGETKEY: rbx - the address of KEYREQUEST structure
 *	   rcx - the address where the key is outputted
 * ------------------------------------------------------------------------
 */
DECLARE_LOCAL_FUNC do_egetkey
    SE_PROLOG
   2ff09:	53                   	push   %rbx
   2ff0a:	51                   	push   %rcx
   2ff0b:	52                   	push   %rdx
   2ff0c:	48 89 fb             	mov    %rdi,%rbx
   2ff0f:	48 89 f1             	mov    %rsi,%rcx
    mov  $SE_EGETKEY, %xax      /* EGETKEY leaf */
   2ff12:	48 c7 c0 01 00 00 00 	mov    $0x1,%rax
   2ff19:	0f 01 d7             	enclu  
    ENCLU
#ifdef SE_SIM
    cmp  $SGX_SUCCESS, %xax     /* In simulation mode, ZF flag will not be set */
    jnz	 .Legetkey_done         /* because the stack clean operation will always clean ZF flag */
#else
    jz   .Legetkey_done         /* if EGETKEY error, ZF flag is set and error code is set to xax */
   2ff1c:	74 03                	je     2ff21 <do_egetkey+0x18>
#endif
    xor  %xax, %xax
   2ff1e:	48 31 c0             	xor    %rax,%rax
.Legetkey_done:
    SE_EPILOG
   2ff21:	5a                   	pop    %rdx
   2ff22:	59                   	pop    %rcx
   2ff23:	5b                   	pop    %rbx
   2ff24:	c3                   	retq   

000000000002ff25 <do_ereport>:
 *          non-zero: failure
 * -------------------------------------------------------------------------
 */
.global Lereport_inst
DECLARE_LOCAL_FUNC do_ereport
    SE_PROLOG
   2ff25:	53                   	push   %rbx
   2ff26:	51                   	push   %rcx
   2ff27:	52                   	push   %rdx
   2ff28:	48 89 fb             	mov    %rdi,%rbx
   2ff2b:	48 89 f1             	mov    %rsi,%rcx
    mov       $SE_EREPORT, %xax  /* EREPORT leaf */
   2ff2e:	48 c7 c0 00 00 00 00 	mov    $0x0,%rax
    clc
   2ff35:	f8                   	clc    

000000000002ff36 <Lereport_inst>:
   2ff36:	0f 01 d7             	enclu  
Lereport_inst:
    ENCLU
    setc      %al
   2ff39:	0f 92 c0             	setb   %al
    SE_EPILOG
   2ff3c:	5a                   	pop    %rdx
   2ff3d:	59                   	pop    %rcx
   2ff3e:	5b                   	pop    %rbx
   2ff3f:	c3                   	retq   

000000000002ff40 <do_eaccept>:
    
DECLARE_GLOBAL_FUNC do_eaccept
    SE_PROLOG
   2ff40:	53                   	push   %rbx
   2ff41:	51                   	push   %rcx
   2ff42:	52                   	push   %rdx
   2ff43:	48 89 fb             	mov    %rdi,%rbx
   2ff46:	48 89 f1             	mov    %rsi,%rcx
    mov     $SE_EACCEPT, %eax
   2ff49:	b8 05 00 00 00       	mov    $0x5,%eax
   2ff4e:	0f 01 d7             	enclu  
    ENCLU
    cmp  $SGX_SUCCESS, %eax 
   2ff51:	83 f8 00             	cmp    $0x0,%eax
    jnz	 abort 
   2ff54:	75 38                	jne    2ff8e <abort>
    SE_EPILOG
   2ff56:	5a                   	pop    %rdx
   2ff57:	59                   	pop    %rcx
   2ff58:	5b                   	pop    %rbx
   2ff59:	c3                   	retq   

000000000002ff5a <do_emodpe>:

DECLARE_GLOBAL_FUNC do_emodpe
    SE_PROLOG
   2ff5a:	53                   	push   %rbx
   2ff5b:	51                   	push   %rcx
   2ff5c:	52                   	push   %rdx
   2ff5d:	48 89 fb             	mov    %rdi,%rbx
   2ff60:	48 89 f1             	mov    %rsi,%rcx
    mov     $SE_EMODPE, %eax 
   2ff63:	b8 06 00 00 00       	mov    $0x6,%eax
   2ff68:	0f 01 d7             	enclu  
    ENCLU
    SE_EPILOG
   2ff6b:	5a                   	pop    %rdx
   2ff6c:	59                   	pop    %rcx
   2ff6d:	5b                   	pop    %rbx
   2ff6e:	c3                   	retq   

000000000002ff6f <do_rdrand>:
 *	non-zero: rdrand succeeded
 *	zero: rdrand failed
 * -------------------------------------
 */
DECLARE_LOCAL_FUNC do_rdrand
    mov $_RDRAND_RETRY_TIMES, %ecx
   2ff6f:	b9 0a 00 00 00       	mov    $0xa,%ecx
   2ff74:	0f c7 f0             	rdrand %eax
.Lrdrand_retry:
    .byte 0x0F, 0xC7, 0xF0	    /* rdrand %eax */
    jc	.Lrdrand_return
   2ff77:	72 08                	jb     2ff81 <do_rdrand+0x12>
    dec	%ecx
   2ff79:	ff c9                	dec    %ecx
    jnz 	.Lrdrand_retry
   2ff7b:	75 f7                	jne    2ff74 <do_rdrand+0x5>
    xor 	%xax, %xax
   2ff7d:	48 31 c0             	xor    %rax,%rax
    ret
   2ff80:	c3                   	retq   
.Lrdrand_return:
#ifdef LINUX32
    mov     SE_WORDSIZE(%esp), %ecx
#else
    mov     %rdi, %rcx
   2ff81:	48 89 f9             	mov    %rdi,%rcx
#endif
    movl    %eax, (%xcx)
   2ff84:	89 01                	mov    %eax,(%rcx)
    mov     $1, %xax
   2ff86:	48 c7 c0 01 00 00 00 	mov    $0x1,%rax
    ret
   2ff8d:	c3                   	retq   

000000000002ff8e <abort>:
 * -------------------------------------------------------------------------
 * extern "C" void abort(void) __attribute__(__noreturn__);
 * -------------------------------------------------------------------------
 */
DECLARE_LOCAL_FUNC abort
    lea_pic g_enclave_state, %xax
   2ff8e:	48 8d 05 8f 59 20 00 	lea    0x20598f(%rip),%rax        # 235924 <g_enclave_state>
    movl    $ENCLAVE_CRASHED, (%xax)
   2ff95:	c7 00 03 00 00 00    	movl   $0x3,(%rax)
    ud2
   2ff9b:	0f 0b                	ud2    

000000000002ff9d <continue_execution>:
 */
DECLARE_LOCAL_FUNC continue_execution
#ifdef LINUX32
    mov     %xax, %xcx
#else
    mov     %xdi, %xcx
   2ff9d:	48 89 f9             	mov    %rdi,%rcx
#endif
    mov     SE_WORDSIZE*0(%xcx), %xax
   2ffa0:	48 8b 01             	mov    (%rcx),%rax
    push    %xax                       /* push xax */
   2ffa3:	50                   	push   %rax
    mov     SE_WORDSIZE*1(%xcx), %xax
   2ffa4:	48 8b 41 08          	mov    0x8(%rcx),%rax
    push    %xax                       /* push xcx */
   2ffa8:	50                   	push   %rax
    mov     SE_WORDSIZE*4(%xcx), %xax  /* xax: xsp */
   2ffa9:	48 8b 41 20          	mov    0x20(%rcx),%rax
/* x86_64 requires a 128-bytes red zone. We need to allocate buffer to avoid touching the red zone. */
    sub     $(SE_WORDSIZE + RED_ZONE_SIZE), %xax   /* allocate buffer to skip red zone and save xip */
   2ffad:	48 2d 88 00 00 00    	sub    $0x88,%rax

/* restore registers except xax, xcx, xsp */
    mov     SE_WORDSIZE*2(%xcx), %xdx
   2ffb3:	48 8b 51 10          	mov    0x10(%rcx),%rdx
    mov     SE_WORDSIZE*3(%xcx), %xbx
   2ffb7:	48 8b 59 18          	mov    0x18(%rcx),%rbx
    mov     SE_WORDSIZE*5(%xcx), %xbp
   2ffbb:	48 8b 69 28          	mov    0x28(%rcx),%rbp
    mov     SE_WORDSIZE*6(%xcx), %xsi
   2ffbf:	48 8b 71 30          	mov    0x30(%rcx),%rsi
    mov     SE_WORDSIZE*7(%xcx), %xdi
   2ffc3:	48 8b 79 38          	mov    0x38(%rcx),%rdi
#ifdef LINUX64
    mov     SE_WORDSIZE*8(%xcx), %r8
   2ffc7:	4c 8b 41 40          	mov    0x40(%rcx),%r8
    mov     SE_WORDSIZE*9(%xcx), %r9
   2ffcb:	4c 8b 49 48          	mov    0x48(%rcx),%r9
    mov     SE_WORDSIZE*10(%xcx), %r10
   2ffcf:	4c 8b 51 50          	mov    0x50(%rcx),%r10
    mov     SE_WORDSIZE*11(%xcx), %r11
   2ffd3:	4c 8b 59 58          	mov    0x58(%rcx),%r11
    mov     SE_WORDSIZE*12(%xcx), %r12
   2ffd7:	4c 8b 61 60          	mov    0x60(%rcx),%r12
    mov     SE_WORDSIZE*13(%xcx), %r13
   2ffdb:	4c 8b 69 68          	mov    0x68(%rcx),%r13
    mov     SE_WORDSIZE*14(%xcx), %r14
   2ffdf:	4c 8b 71 70          	mov    0x70(%rcx),%r14
    mov     SE_WORDSIZE*15(%xcx), %r15
   2ffe3:	4c 8b 79 78          	mov    0x78(%rcx),%r15
    push    SE_WORDSIZE*16(%xcx)
   2ffe7:	ff b1 80 00 00 00    	pushq  0x80(%rcx)
    popf    /* make sure the following instructions do not affect flags */
   2ffed:	9d                   	popfq  
    push    SE_WORDSIZE*8(%xcx)
    popf
#endif

#ifdef LINUX64
    mov     SE_WORDSIZE*17(%xcx), %xcx
   2ffee:	48 8b 89 88 00 00 00 	mov    0x88(%rcx),%rcx
#endif

/* do not setup the new stack until info is not needed any more
 * otherwise, info will be overwritten
 */
    mov     %xcx, (%xax)               /* save xip to the new stack */
   2fff5:	48 89 08             	mov    %rcx,(%rax)
    pop     %xcx                       /* restore xcx */
   2fff8:	59                   	pop    %rcx
    pop     %xsp                       /* xsp: xax */
   2fff9:	5c                   	pop    %rsp
    xchg    %xax, %xsp
   2fffa:	48 94                	xchg   %rax,%rsp
    ret     $(RED_ZONE_SIZE)           /* pop xip and red zone (if any) */
   2fffc:	c2 80 00             	retq   $0x80
